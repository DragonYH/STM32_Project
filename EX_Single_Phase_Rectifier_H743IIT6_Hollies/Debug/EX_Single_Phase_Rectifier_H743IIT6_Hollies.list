
EX_Single_Phase_Rectifier_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e514  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b0  0800e7b8  0800e7b8  0000f7b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800f168  0800f168  00010168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800f16c  0800f16c  0001016c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000008c  24000000  0800f170  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00005a58  2400008c  0800f1fc  0001108c  2**2
                  ALLOC
  7 ._user_heap_stack 00006004  24005ae4  0800f1fc  00011ae4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0001108c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000322ac  00000000  00000000  000110ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000677b  00000000  00000000  00043366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000022a8  00000000  00000000  00049ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001a3b  00000000  00000000  0004bd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003ee3a  00000000  00000000  0004d7cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002f4c0  00000000  00000000  0008c605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018525b  00000000  00000000  000bbac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000b8  00000000  00000000  00240d20  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000095d8  00000000  00000000  00240dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000078  00000000  00000000  0024a3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    000005c1  00000000  00000000  0024a428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00000058  00000000  00000000  0024a9e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400008c 	.word	0x2400008c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e79c 	.word	0x0800e79c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000090 	.word	0x24000090
 80002dc:	0800e79c 	.word	0x0800e79c

080002e0 <__aeabi_frsub>:
 80002e0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__addsf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_fsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002ec <__addsf3>:
 80002ec:	0042      	lsls	r2, r0, #1
 80002ee:	bf1f      	itttt	ne
 80002f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002f4:	ea92 0f03 	teqne	r2, r3
 80002f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000300:	d06a      	beq.n	80003d8 <__addsf3+0xec>
 8000302:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000306:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800030a:	bfc1      	itttt	gt
 800030c:	18d2      	addgt	r2, r2, r3
 800030e:	4041      	eorgt	r1, r0
 8000310:	4048      	eorgt	r0, r1
 8000312:	4041      	eorgt	r1, r0
 8000314:	bfb8      	it	lt
 8000316:	425b      	neglt	r3, r3
 8000318:	2b19      	cmp	r3, #25
 800031a:	bf88      	it	hi
 800031c:	4770      	bxhi	lr
 800031e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000322:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000326:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800032a:	bf18      	it	ne
 800032c:	4240      	negne	r0, r0
 800032e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000332:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000336:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800033a:	bf18      	it	ne
 800033c:	4249      	negne	r1, r1
 800033e:	ea92 0f03 	teq	r2, r3
 8000342:	d03f      	beq.n	80003c4 <__addsf3+0xd8>
 8000344:	f1a2 0201 	sub.w	r2, r2, #1
 8000348:	fa41 fc03 	asr.w	ip, r1, r3
 800034c:	eb10 000c 	adds.w	r0, r0, ip
 8000350:	f1c3 0320 	rsb	r3, r3, #32
 8000354:	fa01 f103 	lsl.w	r1, r1, r3
 8000358:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800035c:	d502      	bpl.n	8000364 <__addsf3+0x78>
 800035e:	4249      	negs	r1, r1
 8000360:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000364:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000368:	d313      	bcc.n	8000392 <__addsf3+0xa6>
 800036a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800036e:	d306      	bcc.n	800037e <__addsf3+0x92>
 8000370:	0840      	lsrs	r0, r0, #1
 8000372:	ea4f 0131 	mov.w	r1, r1, rrx
 8000376:	f102 0201 	add.w	r2, r2, #1
 800037a:	2afe      	cmp	r2, #254	@ 0xfe
 800037c:	d251      	bcs.n	8000422 <__addsf3+0x136>
 800037e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000382:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000386:	bf08      	it	eq
 8000388:	f020 0001 	biceq.w	r0, r0, #1
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	4770      	bx	lr
 8000392:	0049      	lsls	r1, r1, #1
 8000394:	eb40 0000 	adc.w	r0, r0, r0
 8000398:	3a01      	subs	r2, #1
 800039a:	bf28      	it	cs
 800039c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80003a0:	d2ed      	bcs.n	800037e <__addsf3+0x92>
 80003a2:	fab0 fc80 	clz	ip, r0
 80003a6:	f1ac 0c08 	sub.w	ip, ip, #8
 80003aa:	ebb2 020c 	subs.w	r2, r2, ip
 80003ae:	fa00 f00c 	lsl.w	r0, r0, ip
 80003b2:	bfaa      	itet	ge
 80003b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003b8:	4252      	neglt	r2, r2
 80003ba:	4318      	orrge	r0, r3
 80003bc:	bfbc      	itt	lt
 80003be:	40d0      	lsrlt	r0, r2
 80003c0:	4318      	orrlt	r0, r3
 80003c2:	4770      	bx	lr
 80003c4:	f092 0f00 	teq	r2, #0
 80003c8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003cc:	bf06      	itte	eq
 80003ce:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003d2:	3201      	addeq	r2, #1
 80003d4:	3b01      	subne	r3, #1
 80003d6:	e7b5      	b.n	8000344 <__addsf3+0x58>
 80003d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003e0:	bf18      	it	ne
 80003e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003e6:	d021      	beq.n	800042c <__addsf3+0x140>
 80003e8:	ea92 0f03 	teq	r2, r3
 80003ec:	d004      	beq.n	80003f8 <__addsf3+0x10c>
 80003ee:	f092 0f00 	teq	r2, #0
 80003f2:	bf08      	it	eq
 80003f4:	4608      	moveq	r0, r1
 80003f6:	4770      	bx	lr
 80003f8:	ea90 0f01 	teq	r0, r1
 80003fc:	bf1c      	itt	ne
 80003fe:	2000      	movne	r0, #0
 8000400:	4770      	bxne	lr
 8000402:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000406:	d104      	bne.n	8000412 <__addsf3+0x126>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	bf28      	it	cs
 800040c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000410:	4770      	bx	lr
 8000412:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000416:	bf3c      	itt	cc
 8000418:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800041c:	4770      	bxcc	lr
 800041e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000422:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000426:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800042a:	4770      	bx	lr
 800042c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000430:	bf16      	itet	ne
 8000432:	4608      	movne	r0, r1
 8000434:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000438:	4601      	movne	r1, r0
 800043a:	0242      	lsls	r2, r0, #9
 800043c:	bf06      	itte	eq
 800043e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000442:	ea90 0f01 	teqeq	r0, r1
 8000446:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800044a:	4770      	bx	lr

0800044c <__aeabi_ui2f>:
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e004      	b.n	800045c <__aeabi_i2f+0x8>
 8000452:	bf00      	nop

08000454 <__aeabi_i2f>:
 8000454:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000458:	bf48      	it	mi
 800045a:	4240      	negmi	r0, r0
 800045c:	ea5f 0c00 	movs.w	ip, r0
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000468:	4601      	mov	r1, r0
 800046a:	f04f 0000 	mov.w	r0, #0
 800046e:	e01c      	b.n	80004aa <__aeabi_l2f+0x2a>

08000470 <__aeabi_ul2f>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	f04f 0300 	mov.w	r3, #0
 800047c:	e00a      	b.n	8000494 <__aeabi_l2f+0x14>
 800047e:	bf00      	nop

08000480 <__aeabi_l2f>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800048c:	d502      	bpl.n	8000494 <__aeabi_l2f+0x14>
 800048e:	4240      	negs	r0, r0
 8000490:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000494:	ea5f 0c01 	movs.w	ip, r1
 8000498:	bf02      	ittt	eq
 800049a:	4684      	moveq	ip, r0
 800049c:	4601      	moveq	r1, r0
 800049e:	2000      	moveq	r0, #0
 80004a0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80004a4:	bf08      	it	eq
 80004a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80004aa:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80004ae:	fabc f28c 	clz	r2, ip
 80004b2:	3a08      	subs	r2, #8
 80004b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004b8:	db10      	blt.n	80004dc <__aeabi_l2f+0x5c>
 80004ba:	fa01 fc02 	lsl.w	ip, r1, r2
 80004be:	4463      	add	r3, ip
 80004c0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004c4:	f1c2 0220 	rsb	r2, r2, #32
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	fa20 f202 	lsr.w	r2, r0, r2
 80004d0:	eb43 0002 	adc.w	r0, r3, r2
 80004d4:	bf08      	it	eq
 80004d6:	f020 0001 	biceq.w	r0, r0, #1
 80004da:	4770      	bx	lr
 80004dc:	f102 0220 	add.w	r2, r2, #32
 80004e0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004e4:	f1c2 0220 	rsb	r2, r2, #32
 80004e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004ec:	fa21 f202 	lsr.w	r2, r1, r2
 80004f0:	eb43 0002 	adc.w	r0, r3, r2
 80004f4:	bf08      	it	eq
 80004f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004fa:	4770      	bx	lr

080004fc <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
 8000510:	615a      	str	r2, [r3, #20]
 8000512:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000514:	4b33      	ldr	r3, [pc, #204]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 8000516:	4a34      	ldr	r2, [pc, #208]	@ (80005e8 <MX_ADC3_Init+0xec>)
 8000518:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800051a:	4b32      	ldr	r3, [pc, #200]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 800051c:	2200      	movs	r2, #0
 800051e:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000520:	4b30      	ldr	r3, [pc, #192]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000526:	4b2f      	ldr	r3, [pc, #188]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 8000528:	2204      	movs	r2, #4
 800052a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800052c:	4b2d      	ldr	r3, [pc, #180]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 800052e:	2200      	movs	r2, #0
 8000530:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000532:	4b2c      	ldr	r3, [pc, #176]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 8000534:	2200      	movs	r2, #0
 8000536:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000538:	4b2a      	ldr	r3, [pc, #168]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 800053a:	2201      	movs	r2, #1
 800053c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800053e:	4b29      	ldr	r3, [pc, #164]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 8000540:	2200      	movs	r2, #0
 8000542:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000544:	4b27      	ldr	r3, [pc, #156]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 8000546:	2200      	movs	r2, #0
 8000548:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800054a:	4b26      	ldr	r3, [pc, #152]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 800054c:	2200      	movs	r2, #0
 800054e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000550:	4b24      	ldr	r3, [pc, #144]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 8000552:	2200      	movs	r2, #0
 8000554:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000556:	4b23      	ldr	r3, [pc, #140]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 8000558:	2200      	movs	r2, #0
 800055a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800055c:	4b21      	ldr	r3, [pc, #132]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 800055e:	2200      	movs	r2, #0
 8000560:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = ENABLE;
 8000562:	4b20      	ldr	r3, [pc, #128]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 8000564:	2201      	movs	r2, #1
 8000566:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 15;
 800056a:	4b1e      	ldr	r3, [pc, #120]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 800056c:	220f      	movs	r2, #15
 800056e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000570:	4b1c      	ldr	r3, [pc, #112]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 8000572:	2280      	movs	r2, #128	@ 0x80
 8000574:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000576:	4b1b      	ldr	r3, [pc, #108]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 8000578:	2200      	movs	r2, #0
 800057a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800057c:	4b19      	ldr	r3, [pc, #100]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 800057e:	2201      	movs	r2, #1
 8000580:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000582:	4818      	ldr	r0, [pc, #96]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 8000584:	f001 fb5e 	bl	8001c44 <HAL_ADC_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800058e:	f000 fc1d 	bl	8000dcc <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000592:	4b14      	ldr	r3, [pc, #80]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000598:	4812      	ldr	r0, [pc, #72]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 800059a:	f001 fb53 	bl	8001c44 <HAL_ADC_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 80005a4:	f000 fc12 	bl	8000dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005a8:	4b10      	ldr	r3, [pc, #64]	@ (80005ec <MX_ADC3_Init+0xf0>)
 80005aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ac:	2306      	movs	r3, #6
 80005ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80005b0:	2307      	movs	r3, #7
 80005b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005b4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80005b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ba:	2304      	movs	r3, #4
 80005bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80005c2:	2300      	movs	r3, #0
 80005c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4619      	mov	r1, r3
 80005ca:	4806      	ldr	r0, [pc, #24]	@ (80005e4 <MX_ADC3_Init+0xe8>)
 80005cc:	f001 fea8 	bl	8002320 <HAL_ADC_ConfigChannel>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_ADC3_Init+0xde>
  {
    Error_Handler();
 80005d6:	f000 fbf9 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80005da:	bf00      	nop
 80005dc:	3720      	adds	r7, #32
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	240000a8 	.word	0x240000a8
 80005e8:	58026000 	.word	0x58026000
 80005ec:	cb840000 	.word	0xcb840000

080005f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b0b4      	sub	sp, #208	@ 0xd0
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	22c0      	movs	r2, #192	@ 0xc0
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f00d fd8d 	bl	800e120 <memset>
  if(adcHandle->Instance==ADC3)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a1d      	ldr	r2, [pc, #116]	@ (8000680 <HAL_ADC_MspInit+0x90>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d132      	bne.n	8000676 <HAL_ADC_MspInit+0x86>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000610:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000614:	f04f 0300 	mov.w	r3, #0
 8000618:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 800061c:	2319      	movs	r3, #25
 800061e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 504;
 8000620:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8000624:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 7;
 8000626:	2307      	movs	r3, #7
 8000628:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800062a:	2302      	movs	r3, #2
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800062e:	2302      	movs	r3, #2
 8000630:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000632:	2300      	movs	r3, #0
 8000634:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000636:	2300      	movs	r3, #0
 8000638:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800063e:	2300      	movs	r3, #0
 8000640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	4618      	mov	r0, r3
 800064a:	f004 feff 	bl	800544c <HAL_RCCEx_PeriphCLKConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 8000654:	f000 fbba 	bl	8000dcc <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000658:	4b0a      	ldr	r3, [pc, #40]	@ (8000684 <HAL_ADC_MspInit+0x94>)
 800065a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800065e:	4a09      	ldr	r2, [pc, #36]	@ (8000684 <HAL_ADC_MspInit+0x94>)
 8000660:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000664:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <HAL_ADC_MspInit+0x94>)
 800066a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800066e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000676:	bf00      	nop
 8000678:	37d0      	adds	r7, #208	@ 0xd0
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	58026000 	.word	0x58026000
 8000684:	58024400 	.word	0x58024400

08000688 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	@ 0x28
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2224      	movs	r2, #36	@ 0x24
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f00d fd43 	bl	800e120 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_DAC1_Init+0x5c>)
 800069c:	4a12      	ldr	r2, [pc, #72]	@ (80006e8 <MX_DAC1_Init+0x60>)
 800069e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006a0:	4810      	ldr	r0, [pc, #64]	@ (80006e4 <MX_DAC1_Init+0x5c>)
 80006a2:	f002 fd7d 	bl	80031a0 <HAL_DAC_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80006ac:	f000 fb8e 	bl	8000dcc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006bc:	2301      	movs	r3, #1
 80006be:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	4619      	mov	r1, r3
 80006ca:	4806      	ldr	r0, [pc, #24]	@ (80006e4 <MX_DAC1_Init+0x5c>)
 80006cc:	f002 fe6c 	bl	80033a8 <HAL_DAC_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80006d6:	f000 fb79 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	@ 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2400010c 	.word	0x2400010c
 80006e8:	40007400 	.word	0x40007400

080006ec <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	@ 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a1c      	ldr	r2, [pc, #112]	@ (800077c <HAL_DAC_MspInit+0x90>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d131      	bne.n	8000772 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800070e:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <HAL_DAC_MspInit+0x94>)
 8000710:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000714:	4a1a      	ldr	r2, [pc, #104]	@ (8000780 <HAL_DAC_MspInit+0x94>)
 8000716:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800071a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800071e:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <HAL_DAC_MspInit+0x94>)
 8000720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000724:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <HAL_DAC_MspInit+0x94>)
 800072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000732:	4a13      	ldr	r2, [pc, #76]	@ (8000780 <HAL_DAC_MspInit+0x94>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073c:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <HAL_DAC_MspInit+0x94>)
 800073e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800074a:	2310      	movs	r3, #16
 800074c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800074e:	2303      	movs	r3, #3
 8000750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	4809      	ldr	r0, [pc, #36]	@ (8000784 <HAL_DAC_MspInit+0x98>)
 800075e:	f002 ff6f 	bl	8003640 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2105      	movs	r1, #5
 8000766:	2036      	movs	r0, #54	@ 0x36
 8000768:	f002 fc7a 	bl	8003060 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800076c:	2036      	movs	r0, #54	@ 0x36
 800076e:	f002 fc91 	bl	8003094 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000772:	bf00      	nop
 8000774:	3728      	adds	r7, #40	@ 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40007400 	.word	0x40007400
 8000780:	58024400 	.word	0x58024400
 8000784:	58020000 	.word	0x58020000

08000788 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  UserInit();
 800078c:	f00d f952 	bl	800da34 <UserInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateLED */
  stateLEDHandle = osThreadNew(StartStateLED, NULL, &stateLED_attributes);
 8000790:	4a18      	ldr	r2, [pc, #96]	@ (80007f4 <MX_FREERTOS_Init+0x6c>)
 8000792:	2100      	movs	r1, #0
 8000794:	4818      	ldr	r0, [pc, #96]	@ (80007f8 <MX_FREERTOS_Init+0x70>)
 8000796:	f009 fb1b 	bl	8009dd0 <osThreadNew>
 800079a:	4603      	mov	r3, r0
 800079c:	4a17      	ldr	r2, [pc, #92]	@ (80007fc <MX_FREERTOS_Init+0x74>)
 800079e:	6013      	str	r3, [r2, #0]

  /* creation of mcuTemperature */
  mcuTemperatureHandle = osThreadNew(StartMcuTemperature, NULL, &mcuTemperature_attributes);
 80007a0:	4a17      	ldr	r2, [pc, #92]	@ (8000800 <MX_FREERTOS_Init+0x78>)
 80007a2:	2100      	movs	r1, #0
 80007a4:	4817      	ldr	r0, [pc, #92]	@ (8000804 <MX_FREERTOS_Init+0x7c>)
 80007a6:	f009 fb13 	bl	8009dd0 <osThreadNew>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4a16      	ldr	r2, [pc, #88]	@ (8000808 <MX_FREERTOS_Init+0x80>)
 80007ae:	6013      	str	r3, [r2, #0]

  /* creation of oledDisplay */
  oledDisplayHandle = osThreadNew(StartOledDisplay, NULL, &oledDisplay_attributes);
 80007b0:	4a16      	ldr	r2, [pc, #88]	@ (800080c <MX_FREERTOS_Init+0x84>)
 80007b2:	2100      	movs	r1, #0
 80007b4:	4816      	ldr	r0, [pc, #88]	@ (8000810 <MX_FREERTOS_Init+0x88>)
 80007b6:	f009 fb0b 	bl	8009dd0 <osThreadNew>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4a15      	ldr	r2, [pc, #84]	@ (8000814 <MX_FREERTOS_Init+0x8c>)
 80007be:	6013      	str	r3, [r2, #0]

  /* creation of dcSampling */
  dcSamplingHandle = osThreadNew(StartDCSampling, NULL, &dcSampling_attributes);
 80007c0:	4a15      	ldr	r2, [pc, #84]	@ (8000818 <MX_FREERTOS_Init+0x90>)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4815      	ldr	r0, [pc, #84]	@ (800081c <MX_FREERTOS_Init+0x94>)
 80007c6:	f009 fb03 	bl	8009dd0 <osThreadNew>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4a14      	ldr	r2, [pc, #80]	@ (8000820 <MX_FREERTOS_Init+0x98>)
 80007ce:	6013      	str	r3, [r2, #0]

  /* creation of circuitProtecti */
  circuitProtectiHandle = osThreadNew(StartCircuitProtection, NULL, &circuitProtecti_attributes);
 80007d0:	4a14      	ldr	r2, [pc, #80]	@ (8000824 <MX_FREERTOS_Init+0x9c>)
 80007d2:	2100      	movs	r1, #0
 80007d4:	4814      	ldr	r0, [pc, #80]	@ (8000828 <MX_FREERTOS_Init+0xa0>)
 80007d6:	f009 fafb 	bl	8009dd0 <osThreadNew>
 80007da:	4603      	mov	r3, r0
 80007dc:	4a13      	ldr	r2, [pc, #76]	@ (800082c <MX_FREERTOS_Init+0xa4>)
 80007de:	6013      	str	r3, [r2, #0]

  /* creation of dcControl */
  dcControlHandle = osThreadNew(StartDCControl, NULL, &dcControl_attributes);
 80007e0:	4a13      	ldr	r2, [pc, #76]	@ (8000830 <MX_FREERTOS_Init+0xa8>)
 80007e2:	2100      	movs	r1, #0
 80007e4:	4813      	ldr	r0, [pc, #76]	@ (8000834 <MX_FREERTOS_Init+0xac>)
 80007e6:	f009 faf3 	bl	8009dd0 <osThreadNew>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a12      	ldr	r2, [pc, #72]	@ (8000838 <MX_FREERTOS_Init+0xb0>)
 80007ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	0800e820 	.word	0x0800e820
 80007f8:	0800da8d 	.word	0x0800da8d
 80007fc:	24000120 	.word	0x24000120
 8000800:	0800e844 	.word	0x0800e844
 8000804:	0800db21 	.word	0x0800db21
 8000808:	24000124 	.word	0x24000124
 800080c:	0800e868 	.word	0x0800e868
 8000810:	0800dbc9 	.word	0x0800dbc9
 8000814:	24000128 	.word	0x24000128
 8000818:	0800e88c 	.word	0x0800e88c
 800081c:	0800dbd9 	.word	0x0800dbd9
 8000820:	2400012c 	.word	0x2400012c
 8000824:	0800e8b0 	.word	0x0800e8b0
 8000828:	0800dc21 	.word	0x0800dc21
 800082c:	24000130 	.word	0x24000130
 8000830:	0800e8d4 	.word	0x0800e8d4
 8000834:	0800dd59 	.word	0x0800dd59
 8000838:	24000134 	.word	0x24000134

0800083c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	@ 0x30
 8000840:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	4b66      	ldr	r3, [pc, #408]	@ (80009ec <MX_GPIO_Init+0x1b0>)
 8000854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000858:	4a64      	ldr	r2, [pc, #400]	@ (80009ec <MX_GPIO_Init+0x1b0>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000862:	4b62      	ldr	r3, [pc, #392]	@ (80009ec <MX_GPIO_Init+0x1b0>)
 8000864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000868:	f003 0304 	and.w	r3, r3, #4
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000870:	4b5e      	ldr	r3, [pc, #376]	@ (80009ec <MX_GPIO_Init+0x1b0>)
 8000872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000876:	4a5d      	ldr	r2, [pc, #372]	@ (80009ec <MX_GPIO_Init+0x1b0>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800087c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000880:	4b5a      	ldr	r3, [pc, #360]	@ (80009ec <MX_GPIO_Init+0x1b0>)
 8000882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b57      	ldr	r3, [pc, #348]	@ (80009ec <MX_GPIO_Init+0x1b0>)
 8000890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000894:	4a55      	ldr	r2, [pc, #340]	@ (80009ec <MX_GPIO_Init+0x1b0>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800089e:	4b53      	ldr	r3, [pc, #332]	@ (80009ec <MX_GPIO_Init+0x1b0>)
 80008a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ac:	4b4f      	ldr	r3, [pc, #316]	@ (80009ec <MX_GPIO_Init+0x1b0>)
 80008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b2:	4a4e      	ldr	r2, [pc, #312]	@ (80009ec <MX_GPIO_Init+0x1b0>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008bc:	4b4b      	ldr	r3, [pc, #300]	@ (80009ec <MX_GPIO_Init+0x1b0>)
 80008be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ca:	4b48      	ldr	r3, [pc, #288]	@ (80009ec <MX_GPIO_Init+0x1b0>)
 80008cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d0:	4a46      	ldr	r2, [pc, #280]	@ (80009ec <MX_GPIO_Init+0x1b0>)
 80008d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008da:	4b44      	ldr	r3, [pc, #272]	@ (80009ec <MX_GPIO_Init+0x1b0>)
 80008dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008e8:	4b40      	ldr	r3, [pc, #256]	@ (80009ec <MX_GPIO_Init+0x1b0>)
 80008ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ee:	4a3f      	ldr	r2, [pc, #252]	@ (80009ec <MX_GPIO_Init+0x1b0>)
 80008f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f8:	4b3c      	ldr	r3, [pc, #240]	@ (80009ec <MX_GPIO_Init+0x1b0>)
 80008fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2120      	movs	r1, #32
 800090a:	4839      	ldr	r0, [pc, #228]	@ (80009f0 <MX_GPIO_Init+0x1b4>)
 800090c:	f003 f848 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2102      	movs	r1, #2
 8000914:	4837      	ldr	r0, [pc, #220]	@ (80009f4 <MX_GPIO_Init+0x1b8>)
 8000916:	f003 f843 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2188      	movs	r1, #136	@ 0x88
 800091e:	4836      	ldr	r0, [pc, #216]	@ (80009f8 <MX_GPIO_Init+0x1bc>)
 8000920:	f003 f83e 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0|OLED_RST_Pin, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2141      	movs	r1, #65	@ 0x41
 8000928:	4834      	ldr	r0, [pc, #208]	@ (80009fc <MX_GPIO_Init+0x1c0>)
 800092a:	f003 f839 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 800092e:	2320      	movs	r3, #32
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800093a:	2301      	movs	r3, #1
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	482a      	ldr	r0, [pc, #168]	@ (80009f0 <MX_GPIO_Init+0x1b4>)
 8000946:	f002 fe7b 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 800094a:	2302      	movs	r3, #2
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000956:	2301      	movs	r3, #1
 8000958:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4824      	ldr	r0, [pc, #144]	@ (80009f4 <MX_GPIO_Init+0x1b8>)
 8000962:	f002 fe6d 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 8000966:	2388      	movs	r3, #136	@ 0x88
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	481e      	ldr	r0, [pc, #120]	@ (80009f8 <MX_GPIO_Init+0x1bc>)
 800097e:	f002 fe5f 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 8000982:	2340      	movs	r3, #64	@ 0x40
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000986:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098c:	2301      	movs	r3, #1
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4818      	ldr	r0, [pc, #96]	@ (80009f8 <MX_GPIO_Init+0x1bc>)
 8000998:	f002 fe52 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800099c:	2301      	movs	r3, #1
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4812      	ldr	r0, [pc, #72]	@ (80009fc <MX_GPIO_Init+0x1c0>)
 80009b4:	f002 fe44 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 80009b8:	2340      	movs	r3, #64	@ 0x40
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009c4:	2301      	movs	r3, #1
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	480b      	ldr	r0, [pc, #44]	@ (80009fc <MX_GPIO_Init+0x1c0>)
 80009d0:	f002 fe36 	bl	8003640 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2104      	movs	r1, #4
 80009d8:	2017      	movs	r0, #23
 80009da:	f002 fb41 	bl	8003060 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009de:	2017      	movs	r0, #23
 80009e0:	f002 fb58 	bl	8003094 <HAL_NVIC_EnableIRQ>

}
 80009e4:	bf00      	nop
 80009e6:	3730      	adds	r7, #48	@ 0x30
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	58024400 	.word	0x58024400
 80009f0:	58020800 	.word	0x58020800
 80009f4:	58020400 	.word	0x58020400
 80009f8:	58021800 	.word	0x58021800
 80009fc:	58022000 	.word	0x58022000

08000a00 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a06:	4a1c      	ldr	r2, [pc, #112]	@ (8000a78 <MX_I2C1_Init+0x78>)
 8000a08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a7c <MX_I2C1_Init+0x7c>)
 8000a0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a10:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a16:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a22:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a3a:	480e      	ldr	r0, [pc, #56]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a3c:	f002 fffe 	bl	8003a3c <HAL_I2C_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a46:	f000 f9c1 	bl	8000dcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4809      	ldr	r0, [pc, #36]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a4e:	f003 fc19 	bl	8004284 <HAL_I2CEx_ConfigAnalogFilter>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a58:	f000 f9b8 	bl	8000dcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a60:	f003 fc5b 	bl	800431a <HAL_I2CEx_ConfigDigitalFilter>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a6a:	f000 f9af 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	24000138 	.word	0x24000138
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	307075b1 	.word	0x307075b1

08000a80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b0ba      	sub	sp, #232	@ 0xe8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	22c0      	movs	r2, #192	@ 0xc0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f00d fb3d 	bl	800e120 <memset>
  if(i2cHandle->Instance==I2C1)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a26      	ldr	r2, [pc, #152]	@ (8000b44 <HAL_I2C_MspInit+0xc4>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d145      	bne.n	8000b3c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ab0:	f04f 0208 	mov.w	r2, #8
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f004 fcc0 	bl	800544c <HAL_RCCEx_PeriphCLKConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000ad2:	f000 f97b 	bl	8000dcc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <HAL_I2C_MspInit+0xc8>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000adc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b48 <HAL_I2C_MspInit+0xc8>)
 8000ade:	f043 0302 	orr.w	r3, r3, #2
 8000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae6:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <HAL_I2C_MspInit+0xc8>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000af4:	23c0      	movs	r3, #192	@ 0xc0
 8000af6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afa:	2312      	movs	r3, #18
 8000afc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b06:	2301      	movs	r3, #1
 8000b08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b16:	4619      	mov	r1, r3
 8000b18:	480c      	ldr	r0, [pc, #48]	@ (8000b4c <HAL_I2C_MspInit+0xcc>)
 8000b1a:	f002 fd91 	bl	8003640 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <HAL_I2C_MspInit+0xc8>)
 8000b20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b24:	4a08      	ldr	r2, [pc, #32]	@ (8000b48 <HAL_I2C_MspInit+0xc8>)
 8000b26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b2a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_I2C_MspInit+0xc8>)
 8000b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	37e8      	adds	r7, #232	@ 0xe8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40005400 	.word	0x40005400
 8000b48:	58024400 	.word	0x58024400
 8000b4c:	58020400 	.word	0x58020400

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b54:	f000 f8fc 	bl	8000d50 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b58:	f000 fde0 	bl	800171c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5c:	f000 f81a 	bl	8000b94 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b60:	f000 f8c6 	bl	8000cf0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b64:	f7ff fe6a 	bl	800083c <MX_GPIO_Init>
  MX_ADC3_Init();
 8000b68:	f7ff fcc8 	bl	80004fc <MX_ADC3_Init>
  MX_SPI1_Init();
 8000b6c:	f000 f934 	bl	8000dd8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000b70:	f000 f988 	bl	8000e84 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000b74:	f7ff ff44 	bl	8000a00 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000b78:	f000 fbdc 	bl	8001334 <MX_TIM2_Init>
  MX_DAC1_Init();
 8000b7c:	f7ff fd84 	bl	8000688 <MX_DAC1_Init>
  MX_TIM8_Init();
 8000b80:	f000 fc50 	bl	8001424 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b84:	f009 f8da 	bl	8009d3c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000b88:	f7ff fdfe 	bl	8000788 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b8c:	f009 f8fa 	bl	8009d84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <main+0x40>

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b09e      	sub	sp, #120	@ 0x78
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b9e:	224c      	movs	r2, #76	@ 0x4c
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f00d fabc 	bl	800e120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2220      	movs	r2, #32
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f00d fab5 	bl	800e120 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bb6:	2002      	movs	r0, #2
 8000bb8:	f003 fbfc 	bl	80043b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	4b48      	ldr	r3, [pc, #288]	@ (8000ce4 <SystemClock_Config+0x150>)
 8000bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bc4:	4a47      	ldr	r2, [pc, #284]	@ (8000ce4 <SystemClock_Config+0x150>)
 8000bc6:	f023 0301 	bic.w	r3, r3, #1
 8000bca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000bcc:	4b45      	ldr	r3, [pc, #276]	@ (8000ce4 <SystemClock_Config+0x150>)
 8000bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b44      	ldr	r3, [pc, #272]	@ (8000ce8 <SystemClock_Config+0x154>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	4a43      	ldr	r2, [pc, #268]	@ (8000ce8 <SystemClock_Config+0x154>)
 8000bdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000be0:	6193      	str	r3, [r2, #24]
 8000be2:	4b41      	ldr	r3, [pc, #260]	@ (8000ce8 <SystemClock_Config+0x154>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bee:	bf00      	nop
 8000bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ce8 <SystemClock_Config+0x154>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bfc:	d1f8      	bne.n	8000bf0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8000cec <SystemClock_Config+0x158>)
 8000c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c04:	4a39      	ldr	r2, [pc, #228]	@ (8000cec <SystemClock_Config+0x158>)
 8000c06:	f043 0302 	orr.w	r3, r3, #2
 8000c0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c0e:	4b37      	ldr	r3, [pc, #220]	@ (8000cec <SystemClock_Config+0x158>)
 8000c10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	4b31      	ldr	r3, [pc, #196]	@ (8000ce8 <SystemClock_Config+0x154>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a30      	ldr	r2, [pc, #192]	@ (8000ce8 <SystemClock_Config+0x154>)
 8000c26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce8 <SystemClock_Config+0x154>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce4 <SystemClock_Config+0x150>)
 8000c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3a:	4a2a      	ldr	r2, [pc, #168]	@ (8000ce4 <SystemClock_Config+0x150>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c42:	4b28      	ldr	r3, [pc, #160]	@ (8000ce4 <SystemClock_Config+0x150>)
 8000c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c4e:	bf00      	nop
 8000c50:	4b25      	ldr	r3, [pc, #148]	@ (8000ce8 <SystemClock_Config+0x154>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c5c:	d1f8      	bne.n	8000c50 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c66:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c70:	2305      	movs	r3, #5
 8000c72:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c74:	23c0      	movs	r3, #192	@ 0xc0
 8000c76:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c84:	2308      	movs	r3, #8
 8000c86:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c94:	4618      	mov	r0, r3
 8000c96:	f003 fbc7 	bl	8004428 <HAL_RCC_OscConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ca0:	f000 f894 	bl	8000dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca4:	233f      	movs	r3, #63	@ 0x3f
 8000ca6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cb0:	2308      	movs	r3, #8
 8000cb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cb4:	2340      	movs	r3, #64	@ 0x40
 8000cb6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cb8:	2340      	movs	r3, #64	@ 0x40
 8000cba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cc2:	2340      	movs	r3, #64	@ 0x40
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	2104      	movs	r1, #4
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f004 f805 	bl	8004cdc <HAL_RCC_ClockConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000cd8:	f000 f878 	bl	8000dcc <Error_Handler>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3778      	adds	r7, #120	@ 0x78
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	58000400 	.word	0x58000400
 8000ce8:	58024800 	.word	0x58024800
 8000cec:	58024400 	.word	0x58024400

08000cf0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b0b0      	sub	sp, #192	@ 0xc0
 8000cf4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	22c0      	movs	r2, #192	@ 0xc0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f00d fa0f 	bl	800e120 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
 8000d02:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d06:	f04f 0300 	mov.w	r3, #0
 8000d0a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000d0e:	2319      	movs	r3, #25
 8000d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 8000d12:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000d30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d34:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d36:	463b      	mov	r3, r7
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f004 fb87 	bl	800544c <HAL_RCCEx_PeriphCLKConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000d44:	f000 f842 	bl	8000dcc <Error_Handler>
  }
}
 8000d48:	bf00      	nop
 8000d4a:	37c0      	adds	r7, #192	@ 0xc0
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d62:	f002 f9a5 	bl	80030b0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d66:	2301      	movs	r3, #1
 8000d68:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d72:	231f      	movs	r3, #31
 8000d74:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d76:	2387      	movs	r3, #135	@ 0x87
 8000d78:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d82:	2301      	movs	r3, #1
 8000d84:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d86:	2301      	movs	r3, #1
 8000d88:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d92:	463b      	mov	r3, r7
 8000d94:	4618      	mov	r0, r3
 8000d96:	f002 f9c3 	bl	8003120 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d9a:	2004      	movs	r0, #4
 8000d9c:	f002 f9a0 	bl	80030e0 <HAL_MPU_Enable>

}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d101      	bne.n	8000dbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dba:	f000 fceb 	bl	8001794 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40001000 	.word	0x40001000

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
}
 8000dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <Error_Handler+0x8>

08000dd8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ddc:	4b27      	ldr	r3, [pc, #156]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000dde:	4a28      	ldr	r2, [pc, #160]	@ (8000e80 <MX_SPI1_Init+0xa8>)
 8000de0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000de2:	4b26      	ldr	r3, [pc, #152]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000de4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000de8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000dea:	4b24      	ldr	r3, [pc, #144]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000dec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000df0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000df2:	4b22      	ldr	r3, [pc, #136]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000df4:	2207      	movs	r2, #7
 8000df6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df8:	4b20      	ldr	r3, [pc, #128]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000e06:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e18:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e1e:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e24:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e2a:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000e2c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e30:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e32:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e38:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e50:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e56:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e5c:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e68:	4804      	ldr	r0, [pc, #16]	@ (8000e7c <MX_SPI1_Init+0xa4>)
 8000e6a:	f006 ffed 	bl	8007e48 <HAL_SPI_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000e74:	f7ff ffaa 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	2400018c 	.word	0x2400018c
 8000e80:	40013000 	.word	0x40013000

08000e84 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000e88:	4b28      	ldr	r3, [pc, #160]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000e8a:	4a29      	ldr	r2, [pc, #164]	@ (8000f30 <MX_SPI2_Init+0xac>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e8e:	4b27      	ldr	r3, [pc, #156]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000e90:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000e96:	4b25      	ldr	r3, [pc, #148]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000e98:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e9c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000e9e:	4b23      	ldr	r3, [pc, #140]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ea4:	4b21      	ldr	r3, [pc, #132]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000ea6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000eaa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eac:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000eb4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000eb8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000eba:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000ebc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000ec0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ece:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000ed4:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000eda:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000edc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ee0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ee2:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ee8:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <MX_SPI2_Init+0xa8>)
 8000f1a:	f006 ff95 	bl	8007e48 <HAL_SPI_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8000f24:	f7ff ff52 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	24000214 	.word	0x24000214
 8000f30:	40003800 	.word	0x40003800

08000f34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08c      	sub	sp, #48	@ 0x30
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a34      	ldr	r2, [pc, #208]	@ (8001024 <HAL_SPI_MspInit+0xf0>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d12e      	bne.n	8000fb4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f56:	4b34      	ldr	r3, [pc, #208]	@ (8001028 <HAL_SPI_MspInit+0xf4>)
 8000f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f5c:	4a32      	ldr	r2, [pc, #200]	@ (8001028 <HAL_SPI_MspInit+0xf4>)
 8000f5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f66:	4b30      	ldr	r3, [pc, #192]	@ (8001028 <HAL_SPI_MspInit+0xf4>)
 8000f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f70:	61bb      	str	r3, [r7, #24]
 8000f72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f74:	4b2c      	ldr	r3, [pc, #176]	@ (8001028 <HAL_SPI_MspInit+0xf4>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7a:	4a2b      	ldr	r2, [pc, #172]	@ (8001028 <HAL_SPI_MspInit+0xf4>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f84:	4b28      	ldr	r3, [pc, #160]	@ (8001028 <HAL_SPI_MspInit+0xf4>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 8000f92:	23a0      	movs	r3, #160	@ 0xa0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	481f      	ldr	r0, [pc, #124]	@ (800102c <HAL_SPI_MspInit+0xf8>)
 8000fae:	f002 fb47 	bl	8003640 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000fb2:	e032      	b.n	800101a <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8001030 <HAL_SPI_MspInit+0xfc>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d12d      	bne.n	800101a <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <HAL_SPI_MspInit+0xf4>)
 8000fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fc4:	4a18      	ldr	r2, [pc, #96]	@ (8001028 <HAL_SPI_MspInit+0xf4>)
 8000fc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fce:	4b16      	ldr	r3, [pc, #88]	@ (8001028 <HAL_SPI_MspInit+0xf4>)
 8000fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_SPI_MspInit+0xf4>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe2:	4a11      	ldr	r2, [pc, #68]	@ (8001028 <HAL_SPI_MspInit+0xf4>)
 8000fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fec:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <HAL_SPI_MspInit+0xf4>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000ffa:	2306      	movs	r3, #6
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001006:	2301      	movs	r3, #1
 8001008:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800100a:	2305      	movs	r3, #5
 800100c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	4807      	ldr	r0, [pc, #28]	@ (8001034 <HAL_SPI_MspInit+0x100>)
 8001016:	f002 fb13 	bl	8003640 <HAL_GPIO_Init>
}
 800101a:	bf00      	nop
 800101c:	3730      	adds	r7, #48	@ 0x30
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40013000 	.word	0x40013000
 8001028:	58024400 	.word	0x58024400
 800102c:	58020000 	.word	0x58020000
 8001030:	40003800 	.word	0x40003800
 8001034:	58022000 	.word	0x58022000

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <HAL_MspInit+0x38>)
 8001040:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001044:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <HAL_MspInit+0x38>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800104e:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <HAL_MspInit+0x38>)
 8001050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	210f      	movs	r1, #15
 8001060:	f06f 0001 	mvn.w	r0, #1
 8001064:	f001 fffc 	bl	8003060 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	58024400 	.word	0x58024400

08001074 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b090      	sub	sp, #64	@ 0x40
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b0f      	cmp	r3, #15
 8001080:	d827      	bhi.n	80010d2 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001082:	2200      	movs	r2, #0
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	2036      	movs	r0, #54	@ 0x36
 8001088:	f001 ffea 	bl	8003060 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800108c:	2036      	movs	r0, #54	@ 0x36
 800108e:	f002 f801 	bl	8003094 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001092:	4a29      	ldr	r2, [pc, #164]	@ (8001138 <HAL_InitTick+0xc4>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001098:	4b28      	ldr	r3, [pc, #160]	@ (800113c <HAL_InitTick+0xc8>)
 800109a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800109e:	4a27      	ldr	r2, [pc, #156]	@ (800113c <HAL_InitTick+0xc8>)
 80010a0:	f043 0310 	orr.w	r3, r3, #16
 80010a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010a8:	4b24      	ldr	r3, [pc, #144]	@ (800113c <HAL_InitTick+0xc8>)
 80010aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010b6:	f107 0210 	add.w	r2, r7, #16
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 f981 	bl	80053c8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d106      	bne.n	80010de <HAL_InitTick+0x6a>
 80010d0:	e001      	b.n	80010d6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e02b      	b.n	800112e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010d6:	f004 f961 	bl	800539c <HAL_RCC_GetPCLK1Freq>
 80010da:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80010dc:	e004      	b.n	80010e8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010de:	f004 f95d 	bl	800539c <HAL_RCC_GetPCLK1Freq>
 80010e2:	4603      	mov	r3, r0
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010ea:	4a15      	ldr	r2, [pc, #84]	@ (8001140 <HAL_InitTick+0xcc>)
 80010ec:	fba2 2303 	umull	r2, r3, r2, r3
 80010f0:	0c9b      	lsrs	r3, r3, #18
 80010f2:	3b01      	subs	r3, #1
 80010f4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010f6:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <HAL_InitTick+0xd0>)
 80010f8:	4a13      	ldr	r2, [pc, #76]	@ (8001148 <HAL_InitTick+0xd4>)
 80010fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010fc:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <HAL_InitTick+0xd0>)
 80010fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001102:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001104:	4a0f      	ldr	r2, [pc, #60]	@ (8001144 <HAL_InitTick+0xd0>)
 8001106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001108:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <HAL_InitTick+0xd0>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <HAL_InitTick+0xd0>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001116:	480b      	ldr	r0, [pc, #44]	@ (8001144 <HAL_InitTick+0xd0>)
 8001118:	f007 fae7 	bl	80086ea <HAL_TIM_Base_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d104      	bne.n	800112c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001122:	4808      	ldr	r0, [pc, #32]	@ (8001144 <HAL_InitTick+0xd0>)
 8001124:	f007 fb38 	bl	8008798 <HAL_TIM_Base_Start_IT>
 8001128:	4603      	mov	r3, r0
 800112a:	e000      	b.n	800112e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
}
 800112e:	4618      	mov	r0, r3
 8001130:	3740      	adds	r7, #64	@ 0x40
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	24000008 	.word	0x24000008
 800113c:	58024400 	.word	0x58024400
 8001140:	431bde83 	.word	0x431bde83
 8001144:	2400029c 	.word	0x2400029c
 8001148:	40001000 	.word	0x40001000

0800114c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <NMI_Handler+0x4>

08001154 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <MemManage_Handler+0x4>

08001164 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <BusFault_Handler+0x4>

0800116c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <UsageFault_Handler+0x4>

08001174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 8001186:	2040      	movs	r0, #64	@ 0x40
 8001188:	f002 fc3d 	bl	8003a06 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <TIM6_DAC_IRQHandler+0x20>)
 8001196:	791b      	ldrb	r3, [r3, #4]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d002      	beq.n	80011a4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800119e:	4804      	ldr	r0, [pc, #16]	@ (80011b0 <TIM6_DAC_IRQHandler+0x20>)
 80011a0:	f002 f877 	bl	8003292 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80011a4:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <TIM6_DAC_IRQHandler+0x24>)
 80011a6:	f007 fcdf 	bl	8008b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2400010c 	.word	0x2400010c
 80011b4:	2400029c 	.word	0x2400029c

080011b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c0:	4a14      	ldr	r2, [pc, #80]	@ (8001214 <_sbrk+0x5c>)
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <_sbrk+0x60>)
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011cc:	4b13      	ldr	r3, [pc, #76]	@ (800121c <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d102      	bne.n	80011da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d4:	4b11      	ldr	r3, [pc, #68]	@ (800121c <_sbrk+0x64>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <_sbrk+0x68>)
 80011d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d207      	bcs.n	80011f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e8:	f00c ffb2 	bl	800e150 <__errno>
 80011ec:	4603      	mov	r3, r0
 80011ee:	220c      	movs	r2, #12
 80011f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	e009      	b.n	800120c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <_sbrk+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fe:	4b07      	ldr	r3, [pc, #28]	@ (800121c <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	4a05      	ldr	r2, [pc, #20]	@ (800121c <_sbrk+0x64>)
 8001208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	24080000 	.word	0x24080000
 8001218:	00004000 	.word	0x00004000
 800121c:	240002e8 	.word	0x240002e8
 8001220:	24005ae8 	.word	0x24005ae8

08001224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001228:	4b37      	ldr	r3, [pc, #220]	@ (8001308 <SystemInit+0xe4>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800122e:	4a36      	ldr	r2, [pc, #216]	@ (8001308 <SystemInit+0xe4>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001238:	4b34      	ldr	r3, [pc, #208]	@ (800130c <SystemInit+0xe8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 030f 	and.w	r3, r3, #15
 8001240:	2b06      	cmp	r3, #6
 8001242:	d807      	bhi.n	8001254 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001244:	4b31      	ldr	r3, [pc, #196]	@ (800130c <SystemInit+0xe8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f023 030f 	bic.w	r3, r3, #15
 800124c:	4a2f      	ldr	r2, [pc, #188]	@ (800130c <SystemInit+0xe8>)
 800124e:	f043 0307 	orr.w	r3, r3, #7
 8001252:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001254:	4b2e      	ldr	r3, [pc, #184]	@ (8001310 <SystemInit+0xec>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a2d      	ldr	r2, [pc, #180]	@ (8001310 <SystemInit+0xec>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001260:	4b2b      	ldr	r3, [pc, #172]	@ (8001310 <SystemInit+0xec>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001266:	4b2a      	ldr	r3, [pc, #168]	@ (8001310 <SystemInit+0xec>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4929      	ldr	r1, [pc, #164]	@ (8001310 <SystemInit+0xec>)
 800126c:	4b29      	ldr	r3, [pc, #164]	@ (8001314 <SystemInit+0xf0>)
 800126e:	4013      	ands	r3, r2
 8001270:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001272:	4b26      	ldr	r3, [pc, #152]	@ (800130c <SystemInit+0xe8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d007      	beq.n	800128e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800127e:	4b23      	ldr	r3, [pc, #140]	@ (800130c <SystemInit+0xe8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 030f 	bic.w	r3, r3, #15
 8001286:	4a21      	ldr	r2, [pc, #132]	@ (800130c <SystemInit+0xe8>)
 8001288:	f043 0307 	orr.w	r3, r3, #7
 800128c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800128e:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <SystemInit+0xec>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001294:	4b1e      	ldr	r3, [pc, #120]	@ (8001310 <SystemInit+0xec>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800129a:	4b1d      	ldr	r3, [pc, #116]	@ (8001310 <SystemInit+0xec>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001310 <SystemInit+0xec>)
 80012a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001318 <SystemInit+0xf4>)
 80012a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <SystemInit+0xec>)
 80012a8:	4a1c      	ldr	r2, [pc, #112]	@ (800131c <SystemInit+0xf8>)
 80012aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012ac:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <SystemInit+0xec>)
 80012ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001320 <SystemInit+0xfc>)
 80012b0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012b2:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <SystemInit+0xec>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012b8:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <SystemInit+0xec>)
 80012ba:	4a19      	ldr	r2, [pc, #100]	@ (8001320 <SystemInit+0xfc>)
 80012bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012be:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <SystemInit+0xec>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <SystemInit+0xec>)
 80012c6:	4a16      	ldr	r2, [pc, #88]	@ (8001320 <SystemInit+0xfc>)
 80012c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <SystemInit+0xec>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <SystemInit+0xec>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001310 <SystemInit+0xec>)
 80012d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <SystemInit+0xec>)
 80012de:	2200      	movs	r2, #0
 80012e0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012e2:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <SystemInit+0x100>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b10      	ldr	r3, [pc, #64]	@ (8001328 <SystemInit+0x104>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012ee:	d202      	bcs.n	80012f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012f0:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <SystemInit+0x108>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <SystemInit+0x10c>)
 80012f8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80012fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00
 800130c:	52002000 	.word	0x52002000
 8001310:	58024400 	.word	0x58024400
 8001314:	eaf6ed7f 	.word	0xeaf6ed7f
 8001318:	02020200 	.word	0x02020200
 800131c:	01ff0000 	.word	0x01ff0000
 8001320:	01010280 	.word	0x01010280
 8001324:	5c001000 	.word	0x5c001000
 8001328:	ffff0000 	.word	0xffff0000
 800132c:	51008108 	.word	0x51008108
 8001330:	52004000 	.word	0x52004000

08001334 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08e      	sub	sp, #56	@ 0x38
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
 8001362:	615a      	str	r2, [r3, #20]
 8001364:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001366:	4b2e      	ldr	r3, [pc, #184]	@ (8001420 <MX_TIM2_Init+0xec>)
 8001368:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800136c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800136e:	4b2c      	ldr	r3, [pc, #176]	@ (8001420 <MX_TIM2_Init+0xec>)
 8001370:	2200      	movs	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b2a      	ldr	r3, [pc, #168]	@ (8001420 <MX_TIM2_Init+0xec>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 800137a:	4b29      	ldr	r3, [pc, #164]	@ (8001420 <MX_TIM2_Init+0xec>)
 800137c:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001380:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001382:	4b27      	ldr	r3, [pc, #156]	@ (8001420 <MX_TIM2_Init+0xec>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <MX_TIM2_Init+0xec>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800138e:	4824      	ldr	r0, [pc, #144]	@ (8001420 <MX_TIM2_Init+0xec>)
 8001390:	f007 f9ab 	bl	80086ea <HAL_TIM_Base_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800139a:	f7ff fd17 	bl	8000dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013a8:	4619      	mov	r1, r3
 80013aa:	481d      	ldr	r0, [pc, #116]	@ (8001420 <MX_TIM2_Init+0xec>)
 80013ac:	f007 fdf8 	bl	8008fa0 <HAL_TIM_ConfigClockSource>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80013b6:	f7ff fd09 	bl	8000dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013ba:	4819      	ldr	r0, [pc, #100]	@ (8001420 <MX_TIM2_Init+0xec>)
 80013bc:	f007 fa64 	bl	8008888 <HAL_TIM_PWM_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80013c6:	f7ff fd01 	bl	8000dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	4811      	ldr	r0, [pc, #68]	@ (8001420 <MX_TIM2_Init+0xec>)
 80013da:	f008 fb41 	bl	8009a60 <HAL_TIMEx_MasterConfigSynchronization>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013e4:	f7ff fcf2 	bl	8000dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e8:	2360      	movs	r3, #96	@ 0x60
 80013ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 80013ec:	f242 3327 	movw	r3, #8999	@ 0x2327
 80013f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80013f6:	2304      	movs	r3, #4
 80013f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fa:	463b      	mov	r3, r7
 80013fc:	2200      	movs	r2, #0
 80013fe:	4619      	mov	r1, r3
 8001400:	4807      	ldr	r0, [pc, #28]	@ (8001420 <MX_TIM2_Init+0xec>)
 8001402:	f007 fcb9 	bl	8008d78 <HAL_TIM_PWM_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800140c:	f7ff fcde 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001410:	4803      	ldr	r0, [pc, #12]	@ (8001420 <MX_TIM2_Init+0xec>)
 8001412:	f000 f8f7 	bl	8001604 <HAL_TIM_MspPostInit>

}
 8001416:	bf00      	nop
 8001418:	3738      	adds	r7, #56	@ 0x38
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	240002ec 	.word	0x240002ec

08001424 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b09a      	sub	sp, #104	@ 0x68
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001444:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	222c      	movs	r2, #44	@ 0x2c
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f00c fe5e 	bl	800e120 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001464:	4b49      	ldr	r3, [pc, #292]	@ (800158c <MX_TIM8_Init+0x168>)
 8001466:	4a4a      	ldr	r2, [pc, #296]	@ (8001590 <MX_TIM8_Init+0x16c>)
 8001468:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800146a:	4b48      	ldr	r3, [pc, #288]	@ (800158c <MX_TIM8_Init+0x168>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b46      	ldr	r3, [pc, #280]	@ (800158c <MX_TIM8_Init+0x168>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000-1;
 8001476:	4b45      	ldr	r3, [pc, #276]	@ (800158c <MX_TIM8_Init+0x168>)
 8001478:	f642 62df 	movw	r2, #11999	@ 0x2edf
 800147c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b43      	ldr	r3, [pc, #268]	@ (800158c <MX_TIM8_Init+0x168>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001484:	4b41      	ldr	r3, [pc, #260]	@ (800158c <MX_TIM8_Init+0x168>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b40      	ldr	r3, [pc, #256]	@ (800158c <MX_TIM8_Init+0x168>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001490:	483e      	ldr	r0, [pc, #248]	@ (800158c <MX_TIM8_Init+0x168>)
 8001492:	f007 f92a 	bl	80086ea <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800149c:	f7ff fc96 	bl	8000dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80014aa:	4619      	mov	r1, r3
 80014ac:	4837      	ldr	r0, [pc, #220]	@ (800158c <MX_TIM8_Init+0x168>)
 80014ae:	f007 fd77 	bl	8008fa0 <HAL_TIM_ConfigClockSource>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80014b8:	f7ff fc88 	bl	8000dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014bc:	4833      	ldr	r0, [pc, #204]	@ (800158c <MX_TIM8_Init+0x168>)
 80014be:	f007 f9e3 	bl	8008888 <HAL_TIM_PWM_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80014c8:	f7ff fc80 	bl	8000dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014d8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014dc:	4619      	mov	r1, r3
 80014de:	482b      	ldr	r0, [pc, #172]	@ (800158c <MX_TIM8_Init+0x168>)
 80014e0:	f008 fabe 	bl	8009a60 <HAL_TIMEx_MasterConfigSynchronization>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80014ea:	f7ff fc6f 	bl	8000dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ee:	2360      	movs	r3, #96	@ 0x60
 80014f0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f6:	2300      	movs	r3, #0
 80014f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014fa:	2300      	movs	r3, #0
 80014fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80014fe:	2304      	movs	r3, #4
 8001500:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800150a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800150e:	2200      	movs	r2, #0
 8001510:	4619      	mov	r1, r3
 8001512:	481e      	ldr	r0, [pc, #120]	@ (800158c <MX_TIM8_Init+0x168>)
 8001514:	f007 fc30 	bl	8008d78 <HAL_TIM_PWM_ConfigChannel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800151e:	f7ff fc55 	bl	8000dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001522:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001526:	2204      	movs	r2, #4
 8001528:	4619      	mov	r1, r3
 800152a:	4818      	ldr	r0, [pc, #96]	@ (800158c <MX_TIM8_Init+0x168>)
 800152c:	f007 fc24 	bl	8008d78 <HAL_TIM_PWM_ConfigChannel>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8001536:	f7ff fc49 	bl	8000dcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800154e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001552:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800155c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4619      	mov	r1, r3
 800156e:	4807      	ldr	r0, [pc, #28]	@ (800158c <MX_TIM8_Init+0x168>)
 8001570:	f008 fb04 	bl	8009b7c <HAL_TIMEx_ConfigBreakDeadTime>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 800157a:	f7ff fc27 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800157e:	4803      	ldr	r0, [pc, #12]	@ (800158c <MX_TIM8_Init+0x168>)
 8001580:	f000 f840 	bl	8001604 <HAL_TIM_MspPostInit>

}
 8001584:	bf00      	nop
 8001586:	3768      	adds	r7, #104	@ 0x68
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	24000338 	.word	0x24000338
 8001590:	40010400 	.word	0x40010400

08001594 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015a4:	d10f      	bne.n	80015c6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <HAL_TIM_Base_MspInit+0x68>)
 80015a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015ac:	4a13      	ldr	r2, [pc, #76]	@ (80015fc <HAL_TIM_Base_MspInit+0x68>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015b6:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <HAL_TIM_Base_MspInit+0x68>)
 80015b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80015c4:	e013      	b.n	80015ee <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM8)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001600 <HAL_TIM_Base_MspInit+0x6c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d10e      	bne.n	80015ee <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015d0:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <HAL_TIM_Base_MspInit+0x68>)
 80015d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015d6:	4a09      	ldr	r2, [pc, #36]	@ (80015fc <HAL_TIM_Base_MspInit+0x68>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <HAL_TIM_Base_MspInit+0x68>)
 80015e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	58024400 	.word	0x58024400
 8001600:	40010400 	.word	0x40010400

08001604 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	@ 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001624:	d11f      	bne.n	8001666 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <HAL_TIM_MspPostInit+0xb4>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162c:	4a22      	ldr	r2, [pc, #136]	@ (80016b8 <HAL_TIM_MspPostInit+0xb4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001636:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <HAL_TIM_MspPostInit+0xb4>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001644:	2301      	movs	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001650:	2302      	movs	r3, #2
 8001652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001654:	2301      	movs	r3, #1
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4817      	ldr	r0, [pc, #92]	@ (80016bc <HAL_TIM_MspPostInit+0xb8>)
 8001660:	f001 ffee 	bl	8003640 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001664:	e023      	b.n	80016ae <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a15      	ldr	r2, [pc, #84]	@ (80016c0 <HAL_TIM_MspPostInit+0xbc>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d11e      	bne.n	80016ae <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <HAL_TIM_MspPostInit+0xb4>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001676:	4a10      	ldr	r2, [pc, #64]	@ (80016b8 <HAL_TIM_MspPostInit+0xb4>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001680:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <HAL_TIM_MspPostInit+0xb4>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800168e:	23c0      	movs	r3, #192	@ 0xc0
 8001690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800169a:	2302      	movs	r3, #2
 800169c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800169e:	2303      	movs	r3, #3
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	4806      	ldr	r0, [pc, #24]	@ (80016c4 <HAL_TIM_MspPostInit+0xc0>)
 80016aa:	f001 ffc9 	bl	8003640 <HAL_GPIO_Init>
}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	@ 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	58024400 	.word	0x58024400
 80016bc:	58020000 	.word	0x58020000
 80016c0:	40010400 	.word	0x40010400
 80016c4:	58020800 	.word	0x58020800

080016c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001700 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016cc:	f7ff fdaa 	bl	8001224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d0:	480c      	ldr	r0, [pc, #48]	@ (8001704 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016d2:	490d      	ldr	r1, [pc, #52]	@ (8001708 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016d4:	4a0d      	ldr	r2, [pc, #52]	@ (800170c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d8:	e002      	b.n	80016e0 <LoopCopyDataInit>

080016da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016de:	3304      	adds	r3, #4

080016e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e4:	d3f9      	bcc.n	80016da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001714 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ec:	e001      	b.n	80016f2 <LoopFillZerobss>

080016ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f0:	3204      	adds	r2, #4

080016f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f4:	d3fb      	bcc.n	80016ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016f6:	f00c fd31 	bl	800e15c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fa:	f7ff fa29 	bl	8000b50 <main>
  bx  lr
 80016fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001700:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001704:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001708:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 800170c:	0800f170 	.word	0x0800f170
  ldr r2, =_sbss
 8001710:	2400008c 	.word	0x2400008c
  ldr r4, =_ebss
 8001714:	24005ae4 	.word	0x24005ae4

08001718 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC3_IRQHandler>
	...

0800171c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001722:	2003      	movs	r0, #3
 8001724:	f001 fc91 	bl	800304a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001728:	f003 fc8e 	bl	8005048 <HAL_RCC_GetSysClockFreq>
 800172c:	4602      	mov	r2, r0
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <HAL_Init+0x68>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	f003 030f 	and.w	r3, r3, #15
 8001738:	4913      	ldr	r1, [pc, #76]	@ (8001788 <HAL_Init+0x6c>)
 800173a:	5ccb      	ldrb	r3, [r1, r3]
 800173c:	f003 031f 	and.w	r3, r3, #31
 8001740:	fa22 f303 	lsr.w	r3, r2, r3
 8001744:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001746:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <HAL_Init+0x68>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	4a0e      	ldr	r2, [pc, #56]	@ (8001788 <HAL_Init+0x6c>)
 8001750:	5cd3      	ldrb	r3, [r2, r3]
 8001752:	f003 031f 	and.w	r3, r3, #31
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	fa22 f303 	lsr.w	r3, r2, r3
 800175c:	4a0b      	ldr	r2, [pc, #44]	@ (800178c <HAL_Init+0x70>)
 800175e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001760:	4a0b      	ldr	r2, [pc, #44]	@ (8001790 <HAL_Init+0x74>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001766:	2005      	movs	r0, #5
 8001768:	f7ff fc84 	bl	8001074 <HAL_InitTick>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e002      	b.n	800177c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001776:	f7ff fc5f 	bl	8001038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	58024400 	.word	0x58024400
 8001788:	0800e8f8 	.word	0x0800e8f8
 800178c:	24000004 	.word	0x24000004
 8001790:	24000000 	.word	0x24000000

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	@ (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	2400000c 	.word	0x2400000c
 80017b8:	24000384 	.word	0x24000384

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	24000384 	.word	0x24000384

080017d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff ffee 	bl	80017bc <HAL_GetTick>
 80017e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ec:	d005      	beq.n	80017fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <HAL_Delay+0x44>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017fa:	bf00      	nop
 80017fc:	f7ff ffde 	bl	80017bc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	d8f7      	bhi.n	80017fc <HAL_Delay+0x28>
  {
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2400000c 	.word	0x2400000c

0800181c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001820:	4b03      	ldr	r3, [pc, #12]	@ (8001830 <HAL_GetREVID+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	0c1b      	lsrs	r3, r3, #16
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	5c001000 	.word	0x5c001000

08001834 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	609a      	str	r2, [r3, #8]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	609a      	str	r2, [r3, #8]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3360      	adds	r3, #96	@ 0x60
 80018ae:	461a      	mov	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	430b      	orrs	r3, r1
 80018ca:	431a      	orrs	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80018d0:	bf00      	nop
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	431a      	orrs	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	611a      	str	r2, [r3, #16]
}
 8001902:	bf00      	nop
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800190e:	b480      	push	{r7}
 8001910:	b087      	sub	sp, #28
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3360      	adds	r3, #96	@ 0x60
 800191e:	461a      	mov	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	431a      	orrs	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	601a      	str	r2, [r3, #0]
  }
}
 8001938:	bf00      	nop
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800196a:	b480      	push	{r7}
 800196c:	b087      	sub	sp, #28
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3330      	adds	r3, #48	@ 0x30
 800197a:	461a      	mov	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	4413      	add	r3, r2
 8001988:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	211f      	movs	r1, #31
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	401a      	ands	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	0e9b      	lsrs	r3, r3, #26
 80019a2:	f003 011f 	and.w	r1, r3, #31
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	431a      	orrs	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019b6:	bf00      	nop
 80019b8:	371c      	adds	r7, #28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b087      	sub	sp, #28
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3314      	adds	r3, #20
 80019d2:	461a      	mov	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	0e5b      	lsrs	r3, r3, #25
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	4413      	add	r3, r2
 80019e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	0d1b      	lsrs	r3, r3, #20
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	2107      	movs	r1, #7
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	401a      	ands	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	0d1b      	lsrs	r3, r3, #20
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	431a      	orrs	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a0c:	bf00      	nop
 8001a0e:	371c      	adds	r7, #28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a30:	43db      	mvns	r3, r3
 8001a32:	401a      	ands	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0318 	and.w	r3, r3, #24
 8001a3a:	4908      	ldr	r1, [pc, #32]	@ (8001a5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a3c:	40d9      	lsrs	r1, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	400b      	ands	r3, r1
 8001a42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a46:	431a      	orrs	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	000fffff 	.word	0x000fffff

08001a60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 031f 	and.w	r3, r3, #31
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6093      	str	r3, [r2, #8]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	5fffffc0 	.word	0x5fffffc0

08001abc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001acc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ad0:	d101      	bne.n	8001ad6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <LL_ADC_EnableInternalRegulator+0x24>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	6fffffc0 	.word	0x6fffffc0

08001b0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b20:	d101      	bne.n	8001b26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <LL_ADC_Enable+0x24>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	f043 0201 	orr.w	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	7fffffc0 	.word	0x7fffffc0

08001b5c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <LL_ADC_Disable+0x24>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	f043 0202 	orr.w	r2, r3, #2
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	7fffffc0 	.word	0x7fffffc0

08001b84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <LL_ADC_IsEnabled+0x18>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <LL_ADC_IsEnabled+0x1a>
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d101      	bne.n	8001bc2 <LL_ADC_IsDisableOngoing+0x18>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <LL_ADC_IsDisableOngoing+0x1a>
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <LL_ADC_REG_StartConversion+0x24>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	f043 0204 	orr.w	r2, r3, #4
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	7fffffc0 	.word	0x7fffffc0

08001bf8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d101      	bne.n	8001c10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d101      	bne.n	8001c36 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b089      	sub	sp, #36	@ 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e18f      	b.n	8001f7e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7fe fcbf 	bl	80005f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff19 	bl	8001abc <LL_ADC_IsDeepPowerDownEnabled>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff feff 	bl	8001a98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff34 	bl	8001b0c <LL_ADC_IsInternalRegulatorEnabled>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d114      	bne.n	8001cd4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff18 	bl	8001ae4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cb4:	4b87      	ldr	r3, [pc, #540]	@ (8001ed4 <HAL_ADC_Init+0x290>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	099b      	lsrs	r3, r3, #6
 8001cba:	4a87      	ldr	r2, [pc, #540]	@ (8001ed8 <HAL_ADC_Init+0x294>)
 8001cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc0:	099b      	lsrs	r3, r3, #6
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cc6:	e002      	b.n	8001cce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1f9      	bne.n	8001cc8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff17 	bl	8001b0c <LL_ADC_IsInternalRegulatorEnabled>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10d      	bne.n	8001d00 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce8:	f043 0210 	orr.w	r2, r3, #16
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf4:	f043 0201 	orr.w	r2, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff77 	bl	8001bf8 <LL_ADC_REG_IsConversionOngoing>
 8001d0a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f040 8129 	bne.w	8001f6c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f040 8125 	bne.w	8001f6c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d26:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d2a:	f043 0202 	orr.w	r2, r3, #2
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff24 	bl	8001b84 <LL_ADC_IsEnabled>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d136      	bne.n	8001db0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a65      	ldr	r2, [pc, #404]	@ (8001edc <HAL_ADC_Init+0x298>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d004      	beq.n	8001d56 <HAL_ADC_Init+0x112>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a63      	ldr	r2, [pc, #396]	@ (8001ee0 <HAL_ADC_Init+0x29c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d10e      	bne.n	8001d74 <HAL_ADC_Init+0x130>
 8001d56:	4861      	ldr	r0, [pc, #388]	@ (8001edc <HAL_ADC_Init+0x298>)
 8001d58:	f7ff ff14 	bl	8001b84 <LL_ADC_IsEnabled>
 8001d5c:	4604      	mov	r4, r0
 8001d5e:	4860      	ldr	r0, [pc, #384]	@ (8001ee0 <HAL_ADC_Init+0x29c>)
 8001d60:	f7ff ff10 	bl	8001b84 <LL_ADC_IsEnabled>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4323      	orrs	r3, r4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf0c      	ite	eq
 8001d6c:	2301      	moveq	r3, #1
 8001d6e:	2300      	movne	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	e008      	b.n	8001d86 <HAL_ADC_Init+0x142>
 8001d74:	485b      	ldr	r0, [pc, #364]	@ (8001ee4 <HAL_ADC_Init+0x2a0>)
 8001d76:	f7ff ff05 	bl	8001b84 <LL_ADC_IsEnabled>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	bf0c      	ite	eq
 8001d80:	2301      	moveq	r3, #1
 8001d82:	2300      	movne	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d012      	beq.n	8001db0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a53      	ldr	r2, [pc, #332]	@ (8001edc <HAL_ADC_Init+0x298>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d004      	beq.n	8001d9e <HAL_ADC_Init+0x15a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a51      	ldr	r2, [pc, #324]	@ (8001ee0 <HAL_ADC_Init+0x29c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d101      	bne.n	8001da2 <HAL_ADC_Init+0x15e>
 8001d9e:	4a52      	ldr	r2, [pc, #328]	@ (8001ee8 <HAL_ADC_Init+0x2a4>)
 8001da0:	e000      	b.n	8001da4 <HAL_ADC_Init+0x160>
 8001da2:	4a52      	ldr	r2, [pc, #328]	@ (8001eec <HAL_ADC_Init+0x2a8>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	4619      	mov	r1, r3
 8001daa:	4610      	mov	r0, r2
 8001dac:	f7ff fd42 	bl	8001834 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001db0:	f7ff fd34 	bl	800181c <HAL_GetREVID>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d914      	bls.n	8001de8 <HAL_ADC_Init+0x1a4>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b10      	cmp	r3, #16
 8001dc4:	d110      	bne.n	8001de8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7d5b      	ldrb	r3, [r3, #21]
 8001dca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001dd0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001dd6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7f1b      	ldrb	r3, [r3, #28]
 8001ddc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001dde:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001de0:	f043 030c 	orr.w	r3, r3, #12
 8001de4:	61bb      	str	r3, [r7, #24]
 8001de6:	e00d      	b.n	8001e04 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7d5b      	ldrb	r3, [r3, #21]
 8001dec:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001df2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001df8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7f1b      	ldrb	r3, [r3, #28]
 8001dfe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7f1b      	ldrb	r3, [r3, #28]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d106      	bne.n	8001e1a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	045b      	lsls	r3, r3, #17
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef0 <HAL_ADC_Init+0x2ac>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	69b9      	ldr	r1, [r7, #24]
 8001e46:	430b      	orrs	r3, r1
 8001e48:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fed2 	bl	8001bf8 <LL_ADC_REG_IsConversionOngoing>
 8001e54:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fedf 	bl	8001c1e <LL_ADC_INJ_IsConversionOngoing>
 8001e60:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d15f      	bne.n	8001f28 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d15c      	bne.n	8001f28 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7d1b      	ldrb	r3, [r3, #20]
 8001e72:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef4 <HAL_ADC_Init+0x2b0>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d130      	bne.n	8001efc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <HAL_ADC_Init+0x2b4>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001eae:	3a01      	subs	r2, #1
 8001eb0:	0411      	lsls	r1, r2, #16
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001eb6:	4311      	orrs	r1, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ebc:	4311      	orrs	r1, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	611a      	str	r2, [r3, #16]
 8001ed0:	e01c      	b.n	8001f0c <HAL_ADC_Init+0x2c8>
 8001ed2:	bf00      	nop
 8001ed4:	24000000 	.word	0x24000000
 8001ed8:	053e2d63 	.word	0x053e2d63
 8001edc:	40022000 	.word	0x40022000
 8001ee0:	40022100 	.word	0x40022100
 8001ee4:	58026000 	.word	0x58026000
 8001ee8:	40022300 	.word	0x40022300
 8001eec:	58026300 	.word	0x58026300
 8001ef0:	fff0c003 	.word	0xfff0c003
 8001ef4:	ffffbffc 	.word	0xffffbffc
 8001ef8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691a      	ldr	r2, [r3, #16]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fe42 	bl	8002bac <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d10c      	bne.n	8001f4a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	f023 010f 	bic.w	r1, r3, #15
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	1e5a      	subs	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f48:	e007      	b.n	8001f5a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 020f 	bic.w	r2, r2, #15
 8001f58:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f5e:	f023 0303 	bic.w	r3, r3, #3
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f6a:	e007      	b.n	8001f7c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f70:	f043 0210 	orr.w	r2, r3, #16
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	@ 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	bf00      	nop

08001f88 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a5c      	ldr	r2, [pc, #368]	@ (8002108 <HAL_ADC_Start+0x180>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d004      	beq.n	8001fa4 <HAL_ADC_Start+0x1c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a5b      	ldr	r2, [pc, #364]	@ (800210c <HAL_ADC_Start+0x184>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_Start+0x20>
 8001fa4:	4b5a      	ldr	r3, [pc, #360]	@ (8002110 <HAL_ADC_Start+0x188>)
 8001fa6:	e000      	b.n	8001faa <HAL_ADC_Start+0x22>
 8001fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8002114 <HAL_ADC_Start+0x18c>)
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fd58 	bl	8001a60 <LL_ADC_GetMultimode>
 8001fb0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fe1e 	bl	8001bf8 <LL_ADC_REG_IsConversionOngoing>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 809a 	bne.w	80020f8 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_Start+0x4a>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e095      	b.n	80020fe <HAL_ADC_Start+0x176>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fcfc 	bl	80029d8 <ADC_Enable>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fe4:	7dfb      	ldrb	r3, [r7, #23]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f040 8081 	bne.w	80020ee <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ff0:	4b49      	ldr	r3, [pc, #292]	@ (8002118 <HAL_ADC_Start+0x190>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a42      	ldr	r2, [pc, #264]	@ (800210c <HAL_ADC_Start+0x184>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d002      	beq.n	800200c <HAL_ADC_Start+0x84>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	e000      	b.n	800200e <HAL_ADC_Start+0x86>
 800200c:	4b3e      	ldr	r3, [pc, #248]	@ (8002108 <HAL_ADC_Start+0x180>)
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	4293      	cmp	r3, r2
 8002014:	d002      	beq.n	800201c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d105      	bne.n	8002028 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002020:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002034:	d106      	bne.n	8002044 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203a:	f023 0206 	bic.w	r2, r3, #6
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	659a      	str	r2, [r3, #88]	@ 0x58
 8002042:	e002      	b.n	800204a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	221c      	movs	r2, #28
 8002050:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a2b      	ldr	r2, [pc, #172]	@ (800210c <HAL_ADC_Start+0x184>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d002      	beq.n	800206a <HAL_ADC_Start+0xe2>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	e000      	b.n	800206c <HAL_ADC_Start+0xe4>
 800206a:	4b27      	ldr	r3, [pc, #156]	@ (8002108 <HAL_ADC_Start+0x180>)
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	4293      	cmp	r3, r2
 8002072:	d008      	beq.n	8002086 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	2b05      	cmp	r3, #5
 800207e:	d002      	beq.n	8002086 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	2b09      	cmp	r3, #9
 8002084:	d114      	bne.n	80020b0 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d007      	beq.n	80020a4 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002098:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800209c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fd91 	bl	8001bd0 <LL_ADC_REG_StartConversion>
 80020ae:	e025      	b.n	80020fc <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a12      	ldr	r2, [pc, #72]	@ (800210c <HAL_ADC_Start+0x184>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d002      	beq.n	80020cc <HAL_ADC_Start+0x144>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	e000      	b.n	80020ce <HAL_ADC_Start+0x146>
 80020cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002108 <HAL_ADC_Start+0x180>)
 80020ce:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00f      	beq.n	80020fc <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80020ec:	e006      	b.n	80020fc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80020f6:	e001      	b.n	80020fc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020f8:	2302      	movs	r3, #2
 80020fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40022000 	.word	0x40022000
 800210c:	40022100 	.word	0x40022100
 8002110:	40022300 	.word	0x40022300
 8002114:	58026300 	.word	0x58026300
 8002118:	fffff0fe 	.word	0xfffff0fe

0800211c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a72      	ldr	r2, [pc, #456]	@ (80022f4 <HAL_ADC_PollForConversion+0x1d8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d004      	beq.n	800213a <HAL_ADC_PollForConversion+0x1e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a70      	ldr	r2, [pc, #448]	@ (80022f8 <HAL_ADC_PollForConversion+0x1dc>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d101      	bne.n	800213e <HAL_ADC_PollForConversion+0x22>
 800213a:	4b70      	ldr	r3, [pc, #448]	@ (80022fc <HAL_ADC_PollForConversion+0x1e0>)
 800213c:	e000      	b.n	8002140 <HAL_ADC_PollForConversion+0x24>
 800213e:	4b70      	ldr	r3, [pc, #448]	@ (8002300 <HAL_ADC_PollForConversion+0x1e4>)
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fc8d 	bl	8001a60 <LL_ADC_GetMultimode>
 8002146:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d102      	bne.n	8002156 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002150:	2308      	movs	r3, #8
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	e037      	b.n	80021c6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2b05      	cmp	r3, #5
 8002160:	d002      	beq.n	8002168 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2b09      	cmp	r3, #9
 8002166:	d111      	bne.n	800218c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217a:	f043 0220 	orr.w	r2, r3, #32
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e0b1      	b.n	80022ea <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002186:	2304      	movs	r3, #4
 8002188:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800218a:	e01c      	b.n	80021c6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a58      	ldr	r2, [pc, #352]	@ (80022f4 <HAL_ADC_PollForConversion+0x1d8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d004      	beq.n	80021a0 <HAL_ADC_PollForConversion+0x84>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a57      	ldr	r2, [pc, #348]	@ (80022f8 <HAL_ADC_PollForConversion+0x1dc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_PollForConversion+0x88>
 80021a0:	4b56      	ldr	r3, [pc, #344]	@ (80022fc <HAL_ADC_PollForConversion+0x1e0>)
 80021a2:	e000      	b.n	80021a6 <HAL_ADC_PollForConversion+0x8a>
 80021a4:	4b56      	ldr	r3, [pc, #344]	@ (8002300 <HAL_ADC_PollForConversion+0x1e4>)
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fc68 	bl	8001a7c <LL_ADC_GetMultiDMATransfer>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b6:	f043 0220 	orr.w	r2, r3, #32
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e093      	b.n	80022ea <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80021c2:	2304      	movs	r3, #4
 80021c4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80021c6:	f7ff faf9 	bl	80017bc <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021cc:	e021      	b.n	8002212 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d4:	d01d      	beq.n	8002212 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80021d6:	f7ff faf1 	bl	80017bc <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d302      	bcc.n	80021ec <HAL_ADC_PollForConversion+0xd0>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d112      	bne.n	8002212 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10b      	bne.n	8002212 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fe:	f043 0204 	orr.w	r2, r3, #4
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e06b      	b.n	80022ea <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0d6      	beq.n	80021ce <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002224:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fb87 	bl	8001944 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01c      	beq.n	8002276 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7d5b      	ldrb	r3, [r3, #21]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d118      	bne.n	8002276 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b08      	cmp	r3, #8
 8002250:	d111      	bne.n	8002276 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002256:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002262:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1f      	ldr	r2, [pc, #124]	@ (80022f8 <HAL_ADC_PollForConversion+0x1dc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d002      	beq.n	8002286 <HAL_ADC_PollForConversion+0x16a>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	e000      	b.n	8002288 <HAL_ADC_PollForConversion+0x16c>
 8002286:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <HAL_ADC_PollForConversion+0x1d8>)
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	4293      	cmp	r3, r2
 800228e:	d008      	beq.n	80022a2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b05      	cmp	r3, #5
 800229a:	d002      	beq.n	80022a2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	2b09      	cmp	r3, #9
 80022a0:	d104      	bne.n	80022ac <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	e00c      	b.n	80022c6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a11      	ldr	r2, [pc, #68]	@ (80022f8 <HAL_ADC_PollForConversion+0x1dc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d002      	beq.n	80022bc <HAL_ADC_PollForConversion+0x1a0>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	e000      	b.n	80022be <HAL_ADC_PollForConversion+0x1a2>
 80022bc:	4b0d      	ldr	r3, [pc, #52]	@ (80022f4 <HAL_ADC_PollForConversion+0x1d8>)
 80022be:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d104      	bne.n	80022d6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2208      	movs	r2, #8
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e008      	b.n	80022e8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d103      	bne.n	80022e8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	220c      	movs	r2, #12
 80022e6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3720      	adds	r7, #32
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40022000 	.word	0x40022000
 80022f8:	40022100 	.word	0x40022100
 80022fc:	40022300 	.word	0x40022300
 8002300:	58026300 	.word	0x58026300

08002304 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	b0a1      	sub	sp, #132	@ 0x84
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a65      	ldr	r2, [pc, #404]	@ (80024d0 <HAL_ADC_ConfigChannel+0x1b0>)
 800233a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_ADC_ConfigChannel+0x2a>
 8002346:	2302      	movs	r3, #2
 8002348:	e32e      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x688>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fc4e 	bl	8001bf8 <LL_ADC_REG_IsConversionOngoing>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 8313 	bne.w	800298a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	db2c      	blt.n	80023c6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002374:	2b00      	cmp	r3, #0
 8002376:	d108      	bne.n	800238a <HAL_ADC_ConfigChannel+0x6a>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0e9b      	lsrs	r3, r3, #26
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	2201      	movs	r2, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	e016      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x98>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002398:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800239a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800239c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80023a2:	2320      	movs	r3, #32
 80023a4:	e003      	b.n	80023ae <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80023a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f003 031f 	and.w	r3, r3, #31
 80023b2:	2201      	movs	r2, #1
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	69d1      	ldr	r1, [r2, #28]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	430b      	orrs	r3, r1
 80023c4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	6859      	ldr	r1, [r3, #4]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	f7ff fac9 	bl	800196a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fc0b 	bl	8001bf8 <LL_ADC_REG_IsConversionOngoing>
 80023e2:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fc18 	bl	8001c1e <LL_ADC_INJ_IsConversionOngoing>
 80023ee:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f040 80b8 	bne.w	8002568 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 80b4 	bne.w	8002568 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	6819      	ldr	r1, [r3, #0]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	461a      	mov	r2, r3
 800240e:	f7ff fad8 	bl	80019c2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002412:	4b30      	ldr	r3, [pc, #192]	@ (80024d4 <HAL_ADC_ConfigChannel+0x1b4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800241a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800241e:	d10b      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x118>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	e01d      	b.n	8002474 <HAL_ADC_ConfigChannel+0x154>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10b      	bne.n	800245e <HAL_ADC_ConfigChannel+0x13e>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	e00a      	b.n	8002474 <HAL_ADC_ConfigChannel+0x154>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	089b      	lsrs	r3, r3, #2
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b04      	cmp	r3, #4
 800247c:	d02c      	beq.n	80024d8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6919      	ldr	r1, [r3, #16]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800248c:	f7ff fa06 	bl	800189c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6919      	ldr	r1, [r3, #16]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	7e5b      	ldrb	r3, [r3, #25]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d102      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x186>
 80024a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80024a4:	e000      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x188>
 80024a6:	2300      	movs	r3, #0
 80024a8:	461a      	mov	r2, r3
 80024aa:	f7ff fa30 	bl	800190e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6919      	ldr	r1, [r3, #16]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	7e1b      	ldrb	r3, [r3, #24]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d102      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x1a4>
 80024be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80024c2:	e000      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x1a6>
 80024c4:	2300      	movs	r3, #0
 80024c6:	461a      	mov	r2, r3
 80024c8:	f7ff fa08 	bl	80018dc <LL_ADC_SetDataRightShift>
 80024cc:	e04c      	b.n	8002568 <HAL_ADC_ConfigChannel+0x248>
 80024ce:	bf00      	nop
 80024d0:	47ff0000 	.word	0x47ff0000
 80024d4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	069b      	lsls	r3, r3, #26
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d107      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80024fa:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002502:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	069b      	lsls	r3, r3, #26
 800250c:	429a      	cmp	r2, r3
 800250e:	d107      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800251e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002526:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	069b      	lsls	r3, r3, #26
 8002530:	429a      	cmp	r2, r3
 8002532:	d107      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002542:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800254a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	069b      	lsls	r3, r3, #26
 8002554:	429a      	cmp	r2, r3
 8002556:	d107      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002566:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fb09 	bl	8001b84 <LL_ADC_IsEnabled>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	f040 8211 	bne.w	800299c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6819      	ldr	r1, [r3, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	461a      	mov	r2, r3
 8002588:	f7ff fa46 	bl	8001a18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4aa1      	ldr	r2, [pc, #644]	@ (8002818 <HAL_ADC_ConfigChannel+0x4f8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	f040 812e 	bne.w	80027f4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10b      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x2a0>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0e9b      	lsrs	r3, r3, #26
 80025ae:	3301      	adds	r3, #1
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	2b09      	cmp	r3, #9
 80025b6:	bf94      	ite	ls
 80025b8:	2301      	movls	r3, #1
 80025ba:	2300      	movhi	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e019      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x2d4>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80025ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80025d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80025d8:	2320      	movs	r3, #32
 80025da:	e003      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80025dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	3301      	adds	r3, #1
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	2b09      	cmp	r3, #9
 80025ec:	bf94      	ite	ls
 80025ee:	2301      	movls	r3, #1
 80025f0:	2300      	movhi	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d079      	beq.n	80026ec <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002600:	2b00      	cmp	r3, #0
 8002602:	d107      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x2f4>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	0e9b      	lsrs	r3, r3, #26
 800260a:	3301      	adds	r3, #1
 800260c:	069b      	lsls	r3, r3, #26
 800260e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002612:	e015      	b.n	8002640 <HAL_ADC_ConfigChannel+0x320>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002624:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800262c:	2320      	movs	r3, #32
 800262e:	e003      	b.n	8002638 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	3301      	adds	r3, #1
 800263a:	069b      	lsls	r3, r3, #26
 800263c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002648:	2b00      	cmp	r3, #0
 800264a:	d109      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x340>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0e9b      	lsrs	r3, r3, #26
 8002652:	3301      	adds	r3, #1
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	2101      	movs	r1, #1
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	e017      	b.n	8002690 <HAL_ADC_ConfigChannel+0x370>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800266e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002670:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002678:	2320      	movs	r3, #32
 800267a:	e003      	b.n	8002684 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800267c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	3301      	adds	r3, #1
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	2101      	movs	r1, #1
 800268c:	fa01 f303 	lsl.w	r3, r1, r3
 8002690:	ea42 0103 	orr.w	r1, r2, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10a      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x396>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	0e9b      	lsrs	r3, r3, #26
 80026a6:	3301      	adds	r3, #1
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	051b      	lsls	r3, r3, #20
 80026b4:	e018      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x3c8>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80026c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80026c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80026ce:	2320      	movs	r3, #32
 80026d0:	e003      	b.n	80026da <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80026d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d4:	fab3 f383 	clz	r3, r3
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	3301      	adds	r3, #1
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026e8:	430b      	orrs	r3, r1
 80026ea:	e07e      	b.n	80027ea <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d107      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x3e8>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	0e9b      	lsrs	r3, r3, #26
 80026fe:	3301      	adds	r3, #1
 8002700:	069b      	lsls	r3, r3, #26
 8002702:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002706:	e015      	b.n	8002734 <HAL_ADC_ConfigChannel+0x414>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002710:	fa93 f3a3 	rbit	r3, r3
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800271a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002720:	2320      	movs	r3, #32
 8002722:	e003      	b.n	800272c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	3301      	adds	r3, #1
 800272e:	069b      	lsls	r3, r3, #26
 8002730:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800273c:	2b00      	cmp	r3, #0
 800273e:	d109      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x434>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	0e9b      	lsrs	r3, r3, #26
 8002746:	3301      	adds	r3, #1
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	2101      	movs	r1, #1
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	e017      	b.n	8002784 <HAL_ADC_ConfigChannel+0x464>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	61bb      	str	r3, [r7, #24]
  return result;
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800276c:	2320      	movs	r3, #32
 800276e:	e003      	b.n	8002778 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	3301      	adds	r3, #1
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	2101      	movs	r1, #1
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	ea42 0103 	orr.w	r1, r2, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10d      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x490>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	0e9b      	lsrs	r3, r3, #26
 800279a:	3301      	adds	r3, #1
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	3b1e      	subs	r3, #30
 80027a8:	051b      	lsls	r3, r3, #20
 80027aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027ae:	e01b      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x4c8>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	60fb      	str	r3, [r7, #12]
  return result;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80027c8:	2320      	movs	r3, #32
 80027ca:	e003      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	3301      	adds	r3, #1
 80027d6:	f003 021f 	and.w	r2, r3, #31
 80027da:	4613      	mov	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4413      	add	r3, r2
 80027e0:	3b1e      	subs	r3, #30
 80027e2:	051b      	lsls	r3, r3, #20
 80027e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e8:	430b      	orrs	r3, r1
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	6892      	ldr	r2, [r2, #8]
 80027ee:	4619      	mov	r1, r3
 80027f0:	f7ff f8e7 	bl	80019c2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f280 80cf 	bge.w	800299c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a06      	ldr	r2, [pc, #24]	@ (800281c <HAL_ADC_ConfigChannel+0x4fc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d004      	beq.n	8002812 <HAL_ADC_ConfigChannel+0x4f2>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a04      	ldr	r2, [pc, #16]	@ (8002820 <HAL_ADC_ConfigChannel+0x500>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10a      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x508>
 8002812:	4b04      	ldr	r3, [pc, #16]	@ (8002824 <HAL_ADC_ConfigChannel+0x504>)
 8002814:	e009      	b.n	800282a <HAL_ADC_ConfigChannel+0x50a>
 8002816:	bf00      	nop
 8002818:	47ff0000 	.word	0x47ff0000
 800281c:	40022000 	.word	0x40022000
 8002820:	40022100 	.word	0x40022100
 8002824:	40022300 	.word	0x40022300
 8002828:	4b61      	ldr	r3, [pc, #388]	@ (80029b0 <HAL_ADC_ConfigChannel+0x690>)
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff f828 	bl	8001880 <LL_ADC_GetCommonPathInternalCh>
 8002830:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a5f      	ldr	r2, [pc, #380]	@ (80029b4 <HAL_ADC_ConfigChannel+0x694>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d004      	beq.n	8002846 <HAL_ADC_ConfigChannel+0x526>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a5d      	ldr	r2, [pc, #372]	@ (80029b8 <HAL_ADC_ConfigChannel+0x698>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d10e      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x544>
 8002846:	485b      	ldr	r0, [pc, #364]	@ (80029b4 <HAL_ADC_ConfigChannel+0x694>)
 8002848:	f7ff f99c 	bl	8001b84 <LL_ADC_IsEnabled>
 800284c:	4604      	mov	r4, r0
 800284e:	485a      	ldr	r0, [pc, #360]	@ (80029b8 <HAL_ADC_ConfigChannel+0x698>)
 8002850:	f7ff f998 	bl	8001b84 <LL_ADC_IsEnabled>
 8002854:	4603      	mov	r3, r0
 8002856:	4323      	orrs	r3, r4
 8002858:	2b00      	cmp	r3, #0
 800285a:	bf0c      	ite	eq
 800285c:	2301      	moveq	r3, #1
 800285e:	2300      	movne	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	e008      	b.n	8002876 <HAL_ADC_ConfigChannel+0x556>
 8002864:	4855      	ldr	r0, [pc, #340]	@ (80029bc <HAL_ADC_ConfigChannel+0x69c>)
 8002866:	f7ff f98d 	bl	8001b84 <LL_ADC_IsEnabled>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	bf0c      	ite	eq
 8002870:	2301      	moveq	r3, #1
 8002872:	2300      	movne	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d07d      	beq.n	8002976 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a50      	ldr	r2, [pc, #320]	@ (80029c0 <HAL_ADC_ConfigChannel+0x6a0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d130      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x5c6>
 8002884:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002886:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d12b      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a4a      	ldr	r2, [pc, #296]	@ (80029bc <HAL_ADC_ConfigChannel+0x69c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	f040 8081 	bne.w	800299c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a45      	ldr	r2, [pc, #276]	@ (80029b4 <HAL_ADC_ConfigChannel+0x694>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d004      	beq.n	80028ae <HAL_ADC_ConfigChannel+0x58e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a43      	ldr	r2, [pc, #268]	@ (80029b8 <HAL_ADC_ConfigChannel+0x698>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d101      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x592>
 80028ae:	4a45      	ldr	r2, [pc, #276]	@ (80029c4 <HAL_ADC_ConfigChannel+0x6a4>)
 80028b0:	e000      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x594>
 80028b2:	4a3f      	ldr	r2, [pc, #252]	@ (80029b0 <HAL_ADC_ConfigChannel+0x690>)
 80028b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028ba:	4619      	mov	r1, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	f7fe ffcc 	bl	800185a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028c2:	4b41      	ldr	r3, [pc, #260]	@ (80029c8 <HAL_ADC_ConfigChannel+0x6a8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	099b      	lsrs	r3, r3, #6
 80028c8:	4a40      	ldr	r2, [pc, #256]	@ (80029cc <HAL_ADC_ConfigChannel+0x6ac>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	099b      	lsrs	r3, r3, #6
 80028d0:	3301      	adds	r3, #1
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80028d6:	e002      	b.n	80028de <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	3b01      	subs	r3, #1
 80028dc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f9      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028e4:	e05a      	b.n	800299c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a39      	ldr	r2, [pc, #228]	@ (80029d0 <HAL_ADC_ConfigChannel+0x6b0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d11e      	bne.n	800292e <HAL_ADC_ConfigChannel+0x60e>
 80028f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d119      	bne.n	800292e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a2f      	ldr	r2, [pc, #188]	@ (80029bc <HAL_ADC_ConfigChannel+0x69c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d14b      	bne.n	800299c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a2a      	ldr	r2, [pc, #168]	@ (80029b4 <HAL_ADC_ConfigChannel+0x694>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d004      	beq.n	8002918 <HAL_ADC_ConfigChannel+0x5f8>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a29      	ldr	r2, [pc, #164]	@ (80029b8 <HAL_ADC_ConfigChannel+0x698>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d101      	bne.n	800291c <HAL_ADC_ConfigChannel+0x5fc>
 8002918:	4a2a      	ldr	r2, [pc, #168]	@ (80029c4 <HAL_ADC_ConfigChannel+0x6a4>)
 800291a:	e000      	b.n	800291e <HAL_ADC_ConfigChannel+0x5fe>
 800291c:	4a24      	ldr	r2, [pc, #144]	@ (80029b0 <HAL_ADC_ConfigChannel+0x690>)
 800291e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002920:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002924:	4619      	mov	r1, r3
 8002926:	4610      	mov	r0, r2
 8002928:	f7fe ff97 	bl	800185a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800292c:	e036      	b.n	800299c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a28      	ldr	r2, [pc, #160]	@ (80029d4 <HAL_ADC_ConfigChannel+0x6b4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d131      	bne.n	800299c <HAL_ADC_ConfigChannel+0x67c>
 8002938:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800293a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d12c      	bne.n	800299c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1d      	ldr	r2, [pc, #116]	@ (80029bc <HAL_ADC_ConfigChannel+0x69c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d127      	bne.n	800299c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a18      	ldr	r2, [pc, #96]	@ (80029b4 <HAL_ADC_ConfigChannel+0x694>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_ADC_ConfigChannel+0x640>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a17      	ldr	r2, [pc, #92]	@ (80029b8 <HAL_ADC_ConfigChannel+0x698>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d101      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x644>
 8002960:	4a18      	ldr	r2, [pc, #96]	@ (80029c4 <HAL_ADC_ConfigChannel+0x6a4>)
 8002962:	e000      	b.n	8002966 <HAL_ADC_ConfigChannel+0x646>
 8002964:	4a12      	ldr	r2, [pc, #72]	@ (80029b0 <HAL_ADC_ConfigChannel+0x690>)
 8002966:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002968:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f7fe ff73 	bl	800185a <LL_ADC_SetCommonPathInternalCh>
 8002974:	e012      	b.n	800299c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297a:	f043 0220 	orr.w	r2, r3, #32
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002988:	e008      	b.n	800299c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298e:	f043 0220 	orr.w	r2, r3, #32
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80029a4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3784      	adds	r7, #132	@ 0x84
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd90      	pop	{r4, r7, pc}
 80029b0:	58026300 	.word	0x58026300
 80029b4:	40022000 	.word	0x40022000
 80029b8:	40022100 	.word	0x40022100
 80029bc:	58026000 	.word	0x58026000
 80029c0:	cb840000 	.word	0xcb840000
 80029c4:	40022300 	.word	0x40022300
 80029c8:	24000000 	.word	0x24000000
 80029cc:	053e2d63 	.word	0x053e2d63
 80029d0:	c7520000 	.word	0xc7520000
 80029d4:	cfb80000 	.word	0xcfb80000

080029d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff f8cd 	bl	8001b84 <LL_ADC_IsEnabled>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d16e      	bne.n	8002ace <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	4b38      	ldr	r3, [pc, #224]	@ (8002ad8 <ADC_Enable+0x100>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00d      	beq.n	8002a1a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a02:	f043 0210 	orr.w	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e05a      	b.n	8002ad0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff f888 	bl	8001b34 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a24:	f7fe feca 	bl	80017bc <HAL_GetTick>
 8002a28:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a2b      	ldr	r2, [pc, #172]	@ (8002adc <ADC_Enable+0x104>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d004      	beq.n	8002a3e <ADC_Enable+0x66>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a29      	ldr	r2, [pc, #164]	@ (8002ae0 <ADC_Enable+0x108>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <ADC_Enable+0x6a>
 8002a3e:	4b29      	ldr	r3, [pc, #164]	@ (8002ae4 <ADC_Enable+0x10c>)
 8002a40:	e000      	b.n	8002a44 <ADC_Enable+0x6c>
 8002a42:	4b29      	ldr	r3, [pc, #164]	@ (8002ae8 <ADC_Enable+0x110>)
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff f80b 	bl	8001a60 <LL_ADC_GetMultimode>
 8002a4a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a23      	ldr	r2, [pc, #140]	@ (8002ae0 <ADC_Enable+0x108>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d002      	beq.n	8002a5c <ADC_Enable+0x84>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	e000      	b.n	8002a5e <ADC_Enable+0x86>
 8002a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002adc <ADC_Enable+0x104>)
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d02c      	beq.n	8002ac0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d130      	bne.n	8002ace <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a6c:	e028      	b.n	8002ac0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff f886 	bl	8001b84 <LL_ADC_IsEnabled>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d104      	bne.n	8002a88 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff f856 	bl	8001b34 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a88:	f7fe fe98 	bl	80017bc <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d914      	bls.n	8002ac0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d00d      	beq.n	8002ac0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa8:	f043 0210 	orr.w	r2, r3, #16
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab4:	f043 0201 	orr.w	r2, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e007      	b.n	8002ad0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d1cf      	bne.n	8002a6e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	8000003f 	.word	0x8000003f
 8002adc:	40022000 	.word	0x40022000
 8002ae0:	40022100 	.word	0x40022100
 8002ae4:	40022300 	.word	0x40022300
 8002ae8:	58026300 	.word	0x58026300

08002aec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff f856 	bl	8001baa <LL_ADC_IsDisableOngoing>
 8002afe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff f83d 	bl	8001b84 <LL_ADC_IsEnabled>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d047      	beq.n	8002ba0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d144      	bne.n	8002ba0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 030d 	and.w	r3, r3, #13
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d10c      	bne.n	8002b3e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff f817 	bl	8001b5c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2203      	movs	r2, #3
 8002b34:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b36:	f7fe fe41 	bl	80017bc <HAL_GetTick>
 8002b3a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b3c:	e029      	b.n	8002b92 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b42:	f043 0210 	orr.w	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4e:	f043 0201 	orr.w	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e023      	b.n	8002ba2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b5a:	f7fe fe2f 	bl	80017bc <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d914      	bls.n	8002b92 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00d      	beq.n	8002b92 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7a:	f043 0210 	orr.w	r2, r3, #16
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b86:	f043 0201 	orr.w	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e007      	b.n	8002ba2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1dc      	bne.n	8002b5a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a7a      	ldr	r2, [pc, #488]	@ (8002da4 <ADC_ConfigureBoostMode+0x1f8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d004      	beq.n	8002bc8 <ADC_ConfigureBoostMode+0x1c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a79      	ldr	r2, [pc, #484]	@ (8002da8 <ADC_ConfigureBoostMode+0x1fc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d109      	bne.n	8002bdc <ADC_ConfigureBoostMode+0x30>
 8002bc8:	4b78      	ldr	r3, [pc, #480]	@ (8002dac <ADC_ConfigureBoostMode+0x200>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf14      	ite	ne
 8002bd4:	2301      	movne	r3, #1
 8002bd6:	2300      	moveq	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	e008      	b.n	8002bee <ADC_ConfigureBoostMode+0x42>
 8002bdc:	4b74      	ldr	r3, [pc, #464]	@ (8002db0 <ADC_ConfigureBoostMode+0x204>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d01c      	beq.n	8002c2c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002bf2:	f002 fba3 	bl	800533c <HAL_RCC_GetHCLKFreq>
 8002bf6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c00:	d010      	beq.n	8002c24 <ADC_ConfigureBoostMode+0x78>
 8002c02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c06:	d873      	bhi.n	8002cf0 <ADC_ConfigureBoostMode+0x144>
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c0c:	d002      	beq.n	8002c14 <ADC_ConfigureBoostMode+0x68>
 8002c0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c12:	d16d      	bne.n	8002cf0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	0c1b      	lsrs	r3, r3, #16
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	60fb      	str	r3, [r7, #12]
        break;
 8002c22:	e068      	b.n	8002cf6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	60fb      	str	r3, [r7, #12]
        break;
 8002c2a:	e064      	b.n	8002cf6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002c2c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002c30:	f04f 0100 	mov.w	r1, #0
 8002c34:	f003 fe14 	bl	8006860 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c38:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002c42:	d051      	beq.n	8002ce8 <ADC_ConfigureBoostMode+0x13c>
 8002c44:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002c48:	d854      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
 8002c4a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002c4e:	d047      	beq.n	8002ce0 <ADC_ConfigureBoostMode+0x134>
 8002c50:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002c54:	d84e      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
 8002c56:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002c5a:	d03d      	beq.n	8002cd8 <ADC_ConfigureBoostMode+0x12c>
 8002c5c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002c60:	d848      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
 8002c62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c66:	d033      	beq.n	8002cd0 <ADC_ConfigureBoostMode+0x124>
 8002c68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c6c:	d842      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
 8002c6e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002c72:	d029      	beq.n	8002cc8 <ADC_ConfigureBoostMode+0x11c>
 8002c74:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002c78:	d83c      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
 8002c7a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002c7e:	d01a      	beq.n	8002cb6 <ADC_ConfigureBoostMode+0x10a>
 8002c80:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002c84:	d836      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
 8002c86:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002c8a:	d014      	beq.n	8002cb6 <ADC_ConfigureBoostMode+0x10a>
 8002c8c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002c90:	d830      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
 8002c92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c96:	d00e      	beq.n	8002cb6 <ADC_ConfigureBoostMode+0x10a>
 8002c98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c9c:	d82a      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
 8002c9e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ca2:	d008      	beq.n	8002cb6 <ADC_ConfigureBoostMode+0x10a>
 8002ca4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ca8:	d824      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
 8002caa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cae:	d002      	beq.n	8002cb6 <ADC_ConfigureBoostMode+0x10a>
 8002cb0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002cb4:	d11e      	bne.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	0c9b      	lsrs	r3, r3, #18
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	60fb      	str	r3, [r7, #12]
        break;
 8002cc6:	e016      	b.n	8002cf6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	60fb      	str	r3, [r7, #12]
        break;
 8002cce:	e012      	b.n	8002cf6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	60fb      	str	r3, [r7, #12]
        break;
 8002cd6:	e00e      	b.n	8002cf6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	099b      	lsrs	r3, r3, #6
 8002cdc:	60fb      	str	r3, [r7, #12]
        break;
 8002cde:	e00a      	b.n	8002cf6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	09db      	lsrs	r3, r3, #7
 8002ce4:	60fb      	str	r3, [r7, #12]
        break;
 8002ce6:	e006      	b.n	8002cf6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	60fb      	str	r3, [r7, #12]
        break;
 8002cee:	e002      	b.n	8002cf6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002cf0:	bf00      	nop
 8002cf2:	e000      	b.n	8002cf6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002cf4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002cf6:	f7fe fd91 	bl	800181c <HAL_GetREVID>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d815      	bhi.n	8002d30 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4a2b      	ldr	r2, [pc, #172]	@ (8002db4 <ADC_ConfigureBoostMode+0x208>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d908      	bls.n	8002d1e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d1a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002d1c:	e03e      	b.n	8002d9c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d2c:	609a      	str	r2, [r3, #8]
}
 8002d2e:	e035      	b.n	8002d9c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4a1f      	ldr	r2, [pc, #124]	@ (8002db8 <ADC_ConfigureBoostMode+0x20c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d808      	bhi.n	8002d50 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002d4c:	609a      	str	r2, [r3, #8]
}
 8002d4e:	e025      	b.n	8002d9c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a1a      	ldr	r2, [pc, #104]	@ (8002dbc <ADC_ConfigureBoostMode+0x210>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d80a      	bhi.n	8002d6e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d6a:	609a      	str	r2, [r3, #8]
}
 8002d6c:	e016      	b.n	8002d9c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4a13      	ldr	r2, [pc, #76]	@ (8002dc0 <ADC_ConfigureBoostMode+0x214>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d80a      	bhi.n	8002d8c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d88:	609a      	str	r2, [r3, #8]
}
 8002d8a:	e007      	b.n	8002d9c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002d9a:	609a      	str	r2, [r3, #8]
}
 8002d9c:	bf00      	nop
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40022000 	.word	0x40022000
 8002da8:	40022100 	.word	0x40022100
 8002dac:	40022300 	.word	0x40022300
 8002db0:	58026300 	.word	0x58026300
 8002db4:	01312d00 	.word	0x01312d00
 8002db8:	005f5e10 	.word	0x005f5e10
 8002dbc:	00bebc20 	.word	0x00bebc20
 8002dc0:	017d7840 	.word	0x017d7840

08002dc4 <LL_ADC_StartCalibration>:
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <LL_ADC_StartCalibration+0x38>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002de4:	430a      	orrs	r2, r1
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	609a      	str	r2, [r3, #8]
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	3ffeffc0 	.word	0x3ffeffc0

08002e00 <LL_ADC_IsCalibrationOnGoing>:
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e14:	d101      	bne.n	8002e1a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_ADCEx_Calibration_Start+0x1e>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e04c      	b.n	8002ee0 <HAL_ADCEx_Calibration_Start+0xb8>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f7ff fe4c 	bl	8002aec <ADC_Disable>
 8002e54:	4603      	mov	r3, r0
 8002e56:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d135      	bne.n	8002eca <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e62:	4b21      	ldr	r3, [pc, #132]	@ (8002ee8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	f043 0202 	orr.w	r2, r3, #2
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ffa4 	bl	8002dc4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e7c:	e014      	b.n	8002ea8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	3301      	adds	r3, #1
 8002e82:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4a19      	ldr	r2, [pc, #100]	@ (8002eec <HAL_ADCEx_Calibration_Start+0xc4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d30d      	bcc.n	8002ea8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e90:	f023 0312 	bic.w	r3, r3, #18
 8002e94:	f043 0210 	orr.w	r2, r3, #16
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e01b      	b.n	8002ee0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ffa7 	bl	8002e00 <LL_ADC_IsCalibrationOnGoing>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e2      	bne.n	8002e7e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebc:	f023 0303 	bic.w	r3, r3, #3
 8002ec0:	f043 0201 	orr.w	r2, r3, #1
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ec8:	e005      	b.n	8002ed6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ece:	f043 0210 	orr.w	r2, r3, #16
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	ffffeefd 	.word	0xffffeefd
 8002eec:	25c3f800 	.word	0x25c3f800

08002ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f00:	4b0b      	ldr	r3, [pc, #44]	@ (8002f30 <__NVIC_SetPriorityGrouping+0x40>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f18:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <__NVIC_SetPriorityGrouping+0x44>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1e:	4a04      	ldr	r2, [pc, #16]	@ (8002f30 <__NVIC_SetPriorityGrouping+0x40>)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	60d3      	str	r3, [r2, #12]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000ed00 	.word	0xe000ed00
 8002f34:	05fa0000 	.word	0x05fa0000

08002f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f3c:	4b04      	ldr	r3, [pc, #16]	@ (8002f50 <__NVIC_GetPriorityGrouping+0x18>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	0a1b      	lsrs	r3, r3, #8
 8002f42:	f003 0307 	and.w	r3, r3, #7
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	db0b      	blt.n	8002f7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f66:	88fb      	ldrh	r3, [r7, #6]
 8002f68:	f003 021f 	and.w	r2, r3, #31
 8002f6c:	4907      	ldr	r1, [pc, #28]	@ (8002f8c <__NVIC_EnableIRQ+0x38>)
 8002f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	2001      	movs	r0, #1
 8002f76:	fa00 f202 	lsl.w	r2, r0, r2
 8002f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	e000e100 	.word	0xe000e100

08002f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	6039      	str	r1, [r7, #0]
 8002f9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	db0a      	blt.n	8002fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	490c      	ldr	r1, [pc, #48]	@ (8002fdc <__NVIC_SetPriority+0x4c>)
 8002faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fae:	0112      	lsls	r2, r2, #4
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb8:	e00a      	b.n	8002fd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4908      	ldr	r1, [pc, #32]	@ (8002fe0 <__NVIC_SetPriority+0x50>)
 8002fc0:	88fb      	ldrh	r3, [r7, #6]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	3b04      	subs	r3, #4
 8002fc8:	0112      	lsls	r2, r2, #4
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	440b      	add	r3, r1
 8002fce:	761a      	strb	r2, [r3, #24]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000e100 	.word	0xe000e100
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b089      	sub	sp, #36	@ 0x24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f1c3 0307 	rsb	r3, r3, #7
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	bf28      	it	cs
 8003002:	2304      	movcs	r3, #4
 8003004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3304      	adds	r3, #4
 800300a:	2b06      	cmp	r3, #6
 800300c:	d902      	bls.n	8003014 <NVIC_EncodePriority+0x30>
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3b03      	subs	r3, #3
 8003012:	e000      	b.n	8003016 <NVIC_EncodePriority+0x32>
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003018:	f04f 32ff 	mov.w	r2, #4294967295
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43da      	mvns	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	401a      	ands	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800302c:	f04f 31ff 	mov.w	r1, #4294967295
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	fa01 f303 	lsl.w	r3, r1, r3
 8003036:	43d9      	mvns	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800303c:	4313      	orrs	r3, r2
         );
}
 800303e:	4618      	mov	r0, r3
 8003040:	3724      	adds	r7, #36	@ 0x24
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff ff4c 	bl	8002ef0 <__NVIC_SetPriorityGrouping>
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800306e:	f7ff ff63 	bl	8002f38 <__NVIC_GetPriorityGrouping>
 8003072:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	6978      	ldr	r0, [r7, #20]
 800307a:	f7ff ffb3 	bl	8002fe4 <NVIC_EncodePriority>
 800307e:	4602      	mov	r2, r0
 8003080:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff ff82 	bl	8002f90 <__NVIC_SetPriority>
}
 800308c:	bf00      	nop
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800309e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff ff56 	bl	8002f54 <__NVIC_EnableIRQ>
}
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80030b4:	f3bf 8f5f 	dmb	sy
}
 80030b8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80030ba:	4b07      	ldr	r3, [pc, #28]	@ (80030d8 <HAL_MPU_Disable+0x28>)
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	4a06      	ldr	r2, [pc, #24]	@ (80030d8 <HAL_MPU_Disable+0x28>)
 80030c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030c4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80030c6:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <HAL_MPU_Disable+0x2c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	605a      	str	r2, [r3, #4]
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000ed00 	.word	0xe000ed00
 80030dc:	e000ed90 	.word	0xe000ed90

080030e0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80030e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003118 <HAL_MPU_Enable+0x38>)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80030f2:	4b0a      	ldr	r3, [pc, #40]	@ (800311c <HAL_MPU_Enable+0x3c>)
 80030f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f6:	4a09      	ldr	r2, [pc, #36]	@ (800311c <HAL_MPU_Enable+0x3c>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030fc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80030fe:	f3bf 8f4f 	dsb	sy
}
 8003102:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003104:	f3bf 8f6f 	isb	sy
}
 8003108:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	e000ed90 	.word	0xe000ed90
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	785a      	ldrb	r2, [r3, #1]
 800312c:	4b1b      	ldr	r3, [pc, #108]	@ (800319c <HAL_MPU_ConfigRegion+0x7c>)
 800312e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003130:	4b1a      	ldr	r3, [pc, #104]	@ (800319c <HAL_MPU_ConfigRegion+0x7c>)
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	4a19      	ldr	r2, [pc, #100]	@ (800319c <HAL_MPU_ConfigRegion+0x7c>)
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800313c:	4a17      	ldr	r2, [pc, #92]	@ (800319c <HAL_MPU_ConfigRegion+0x7c>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	7b1b      	ldrb	r3, [r3, #12]
 8003148:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	7adb      	ldrb	r3, [r3, #11]
 800314e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003150:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	7a9b      	ldrb	r3, [r3, #10]
 8003156:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003158:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	7b5b      	ldrb	r3, [r3, #13]
 800315e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003160:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	7b9b      	ldrb	r3, [r3, #14]
 8003166:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003168:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	7bdb      	ldrb	r3, [r3, #15]
 800316e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003170:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	7a5b      	ldrb	r3, [r3, #9]
 8003176:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003178:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	7a1b      	ldrb	r3, [r3, #8]
 800317e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003180:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	7812      	ldrb	r2, [r2, #0]
 8003186:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003188:	4a04      	ldr	r2, [pc, #16]	@ (800319c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800318a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800318c:	6113      	str	r3, [r2, #16]
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	e000ed90 	.word	0xe000ed90

080031a0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e014      	b.n	80031dc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	791b      	ldrb	r3, [r3, #4]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fd fa92 	bl	80006ec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e046      	b.n	8003286 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	795b      	ldrb	r3, [r3, #5]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_DAC_Start+0x20>
 8003200:	2302      	movs	r3, #2
 8003202:	e040      	b.n	8003286 <HAL_DAC_Start+0xa2>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2202      	movs	r2, #2
 800320e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6819      	ldr	r1, [r3, #0]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2201      	movs	r2, #1
 800321e:	409a      	lsls	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10f      	bne.n	800324e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8003238:	2b02      	cmp	r3, #2
 800323a:	d11d      	bne.n	8003278 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	e014      	b.n	8003278 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2102      	movs	r1, #2
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	429a      	cmp	r2, r3
 8003266:	d107      	bne.n	8003278 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0202 	orr.w	r2, r2, #2
 8003276:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01d      	beq.n	80032f0 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d018      	beq.n	80032f0 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2204      	movs	r2, #4
 80032c2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f043 0201 	orr.w	r2, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032e8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f851 	bl	8003392 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01d      	beq.n	8003336 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d018      	beq.n	8003336 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2204      	movs	r2, #4
 8003308:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f043 0202 	orr.w	r2, r3, #2
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800331e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800332e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f97b 	bl	800362c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800333e:	b480      	push	{r7}
 8003340:	b087      	sub	sp, #28
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e015      	b.n	8003386 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d105      	bne.n	8003372 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4413      	add	r3, r2
 800336c:	3308      	adds	r3, #8
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	e004      	b.n	800337c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4413      	add	r3, r2
 8003378:	3314      	adds	r3, #20
 800337a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	461a      	mov	r2, r3
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	@ 0x28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_DAC_ConfigChannel+0x1e>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e12a      	b.n	8003620 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	795b      	ldrb	r3, [r3, #5]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_DAC_ConfigChannel+0x2e>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e124      	b.n	8003620 <HAL_DAC_ConfigChannel+0x278>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2202      	movs	r2, #2
 80033e0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d17a      	bne.n	80034e0 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80033ea:	f7fe f9e7 	bl	80017bc <HAL_GetTick>
 80033ee:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d13d      	bne.n	8003472 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80033f6:	e018      	b.n	800342a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80033f8:	f7fe f9e0 	bl	80017bc <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d911      	bls.n	800342a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800340c:	4b86      	ldr	r3, [pc, #536]	@ (8003628 <HAL_DAC_ConfigChannel+0x280>)
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f043 0208 	orr.w	r2, r3, #8
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2203      	movs	r2, #3
 8003424:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e0fa      	b.n	8003620 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003430:	4b7d      	ldr	r3, [pc, #500]	@ (8003628 <HAL_DAC_ConfigChannel+0x280>)
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1df      	bne.n	80033f8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	6992      	ldr	r2, [r2, #24]
 8003440:	641a      	str	r2, [r3, #64]	@ 0x40
 8003442:	e020      	b.n	8003486 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003444:	f7fe f9ba 	bl	80017bc <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d90f      	bls.n	8003472 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003458:	2b00      	cmp	r3, #0
 800345a:	da0a      	bge.n	8003472 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f043 0208 	orr.w	r2, r3, #8
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2203      	movs	r2, #3
 800346c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e0d6      	b.n	8003620 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003478:	2b00      	cmp	r3, #0
 800347a:	dbe3      	blt.n	8003444 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	6992      	ldr	r2, [r2, #24]
 8003484:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0310 	and.w	r3, r3, #16
 8003492:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	43db      	mvns	r3, r3
 800349c:	ea02 0103 	and.w	r1, r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	69da      	ldr	r2, [r3, #28]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f003 0310 	and.w	r3, r3, #16
 80034aa:	409a      	lsls	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	21ff      	movs	r1, #255	@ 0xff
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	ea02 0103 	and.w	r1, r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	6a1a      	ldr	r2, [r3, #32]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	409a      	lsls	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d11d      	bne.n	8003524 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ee:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	221f      	movs	r2, #31
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2207      	movs	r2, #7
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d102      	bne.n	800354e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8003548:	2300      	movs	r3, #0
 800354a:	627b      	str	r3, [r7, #36]	@ 0x24
 800354c:	e00f      	b.n	800356e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d102      	bne.n	800355c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003556:	2301      	movs	r3, #1
 8003558:	627b      	str	r3, [r7, #36]	@ 0x24
 800355a:	e008      	b.n	800356e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003564:	2301      	movs	r3, #1
 8003566:	627b      	str	r3, [r7, #36]	@ 0x24
 8003568:	e001      	b.n	800356e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800356a:	2300      	movs	r3, #0
 800356c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	4313      	orrs	r3, r2
 8003578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6819      	ldr	r1, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43da      	mvns	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	400a      	ands	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6819      	ldr	r1, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	22c0      	movs	r2, #192	@ 0xc0
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43da      	mvns	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	400a      	ands	r2, r1
 800360e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2201      	movs	r2, #1
 8003614:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800361c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003620:	4618      	mov	r0, r3
 8003622:	3728      	adds	r7, #40	@ 0x28
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20008000 	.word	0x20008000

0800362c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003640:	b480      	push	{r7}
 8003642:	b089      	sub	sp, #36	@ 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800364e:	4b89      	ldr	r3, [pc, #548]	@ (8003874 <HAL_GPIO_Init+0x234>)
 8003650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003652:	e194      	b.n	800397e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	2101      	movs	r1, #1
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	4013      	ands	r3, r2
 8003662:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8186 	beq.w	8003978 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d005      	beq.n	8003684 <HAL_GPIO_Init+0x44>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d130      	bne.n	80036e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	2203      	movs	r2, #3
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036ba:	2201      	movs	r2, #1
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	f003 0201 	and.w	r2, r3, #1
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d017      	beq.n	8003722 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	2203      	movs	r2, #3
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d123      	bne.n	8003776 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	08da      	lsrs	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3208      	adds	r2, #8
 8003736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	220f      	movs	r2, #15
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4013      	ands	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	08da      	lsrs	r2, r3, #3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3208      	adds	r2, #8
 8003770:	69b9      	ldr	r1, [r7, #24]
 8003772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	2203      	movs	r2, #3
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43db      	mvns	r3, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4013      	ands	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 0203 	and.w	r2, r3, #3
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80e0 	beq.w	8003978 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003878 <HAL_GPIO_Init+0x238>)
 80037ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037be:	4a2e      	ldr	r2, [pc, #184]	@ (8003878 <HAL_GPIO_Init+0x238>)
 80037c0:	f043 0302 	orr.w	r3, r3, #2
 80037c4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80037c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003878 <HAL_GPIO_Init+0x238>)
 80037ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037d6:	4a29      	ldr	r2, [pc, #164]	@ (800387c <HAL_GPIO_Init+0x23c>)
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	089b      	lsrs	r3, r3, #2
 80037dc:	3302      	adds	r3, #2
 80037de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	220f      	movs	r2, #15
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4013      	ands	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a20      	ldr	r2, [pc, #128]	@ (8003880 <HAL_GPIO_Init+0x240>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d052      	beq.n	80038a8 <HAL_GPIO_Init+0x268>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a1f      	ldr	r2, [pc, #124]	@ (8003884 <HAL_GPIO_Init+0x244>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d031      	beq.n	800386e <HAL_GPIO_Init+0x22e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a1e      	ldr	r2, [pc, #120]	@ (8003888 <HAL_GPIO_Init+0x248>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d02b      	beq.n	800386a <HAL_GPIO_Init+0x22a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a1d      	ldr	r2, [pc, #116]	@ (800388c <HAL_GPIO_Init+0x24c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d025      	beq.n	8003866 <HAL_GPIO_Init+0x226>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a1c      	ldr	r2, [pc, #112]	@ (8003890 <HAL_GPIO_Init+0x250>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d01f      	beq.n	8003862 <HAL_GPIO_Init+0x222>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a1b      	ldr	r2, [pc, #108]	@ (8003894 <HAL_GPIO_Init+0x254>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d019      	beq.n	800385e <HAL_GPIO_Init+0x21e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a1a      	ldr	r2, [pc, #104]	@ (8003898 <HAL_GPIO_Init+0x258>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d013      	beq.n	800385a <HAL_GPIO_Init+0x21a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a19      	ldr	r2, [pc, #100]	@ (800389c <HAL_GPIO_Init+0x25c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00d      	beq.n	8003856 <HAL_GPIO_Init+0x216>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a18      	ldr	r2, [pc, #96]	@ (80038a0 <HAL_GPIO_Init+0x260>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d007      	beq.n	8003852 <HAL_GPIO_Init+0x212>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a17      	ldr	r2, [pc, #92]	@ (80038a4 <HAL_GPIO_Init+0x264>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d101      	bne.n	800384e <HAL_GPIO_Init+0x20e>
 800384a:	2309      	movs	r3, #9
 800384c:	e02d      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 800384e:	230a      	movs	r3, #10
 8003850:	e02b      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 8003852:	2308      	movs	r3, #8
 8003854:	e029      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 8003856:	2307      	movs	r3, #7
 8003858:	e027      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 800385a:	2306      	movs	r3, #6
 800385c:	e025      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 800385e:	2305      	movs	r3, #5
 8003860:	e023      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 8003862:	2304      	movs	r3, #4
 8003864:	e021      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 8003866:	2303      	movs	r3, #3
 8003868:	e01f      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 800386a:	2302      	movs	r3, #2
 800386c:	e01d      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 800386e:	2301      	movs	r3, #1
 8003870:	e01b      	b.n	80038aa <HAL_GPIO_Init+0x26a>
 8003872:	bf00      	nop
 8003874:	58000080 	.word	0x58000080
 8003878:	58024400 	.word	0x58024400
 800387c:	58000400 	.word	0x58000400
 8003880:	58020000 	.word	0x58020000
 8003884:	58020400 	.word	0x58020400
 8003888:	58020800 	.word	0x58020800
 800388c:	58020c00 	.word	0x58020c00
 8003890:	58021000 	.word	0x58021000
 8003894:	58021400 	.word	0x58021400
 8003898:	58021800 	.word	0x58021800
 800389c:	58021c00 	.word	0x58021c00
 80038a0:	58022000 	.word	0x58022000
 80038a4:	58022400 	.word	0x58022400
 80038a8:	2300      	movs	r3, #0
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	f002 0203 	and.w	r2, r2, #3
 80038b0:	0092      	lsls	r2, r2, #2
 80038b2:	4093      	lsls	r3, r2
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038ba:	4938      	ldr	r1, [pc, #224]	@ (800399c <HAL_GPIO_Init+0x35c>)
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	089b      	lsrs	r3, r3, #2
 80038c0:	3302      	adds	r3, #2
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80038ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80038f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800391c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	43db      	mvns	r3, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4013      	ands	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	3301      	adds	r3, #1
 800397c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	f47f ae63 	bne.w	8003654 <HAL_GPIO_Init+0x14>
  }
}
 800398e:	bf00      	nop
 8003990:	bf00      	nop
 8003992:	3724      	adds	r7, #36	@ 0x24
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	58000400 	.word	0x58000400

080039a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	807b      	strh	r3, [r7, #2]
 80039ac:	4613      	mov	r3, r2
 80039ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039b0:	787b      	ldrb	r3, [r7, #1]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039b6:	887a      	ldrh	r2, [r7, #2]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80039bc:	e003      	b.n	80039c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80039be:	887b      	ldrh	r3, [r7, #2]
 80039c0:	041a      	lsls	r2, r3, #16
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	619a      	str	r2, [r3, #24]
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	460b      	mov	r3, r1
 80039dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039e4:	887a      	ldrh	r2, [r7, #2]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4013      	ands	r3, r2
 80039ea:	041a      	lsls	r2, r3, #16
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	43d9      	mvns	r1, r3
 80039f0:	887b      	ldrh	r3, [r7, #2]
 80039f2:	400b      	ands	r3, r1
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	619a      	str	r2, [r3, #24]
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a14:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a24:	88fb      	ldrh	r3, [r7, #6]
 8003a26:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f009 fed7 	bl	800d7e0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e08b      	b.n	8003b66 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d106      	bne.n	8003a68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fd f80c 	bl	8000a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2224      	movs	r2, #36	@ 0x24
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0201 	bic.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d107      	bne.n	8003ab6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	e006      	b.n	8003ac4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003ac2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d108      	bne.n	8003ade <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ada:	605a      	str	r2, [r3, #4]
 8003adc:	e007      	b.n	8003aee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003aec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b70 <HAL_I2C_Init+0x134>)
 8003afa:	430b      	orrs	r3, r1
 8003afc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69d9      	ldr	r1, [r3, #28]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1a      	ldr	r2, [r3, #32]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	02008000 	.word	0x02008000

08003b74 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	4608      	mov	r0, r1
 8003b7e:	4611      	mov	r1, r2
 8003b80:	461a      	mov	r2, r3
 8003b82:	4603      	mov	r3, r0
 8003b84:	817b      	strh	r3, [r7, #10]
 8003b86:	460b      	mov	r3, r1
 8003b88:	813b      	strh	r3, [r7, #8]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	f040 80fd 	bne.w	8003d96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_I2C_Mem_Read+0x34>
 8003ba2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0f1      	b.n	8003d98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_I2C_Mem_Read+0x4e>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e0ea      	b.n	8003d98 <HAL_I2C_Mem_Read+0x224>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bca:	f7fd fdf7 	bl	80017bc <HAL_GetTick>
 8003bce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2319      	movs	r3, #25
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f95b 	bl	8003e98 <I2C_WaitOnFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0d5      	b.n	8003d98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2222      	movs	r2, #34	@ 0x22
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2240      	movs	r2, #64	@ 0x40
 8003bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a3a      	ldr	r2, [r7, #32]
 8003c06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c14:	88f8      	ldrh	r0, [r7, #6]
 8003c16:	893a      	ldrh	r2, [r7, #8]
 8003c18:	8979      	ldrh	r1, [r7, #10]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	4603      	mov	r3, r0
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f8bf 	bl	8003da8 <I2C_RequestMemoryRead>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0ad      	b.n	8003d98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2bff      	cmp	r3, #255	@ 0xff
 8003c44:	d90e      	bls.n	8003c64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	22ff      	movs	r2, #255	@ 0xff
 8003c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	8979      	ldrh	r1, [r7, #10]
 8003c54:	4b52      	ldr	r3, [pc, #328]	@ (8003da0 <HAL_I2C_Mem_Read+0x22c>)
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 fadf 	bl	8004220 <I2C_TransferConfig>
 8003c62:	e00f      	b.n	8003c84 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	8979      	ldrh	r1, [r7, #10]
 8003c76:	4b4a      	ldr	r3, [pc, #296]	@ (8003da0 <HAL_I2C_Mem_Read+0x22c>)
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 face 	bl	8004220 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2104      	movs	r1, #4
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f902 	bl	8003e98 <I2C_WaitOnFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e07c      	b.n	8003d98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d034      	beq.n	8003d44 <HAL_I2C_Mem_Read+0x1d0>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d130      	bne.n	8003d44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2180      	movs	r1, #128	@ 0x80
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f8d3 	bl	8003e98 <I2C_WaitOnFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e04d      	b.n	8003d98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2bff      	cmp	r3, #255	@ 0xff
 8003d04:	d90e      	bls.n	8003d24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	22ff      	movs	r2, #255	@ 0xff
 8003d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	8979      	ldrh	r1, [r7, #10]
 8003d14:	2300      	movs	r3, #0
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 fa7f 	bl	8004220 <I2C_TransferConfig>
 8003d22:	e00f      	b.n	8003d44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	8979      	ldrh	r1, [r7, #10]
 8003d36:	2300      	movs	r3, #0
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 fa6e 	bl	8004220 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d19a      	bne.n	8003c84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f940 	bl	8003fd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e01a      	b.n	8003d98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2220      	movs	r2, #32
 8003d68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4b0b      	ldr	r3, [pc, #44]	@ (8003da4 <HAL_I2C_Mem_Read+0x230>)
 8003d76:	400b      	ands	r3, r1
 8003d78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	e000      	b.n	8003d98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003d96:	2302      	movs	r3, #2
  }
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	80002400 	.word	0x80002400
 8003da4:	fe00e800 	.word	0xfe00e800

08003da8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	4608      	mov	r0, r1
 8003db2:	4611      	mov	r1, r2
 8003db4:	461a      	mov	r2, r3
 8003db6:	4603      	mov	r3, r0
 8003db8:	817b      	strh	r3, [r7, #10]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	813b      	strh	r3, [r7, #8]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	8979      	ldrh	r1, [r7, #10]
 8003dc8:	4b20      	ldr	r3, [pc, #128]	@ (8003e4c <I2C_RequestMemoryRead+0xa4>)
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 fa26 	bl	8004220 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	69b9      	ldr	r1, [r7, #24]
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f8b6 	bl	8003f4a <I2C_WaitOnTXISFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e02c      	b.n	8003e42 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003de8:	88fb      	ldrh	r3, [r7, #6]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d105      	bne.n	8003dfa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dee:	893b      	ldrh	r3, [r7, #8]
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003df8:	e015      	b.n	8003e26 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dfa:	893b      	ldrh	r3, [r7, #8]
 8003dfc:	0a1b      	lsrs	r3, r3, #8
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e08:	69fa      	ldr	r2, [r7, #28]
 8003e0a:	69b9      	ldr	r1, [r7, #24]
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f89c 	bl	8003f4a <I2C_WaitOnTXISFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e012      	b.n	8003e42 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e1c:	893b      	ldrh	r3, [r7, #8]
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2140      	movs	r1, #64	@ 0x40
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f831 	bl	8003e98 <I2C_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	80002000 	.word	0x80002000

08003e50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d103      	bne.n	8003e6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d007      	beq.n	8003e8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699a      	ldr	r2, [r3, #24]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	619a      	str	r2, [r3, #24]
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ea8:	e03b      	b.n	8003f22 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	6839      	ldr	r1, [r7, #0]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f8d6 	bl	8004060 <I2C_IsErrorOccurred>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e041      	b.n	8003f42 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec4:	d02d      	beq.n	8003f22 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec6:	f7fd fc79 	bl	80017bc <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d302      	bcc.n	8003edc <I2C_WaitOnFlagUntilTimeout+0x44>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d122      	bne.n	8003f22 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d113      	bne.n	8003f22 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efe:	f043 0220 	orr.w	r2, r3, #32
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e00f      	b.n	8003f42 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699a      	ldr	r2, [r3, #24]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	bf0c      	ite	eq
 8003f32:	2301      	moveq	r3, #1
 8003f34:	2300      	movne	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d0b4      	beq.n	8003eaa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f56:	e033      	b.n	8003fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 f87f 	bl	8004060 <I2C_IsErrorOccurred>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e031      	b.n	8003fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f72:	d025      	beq.n	8003fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f74:	f7fd fc22 	bl	80017bc <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d302      	bcc.n	8003f8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d11a      	bne.n	8003fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d013      	beq.n	8003fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9c:	f043 0220 	orr.w	r2, r3, #32
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e007      	b.n	8003fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d1c4      	bne.n	8003f58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fe4:	e02f      	b.n	8004046 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 f838 	bl	8004060 <I2C_IsErrorOccurred>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e02d      	b.n	8004056 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffa:	f7fd fbdf 	bl	80017bc <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	d302      	bcc.n	8004010 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d11a      	bne.n	8004046 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b20      	cmp	r3, #32
 800401c:	d013      	beq.n	8004046 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004022:	f043 0220 	orr.w	r2, r3, #32
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e007      	b.n	8004056 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b20      	cmp	r3, #32
 8004052:	d1c8      	bne.n	8003fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	@ 0x28
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b00      	cmp	r3, #0
 800408a:	d068      	beq.n	800415e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2210      	movs	r2, #16
 8004092:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004094:	e049      	b.n	800412a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409c:	d045      	beq.n	800412a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800409e:	f7fd fb8d 	bl	80017bc <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d302      	bcc.n	80040b4 <I2C_IsErrorOccurred+0x54>
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d13a      	bne.n	800412a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040d6:	d121      	bne.n	800411c <I2C_IsErrorOccurred+0xbc>
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040de:	d01d      	beq.n	800411c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d01a      	beq.n	800411c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80040f6:	f7fd fb61 	bl	80017bc <HAL_GetTick>
 80040fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040fc:	e00e      	b.n	800411c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80040fe:	f7fd fb5d 	bl	80017bc <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b19      	cmp	r3, #25
 800410a:	d907      	bls.n	800411c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	f043 0320 	orr.w	r3, r3, #32
 8004112:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800411a:	e006      	b.n	800412a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b20      	cmp	r3, #32
 8004128:	d1e9      	bne.n	80040fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b20      	cmp	r3, #32
 8004136:	d003      	beq.n	8004140 <I2C_IsErrorOccurred+0xe0>
 8004138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0aa      	beq.n	8004096 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004144:	2b00      	cmp	r3, #0
 8004146:	d103      	bne.n	8004150 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2220      	movs	r2, #32
 800414e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	f043 0304 	orr.w	r3, r3, #4
 8004156:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00b      	beq.n	8004188 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004180:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00b      	beq.n	80041aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f043 0308 	orr.w	r3, r3, #8
 8004198:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00b      	beq.n	80041cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	f043 0302 	orr.w	r3, r3, #2
 80041ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80041cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01c      	beq.n	800420e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f7ff fe3b 	bl	8003e50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6859      	ldr	r1, [r3, #4]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	4b0d      	ldr	r3, [pc, #52]	@ (800421c <I2C_IsErrorOccurred+0x1bc>)
 80041e6:	400b      	ands	r3, r1
 80041e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	431a      	orrs	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800420e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004212:	4618      	mov	r0, r3
 8004214:	3728      	adds	r7, #40	@ 0x28
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	fe00e800 	.word	0xfe00e800

08004220 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	607b      	str	r3, [r7, #4]
 800422a:	460b      	mov	r3, r1
 800422c:	817b      	strh	r3, [r7, #10]
 800422e:	4613      	mov	r3, r2
 8004230:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004232:	897b      	ldrh	r3, [r7, #10]
 8004234:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004238:	7a7b      	ldrb	r3, [r7, #9]
 800423a:	041b      	lsls	r3, r3, #16
 800423c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004240:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	4313      	orrs	r3, r2
 800424a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800424e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	0d5b      	lsrs	r3, r3, #21
 800425a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800425e:	4b08      	ldr	r3, [pc, #32]	@ (8004280 <I2C_TransferConfig+0x60>)
 8004260:	430b      	orrs	r3, r1
 8004262:	43db      	mvns	r3, r3
 8004264:	ea02 0103 	and.w	r1, r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004272:	bf00      	nop
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	03ff63ff 	.word	0x03ff63ff

08004284 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b20      	cmp	r3, #32
 8004298:	d138      	bne.n	800430c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e032      	b.n	800430e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2224      	movs	r2, #36	@ 0x24
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0201 	bic.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6819      	ldr	r1, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	e000      	b.n	800430e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800430c:	2302      	movs	r3, #2
  }
}
 800430e:	4618      	mov	r0, r3
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800431a:	b480      	push	{r7}
 800431c:	b085      	sub	sp, #20
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b20      	cmp	r3, #32
 800432e:	d139      	bne.n	80043a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800433a:	2302      	movs	r3, #2
 800433c:	e033      	b.n	80043a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2224      	movs	r2, #36	@ 0x24
 800434a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0201 	bic.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800436c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0201 	orr.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	e000      	b.n	80043a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
  }
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80043bc:	4b19      	ldr	r3, [pc, #100]	@ (8004424 <HAL_PWREx_ConfigSupply+0x70>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d00a      	beq.n	80043de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80043c8:	4b16      	ldr	r3, [pc, #88]	@ (8004424 <HAL_PWREx_ConfigSupply+0x70>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d001      	beq.n	80043da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e01f      	b.n	800441a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	e01d      	b.n	800441a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80043de:	4b11      	ldr	r3, [pc, #68]	@ (8004424 <HAL_PWREx_ConfigSupply+0x70>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f023 0207 	bic.w	r2, r3, #7
 80043e6:	490f      	ldr	r1, [pc, #60]	@ (8004424 <HAL_PWREx_ConfigSupply+0x70>)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80043ee:	f7fd f9e5 	bl	80017bc <HAL_GetTick>
 80043f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043f4:	e009      	b.n	800440a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043f6:	f7fd f9e1 	bl	80017bc <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004404:	d901      	bls.n	800440a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e007      	b.n	800441a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800440a:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <HAL_PWREx_ConfigSupply+0x70>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004412:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004416:	d1ee      	bne.n	80043f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	58024800 	.word	0x58024800

08004428 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08c      	sub	sp, #48	@ 0x30
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d102      	bne.n	800443c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	f000 bc48 	b.w	8004ccc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8088 	beq.w	800455a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800444a:	4b99      	ldr	r3, [pc, #612]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004452:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004454:	4b96      	ldr	r3, [pc, #600]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 8004456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004458:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800445a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800445c:	2b10      	cmp	r3, #16
 800445e:	d007      	beq.n	8004470 <HAL_RCC_OscConfig+0x48>
 8004460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004462:	2b18      	cmp	r3, #24
 8004464:	d111      	bne.n	800448a <HAL_RCC_OscConfig+0x62>
 8004466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d10c      	bne.n	800448a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004470:	4b8f      	ldr	r3, [pc, #572]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d06d      	beq.n	8004558 <HAL_RCC_OscConfig+0x130>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d169      	bne.n	8004558 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	f000 bc21 	b.w	8004ccc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004492:	d106      	bne.n	80044a2 <HAL_RCC_OscConfig+0x7a>
 8004494:	4b86      	ldr	r3, [pc, #536]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a85      	ldr	r2, [pc, #532]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 800449a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	e02e      	b.n	8004500 <HAL_RCC_OscConfig+0xd8>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x9c>
 80044aa:	4b81      	ldr	r3, [pc, #516]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a80      	ldr	r2, [pc, #512]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 80044b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b7e      	ldr	r3, [pc, #504]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a7d      	ldr	r2, [pc, #500]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 80044bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e01d      	b.n	8004500 <HAL_RCC_OscConfig+0xd8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044cc:	d10c      	bne.n	80044e8 <HAL_RCC_OscConfig+0xc0>
 80044ce:	4b78      	ldr	r3, [pc, #480]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a77      	ldr	r2, [pc, #476]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 80044d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	4b75      	ldr	r3, [pc, #468]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a74      	ldr	r2, [pc, #464]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 80044e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	e00b      	b.n	8004500 <HAL_RCC_OscConfig+0xd8>
 80044e8:	4b71      	ldr	r3, [pc, #452]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a70      	ldr	r2, [pc, #448]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 80044ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	4b6e      	ldr	r3, [pc, #440]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a6d      	ldr	r2, [pc, #436]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 80044fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d013      	beq.n	8004530 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004508:	f7fd f958 	bl	80017bc <HAL_GetTick>
 800450c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004510:	f7fd f954 	bl	80017bc <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b64      	cmp	r3, #100	@ 0x64
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e3d4      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004522:	4b63      	ldr	r3, [pc, #396]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f0      	beq.n	8004510 <HAL_RCC_OscConfig+0xe8>
 800452e:	e014      	b.n	800455a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fd f944 	bl	80017bc <HAL_GetTick>
 8004534:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004538:	f7fd f940 	bl	80017bc <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b64      	cmp	r3, #100	@ 0x64
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e3c0      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800454a:	4b59      	ldr	r3, [pc, #356]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0x110>
 8004556:	e000      	b.n	800455a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 80ca 	beq.w	80046fc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004568:	4b51      	ldr	r3, [pc, #324]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004570:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004572:	4b4f      	ldr	r3, [pc, #316]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 8004574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004576:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d007      	beq.n	800458e <HAL_RCC_OscConfig+0x166>
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	2b18      	cmp	r3, #24
 8004582:	d156      	bne.n	8004632 <HAL_RCC_OscConfig+0x20a>
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d151      	bne.n	8004632 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800458e:	4b48      	ldr	r3, [pc, #288]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <HAL_RCC_OscConfig+0x17e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e392      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80045a6:	4b42      	ldr	r3, [pc, #264]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f023 0219 	bic.w	r2, r3, #25
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	493f      	ldr	r1, [pc, #252]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7fd f900 	bl	80017bc <HAL_GetTick>
 80045bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c0:	f7fd f8fc 	bl	80017bc <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e37c      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045d2:	4b37      	ldr	r3, [pc, #220]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045de:	f7fd f91d 	bl	800181c <HAL_GetREVID>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d817      	bhi.n	800461c <HAL_RCC_OscConfig+0x1f4>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	2b40      	cmp	r3, #64	@ 0x40
 80045f2:	d108      	bne.n	8004606 <HAL_RCC_OscConfig+0x1de>
 80045f4:	4b2e      	ldr	r3, [pc, #184]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80045fc:	4a2c      	ldr	r2, [pc, #176]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 80045fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004602:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004604:	e07a      	b.n	80046fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004606:	4b2a      	ldr	r3, [pc, #168]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	031b      	lsls	r3, r3, #12
 8004614:	4926      	ldr	r1, [pc, #152]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 8004616:	4313      	orrs	r3, r2
 8004618:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800461a:	e06f      	b.n	80046fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461c:	4b24      	ldr	r3, [pc, #144]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	061b      	lsls	r3, r3, #24
 800462a:	4921      	ldr	r1, [pc, #132]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 800462c:	4313      	orrs	r3, r2
 800462e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004630:	e064      	b.n	80046fc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d047      	beq.n	80046ca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800463a:	4b1d      	ldr	r3, [pc, #116]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f023 0219 	bic.w	r2, r3, #25
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	491a      	ldr	r1, [pc, #104]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 8004648:	4313      	orrs	r3, r2
 800464a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fd f8b6 	bl	80017bc <HAL_GetTick>
 8004650:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004654:	f7fd f8b2 	bl	80017bc <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e332      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004666:	4b12      	ldr	r3, [pc, #72]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004672:	f7fd f8d3 	bl	800181c <HAL_GetREVID>
 8004676:	4603      	mov	r3, r0
 8004678:	f241 0203 	movw	r2, #4099	@ 0x1003
 800467c:	4293      	cmp	r3, r2
 800467e:	d819      	bhi.n	80046b4 <HAL_RCC_OscConfig+0x28c>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	2b40      	cmp	r3, #64	@ 0x40
 8004686:	d108      	bne.n	800469a <HAL_RCC_OscConfig+0x272>
 8004688:	4b09      	ldr	r3, [pc, #36]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004690:	4a07      	ldr	r2, [pc, #28]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 8004692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004696:	6053      	str	r3, [r2, #4]
 8004698:	e030      	b.n	80046fc <HAL_RCC_OscConfig+0x2d4>
 800469a:	4b05      	ldr	r3, [pc, #20]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	031b      	lsls	r3, r3, #12
 80046a8:	4901      	ldr	r1, [pc, #4]	@ (80046b0 <HAL_RCC_OscConfig+0x288>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	604b      	str	r3, [r1, #4]
 80046ae:	e025      	b.n	80046fc <HAL_RCC_OscConfig+0x2d4>
 80046b0:	58024400 	.word	0x58024400
 80046b4:	4b9a      	ldr	r3, [pc, #616]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	061b      	lsls	r3, r3, #24
 80046c2:	4997      	ldr	r1, [pc, #604]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]
 80046c8:	e018      	b.n	80046fc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ca:	4b95      	ldr	r3, [pc, #596]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a94      	ldr	r2, [pc, #592]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fd f871 	bl	80017bc <HAL_GetTick>
 80046da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046de:	f7fd f86d 	bl	80017bc <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e2ed      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046f0:	4b8b      	ldr	r3, [pc, #556]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1f0      	bne.n	80046de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80a9 	beq.w	800485c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800470a:	4b85      	ldr	r3, [pc, #532]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004712:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004714:	4b82      	ldr	r3, [pc, #520]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 8004716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004718:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	2b08      	cmp	r3, #8
 800471e:	d007      	beq.n	8004730 <HAL_RCC_OscConfig+0x308>
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	2b18      	cmp	r3, #24
 8004724:	d13a      	bne.n	800479c <HAL_RCC_OscConfig+0x374>
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	2b01      	cmp	r3, #1
 800472e:	d135      	bne.n	800479c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004730:	4b7b      	ldr	r3, [pc, #492]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_RCC_OscConfig+0x320>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	2b80      	cmp	r3, #128	@ 0x80
 8004742:	d001      	beq.n	8004748 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e2c1      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004748:	f7fd f868 	bl	800181c <HAL_GetREVID>
 800474c:	4603      	mov	r3, r0
 800474e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004752:	4293      	cmp	r3, r2
 8004754:	d817      	bhi.n	8004786 <HAL_RCC_OscConfig+0x35e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	2b20      	cmp	r3, #32
 800475c:	d108      	bne.n	8004770 <HAL_RCC_OscConfig+0x348>
 800475e:	4b70      	ldr	r3, [pc, #448]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004766:	4a6e      	ldr	r2, [pc, #440]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 8004768:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800476c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800476e:	e075      	b.n	800485c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004770:	4b6b      	ldr	r3, [pc, #428]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	069b      	lsls	r3, r3, #26
 800477e:	4968      	ldr	r1, [pc, #416]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004784:	e06a      	b.n	800485c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004786:	4b66      	ldr	r3, [pc, #408]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	061b      	lsls	r3, r3, #24
 8004794:	4962      	ldr	r1, [pc, #392]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 8004796:	4313      	orrs	r3, r2
 8004798:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800479a:	e05f      	b.n	800485c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d042      	beq.n	800482a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80047a4:	4b5e      	ldr	r3, [pc, #376]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a5d      	ldr	r2, [pc, #372]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 80047aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fd f804 	bl	80017bc <HAL_GetTick>
 80047b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047b8:	f7fd f800 	bl	80017bc <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e280      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047ca:	4b55      	ldr	r3, [pc, #340]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047d6:	f7fd f821 	bl	800181c <HAL_GetREVID>
 80047da:	4603      	mov	r3, r0
 80047dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d817      	bhi.n	8004814 <HAL_RCC_OscConfig+0x3ec>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d108      	bne.n	80047fe <HAL_RCC_OscConfig+0x3d6>
 80047ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80047f4:	4a4a      	ldr	r2, [pc, #296]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 80047f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047fa:	6053      	str	r3, [r2, #4]
 80047fc:	e02e      	b.n	800485c <HAL_RCC_OscConfig+0x434>
 80047fe:	4b48      	ldr	r3, [pc, #288]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	069b      	lsls	r3, r3, #26
 800480c:	4944      	ldr	r1, [pc, #272]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 800480e:	4313      	orrs	r3, r2
 8004810:	604b      	str	r3, [r1, #4]
 8004812:	e023      	b.n	800485c <HAL_RCC_OscConfig+0x434>
 8004814:	4b42      	ldr	r3, [pc, #264]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	061b      	lsls	r3, r3, #24
 8004822:	493f      	ldr	r1, [pc, #252]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 8004824:	4313      	orrs	r3, r2
 8004826:	60cb      	str	r3, [r1, #12]
 8004828:	e018      	b.n	800485c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800482a:	4b3d      	ldr	r3, [pc, #244]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a3c      	ldr	r2, [pc, #240]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 8004830:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fc ffc1 	bl	80017bc <HAL_GetTick>
 800483a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800483e:	f7fc ffbd 	bl	80017bc <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e23d      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004850:	4b33      	ldr	r3, [pc, #204]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1f0      	bne.n	800483e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d036      	beq.n	80048d6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d019      	beq.n	80048a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004870:	4b2b      	ldr	r3, [pc, #172]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 8004872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004874:	4a2a      	ldr	r2, [pc, #168]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 8004876:	f043 0301 	orr.w	r3, r3, #1
 800487a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487c:	f7fc ff9e 	bl	80017bc <HAL_GetTick>
 8004880:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004884:	f7fc ff9a 	bl	80017bc <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e21a      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004896:	4b22      	ldr	r3, [pc, #136]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 8004898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f0      	beq.n	8004884 <HAL_RCC_OscConfig+0x45c>
 80048a2:	e018      	b.n	80048d6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 80048a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b0:	f7fc ff84 	bl	80017bc <HAL_GetTick>
 80048b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048b8:	f7fc ff80 	bl	80017bc <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e200      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048ca:	4b15      	ldr	r3, [pc, #84]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 80048cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0320 	and.w	r3, r3, #32
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d039      	beq.n	8004956 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d01c      	beq.n	8004924 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 80048f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80048f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048f6:	f7fc ff61 	bl	80017bc <HAL_GetTick>
 80048fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048fe:	f7fc ff5d 	bl	80017bc <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e1dd      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004910:	4b03      	ldr	r3, [pc, #12]	@ (8004920 <HAL_RCC_OscConfig+0x4f8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0x4d6>
 800491c:	e01b      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
 800491e:	bf00      	nop
 8004920:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004924:	4b9b      	ldr	r3, [pc, #620]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a9a      	ldr	r2, [pc, #616]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 800492a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800492e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004930:	f7fc ff44 	bl	80017bc <HAL_GetTick>
 8004934:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004938:	f7fc ff40 	bl	80017bc <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e1c0      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800494a:	4b92      	ldr	r3, [pc, #584]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f0      	bne.n	8004938 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 8081 	beq.w	8004a66 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004964:	4b8c      	ldr	r3, [pc, #560]	@ (8004b98 <HAL_RCC_OscConfig+0x770>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a8b      	ldr	r2, [pc, #556]	@ (8004b98 <HAL_RCC_OscConfig+0x770>)
 800496a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800496e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004970:	f7fc ff24 	bl	80017bc <HAL_GetTick>
 8004974:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004978:	f7fc ff20 	bl	80017bc <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b64      	cmp	r3, #100	@ 0x64
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e1a0      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800498a:	4b83      	ldr	r3, [pc, #524]	@ (8004b98 <HAL_RCC_OscConfig+0x770>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f0      	beq.n	8004978 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d106      	bne.n	80049ac <HAL_RCC_OscConfig+0x584>
 800499e:	4b7d      	ldr	r3, [pc, #500]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a2:	4a7c      	ldr	r2, [pc, #496]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 80049a4:	f043 0301 	orr.w	r3, r3, #1
 80049a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049aa:	e02d      	b.n	8004a08 <HAL_RCC_OscConfig+0x5e0>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10c      	bne.n	80049ce <HAL_RCC_OscConfig+0x5a6>
 80049b4:	4b77      	ldr	r3, [pc, #476]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 80049b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b8:	4a76      	ldr	r2, [pc, #472]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	6713      	str	r3, [r2, #112]	@ 0x70
 80049c0:	4b74      	ldr	r3, [pc, #464]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 80049c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c4:	4a73      	ldr	r2, [pc, #460]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 80049c6:	f023 0304 	bic.w	r3, r3, #4
 80049ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80049cc:	e01c      	b.n	8004a08 <HAL_RCC_OscConfig+0x5e0>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b05      	cmp	r3, #5
 80049d4:	d10c      	bne.n	80049f0 <HAL_RCC_OscConfig+0x5c8>
 80049d6:	4b6f      	ldr	r3, [pc, #444]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049da:	4a6e      	ldr	r2, [pc, #440]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 80049dc:	f043 0304 	orr.w	r3, r3, #4
 80049e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80049e2:	4b6c      	ldr	r3, [pc, #432]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e6:	4a6b      	ldr	r2, [pc, #428]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 80049e8:	f043 0301 	orr.w	r3, r3, #1
 80049ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ee:	e00b      	b.n	8004a08 <HAL_RCC_OscConfig+0x5e0>
 80049f0:	4b68      	ldr	r3, [pc, #416]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 80049f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f4:	4a67      	ldr	r2, [pc, #412]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 80049f6:	f023 0301 	bic.w	r3, r3, #1
 80049fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80049fc:	4b65      	ldr	r3, [pc, #404]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 80049fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a00:	4a64      	ldr	r2, [pc, #400]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004a02:	f023 0304 	bic.w	r3, r3, #4
 8004a06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d015      	beq.n	8004a3c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a10:	f7fc fed4 	bl	80017bc <HAL_GetTick>
 8004a14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a16:	e00a      	b.n	8004a2e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a18:	f7fc fed0 	bl	80017bc <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e14e      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a2e:	4b59      	ldr	r3, [pc, #356]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0ee      	beq.n	8004a18 <HAL_RCC_OscConfig+0x5f0>
 8004a3a:	e014      	b.n	8004a66 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3c:	f7fc febe 	bl	80017bc <HAL_GetTick>
 8004a40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a42:	e00a      	b.n	8004a5a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a44:	f7fc feba 	bl	80017bc <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e138      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1ee      	bne.n	8004a44 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 812d 	beq.w	8004cca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a70:	4b48      	ldr	r3, [pc, #288]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a78:	2b18      	cmp	r3, #24
 8004a7a:	f000 80bd 	beq.w	8004bf8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	f040 809e 	bne.w	8004bc4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a88:	4b42      	ldr	r3, [pc, #264]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a41      	ldr	r2, [pc, #260]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004a8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fc fe92 	bl	80017bc <HAL_GetTick>
 8004a98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a9c:	f7fc fe8e 	bl	80017bc <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e10e      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aae:	4b39      	ldr	r3, [pc, #228]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f0      	bne.n	8004a9c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aba:	4b36      	ldr	r3, [pc, #216]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004abc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004abe:	4b37      	ldr	r3, [pc, #220]	@ (8004b9c <HAL_RCC_OscConfig+0x774>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004aca:	0112      	lsls	r2, r2, #4
 8004acc:	430a      	orrs	r2, r1
 8004ace:	4931      	ldr	r1, [pc, #196]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	025b      	lsls	r3, r3, #9
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aee:	3b01      	subs	r3, #1
 8004af0:	041b      	lsls	r3, r3, #16
 8004af2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004afc:	3b01      	subs	r3, #1
 8004afe:	061b      	lsls	r3, r3, #24
 8004b00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b04:	4923      	ldr	r1, [pc, #140]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004b0a:	4b22      	ldr	r3, [pc, #136]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0e:	4a21      	ldr	r2, [pc, #132]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b10:	f023 0301 	bic.w	r3, r3, #1
 8004b14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b16:	4b1f      	ldr	r3, [pc, #124]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b1a:	4b21      	ldr	r3, [pc, #132]	@ (8004ba0 <HAL_RCC_OscConfig+0x778>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b22:	00d2      	lsls	r2, r2, #3
 8004b24:	491b      	ldr	r1, [pc, #108]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2e:	f023 020c 	bic.w	r2, r3, #12
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b36:	4917      	ldr	r1, [pc, #92]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b3c:	4b15      	ldr	r3, [pc, #84]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b40:	f023 0202 	bic.w	r2, r3, #2
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b48:	4912      	ldr	r1, [pc, #72]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b4e:	4b11      	ldr	r3, [pc, #68]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b52:	4a10      	ldr	r2, [pc, #64]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b66:	4b0b      	ldr	r3, [pc, #44]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b72:	4b08      	ldr	r3, [pc, #32]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b76:	4a07      	ldr	r2, [pc, #28]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b78:	f043 0301 	orr.w	r3, r3, #1
 8004b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b7e:	4b05      	ldr	r3, [pc, #20]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a04      	ldr	r2, [pc, #16]	@ (8004b94 <HAL_RCC_OscConfig+0x76c>)
 8004b84:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7fc fe17 	bl	80017bc <HAL_GetTick>
 8004b8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b90:	e011      	b.n	8004bb6 <HAL_RCC_OscConfig+0x78e>
 8004b92:	bf00      	nop
 8004b94:	58024400 	.word	0x58024400
 8004b98:	58024800 	.word	0x58024800
 8004b9c:	fffffc0c 	.word	0xfffffc0c
 8004ba0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba4:	f7fc fe0a 	bl	80017bc <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e08a      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bb6:	4b47      	ldr	r3, [pc, #284]	@ (8004cd4 <HAL_RCC_OscConfig+0x8ac>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x77c>
 8004bc2:	e082      	b.n	8004cca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc4:	4b43      	ldr	r3, [pc, #268]	@ (8004cd4 <HAL_RCC_OscConfig+0x8ac>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a42      	ldr	r2, [pc, #264]	@ (8004cd4 <HAL_RCC_OscConfig+0x8ac>)
 8004bca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd0:	f7fc fdf4 	bl	80017bc <HAL_GetTick>
 8004bd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd8:	f7fc fdf0 	bl	80017bc <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e070      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bea:	4b3a      	ldr	r3, [pc, #232]	@ (8004cd4 <HAL_RCC_OscConfig+0x8ac>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x7b0>
 8004bf6:	e068      	b.n	8004cca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004bf8:	4b36      	ldr	r3, [pc, #216]	@ (8004cd4 <HAL_RCC_OscConfig+0x8ac>)
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004bfe:	4b35      	ldr	r3, [pc, #212]	@ (8004cd4 <HAL_RCC_OscConfig+0x8ac>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c02:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d031      	beq.n	8004c70 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f003 0203 	and.w	r2, r3, #3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d12a      	bne.n	8004c70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	091b      	lsrs	r3, r3, #4
 8004c1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d122      	bne.n	8004c70 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c34:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d11a      	bne.n	8004c70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	0a5b      	lsrs	r3, r3, #9
 8004c3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c46:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d111      	bne.n	8004c70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	0c1b      	lsrs	r3, r3, #16
 8004c50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c58:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d108      	bne.n	8004c70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	0e1b      	lsrs	r3, r3, #24
 8004c62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e02b      	b.n	8004ccc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c74:	4b17      	ldr	r3, [pc, #92]	@ (8004cd4 <HAL_RCC_OscConfig+0x8ac>)
 8004c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c78:	08db      	lsrs	r3, r3, #3
 8004c7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c7e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d01f      	beq.n	8004cca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c8a:	4b12      	ldr	r3, [pc, #72]	@ (8004cd4 <HAL_RCC_OscConfig+0x8ac>)
 8004c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8e:	4a11      	ldr	r2, [pc, #68]	@ (8004cd4 <HAL_RCC_OscConfig+0x8ac>)
 8004c90:	f023 0301 	bic.w	r3, r3, #1
 8004c94:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c96:	f7fc fd91 	bl	80017bc <HAL_GetTick>
 8004c9a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004c9c:	bf00      	nop
 8004c9e:	f7fc fd8d 	bl	80017bc <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d0f9      	beq.n	8004c9e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004caa:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd4 <HAL_RCC_OscConfig+0x8ac>)
 8004cac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cae:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd8 <HAL_RCC_OscConfig+0x8b0>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004cb6:	00d2      	lsls	r2, r2, #3
 8004cb8:	4906      	ldr	r1, [pc, #24]	@ (8004cd4 <HAL_RCC_OscConfig+0x8ac>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004cbe:	4b05      	ldr	r3, [pc, #20]	@ (8004cd4 <HAL_RCC_OscConfig+0x8ac>)
 8004cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc2:	4a04      	ldr	r2, [pc, #16]	@ (8004cd4 <HAL_RCC_OscConfig+0x8ac>)
 8004cc4:	f043 0301 	orr.w	r3, r3, #1
 8004cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3730      	adds	r7, #48	@ 0x30
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	58024400 	.word	0x58024400
 8004cd8:	ffff0007 	.word	0xffff0007

08004cdc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e19c      	b.n	800502a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf0:	4b8a      	ldr	r3, [pc, #552]	@ (8004f1c <HAL_RCC_ClockConfig+0x240>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d910      	bls.n	8004d20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfe:	4b87      	ldr	r3, [pc, #540]	@ (8004f1c <HAL_RCC_ClockConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 020f 	bic.w	r2, r3, #15
 8004d06:	4985      	ldr	r1, [pc, #532]	@ (8004f1c <HAL_RCC_ClockConfig+0x240>)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	4b83      	ldr	r3, [pc, #524]	@ (8004f1c <HAL_RCC_ClockConfig+0x240>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e184      	b.n	800502a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d010      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	4b7b      	ldr	r3, [pc, #492]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d908      	bls.n	8004d4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d3c:	4b78      	ldr	r3, [pc, #480]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	4975      	ldr	r1, [pc, #468]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d010      	beq.n	8004d7c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	695a      	ldr	r2, [r3, #20]
 8004d5e:	4b70      	ldr	r3, [pc, #448]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d908      	bls.n	8004d7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	496a      	ldr	r1, [pc, #424]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d010      	beq.n	8004daa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	699a      	ldr	r2, [r3, #24]
 8004d8c:	4b64      	ldr	r3, [pc, #400]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d908      	bls.n	8004daa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d98:	4b61      	ldr	r3, [pc, #388]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	495e      	ldr	r1, [pc, #376]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d010      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69da      	ldr	r2, [r3, #28]
 8004dba:	4b59      	ldr	r3, [pc, #356]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d908      	bls.n	8004dd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004dc6:	4b56      	ldr	r3, [pc, #344]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	4953      	ldr	r1, [pc, #332]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d010      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	4b4d      	ldr	r3, [pc, #308]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	f003 030f 	and.w	r3, r3, #15
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d908      	bls.n	8004e06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df4:	4b4a      	ldr	r3, [pc, #296]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	f023 020f 	bic.w	r2, r3, #15
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4947      	ldr	r1, [pc, #284]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d055      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e12:	4b43      	ldr	r3, [pc, #268]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	4940      	ldr	r1, [pc, #256]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d107      	bne.n	8004e3c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e2c:	4b3c      	ldr	r3, [pc, #240]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d121      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e0f6      	b.n	800502a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d107      	bne.n	8004e54 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e44:	4b36      	ldr	r3, [pc, #216]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d115      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e0ea      	b.n	800502a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d107      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e5c:	4b30      	ldr	r3, [pc, #192]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d109      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0de      	b.n	800502a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e0d6      	b.n	800502a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e7c:	4b28      	ldr	r3, [pc, #160]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f023 0207 	bic.w	r2, r3, #7
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4925      	ldr	r1, [pc, #148]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8e:	f7fc fc95 	bl	80017bc <HAL_GetTick>
 8004e92:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e94:	e00a      	b.n	8004eac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e96:	f7fc fc91 	bl	80017bc <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e0be      	b.n	800502a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eac:	4b1c      	ldr	r3, [pc, #112]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d1eb      	bne.n	8004e96 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d010      	beq.n	8004eec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	4b14      	ldr	r3, [pc, #80]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d208      	bcs.n	8004eec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eda:	4b11      	ldr	r3, [pc, #68]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	f023 020f 	bic.w	r2, r3, #15
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	490e      	ldr	r1, [pc, #56]	@ (8004f20 <HAL_RCC_ClockConfig+0x244>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eec:	4b0b      	ldr	r3, [pc, #44]	@ (8004f1c <HAL_RCC_ClockConfig+0x240>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d214      	bcs.n	8004f24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efa:	4b08      	ldr	r3, [pc, #32]	@ (8004f1c <HAL_RCC_ClockConfig+0x240>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f023 020f 	bic.w	r2, r3, #15
 8004f02:	4906      	ldr	r1, [pc, #24]	@ (8004f1c <HAL_RCC_ClockConfig+0x240>)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0a:	4b04      	ldr	r3, [pc, #16]	@ (8004f1c <HAL_RCC_ClockConfig+0x240>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d005      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e086      	b.n	800502a <HAL_RCC_ClockConfig+0x34e>
 8004f1c:	52002000 	.word	0x52002000
 8004f20:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d010      	beq.n	8004f52 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	4b3f      	ldr	r3, [pc, #252]	@ (8005034 <HAL_RCC_ClockConfig+0x358>)
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d208      	bcs.n	8004f52 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f40:	4b3c      	ldr	r3, [pc, #240]	@ (8005034 <HAL_RCC_ClockConfig+0x358>)
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	4939      	ldr	r1, [pc, #228]	@ (8005034 <HAL_RCC_ClockConfig+0x358>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d010      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	4b34      	ldr	r3, [pc, #208]	@ (8005034 <HAL_RCC_ClockConfig+0x358>)
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d208      	bcs.n	8004f80 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f6e:	4b31      	ldr	r3, [pc, #196]	@ (8005034 <HAL_RCC_ClockConfig+0x358>)
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	492e      	ldr	r1, [pc, #184]	@ (8005034 <HAL_RCC_ClockConfig+0x358>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d010      	beq.n	8004fae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699a      	ldr	r2, [r3, #24]
 8004f90:	4b28      	ldr	r3, [pc, #160]	@ (8005034 <HAL_RCC_ClockConfig+0x358>)
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d208      	bcs.n	8004fae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f9c:	4b25      	ldr	r3, [pc, #148]	@ (8005034 <HAL_RCC_ClockConfig+0x358>)
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	4922      	ldr	r1, [pc, #136]	@ (8005034 <HAL_RCC_ClockConfig+0x358>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d010      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69da      	ldr	r2, [r3, #28]
 8004fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8005034 <HAL_RCC_ClockConfig+0x358>)
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d208      	bcs.n	8004fdc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fca:	4b1a      	ldr	r3, [pc, #104]	@ (8005034 <HAL_RCC_ClockConfig+0x358>)
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	4917      	ldr	r1, [pc, #92]	@ (8005034 <HAL_RCC_ClockConfig+0x358>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004fdc:	f000 f834 	bl	8005048 <HAL_RCC_GetSysClockFreq>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	4b14      	ldr	r3, [pc, #80]	@ (8005034 <HAL_RCC_ClockConfig+0x358>)
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	0a1b      	lsrs	r3, r3, #8
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	4912      	ldr	r1, [pc, #72]	@ (8005038 <HAL_RCC_ClockConfig+0x35c>)
 8004fee:	5ccb      	ldrb	r3, [r1, r3]
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8005034 <HAL_RCC_ClockConfig+0x358>)
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	4a0d      	ldr	r2, [pc, #52]	@ (8005038 <HAL_RCC_ClockConfig+0x35c>)
 8005004:	5cd3      	ldrb	r3, [r2, r3]
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	fa22 f303 	lsr.w	r3, r2, r3
 8005010:	4a0a      	ldr	r2, [pc, #40]	@ (800503c <HAL_RCC_ClockConfig+0x360>)
 8005012:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005014:	4a0a      	ldr	r2, [pc, #40]	@ (8005040 <HAL_RCC_ClockConfig+0x364>)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800501a:	4b0a      	ldr	r3, [pc, #40]	@ (8005044 <HAL_RCC_ClockConfig+0x368>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4618      	mov	r0, r3
 8005020:	f7fc f828 	bl	8001074 <HAL_InitTick>
 8005024:	4603      	mov	r3, r0
 8005026:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005028:	7bfb      	ldrb	r3, [r7, #15]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	58024400 	.word	0x58024400
 8005038:	0800e8f8 	.word	0x0800e8f8
 800503c:	24000004 	.word	0x24000004
 8005040:	24000000 	.word	0x24000000
 8005044:	24000008 	.word	0x24000008

08005048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005048:	b480      	push	{r7}
 800504a:	b089      	sub	sp, #36	@ 0x24
 800504c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800504e:	4bb3      	ldr	r3, [pc, #716]	@ (800531c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005056:	2b18      	cmp	r3, #24
 8005058:	f200 8155 	bhi.w	8005306 <HAL_RCC_GetSysClockFreq+0x2be>
 800505c:	a201      	add	r2, pc, #4	@ (adr r2, 8005064 <HAL_RCC_GetSysClockFreq+0x1c>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	080050c9 	.word	0x080050c9
 8005068:	08005307 	.word	0x08005307
 800506c:	08005307 	.word	0x08005307
 8005070:	08005307 	.word	0x08005307
 8005074:	08005307 	.word	0x08005307
 8005078:	08005307 	.word	0x08005307
 800507c:	08005307 	.word	0x08005307
 8005080:	08005307 	.word	0x08005307
 8005084:	080050ef 	.word	0x080050ef
 8005088:	08005307 	.word	0x08005307
 800508c:	08005307 	.word	0x08005307
 8005090:	08005307 	.word	0x08005307
 8005094:	08005307 	.word	0x08005307
 8005098:	08005307 	.word	0x08005307
 800509c:	08005307 	.word	0x08005307
 80050a0:	08005307 	.word	0x08005307
 80050a4:	080050f5 	.word	0x080050f5
 80050a8:	08005307 	.word	0x08005307
 80050ac:	08005307 	.word	0x08005307
 80050b0:	08005307 	.word	0x08005307
 80050b4:	08005307 	.word	0x08005307
 80050b8:	08005307 	.word	0x08005307
 80050bc:	08005307 	.word	0x08005307
 80050c0:	08005307 	.word	0x08005307
 80050c4:	080050fb 	.word	0x080050fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050c8:	4b94      	ldr	r3, [pc, #592]	@ (800531c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0320 	and.w	r3, r3, #32
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d009      	beq.n	80050e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050d4:	4b91      	ldr	r3, [pc, #580]	@ (800531c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	08db      	lsrs	r3, r3, #3
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	4a90      	ldr	r2, [pc, #576]	@ (8005320 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050e0:	fa22 f303 	lsr.w	r3, r2, r3
 80050e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80050e6:	e111      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050e8:	4b8d      	ldr	r3, [pc, #564]	@ (8005320 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050ea:	61bb      	str	r3, [r7, #24]
      break;
 80050ec:	e10e      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80050ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050f0:	61bb      	str	r3, [r7, #24]
      break;
 80050f2:	e10b      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80050f4:	4b8c      	ldr	r3, [pc, #560]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80050f6:	61bb      	str	r3, [r7, #24]
      break;
 80050f8:	e108      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050fa:	4b88      	ldr	r3, [pc, #544]	@ (800531c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005104:	4b85      	ldr	r3, [pc, #532]	@ (800531c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005108:	091b      	lsrs	r3, r3, #4
 800510a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800510e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005110:	4b82      	ldr	r3, [pc, #520]	@ (800531c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800511a:	4b80      	ldr	r3, [pc, #512]	@ (800531c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800511c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511e:	08db      	lsrs	r3, r3, #3
 8005120:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	fb02 f303 	mul.w	r3, r2, r3
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005132:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 80e1 	beq.w	8005300 <HAL_RCC_GetSysClockFreq+0x2b8>
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b02      	cmp	r3, #2
 8005142:	f000 8083 	beq.w	800524c <HAL_RCC_GetSysClockFreq+0x204>
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b02      	cmp	r3, #2
 800514a:	f200 80a1 	bhi.w	8005290 <HAL_RCC_GetSysClockFreq+0x248>
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_RCC_GetSysClockFreq+0x114>
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d056      	beq.n	8005208 <HAL_RCC_GetSysClockFreq+0x1c0>
 800515a:	e099      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800515c:	4b6f      	ldr	r3, [pc, #444]	@ (800531c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0320 	and.w	r3, r3, #32
 8005164:	2b00      	cmp	r3, #0
 8005166:	d02d      	beq.n	80051c4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005168:	4b6c      	ldr	r3, [pc, #432]	@ (800531c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	08db      	lsrs	r3, r3, #3
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	4a6b      	ldr	r2, [pc, #428]	@ (8005320 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005174:	fa22 f303 	lsr.w	r3, r2, r3
 8005178:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	ee07 3a90 	vmov	s15, r3
 8005180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005192:	4b62      	ldr	r3, [pc, #392]	@ (800531c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80051a6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800532c <HAL_RCC_GetSysClockFreq+0x2e4>
 80051aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051be:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80051c2:	e087      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ce:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005330 <HAL_RCC_GetSysClockFreq+0x2e8>
 80051d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d6:	4b51      	ldr	r3, [pc, #324]	@ (800531c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ea:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800532c <HAL_RCC_GetSysClockFreq+0x2e4>
 80051ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005202:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005206:	e065      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005212:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005334 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800521a:	4b40      	ldr	r3, [pc, #256]	@ (800531c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800521c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800522a:	ed97 6a02 	vldr	s12, [r7, #8]
 800522e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800532c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800523a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800523e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005246:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800524a:	e043      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	ee07 3a90 	vmov	s15, r3
 8005252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005256:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005338 <HAL_RCC_GetSysClockFreq+0x2f0>
 800525a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800525e:	4b2f      	ldr	r3, [pc, #188]	@ (800531c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005266:	ee07 3a90 	vmov	s15, r3
 800526a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800526e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005272:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800532c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800527a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800527e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800528e:	e021      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005334 <HAL_RCC_GetSysClockFreq+0x2ec>
 800529e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052a2:	4b1e      	ldr	r3, [pc, #120]	@ (800531c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052aa:	ee07 3a90 	vmov	s15, r3
 80052ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80052b6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800532c <HAL_RCC_GetSysClockFreq+0x2e4>
 80052ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80052d4:	4b11      	ldr	r3, [pc, #68]	@ (800531c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d8:	0a5b      	lsrs	r3, r3, #9
 80052da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052de:	3301      	adds	r3, #1
 80052e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	ee07 3a90 	vmov	s15, r3
 80052e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80052f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f8:	ee17 3a90 	vmov	r3, s15
 80052fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80052fe:	e005      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	61bb      	str	r3, [r7, #24]
      break;
 8005304:	e002      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005306:	4b07      	ldr	r3, [pc, #28]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005308:	61bb      	str	r3, [r7, #24]
      break;
 800530a:	bf00      	nop
  }

  return sysclockfreq;
 800530c:	69bb      	ldr	r3, [r7, #24]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3724      	adds	r7, #36	@ 0x24
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	58024400 	.word	0x58024400
 8005320:	03d09000 	.word	0x03d09000
 8005324:	003d0900 	.word	0x003d0900
 8005328:	017d7840 	.word	0x017d7840
 800532c:	46000000 	.word	0x46000000
 8005330:	4c742400 	.word	0x4c742400
 8005334:	4a742400 	.word	0x4a742400
 8005338:	4bbebc20 	.word	0x4bbebc20

0800533c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005342:	f7ff fe81 	bl	8005048 <HAL_RCC_GetSysClockFreq>
 8005346:	4602      	mov	r2, r0
 8005348:	4b10      	ldr	r3, [pc, #64]	@ (800538c <HAL_RCC_GetHCLKFreq+0x50>)
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	0a1b      	lsrs	r3, r3, #8
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	490f      	ldr	r1, [pc, #60]	@ (8005390 <HAL_RCC_GetHCLKFreq+0x54>)
 8005354:	5ccb      	ldrb	r3, [r1, r3]
 8005356:	f003 031f 	and.w	r3, r3, #31
 800535a:	fa22 f303 	lsr.w	r3, r2, r3
 800535e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005360:	4b0a      	ldr	r3, [pc, #40]	@ (800538c <HAL_RCC_GetHCLKFreq+0x50>)
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	f003 030f 	and.w	r3, r3, #15
 8005368:	4a09      	ldr	r2, [pc, #36]	@ (8005390 <HAL_RCC_GetHCLKFreq+0x54>)
 800536a:	5cd3      	ldrb	r3, [r2, r3]
 800536c:	f003 031f 	and.w	r3, r3, #31
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	fa22 f303 	lsr.w	r3, r2, r3
 8005376:	4a07      	ldr	r2, [pc, #28]	@ (8005394 <HAL_RCC_GetHCLKFreq+0x58>)
 8005378:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800537a:	4a07      	ldr	r2, [pc, #28]	@ (8005398 <HAL_RCC_GetHCLKFreq+0x5c>)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005380:	4b04      	ldr	r3, [pc, #16]	@ (8005394 <HAL_RCC_GetHCLKFreq+0x58>)
 8005382:	681b      	ldr	r3, [r3, #0]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	58024400 	.word	0x58024400
 8005390:	0800e8f8 	.word	0x0800e8f8
 8005394:	24000004 	.word	0x24000004
 8005398:	24000000 	.word	0x24000000

0800539c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80053a0:	f7ff ffcc 	bl	800533c <HAL_RCC_GetHCLKFreq>
 80053a4:	4602      	mov	r2, r0
 80053a6:	4b06      	ldr	r3, [pc, #24]	@ (80053c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	091b      	lsrs	r3, r3, #4
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	4904      	ldr	r1, [pc, #16]	@ (80053c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053b2:	5ccb      	ldrb	r3, [r1, r3]
 80053b4:	f003 031f 	and.w	r3, r3, #31
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80053bc:	4618      	mov	r0, r3
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	58024400 	.word	0x58024400
 80053c4:	0800e8f8 	.word	0x0800e8f8

080053c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	223f      	movs	r2, #63	@ 0x3f
 80053d6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005444 <HAL_RCC_GetClockConfig+0x7c>)
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	f003 0207 	and.w	r2, r3, #7
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80053e4:	4b17      	ldr	r3, [pc, #92]	@ (8005444 <HAL_RCC_GetClockConfig+0x7c>)
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80053f0:	4b14      	ldr	r3, [pc, #80]	@ (8005444 <HAL_RCC_GetClockConfig+0x7c>)
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	f003 020f 	and.w	r2, r3, #15
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80053fc:	4b11      	ldr	r3, [pc, #68]	@ (8005444 <HAL_RCC_GetClockConfig+0x7c>)
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005408:	4b0e      	ldr	r3, [pc, #56]	@ (8005444 <HAL_RCC_GetClockConfig+0x7c>)
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005414:	4b0b      	ldr	r3, [pc, #44]	@ (8005444 <HAL_RCC_GetClockConfig+0x7c>)
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005420:	4b08      	ldr	r3, [pc, #32]	@ (8005444 <HAL_RCC_GetClockConfig+0x7c>)
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800542c:	4b06      	ldr	r3, [pc, #24]	@ (8005448 <HAL_RCC_GetClockConfig+0x80>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 020f 	and.w	r2, r3, #15
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	601a      	str	r2, [r3, #0]
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	58024400 	.word	0x58024400
 8005448:	52002000 	.word	0x52002000

0800544c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800544c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005450:	b0ca      	sub	sp, #296	@ 0x128
 8005452:	af00      	add	r7, sp, #0
 8005454:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005458:	2300      	movs	r3, #0
 800545a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800545e:	2300      	movs	r3, #0
 8005460:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005470:	2500      	movs	r5, #0
 8005472:	ea54 0305 	orrs.w	r3, r4, r5
 8005476:	d049      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800547c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800547e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005482:	d02f      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005484:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005488:	d828      	bhi.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800548a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800548e:	d01a      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005490:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005494:	d822      	bhi.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800549a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800549e:	d007      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054a0:	e01c      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a2:	4bb8      	ldr	r3, [pc, #736]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a6:	4ab7      	ldr	r2, [pc, #732]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054ae:	e01a      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b4:	3308      	adds	r3, #8
 80054b6:	2102      	movs	r1, #2
 80054b8:	4618      	mov	r0, r3
 80054ba:	f002 fb61 	bl	8007b80 <RCCEx_PLL2_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054c4:	e00f      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ca:	3328      	adds	r3, #40	@ 0x28
 80054cc:	2102      	movs	r1, #2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f002 fc08 	bl	8007ce4 <RCCEx_PLL3_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054da:	e004      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054e2:	e000      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80054e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80054ee:	4ba5      	ldr	r3, [pc, #660]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80054f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054fc:	4aa1      	ldr	r2, [pc, #644]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054fe:	430b      	orrs	r3, r1
 8005500:	6513      	str	r3, [r2, #80]	@ 0x50
 8005502:	e003      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005508:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800550c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005518:	f04f 0900 	mov.w	r9, #0
 800551c:	ea58 0309 	orrs.w	r3, r8, r9
 8005520:	d047      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005528:	2b04      	cmp	r3, #4
 800552a:	d82a      	bhi.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800552c:	a201      	add	r2, pc, #4	@ (adr r2, 8005534 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800552e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005532:	bf00      	nop
 8005534:	08005549 	.word	0x08005549
 8005538:	08005557 	.word	0x08005557
 800553c:	0800556d 	.word	0x0800556d
 8005540:	0800558b 	.word	0x0800558b
 8005544:	0800558b 	.word	0x0800558b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005548:	4b8e      	ldr	r3, [pc, #568]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800554a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554c:	4a8d      	ldr	r2, [pc, #564]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800554e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005554:	e01a      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555a:	3308      	adds	r3, #8
 800555c:	2100      	movs	r1, #0
 800555e:	4618      	mov	r0, r3
 8005560:	f002 fb0e 	bl	8007b80 <RCCEx_PLL2_Config>
 8005564:	4603      	mov	r3, r0
 8005566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800556a:	e00f      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005570:	3328      	adds	r3, #40	@ 0x28
 8005572:	2100      	movs	r1, #0
 8005574:	4618      	mov	r0, r3
 8005576:	f002 fbb5 	bl	8007ce4 <RCCEx_PLL3_Config>
 800557a:	4603      	mov	r3, r0
 800557c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005580:	e004      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005588:	e000      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800558a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800558c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005594:	4b7b      	ldr	r3, [pc, #492]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005598:	f023 0107 	bic.w	r1, r3, #7
 800559c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a2:	4a78      	ldr	r2, [pc, #480]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055a4:	430b      	orrs	r3, r1
 80055a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80055a8:	e003      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80055b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80055be:	f04f 0b00 	mov.w	fp, #0
 80055c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80055c6:	d04c      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80055c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055d2:	d030      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80055d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055d8:	d829      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80055da:	2bc0      	cmp	r3, #192	@ 0xc0
 80055dc:	d02d      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80055de:	2bc0      	cmp	r3, #192	@ 0xc0
 80055e0:	d825      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80055e2:	2b80      	cmp	r3, #128	@ 0x80
 80055e4:	d018      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80055e6:	2b80      	cmp	r3, #128	@ 0x80
 80055e8:	d821      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80055ee:	2b40      	cmp	r3, #64	@ 0x40
 80055f0:	d007      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80055f2:	e01c      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055f4:	4b63      	ldr	r3, [pc, #396]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f8:	4a62      	ldr	r2, [pc, #392]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005600:	e01c      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005606:	3308      	adds	r3, #8
 8005608:	2100      	movs	r1, #0
 800560a:	4618      	mov	r0, r3
 800560c:	f002 fab8 	bl	8007b80 <RCCEx_PLL2_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005616:	e011      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561c:	3328      	adds	r3, #40	@ 0x28
 800561e:	2100      	movs	r1, #0
 8005620:	4618      	mov	r0, r3
 8005622:	f002 fb5f 	bl	8007ce4 <RCCEx_PLL3_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800562c:	e006      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005634:	e002      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005636:	bf00      	nop
 8005638:	e000      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800563a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800563c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005644:	4b4f      	ldr	r3, [pc, #316]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005648:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800564c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005652:	4a4c      	ldr	r2, [pc, #304]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005654:	430b      	orrs	r3, r1
 8005656:	6513      	str	r3, [r2, #80]	@ 0x50
 8005658:	e003      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800565e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800566e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005672:	2300      	movs	r3, #0
 8005674:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005678:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800567c:	460b      	mov	r3, r1
 800567e:	4313      	orrs	r3, r2
 8005680:	d053      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005686:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800568a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800568e:	d035      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005690:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005694:	d82e      	bhi.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005696:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800569a:	d031      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800569c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80056a0:	d828      	bhi.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80056a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056a6:	d01a      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x292>
 80056a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056ac:	d822      	bhi.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80056b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056b6:	d007      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80056b8:	e01c      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ba:	4b32      	ldr	r3, [pc, #200]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056be:	4a31      	ldr	r2, [pc, #196]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056c6:	e01c      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056cc:	3308      	adds	r3, #8
 80056ce:	2100      	movs	r1, #0
 80056d0:	4618      	mov	r0, r3
 80056d2:	f002 fa55 	bl	8007b80 <RCCEx_PLL2_Config>
 80056d6:	4603      	mov	r3, r0
 80056d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80056dc:	e011      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e2:	3328      	adds	r3, #40	@ 0x28
 80056e4:	2100      	movs	r1, #0
 80056e6:	4618      	mov	r0, r3
 80056e8:	f002 fafc 	bl	8007ce4 <RCCEx_PLL3_Config>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056f2:	e006      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056fa:	e002      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80056fc:	bf00      	nop
 80056fe:	e000      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10b      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800570a:	4b1e      	ldr	r3, [pc, #120]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800570c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800570e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005716:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800571a:	4a1a      	ldr	r2, [pc, #104]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800571c:	430b      	orrs	r3, r1
 800571e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005720:	e003      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800572a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005736:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800573a:	2300      	movs	r3, #0
 800573c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005740:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005744:	460b      	mov	r3, r1
 8005746:	4313      	orrs	r3, r2
 8005748:	d056      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800574a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005752:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005756:	d038      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005758:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800575c:	d831      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800575e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005762:	d034      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005764:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005768:	d82b      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800576a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800576e:	d01d      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005770:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005774:	d825      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005776:	2b00      	cmp	r3, #0
 8005778:	d006      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800577a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800577e:	d00a      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005780:	e01f      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005782:	bf00      	nop
 8005784:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005788:	4ba2      	ldr	r3, [pc, #648]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800578a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578c:	4aa1      	ldr	r2, [pc, #644]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800578e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005792:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005794:	e01c      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579a:	3308      	adds	r3, #8
 800579c:	2100      	movs	r1, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	f002 f9ee 	bl	8007b80 <RCCEx_PLL2_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80057aa:	e011      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b0:	3328      	adds	r3, #40	@ 0x28
 80057b2:	2100      	movs	r1, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f002 fa95 	bl	8007ce4 <RCCEx_PLL3_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057c0:	e006      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057c8:	e002      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80057ca:	bf00      	nop
 80057cc:	e000      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80057ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10b      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80057d8:	4b8e      	ldr	r3, [pc, #568]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057dc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80057e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057e8:	4a8a      	ldr	r2, [pc, #552]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057ea:	430b      	orrs	r3, r1
 80057ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80057ee:	e003      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005804:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005808:	2300      	movs	r3, #0
 800580a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800580e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005812:	460b      	mov	r3, r1
 8005814:	4313      	orrs	r3, r2
 8005816:	d03a      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800581e:	2b30      	cmp	r3, #48	@ 0x30
 8005820:	d01f      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005822:	2b30      	cmp	r3, #48	@ 0x30
 8005824:	d819      	bhi.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005826:	2b20      	cmp	r3, #32
 8005828:	d00c      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800582a:	2b20      	cmp	r3, #32
 800582c:	d815      	bhi.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d019      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005832:	2b10      	cmp	r3, #16
 8005834:	d111      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005836:	4b77      	ldr	r3, [pc, #476]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583a:	4a76      	ldr	r2, [pc, #472]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800583c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005840:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005842:	e011      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005848:	3308      	adds	r3, #8
 800584a:	2102      	movs	r1, #2
 800584c:	4618      	mov	r0, r3
 800584e:	f002 f997 	bl	8007b80 <RCCEx_PLL2_Config>
 8005852:	4603      	mov	r3, r0
 8005854:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005858:	e006      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005860:	e002      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005862:	bf00      	nop
 8005864:	e000      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005866:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005870:	4b68      	ldr	r3, [pc, #416]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005874:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800587e:	4a65      	ldr	r2, [pc, #404]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005880:	430b      	orrs	r3, r1
 8005882:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005884:	e003      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800588a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800588e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005896:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800589a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800589e:	2300      	movs	r3, #0
 80058a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80058a8:	460b      	mov	r3, r1
 80058aa:	4313      	orrs	r3, r2
 80058ac:	d051      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80058ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058b8:	d035      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80058ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058be:	d82e      	bhi.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80058c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058c4:	d031      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80058c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058ca:	d828      	bhi.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80058cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058d0:	d01a      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80058d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058d6:	d822      	bhi.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80058dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058e0:	d007      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80058e2:	e01c      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e4:	4b4b      	ldr	r3, [pc, #300]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e8:	4a4a      	ldr	r2, [pc, #296]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058f0:	e01c      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f6:	3308      	adds	r3, #8
 80058f8:	2100      	movs	r1, #0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f002 f940 	bl	8007b80 <RCCEx_PLL2_Config>
 8005900:	4603      	mov	r3, r0
 8005902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005906:	e011      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590c:	3328      	adds	r3, #40	@ 0x28
 800590e:	2100      	movs	r1, #0
 8005910:	4618      	mov	r0, r3
 8005912:	f002 f9e7 	bl	8007ce4 <RCCEx_PLL3_Config>
 8005916:	4603      	mov	r3, r0
 8005918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800591c:	e006      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005924:	e002      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005926:	bf00      	nop
 8005928:	e000      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800592a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800592c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10a      	bne.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005934:	4b37      	ldr	r3, [pc, #220]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005938:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800593c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005942:	4a34      	ldr	r2, [pc, #208]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005944:	430b      	orrs	r3, r1
 8005946:	6513      	str	r3, [r2, #80]	@ 0x50
 8005948:	e003      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800594e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800595e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005962:	2300      	movs	r3, #0
 8005964:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005968:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800596c:	460b      	mov	r3, r1
 800596e:	4313      	orrs	r3, r2
 8005970:	d056      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005978:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800597c:	d033      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800597e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005982:	d82c      	bhi.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005984:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005988:	d02f      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800598a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800598e:	d826      	bhi.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005990:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005994:	d02b      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005996:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800599a:	d820      	bhi.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800599c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059a0:	d012      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80059a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059a6:	d81a      	bhi.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d022      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80059ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059b0:	d115      	bne.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b6:	3308      	adds	r3, #8
 80059b8:	2101      	movs	r1, #1
 80059ba:	4618      	mov	r0, r3
 80059bc:	f002 f8e0 	bl	8007b80 <RCCEx_PLL2_Config>
 80059c0:	4603      	mov	r3, r0
 80059c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80059c6:	e015      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059cc:	3328      	adds	r3, #40	@ 0x28
 80059ce:	2101      	movs	r1, #1
 80059d0:	4618      	mov	r0, r3
 80059d2:	f002 f987 	bl	8007ce4 <RCCEx_PLL3_Config>
 80059d6:	4603      	mov	r3, r0
 80059d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80059dc:	e00a      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059e4:	e006      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059e6:	bf00      	nop
 80059e8:	e004      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059ea:	bf00      	nop
 80059ec:	e002      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059ee:	bf00      	nop
 80059f0:	e000      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10d      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80059fc:	4b05      	ldr	r3, [pc, #20]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a00:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a0a:	4a02      	ldr	r2, [pc, #8]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a10:	e006      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005a12:	bf00      	nop
 8005a14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a28:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a30:	2300      	movs	r3, #0
 8005a32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a36:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	d055      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a4c:	d033      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a52:	d82c      	bhi.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a58:	d02f      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a5e:	d826      	bhi.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a64:	d02b      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005a66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a6a:	d820      	bhi.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a70:	d012      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005a72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a76:	d81a      	bhi.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d022      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005a7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a80:	d115      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a86:	3308      	adds	r3, #8
 8005a88:	2101      	movs	r1, #1
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f002 f878 	bl	8007b80 <RCCEx_PLL2_Config>
 8005a90:	4603      	mov	r3, r0
 8005a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a96:	e015      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9c:	3328      	adds	r3, #40	@ 0x28
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f002 f91f 	bl	8007ce4 <RCCEx_PLL3_Config>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005aac:	e00a      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ab4:	e006      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ab6:	bf00      	nop
 8005ab8:	e004      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005aba:	bf00      	nop
 8005abc:	e002      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005abe:	bf00      	nop
 8005ac0:	e000      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10b      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005acc:	4ba3      	ldr	r3, [pc, #652]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005adc:	4a9f      	ldr	r2, [pc, #636]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ade:	430b      	orrs	r3, r1
 8005ae0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ae2:	e003      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005af8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005afc:	2300      	movs	r3, #0
 8005afe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b06:	460b      	mov	r3, r1
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	d037      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b16:	d00e      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005b18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b1c:	d816      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d018      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005b22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b26:	d111      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b28:	4b8c      	ldr	r3, [pc, #560]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2c:	4a8b      	ldr	r2, [pc, #556]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b34:	e00f      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f002 f81e 	bl	8007b80 <RCCEx_PLL2_Config>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b4a:	e004      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b52:	e000      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10a      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b5e:	4b7f      	ldr	r3, [pc, #508]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b62:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b6c:	4a7b      	ldr	r2, [pc, #492]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b72:	e003      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005b88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005b92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	d039      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d81c      	bhi.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bac:	08005be9 	.word	0x08005be9
 8005bb0:	08005bbd 	.word	0x08005bbd
 8005bb4:	08005bcb 	.word	0x08005bcb
 8005bb8:	08005be9 	.word	0x08005be9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bbc:	4b67      	ldr	r3, [pc, #412]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc0:	4a66      	ldr	r2, [pc, #408]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005bc8:	e00f      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bce:	3308      	adds	r3, #8
 8005bd0:	2102      	movs	r1, #2
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f001 ffd4 	bl	8007b80 <RCCEx_PLL2_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005bde:	e004      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005be6:	e000      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005bf2:	4b5a      	ldr	r3, [pc, #360]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bf6:	f023 0103 	bic.w	r1, r3, #3
 8005bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c00:	4a56      	ldr	r2, [pc, #344]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c02:	430b      	orrs	r3, r1
 8005c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c06:	e003      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c20:	2300      	movs	r3, #0
 8005c22:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f000 809f 	beq.w	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c32:	4b4b      	ldr	r3, [pc, #300]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a4a      	ldr	r2, [pc, #296]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c3e:	f7fb fdbd 	bl	80017bc <HAL_GetTick>
 8005c42:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c46:	e00b      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c48:	f7fb fdb8 	bl	80017bc <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b64      	cmp	r3, #100	@ 0x64
 8005c56:	d903      	bls.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c5e:	e005      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c60:	4b3f      	ldr	r3, [pc, #252]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0ed      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d179      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c74:	4b39      	ldr	r3, [pc, #228]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c80:	4053      	eors	r3, r2
 8005c82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d015      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c8a:	4b34      	ldr	r3, [pc, #208]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c96:	4b31      	ldr	r3, [pc, #196]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c9a:	4a30      	ldr	r2, [pc, #192]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ca0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ca2:	4b2e      	ldr	r3, [pc, #184]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca6:	4a2d      	ldr	r2, [pc, #180]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005cae:	4a2b      	ldr	r2, [pc, #172]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cb4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cc2:	d118      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc4:	f7fb fd7a 	bl	80017bc <HAL_GetTick>
 8005cc8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ccc:	e00d      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cce:	f7fb fd75 	bl	80017bc <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005cd8:	1ad2      	subs	r2, r2, r3
 8005cda:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d903      	bls.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005ce8:	e005      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cea:	4b1c      	ldr	r3, [pc, #112]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0eb      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d129      	bne.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d0e:	d10e      	bne.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005d10:	4b12      	ldr	r3, [pc, #72]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d20:	091a      	lsrs	r2, r3, #4
 8005d22:	4b10      	ldr	r3, [pc, #64]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	4a0d      	ldr	r2, [pc, #52]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	6113      	str	r3, [r2, #16]
 8005d2c:	e005      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	4a0a      	ldr	r2, [pc, #40]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d38:	6113      	str	r3, [r2, #16]
 8005d3a:	4b08      	ldr	r3, [pc, #32]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d3c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d4a:	4a04      	ldr	r2, [pc, #16]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d4c:	430b      	orrs	r3, r1
 8005d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d50:	e00e      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005d5a:	e009      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005d5c:	58024400 	.word	0x58024400
 8005d60:	58024800 	.word	0x58024800
 8005d64:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f002 0301 	and.w	r3, r2, #1
 8005d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d80:	2300      	movs	r3, #0
 8005d82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	f000 8089 	beq.w	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d98:	2b28      	cmp	r3, #40	@ 0x28
 8005d9a:	d86b      	bhi.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005da4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da2:	bf00      	nop
 8005da4:	08005e7d 	.word	0x08005e7d
 8005da8:	08005e75 	.word	0x08005e75
 8005dac:	08005e75 	.word	0x08005e75
 8005db0:	08005e75 	.word	0x08005e75
 8005db4:	08005e75 	.word	0x08005e75
 8005db8:	08005e75 	.word	0x08005e75
 8005dbc:	08005e75 	.word	0x08005e75
 8005dc0:	08005e75 	.word	0x08005e75
 8005dc4:	08005e49 	.word	0x08005e49
 8005dc8:	08005e75 	.word	0x08005e75
 8005dcc:	08005e75 	.word	0x08005e75
 8005dd0:	08005e75 	.word	0x08005e75
 8005dd4:	08005e75 	.word	0x08005e75
 8005dd8:	08005e75 	.word	0x08005e75
 8005ddc:	08005e75 	.word	0x08005e75
 8005de0:	08005e75 	.word	0x08005e75
 8005de4:	08005e5f 	.word	0x08005e5f
 8005de8:	08005e75 	.word	0x08005e75
 8005dec:	08005e75 	.word	0x08005e75
 8005df0:	08005e75 	.word	0x08005e75
 8005df4:	08005e75 	.word	0x08005e75
 8005df8:	08005e75 	.word	0x08005e75
 8005dfc:	08005e75 	.word	0x08005e75
 8005e00:	08005e75 	.word	0x08005e75
 8005e04:	08005e7d 	.word	0x08005e7d
 8005e08:	08005e75 	.word	0x08005e75
 8005e0c:	08005e75 	.word	0x08005e75
 8005e10:	08005e75 	.word	0x08005e75
 8005e14:	08005e75 	.word	0x08005e75
 8005e18:	08005e75 	.word	0x08005e75
 8005e1c:	08005e75 	.word	0x08005e75
 8005e20:	08005e75 	.word	0x08005e75
 8005e24:	08005e7d 	.word	0x08005e7d
 8005e28:	08005e75 	.word	0x08005e75
 8005e2c:	08005e75 	.word	0x08005e75
 8005e30:	08005e75 	.word	0x08005e75
 8005e34:	08005e75 	.word	0x08005e75
 8005e38:	08005e75 	.word	0x08005e75
 8005e3c:	08005e75 	.word	0x08005e75
 8005e40:	08005e75 	.word	0x08005e75
 8005e44:	08005e7d 	.word	0x08005e7d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	2101      	movs	r1, #1
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 fe95 	bl	8007b80 <RCCEx_PLL2_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e5c:	e00f      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e62:	3328      	adds	r3, #40	@ 0x28
 8005e64:	2101      	movs	r1, #1
 8005e66:	4618      	mov	r0, r3
 8005e68:	f001 ff3c 	bl	8007ce4 <RCCEx_PLL3_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e72:	e004      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e7a:	e000      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10a      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005e86:	4bbf      	ldr	r3, [pc, #764]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e94:	4abb      	ldr	r2, [pc, #748]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e96:	430b      	orrs	r3, r1
 8005e98:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e9a:	e003      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ea0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f002 0302 	and.w	r3, r2, #2
 8005eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005eba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	d041      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005eca:	2b05      	cmp	r3, #5
 8005ecc:	d824      	bhi.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005ece:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005f21 	.word	0x08005f21
 8005ed8:	08005eed 	.word	0x08005eed
 8005edc:	08005f03 	.word	0x08005f03
 8005ee0:	08005f21 	.word	0x08005f21
 8005ee4:	08005f21 	.word	0x08005f21
 8005ee8:	08005f21 	.word	0x08005f21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f001 fe43 	bl	8007b80 <RCCEx_PLL2_Config>
 8005efa:	4603      	mov	r3, r0
 8005efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f00:	e00f      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f06:	3328      	adds	r3, #40	@ 0x28
 8005f08:	2101      	movs	r1, #1
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 feea 	bl	8007ce4 <RCCEx_PLL3_Config>
 8005f10:	4603      	mov	r3, r0
 8005f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f16:	e004      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f1e:	e000      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10a      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f2a:	4b96      	ldr	r3, [pc, #600]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f2e:	f023 0107 	bic.w	r1, r3, #7
 8005f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f38:	4a92      	ldr	r2, [pc, #584]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f3a:	430b      	orrs	r3, r1
 8005f3c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f3e:	e003      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f50:	f002 0304 	and.w	r3, r2, #4
 8005f54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f5e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4313      	orrs	r3, r2
 8005f66:	d044      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f70:	2b05      	cmp	r3, #5
 8005f72:	d825      	bhi.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005f74:	a201      	add	r2, pc, #4	@ (adr r2, 8005f7c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7a:	bf00      	nop
 8005f7c:	08005fc9 	.word	0x08005fc9
 8005f80:	08005f95 	.word	0x08005f95
 8005f84:	08005fab 	.word	0x08005fab
 8005f88:	08005fc9 	.word	0x08005fc9
 8005f8c:	08005fc9 	.word	0x08005fc9
 8005f90:	08005fc9 	.word	0x08005fc9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f98:	3308      	adds	r3, #8
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f001 fdef 	bl	8007b80 <RCCEx_PLL2_Config>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005fa8:	e00f      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fae:	3328      	adds	r3, #40	@ 0x28
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f001 fe96 	bl	8007ce4 <RCCEx_PLL3_Config>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005fbe:	e004      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fc6:	e000      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10b      	bne.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fd2:	4b6c      	ldr	r3, [pc, #432]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd6:	f023 0107 	bic.w	r1, r3, #7
 8005fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fe2:	4a68      	ldr	r2, [pc, #416]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fe4:	430b      	orrs	r3, r1
 8005fe6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fe8:	e003      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffa:	f002 0320 	and.w	r3, r2, #32
 8005ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006002:	2300      	movs	r3, #0
 8006004:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006008:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800600c:	460b      	mov	r3, r1
 800600e:	4313      	orrs	r3, r2
 8006010:	d055      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800601a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800601e:	d033      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006020:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006024:	d82c      	bhi.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800602a:	d02f      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800602c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006030:	d826      	bhi.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006032:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006036:	d02b      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006038:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800603c:	d820      	bhi.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800603e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006042:	d012      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006048:	d81a      	bhi.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800604a:	2b00      	cmp	r3, #0
 800604c:	d022      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800604e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006052:	d115      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006058:	3308      	adds	r3, #8
 800605a:	2100      	movs	r1, #0
 800605c:	4618      	mov	r0, r3
 800605e:	f001 fd8f 	bl	8007b80 <RCCEx_PLL2_Config>
 8006062:	4603      	mov	r3, r0
 8006064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006068:	e015      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800606a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606e:	3328      	adds	r3, #40	@ 0x28
 8006070:	2102      	movs	r1, #2
 8006072:	4618      	mov	r0, r3
 8006074:	f001 fe36 	bl	8007ce4 <RCCEx_PLL3_Config>
 8006078:	4603      	mov	r3, r0
 800607a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800607e:	e00a      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006086:	e006      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006088:	bf00      	nop
 800608a:	e004      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800608c:	bf00      	nop
 800608e:	e002      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006090:	bf00      	nop
 8006092:	e000      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10b      	bne.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800609e:	4b39      	ldr	r3, [pc, #228]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ae:	4a35      	ldr	r2, [pc, #212]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060b0:	430b      	orrs	r3, r1
 80060b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80060b4:	e003      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80060be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80060ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060ce:	2300      	movs	r3, #0
 80060d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80060d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80060d8:	460b      	mov	r3, r1
 80060da:	4313      	orrs	r3, r2
 80060dc:	d058      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80060de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060e6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80060ea:	d033      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80060ec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80060f0:	d82c      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060f6:	d02f      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80060f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060fc:	d826      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006102:	d02b      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006104:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006108:	d820      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800610a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800610e:	d012      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006114:	d81a      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d022      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800611a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800611e:	d115      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006124:	3308      	adds	r3, #8
 8006126:	2100      	movs	r1, #0
 8006128:	4618      	mov	r0, r3
 800612a:	f001 fd29 	bl	8007b80 <RCCEx_PLL2_Config>
 800612e:	4603      	mov	r3, r0
 8006130:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006134:	e015      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613a:	3328      	adds	r3, #40	@ 0x28
 800613c:	2102      	movs	r1, #2
 800613e:	4618      	mov	r0, r3
 8006140:	f001 fdd0 	bl	8007ce4 <RCCEx_PLL3_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800614a:	e00a      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006152:	e006      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006154:	bf00      	nop
 8006156:	e004      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006158:	bf00      	nop
 800615a:	e002      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800615c:	bf00      	nop
 800615e:	e000      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10e      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800616a:	4b06      	ldr	r3, [pc, #24]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800616c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800616e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006176:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800617a:	4a02      	ldr	r2, [pc, #8]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800617c:	430b      	orrs	r3, r1
 800617e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006180:	e006      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006182:	bf00      	nop
 8006184:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800618c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006198:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800619c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061a0:	2300      	movs	r3, #0
 80061a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80061aa:	460b      	mov	r3, r1
 80061ac:	4313      	orrs	r3, r2
 80061ae:	d055      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80061b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80061b8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80061bc:	d033      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80061be:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80061c2:	d82c      	bhi.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061c8:	d02f      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80061ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061ce:	d826      	bhi.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061d0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80061d4:	d02b      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80061d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80061da:	d820      	bhi.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061e0:	d012      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80061e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061e6:	d81a      	bhi.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d022      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80061ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f0:	d115      	bne.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f6:	3308      	adds	r3, #8
 80061f8:	2100      	movs	r1, #0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f001 fcc0 	bl	8007b80 <RCCEx_PLL2_Config>
 8006200:	4603      	mov	r3, r0
 8006202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006206:	e015      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800620c:	3328      	adds	r3, #40	@ 0x28
 800620e:	2102      	movs	r1, #2
 8006210:	4618      	mov	r0, r3
 8006212:	f001 fd67 	bl	8007ce4 <RCCEx_PLL3_Config>
 8006216:	4603      	mov	r3, r0
 8006218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800621c:	e00a      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006224:	e006      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006226:	bf00      	nop
 8006228:	e004      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800622a:	bf00      	nop
 800622c:	e002      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800622e:	bf00      	nop
 8006230:	e000      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006232:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006234:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10b      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800623c:	4ba1      	ldr	r3, [pc, #644]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800623e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006240:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006248:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800624c:	4a9d      	ldr	r2, [pc, #628]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800624e:	430b      	orrs	r3, r1
 8006250:	6593      	str	r3, [r2, #88]	@ 0x58
 8006252:	e003      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006258:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800625c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006264:	f002 0308 	and.w	r3, r2, #8
 8006268:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800626c:	2300      	movs	r3, #0
 800626e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006272:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006276:	460b      	mov	r3, r1
 8006278:	4313      	orrs	r3, r2
 800627a:	d01e      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800627c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006280:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006288:	d10c      	bne.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800628a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628e:	3328      	adds	r3, #40	@ 0x28
 8006290:	2102      	movs	r1, #2
 8006292:	4618      	mov	r0, r3
 8006294:	f001 fd26 	bl	8007ce4 <RCCEx_PLL3_Config>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80062a4:	4b87      	ldr	r3, [pc, #540]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062b4:	4a83      	ldr	r2, [pc, #524]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062b6:	430b      	orrs	r3, r1
 80062b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c2:	f002 0310 	and.w	r3, r2, #16
 80062c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062ca:	2300      	movs	r3, #0
 80062cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80062d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80062d4:	460b      	mov	r3, r1
 80062d6:	4313      	orrs	r3, r2
 80062d8:	d01e      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80062da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062e6:	d10c      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ec:	3328      	adds	r3, #40	@ 0x28
 80062ee:	2102      	movs	r1, #2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 fcf7 	bl	8007ce4 <RCCEx_PLL3_Config>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006302:	4b70      	ldr	r3, [pc, #448]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006306:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800630a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006312:	4a6c      	ldr	r2, [pc, #432]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006314:	430b      	orrs	r3, r1
 8006316:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006324:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006328:	2300      	movs	r3, #0
 800632a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800632e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006332:	460b      	mov	r3, r1
 8006334:	4313      	orrs	r3, r2
 8006336:	d03e      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006344:	d022      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006346:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800634a:	d81b      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006354:	d00b      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006356:	e015      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800635c:	3308      	adds	r3, #8
 800635e:	2100      	movs	r1, #0
 8006360:	4618      	mov	r0, r3
 8006362:	f001 fc0d 	bl	8007b80 <RCCEx_PLL2_Config>
 8006366:	4603      	mov	r3, r0
 8006368:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800636c:	e00f      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800636e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006372:	3328      	adds	r3, #40	@ 0x28
 8006374:	2102      	movs	r1, #2
 8006376:	4618      	mov	r0, r3
 8006378:	f001 fcb4 	bl	8007ce4 <RCCEx_PLL3_Config>
 800637c:	4603      	mov	r3, r0
 800637e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006382:	e004      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800638a:	e000      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800638c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800638e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10b      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006396:	4b4b      	ldr	r3, [pc, #300]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800639a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800639e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80063a6:	4a47      	ldr	r2, [pc, #284]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063a8:	430b      	orrs	r3, r1
 80063aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80063ac:	e003      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80063c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063c4:	2300      	movs	r3, #0
 80063c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80063cc:	460b      	mov	r3, r1
 80063ce:	4313      	orrs	r3, r2
 80063d0:	d03b      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80063d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063de:	d01f      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80063e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063e4:	d818      	bhi.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80063e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063ea:	d003      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80063ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063f0:	d007      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80063f2:	e011      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f4:	4b33      	ldr	r3, [pc, #204]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f8:	4a32      	ldr	r2, [pc, #200]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006400:	e00f      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006406:	3328      	adds	r3, #40	@ 0x28
 8006408:	2101      	movs	r1, #1
 800640a:	4618      	mov	r0, r3
 800640c:	f001 fc6a 	bl	8007ce4 <RCCEx_PLL3_Config>
 8006410:	4603      	mov	r3, r0
 8006412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006416:	e004      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800641e:	e000      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10b      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800642a:	4b26      	ldr	r3, [pc, #152]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800642c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800642e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800643a:	4a22      	ldr	r2, [pc, #136]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800643c:	430b      	orrs	r3, r1
 800643e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006440:	e003      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006446:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800644a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006452:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006456:	673b      	str	r3, [r7, #112]	@ 0x70
 8006458:	2300      	movs	r3, #0
 800645a:	677b      	str	r3, [r7, #116]	@ 0x74
 800645c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006460:	460b      	mov	r3, r1
 8006462:	4313      	orrs	r3, r2
 8006464:	d034      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006474:	d007      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006476:	e011      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006478:	4b12      	ldr	r3, [pc, #72]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800647a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647c:	4a11      	ldr	r2, [pc, #68]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800647e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006482:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006484:	e00e      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648a:	3308      	adds	r3, #8
 800648c:	2102      	movs	r1, #2
 800648e:	4618      	mov	r0, r3
 8006490:	f001 fb76 	bl	8007b80 <RCCEx_PLL2_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800649a:	e003      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10d      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80064ac:	4b05      	ldr	r3, [pc, #20]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064ba:	4a02      	ldr	r2, [pc, #8]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064bc:	430b      	orrs	r3, r1
 80064be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064c0:	e006      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80064c2:	bf00      	nop
 80064c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80064dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064de:	2300      	movs	r3, #0
 80064e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80064e6:	460b      	mov	r3, r1
 80064e8:	4313      	orrs	r3, r2
 80064ea:	d00c      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f0:	3328      	adds	r3, #40	@ 0x28
 80064f2:	2102      	movs	r1, #2
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 fbf5 	bl	8007ce4 <RCCEx_PLL3_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006512:	663b      	str	r3, [r7, #96]	@ 0x60
 8006514:	2300      	movs	r3, #0
 8006516:	667b      	str	r3, [r7, #100]	@ 0x64
 8006518:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800651c:	460b      	mov	r3, r1
 800651e:	4313      	orrs	r3, r2
 8006520:	d038      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800652a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800652e:	d018      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006530:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006534:	d811      	bhi.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006536:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800653a:	d014      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800653c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006540:	d80b      	bhi.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d011      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800654a:	d106      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800654c:	4bc3      	ldr	r3, [pc, #780]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800654e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006550:	4ac2      	ldr	r2, [pc, #776]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006558:	e008      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006560:	e004      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006562:	bf00      	nop
 8006564:	e002      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006566:	bf00      	nop
 8006568:	e000      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800656a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800656c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10b      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006574:	4bb9      	ldr	r3, [pc, #740]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006578:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800657c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006584:	4ab5      	ldr	r2, [pc, #724]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006586:	430b      	orrs	r3, r1
 8006588:	6553      	str	r3, [r2, #84]	@ 0x54
 800658a:	e003      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006590:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80065a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065a2:	2300      	movs	r3, #0
 80065a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80065aa:	460b      	mov	r3, r1
 80065ac:	4313      	orrs	r3, r2
 80065ae:	d009      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065b0:	4baa      	ldr	r3, [pc, #680]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80065b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065be:	4aa7      	ldr	r2, [pc, #668]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065c0:	430b      	orrs	r3, r1
 80065c2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80065c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80065d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80065d2:	2300      	movs	r3, #0
 80065d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80065d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80065da:	460b      	mov	r3, r1
 80065dc:	4313      	orrs	r3, r2
 80065de:	d00a      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80065e0:	4b9e      	ldr	r3, [pc, #632]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80065e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80065f0:	4a9a      	ldr	r2, [pc, #616]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065f2:	430b      	orrs	r3, r1
 80065f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006602:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006604:	2300      	movs	r3, #0
 8006606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006608:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800660c:	460b      	mov	r3, r1
 800660e:	4313      	orrs	r3, r2
 8006610:	d009      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006612:	4b92      	ldr	r3, [pc, #584]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006616:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800661a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006620:	4a8e      	ldr	r2, [pc, #568]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006622:	430b      	orrs	r3, r1
 8006624:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006632:	643b      	str	r3, [r7, #64]	@ 0x40
 8006634:	2300      	movs	r3, #0
 8006636:	647b      	str	r3, [r7, #68]	@ 0x44
 8006638:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800663c:	460b      	mov	r3, r1
 800663e:	4313      	orrs	r3, r2
 8006640:	d00e      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006642:	4b86      	ldr	r3, [pc, #536]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	4a85      	ldr	r2, [pc, #532]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006648:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800664c:	6113      	str	r3, [r2, #16]
 800664e:	4b83      	ldr	r3, [pc, #524]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006650:	6919      	ldr	r1, [r3, #16]
 8006652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006656:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800665a:	4a80      	ldr	r2, [pc, #512]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800665c:	430b      	orrs	r3, r1
 800665e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800666c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800666e:	2300      	movs	r3, #0
 8006670:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006672:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006676:	460b      	mov	r3, r1
 8006678:	4313      	orrs	r3, r2
 800667a:	d009      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800667c:	4b77      	ldr	r3, [pc, #476]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800667e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006680:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800668a:	4a74      	ldr	r2, [pc, #464]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800668c:	430b      	orrs	r3, r1
 800668e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006698:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800669c:	633b      	str	r3, [r7, #48]	@ 0x30
 800669e:	2300      	movs	r3, #0
 80066a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80066a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80066a6:	460b      	mov	r3, r1
 80066a8:	4313      	orrs	r3, r2
 80066aa:	d00a      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80066ac:	4b6b      	ldr	r3, [pc, #428]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80066b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066bc:	4a67      	ldr	r2, [pc, #412]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066be:	430b      	orrs	r3, r1
 80066c0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80066c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	2100      	movs	r1, #0
 80066cc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80066d8:	460b      	mov	r3, r1
 80066da:	4313      	orrs	r3, r2
 80066dc:	d011      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e2:	3308      	adds	r3, #8
 80066e4:	2100      	movs	r1, #0
 80066e6:	4618      	mov	r0, r3
 80066e8:	f001 fa4a 	bl	8007b80 <RCCEx_PLL2_Config>
 80066ec:	4603      	mov	r3, r0
 80066ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80066f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	2100      	movs	r1, #0
 800670c:	6239      	str	r1, [r7, #32]
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	627b      	str	r3, [r7, #36]	@ 0x24
 8006714:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006718:	460b      	mov	r3, r1
 800671a:	4313      	orrs	r3, r2
 800671c:	d011      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800671e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006722:	3308      	adds	r3, #8
 8006724:	2101      	movs	r1, #1
 8006726:	4618      	mov	r0, r3
 8006728:	f001 fa2a 	bl	8007b80 <RCCEx_PLL2_Config>
 800672c:	4603      	mov	r3, r0
 800672e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800673e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	2100      	movs	r1, #0
 800674c:	61b9      	str	r1, [r7, #24]
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006758:	460b      	mov	r3, r1
 800675a:	4313      	orrs	r3, r2
 800675c:	d011      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006762:	3308      	adds	r3, #8
 8006764:	2102      	movs	r1, #2
 8006766:	4618      	mov	r0, r3
 8006768:	f001 fa0a 	bl	8007b80 <RCCEx_PLL2_Config>
 800676c:	4603      	mov	r3, r0
 800676e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800677a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800677e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	2100      	movs	r1, #0
 800678c:	6139      	str	r1, [r7, #16]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006798:	460b      	mov	r3, r1
 800679a:	4313      	orrs	r3, r2
 800679c:	d011      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800679e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a2:	3328      	adds	r3, #40	@ 0x28
 80067a4:	2100      	movs	r1, #0
 80067a6:	4618      	mov	r0, r3
 80067a8:	f001 fa9c 	bl	8007ce4 <RCCEx_PLL3_Config>
 80067ac:	4603      	mov	r3, r0
 80067ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80067b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80067c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ca:	2100      	movs	r1, #0
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	f003 0310 	and.w	r3, r3, #16
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80067d8:	460b      	mov	r3, r1
 80067da:	4313      	orrs	r3, r2
 80067dc:	d011      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e2:	3328      	adds	r3, #40	@ 0x28
 80067e4:	2101      	movs	r1, #1
 80067e6:	4618      	mov	r0, r3
 80067e8:	f001 fa7c 	bl	8007ce4 <RCCEx_PLL3_Config>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80067f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	2100      	movs	r1, #0
 800680c:	6039      	str	r1, [r7, #0]
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	607b      	str	r3, [r7, #4]
 8006814:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006818:	460b      	mov	r3, r1
 800681a:	4313      	orrs	r3, r2
 800681c:	d011      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800681e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006822:	3328      	adds	r3, #40	@ 0x28
 8006824:	2102      	movs	r1, #2
 8006826:	4618      	mov	r0, r3
 8006828:	f001 fa5c 	bl	8007ce4 <RCCEx_PLL3_Config>
 800682c:	4603      	mov	r3, r0
 800682e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800683e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006842:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	e000      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
}
 8006850:	4618      	mov	r0, r3
 8006852:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006856:	46bd      	mov	sp, r7
 8006858:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800685c:	58024400 	.word	0x58024400

08006860 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b090      	sub	sp, #64	@ 0x40
 8006864:	af00      	add	r7, sp, #0
 8006866:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800686a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800686e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006872:	430b      	orrs	r3, r1
 8006874:	f040 8094 	bne.w	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006878:	4b9e      	ldr	r3, [pc, #632]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800687a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006884:	2b04      	cmp	r3, #4
 8006886:	f200 8087 	bhi.w	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800688a:	a201      	add	r2, pc, #4	@ (adr r2, 8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800688c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006890:	080068a5 	.word	0x080068a5
 8006894:	080068cd 	.word	0x080068cd
 8006898:	080068f5 	.word	0x080068f5
 800689c:	08006991 	.word	0x08006991
 80068a0:	0800691d 	.word	0x0800691d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068a4:	4b93      	ldr	r3, [pc, #588]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068b0:	d108      	bne.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068b6:	4618      	mov	r0, r3
 80068b8:	f001 f810 	bl	80078dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068c0:	f000 bd45 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068c8:	f000 bd41 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068cc:	4b89      	ldr	r3, [pc, #548]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068d8:	d108      	bne.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068da:	f107 0318 	add.w	r3, r7, #24
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fd54 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068e8:	f000 bd31 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068ec:	2300      	movs	r3, #0
 80068ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068f0:	f000 bd2d 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068f4:	4b7f      	ldr	r3, [pc, #508]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006900:	d108      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006902:	f107 030c 	add.w	r3, r7, #12
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fe94 	bl	8007634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006910:	f000 bd1d 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006914:	2300      	movs	r3, #0
 8006916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006918:	f000 bd19 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800691c:	4b75      	ldr	r3, [pc, #468]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800691e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006920:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006924:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006926:	4b73      	ldr	r3, [pc, #460]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0304 	and.w	r3, r3, #4
 800692e:	2b04      	cmp	r3, #4
 8006930:	d10c      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006934:	2b00      	cmp	r3, #0
 8006936:	d109      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006938:	4b6e      	ldr	r3, [pc, #440]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	08db      	lsrs	r3, r3, #3
 800693e:	f003 0303 	and.w	r3, r3, #3
 8006942:	4a6d      	ldr	r2, [pc, #436]	@ (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
 8006948:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800694a:	e01f      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800694c:	4b69      	ldr	r3, [pc, #420]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006954:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006958:	d106      	bne.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800695a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800695c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006960:	d102      	bne.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006962:	4b66      	ldr	r3, [pc, #408]	@ (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006966:	e011      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006968:	4b62      	ldr	r3, [pc, #392]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006970:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006974:	d106      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006978:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800697c:	d102      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800697e:	4b60      	ldr	r3, [pc, #384]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006980:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006982:	e003      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006988:	f000 bce1 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800698c:	f000 bcdf 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006990:	4b5c      	ldr	r3, [pc, #368]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006994:	f000 bcdb 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800699c:	f000 bcd7 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80069a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069a4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80069a8:	430b      	orrs	r3, r1
 80069aa:	f040 80ad 	bne.w	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80069ae:	4b51      	ldr	r3, [pc, #324]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80069b6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80069b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069be:	d056      	beq.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80069c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069c6:	f200 8090 	bhi.w	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80069ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069cc:	2bc0      	cmp	r3, #192	@ 0xc0
 80069ce:	f000 8088 	beq.w	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80069d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d4:	2bc0      	cmp	r3, #192	@ 0xc0
 80069d6:	f200 8088 	bhi.w	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80069da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069dc:	2b80      	cmp	r3, #128	@ 0x80
 80069de:	d032      	beq.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	2b80      	cmp	r3, #128	@ 0x80
 80069e4:	f200 8081 	bhi.w	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80069e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	2b40      	cmp	r3, #64	@ 0x40
 80069f2:	d014      	beq.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80069f4:	e079      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069f6:	4b3f      	ldr	r3, [pc, #252]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a02:	d108      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 ff67 	bl	80078dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a12:	f000 bc9c 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a1a:	f000 bc98 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a1e:	4b35      	ldr	r3, [pc, #212]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a2a:	d108      	bne.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a2c:	f107 0318 	add.w	r3, r7, #24
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fcab 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a3a:	f000 bc88 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a42:	f000 bc84 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a46:	4b2b      	ldr	r3, [pc, #172]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a52:	d108      	bne.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a54:	f107 030c 	add.w	r3, r7, #12
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fdeb 	bl	8007634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a62:	f000 bc74 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a6a:	f000 bc70 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a6e:	4b21      	ldr	r3, [pc, #132]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a76:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a78:	4b1e      	ldr	r3, [pc, #120]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d10c      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d109      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	08db      	lsrs	r3, r3, #3
 8006a90:	f003 0303 	and.w	r3, r3, #3
 8006a94:	4a18      	ldr	r2, [pc, #96]	@ (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a96:	fa22 f303 	lsr.w	r3, r2, r3
 8006a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a9c:	e01f      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a9e:	4b15      	ldr	r3, [pc, #84]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aaa:	d106      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ab2:	d102      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ab4:	4b11      	ldr	r3, [pc, #68]	@ (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ab8:	e011      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006aba:	4b0e      	ldr	r3, [pc, #56]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ac2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ac6:	d106      	bne.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ace:	d102      	bne.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ad4:	e003      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006ada:	f000 bc38 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ade:	f000 bc36 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ae2:	4b08      	ldr	r3, [pc, #32]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ae6:	f000 bc32 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aee:	f000 bc2e 	b.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006af2:	bf00      	nop
 8006af4:	58024400 	.word	0x58024400
 8006af8:	03d09000 	.word	0x03d09000
 8006afc:	003d0900 	.word	0x003d0900
 8006b00:	017d7840 	.word	0x017d7840
 8006b04:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b0c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006b10:	430b      	orrs	r3, r1
 8006b12:	f040 809c 	bne.w	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006b16:	4b9e      	ldr	r3, [pc, #632]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b1a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006b1e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b26:	d054      	beq.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b2e:	f200 808b 	bhi.w	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006b38:	f000 8083 	beq.w	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006b42:	f200 8081 	bhi.w	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b4c:	d02f      	beq.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b54:	d878      	bhi.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d004      	beq.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b62:	d012      	beq.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006b64:	e070      	b.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b66:	4b8a      	ldr	r3, [pc, #552]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b72:	d107      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 feaf 	bl	80078dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b82:	e3e4      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b88:	e3e1      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b8a:	4b81      	ldr	r3, [pc, #516]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b96:	d107      	bne.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b98:	f107 0318 	add.w	r3, r7, #24
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 fbf5 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ba6:	e3d2      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bac:	e3cf      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bae:	4b78      	ldr	r3, [pc, #480]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bba:	d107      	bne.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bbc:	f107 030c 	add.w	r3, r7, #12
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 fd37 	bl	8007634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bca:	e3c0      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bd0:	e3bd      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006bd2:	4b6f      	ldr	r3, [pc, #444]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006bda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bdc:	4b6c      	ldr	r3, [pc, #432]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	d10c      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d109      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bee:	4b68      	ldr	r3, [pc, #416]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	08db      	lsrs	r3, r3, #3
 8006bf4:	f003 0303 	and.w	r3, r3, #3
 8006bf8:	4a66      	ldr	r2, [pc, #408]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8006bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c00:	e01e      	b.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c02:	4b63      	ldr	r3, [pc, #396]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c0e:	d106      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c16:	d102      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c18:	4b5f      	ldr	r3, [pc, #380]	@ (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c1c:	e010      	b.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c1e:	4b5c      	ldr	r3, [pc, #368]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c2a:	d106      	bne.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c32:	d102      	bne.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c34:	4b59      	ldr	r3, [pc, #356]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c38:	e002      	b.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006c3e:	e386      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c40:	e385      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c42:	4b57      	ldr	r3, [pc, #348]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c46:	e382      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c4c:	e37f      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006c4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c52:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006c56:	430b      	orrs	r3, r1
 8006c58:	f040 80a7 	bne.w	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006c5c:	4b4c      	ldr	r3, [pc, #304]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c60:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006c64:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c6c:	d055      	beq.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c74:	f200 8096 	bhi.w	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c7e:	f000 8084 	beq.w	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c88:	f200 808c 	bhi.w	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c92:	d030      	beq.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c9a:	f200 8083 	bhi.w	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d004      	beq.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006caa:	d012      	beq.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006cac:	e07a      	b.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cae:	4b38      	ldr	r3, [pc, #224]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cba:	d107      	bne.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fe0b 	bl	80078dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cca:	e340      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cd0:	e33d      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cde:	d107      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ce0:	f107 0318 	add.w	r3, r7, #24
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fb51 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cee:	e32e      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cf4:	e32b      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cf6:	4b26      	ldr	r3, [pc, #152]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d02:	d107      	bne.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d04:	f107 030c 	add.w	r3, r7, #12
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 fc93 	bl	8007634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d12:	e31c      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d14:	2300      	movs	r3, #0
 8006d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d18:	e319      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006d22:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d24:	4b1a      	ldr	r3, [pc, #104]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0304 	and.w	r3, r3, #4
 8006d2c:	2b04      	cmp	r3, #4
 8006d2e:	d10c      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d109      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d36:	4b16      	ldr	r3, [pc, #88]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	08db      	lsrs	r3, r3, #3
 8006d3c:	f003 0303 	and.w	r3, r3, #3
 8006d40:	4a14      	ldr	r2, [pc, #80]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006d42:	fa22 f303 	lsr.w	r3, r2, r3
 8006d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d48:	e01e      	b.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d4a:	4b11      	ldr	r3, [pc, #68]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d56:	d106      	bne.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d5e:	d102      	bne.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d60:	4b0d      	ldr	r3, [pc, #52]	@ (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d64:	e010      	b.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d66:	4b0a      	ldr	r3, [pc, #40]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d72:	d106      	bne.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d7a:	d102      	bne.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d7c:	4b07      	ldr	r3, [pc, #28]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d80:	e002      	b.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d82:	2300      	movs	r3, #0
 8006d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d86:	e2e2      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d88:	e2e1      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d8a:	4b05      	ldr	r3, [pc, #20]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d8e:	e2de      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d90:	58024400 	.word	0x58024400
 8006d94:	03d09000 	.word	0x03d09000
 8006d98:	003d0900 	.word	0x003d0900
 8006d9c:	017d7840 	.word	0x017d7840
 8006da0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006da8:	e2d1      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006daa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dae:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006db2:	430b      	orrs	r3, r1
 8006db4:	f040 809c 	bne.w	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006db8:	4b93      	ldr	r3, [pc, #588]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dbc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006dc0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dc8:	d054      	beq.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dd0:	f200 808b 	bhi.w	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006dda:	f000 8083 	beq.w	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006de4:	f200 8081 	bhi.w	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dee:	d02f      	beq.n	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006df6:	d878      	bhi.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d004      	beq.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e04:	d012      	beq.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006e06:	e070      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e08:	4b7f      	ldr	r3, [pc, #508]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e14:	d107      	bne.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 fd5e 	bl	80078dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e24:	e293      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e2a:	e290      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e2c:	4b76      	ldr	r3, [pc, #472]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e38:	d107      	bne.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e3a:	f107 0318 	add.w	r3, r7, #24
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 faa4 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e48:	e281      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e4e:	e27e      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e50:	4b6d      	ldr	r3, [pc, #436]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e5c:	d107      	bne.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e5e:	f107 030c 	add.w	r3, r7, #12
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fbe6 	bl	8007634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e6c:	e26f      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e72:	e26c      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e74:	4b64      	ldr	r3, [pc, #400]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e7c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e7e:	4b62      	ldr	r3, [pc, #392]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0304 	and.w	r3, r3, #4
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d10c      	bne.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d109      	bne.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e90:	4b5d      	ldr	r3, [pc, #372]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	08db      	lsrs	r3, r3, #3
 8006e96:	f003 0303 	and.w	r3, r3, #3
 8006e9a:	4a5c      	ldr	r2, [pc, #368]	@ (800700c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ea2:	e01e      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ea4:	4b58      	ldr	r3, [pc, #352]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eb0:	d106      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006eb8:	d102      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006eba:	4b55      	ldr	r3, [pc, #340]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ebe:	e010      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ec0:	4b51      	ldr	r3, [pc, #324]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ec8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ecc:	d106      	bne.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ed4:	d102      	bne.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ed6:	4b4f      	ldr	r3, [pc, #316]	@ (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eda:	e002      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006ee0:	e235      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ee2:	e234      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ee4:	4b4c      	ldr	r3, [pc, #304]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee8:	e231      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006eea:	2300      	movs	r3, #0
 8006eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eee:	e22e      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	f040 808f 	bne.w	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006efe:	4b42      	ldr	r3, [pc, #264]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f02:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006f06:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f0e:	d06b      	beq.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f16:	d874      	bhi.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f1e:	d056      	beq.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f26:	d86c      	bhi.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f2e:	d03b      	beq.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f36:	d864      	bhi.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f3e:	d021      	beq.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f46:	d85c      	bhi.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d004      	beq.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f54:	d004      	beq.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006f56:	e054      	b.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006f58:	f7fe fa20 	bl	800539c <HAL_RCC_GetPCLK1Freq>
 8006f5c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006f5e:	e1f6      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f60:	4b29      	ldr	r3, [pc, #164]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f6c:	d107      	bne.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f6e:	f107 0318 	add.w	r3, r7, #24
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fa0a 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f7c:	e1e7      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f82:	e1e4      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f84:	4b20      	ldr	r3, [pc, #128]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f90:	d107      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f92:	f107 030c 	add.w	r3, r7, #12
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fb4c 	bl	8007634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fa0:	e1d5      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fa6:	e1d2      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fa8:	4b17      	ldr	r3, [pc, #92]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d109      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fb4:	4b14      	ldr	r3, [pc, #80]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	08db      	lsrs	r3, r3, #3
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	4a13      	ldr	r2, [pc, #76]	@ (800700c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fc6:	e1c2      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fcc:	e1bf      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006fce:	4b0e      	ldr	r3, [pc, #56]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fda:	d102      	bne.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fe0:	e1b5      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fe6:	e1b2      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006fe8:	4b07      	ldr	r3, [pc, #28]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ff0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ff4:	d102      	bne.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006ff6:	4b07      	ldr	r3, [pc, #28]	@ (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ffa:	e1a8      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007000:	e1a5      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007006:	e1a2      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007008:	58024400 	.word	0x58024400
 800700c:	03d09000 	.word	0x03d09000
 8007010:	003d0900 	.word	0x003d0900
 8007014:	017d7840 	.word	0x017d7840
 8007018:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800701c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007020:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007024:	430b      	orrs	r3, r1
 8007026:	d173      	bne.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007028:	4b9c      	ldr	r3, [pc, #624]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800702a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800702c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007030:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007034:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007038:	d02f      	beq.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800703a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007040:	d863      	bhi.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007044:	2b00      	cmp	r3, #0
 8007046:	d004      	beq.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800704e:	d012      	beq.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007050:	e05b      	b.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007052:	4b92      	ldr	r3, [pc, #584]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800705a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800705e:	d107      	bne.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007060:	f107 0318 	add.w	r3, r7, #24
 8007064:	4618      	mov	r0, r3
 8007066:	f000 f991 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800706e:	e16e      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007070:	2300      	movs	r3, #0
 8007072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007074:	e16b      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007076:	4b89      	ldr	r3, [pc, #548]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800707e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007082:	d107      	bne.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007084:	f107 030c 	add.w	r3, r7, #12
 8007088:	4618      	mov	r0, r3
 800708a:	f000 fad3 	bl	8007634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007092:	e15c      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007094:	2300      	movs	r3, #0
 8007096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007098:	e159      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800709a:	4b80      	ldr	r3, [pc, #512]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800709c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800709e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80070a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070a4:	4b7d      	ldr	r3, [pc, #500]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	d10c      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80070b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d109      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070b6:	4b79      	ldr	r3, [pc, #484]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	08db      	lsrs	r3, r3, #3
 80070bc:	f003 0303 	and.w	r3, r3, #3
 80070c0:	4a77      	ldr	r2, [pc, #476]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80070c2:	fa22 f303 	lsr.w	r3, r2, r3
 80070c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070c8:	e01e      	b.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070ca:	4b74      	ldr	r3, [pc, #464]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070d6:	d106      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80070d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070de:	d102      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80070e0:	4b70      	ldr	r3, [pc, #448]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80070e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070e4:	e010      	b.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070e6:	4b6d      	ldr	r3, [pc, #436]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070f2:	d106      	bne.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80070f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070fa:	d102      	bne.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80070fc:	4b6a      	ldr	r3, [pc, #424]	@ (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80070fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007100:	e002      	b.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007102:	2300      	movs	r3, #0
 8007104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007106:	e122      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007108:	e121      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800710a:	2300      	movs	r3, #0
 800710c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800710e:	e11e      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007114:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007118:	430b      	orrs	r3, r1
 800711a:	d133      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800711c:	4b5f      	ldr	r3, [pc, #380]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800711e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007124:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800712c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007132:	d012      	beq.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007134:	e023      	b.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007136:	4b59      	ldr	r3, [pc, #356]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800713e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007142:	d107      	bne.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007144:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fbc7 	bl	80078dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800714e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007152:	e0fc      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007158:	e0f9      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800715a:	4b50      	ldr	r3, [pc, #320]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007162:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007166:	d107      	bne.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007168:	f107 0318 	add.w	r3, r7, #24
 800716c:	4618      	mov	r0, r3
 800716e:	f000 f90d 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007176:	e0ea      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007178:	2300      	movs	r3, #0
 800717a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800717c:	e0e7      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800717e:	2300      	movs	r3, #0
 8007180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007182:	e0e4      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007184:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007188:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800718c:	430b      	orrs	r3, r1
 800718e:	f040 808d 	bne.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007192:	4b42      	ldr	r3, [pc, #264]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007196:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800719a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800719c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800719e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80071a2:	d06b      	beq.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80071a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80071aa:	d874      	bhi.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80071ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071b2:	d056      	beq.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80071b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071ba:	d86c      	bhi.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80071bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80071c2:	d03b      	beq.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80071c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80071ca:	d864      	bhi.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80071cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071d2:	d021      	beq.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80071d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071da:	d85c      	bhi.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80071dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80071e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071e8:	d004      	beq.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80071ea:	e054      	b.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80071ec:	f000 f8b8 	bl	8007360 <HAL_RCCEx_GetD3PCLK1Freq>
 80071f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071f2:	e0ac      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071f4:	4b29      	ldr	r3, [pc, #164]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007200:	d107      	bne.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007202:	f107 0318 	add.w	r3, r7, #24
 8007206:	4618      	mov	r0, r3
 8007208:	f000 f8c0 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007210:	e09d      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007212:	2300      	movs	r3, #0
 8007214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007216:	e09a      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007218:	4b20      	ldr	r3, [pc, #128]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007224:	d107      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007226:	f107 030c 	add.w	r3, r7, #12
 800722a:	4618      	mov	r0, r3
 800722c:	f000 fa02 	bl	8007634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007234:	e08b      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800723a:	e088      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800723c:	4b17      	ldr	r3, [pc, #92]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b04      	cmp	r3, #4
 8007246:	d109      	bne.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007248:	4b14      	ldr	r3, [pc, #80]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	08db      	lsrs	r3, r3, #3
 800724e:	f003 0303 	and.w	r3, r3, #3
 8007252:	4a13      	ldr	r2, [pc, #76]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007254:	fa22 f303 	lsr.w	r3, r2, r3
 8007258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800725a:	e078      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007260:	e075      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007262:	4b0e      	ldr	r3, [pc, #56]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800726a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800726e:	d102      	bne.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007270:	4b0c      	ldr	r3, [pc, #48]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007274:	e06b      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007276:	2300      	movs	r3, #0
 8007278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800727a:	e068      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800727c:	4b07      	ldr	r3, [pc, #28]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007284:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007288:	d102      	bne.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800728a:	4b07      	ldr	r3, [pc, #28]	@ (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800728c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800728e:	e05e      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007290:	2300      	movs	r3, #0
 8007292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007294:	e05b      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007296:	2300      	movs	r3, #0
 8007298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800729a:	e058      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800729c:	58024400 	.word	0x58024400
 80072a0:	03d09000 	.word	0x03d09000
 80072a4:	003d0900 	.word	0x003d0900
 80072a8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80072ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072b0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80072b4:	430b      	orrs	r3, r1
 80072b6:	d148      	bne.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80072b8:	4b27      	ldr	r3, [pc, #156]	@ (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80072c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80072c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072c8:	d02a      	beq.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80072ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072d0:	d838      	bhi.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80072d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d004      	beq.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80072d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072de:	d00d      	beq.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80072e0:	e030      	b.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80072e2:	4b1d      	ldr	r3, [pc, #116]	@ (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072ee:	d102      	bne.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80072f0:	4b1a      	ldr	r3, [pc, #104]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80072f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072f4:	e02b      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072f6:	2300      	movs	r3, #0
 80072f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072fa:	e028      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072fc:	4b16      	ldr	r3, [pc, #88]	@ (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007304:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007308:	d107      	bne.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800730a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800730e:	4618      	mov	r0, r3
 8007310:	f000 fae4 	bl	80078dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007318:	e019      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800731a:	2300      	movs	r3, #0
 800731c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800731e:	e016      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007320:	4b0d      	ldr	r3, [pc, #52]	@ (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007328:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800732c:	d107      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800732e:	f107 0318 	add.w	r3, r7, #24
 8007332:	4618      	mov	r0, r3
 8007334:	f000 f82a 	bl	800738c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800733c:	e007      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007342:	e004      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007348:	e001      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800734e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007350:	4618      	mov	r0, r3
 8007352:	3740      	adds	r7, #64	@ 0x40
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	58024400 	.word	0x58024400
 800735c:	017d7840 	.word	0x017d7840

08007360 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007364:	f7fd ffea 	bl	800533c <HAL_RCC_GetHCLKFreq>
 8007368:	4602      	mov	r2, r0
 800736a:	4b06      	ldr	r3, [pc, #24]	@ (8007384 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	091b      	lsrs	r3, r3, #4
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	4904      	ldr	r1, [pc, #16]	@ (8007388 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007376:	5ccb      	ldrb	r3, [r1, r3]
 8007378:	f003 031f 	and.w	r3, r3, #31
 800737c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007380:	4618      	mov	r0, r3
 8007382:	bd80      	pop	{r7, pc}
 8007384:	58024400 	.word	0x58024400
 8007388:	0800e8f8 	.word	0x0800e8f8

0800738c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800738c:	b480      	push	{r7}
 800738e:	b089      	sub	sp, #36	@ 0x24
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007394:	4ba1      	ldr	r3, [pc, #644]	@ (800761c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007398:	f003 0303 	and.w	r3, r3, #3
 800739c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800739e:	4b9f      	ldr	r3, [pc, #636]	@ (800761c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a2:	0b1b      	lsrs	r3, r3, #12
 80073a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80073aa:	4b9c      	ldr	r3, [pc, #624]	@ (800761c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ae:	091b      	lsrs	r3, r3, #4
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80073b6:	4b99      	ldr	r3, [pc, #612]	@ (800761c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ba:	08db      	lsrs	r3, r3, #3
 80073bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	fb02 f303 	mul.w	r3, r2, r3
 80073c6:	ee07 3a90 	vmov	s15, r3
 80073ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 8111 	beq.w	80075fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	2b02      	cmp	r3, #2
 80073de:	f000 8083 	beq.w	80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	f200 80a1 	bhi.w	800752c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d056      	beq.n	80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80073f6:	e099      	b.n	800752c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073f8:	4b88      	ldr	r3, [pc, #544]	@ (800761c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0320 	and.w	r3, r3, #32
 8007400:	2b00      	cmp	r3, #0
 8007402:	d02d      	beq.n	8007460 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007404:	4b85      	ldr	r3, [pc, #532]	@ (800761c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	08db      	lsrs	r3, r3, #3
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	4a84      	ldr	r2, [pc, #528]	@ (8007620 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007410:	fa22 f303 	lsr.w	r3, r2, r3
 8007414:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	ee07 3a90 	vmov	s15, r3
 800741c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800742e:	4b7b      	ldr	r3, [pc, #492]	@ (800761c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007442:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800744a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800744e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800745e:	e087      	b.n	8007570 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007628 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800746e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007472:	4b6a      	ldr	r3, [pc, #424]	@ (800761c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007482:	ed97 6a03 	vldr	s12, [r7, #12]
 8007486:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800748a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800748e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800749a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800749e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074a2:	e065      	b.n	8007570 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800762c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80074b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b6:	4b59      	ldr	r3, [pc, #356]	@ (800761c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074e6:	e043      	b.n	8007570 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007630 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80074f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074fa:	4b48      	ldr	r3, [pc, #288]	@ (800761c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750a:	ed97 6a03 	vldr	s12, [r7, #12]
 800750e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800751a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800751e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007526:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800752a:	e021      	b.n	8007570 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	ee07 3a90 	vmov	s15, r3
 8007532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007536:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800762c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800753a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753e:	4b37      	ldr	r3, [pc, #220]	@ (800761c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007552:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800755e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800756e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007570:	4b2a      	ldr	r3, [pc, #168]	@ (800761c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007574:	0a5b      	lsrs	r3, r3, #9
 8007576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007582:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007586:	ee37 7a87 	vadd.f32	s14, s15, s14
 800758a:	edd7 6a07 	vldr	s13, [r7, #28]
 800758e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007596:	ee17 2a90 	vmov	r2, s15
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800759e:	4b1f      	ldr	r3, [pc, #124]	@ (800761c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a2:	0c1b      	lsrs	r3, r3, #16
 80075a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075a8:	ee07 3a90 	vmov	s15, r3
 80075ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80075bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075c4:	ee17 2a90 	vmov	r2, s15
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80075cc:	4b13      	ldr	r3, [pc, #76]	@ (800761c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d0:	0e1b      	lsrs	r3, r3, #24
 80075d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075d6:	ee07 3a90 	vmov	s15, r3
 80075da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f2:	ee17 2a90 	vmov	r2, s15
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80075fa:	e008      	b.n	800760e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	609a      	str	r2, [r3, #8]
}
 800760e:	bf00      	nop
 8007610:	3724      	adds	r7, #36	@ 0x24
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	58024400 	.word	0x58024400
 8007620:	03d09000 	.word	0x03d09000
 8007624:	46000000 	.word	0x46000000
 8007628:	4c742400 	.word	0x4c742400
 800762c:	4a742400 	.word	0x4a742400
 8007630:	4bbebc20 	.word	0x4bbebc20

08007634 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007634:	b480      	push	{r7}
 8007636:	b089      	sub	sp, #36	@ 0x24
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800763c:	4ba1      	ldr	r3, [pc, #644]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800763e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007640:	f003 0303 	and.w	r3, r3, #3
 8007644:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007646:	4b9f      	ldr	r3, [pc, #636]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800764a:	0d1b      	lsrs	r3, r3, #20
 800764c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007650:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007652:	4b9c      	ldr	r3, [pc, #624]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007656:	0a1b      	lsrs	r3, r3, #8
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800765e:	4b99      	ldr	r3, [pc, #612]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007662:	08db      	lsrs	r3, r3, #3
 8007664:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	fb02 f303 	mul.w	r3, r2, r3
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007676:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 8111 	beq.w	80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	2b02      	cmp	r3, #2
 8007686:	f000 8083 	beq.w	8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	2b02      	cmp	r3, #2
 800768e:	f200 80a1 	bhi.w	80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d003      	beq.n	80076a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d056      	beq.n	800774c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800769e:	e099      	b.n	80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076a0:	4b88      	ldr	r3, [pc, #544]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0320 	and.w	r3, r3, #32
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d02d      	beq.n	8007708 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076ac:	4b85      	ldr	r3, [pc, #532]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	08db      	lsrs	r3, r3, #3
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	4a84      	ldr	r2, [pc, #528]	@ (80078c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80076b8:	fa22 f303 	lsr.w	r3, r2, r3
 80076bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	ee07 3a90 	vmov	s15, r3
 80076c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	ee07 3a90 	vmov	s15, r3
 80076ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076d6:	4b7b      	ldr	r3, [pc, #492]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076de:	ee07 3a90 	vmov	s15, r3
 80076e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007702:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007706:	e087      	b.n	8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	ee07 3a90 	vmov	s15, r3
 800770e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007712:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800771a:	4b6a      	ldr	r3, [pc, #424]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800771c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800771e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007722:	ee07 3a90 	vmov	s15, r3
 8007726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800772a:	ed97 6a03 	vldr	s12, [r7, #12]
 800772e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800773a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800773e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800774a:	e065      	b.n	8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007756:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80078d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800775a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800775e:	4b59      	ldr	r3, [pc, #356]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007766:	ee07 3a90 	vmov	s15, r3
 800776a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800776e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007772:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800777a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800777e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800778a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800778e:	e043      	b.n	8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80078d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800779e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077a2:	4b48      	ldr	r3, [pc, #288]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077aa:	ee07 3a90 	vmov	s15, r3
 80077ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077d2:	e021      	b.n	8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	ee07 3a90 	vmov	s15, r3
 80077da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80078d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e6:	4b37      	ldr	r3, [pc, #220]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800780a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800780e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007816:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007818:	4b2a      	ldr	r3, [pc, #168]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800781a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781c:	0a5b      	lsrs	r3, r3, #9
 800781e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007822:	ee07 3a90 	vmov	s15, r3
 8007826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800782a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800782e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007832:	edd7 6a07 	vldr	s13, [r7, #28]
 8007836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800783a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800783e:	ee17 2a90 	vmov	r2, s15
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007846:	4b1f      	ldr	r3, [pc, #124]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784a:	0c1b      	lsrs	r3, r3, #16
 800784c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007850:	ee07 3a90 	vmov	s15, r3
 8007854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007858:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800785c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007860:	edd7 6a07 	vldr	s13, [r7, #28]
 8007864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800786c:	ee17 2a90 	vmov	r2, s15
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007874:	4b13      	ldr	r3, [pc, #76]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007878:	0e1b      	lsrs	r3, r3, #24
 800787a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800787e:	ee07 3a90 	vmov	s15, r3
 8007882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007886:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800788a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800788e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800789a:	ee17 2a90 	vmov	r2, s15
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80078a2:	e008      	b.n	80078b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	609a      	str	r2, [r3, #8]
}
 80078b6:	bf00      	nop
 80078b8:	3724      	adds	r7, #36	@ 0x24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	58024400 	.word	0x58024400
 80078c8:	03d09000 	.word	0x03d09000
 80078cc:	46000000 	.word	0x46000000
 80078d0:	4c742400 	.word	0x4c742400
 80078d4:	4a742400 	.word	0x4a742400
 80078d8:	4bbebc20 	.word	0x4bbebc20

080078dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80078dc:	b480      	push	{r7}
 80078de:	b089      	sub	sp, #36	@ 0x24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078e4:	4ba0      	ldr	r3, [pc, #640]	@ (8007b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e8:	f003 0303 	and.w	r3, r3, #3
 80078ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80078ee:	4b9e      	ldr	r3, [pc, #632]	@ (8007b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f2:	091b      	lsrs	r3, r3, #4
 80078f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80078fa:	4b9b      	ldr	r3, [pc, #620]	@ (8007b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007904:	4b98      	ldr	r3, [pc, #608]	@ (8007b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007908:	08db      	lsrs	r3, r3, #3
 800790a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	fb02 f303 	mul.w	r3, r2, r3
 8007914:	ee07 3a90 	vmov	s15, r3
 8007918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 8111 	beq.w	8007b4a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	2b02      	cmp	r3, #2
 800792c:	f000 8083 	beq.w	8007a36 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	2b02      	cmp	r3, #2
 8007934:	f200 80a1 	bhi.w	8007a7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d056      	beq.n	80079f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007944:	e099      	b.n	8007a7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007946:	4b88      	ldr	r3, [pc, #544]	@ (8007b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b00      	cmp	r3, #0
 8007950:	d02d      	beq.n	80079ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007952:	4b85      	ldr	r3, [pc, #532]	@ (8007b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	08db      	lsrs	r3, r3, #3
 8007958:	f003 0303 	and.w	r3, r3, #3
 800795c:	4a83      	ldr	r2, [pc, #524]	@ (8007b6c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800795e:	fa22 f303 	lsr.w	r3, r2, r3
 8007962:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	ee07 3a90 	vmov	s15, r3
 8007974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007978:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800797c:	4b7a      	ldr	r3, [pc, #488]	@ (8007b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800797e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007984:	ee07 3a90 	vmov	s15, r3
 8007988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800798c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007990:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007b70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007994:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007998:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800799c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80079ac:	e087      	b.n	8007abe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	ee07 3a90 	vmov	s15, r3
 80079b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007b74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80079bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079c0:	4b69      	ldr	r3, [pc, #420]	@ (8007b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c8:	ee07 3a90 	vmov	s15, r3
 80079cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80079d4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007b70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079f0:	e065      	b.n	8007abe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	ee07 3a90 	vmov	s15, r3
 80079f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079fc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007b78 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007a00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a04:	4b58      	ldr	r3, [pc, #352]	@ (8007b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a0c:	ee07 3a90 	vmov	s15, r3
 8007a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a14:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a18:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007b70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a34:	e043      	b.n	8007abe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	ee07 3a90 	vmov	s15, r3
 8007a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a40:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007b7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007a44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a48:	4b47      	ldr	r3, [pc, #284]	@ (8007b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a50:	ee07 3a90 	vmov	s15, r3
 8007a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a58:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a5c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007b70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a78:	e021      	b.n	8007abe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	ee07 3a90 	vmov	s15, r3
 8007a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a84:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007b74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a8c:	4b36      	ldr	r3, [pc, #216]	@ (8007b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a94:	ee07 3a90 	vmov	s15, r3
 8007a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aa0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007b70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007aa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ab0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ab8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007abc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007abe:	4b2a      	ldr	r3, [pc, #168]	@ (8007b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac2:	0a5b      	lsrs	r3, r3, #9
 8007ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ac8:	ee07 3a90 	vmov	s15, r3
 8007acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ad4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ad8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ae4:	ee17 2a90 	vmov	r2, s15
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007aec:	4b1e      	ldr	r3, [pc, #120]	@ (8007b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af0:	0c1b      	lsrs	r3, r3, #16
 8007af2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007af6:	ee07 3a90 	vmov	s15, r3
 8007afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b12:	ee17 2a90 	vmov	r2, s15
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007b1a:	4b13      	ldr	r3, [pc, #76]	@ (8007b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b1e:	0e1b      	lsrs	r3, r3, #24
 8007b20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b24:	ee07 3a90 	vmov	s15, r3
 8007b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b40:	ee17 2a90 	vmov	r2, s15
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007b48:	e008      	b.n	8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	609a      	str	r2, [r3, #8]
}
 8007b5c:	bf00      	nop
 8007b5e:	3724      	adds	r7, #36	@ 0x24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr
 8007b68:	58024400 	.word	0x58024400
 8007b6c:	03d09000 	.word	0x03d09000
 8007b70:	46000000 	.word	0x46000000
 8007b74:	4c742400 	.word	0x4c742400
 8007b78:	4a742400 	.word	0x4a742400
 8007b7c:	4bbebc20 	.word	0x4bbebc20

08007b80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b8e:	4b53      	ldr	r3, [pc, #332]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b92:	f003 0303 	and.w	r3, r3, #3
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d101      	bne.n	8007b9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e099      	b.n	8007cd2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b9e:	4b4f      	ldr	r3, [pc, #316]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a4e      	ldr	r2, [pc, #312]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007ba4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007baa:	f7f9 fe07 	bl	80017bc <HAL_GetTick>
 8007bae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bb0:	e008      	b.n	8007bc4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007bb2:	f7f9 fe03 	bl	80017bc <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d901      	bls.n	8007bc4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e086      	b.n	8007cd2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bc4:	4b45      	ldr	r3, [pc, #276]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1f0      	bne.n	8007bb2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007bd0:	4b42      	ldr	r3, [pc, #264]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	031b      	lsls	r3, r3, #12
 8007bde:	493f      	ldr	r1, [pc, #252]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	628b      	str	r3, [r1, #40]	@ 0x28
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	025b      	lsls	r3, r3, #9
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	431a      	orrs	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	041b      	lsls	r3, r3, #16
 8007c02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c06:	431a      	orrs	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	061b      	lsls	r3, r3, #24
 8007c10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007c14:	4931      	ldr	r1, [pc, #196]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c16:	4313      	orrs	r3, r2
 8007c18:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007c1a:	4b30      	ldr	r3, [pc, #192]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	492d      	ldr	r1, [pc, #180]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c30:	f023 0220 	bic.w	r2, r3, #32
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	4928      	ldr	r1, [pc, #160]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007c3e:	4b27      	ldr	r3, [pc, #156]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c42:	4a26      	ldr	r2, [pc, #152]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c44:	f023 0310 	bic.w	r3, r3, #16
 8007c48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c4a:	4b24      	ldr	r3, [pc, #144]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c4e:	4b24      	ldr	r3, [pc, #144]	@ (8007ce0 <RCCEx_PLL2_Config+0x160>)
 8007c50:	4013      	ands	r3, r2
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	69d2      	ldr	r2, [r2, #28]
 8007c56:	00d2      	lsls	r2, r2, #3
 8007c58:	4920      	ldr	r1, [pc, #128]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c62:	4a1e      	ldr	r2, [pc, #120]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c64:	f043 0310 	orr.w	r3, r3, #16
 8007c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d106      	bne.n	8007c7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c70:	4b1a      	ldr	r3, [pc, #104]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c74:	4a19      	ldr	r2, [pc, #100]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c7c:	e00f      	b.n	8007c9e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d106      	bne.n	8007c92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c84:	4b15      	ldr	r3, [pc, #84]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	4a14      	ldr	r2, [pc, #80]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c90:	e005      	b.n	8007c9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c92:	4b12      	ldr	r3, [pc, #72]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c96:	4a11      	ldr	r2, [pc, #68]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007ca4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007caa:	f7f9 fd87 	bl	80017bc <HAL_GetTick>
 8007cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007cb0:	e008      	b.n	8007cc4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007cb2:	f7f9 fd83 	bl	80017bc <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d901      	bls.n	8007cc4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e006      	b.n	8007cd2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007cc4:	4b05      	ldr	r3, [pc, #20]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d0f0      	beq.n	8007cb2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	58024400 	.word	0x58024400
 8007ce0:	ffff0007 	.word	0xffff0007

08007ce4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cf2:	4b53      	ldr	r3, [pc, #332]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf6:	f003 0303 	and.w	r3, r3, #3
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d101      	bne.n	8007d02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e099      	b.n	8007e36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d02:	4b4f      	ldr	r3, [pc, #316]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a4e      	ldr	r2, [pc, #312]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d0e:	f7f9 fd55 	bl	80017bc <HAL_GetTick>
 8007d12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d14:	e008      	b.n	8007d28 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d16:	f7f9 fd51 	bl	80017bc <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d901      	bls.n	8007d28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e086      	b.n	8007e36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d28:	4b45      	ldr	r3, [pc, #276]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1f0      	bne.n	8007d16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d34:	4b42      	ldr	r3, [pc, #264]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d38:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	051b      	lsls	r3, r3, #20
 8007d42:	493f      	ldr	r1, [pc, #252]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	628b      	str	r3, [r1, #40]	@ 0x28
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	3b01      	subs	r3, #1
 8007d58:	025b      	lsls	r3, r3, #9
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	041b      	lsls	r3, r3, #16
 8007d66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	061b      	lsls	r3, r3, #24
 8007d74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007d78:	4931      	ldr	r1, [pc, #196]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d7e:	4b30      	ldr	r3, [pc, #192]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	492d      	ldr	r1, [pc, #180]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d90:	4b2b      	ldr	r3, [pc, #172]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d94:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	4928      	ldr	r1, [pc, #160]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007da2:	4b27      	ldr	r3, [pc, #156]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da6:	4a26      	ldr	r2, [pc, #152]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007da8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007dae:	4b24      	ldr	r3, [pc, #144]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007db0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007db2:	4b24      	ldr	r3, [pc, #144]	@ (8007e44 <RCCEx_PLL3_Config+0x160>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	69d2      	ldr	r2, [r2, #28]
 8007dba:	00d2      	lsls	r2, r2, #3
 8007dbc:	4920      	ldr	r1, [pc, #128]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d106      	bne.n	8007de2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd8:	4a19      	ldr	r2, [pc, #100]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007dda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007dde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007de0:	e00f      	b.n	8007e02 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d106      	bne.n	8007df6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007de8:	4b15      	ldr	r3, [pc, #84]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dec:	4a14      	ldr	r2, [pc, #80]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007dee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007df2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007df4:	e005      	b.n	8007e02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007df6:	4b12      	ldr	r3, [pc, #72]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfa:	4a11      	ldr	r2, [pc, #68]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007dfc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e00:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e02:	4b0f      	ldr	r3, [pc, #60]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a0e      	ldr	r2, [pc, #56]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e0e:	f7f9 fcd5 	bl	80017bc <HAL_GetTick>
 8007e12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e14:	e008      	b.n	8007e28 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e16:	f7f9 fcd1 	bl	80017bc <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d901      	bls.n	8007e28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e006      	b.n	8007e36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e28:	4b05      	ldr	r3, [pc, #20]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d0f0      	beq.n	8007e16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	58024400 	.word	0x58024400
 8007e44:	ffff0007 	.word	0xffff0007

08007e48 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e10f      	b.n	800807a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a87      	ldr	r2, [pc, #540]	@ (8008084 <HAL_SPI_Init+0x23c>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d00f      	beq.n	8007e8a <HAL_SPI_Init+0x42>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a86      	ldr	r2, [pc, #536]	@ (8008088 <HAL_SPI_Init+0x240>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d00a      	beq.n	8007e8a <HAL_SPI_Init+0x42>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a84      	ldr	r2, [pc, #528]	@ (800808c <HAL_SPI_Init+0x244>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d005      	beq.n	8007e8a <HAL_SPI_Init+0x42>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	2b0f      	cmp	r3, #15
 8007e84:	d901      	bls.n	8007e8a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e0f7      	b.n	800807a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fc12 	bl	80086b4 <SPI_GetPacketSize>
 8007e90:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a7b      	ldr	r2, [pc, #492]	@ (8008084 <HAL_SPI_Init+0x23c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d00c      	beq.n	8007eb6 <HAL_SPI_Init+0x6e>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a79      	ldr	r2, [pc, #484]	@ (8008088 <HAL_SPI_Init+0x240>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d007      	beq.n	8007eb6 <HAL_SPI_Init+0x6e>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a78      	ldr	r2, [pc, #480]	@ (800808c <HAL_SPI_Init+0x244>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d002      	beq.n	8007eb6 <HAL_SPI_Init+0x6e>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2b08      	cmp	r3, #8
 8007eb4:	d811      	bhi.n	8007eda <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007eba:	4a72      	ldr	r2, [pc, #456]	@ (8008084 <HAL_SPI_Init+0x23c>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d009      	beq.n	8007ed4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a70      	ldr	r2, [pc, #448]	@ (8008088 <HAL_SPI_Init+0x240>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d004      	beq.n	8007ed4 <HAL_SPI_Init+0x8c>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a6f      	ldr	r2, [pc, #444]	@ (800808c <HAL_SPI_Init+0x244>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d104      	bne.n	8007ede <HAL_SPI_Init+0x96>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b10      	cmp	r3, #16
 8007ed8:	d901      	bls.n	8007ede <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e0cd      	b.n	800807a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d106      	bne.n	8007ef8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7f9 f81e 	bl	8000f34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 0201 	bic.w	r2, r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007f1a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f24:	d119      	bne.n	8007f5a <HAL_SPI_Init+0x112>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f2e:	d103      	bne.n	8007f38 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d008      	beq.n	8007f4a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10c      	bne.n	8007f5a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007f44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f48:	d107      	bne.n	8007f5a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007f58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00f      	beq.n	8007f86 <HAL_SPI_Init+0x13e>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	2b06      	cmp	r3, #6
 8007f6c:	d90b      	bls.n	8007f86 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	e007      	b.n	8007f96 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007f94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	69da      	ldr	r2, [r3, #28]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa8:	ea42 0103 	orr.w	r1, r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fea:	431a      	orrs	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ff6:	ea42 0103 	orr.w	r1, r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d113      	bne.n	8008036 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008020:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008034:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 0201 	bic.w	r2, r2, #1
 8008044:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00a      	beq.n	8008068 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	430a      	orrs	r2, r1
 8008066:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	40013000 	.word	0x40013000
 8008088:	40003800 	.word	0x40003800
 800808c:	40003c00 	.word	0x40003c00

08008090 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	603b      	str	r3, [r7, #0]
 800809c:	4613      	mov	r3, r2
 800809e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080a4:	095b      	lsrs	r3, r3, #5
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	3301      	adds	r3, #1
 80080aa:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3330      	adds	r3, #48	@ 0x30
 80080b2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080b4:	f7f9 fb82 	bl	80017bc <HAL_GetTick>
 80080b8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d001      	beq.n	80080ca <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80080c6:	2302      	movs	r3, #2
 80080c8:	e250      	b.n	800856c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <HAL_SPI_Receive+0x46>
 80080d0:	88fb      	ldrh	r3, [r7, #6]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e248      	b.n	800856c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d101      	bne.n	80080e8 <HAL_SPI_Receive+0x58>
 80080e4:	2302      	movs	r3, #2
 80080e6:	e241      	b.n	800856c <HAL_SPI_Receive+0x4dc>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2204      	movs	r2, #4
 80080f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	88fa      	ldrh	r2, [r7, #6]
 800810a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	88fa      	ldrh	r2, [r7, #6]
 8008112:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008140:	d108      	bne.n	8008154 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	e009      	b.n	8008168 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008166:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	4b95      	ldr	r3, [pc, #596]	@ (80083c4 <HAL_SPI_Receive+0x334>)
 8008170:	4013      	ands	r3, r2
 8008172:	88f9      	ldrh	r1, [r7, #6]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	6812      	ldr	r2, [r2, #0]
 8008178:	430b      	orrs	r3, r1
 800817a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f042 0201 	orr.w	r2, r2, #1
 800818a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008194:	d107      	bne.n	80081a6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	2b0f      	cmp	r3, #15
 80081ac:	d96c      	bls.n	8008288 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80081ae:	e064      	b.n	800827a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d114      	bne.n	80081f0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081ce:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80081d0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081d6:	1d1a      	adds	r2, r3, #4
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80081ee:	e044      	b.n	800827a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	8bfa      	ldrh	r2, [r7, #30]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d919      	bls.n	8008232 <HAL_SPI_Receive+0x1a2>
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d014      	beq.n	8008232 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008210:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008212:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008218:	1d1a      	adds	r2, r3, #4
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008224:	b29b      	uxth	r3, r3
 8008226:	3b01      	subs	r3, #1
 8008228:	b29a      	uxth	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008230:	e023      	b.n	800827a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008232:	f7f9 fac3 	bl	80017bc <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	429a      	cmp	r2, r3
 8008240:	d803      	bhi.n	800824a <HAL_SPI_Receive+0x1ba>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008248:	d102      	bne.n	8008250 <HAL_SPI_Receive+0x1c0>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d114      	bne.n	800827a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f000 f98f 	bl	8008574 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800825c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e178      	b.n	800856c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008280:	b29b      	uxth	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d194      	bne.n	80081b0 <HAL_SPI_Receive+0x120>
 8008286:	e15e      	b.n	8008546 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	2b07      	cmp	r3, #7
 800828e:	f240 8153 	bls.w	8008538 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008292:	e08f      	b.n	80083b4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d114      	bne.n	80082d4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082ae:	69ba      	ldr	r2, [r7, #24]
 80082b0:	8812      	ldrh	r2, [r2, #0]
 80082b2:	b292      	uxth	r2, r2
 80082b4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082ba:	1c9a      	adds	r2, r3, #2
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	3b01      	subs	r3, #1
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80082d2:	e06f      	b.n	80083b4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082da:	b29b      	uxth	r3, r3
 80082dc:	8bfa      	ldrh	r2, [r7, #30]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d924      	bls.n	800832c <HAL_SPI_Receive+0x29c>
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d01f      	beq.n	800832c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082f0:	69ba      	ldr	r2, [r7, #24]
 80082f2:	8812      	ldrh	r2, [r2, #0]
 80082f4:	b292      	uxth	r2, r2
 80082f6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082fc:	1c9a      	adds	r2, r3, #2
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008306:	69ba      	ldr	r2, [r7, #24]
 8008308:	8812      	ldrh	r2, [r2, #0]
 800830a:	b292      	uxth	r2, r2
 800830c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008312:	1c9a      	adds	r2, r3, #2
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800831e:	b29b      	uxth	r3, r3
 8008320:	3b02      	subs	r3, #2
 8008322:	b29a      	uxth	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800832a:	e043      	b.n	80083b4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008332:	b29b      	uxth	r3, r3
 8008334:	2b01      	cmp	r3, #1
 8008336:	d119      	bne.n	800836c <HAL_SPI_Receive+0x2dc>
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d014      	beq.n	800836c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008346:	69ba      	ldr	r2, [r7, #24]
 8008348:	8812      	ldrh	r2, [r2, #0]
 800834a:	b292      	uxth	r2, r2
 800834c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008352:	1c9a      	adds	r2, r3, #2
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800835e:	b29b      	uxth	r3, r3
 8008360:	3b01      	subs	r3, #1
 8008362:	b29a      	uxth	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800836a:	e023      	b.n	80083b4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800836c:	f7f9 fa26 	bl	80017bc <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	429a      	cmp	r2, r3
 800837a:	d803      	bhi.n	8008384 <HAL_SPI_Receive+0x2f4>
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008382:	d102      	bne.n	800838a <HAL_SPI_Receive+0x2fa>
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d114      	bne.n	80083b4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 f8f2 	bl	8008574 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008396:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e0db      	b.n	800856c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f47f af69 	bne.w	8008294 <HAL_SPI_Receive+0x204>
 80083c2:	e0c0      	b.n	8008546 <HAL_SPI_Receive+0x4b6>
 80083c4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d117      	bne.n	800840e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083ea:	7812      	ldrb	r2, [r2, #0]
 80083ec:	b2d2      	uxtb	r2, r2
 80083ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083f4:	1c5a      	adds	r2, r3, #1
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008400:	b29b      	uxth	r3, r3
 8008402:	3b01      	subs	r3, #1
 8008404:	b29a      	uxth	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800840c:	e094      	b.n	8008538 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008414:	b29b      	uxth	r3, r3
 8008416:	8bfa      	ldrh	r2, [r7, #30]
 8008418:	429a      	cmp	r2, r3
 800841a:	d946      	bls.n	80084aa <HAL_SPI_Receive+0x41a>
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d041      	beq.n	80084aa <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008432:	7812      	ldrb	r2, [r2, #0]
 8008434:	b2d2      	uxtb	r2, r2
 8008436:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800843c:	1c5a      	adds	r2, r3, #1
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800844e:	7812      	ldrb	r2, [r2, #0]
 8008450:	b2d2      	uxtb	r2, r2
 8008452:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800846a:	7812      	ldrb	r2, [r2, #0]
 800846c:	b2d2      	uxtb	r2, r2
 800846e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008474:	1c5a      	adds	r2, r3, #1
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008486:	7812      	ldrb	r2, [r2, #0]
 8008488:	b2d2      	uxtb	r2, r2
 800848a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800849c:	b29b      	uxth	r3, r3
 800849e:	3b04      	subs	r3, #4
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80084a8:	e046      	b.n	8008538 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d81c      	bhi.n	80084f0 <HAL_SPI_Receive+0x460>
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d017      	beq.n	80084f0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084cc:	7812      	ldrb	r2, [r2, #0]
 80084ce:	b2d2      	uxtb	r2, r2
 80084d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	3b01      	subs	r3, #1
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80084ee:	e023      	b.n	8008538 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084f0:	f7f9 f964 	bl	80017bc <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d803      	bhi.n	8008508 <HAL_SPI_Receive+0x478>
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008506:	d102      	bne.n	800850e <HAL_SPI_Receive+0x47e>
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d114      	bne.n	8008538 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 f830 	bl	8008574 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800851a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e019      	b.n	800856c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800853e:	b29b      	uxth	r3, r3
 8008540:	2b00      	cmp	r3, #0
 8008542:	f47f af41 	bne.w	80083c8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f000 f814 	bl	8008574 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e000      	b.n	800856c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800856a:	2300      	movs	r3, #0
  }
}
 800856c:	4618      	mov	r0, r3
 800856e:	3720      	adds	r7, #32
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	699a      	ldr	r2, [r3, #24]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f042 0208 	orr.w	r2, r2, #8
 8008592:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	699a      	ldr	r2, [r3, #24]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f042 0210 	orr.w	r2, r2, #16
 80085a2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f022 0201 	bic.w	r2, r2, #1
 80085b2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6919      	ldr	r1, [r3, #16]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	4b3c      	ldr	r3, [pc, #240]	@ (80086b0 <SPI_CloseTransfer+0x13c>)
 80085c0:	400b      	ands	r3, r1
 80085c2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	689a      	ldr	r2, [r3, #8]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80085d2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b04      	cmp	r3, #4
 80085de:	d014      	beq.n	800860a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f003 0320 	and.w	r3, r3, #32
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00f      	beq.n	800860a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	699a      	ldr	r2, [r3, #24]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f042 0220 	orr.w	r2, r2, #32
 8008608:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b03      	cmp	r3, #3
 8008614:	d014      	beq.n	8008640 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00f      	beq.n	8008640 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008626:	f043 0204 	orr.w	r2, r3, #4
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	699a      	ldr	r2, [r3, #24]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800863e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00f      	beq.n	800866a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008650:	f043 0201 	orr.w	r2, r3, #1
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	699a      	ldr	r2, [r3, #24]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008668:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00f      	beq.n	8008694 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800867a:	f043 0208 	orr.w	r2, r3, #8
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	699a      	ldr	r2, [r3, #24]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008692:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80086a4:	bf00      	nop
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	fffffc90 	.word	0xfffffc90

080086b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086c0:	095b      	lsrs	r3, r3, #5
 80086c2:	3301      	adds	r3, #1
 80086c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	3301      	adds	r3, #1
 80086cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	3307      	adds	r3, #7
 80086d2:	08db      	lsrs	r3, r3, #3
 80086d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	fb02 f303 	mul.w	r3, r2, r3
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b082      	sub	sp, #8
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e049      	b.n	8008790 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b00      	cmp	r3, #0
 8008706:	d106      	bne.n	8008716 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f7f8 ff3f 	bl	8001594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2202      	movs	r2, #2
 800871a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	3304      	adds	r3, #4
 8008726:	4619      	mov	r1, r3
 8008728:	4610      	mov	r0, r2
 800872a:	f000 fd59 	bl	80091e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d001      	beq.n	80087b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e054      	b.n	800885a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68da      	ldr	r2, [r3, #12]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f042 0201 	orr.w	r2, r2, #1
 80087c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a26      	ldr	r2, [pc, #152]	@ (8008868 <HAL_TIM_Base_Start_IT+0xd0>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d022      	beq.n	8008818 <HAL_TIM_Base_Start_IT+0x80>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087da:	d01d      	beq.n	8008818 <HAL_TIM_Base_Start_IT+0x80>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a22      	ldr	r2, [pc, #136]	@ (800886c <HAL_TIM_Base_Start_IT+0xd4>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d018      	beq.n	8008818 <HAL_TIM_Base_Start_IT+0x80>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a21      	ldr	r2, [pc, #132]	@ (8008870 <HAL_TIM_Base_Start_IT+0xd8>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d013      	beq.n	8008818 <HAL_TIM_Base_Start_IT+0x80>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a1f      	ldr	r2, [pc, #124]	@ (8008874 <HAL_TIM_Base_Start_IT+0xdc>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d00e      	beq.n	8008818 <HAL_TIM_Base_Start_IT+0x80>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a1e      	ldr	r2, [pc, #120]	@ (8008878 <HAL_TIM_Base_Start_IT+0xe0>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d009      	beq.n	8008818 <HAL_TIM_Base_Start_IT+0x80>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a1c      	ldr	r2, [pc, #112]	@ (800887c <HAL_TIM_Base_Start_IT+0xe4>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d004      	beq.n	8008818 <HAL_TIM_Base_Start_IT+0x80>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a1b      	ldr	r2, [pc, #108]	@ (8008880 <HAL_TIM_Base_Start_IT+0xe8>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d115      	bne.n	8008844 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	689a      	ldr	r2, [r3, #8]
 800881e:	4b19      	ldr	r3, [pc, #100]	@ (8008884 <HAL_TIM_Base_Start_IT+0xec>)
 8008820:	4013      	ands	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2b06      	cmp	r3, #6
 8008828:	d015      	beq.n	8008856 <HAL_TIM_Base_Start_IT+0xbe>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008830:	d011      	beq.n	8008856 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f042 0201 	orr.w	r2, r2, #1
 8008840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008842:	e008      	b.n	8008856 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f042 0201 	orr.w	r2, r2, #1
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	e000      	b.n	8008858 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008856:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	40010000 	.word	0x40010000
 800886c:	40000400 	.word	0x40000400
 8008870:	40000800 	.word	0x40000800
 8008874:	40000c00 	.word	0x40000c00
 8008878:	40010400 	.word	0x40010400
 800887c:	40001800 	.word	0x40001800
 8008880:	40014000 	.word	0x40014000
 8008884:	00010007 	.word	0x00010007

08008888 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d101      	bne.n	800889a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e049      	b.n	800892e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d106      	bne.n	80088b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f841 	bl	8008936 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2202      	movs	r2, #2
 80088b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	3304      	adds	r3, #4
 80088c4:	4619      	mov	r1, r3
 80088c6:	4610      	mov	r0, r2
 80088c8:	f000 fc8a 	bl	80091e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800893e:	bf00      	nop
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
	...

0800894c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d109      	bne.n	8008970 <HAL_TIM_PWM_Start+0x24>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b01      	cmp	r3, #1
 8008966:	bf14      	ite	ne
 8008968:	2301      	movne	r3, #1
 800896a:	2300      	moveq	r3, #0
 800896c:	b2db      	uxtb	r3, r3
 800896e:	e03c      	b.n	80089ea <HAL_TIM_PWM_Start+0x9e>
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2b04      	cmp	r3, #4
 8008974:	d109      	bne.n	800898a <HAL_TIM_PWM_Start+0x3e>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b01      	cmp	r3, #1
 8008980:	bf14      	ite	ne
 8008982:	2301      	movne	r3, #1
 8008984:	2300      	moveq	r3, #0
 8008986:	b2db      	uxtb	r3, r3
 8008988:	e02f      	b.n	80089ea <HAL_TIM_PWM_Start+0x9e>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2b08      	cmp	r3, #8
 800898e:	d109      	bne.n	80089a4 <HAL_TIM_PWM_Start+0x58>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b01      	cmp	r3, #1
 800899a:	bf14      	ite	ne
 800899c:	2301      	movne	r3, #1
 800899e:	2300      	moveq	r3, #0
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	e022      	b.n	80089ea <HAL_TIM_PWM_Start+0x9e>
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2b0c      	cmp	r3, #12
 80089a8:	d109      	bne.n	80089be <HAL_TIM_PWM_Start+0x72>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	bf14      	ite	ne
 80089b6:	2301      	movne	r3, #1
 80089b8:	2300      	moveq	r3, #0
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	e015      	b.n	80089ea <HAL_TIM_PWM_Start+0x9e>
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	2b10      	cmp	r3, #16
 80089c2:	d109      	bne.n	80089d8 <HAL_TIM_PWM_Start+0x8c>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	bf14      	ite	ne
 80089d0:	2301      	movne	r3, #1
 80089d2:	2300      	moveq	r3, #0
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	e008      	b.n	80089ea <HAL_TIM_PWM_Start+0x9e>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	bf14      	ite	ne
 80089e4:	2301      	movne	r3, #1
 80089e6:	2300      	moveq	r3, #0
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e0a1      	b.n	8008b36 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d104      	bne.n	8008a02 <HAL_TIM_PWM_Start+0xb6>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2202      	movs	r2, #2
 80089fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a00:	e023      	b.n	8008a4a <HAL_TIM_PWM_Start+0xfe>
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b04      	cmp	r3, #4
 8008a06:	d104      	bne.n	8008a12 <HAL_TIM_PWM_Start+0xc6>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a10:	e01b      	b.n	8008a4a <HAL_TIM_PWM_Start+0xfe>
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	2b08      	cmp	r3, #8
 8008a16:	d104      	bne.n	8008a22 <HAL_TIM_PWM_Start+0xd6>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a20:	e013      	b.n	8008a4a <HAL_TIM_PWM_Start+0xfe>
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2b0c      	cmp	r3, #12
 8008a26:	d104      	bne.n	8008a32 <HAL_TIM_PWM_Start+0xe6>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a30:	e00b      	b.n	8008a4a <HAL_TIM_PWM_Start+0xfe>
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2b10      	cmp	r3, #16
 8008a36:	d104      	bne.n	8008a42 <HAL_TIM_PWM_Start+0xf6>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a40:	e003      	b.n	8008a4a <HAL_TIM_PWM_Start+0xfe>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2202      	movs	r2, #2
 8008a46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 ffde 	bl	8009a14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a38      	ldr	r2, [pc, #224]	@ (8008b40 <HAL_TIM_PWM_Start+0x1f4>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d013      	beq.n	8008a8a <HAL_TIM_PWM_Start+0x13e>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a37      	ldr	r2, [pc, #220]	@ (8008b44 <HAL_TIM_PWM_Start+0x1f8>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d00e      	beq.n	8008a8a <HAL_TIM_PWM_Start+0x13e>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a35      	ldr	r2, [pc, #212]	@ (8008b48 <HAL_TIM_PWM_Start+0x1fc>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d009      	beq.n	8008a8a <HAL_TIM_PWM_Start+0x13e>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a34      	ldr	r2, [pc, #208]	@ (8008b4c <HAL_TIM_PWM_Start+0x200>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d004      	beq.n	8008a8a <HAL_TIM_PWM_Start+0x13e>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a32      	ldr	r2, [pc, #200]	@ (8008b50 <HAL_TIM_PWM_Start+0x204>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d101      	bne.n	8008a8e <HAL_TIM_PWM_Start+0x142>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e000      	b.n	8008a90 <HAL_TIM_PWM_Start+0x144>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d007      	beq.n	8008aa4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008aa2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a25      	ldr	r2, [pc, #148]	@ (8008b40 <HAL_TIM_PWM_Start+0x1f4>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d022      	beq.n	8008af4 <HAL_TIM_PWM_Start+0x1a8>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ab6:	d01d      	beq.n	8008af4 <HAL_TIM_PWM_Start+0x1a8>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a25      	ldr	r2, [pc, #148]	@ (8008b54 <HAL_TIM_PWM_Start+0x208>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d018      	beq.n	8008af4 <HAL_TIM_PWM_Start+0x1a8>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a24      	ldr	r2, [pc, #144]	@ (8008b58 <HAL_TIM_PWM_Start+0x20c>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d013      	beq.n	8008af4 <HAL_TIM_PWM_Start+0x1a8>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a22      	ldr	r2, [pc, #136]	@ (8008b5c <HAL_TIM_PWM_Start+0x210>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d00e      	beq.n	8008af4 <HAL_TIM_PWM_Start+0x1a8>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a1a      	ldr	r2, [pc, #104]	@ (8008b44 <HAL_TIM_PWM_Start+0x1f8>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d009      	beq.n	8008af4 <HAL_TIM_PWM_Start+0x1a8>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8008b60 <HAL_TIM_PWM_Start+0x214>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d004      	beq.n	8008af4 <HAL_TIM_PWM_Start+0x1a8>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a16      	ldr	r2, [pc, #88]	@ (8008b48 <HAL_TIM_PWM_Start+0x1fc>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d115      	bne.n	8008b20 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689a      	ldr	r2, [r3, #8]
 8008afa:	4b1a      	ldr	r3, [pc, #104]	@ (8008b64 <HAL_TIM_PWM_Start+0x218>)
 8008afc:	4013      	ands	r3, r2
 8008afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b06      	cmp	r3, #6
 8008b04:	d015      	beq.n	8008b32 <HAL_TIM_PWM_Start+0x1e6>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b0c:	d011      	beq.n	8008b32 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f042 0201 	orr.w	r2, r2, #1
 8008b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b1e:	e008      	b.n	8008b32 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f042 0201 	orr.w	r2, r2, #1
 8008b2e:	601a      	str	r2, [r3, #0]
 8008b30:	e000      	b.n	8008b34 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	40010000 	.word	0x40010000
 8008b44:	40010400 	.word	0x40010400
 8008b48:	40014000 	.word	0x40014000
 8008b4c:	40014400 	.word	0x40014400
 8008b50:	40014800 	.word	0x40014800
 8008b54:	40000400 	.word	0x40000400
 8008b58:	40000800 	.word	0x40000800
 8008b5c:	40000c00 	.word	0x40000c00
 8008b60:	40001800 	.word	0x40001800
 8008b64:	00010007 	.word	0x00010007

08008b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	f003 0302 	and.w	r3, r3, #2
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d020      	beq.n	8008bcc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f003 0302 	and.w	r3, r3, #2
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d01b      	beq.n	8008bcc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f06f 0202 	mvn.w	r2, #2
 8008b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	f003 0303 	and.w	r3, r3, #3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 faf6 	bl	80091a4 <HAL_TIM_IC_CaptureCallback>
 8008bb8:	e005      	b.n	8008bc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fae8 	bl	8009190 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 faf9 	bl	80091b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	f003 0304 	and.w	r3, r3, #4
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d020      	beq.n	8008c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f003 0304 	and.w	r3, r3, #4
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d01b      	beq.n	8008c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f06f 0204 	mvn.w	r2, #4
 8008be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2202      	movs	r2, #2
 8008bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fad0 	bl	80091a4 <HAL_TIM_IC_CaptureCallback>
 8008c04:	e005      	b.n	8008c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fac2 	bl	8009190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 fad3 	bl	80091b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	f003 0308 	and.w	r3, r3, #8
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d020      	beq.n	8008c64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f003 0308 	and.w	r3, r3, #8
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d01b      	beq.n	8008c64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f06f 0208 	mvn.w	r2, #8
 8008c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2204      	movs	r2, #4
 8008c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	f003 0303 	and.w	r3, r3, #3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 faaa 	bl	80091a4 <HAL_TIM_IC_CaptureCallback>
 8008c50:	e005      	b.n	8008c5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fa9c 	bl	8009190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 faad 	bl	80091b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	f003 0310 	and.w	r3, r3, #16
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d020      	beq.n	8008cb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f003 0310 	and.w	r3, r3, #16
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d01b      	beq.n	8008cb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f06f 0210 	mvn.w	r2, #16
 8008c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2208      	movs	r2, #8
 8008c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fa84 	bl	80091a4 <HAL_TIM_IC_CaptureCallback>
 8008c9c:	e005      	b.n	8008caa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fa76 	bl	8009190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fa87 	bl	80091b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00c      	beq.n	8008cd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f003 0301 	and.w	r3, r3, #1
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d007      	beq.n	8008cd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f06f 0201 	mvn.w	r2, #1
 8008ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7f8 f86a 	bl	8000da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d104      	bne.n	8008ce8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00c      	beq.n	8008d02 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d007      	beq.n	8008d02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 ffc5 	bl	8009c8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00c      	beq.n	8008d26 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d007      	beq.n	8008d26 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 ffbd 	bl	8009ca0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00c      	beq.n	8008d4a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d007      	beq.n	8008d4a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fa41 	bl	80091cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	f003 0320 	and.w	r3, r3, #32
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00c      	beq.n	8008d6e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f003 0320 	and.w	r3, r3, #32
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d007      	beq.n	8008d6e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f06f 0220 	mvn.w	r2, #32
 8008d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 ff85 	bl	8009c78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d6e:	bf00      	nop
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
	...

08008d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d101      	bne.n	8008d96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d92:	2302      	movs	r3, #2
 8008d94:	e0ff      	b.n	8008f96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b14      	cmp	r3, #20
 8008da2:	f200 80f0 	bhi.w	8008f86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008da6:	a201      	add	r2, pc, #4	@ (adr r2, 8008dac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dac:	08008e01 	.word	0x08008e01
 8008db0:	08008f87 	.word	0x08008f87
 8008db4:	08008f87 	.word	0x08008f87
 8008db8:	08008f87 	.word	0x08008f87
 8008dbc:	08008e41 	.word	0x08008e41
 8008dc0:	08008f87 	.word	0x08008f87
 8008dc4:	08008f87 	.word	0x08008f87
 8008dc8:	08008f87 	.word	0x08008f87
 8008dcc:	08008e83 	.word	0x08008e83
 8008dd0:	08008f87 	.word	0x08008f87
 8008dd4:	08008f87 	.word	0x08008f87
 8008dd8:	08008f87 	.word	0x08008f87
 8008ddc:	08008ec3 	.word	0x08008ec3
 8008de0:	08008f87 	.word	0x08008f87
 8008de4:	08008f87 	.word	0x08008f87
 8008de8:	08008f87 	.word	0x08008f87
 8008dec:	08008f05 	.word	0x08008f05
 8008df0:	08008f87 	.word	0x08008f87
 8008df4:	08008f87 	.word	0x08008f87
 8008df8:	08008f87 	.word	0x08008f87
 8008dfc:	08008f45 	.word	0x08008f45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68b9      	ldr	r1, [r7, #8]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 fa90 	bl	800932c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	699a      	ldr	r2, [r3, #24]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f042 0208 	orr.w	r2, r2, #8
 8008e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	699a      	ldr	r2, [r3, #24]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f022 0204 	bic.w	r2, r2, #4
 8008e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6999      	ldr	r1, [r3, #24]
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	691a      	ldr	r2, [r3, #16]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	619a      	str	r2, [r3, #24]
      break;
 8008e3e:	e0a5      	b.n	8008f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68b9      	ldr	r1, [r7, #8]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 fb00 	bl	800944c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	699a      	ldr	r2, [r3, #24]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	699a      	ldr	r2, [r3, #24]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6999      	ldr	r1, [r3, #24]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	021a      	lsls	r2, r3, #8
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	430a      	orrs	r2, r1
 8008e7e:	619a      	str	r2, [r3, #24]
      break;
 8008e80:	e084      	b.n	8008f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68b9      	ldr	r1, [r7, #8]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 fb69 	bl	8009560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	69da      	ldr	r2, [r3, #28]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f042 0208 	orr.w	r2, r2, #8
 8008e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	69da      	ldr	r2, [r3, #28]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f022 0204 	bic.w	r2, r2, #4
 8008eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	69d9      	ldr	r1, [r3, #28]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	691a      	ldr	r2, [r3, #16]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	430a      	orrs	r2, r1
 8008ebe:	61da      	str	r2, [r3, #28]
      break;
 8008ec0:	e064      	b.n	8008f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68b9      	ldr	r1, [r7, #8]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f000 fbd1 	bl	8009670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	69da      	ldr	r2, [r3, #28]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008edc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	69da      	ldr	r2, [r3, #28]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	69d9      	ldr	r1, [r3, #28]
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	021a      	lsls	r2, r3, #8
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	430a      	orrs	r2, r1
 8008f00:	61da      	str	r2, [r3, #28]
      break;
 8008f02:	e043      	b.n	8008f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68b9      	ldr	r1, [r7, #8]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fc1a 	bl	8009744 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f042 0208 	orr.w	r2, r2, #8
 8008f1e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f022 0204 	bic.w	r2, r2, #4
 8008f2e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	691a      	ldr	r2, [r3, #16]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	430a      	orrs	r2, r1
 8008f40:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008f42:	e023      	b.n	8008f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68b9      	ldr	r1, [r7, #8]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 fc5e 	bl	800980c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	021a      	lsls	r2, r3, #8
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	430a      	orrs	r2, r1
 8008f82:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008f84:	e002      	b.n	8008f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	75fb      	strb	r3, [r7, #23]
      break;
 8008f8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop

08008fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d101      	bne.n	8008fbc <HAL_TIM_ConfigClockSource+0x1c>
 8008fb8:	2302      	movs	r3, #2
 8008fba:	e0dc      	b.n	8009176 <HAL_TIM_ConfigClockSource+0x1d6>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8009180 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008fd8:	4013      	ands	r3, r2
 8008fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fe2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a64      	ldr	r2, [pc, #400]	@ (8009184 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	f000 80a9 	beq.w	800914a <HAL_TIM_ConfigClockSource+0x1aa>
 8008ff8:	4a62      	ldr	r2, [pc, #392]	@ (8009184 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	f200 80ae 	bhi.w	800915c <HAL_TIM_ConfigClockSource+0x1bc>
 8009000:	4a61      	ldr	r2, [pc, #388]	@ (8009188 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009002:	4293      	cmp	r3, r2
 8009004:	f000 80a1 	beq.w	800914a <HAL_TIM_ConfigClockSource+0x1aa>
 8009008:	4a5f      	ldr	r2, [pc, #380]	@ (8009188 <HAL_TIM_ConfigClockSource+0x1e8>)
 800900a:	4293      	cmp	r3, r2
 800900c:	f200 80a6 	bhi.w	800915c <HAL_TIM_ConfigClockSource+0x1bc>
 8009010:	4a5e      	ldr	r2, [pc, #376]	@ (800918c <HAL_TIM_ConfigClockSource+0x1ec>)
 8009012:	4293      	cmp	r3, r2
 8009014:	f000 8099 	beq.w	800914a <HAL_TIM_ConfigClockSource+0x1aa>
 8009018:	4a5c      	ldr	r2, [pc, #368]	@ (800918c <HAL_TIM_ConfigClockSource+0x1ec>)
 800901a:	4293      	cmp	r3, r2
 800901c:	f200 809e 	bhi.w	800915c <HAL_TIM_ConfigClockSource+0x1bc>
 8009020:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009024:	f000 8091 	beq.w	800914a <HAL_TIM_ConfigClockSource+0x1aa>
 8009028:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800902c:	f200 8096 	bhi.w	800915c <HAL_TIM_ConfigClockSource+0x1bc>
 8009030:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009034:	f000 8089 	beq.w	800914a <HAL_TIM_ConfigClockSource+0x1aa>
 8009038:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800903c:	f200 808e 	bhi.w	800915c <HAL_TIM_ConfigClockSource+0x1bc>
 8009040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009044:	d03e      	beq.n	80090c4 <HAL_TIM_ConfigClockSource+0x124>
 8009046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800904a:	f200 8087 	bhi.w	800915c <HAL_TIM_ConfigClockSource+0x1bc>
 800904e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009052:	f000 8086 	beq.w	8009162 <HAL_TIM_ConfigClockSource+0x1c2>
 8009056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800905a:	d87f      	bhi.n	800915c <HAL_TIM_ConfigClockSource+0x1bc>
 800905c:	2b70      	cmp	r3, #112	@ 0x70
 800905e:	d01a      	beq.n	8009096 <HAL_TIM_ConfigClockSource+0xf6>
 8009060:	2b70      	cmp	r3, #112	@ 0x70
 8009062:	d87b      	bhi.n	800915c <HAL_TIM_ConfigClockSource+0x1bc>
 8009064:	2b60      	cmp	r3, #96	@ 0x60
 8009066:	d050      	beq.n	800910a <HAL_TIM_ConfigClockSource+0x16a>
 8009068:	2b60      	cmp	r3, #96	@ 0x60
 800906a:	d877      	bhi.n	800915c <HAL_TIM_ConfigClockSource+0x1bc>
 800906c:	2b50      	cmp	r3, #80	@ 0x50
 800906e:	d03c      	beq.n	80090ea <HAL_TIM_ConfigClockSource+0x14a>
 8009070:	2b50      	cmp	r3, #80	@ 0x50
 8009072:	d873      	bhi.n	800915c <HAL_TIM_ConfigClockSource+0x1bc>
 8009074:	2b40      	cmp	r3, #64	@ 0x40
 8009076:	d058      	beq.n	800912a <HAL_TIM_ConfigClockSource+0x18a>
 8009078:	2b40      	cmp	r3, #64	@ 0x40
 800907a:	d86f      	bhi.n	800915c <HAL_TIM_ConfigClockSource+0x1bc>
 800907c:	2b30      	cmp	r3, #48	@ 0x30
 800907e:	d064      	beq.n	800914a <HAL_TIM_ConfigClockSource+0x1aa>
 8009080:	2b30      	cmp	r3, #48	@ 0x30
 8009082:	d86b      	bhi.n	800915c <HAL_TIM_ConfigClockSource+0x1bc>
 8009084:	2b20      	cmp	r3, #32
 8009086:	d060      	beq.n	800914a <HAL_TIM_ConfigClockSource+0x1aa>
 8009088:	2b20      	cmp	r3, #32
 800908a:	d867      	bhi.n	800915c <HAL_TIM_ConfigClockSource+0x1bc>
 800908c:	2b00      	cmp	r3, #0
 800908e:	d05c      	beq.n	800914a <HAL_TIM_ConfigClockSource+0x1aa>
 8009090:	2b10      	cmp	r3, #16
 8009092:	d05a      	beq.n	800914a <HAL_TIM_ConfigClockSource+0x1aa>
 8009094:	e062      	b.n	800915c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090a6:	f000 fc95 	bl	80099d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80090b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	609a      	str	r2, [r3, #8]
      break;
 80090c2:	e04f      	b.n	8009164 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090d4:	f000 fc7e 	bl	80099d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689a      	ldr	r2, [r3, #8]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090e6:	609a      	str	r2, [r3, #8]
      break;
 80090e8:	e03c      	b.n	8009164 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090f6:	461a      	mov	r2, r3
 80090f8:	f000 fbee 	bl	80098d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2150      	movs	r1, #80	@ 0x50
 8009102:	4618      	mov	r0, r3
 8009104:	f000 fc48 	bl	8009998 <TIM_ITRx_SetConfig>
      break;
 8009108:	e02c      	b.n	8009164 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009116:	461a      	mov	r2, r3
 8009118:	f000 fc0d 	bl	8009936 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2160      	movs	r1, #96	@ 0x60
 8009122:	4618      	mov	r0, r3
 8009124:	f000 fc38 	bl	8009998 <TIM_ITRx_SetConfig>
      break;
 8009128:	e01c      	b.n	8009164 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009136:	461a      	mov	r2, r3
 8009138:	f000 fbce 	bl	80098d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2140      	movs	r1, #64	@ 0x40
 8009142:	4618      	mov	r0, r3
 8009144:	f000 fc28 	bl	8009998 <TIM_ITRx_SetConfig>
      break;
 8009148:	e00c      	b.n	8009164 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4619      	mov	r1, r3
 8009154:	4610      	mov	r0, r2
 8009156:	f000 fc1f 	bl	8009998 <TIM_ITRx_SetConfig>
      break;
 800915a:	e003      	b.n	8009164 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	73fb      	strb	r3, [r7, #15]
      break;
 8009160:	e000      	b.n	8009164 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009174:	7bfb      	ldrb	r3, [r7, #15]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	ffceff88 	.word	0xffceff88
 8009184:	00100040 	.word	0x00100040
 8009188:	00100030 	.word	0x00100030
 800918c:	00100020 	.word	0x00100020

08009190 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a46      	ldr	r2, [pc, #280]	@ (800930c <TIM_Base_SetConfig+0x12c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d013      	beq.n	8009220 <TIM_Base_SetConfig+0x40>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091fe:	d00f      	beq.n	8009220 <TIM_Base_SetConfig+0x40>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a43      	ldr	r2, [pc, #268]	@ (8009310 <TIM_Base_SetConfig+0x130>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d00b      	beq.n	8009220 <TIM_Base_SetConfig+0x40>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a42      	ldr	r2, [pc, #264]	@ (8009314 <TIM_Base_SetConfig+0x134>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d007      	beq.n	8009220 <TIM_Base_SetConfig+0x40>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a41      	ldr	r2, [pc, #260]	@ (8009318 <TIM_Base_SetConfig+0x138>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d003      	beq.n	8009220 <TIM_Base_SetConfig+0x40>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a40      	ldr	r2, [pc, #256]	@ (800931c <TIM_Base_SetConfig+0x13c>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d108      	bne.n	8009232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	4313      	orrs	r3, r2
 8009230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a35      	ldr	r2, [pc, #212]	@ (800930c <TIM_Base_SetConfig+0x12c>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d01f      	beq.n	800927a <TIM_Base_SetConfig+0x9a>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009240:	d01b      	beq.n	800927a <TIM_Base_SetConfig+0x9a>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a32      	ldr	r2, [pc, #200]	@ (8009310 <TIM_Base_SetConfig+0x130>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d017      	beq.n	800927a <TIM_Base_SetConfig+0x9a>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a31      	ldr	r2, [pc, #196]	@ (8009314 <TIM_Base_SetConfig+0x134>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d013      	beq.n	800927a <TIM_Base_SetConfig+0x9a>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a30      	ldr	r2, [pc, #192]	@ (8009318 <TIM_Base_SetConfig+0x138>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d00f      	beq.n	800927a <TIM_Base_SetConfig+0x9a>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a2f      	ldr	r2, [pc, #188]	@ (800931c <TIM_Base_SetConfig+0x13c>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d00b      	beq.n	800927a <TIM_Base_SetConfig+0x9a>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a2e      	ldr	r2, [pc, #184]	@ (8009320 <TIM_Base_SetConfig+0x140>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d007      	beq.n	800927a <TIM_Base_SetConfig+0x9a>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a2d      	ldr	r2, [pc, #180]	@ (8009324 <TIM_Base_SetConfig+0x144>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d003      	beq.n	800927a <TIM_Base_SetConfig+0x9a>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a2c      	ldr	r2, [pc, #176]	@ (8009328 <TIM_Base_SetConfig+0x148>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d108      	bne.n	800928c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	4313      	orrs	r3, r2
 800928a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	4313      	orrs	r3, r2
 8009298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a16      	ldr	r2, [pc, #88]	@ (800930c <TIM_Base_SetConfig+0x12c>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d00f      	beq.n	80092d8 <TIM_Base_SetConfig+0xf8>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a18      	ldr	r2, [pc, #96]	@ (800931c <TIM_Base_SetConfig+0x13c>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d00b      	beq.n	80092d8 <TIM_Base_SetConfig+0xf8>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a17      	ldr	r2, [pc, #92]	@ (8009320 <TIM_Base_SetConfig+0x140>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d007      	beq.n	80092d8 <TIM_Base_SetConfig+0xf8>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a16      	ldr	r2, [pc, #88]	@ (8009324 <TIM_Base_SetConfig+0x144>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d003      	beq.n	80092d8 <TIM_Base_SetConfig+0xf8>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a15      	ldr	r2, [pc, #84]	@ (8009328 <TIM_Base_SetConfig+0x148>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d103      	bne.n	80092e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	691a      	ldr	r2, [r3, #16]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d105      	bne.n	80092fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	f023 0201 	bic.w	r2, r3, #1
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	611a      	str	r2, [r3, #16]
  }
}
 80092fe:	bf00      	nop
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	40010000 	.word	0x40010000
 8009310:	40000400 	.word	0x40000400
 8009314:	40000800 	.word	0x40000800
 8009318:	40000c00 	.word	0x40000c00
 800931c:	40010400 	.word	0x40010400
 8009320:	40014000 	.word	0x40014000
 8009324:	40014400 	.word	0x40014400
 8009328:	40014800 	.word	0x40014800

0800932c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800932c:	b480      	push	{r7}
 800932e:	b087      	sub	sp, #28
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a1b      	ldr	r3, [r3, #32]
 800933a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a1b      	ldr	r3, [r3, #32]
 8009340:	f023 0201 	bic.w	r2, r3, #1
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	4b37      	ldr	r3, [pc, #220]	@ (8009434 <TIM_OC1_SetConfig+0x108>)
 8009358:	4013      	ands	r3, r2
 800935a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f023 0303 	bic.w	r3, r3, #3
 8009362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	4313      	orrs	r3, r2
 800936c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f023 0302 	bic.w	r3, r3, #2
 8009374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	4313      	orrs	r3, r2
 800937e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a2d      	ldr	r2, [pc, #180]	@ (8009438 <TIM_OC1_SetConfig+0x10c>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d00f      	beq.n	80093a8 <TIM_OC1_SetConfig+0x7c>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a2c      	ldr	r2, [pc, #176]	@ (800943c <TIM_OC1_SetConfig+0x110>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d00b      	beq.n	80093a8 <TIM_OC1_SetConfig+0x7c>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a2b      	ldr	r2, [pc, #172]	@ (8009440 <TIM_OC1_SetConfig+0x114>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d007      	beq.n	80093a8 <TIM_OC1_SetConfig+0x7c>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a2a      	ldr	r2, [pc, #168]	@ (8009444 <TIM_OC1_SetConfig+0x118>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d003      	beq.n	80093a8 <TIM_OC1_SetConfig+0x7c>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a29      	ldr	r2, [pc, #164]	@ (8009448 <TIM_OC1_SetConfig+0x11c>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d10c      	bne.n	80093c2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	f023 0308 	bic.w	r3, r3, #8
 80093ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	697a      	ldr	r2, [r7, #20]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f023 0304 	bic.w	r3, r3, #4
 80093c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a1c      	ldr	r2, [pc, #112]	@ (8009438 <TIM_OC1_SetConfig+0x10c>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d00f      	beq.n	80093ea <TIM_OC1_SetConfig+0xbe>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a1b      	ldr	r2, [pc, #108]	@ (800943c <TIM_OC1_SetConfig+0x110>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d00b      	beq.n	80093ea <TIM_OC1_SetConfig+0xbe>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a1a      	ldr	r2, [pc, #104]	@ (8009440 <TIM_OC1_SetConfig+0x114>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d007      	beq.n	80093ea <TIM_OC1_SetConfig+0xbe>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a19      	ldr	r2, [pc, #100]	@ (8009444 <TIM_OC1_SetConfig+0x118>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d003      	beq.n	80093ea <TIM_OC1_SetConfig+0xbe>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a18      	ldr	r2, [pc, #96]	@ (8009448 <TIM_OC1_SetConfig+0x11c>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d111      	bne.n	800940e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80093f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	4313      	orrs	r3, r2
 8009402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	4313      	orrs	r3, r2
 800940c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	685a      	ldr	r2, [r3, #4]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	621a      	str	r2, [r3, #32]
}
 8009428:	bf00      	nop
 800942a:	371c      	adds	r7, #28
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr
 8009434:	fffeff8f 	.word	0xfffeff8f
 8009438:	40010000 	.word	0x40010000
 800943c:	40010400 	.word	0x40010400
 8009440:	40014000 	.word	0x40014000
 8009444:	40014400 	.word	0x40014400
 8009448:	40014800 	.word	0x40014800

0800944c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800944c:	b480      	push	{r7}
 800944e:	b087      	sub	sp, #28
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a1b      	ldr	r3, [r3, #32]
 800945a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a1b      	ldr	r3, [r3, #32]
 8009460:	f023 0210 	bic.w	r2, r3, #16
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	4b34      	ldr	r3, [pc, #208]	@ (8009548 <TIM_OC2_SetConfig+0xfc>)
 8009478:	4013      	ands	r3, r2
 800947a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	021b      	lsls	r3, r3, #8
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	4313      	orrs	r3, r2
 800948e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f023 0320 	bic.w	r3, r3, #32
 8009496:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	011b      	lsls	r3, r3, #4
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a29      	ldr	r2, [pc, #164]	@ (800954c <TIM_OC2_SetConfig+0x100>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d003      	beq.n	80094b4 <TIM_OC2_SetConfig+0x68>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a28      	ldr	r2, [pc, #160]	@ (8009550 <TIM_OC2_SetConfig+0x104>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d10d      	bne.n	80094d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	011b      	lsls	r3, r3, #4
 80094c2:	697a      	ldr	r2, [r7, #20]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a1e      	ldr	r2, [pc, #120]	@ (800954c <TIM_OC2_SetConfig+0x100>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d00f      	beq.n	80094f8 <TIM_OC2_SetConfig+0xac>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a1d      	ldr	r2, [pc, #116]	@ (8009550 <TIM_OC2_SetConfig+0x104>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d00b      	beq.n	80094f8 <TIM_OC2_SetConfig+0xac>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a1c      	ldr	r2, [pc, #112]	@ (8009554 <TIM_OC2_SetConfig+0x108>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d007      	beq.n	80094f8 <TIM_OC2_SetConfig+0xac>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a1b      	ldr	r2, [pc, #108]	@ (8009558 <TIM_OC2_SetConfig+0x10c>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d003      	beq.n	80094f8 <TIM_OC2_SetConfig+0xac>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a1a      	ldr	r2, [pc, #104]	@ (800955c <TIM_OC2_SetConfig+0x110>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d113      	bne.n	8009520 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80094fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009506:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	695b      	ldr	r3, [r3, #20]
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	4313      	orrs	r3, r2
 8009512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	693a      	ldr	r2, [r7, #16]
 800951c:	4313      	orrs	r3, r2
 800951e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	693a      	ldr	r2, [r7, #16]
 8009524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	621a      	str	r2, [r3, #32]
}
 800953a:	bf00      	nop
 800953c:	371c      	adds	r7, #28
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	feff8fff 	.word	0xfeff8fff
 800954c:	40010000 	.word	0x40010000
 8009550:	40010400 	.word	0x40010400
 8009554:	40014000 	.word	0x40014000
 8009558:	40014400 	.word	0x40014400
 800955c:	40014800 	.word	0x40014800

08009560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009560:	b480      	push	{r7}
 8009562:	b087      	sub	sp, #28
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6a1b      	ldr	r3, [r3, #32]
 8009574:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	69db      	ldr	r3, [r3, #28]
 8009586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	4b33      	ldr	r3, [pc, #204]	@ (8009658 <TIM_OC3_SetConfig+0xf8>)
 800958c:	4013      	ands	r3, r2
 800958e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f023 0303 	bic.w	r3, r3, #3
 8009596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	4313      	orrs	r3, r2
 80095a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80095a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	021b      	lsls	r3, r3, #8
 80095b0:	697a      	ldr	r2, [r7, #20]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a28      	ldr	r2, [pc, #160]	@ (800965c <TIM_OC3_SetConfig+0xfc>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d003      	beq.n	80095c6 <TIM_OC3_SetConfig+0x66>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a27      	ldr	r2, [pc, #156]	@ (8009660 <TIM_OC3_SetConfig+0x100>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d10d      	bne.n	80095e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	021b      	lsls	r3, r3, #8
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a1d      	ldr	r2, [pc, #116]	@ (800965c <TIM_OC3_SetConfig+0xfc>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d00f      	beq.n	800960a <TIM_OC3_SetConfig+0xaa>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a1c      	ldr	r2, [pc, #112]	@ (8009660 <TIM_OC3_SetConfig+0x100>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d00b      	beq.n	800960a <TIM_OC3_SetConfig+0xaa>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a1b      	ldr	r2, [pc, #108]	@ (8009664 <TIM_OC3_SetConfig+0x104>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d007      	beq.n	800960a <TIM_OC3_SetConfig+0xaa>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a1a      	ldr	r2, [pc, #104]	@ (8009668 <TIM_OC3_SetConfig+0x108>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d003      	beq.n	800960a <TIM_OC3_SetConfig+0xaa>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a19      	ldr	r2, [pc, #100]	@ (800966c <TIM_OC3_SetConfig+0x10c>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d113      	bne.n	8009632 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	695b      	ldr	r3, [r3, #20]
 800961e:	011b      	lsls	r3, r3, #4
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	4313      	orrs	r3, r2
 8009624:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	011b      	lsls	r3, r3, #4
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	4313      	orrs	r3, r2
 8009630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	685a      	ldr	r2, [r3, #4]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	621a      	str	r2, [r3, #32]
}
 800964c:	bf00      	nop
 800964e:	371c      	adds	r7, #28
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr
 8009658:	fffeff8f 	.word	0xfffeff8f
 800965c:	40010000 	.word	0x40010000
 8009660:	40010400 	.word	0x40010400
 8009664:	40014000 	.word	0x40014000
 8009668:	40014400 	.word	0x40014400
 800966c:	40014800 	.word	0x40014800

08009670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009670:	b480      	push	{r7}
 8009672:	b087      	sub	sp, #28
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a1b      	ldr	r3, [r3, #32]
 800967e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a1b      	ldr	r3, [r3, #32]
 8009684:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	4b24      	ldr	r3, [pc, #144]	@ (800972c <TIM_OC4_SetConfig+0xbc>)
 800969c:	4013      	ands	r3, r2
 800969e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	021b      	lsls	r3, r3, #8
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80096ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	031b      	lsls	r3, r3, #12
 80096c2:	693a      	ldr	r2, [r7, #16]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a19      	ldr	r2, [pc, #100]	@ (8009730 <TIM_OC4_SetConfig+0xc0>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d00f      	beq.n	80096f0 <TIM_OC4_SetConfig+0x80>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a18      	ldr	r2, [pc, #96]	@ (8009734 <TIM_OC4_SetConfig+0xc4>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d00b      	beq.n	80096f0 <TIM_OC4_SetConfig+0x80>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a17      	ldr	r2, [pc, #92]	@ (8009738 <TIM_OC4_SetConfig+0xc8>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d007      	beq.n	80096f0 <TIM_OC4_SetConfig+0x80>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a16      	ldr	r2, [pc, #88]	@ (800973c <TIM_OC4_SetConfig+0xcc>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d003      	beq.n	80096f0 <TIM_OC4_SetConfig+0x80>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a15      	ldr	r2, [pc, #84]	@ (8009740 <TIM_OC4_SetConfig+0xd0>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d109      	bne.n	8009704 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	019b      	lsls	r3, r3, #6
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	4313      	orrs	r3, r2
 8009702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	697a      	ldr	r2, [r7, #20]
 8009708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	693a      	ldr	r2, [r7, #16]
 800971c:	621a      	str	r2, [r3, #32]
}
 800971e:	bf00      	nop
 8009720:	371c      	adds	r7, #28
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	feff8fff 	.word	0xfeff8fff
 8009730:	40010000 	.word	0x40010000
 8009734:	40010400 	.word	0x40010400
 8009738:	40014000 	.word	0x40014000
 800973c:	40014400 	.word	0x40014400
 8009740:	40014800 	.word	0x40014800

08009744 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009744:	b480      	push	{r7}
 8009746:	b087      	sub	sp, #28
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a1b      	ldr	r3, [r3, #32]
 8009758:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800976a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	4b21      	ldr	r3, [pc, #132]	@ (80097f4 <TIM_OC5_SetConfig+0xb0>)
 8009770:	4013      	ands	r3, r2
 8009772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	4313      	orrs	r3, r2
 800977c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009784:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	041b      	lsls	r3, r3, #16
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	4313      	orrs	r3, r2
 8009790:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a18      	ldr	r2, [pc, #96]	@ (80097f8 <TIM_OC5_SetConfig+0xb4>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d00f      	beq.n	80097ba <TIM_OC5_SetConfig+0x76>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a17      	ldr	r2, [pc, #92]	@ (80097fc <TIM_OC5_SetConfig+0xb8>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d00b      	beq.n	80097ba <TIM_OC5_SetConfig+0x76>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a16      	ldr	r2, [pc, #88]	@ (8009800 <TIM_OC5_SetConfig+0xbc>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d007      	beq.n	80097ba <TIM_OC5_SetConfig+0x76>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a15      	ldr	r2, [pc, #84]	@ (8009804 <TIM_OC5_SetConfig+0xc0>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d003      	beq.n	80097ba <TIM_OC5_SetConfig+0x76>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a14      	ldr	r2, [pc, #80]	@ (8009808 <TIM_OC5_SetConfig+0xc4>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d109      	bne.n	80097ce <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	021b      	lsls	r3, r3, #8
 80097c8:	697a      	ldr	r2, [r7, #20]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	697a      	ldr	r2, [r7, #20]
 80097d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	693a      	ldr	r2, [r7, #16]
 80097e6:	621a      	str	r2, [r3, #32]
}
 80097e8:	bf00      	nop
 80097ea:	371c      	adds	r7, #28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	fffeff8f 	.word	0xfffeff8f
 80097f8:	40010000 	.word	0x40010000
 80097fc:	40010400 	.word	0x40010400
 8009800:	40014000 	.word	0x40014000
 8009804:	40014400 	.word	0x40014400
 8009808:	40014800 	.word	0x40014800

0800980c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800980c:	b480      	push	{r7}
 800980e:	b087      	sub	sp, #28
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a1b      	ldr	r3, [r3, #32]
 8009820:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	4b22      	ldr	r3, [pc, #136]	@ (80098c0 <TIM_OC6_SetConfig+0xb4>)
 8009838:	4013      	ands	r3, r2
 800983a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	021b      	lsls	r3, r3, #8
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	4313      	orrs	r3, r2
 8009846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800984e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	051b      	lsls	r3, r3, #20
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	4313      	orrs	r3, r2
 800985a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a19      	ldr	r2, [pc, #100]	@ (80098c4 <TIM_OC6_SetConfig+0xb8>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d00f      	beq.n	8009884 <TIM_OC6_SetConfig+0x78>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a18      	ldr	r2, [pc, #96]	@ (80098c8 <TIM_OC6_SetConfig+0xbc>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d00b      	beq.n	8009884 <TIM_OC6_SetConfig+0x78>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a17      	ldr	r2, [pc, #92]	@ (80098cc <TIM_OC6_SetConfig+0xc0>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d007      	beq.n	8009884 <TIM_OC6_SetConfig+0x78>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a16      	ldr	r2, [pc, #88]	@ (80098d0 <TIM_OC6_SetConfig+0xc4>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d003      	beq.n	8009884 <TIM_OC6_SetConfig+0x78>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a15      	ldr	r2, [pc, #84]	@ (80098d4 <TIM_OC6_SetConfig+0xc8>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d109      	bne.n	8009898 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800988a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	695b      	ldr	r3, [r3, #20]
 8009890:	029b      	lsls	r3, r3, #10
 8009892:	697a      	ldr	r2, [r7, #20]
 8009894:	4313      	orrs	r3, r2
 8009896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	685a      	ldr	r2, [r3, #4]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	693a      	ldr	r2, [r7, #16]
 80098b0:	621a      	str	r2, [r3, #32]
}
 80098b2:	bf00      	nop
 80098b4:	371c      	adds	r7, #28
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	feff8fff 	.word	0xfeff8fff
 80098c4:	40010000 	.word	0x40010000
 80098c8:	40010400 	.word	0x40010400
 80098cc:	40014000 	.word	0x40014000
 80098d0:	40014400 	.word	0x40014400
 80098d4:	40014800 	.word	0x40014800

080098d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098d8:	b480      	push	{r7}
 80098da:	b087      	sub	sp, #28
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6a1b      	ldr	r3, [r3, #32]
 80098e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	f023 0201 	bic.w	r2, r3, #1
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	011b      	lsls	r3, r3, #4
 8009908:	693a      	ldr	r2, [r7, #16]
 800990a:	4313      	orrs	r3, r2
 800990c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f023 030a 	bic.w	r3, r3, #10
 8009914:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	4313      	orrs	r3, r2
 800991c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	621a      	str	r2, [r3, #32]
}
 800992a:	bf00      	nop
 800992c:	371c      	adds	r7, #28
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr

08009936 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009936:	b480      	push	{r7}
 8009938:	b087      	sub	sp, #28
 800993a:	af00      	add	r7, sp, #0
 800993c:	60f8      	str	r0, [r7, #12]
 800993e:	60b9      	str	r1, [r7, #8]
 8009940:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6a1b      	ldr	r3, [r3, #32]
 800994c:	f023 0210 	bic.w	r2, r3, #16
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009960:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	031b      	lsls	r3, r3, #12
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	4313      	orrs	r3, r2
 800996a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009972:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	011b      	lsls	r3, r3, #4
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	4313      	orrs	r3, r2
 800997c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	693a      	ldr	r2, [r7, #16]
 8009982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	621a      	str	r2, [r3, #32]
}
 800998a:	bf00      	nop
 800998c:	371c      	adds	r7, #28
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr
	...

08009998 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	4b09      	ldr	r3, [pc, #36]	@ (80099d0 <TIM_ITRx_SetConfig+0x38>)
 80099ac:	4013      	ands	r3, r2
 80099ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099b0:	683a      	ldr	r2, [r7, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	f043 0307 	orr.w	r3, r3, #7
 80099ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	609a      	str	r2, [r3, #8]
}
 80099c2:	bf00      	nop
 80099c4:	3714      	adds	r7, #20
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	ffcfff8f 	.word	0xffcfff8f

080099d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b087      	sub	sp, #28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
 80099e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80099ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	021a      	lsls	r2, r3, #8
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	431a      	orrs	r2, r3
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	697a      	ldr	r2, [r7, #20]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	697a      	ldr	r2, [r7, #20]
 8009a06:	609a      	str	r2, [r3, #8]
}
 8009a08:	bf00      	nop
 8009a0a:	371c      	adds	r7, #28
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b087      	sub	sp, #28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	f003 031f 	and.w	r3, r3, #31
 8009a26:	2201      	movs	r2, #1
 8009a28:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6a1a      	ldr	r2, [r3, #32]
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	43db      	mvns	r3, r3
 8009a36:	401a      	ands	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6a1a      	ldr	r2, [r3, #32]
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	f003 031f 	and.w	r3, r3, #31
 8009a46:	6879      	ldr	r1, [r7, #4]
 8009a48:	fa01 f303 	lsl.w	r3, r1, r3
 8009a4c:	431a      	orrs	r2, r3
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	621a      	str	r2, [r3, #32]
}
 8009a52:	bf00      	nop
 8009a54:	371c      	adds	r7, #28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
	...

08009a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d101      	bne.n	8009a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a74:	2302      	movs	r3, #2
 8009a76:	e06d      	b.n	8009b54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2202      	movs	r2, #2
 8009a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a30      	ldr	r2, [pc, #192]	@ (8009b60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d004      	beq.n	8009aac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a2f      	ldr	r2, [pc, #188]	@ (8009b64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d108      	bne.n	8009abe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009ab2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ac4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a20      	ldr	r2, [pc, #128]	@ (8009b60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d022      	beq.n	8009b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009aea:	d01d      	beq.n	8009b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a1d      	ldr	r2, [pc, #116]	@ (8009b68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d018      	beq.n	8009b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a1c      	ldr	r2, [pc, #112]	@ (8009b6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d013      	beq.n	8009b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a1a      	ldr	r2, [pc, #104]	@ (8009b70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d00e      	beq.n	8009b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a15      	ldr	r2, [pc, #84]	@ (8009b64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d009      	beq.n	8009b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a16      	ldr	r2, [pc, #88]	@ (8009b74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d004      	beq.n	8009b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a15      	ldr	r2, [pc, #84]	@ (8009b78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d10c      	bne.n	8009b42 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	40010000 	.word	0x40010000
 8009b64:	40010400 	.word	0x40010400
 8009b68:	40000400 	.word	0x40000400
 8009b6c:	40000800 	.word	0x40000800
 8009b70:	40000c00 	.word	0x40000c00
 8009b74:	40001800 	.word	0x40001800
 8009b78:	40014000 	.word	0x40014000

08009b7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b86:	2300      	movs	r3, #0
 8009b88:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d101      	bne.n	8009b98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009b94:	2302      	movs	r3, #2
 8009b96:	e065      	b.n	8009c64 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	041b      	lsls	r3, r3, #16
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a16      	ldr	r2, [pc, #88]	@ (8009c70 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d004      	beq.n	8009c26 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a14      	ldr	r2, [pc, #80]	@ (8009c74 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d115      	bne.n	8009c52 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c30:	051b      	lsls	r3, r3, #20
 8009c32:	4313      	orrs	r3, r2
 8009c34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	69db      	ldr	r3, [r3, #28]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	6a1b      	ldr	r3, [r3, #32]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	40010000 	.word	0x40010000
 8009c74:	40010400 	.word	0x40010400

08009c78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <__NVIC_SetPriority>:
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	6039      	str	r1, [r7, #0]
 8009cbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	db0a      	blt.n	8009cde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	b2da      	uxtb	r2, r3
 8009ccc:	490c      	ldr	r1, [pc, #48]	@ (8009d00 <__NVIC_SetPriority+0x4c>)
 8009cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009cd2:	0112      	lsls	r2, r2, #4
 8009cd4:	b2d2      	uxtb	r2, r2
 8009cd6:	440b      	add	r3, r1
 8009cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009cdc:	e00a      	b.n	8009cf4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	b2da      	uxtb	r2, r3
 8009ce2:	4908      	ldr	r1, [pc, #32]	@ (8009d04 <__NVIC_SetPriority+0x50>)
 8009ce4:	88fb      	ldrh	r3, [r7, #6]
 8009ce6:	f003 030f 	and.w	r3, r3, #15
 8009cea:	3b04      	subs	r3, #4
 8009cec:	0112      	lsls	r2, r2, #4
 8009cee:	b2d2      	uxtb	r2, r2
 8009cf0:	440b      	add	r3, r1
 8009cf2:	761a      	strb	r2, [r3, #24]
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	e000e100 	.word	0xe000e100
 8009d04:	e000ed00 	.word	0xe000ed00

08009d08 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009d0c:	4b05      	ldr	r3, [pc, #20]	@ (8009d24 <SysTick_Handler+0x1c>)
 8009d0e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009d10:	f001 fd18 	bl	800b744 <xTaskGetSchedulerState>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d001      	beq.n	8009d1e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009d1a:	f002 fb0d 	bl	800c338 <xPortSysTickHandler>
  }
}
 8009d1e:	bf00      	nop
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	e000e010 	.word	0xe000e010

08009d28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	f06f 0004 	mvn.w	r0, #4
 8009d32:	f7ff ffbf 	bl	8009cb4 <__NVIC_SetPriority>
#endif
}
 8009d36:	bf00      	nop
 8009d38:	bd80      	pop	{r7, pc}
	...

08009d3c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d42:	f3ef 8305 	mrs	r3, IPSR
 8009d46:	603b      	str	r3, [r7, #0]
  return(result);
 8009d48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009d4e:	f06f 0305 	mvn.w	r3, #5
 8009d52:	607b      	str	r3, [r7, #4]
 8009d54:	e00c      	b.n	8009d70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009d56:	4b0a      	ldr	r3, [pc, #40]	@ (8009d80 <osKernelInitialize+0x44>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d105      	bne.n	8009d6a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009d5e:	4b08      	ldr	r3, [pc, #32]	@ (8009d80 <osKernelInitialize+0x44>)
 8009d60:	2201      	movs	r2, #1
 8009d62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	607b      	str	r3, [r7, #4]
 8009d68:	e002      	b.n	8009d70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d70:	687b      	ldr	r3, [r7, #4]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	370c      	adds	r7, #12
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	24000388 	.word	0x24000388

08009d84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d8a:	f3ef 8305 	mrs	r3, IPSR
 8009d8e:	603b      	str	r3, [r7, #0]
  return(result);
 8009d90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d003      	beq.n	8009d9e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009d96:	f06f 0305 	mvn.w	r3, #5
 8009d9a:	607b      	str	r3, [r7, #4]
 8009d9c:	e010      	b.n	8009dc0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8009dcc <osKernelStart+0x48>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d109      	bne.n	8009dba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009da6:	f7ff ffbf 	bl	8009d28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009daa:	4b08      	ldr	r3, [pc, #32]	@ (8009dcc <osKernelStart+0x48>)
 8009dac:	2202      	movs	r2, #2
 8009dae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009db0:	f001 f87a 	bl	800aea8 <vTaskStartScheduler>
      stat = osOK;
 8009db4:	2300      	movs	r3, #0
 8009db6:	607b      	str	r3, [r7, #4]
 8009db8:	e002      	b.n	8009dc0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009dba:	f04f 33ff 	mov.w	r3, #4294967295
 8009dbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009dc0:	687b      	ldr	r3, [r7, #4]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	24000388 	.word	0x24000388

08009dd0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b08e      	sub	sp, #56	@ 0x38
 8009dd4:	af04      	add	r7, sp, #16
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009de0:	f3ef 8305 	mrs	r3, IPSR
 8009de4:	617b      	str	r3, [r7, #20]
  return(result);
 8009de6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d17e      	bne.n	8009eea <osThreadNew+0x11a>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d07b      	beq.n	8009eea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009df2:	2380      	movs	r3, #128	@ 0x80
 8009df4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009df6:	2318      	movs	r3, #24
 8009df8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8009e02:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d045      	beq.n	8009e96 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d002      	beq.n	8009e18 <osThreadNew+0x48>
        name = attr->name;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d002      	beq.n	8009e26 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d008      	beq.n	8009e3e <osThreadNew+0x6e>
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	2b38      	cmp	r3, #56	@ 0x38
 8009e30:	d805      	bhi.n	8009e3e <osThreadNew+0x6e>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	f003 0301 	and.w	r3, r3, #1
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d001      	beq.n	8009e42 <osThreadNew+0x72>
        return (NULL);
 8009e3e:	2300      	movs	r3, #0
 8009e40:	e054      	b.n	8009eec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d003      	beq.n	8009e52 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	089b      	lsrs	r3, r3, #2
 8009e50:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00e      	beq.n	8009e78 <osThreadNew+0xa8>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	2b5b      	cmp	r3, #91	@ 0x5b
 8009e60:	d90a      	bls.n	8009e78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d006      	beq.n	8009e78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	695b      	ldr	r3, [r3, #20]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d002      	beq.n	8009e78 <osThreadNew+0xa8>
        mem = 1;
 8009e72:	2301      	movs	r3, #1
 8009e74:	61bb      	str	r3, [r7, #24]
 8009e76:	e010      	b.n	8009e9a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10c      	bne.n	8009e9a <osThreadNew+0xca>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d108      	bne.n	8009e9a <osThreadNew+0xca>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d104      	bne.n	8009e9a <osThreadNew+0xca>
          mem = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	61bb      	str	r3, [r7, #24]
 8009e94:	e001      	b.n	8009e9a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009e96:	2300      	movs	r3, #0
 8009e98:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d110      	bne.n	8009ec2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ea8:	9202      	str	r2, [sp, #8]
 8009eaa:	9301      	str	r3, [sp, #4]
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	6a3a      	ldr	r2, [r7, #32]
 8009eb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f000 fe1a 	bl	800aaf0 <xTaskCreateStatic>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	613b      	str	r3, [r7, #16]
 8009ec0:	e013      	b.n	8009eea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d110      	bne.n	8009eea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	f107 0310 	add.w	r3, r7, #16
 8009ed0:	9301      	str	r3, [sp, #4]
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	9300      	str	r3, [sp, #0]
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f000 fe68 	bl	800abb0 <xTaskCreate>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d001      	beq.n	8009eea <osThreadNew+0x11a>
            hTask = NULL;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009eea:	693b      	ldr	r3, [r7, #16]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3728      	adds	r7, #40	@ 0x28
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009efc:	f3ef 8305 	mrs	r3, IPSR
 8009f00:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f02:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d003      	beq.n	8009f10 <osDelay+0x1c>
    stat = osErrorISR;
 8009f08:	f06f 0305 	mvn.w	r3, #5
 8009f0c:	60fb      	str	r3, [r7, #12]
 8009f0e:	e007      	b.n	8009f20 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009f10:	2300      	movs	r3, #0
 8009f12:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d002      	beq.n	8009f20 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 ff8e 	bl	800ae3c <vTaskDelay>
    }
  }

  return (stat);
 8009f20:	68fb      	ldr	r3, [r7, #12]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
	...

08009f2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	4a07      	ldr	r2, [pc, #28]	@ (8009f58 <vApplicationGetIdleTaskMemory+0x2c>)
 8009f3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	4a06      	ldr	r2, [pc, #24]	@ (8009f5c <vApplicationGetIdleTaskMemory+0x30>)
 8009f42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2280      	movs	r2, #128	@ 0x80
 8009f48:	601a      	str	r2, [r3, #0]
}
 8009f4a:	bf00      	nop
 8009f4c:	3714      	adds	r7, #20
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	2400038c 	.word	0x2400038c
 8009f5c:	240003e8 	.word	0x240003e8

08009f60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	4a07      	ldr	r2, [pc, #28]	@ (8009f8c <vApplicationGetTimerTaskMemory+0x2c>)
 8009f70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	4a06      	ldr	r2, [pc, #24]	@ (8009f90 <vApplicationGetTimerTaskMemory+0x30>)
 8009f76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009f7e:	601a      	str	r2, [r3, #0]
}
 8009f80:	bf00      	nop
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	240005e8 	.word	0x240005e8
 8009f90:	24000644 	.word	0x24000644

08009f94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f103 0208 	add.w	r2, r3, #8
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f103 0208 	add.w	r2, r3, #8
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f103 0208 	add.w	r2, r3, #8
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009fe2:	bf00      	nop
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr

08009fee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b085      	sub	sp, #20
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	689a      	ldr	r2, [r3, #8]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	683a      	ldr	r2, [r7, #0]
 800a012:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	1c5a      	adds	r2, r3, #1
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	601a      	str	r2, [r3, #0]
}
 800a02a:	bf00      	nop
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a036:	b480      	push	{r7}
 800a038:	b085      	sub	sp, #20
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04c:	d103      	bne.n	800a056 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	60fb      	str	r3, [r7, #12]
 800a054:	e00c      	b.n	800a070 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	3308      	adds	r3, #8
 800a05a:	60fb      	str	r3, [r7, #12]
 800a05c:	e002      	b.n	800a064 <vListInsert+0x2e>
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d2f6      	bcs.n	800a05e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	685a      	ldr	r2, [r3, #4]
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	683a      	ldr	r2, [r7, #0]
 800a07e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	1c5a      	adds	r2, r3, #1
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	601a      	str	r2, [r3, #0]
}
 800a09c:	bf00      	nop
 800a09e:	3714      	adds	r7, #20
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	691b      	ldr	r3, [r3, #16]
 800a0b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	6892      	ldr	r2, [r2, #8]
 800a0be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	6852      	ldr	r2, [r2, #4]
 800a0c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d103      	bne.n	800a0dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	689a      	ldr	r2, [r3, #8]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	1e5a      	subs	r2, r3, #1
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10b      	bne.n	800a128 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a122:	bf00      	nop
 800a124:	bf00      	nop
 800a126:	e7fd      	b.n	800a124 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a128:	f002 f876 	bl	800c218 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a134:	68f9      	ldr	r1, [r7, #12]
 800a136:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a138:	fb01 f303 	mul.w	r3, r1, r3
 800a13c:	441a      	add	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a158:	3b01      	subs	r3, #1
 800a15a:	68f9      	ldr	r1, [r7, #12]
 800a15c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a15e:	fb01 f303 	mul.w	r3, r1, r3
 800a162:	441a      	add	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	22ff      	movs	r2, #255	@ 0xff
 800a16c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	22ff      	movs	r2, #255	@ 0xff
 800a174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d114      	bne.n	800a1a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d01a      	beq.n	800a1bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	3310      	adds	r3, #16
 800a18a:	4618      	mov	r0, r3
 800a18c:	f001 f91a 	bl	800b3c4 <xTaskRemoveFromEventList>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d012      	beq.n	800a1bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a196:	4b0d      	ldr	r3, [pc, #52]	@ (800a1cc <xQueueGenericReset+0xd0>)
 800a198:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	f3bf 8f6f 	isb	sy
 800a1a6:	e009      	b.n	800a1bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	3310      	adds	r3, #16
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7ff fef1 	bl	8009f94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	3324      	adds	r3, #36	@ 0x24
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7ff feec 	bl	8009f94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a1bc:	f002 f85e 	bl	800c27c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a1c0:	2301      	movs	r3, #1
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	e000ed04 	.word	0xe000ed04

0800a1d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b08e      	sub	sp, #56	@ 0x38
 800a1d4:	af02      	add	r7, sp, #8
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
 800a1dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d10b      	bne.n	800a1fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a1e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e8:	f383 8811 	msr	BASEPRI, r3
 800a1ec:	f3bf 8f6f 	isb	sy
 800a1f0:	f3bf 8f4f 	dsb	sy
 800a1f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a1f6:	bf00      	nop
 800a1f8:	bf00      	nop
 800a1fa:	e7fd      	b.n	800a1f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10b      	bne.n	800a21a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a214:	bf00      	nop
 800a216:	bf00      	nop
 800a218:	e7fd      	b.n	800a216 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d002      	beq.n	800a226 <xQueueGenericCreateStatic+0x56>
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <xQueueGenericCreateStatic+0x5a>
 800a226:	2301      	movs	r3, #1
 800a228:	e000      	b.n	800a22c <xQueueGenericCreateStatic+0x5c>
 800a22a:	2300      	movs	r3, #0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10b      	bne.n	800a248 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	623b      	str	r3, [r7, #32]
}
 800a242:	bf00      	nop
 800a244:	bf00      	nop
 800a246:	e7fd      	b.n	800a244 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d102      	bne.n	800a254 <xQueueGenericCreateStatic+0x84>
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <xQueueGenericCreateStatic+0x88>
 800a254:	2301      	movs	r3, #1
 800a256:	e000      	b.n	800a25a <xQueueGenericCreateStatic+0x8a>
 800a258:	2300      	movs	r3, #0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10b      	bne.n	800a276 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	61fb      	str	r3, [r7, #28]
}
 800a270:	bf00      	nop
 800a272:	bf00      	nop
 800a274:	e7fd      	b.n	800a272 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a276:	2350      	movs	r3, #80	@ 0x50
 800a278:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	2b50      	cmp	r3, #80	@ 0x50
 800a27e:	d00b      	beq.n	800a298 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	61bb      	str	r3, [r7, #24]
}
 800a292:	bf00      	nop
 800a294:	bf00      	nop
 800a296:	e7fd      	b.n	800a294 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a298:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00d      	beq.n	800a2c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a2ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	68b9      	ldr	r1, [r7, #8]
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f000 f805 	bl	800a2ca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3730      	adds	r7, #48	@ 0x30
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	60f8      	str	r0, [r7, #12]
 800a2d2:	60b9      	str	r1, [r7, #8]
 800a2d4:	607a      	str	r2, [r7, #4]
 800a2d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d103      	bne.n	800a2e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	69ba      	ldr	r2, [r7, #24]
 800a2e2:	601a      	str	r2, [r3, #0]
 800a2e4:	e002      	b.n	800a2ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a2f8:	2101      	movs	r1, #1
 800a2fa:	69b8      	ldr	r0, [r7, #24]
 800a2fc:	f7ff fefe 	bl	800a0fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	78fa      	ldrb	r2, [r7, #3]
 800a304:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a308:	bf00      	nop
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b08e      	sub	sp, #56	@ 0x38
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
 800a31c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a31e:	2300      	movs	r3, #0
 800a320:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10b      	bne.n	800a344 <xQueueGenericSend+0x34>
	__asm volatile
 800a32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a33e:	bf00      	nop
 800a340:	bf00      	nop
 800a342:	e7fd      	b.n	800a340 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d103      	bne.n	800a352 <xQueueGenericSend+0x42>
 800a34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <xQueueGenericSend+0x46>
 800a352:	2301      	movs	r3, #1
 800a354:	e000      	b.n	800a358 <xQueueGenericSend+0x48>
 800a356:	2300      	movs	r3, #0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10b      	bne.n	800a374 <xQueueGenericSend+0x64>
	__asm volatile
 800a35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a360:	f383 8811 	msr	BASEPRI, r3
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a36e:	bf00      	nop
 800a370:	bf00      	nop
 800a372:	e7fd      	b.n	800a370 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b02      	cmp	r3, #2
 800a378:	d103      	bne.n	800a382 <xQueueGenericSend+0x72>
 800a37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a37c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d101      	bne.n	800a386 <xQueueGenericSend+0x76>
 800a382:	2301      	movs	r3, #1
 800a384:	e000      	b.n	800a388 <xQueueGenericSend+0x78>
 800a386:	2300      	movs	r3, #0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10b      	bne.n	800a3a4 <xQueueGenericSend+0x94>
	__asm volatile
 800a38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a390:	f383 8811 	msr	BASEPRI, r3
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	623b      	str	r3, [r7, #32]
}
 800a39e:	bf00      	nop
 800a3a0:	bf00      	nop
 800a3a2:	e7fd      	b.n	800a3a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3a4:	f001 f9ce 	bl	800b744 <xTaskGetSchedulerState>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d102      	bne.n	800a3b4 <xQueueGenericSend+0xa4>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d101      	bne.n	800a3b8 <xQueueGenericSend+0xa8>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e000      	b.n	800a3ba <xQueueGenericSend+0xaa>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10b      	bne.n	800a3d6 <xQueueGenericSend+0xc6>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	61fb      	str	r3, [r7, #28]
}
 800a3d0:	bf00      	nop
 800a3d2:	bf00      	nop
 800a3d4:	e7fd      	b.n	800a3d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3d6:	f001 ff1f 	bl	800c218 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d302      	bcc.n	800a3ec <xQueueGenericSend+0xdc>
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d129      	bne.n	800a440 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	68b9      	ldr	r1, [r7, #8]
 800a3f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3f2:	f000 fa0f 	bl	800a814 <prvCopyDataToQueue>
 800a3f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d010      	beq.n	800a422 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a402:	3324      	adds	r3, #36	@ 0x24
 800a404:	4618      	mov	r0, r3
 800a406:	f000 ffdd 	bl	800b3c4 <xTaskRemoveFromEventList>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d013      	beq.n	800a438 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a410:	4b3f      	ldr	r3, [pc, #252]	@ (800a510 <xQueueGenericSend+0x200>)
 800a412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	e00a      	b.n	800a438 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a424:	2b00      	cmp	r3, #0
 800a426:	d007      	beq.n	800a438 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a428:	4b39      	ldr	r3, [pc, #228]	@ (800a510 <xQueueGenericSend+0x200>)
 800a42a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a42e:	601a      	str	r2, [r3, #0]
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a438:	f001 ff20 	bl	800c27c <vPortExitCritical>
				return pdPASS;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e063      	b.n	800a508 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d103      	bne.n	800a44e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a446:	f001 ff19 	bl	800c27c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a44a:	2300      	movs	r3, #0
 800a44c:	e05c      	b.n	800a508 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a44e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a450:	2b00      	cmp	r3, #0
 800a452:	d106      	bne.n	800a462 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a454:	f107 0314 	add.w	r3, r7, #20
 800a458:	4618      	mov	r0, r3
 800a45a:	f001 f817 	bl	800b48c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a45e:	2301      	movs	r3, #1
 800a460:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a462:	f001 ff0b 	bl	800c27c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a466:	f000 fd87 	bl	800af78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a46a:	f001 fed5 	bl	800c218 <vPortEnterCritical>
 800a46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a470:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a474:	b25b      	sxtb	r3, r3
 800a476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47a:	d103      	bne.n	800a484 <xQueueGenericSend+0x174>
 800a47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a486:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a48a:	b25b      	sxtb	r3, r3
 800a48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a490:	d103      	bne.n	800a49a <xQueueGenericSend+0x18a>
 800a492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a49a:	f001 feef 	bl	800c27c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a49e:	1d3a      	adds	r2, r7, #4
 800a4a0:	f107 0314 	add.w	r3, r7, #20
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f001 f806 	bl	800b4b8 <xTaskCheckForTimeOut>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d124      	bne.n	800a4fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a4b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4b4:	f000 faa6 	bl	800aa04 <prvIsQueueFull>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d018      	beq.n	800a4f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c0:	3310      	adds	r3, #16
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	4611      	mov	r1, r2
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f000 ff2a 	bl	800b320 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a4cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4ce:	f000 fa31 	bl	800a934 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a4d2:	f000 fd5f 	bl	800af94 <xTaskResumeAll>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f47f af7c 	bne.w	800a3d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a4de:	4b0c      	ldr	r3, [pc, #48]	@ (800a510 <xQueueGenericSend+0x200>)
 800a4e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4e4:	601a      	str	r2, [r3, #0]
 800a4e6:	f3bf 8f4f 	dsb	sy
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	e772      	b.n	800a3d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4f2:	f000 fa1f 	bl	800a934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4f6:	f000 fd4d 	bl	800af94 <xTaskResumeAll>
 800a4fa:	e76c      	b.n	800a3d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a4fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4fe:	f000 fa19 	bl	800a934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a502:	f000 fd47 	bl	800af94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a506:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3738      	adds	r7, #56	@ 0x38
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	e000ed04 	.word	0xe000ed04

0800a514 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b090      	sub	sp, #64	@ 0x40
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
 800a520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d10b      	bne.n	800a544 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a530:	f383 8811 	msr	BASEPRI, r3
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a53e:	bf00      	nop
 800a540:	bf00      	nop
 800a542:	e7fd      	b.n	800a540 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d103      	bne.n	800a552 <xQueueGenericSendFromISR+0x3e>
 800a54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d101      	bne.n	800a556 <xQueueGenericSendFromISR+0x42>
 800a552:	2301      	movs	r3, #1
 800a554:	e000      	b.n	800a558 <xQueueGenericSendFromISR+0x44>
 800a556:	2300      	movs	r3, #0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10b      	bne.n	800a574 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a560:	f383 8811 	msr	BASEPRI, r3
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a56e:	bf00      	nop
 800a570:	bf00      	nop
 800a572:	e7fd      	b.n	800a570 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	2b02      	cmp	r3, #2
 800a578:	d103      	bne.n	800a582 <xQueueGenericSendFromISR+0x6e>
 800a57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a57c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d101      	bne.n	800a586 <xQueueGenericSendFromISR+0x72>
 800a582:	2301      	movs	r3, #1
 800a584:	e000      	b.n	800a588 <xQueueGenericSendFromISR+0x74>
 800a586:	2300      	movs	r3, #0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10b      	bne.n	800a5a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	623b      	str	r3, [r7, #32]
}
 800a59e:	bf00      	nop
 800a5a0:	bf00      	nop
 800a5a2:	e7fd      	b.n	800a5a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5a4:	f001 ff18 	bl	800c3d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a5a8:	f3ef 8211 	mrs	r2, BASEPRI
 800a5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	61fa      	str	r2, [r7, #28]
 800a5be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a5c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d302      	bcc.n	800a5d6 <xQueueGenericSendFromISR+0xc2>
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d12f      	bne.n	800a636 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a5dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5e6:	683a      	ldr	r2, [r7, #0]
 800a5e8:	68b9      	ldr	r1, [r7, #8]
 800a5ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a5ec:	f000 f912 	bl	800a814 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f8:	d112      	bne.n	800a620 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d016      	beq.n	800a630 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a604:	3324      	adds	r3, #36	@ 0x24
 800a606:	4618      	mov	r0, r3
 800a608:	f000 fedc 	bl	800b3c4 <xTaskRemoveFromEventList>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00e      	beq.n	800a630 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00b      	beq.n	800a630 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	601a      	str	r2, [r3, #0]
 800a61e:	e007      	b.n	800a630 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a620:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a624:	3301      	adds	r3, #1
 800a626:	b2db      	uxtb	r3, r3
 800a628:	b25a      	sxtb	r2, r3
 800a62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a62c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a630:	2301      	movs	r3, #1
 800a632:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a634:	e001      	b.n	800a63a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a636:	2300      	movs	r3, #0
 800a638:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a63a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a63c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a644:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3740      	adds	r7, #64	@ 0x40
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b08c      	sub	sp, #48	@ 0x30
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a65c:	2300      	movs	r3, #0
 800a65e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10b      	bne.n	800a682 <xQueueReceive+0x32>
	__asm volatile
 800a66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a66e:	f383 8811 	msr	BASEPRI, r3
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	f3bf 8f4f 	dsb	sy
 800a67a:	623b      	str	r3, [r7, #32]
}
 800a67c:	bf00      	nop
 800a67e:	bf00      	nop
 800a680:	e7fd      	b.n	800a67e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d103      	bne.n	800a690 <xQueueReceive+0x40>
 800a688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a68a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d101      	bne.n	800a694 <xQueueReceive+0x44>
 800a690:	2301      	movs	r3, #1
 800a692:	e000      	b.n	800a696 <xQueueReceive+0x46>
 800a694:	2300      	movs	r3, #0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10b      	bne.n	800a6b2 <xQueueReceive+0x62>
	__asm volatile
 800a69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	61fb      	str	r3, [r7, #28]
}
 800a6ac:	bf00      	nop
 800a6ae:	bf00      	nop
 800a6b0:	e7fd      	b.n	800a6ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6b2:	f001 f847 	bl	800b744 <xTaskGetSchedulerState>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d102      	bne.n	800a6c2 <xQueueReceive+0x72>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <xQueueReceive+0x76>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e000      	b.n	800a6c8 <xQueueReceive+0x78>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10b      	bne.n	800a6e4 <xQueueReceive+0x94>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	61bb      	str	r3, [r7, #24]
}
 800a6de:	bf00      	nop
 800a6e0:	bf00      	nop
 800a6e2:	e7fd      	b.n	800a6e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6e4:	f001 fd98 	bl	800c218 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d01f      	beq.n	800a734 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6f4:	68b9      	ldr	r1, [r7, #8]
 800a6f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6f8:	f000 f8f6 	bl	800a8e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fe:	1e5a      	subs	r2, r3, #1
 800a700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a702:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00f      	beq.n	800a72c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70e:	3310      	adds	r3, #16
 800a710:	4618      	mov	r0, r3
 800a712:	f000 fe57 	bl	800b3c4 <xTaskRemoveFromEventList>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d007      	beq.n	800a72c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a71c:	4b3c      	ldr	r3, [pc, #240]	@ (800a810 <xQueueReceive+0x1c0>)
 800a71e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a722:	601a      	str	r2, [r3, #0]
 800a724:	f3bf 8f4f 	dsb	sy
 800a728:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a72c:	f001 fda6 	bl	800c27c <vPortExitCritical>
				return pdPASS;
 800a730:	2301      	movs	r3, #1
 800a732:	e069      	b.n	800a808 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d103      	bne.n	800a742 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a73a:	f001 fd9f 	bl	800c27c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a73e:	2300      	movs	r3, #0
 800a740:	e062      	b.n	800a808 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a744:	2b00      	cmp	r3, #0
 800a746:	d106      	bne.n	800a756 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a748:	f107 0310 	add.w	r3, r7, #16
 800a74c:	4618      	mov	r0, r3
 800a74e:	f000 fe9d 	bl	800b48c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a752:	2301      	movs	r3, #1
 800a754:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a756:	f001 fd91 	bl	800c27c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a75a:	f000 fc0d 	bl	800af78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a75e:	f001 fd5b 	bl	800c218 <vPortEnterCritical>
 800a762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a764:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a768:	b25b      	sxtb	r3, r3
 800a76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76e:	d103      	bne.n	800a778 <xQueueReceive+0x128>
 800a770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a772:	2200      	movs	r2, #0
 800a774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a77e:	b25b      	sxtb	r3, r3
 800a780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a784:	d103      	bne.n	800a78e <xQueueReceive+0x13e>
 800a786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a78e:	f001 fd75 	bl	800c27c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a792:	1d3a      	adds	r2, r7, #4
 800a794:	f107 0310 	add.w	r3, r7, #16
 800a798:	4611      	mov	r1, r2
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 fe8c 	bl	800b4b8 <xTaskCheckForTimeOut>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d123      	bne.n	800a7ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7a8:	f000 f916 	bl	800a9d8 <prvIsQueueEmpty>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d017      	beq.n	800a7e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b4:	3324      	adds	r3, #36	@ 0x24
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	4611      	mov	r1, r2
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 fdb0 	bl	800b320 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7c2:	f000 f8b7 	bl	800a934 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7c6:	f000 fbe5 	bl	800af94 <xTaskResumeAll>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d189      	bne.n	800a6e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a7d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a810 <xQueueReceive+0x1c0>)
 800a7d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7d6:	601a      	str	r2, [r3, #0]
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	f3bf 8f6f 	isb	sy
 800a7e0:	e780      	b.n	800a6e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a7e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7e4:	f000 f8a6 	bl	800a934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7e8:	f000 fbd4 	bl	800af94 <xTaskResumeAll>
 800a7ec:	e77a      	b.n	800a6e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a7ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7f0:	f000 f8a0 	bl	800a934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7f4:	f000 fbce 	bl	800af94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7fa:	f000 f8ed 	bl	800a9d8 <prvIsQueueEmpty>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	f43f af6f 	beq.w	800a6e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a806:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3730      	adds	r7, #48	@ 0x30
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	e000ed04 	.word	0xe000ed04

0800a814 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a820:	2300      	movs	r3, #0
 800a822:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a828:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10d      	bne.n	800a84e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d14d      	bne.n	800a8d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 ff9e 	bl	800b780 <xTaskPriorityDisinherit>
 800a844:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	609a      	str	r2, [r3, #8]
 800a84c:	e043      	b.n	800a8d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d119      	bne.n	800a888 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6858      	ldr	r0, [r3, #4]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a85c:	461a      	mov	r2, r3
 800a85e:	68b9      	ldr	r1, [r7, #8]
 800a860:	f003 fca2 	bl	800e1a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a86c:	441a      	add	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	685a      	ldr	r2, [r3, #4]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d32b      	bcc.n	800a8d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	605a      	str	r2, [r3, #4]
 800a886:	e026      	b.n	800a8d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	68d8      	ldr	r0, [r3, #12]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a890:	461a      	mov	r2, r3
 800a892:	68b9      	ldr	r1, [r7, #8]
 800a894:	f003 fc88 	bl	800e1a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	68da      	ldr	r2, [r3, #12]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8a0:	425b      	negs	r3, r3
 800a8a2:	441a      	add	r2, r3
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	68da      	ldr	r2, [r3, #12]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d207      	bcs.n	800a8c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	689a      	ldr	r2, [r3, #8]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8bc:	425b      	negs	r3, r3
 800a8be:	441a      	add	r2, r3
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	d105      	bne.n	800a8d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d002      	beq.n	800a8d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	1c5a      	adds	r2, r3, #1
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a8de:	697b      	ldr	r3, [r7, #20]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3718      	adds	r7, #24
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d018      	beq.n	800a92c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68da      	ldr	r2, [r3, #12]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a902:	441a      	add	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	68da      	ldr	r2, [r3, #12]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	429a      	cmp	r2, r3
 800a912:	d303      	bcc.n	800a91c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	68d9      	ldr	r1, [r3, #12]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a924:	461a      	mov	r2, r3
 800a926:	6838      	ldr	r0, [r7, #0]
 800a928:	f003 fc3e 	bl	800e1a8 <memcpy>
	}
}
 800a92c:	bf00      	nop
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a93c:	f001 fc6c 	bl	800c218 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a946:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a948:	e011      	b.n	800a96e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d012      	beq.n	800a978 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	3324      	adds	r3, #36	@ 0x24
 800a956:	4618      	mov	r0, r3
 800a958:	f000 fd34 	bl	800b3c4 <xTaskRemoveFromEventList>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d001      	beq.n	800a966 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a962:	f000 fe0d 	bl	800b580 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a966:	7bfb      	ldrb	r3, [r7, #15]
 800a968:	3b01      	subs	r3, #1
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a96e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a972:	2b00      	cmp	r3, #0
 800a974:	dce9      	bgt.n	800a94a <prvUnlockQueue+0x16>
 800a976:	e000      	b.n	800a97a <prvUnlockQueue+0x46>
					break;
 800a978:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	22ff      	movs	r2, #255	@ 0xff
 800a97e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a982:	f001 fc7b 	bl	800c27c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a986:	f001 fc47 	bl	800c218 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a990:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a992:	e011      	b.n	800a9b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d012      	beq.n	800a9c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	3310      	adds	r3, #16
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f000 fd0f 	bl	800b3c4 <xTaskRemoveFromEventList>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a9ac:	f000 fde8 	bl	800b580 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	dce9      	bgt.n	800a994 <prvUnlockQueue+0x60>
 800a9c0:	e000      	b.n	800a9c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a9c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	22ff      	movs	r2, #255	@ 0xff
 800a9c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a9cc:	f001 fc56 	bl	800c27c <vPortExitCritical>
}
 800a9d0:	bf00      	nop
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9e0:	f001 fc1a 	bl	800c218 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d102      	bne.n	800a9f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	e001      	b.n	800a9f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9f6:	f001 fc41 	bl	800c27c <vPortExitCritical>

	return xReturn;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa0c:	f001 fc04 	bl	800c218 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d102      	bne.n	800aa22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	60fb      	str	r3, [r7, #12]
 800aa20:	e001      	b.n	800aa26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa22:	2300      	movs	r3, #0
 800aa24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa26:	f001 fc29 	bl	800c27c <vPortExitCritical>

	return xReturn;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa3e:	2300      	movs	r3, #0
 800aa40:	60fb      	str	r3, [r7, #12]
 800aa42:	e014      	b.n	800aa6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa44:	4a0f      	ldr	r2, [pc, #60]	@ (800aa84 <vQueueAddToRegistry+0x50>)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d10b      	bne.n	800aa68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa50:	490c      	ldr	r1, [pc, #48]	@ (800aa84 <vQueueAddToRegistry+0x50>)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	683a      	ldr	r2, [r7, #0]
 800aa56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aa5a:	4a0a      	ldr	r2, [pc, #40]	@ (800aa84 <vQueueAddToRegistry+0x50>)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	00db      	lsls	r3, r3, #3
 800aa60:	4413      	add	r3, r2
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aa66:	e006      	b.n	800aa76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	60fb      	str	r3, [r7, #12]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b07      	cmp	r3, #7
 800aa72:	d9e7      	bls.n	800aa44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aa74:	bf00      	nop
 800aa76:	bf00      	nop
 800aa78:	3714      	adds	r7, #20
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	24000a44 	.word	0x24000a44

0800aa88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa98:	f001 fbbe 	bl	800c218 <vPortEnterCritical>
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aaa2:	b25b      	sxtb	r3, r3
 800aaa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaa8:	d103      	bne.n	800aab2 <vQueueWaitForMessageRestricted+0x2a>
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aab8:	b25b      	sxtb	r3, r3
 800aaba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aabe:	d103      	bne.n	800aac8 <vQueueWaitForMessageRestricted+0x40>
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aac8:	f001 fbd8 	bl	800c27c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d106      	bne.n	800aae2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	3324      	adds	r3, #36	@ 0x24
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	68b9      	ldr	r1, [r7, #8]
 800aadc:	4618      	mov	r0, r3
 800aade:	f000 fc45 	bl	800b36c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aae2:	6978      	ldr	r0, [r7, #20]
 800aae4:	f7ff ff26 	bl	800a934 <prvUnlockQueue>
	}
 800aae8:	bf00      	nop
 800aaea:	3718      	adds	r7, #24
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b08e      	sub	sp, #56	@ 0x38
 800aaf4:	af04      	add	r7, sp, #16
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
 800aafc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aafe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d10b      	bne.n	800ab1c <xTaskCreateStatic+0x2c>
	__asm volatile
 800ab04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab08:	f383 8811 	msr	BASEPRI, r3
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	623b      	str	r3, [r7, #32]
}
 800ab16:	bf00      	nop
 800ab18:	bf00      	nop
 800ab1a:	e7fd      	b.n	800ab18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10b      	bne.n	800ab3a <xTaskCreateStatic+0x4a>
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	61fb      	str	r3, [r7, #28]
}
 800ab34:	bf00      	nop
 800ab36:	bf00      	nop
 800ab38:	e7fd      	b.n	800ab36 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab3a:	235c      	movs	r3, #92	@ 0x5c
 800ab3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	2b5c      	cmp	r3, #92	@ 0x5c
 800ab42:	d00b      	beq.n	800ab5c <xTaskCreateStatic+0x6c>
	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	61bb      	str	r3, [r7, #24]
}
 800ab56:	bf00      	nop
 800ab58:	bf00      	nop
 800ab5a:	e7fd      	b.n	800ab58 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab5c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d01e      	beq.n	800aba2 <xTaskCreateStatic+0xb2>
 800ab64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d01b      	beq.n	800aba2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab72:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab76:	2202      	movs	r2, #2
 800ab78:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	9303      	str	r3, [sp, #12]
 800ab80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab82:	9302      	str	r3, [sp, #8]
 800ab84:	f107 0314 	add.w	r3, r7, #20
 800ab88:	9301      	str	r3, [sp, #4]
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8c:	9300      	str	r3, [sp, #0]
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	68b9      	ldr	r1, [r7, #8]
 800ab94:	68f8      	ldr	r0, [r7, #12]
 800ab96:	f000 f850 	bl	800ac3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab9c:	f000 f8de 	bl	800ad5c <prvAddNewTaskToReadyList>
 800aba0:	e001      	b.n	800aba6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aba2:	2300      	movs	r3, #0
 800aba4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aba6:	697b      	ldr	r3, [r7, #20]
	}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3728      	adds	r7, #40	@ 0x28
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b08c      	sub	sp, #48	@ 0x30
 800abb4:	af04      	add	r7, sp, #16
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	603b      	str	r3, [r7, #0]
 800abbc:	4613      	mov	r3, r2
 800abbe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800abc0:	88fb      	ldrh	r3, [r7, #6]
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4618      	mov	r0, r3
 800abc6:	f001 fc49 	bl	800c45c <pvPortMalloc>
 800abca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d00e      	beq.n	800abf0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800abd2:	205c      	movs	r0, #92	@ 0x5c
 800abd4:	f001 fc42 	bl	800c45c <pvPortMalloc>
 800abd8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d003      	beq.n	800abe8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	697a      	ldr	r2, [r7, #20]
 800abe4:	631a      	str	r2, [r3, #48]	@ 0x30
 800abe6:	e005      	b.n	800abf4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800abe8:	6978      	ldr	r0, [r7, #20]
 800abea:	f001 fd05 	bl	800c5f8 <vPortFree>
 800abee:	e001      	b.n	800abf4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800abf0:	2300      	movs	r3, #0
 800abf2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d017      	beq.n	800ac2a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac02:	88fa      	ldrh	r2, [r7, #6]
 800ac04:	2300      	movs	r3, #0
 800ac06:	9303      	str	r3, [sp, #12]
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	9302      	str	r3, [sp, #8]
 800ac0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac0e:	9301      	str	r3, [sp, #4]
 800ac10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	68b9      	ldr	r1, [r7, #8]
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f000 f80e 	bl	800ac3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac1e:	69f8      	ldr	r0, [r7, #28]
 800ac20:	f000 f89c 	bl	800ad5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac24:	2301      	movs	r3, #1
 800ac26:	61bb      	str	r3, [r7, #24]
 800ac28:	e002      	b.n	800ac30 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac30:	69bb      	ldr	r3, [r7, #24]
	}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3720      	adds	r7, #32
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b088      	sub	sp, #32
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	60f8      	str	r0, [r7, #12]
 800ac42:	60b9      	str	r1, [r7, #8]
 800ac44:	607a      	str	r2, [r7, #4]
 800ac46:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	461a      	mov	r2, r3
 800ac52:	21a5      	movs	r1, #165	@ 0xa5
 800ac54:	f003 fa64 	bl	800e120 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac5c:	6879      	ldr	r1, [r7, #4]
 800ac5e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ac62:	440b      	add	r3, r1
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	4413      	add	r3, r2
 800ac68:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	f023 0307 	bic.w	r3, r3, #7
 800ac70:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	f003 0307 	and.w	r3, r3, #7
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d00b      	beq.n	800ac94 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	617b      	str	r3, [r7, #20]
}
 800ac8e:	bf00      	nop
 800ac90:	bf00      	nop
 800ac92:	e7fd      	b.n	800ac90 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d01f      	beq.n	800acda <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	61fb      	str	r3, [r7, #28]
 800ac9e:	e012      	b.n	800acc6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	4413      	add	r3, r2
 800aca6:	7819      	ldrb	r1, [r3, #0]
 800aca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	4413      	add	r3, r2
 800acae:	3334      	adds	r3, #52	@ 0x34
 800acb0:	460a      	mov	r2, r1
 800acb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800acb4:	68ba      	ldr	r2, [r7, #8]
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	4413      	add	r3, r2
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d006      	beq.n	800acce <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	3301      	adds	r3, #1
 800acc4:	61fb      	str	r3, [r7, #28]
 800acc6:	69fb      	ldr	r3, [r7, #28]
 800acc8:	2b0f      	cmp	r3, #15
 800acca:	d9e9      	bls.n	800aca0 <prvInitialiseNewTask+0x66>
 800accc:	e000      	b.n	800acd0 <prvInitialiseNewTask+0x96>
			{
				break;
 800acce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800acd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd2:	2200      	movs	r2, #0
 800acd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800acd8:	e003      	b.n	800ace2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800acda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ace2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace4:	2b37      	cmp	r3, #55	@ 0x37
 800ace6:	d901      	bls.n	800acec <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ace8:	2337      	movs	r3, #55	@ 0x37
 800acea:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800acec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acf0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800acf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acf6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800acf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfa:	2200      	movs	r2, #0
 800acfc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800acfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad00:	3304      	adds	r3, #4
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7ff f966 	bl	8009fd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0a:	3318      	adds	r3, #24
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7ff f961 	bl	8009fd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad1a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ad1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad26:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad30:	2200      	movs	r2, #0
 800ad32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad36:	683a      	ldr	r2, [r7, #0]
 800ad38:	68f9      	ldr	r1, [r7, #12]
 800ad3a:	69b8      	ldr	r0, [r7, #24]
 800ad3c:	f001 f93e 	bl	800bfbc <pxPortInitialiseStack>
 800ad40:	4602      	mov	r2, r0
 800ad42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d002      	beq.n	800ad52 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad52:	bf00      	nop
 800ad54:	3720      	adds	r7, #32
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
	...

0800ad5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad64:	f001 fa58 	bl	800c218 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad68:	4b2d      	ldr	r3, [pc, #180]	@ (800ae20 <prvAddNewTaskToReadyList+0xc4>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	4a2c      	ldr	r2, [pc, #176]	@ (800ae20 <prvAddNewTaskToReadyList+0xc4>)
 800ad70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad72:	4b2c      	ldr	r3, [pc, #176]	@ (800ae24 <prvAddNewTaskToReadyList+0xc8>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d109      	bne.n	800ad8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad7a:	4a2a      	ldr	r2, [pc, #168]	@ (800ae24 <prvAddNewTaskToReadyList+0xc8>)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad80:	4b27      	ldr	r3, [pc, #156]	@ (800ae20 <prvAddNewTaskToReadyList+0xc4>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d110      	bne.n	800adaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad88:	f000 fc1e 	bl	800b5c8 <prvInitialiseTaskLists>
 800ad8c:	e00d      	b.n	800adaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad8e:	4b26      	ldr	r3, [pc, #152]	@ (800ae28 <prvAddNewTaskToReadyList+0xcc>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d109      	bne.n	800adaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad96:	4b23      	ldr	r3, [pc, #140]	@ (800ae24 <prvAddNewTaskToReadyList+0xc8>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d802      	bhi.n	800adaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ada4:	4a1f      	ldr	r2, [pc, #124]	@ (800ae24 <prvAddNewTaskToReadyList+0xc8>)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800adaa:	4b20      	ldr	r3, [pc, #128]	@ (800ae2c <prvAddNewTaskToReadyList+0xd0>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	3301      	adds	r3, #1
 800adb0:	4a1e      	ldr	r2, [pc, #120]	@ (800ae2c <prvAddNewTaskToReadyList+0xd0>)
 800adb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800adb4:	4b1d      	ldr	r3, [pc, #116]	@ (800ae2c <prvAddNewTaskToReadyList+0xd0>)
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adc0:	4b1b      	ldr	r3, [pc, #108]	@ (800ae30 <prvAddNewTaskToReadyList+0xd4>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d903      	bls.n	800add0 <prvAddNewTaskToReadyList+0x74>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adcc:	4a18      	ldr	r2, [pc, #96]	@ (800ae30 <prvAddNewTaskToReadyList+0xd4>)
 800adce:	6013      	str	r3, [r2, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800add4:	4613      	mov	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	4a15      	ldr	r2, [pc, #84]	@ (800ae34 <prvAddNewTaskToReadyList+0xd8>)
 800adde:	441a      	add	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	3304      	adds	r3, #4
 800ade4:	4619      	mov	r1, r3
 800ade6:	4610      	mov	r0, r2
 800ade8:	f7ff f901 	bl	8009fee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800adec:	f001 fa46 	bl	800c27c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800adf0:	4b0d      	ldr	r3, [pc, #52]	@ (800ae28 <prvAddNewTaskToReadyList+0xcc>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00e      	beq.n	800ae16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800adf8:	4b0a      	ldr	r3, [pc, #40]	@ (800ae24 <prvAddNewTaskToReadyList+0xc8>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d207      	bcs.n	800ae16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae06:	4b0c      	ldr	r3, [pc, #48]	@ (800ae38 <prvAddNewTaskToReadyList+0xdc>)
 800ae08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae0c:	601a      	str	r2, [r3, #0]
 800ae0e:	f3bf 8f4f 	dsb	sy
 800ae12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae16:	bf00      	nop
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	24000f58 	.word	0x24000f58
 800ae24:	24000a84 	.word	0x24000a84
 800ae28:	24000f64 	.word	0x24000f64
 800ae2c:	24000f74 	.word	0x24000f74
 800ae30:	24000f60 	.word	0x24000f60
 800ae34:	24000a88 	.word	0x24000a88
 800ae38:	e000ed04 	.word	0xe000ed04

0800ae3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae44:	2300      	movs	r3, #0
 800ae46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d018      	beq.n	800ae80 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae4e:	4b14      	ldr	r3, [pc, #80]	@ (800aea0 <vTaskDelay+0x64>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00b      	beq.n	800ae6e <vTaskDelay+0x32>
	__asm volatile
 800ae56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae5a:	f383 8811 	msr	BASEPRI, r3
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	60bb      	str	r3, [r7, #8]
}
 800ae68:	bf00      	nop
 800ae6a:	bf00      	nop
 800ae6c:	e7fd      	b.n	800ae6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae6e:	f000 f883 	bl	800af78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae72:	2100      	movs	r1, #0
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 fcf3 	bl	800b860 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae7a:	f000 f88b 	bl	800af94 <xTaskResumeAll>
 800ae7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d107      	bne.n	800ae96 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ae86:	4b07      	ldr	r3, [pc, #28]	@ (800aea4 <vTaskDelay+0x68>)
 800ae88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae8c:	601a      	str	r2, [r3, #0]
 800ae8e:	f3bf 8f4f 	dsb	sy
 800ae92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae96:	bf00      	nop
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	24000f80 	.word	0x24000f80
 800aea4:	e000ed04 	.word	0xe000ed04

0800aea8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b08a      	sub	sp, #40	@ 0x28
 800aeac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aeb6:	463a      	mov	r2, r7
 800aeb8:	1d39      	adds	r1, r7, #4
 800aeba:	f107 0308 	add.w	r3, r7, #8
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7ff f834 	bl	8009f2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aec4:	6839      	ldr	r1, [r7, #0]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	9202      	str	r2, [sp, #8]
 800aecc:	9301      	str	r3, [sp, #4]
 800aece:	2300      	movs	r3, #0
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	2300      	movs	r3, #0
 800aed4:	460a      	mov	r2, r1
 800aed6:	4922      	ldr	r1, [pc, #136]	@ (800af60 <vTaskStartScheduler+0xb8>)
 800aed8:	4822      	ldr	r0, [pc, #136]	@ (800af64 <vTaskStartScheduler+0xbc>)
 800aeda:	f7ff fe09 	bl	800aaf0 <xTaskCreateStatic>
 800aede:	4603      	mov	r3, r0
 800aee0:	4a21      	ldr	r2, [pc, #132]	@ (800af68 <vTaskStartScheduler+0xc0>)
 800aee2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aee4:	4b20      	ldr	r3, [pc, #128]	@ (800af68 <vTaskStartScheduler+0xc0>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d002      	beq.n	800aef2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aeec:	2301      	movs	r3, #1
 800aeee:	617b      	str	r3, [r7, #20]
 800aef0:	e001      	b.n	800aef6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aef2:	2300      	movs	r3, #0
 800aef4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d102      	bne.n	800af02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aefc:	f000 fd04 	bl	800b908 <xTimerCreateTimerTask>
 800af00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	2b01      	cmp	r3, #1
 800af06:	d116      	bne.n	800af36 <vTaskStartScheduler+0x8e>
	__asm volatile
 800af08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	613b      	str	r3, [r7, #16]
}
 800af1a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af1c:	4b13      	ldr	r3, [pc, #76]	@ (800af6c <vTaskStartScheduler+0xc4>)
 800af1e:	f04f 32ff 	mov.w	r2, #4294967295
 800af22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af24:	4b12      	ldr	r3, [pc, #72]	@ (800af70 <vTaskStartScheduler+0xc8>)
 800af26:	2201      	movs	r2, #1
 800af28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af2a:	4b12      	ldr	r3, [pc, #72]	@ (800af74 <vTaskStartScheduler+0xcc>)
 800af2c:	2200      	movs	r2, #0
 800af2e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af30:	f001 f8ce 	bl	800c0d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af34:	e00f      	b.n	800af56 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af3c:	d10b      	bne.n	800af56 <vTaskStartScheduler+0xae>
	__asm volatile
 800af3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af42:	f383 8811 	msr	BASEPRI, r3
 800af46:	f3bf 8f6f 	isb	sy
 800af4a:	f3bf 8f4f 	dsb	sy
 800af4e:	60fb      	str	r3, [r7, #12]
}
 800af50:	bf00      	nop
 800af52:	bf00      	nop
 800af54:	e7fd      	b.n	800af52 <vTaskStartScheduler+0xaa>
}
 800af56:	bf00      	nop
 800af58:	3718      	adds	r7, #24
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	0800e808 	.word	0x0800e808
 800af64:	0800b599 	.word	0x0800b599
 800af68:	24000f7c 	.word	0x24000f7c
 800af6c:	24000f78 	.word	0x24000f78
 800af70:	24000f64 	.word	0x24000f64
 800af74:	24000f5c 	.word	0x24000f5c

0800af78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af78:	b480      	push	{r7}
 800af7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af7c:	4b04      	ldr	r3, [pc, #16]	@ (800af90 <vTaskSuspendAll+0x18>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	3301      	adds	r3, #1
 800af82:	4a03      	ldr	r2, [pc, #12]	@ (800af90 <vTaskSuspendAll+0x18>)
 800af84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af86:	bf00      	nop
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	24000f80 	.word	0x24000f80

0800af94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af9a:	2300      	movs	r3, #0
 800af9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af9e:	2300      	movs	r3, #0
 800afa0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800afa2:	4b42      	ldr	r3, [pc, #264]	@ (800b0ac <xTaskResumeAll+0x118>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10b      	bne.n	800afc2 <xTaskResumeAll+0x2e>
	__asm volatile
 800afaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afae:	f383 8811 	msr	BASEPRI, r3
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	f3bf 8f4f 	dsb	sy
 800afba:	603b      	str	r3, [r7, #0]
}
 800afbc:	bf00      	nop
 800afbe:	bf00      	nop
 800afc0:	e7fd      	b.n	800afbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800afc2:	f001 f929 	bl	800c218 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800afc6:	4b39      	ldr	r3, [pc, #228]	@ (800b0ac <xTaskResumeAll+0x118>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3b01      	subs	r3, #1
 800afcc:	4a37      	ldr	r2, [pc, #220]	@ (800b0ac <xTaskResumeAll+0x118>)
 800afce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afd0:	4b36      	ldr	r3, [pc, #216]	@ (800b0ac <xTaskResumeAll+0x118>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d162      	bne.n	800b09e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800afd8:	4b35      	ldr	r3, [pc, #212]	@ (800b0b0 <xTaskResumeAll+0x11c>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d05e      	beq.n	800b09e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afe0:	e02f      	b.n	800b042 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afe2:	4b34      	ldr	r3, [pc, #208]	@ (800b0b4 <xTaskResumeAll+0x120>)
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	3318      	adds	r3, #24
 800afee:	4618      	mov	r0, r3
 800aff0:	f7ff f85a 	bl	800a0a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	3304      	adds	r3, #4
 800aff8:	4618      	mov	r0, r3
 800affa:	f7ff f855 	bl	800a0a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b002:	4b2d      	ldr	r3, [pc, #180]	@ (800b0b8 <xTaskResumeAll+0x124>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	429a      	cmp	r2, r3
 800b008:	d903      	bls.n	800b012 <xTaskResumeAll+0x7e>
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b00e:	4a2a      	ldr	r2, [pc, #168]	@ (800b0b8 <xTaskResumeAll+0x124>)
 800b010:	6013      	str	r3, [r2, #0]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b016:	4613      	mov	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	4413      	add	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4a27      	ldr	r2, [pc, #156]	@ (800b0bc <xTaskResumeAll+0x128>)
 800b020:	441a      	add	r2, r3
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	3304      	adds	r3, #4
 800b026:	4619      	mov	r1, r3
 800b028:	4610      	mov	r0, r2
 800b02a:	f7fe ffe0 	bl	8009fee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b032:	4b23      	ldr	r3, [pc, #140]	@ (800b0c0 <xTaskResumeAll+0x12c>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b038:	429a      	cmp	r2, r3
 800b03a:	d302      	bcc.n	800b042 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b03c:	4b21      	ldr	r3, [pc, #132]	@ (800b0c4 <xTaskResumeAll+0x130>)
 800b03e:	2201      	movs	r2, #1
 800b040:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b042:	4b1c      	ldr	r3, [pc, #112]	@ (800b0b4 <xTaskResumeAll+0x120>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d1cb      	bne.n	800afe2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b050:	f000 fb58 	bl	800b704 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b054:	4b1c      	ldr	r3, [pc, #112]	@ (800b0c8 <xTaskResumeAll+0x134>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d010      	beq.n	800b082 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b060:	f000 f846 	bl	800b0f0 <xTaskIncrementTick>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d002      	beq.n	800b070 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b06a:	4b16      	ldr	r3, [pc, #88]	@ (800b0c4 <xTaskResumeAll+0x130>)
 800b06c:	2201      	movs	r2, #1
 800b06e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	3b01      	subs	r3, #1
 800b074:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1f1      	bne.n	800b060 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b07c:	4b12      	ldr	r3, [pc, #72]	@ (800b0c8 <xTaskResumeAll+0x134>)
 800b07e:	2200      	movs	r2, #0
 800b080:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b082:	4b10      	ldr	r3, [pc, #64]	@ (800b0c4 <xTaskResumeAll+0x130>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d009      	beq.n	800b09e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b08a:	2301      	movs	r3, #1
 800b08c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b08e:	4b0f      	ldr	r3, [pc, #60]	@ (800b0cc <xTaskResumeAll+0x138>)
 800b090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b094:	601a      	str	r2, [r3, #0]
 800b096:	f3bf 8f4f 	dsb	sy
 800b09a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b09e:	f001 f8ed 	bl	800c27c <vPortExitCritical>

	return xAlreadyYielded;
 800b0a2:	68bb      	ldr	r3, [r7, #8]
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3710      	adds	r7, #16
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	24000f80 	.word	0x24000f80
 800b0b0:	24000f58 	.word	0x24000f58
 800b0b4:	24000f18 	.word	0x24000f18
 800b0b8:	24000f60 	.word	0x24000f60
 800b0bc:	24000a88 	.word	0x24000a88
 800b0c0:	24000a84 	.word	0x24000a84
 800b0c4:	24000f6c 	.word	0x24000f6c
 800b0c8:	24000f68 	.word	0x24000f68
 800b0cc:	e000ed04 	.word	0xe000ed04

0800b0d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b0d6:	4b05      	ldr	r3, [pc, #20]	@ (800b0ec <xTaskGetTickCount+0x1c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b0dc:	687b      	ldr	r3, [r7, #4]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	370c      	adds	r7, #12
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	24000f5c 	.word	0x24000f5c

0800b0f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0fa:	4b4f      	ldr	r3, [pc, #316]	@ (800b238 <xTaskIncrementTick+0x148>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f040 8090 	bne.w	800b224 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b104:	4b4d      	ldr	r3, [pc, #308]	@ (800b23c <xTaskIncrementTick+0x14c>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	3301      	adds	r3, #1
 800b10a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b10c:	4a4b      	ldr	r2, [pc, #300]	@ (800b23c <xTaskIncrementTick+0x14c>)
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d121      	bne.n	800b15c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b118:	4b49      	ldr	r3, [pc, #292]	@ (800b240 <xTaskIncrementTick+0x150>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00b      	beq.n	800b13a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b126:	f383 8811 	msr	BASEPRI, r3
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	603b      	str	r3, [r7, #0]
}
 800b134:	bf00      	nop
 800b136:	bf00      	nop
 800b138:	e7fd      	b.n	800b136 <xTaskIncrementTick+0x46>
 800b13a:	4b41      	ldr	r3, [pc, #260]	@ (800b240 <xTaskIncrementTick+0x150>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	60fb      	str	r3, [r7, #12]
 800b140:	4b40      	ldr	r3, [pc, #256]	@ (800b244 <xTaskIncrementTick+0x154>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a3e      	ldr	r2, [pc, #248]	@ (800b240 <xTaskIncrementTick+0x150>)
 800b146:	6013      	str	r3, [r2, #0]
 800b148:	4a3e      	ldr	r2, [pc, #248]	@ (800b244 <xTaskIncrementTick+0x154>)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6013      	str	r3, [r2, #0]
 800b14e:	4b3e      	ldr	r3, [pc, #248]	@ (800b248 <xTaskIncrementTick+0x158>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	3301      	adds	r3, #1
 800b154:	4a3c      	ldr	r2, [pc, #240]	@ (800b248 <xTaskIncrementTick+0x158>)
 800b156:	6013      	str	r3, [r2, #0]
 800b158:	f000 fad4 	bl	800b704 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b15c:	4b3b      	ldr	r3, [pc, #236]	@ (800b24c <xTaskIncrementTick+0x15c>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	693a      	ldr	r2, [r7, #16]
 800b162:	429a      	cmp	r2, r3
 800b164:	d349      	bcc.n	800b1fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b166:	4b36      	ldr	r3, [pc, #216]	@ (800b240 <xTaskIncrementTick+0x150>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d104      	bne.n	800b17a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b170:	4b36      	ldr	r3, [pc, #216]	@ (800b24c <xTaskIncrementTick+0x15c>)
 800b172:	f04f 32ff 	mov.w	r2, #4294967295
 800b176:	601a      	str	r2, [r3, #0]
					break;
 800b178:	e03f      	b.n	800b1fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b17a:	4b31      	ldr	r3, [pc, #196]	@ (800b240 <xTaskIncrementTick+0x150>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b18a:	693a      	ldr	r2, [r7, #16]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d203      	bcs.n	800b19a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b192:	4a2e      	ldr	r2, [pc, #184]	@ (800b24c <xTaskIncrementTick+0x15c>)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b198:	e02f      	b.n	800b1fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	3304      	adds	r3, #4
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fe ff82 	bl	800a0a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d004      	beq.n	800b1b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	3318      	adds	r3, #24
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7fe ff79 	bl	800a0a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ba:	4b25      	ldr	r3, [pc, #148]	@ (800b250 <xTaskIncrementTick+0x160>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d903      	bls.n	800b1ca <xTaskIncrementTick+0xda>
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c6:	4a22      	ldr	r2, [pc, #136]	@ (800b250 <xTaskIncrementTick+0x160>)
 800b1c8:	6013      	str	r3, [r2, #0]
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	4a1f      	ldr	r2, [pc, #124]	@ (800b254 <xTaskIncrementTick+0x164>)
 800b1d8:	441a      	add	r2, r3
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	3304      	adds	r3, #4
 800b1de:	4619      	mov	r1, r3
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	f7fe ff04 	bl	8009fee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ea:	4b1b      	ldr	r3, [pc, #108]	@ (800b258 <xTaskIncrementTick+0x168>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d3b8      	bcc.n	800b166 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1f8:	e7b5      	b.n	800b166 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b1fa:	4b17      	ldr	r3, [pc, #92]	@ (800b258 <xTaskIncrementTick+0x168>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b200:	4914      	ldr	r1, [pc, #80]	@ (800b254 <xTaskIncrementTick+0x164>)
 800b202:	4613      	mov	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4413      	add	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	440b      	add	r3, r1
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d901      	bls.n	800b216 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b212:	2301      	movs	r3, #1
 800b214:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b216:	4b11      	ldr	r3, [pc, #68]	@ (800b25c <xTaskIncrementTick+0x16c>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d007      	beq.n	800b22e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b21e:	2301      	movs	r3, #1
 800b220:	617b      	str	r3, [r7, #20]
 800b222:	e004      	b.n	800b22e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b224:	4b0e      	ldr	r3, [pc, #56]	@ (800b260 <xTaskIncrementTick+0x170>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	3301      	adds	r3, #1
 800b22a:	4a0d      	ldr	r2, [pc, #52]	@ (800b260 <xTaskIncrementTick+0x170>)
 800b22c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b22e:	697b      	ldr	r3, [r7, #20]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3718      	adds	r7, #24
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	24000f80 	.word	0x24000f80
 800b23c:	24000f5c 	.word	0x24000f5c
 800b240:	24000f10 	.word	0x24000f10
 800b244:	24000f14 	.word	0x24000f14
 800b248:	24000f70 	.word	0x24000f70
 800b24c:	24000f78 	.word	0x24000f78
 800b250:	24000f60 	.word	0x24000f60
 800b254:	24000a88 	.word	0x24000a88
 800b258:	24000a84 	.word	0x24000a84
 800b25c:	24000f6c 	.word	0x24000f6c
 800b260:	24000f68 	.word	0x24000f68

0800b264 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b26a:	4b28      	ldr	r3, [pc, #160]	@ (800b30c <vTaskSwitchContext+0xa8>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d003      	beq.n	800b27a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b272:	4b27      	ldr	r3, [pc, #156]	@ (800b310 <vTaskSwitchContext+0xac>)
 800b274:	2201      	movs	r2, #1
 800b276:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b278:	e042      	b.n	800b300 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b27a:	4b25      	ldr	r3, [pc, #148]	@ (800b310 <vTaskSwitchContext+0xac>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b280:	4b24      	ldr	r3, [pc, #144]	@ (800b314 <vTaskSwitchContext+0xb0>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	60fb      	str	r3, [r7, #12]
 800b286:	e011      	b.n	800b2ac <vTaskSwitchContext+0x48>
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d10b      	bne.n	800b2a6 <vTaskSwitchContext+0x42>
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	607b      	str	r3, [r7, #4]
}
 800b2a0:	bf00      	nop
 800b2a2:	bf00      	nop
 800b2a4:	e7fd      	b.n	800b2a2 <vTaskSwitchContext+0x3e>
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	60fb      	str	r3, [r7, #12]
 800b2ac:	491a      	ldr	r1, [pc, #104]	@ (800b318 <vTaskSwitchContext+0xb4>)
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	4413      	add	r3, r2
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	440b      	add	r3, r1
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d0e3      	beq.n	800b288 <vTaskSwitchContext+0x24>
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	4413      	add	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	4a13      	ldr	r2, [pc, #76]	@ (800b318 <vTaskSwitchContext+0xb4>)
 800b2cc:	4413      	add	r3, r2
 800b2ce:	60bb      	str	r3, [r7, #8]
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	685a      	ldr	r2, [r3, #4]
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	605a      	str	r2, [r3, #4]
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	685a      	ldr	r2, [r3, #4]
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	3308      	adds	r3, #8
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d104      	bne.n	800b2f0 <vTaskSwitchContext+0x8c>
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	605a      	str	r2, [r3, #4]
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	4a09      	ldr	r2, [pc, #36]	@ (800b31c <vTaskSwitchContext+0xb8>)
 800b2f8:	6013      	str	r3, [r2, #0]
 800b2fa:	4a06      	ldr	r2, [pc, #24]	@ (800b314 <vTaskSwitchContext+0xb0>)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6013      	str	r3, [r2, #0]
}
 800b300:	bf00      	nop
 800b302:	3714      	adds	r7, #20
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	24000f80 	.word	0x24000f80
 800b310:	24000f6c 	.word	0x24000f6c
 800b314:	24000f60 	.word	0x24000f60
 800b318:	24000a88 	.word	0x24000a88
 800b31c:	24000a84 	.word	0x24000a84

0800b320 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10b      	bne.n	800b348 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b334:	f383 8811 	msr	BASEPRI, r3
 800b338:	f3bf 8f6f 	isb	sy
 800b33c:	f3bf 8f4f 	dsb	sy
 800b340:	60fb      	str	r3, [r7, #12]
}
 800b342:	bf00      	nop
 800b344:	bf00      	nop
 800b346:	e7fd      	b.n	800b344 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b348:	4b07      	ldr	r3, [pc, #28]	@ (800b368 <vTaskPlaceOnEventList+0x48>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	3318      	adds	r3, #24
 800b34e:	4619      	mov	r1, r3
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f7fe fe70 	bl	800a036 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b356:	2101      	movs	r1, #1
 800b358:	6838      	ldr	r0, [r7, #0]
 800b35a:	f000 fa81 	bl	800b860 <prvAddCurrentTaskToDelayedList>
}
 800b35e:	bf00      	nop
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	24000a84 	.word	0x24000a84

0800b36c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b086      	sub	sp, #24
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d10b      	bne.n	800b396 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b382:	f383 8811 	msr	BASEPRI, r3
 800b386:	f3bf 8f6f 	isb	sy
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	617b      	str	r3, [r7, #20]
}
 800b390:	bf00      	nop
 800b392:	bf00      	nop
 800b394:	e7fd      	b.n	800b392 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b396:	4b0a      	ldr	r3, [pc, #40]	@ (800b3c0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	3318      	adds	r3, #24
 800b39c:	4619      	mov	r1, r3
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	f7fe fe25 	bl	8009fee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d002      	beq.n	800b3b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b3aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b3b0:	6879      	ldr	r1, [r7, #4]
 800b3b2:	68b8      	ldr	r0, [r7, #8]
 800b3b4:	f000 fa54 	bl	800b860 <prvAddCurrentTaskToDelayedList>
	}
 800b3b8:	bf00      	nop
 800b3ba:	3718      	adds	r7, #24
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	24000a84 	.word	0x24000a84

0800b3c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b086      	sub	sp, #24
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d10b      	bne.n	800b3f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3de:	f383 8811 	msr	BASEPRI, r3
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	f3bf 8f4f 	dsb	sy
 800b3ea:	60fb      	str	r3, [r7, #12]
}
 800b3ec:	bf00      	nop
 800b3ee:	bf00      	nop
 800b3f0:	e7fd      	b.n	800b3ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	3318      	adds	r3, #24
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fe fe56 	bl	800a0a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3fc:	4b1d      	ldr	r3, [pc, #116]	@ (800b474 <xTaskRemoveFromEventList+0xb0>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d11d      	bne.n	800b440 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	3304      	adds	r3, #4
 800b408:	4618      	mov	r0, r3
 800b40a:	f7fe fe4d 	bl	800a0a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b412:	4b19      	ldr	r3, [pc, #100]	@ (800b478 <xTaskRemoveFromEventList+0xb4>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	429a      	cmp	r2, r3
 800b418:	d903      	bls.n	800b422 <xTaskRemoveFromEventList+0x5e>
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b41e:	4a16      	ldr	r2, [pc, #88]	@ (800b478 <xTaskRemoveFromEventList+0xb4>)
 800b420:	6013      	str	r3, [r2, #0]
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b426:	4613      	mov	r3, r2
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	4413      	add	r3, r2
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	4a13      	ldr	r2, [pc, #76]	@ (800b47c <xTaskRemoveFromEventList+0xb8>)
 800b430:	441a      	add	r2, r3
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	3304      	adds	r3, #4
 800b436:	4619      	mov	r1, r3
 800b438:	4610      	mov	r0, r2
 800b43a:	f7fe fdd8 	bl	8009fee <vListInsertEnd>
 800b43e:	e005      	b.n	800b44c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	3318      	adds	r3, #24
 800b444:	4619      	mov	r1, r3
 800b446:	480e      	ldr	r0, [pc, #56]	@ (800b480 <xTaskRemoveFromEventList+0xbc>)
 800b448:	f7fe fdd1 	bl	8009fee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b450:	4b0c      	ldr	r3, [pc, #48]	@ (800b484 <xTaskRemoveFromEventList+0xc0>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b456:	429a      	cmp	r2, r3
 800b458:	d905      	bls.n	800b466 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b45a:	2301      	movs	r3, #1
 800b45c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b45e:	4b0a      	ldr	r3, [pc, #40]	@ (800b488 <xTaskRemoveFromEventList+0xc4>)
 800b460:	2201      	movs	r2, #1
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	e001      	b.n	800b46a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b466:	2300      	movs	r3, #0
 800b468:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b46a:	697b      	ldr	r3, [r7, #20]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3718      	adds	r7, #24
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	24000f80 	.word	0x24000f80
 800b478:	24000f60 	.word	0x24000f60
 800b47c:	24000a88 	.word	0x24000a88
 800b480:	24000f18 	.word	0x24000f18
 800b484:	24000a84 	.word	0x24000a84
 800b488:	24000f6c 	.word	0x24000f6c

0800b48c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b494:	4b06      	ldr	r3, [pc, #24]	@ (800b4b0 <vTaskInternalSetTimeOutState+0x24>)
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b49c:	4b05      	ldr	r3, [pc, #20]	@ (800b4b4 <vTaskInternalSetTimeOutState+0x28>)
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	605a      	str	r2, [r3, #4]
}
 800b4a4:	bf00      	nop
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	24000f70 	.word	0x24000f70
 800b4b4:	24000f5c 	.word	0x24000f5c

0800b4b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b088      	sub	sp, #32
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d10b      	bne.n	800b4e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b4c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4cc:	f383 8811 	msr	BASEPRI, r3
 800b4d0:	f3bf 8f6f 	isb	sy
 800b4d4:	f3bf 8f4f 	dsb	sy
 800b4d8:	613b      	str	r3, [r7, #16]
}
 800b4da:	bf00      	nop
 800b4dc:	bf00      	nop
 800b4de:	e7fd      	b.n	800b4dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10b      	bne.n	800b4fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	60fb      	str	r3, [r7, #12]
}
 800b4f8:	bf00      	nop
 800b4fa:	bf00      	nop
 800b4fc:	e7fd      	b.n	800b4fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b4fe:	f000 fe8b 	bl	800c218 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b502:	4b1d      	ldr	r3, [pc, #116]	@ (800b578 <xTaskCheckForTimeOut+0xc0>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	69ba      	ldr	r2, [r7, #24]
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b51a:	d102      	bne.n	800b522 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b51c:	2300      	movs	r3, #0
 800b51e:	61fb      	str	r3, [r7, #28]
 800b520:	e023      	b.n	800b56a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	4b15      	ldr	r3, [pc, #84]	@ (800b57c <xTaskCheckForTimeOut+0xc4>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d007      	beq.n	800b53e <xTaskCheckForTimeOut+0x86>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	69ba      	ldr	r2, [r7, #24]
 800b534:	429a      	cmp	r2, r3
 800b536:	d302      	bcc.n	800b53e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b538:	2301      	movs	r3, #1
 800b53a:	61fb      	str	r3, [r7, #28]
 800b53c:	e015      	b.n	800b56a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	697a      	ldr	r2, [r7, #20]
 800b544:	429a      	cmp	r2, r3
 800b546:	d20b      	bcs.n	800b560 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	1ad2      	subs	r2, r2, r3
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f7ff ff99 	bl	800b48c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b55a:	2300      	movs	r3, #0
 800b55c:	61fb      	str	r3, [r7, #28]
 800b55e:	e004      	b.n	800b56a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	2200      	movs	r2, #0
 800b564:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b566:	2301      	movs	r3, #1
 800b568:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b56a:	f000 fe87 	bl	800c27c <vPortExitCritical>

	return xReturn;
 800b56e:	69fb      	ldr	r3, [r7, #28]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3720      	adds	r7, #32
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	24000f5c 	.word	0x24000f5c
 800b57c:	24000f70 	.word	0x24000f70

0800b580 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b580:	b480      	push	{r7}
 800b582:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b584:	4b03      	ldr	r3, [pc, #12]	@ (800b594 <vTaskMissedYield+0x14>)
 800b586:	2201      	movs	r2, #1
 800b588:	601a      	str	r2, [r3, #0]
}
 800b58a:	bf00      	nop
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr
 800b594:	24000f6c 	.word	0x24000f6c

0800b598 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b5a0:	f000 f852 	bl	800b648 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b5a4:	4b06      	ldr	r3, [pc, #24]	@ (800b5c0 <prvIdleTask+0x28>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d9f9      	bls.n	800b5a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b5ac:	4b05      	ldr	r3, [pc, #20]	@ (800b5c4 <prvIdleTask+0x2c>)
 800b5ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5b2:	601a      	str	r2, [r3, #0]
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b5bc:	e7f0      	b.n	800b5a0 <prvIdleTask+0x8>
 800b5be:	bf00      	nop
 800b5c0:	24000a88 	.word	0x24000a88
 800b5c4:	e000ed04 	.word	0xe000ed04

0800b5c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	607b      	str	r3, [r7, #4]
 800b5d2:	e00c      	b.n	800b5ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	4413      	add	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	4a12      	ldr	r2, [pc, #72]	@ (800b628 <prvInitialiseTaskLists+0x60>)
 800b5e0:	4413      	add	r3, r2
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7fe fcd6 	bl	8009f94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	607b      	str	r3, [r7, #4]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2b37      	cmp	r3, #55	@ 0x37
 800b5f2:	d9ef      	bls.n	800b5d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b5f4:	480d      	ldr	r0, [pc, #52]	@ (800b62c <prvInitialiseTaskLists+0x64>)
 800b5f6:	f7fe fccd 	bl	8009f94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b5fa:	480d      	ldr	r0, [pc, #52]	@ (800b630 <prvInitialiseTaskLists+0x68>)
 800b5fc:	f7fe fcca 	bl	8009f94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b600:	480c      	ldr	r0, [pc, #48]	@ (800b634 <prvInitialiseTaskLists+0x6c>)
 800b602:	f7fe fcc7 	bl	8009f94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b606:	480c      	ldr	r0, [pc, #48]	@ (800b638 <prvInitialiseTaskLists+0x70>)
 800b608:	f7fe fcc4 	bl	8009f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b60c:	480b      	ldr	r0, [pc, #44]	@ (800b63c <prvInitialiseTaskLists+0x74>)
 800b60e:	f7fe fcc1 	bl	8009f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b612:	4b0b      	ldr	r3, [pc, #44]	@ (800b640 <prvInitialiseTaskLists+0x78>)
 800b614:	4a05      	ldr	r2, [pc, #20]	@ (800b62c <prvInitialiseTaskLists+0x64>)
 800b616:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b618:	4b0a      	ldr	r3, [pc, #40]	@ (800b644 <prvInitialiseTaskLists+0x7c>)
 800b61a:	4a05      	ldr	r2, [pc, #20]	@ (800b630 <prvInitialiseTaskLists+0x68>)
 800b61c:	601a      	str	r2, [r3, #0]
}
 800b61e:	bf00      	nop
 800b620:	3708      	adds	r7, #8
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	24000a88 	.word	0x24000a88
 800b62c:	24000ee8 	.word	0x24000ee8
 800b630:	24000efc 	.word	0x24000efc
 800b634:	24000f18 	.word	0x24000f18
 800b638:	24000f2c 	.word	0x24000f2c
 800b63c:	24000f44 	.word	0x24000f44
 800b640:	24000f10 	.word	0x24000f10
 800b644:	24000f14 	.word	0x24000f14

0800b648 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b64e:	e019      	b.n	800b684 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b650:	f000 fde2 	bl	800c218 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b654:	4b10      	ldr	r3, [pc, #64]	@ (800b698 <prvCheckTasksWaitingTermination+0x50>)
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	3304      	adds	r3, #4
 800b660:	4618      	mov	r0, r3
 800b662:	f7fe fd21 	bl	800a0a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b666:	4b0d      	ldr	r3, [pc, #52]	@ (800b69c <prvCheckTasksWaitingTermination+0x54>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	3b01      	subs	r3, #1
 800b66c:	4a0b      	ldr	r2, [pc, #44]	@ (800b69c <prvCheckTasksWaitingTermination+0x54>)
 800b66e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b670:	4b0b      	ldr	r3, [pc, #44]	@ (800b6a0 <prvCheckTasksWaitingTermination+0x58>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	3b01      	subs	r3, #1
 800b676:	4a0a      	ldr	r2, [pc, #40]	@ (800b6a0 <prvCheckTasksWaitingTermination+0x58>)
 800b678:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b67a:	f000 fdff 	bl	800c27c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 f810 	bl	800b6a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b684:	4b06      	ldr	r3, [pc, #24]	@ (800b6a0 <prvCheckTasksWaitingTermination+0x58>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1e1      	bne.n	800b650 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b68c:	bf00      	nop
 800b68e:	bf00      	nop
 800b690:	3708      	adds	r7, #8
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	24000f2c 	.word	0x24000f2c
 800b69c:	24000f58 	.word	0x24000f58
 800b6a0:	24000f40 	.word	0x24000f40

0800b6a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d108      	bne.n	800b6c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f000 ff9c 	bl	800c5f8 <vPortFree>
				vPortFree( pxTCB );
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 ff99 	bl	800c5f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b6c6:	e019      	b.n	800b6fc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d103      	bne.n	800b6da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 ff90 	bl	800c5f8 <vPortFree>
	}
 800b6d8:	e010      	b.n	800b6fc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d00b      	beq.n	800b6fc <prvDeleteTCB+0x58>
	__asm volatile
 800b6e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e8:	f383 8811 	msr	BASEPRI, r3
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	f3bf 8f4f 	dsb	sy
 800b6f4:	60fb      	str	r3, [r7, #12]
}
 800b6f6:	bf00      	nop
 800b6f8:	bf00      	nop
 800b6fa:	e7fd      	b.n	800b6f8 <prvDeleteTCB+0x54>
	}
 800b6fc:	bf00      	nop
 800b6fe:	3710      	adds	r7, #16
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b70a:	4b0c      	ldr	r3, [pc, #48]	@ (800b73c <prvResetNextTaskUnblockTime+0x38>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d104      	bne.n	800b71e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b714:	4b0a      	ldr	r3, [pc, #40]	@ (800b740 <prvResetNextTaskUnblockTime+0x3c>)
 800b716:	f04f 32ff 	mov.w	r2, #4294967295
 800b71a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b71c:	e008      	b.n	800b730 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b71e:	4b07      	ldr	r3, [pc, #28]	@ (800b73c <prvResetNextTaskUnblockTime+0x38>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	4a04      	ldr	r2, [pc, #16]	@ (800b740 <prvResetNextTaskUnblockTime+0x3c>)
 800b72e:	6013      	str	r3, [r2, #0]
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	24000f10 	.word	0x24000f10
 800b740:	24000f78 	.word	0x24000f78

0800b744 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b74a:	4b0b      	ldr	r3, [pc, #44]	@ (800b778 <xTaskGetSchedulerState+0x34>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d102      	bne.n	800b758 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b752:	2301      	movs	r3, #1
 800b754:	607b      	str	r3, [r7, #4]
 800b756:	e008      	b.n	800b76a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b758:	4b08      	ldr	r3, [pc, #32]	@ (800b77c <xTaskGetSchedulerState+0x38>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d102      	bne.n	800b766 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b760:	2302      	movs	r3, #2
 800b762:	607b      	str	r3, [r7, #4]
 800b764:	e001      	b.n	800b76a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b766:	2300      	movs	r3, #0
 800b768:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b76a:	687b      	ldr	r3, [r7, #4]
	}
 800b76c:	4618      	mov	r0, r3
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr
 800b778:	24000f64 	.word	0x24000f64
 800b77c:	24000f80 	.word	0x24000f80

0800b780 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b780:	b580      	push	{r7, lr}
 800b782:	b086      	sub	sp, #24
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b78c:	2300      	movs	r3, #0
 800b78e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d058      	beq.n	800b848 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b796:	4b2f      	ldr	r3, [pc, #188]	@ (800b854 <xTaskPriorityDisinherit+0xd4>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	693a      	ldr	r2, [r7, #16]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d00b      	beq.n	800b7b8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a4:	f383 8811 	msr	BASEPRI, r3
 800b7a8:	f3bf 8f6f 	isb	sy
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	60fb      	str	r3, [r7, #12]
}
 800b7b2:	bf00      	nop
 800b7b4:	bf00      	nop
 800b7b6:	e7fd      	b.n	800b7b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10b      	bne.n	800b7d8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c4:	f383 8811 	msr	BASEPRI, r3
 800b7c8:	f3bf 8f6f 	isb	sy
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	60bb      	str	r3, [r7, #8]
}
 800b7d2:	bf00      	nop
 800b7d4:	bf00      	nop
 800b7d6:	e7fd      	b.n	800b7d4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7dc:	1e5a      	subs	r2, r3, #1
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d02c      	beq.n	800b848 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d128      	bne.n	800b848 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7fe fc54 	bl	800a0a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b80c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b818:	4b0f      	ldr	r3, [pc, #60]	@ (800b858 <xTaskPriorityDisinherit+0xd8>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d903      	bls.n	800b828 <xTaskPriorityDisinherit+0xa8>
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b824:	4a0c      	ldr	r2, [pc, #48]	@ (800b858 <xTaskPriorityDisinherit+0xd8>)
 800b826:	6013      	str	r3, [r2, #0]
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b82c:	4613      	mov	r3, r2
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	4413      	add	r3, r2
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	4a09      	ldr	r2, [pc, #36]	@ (800b85c <xTaskPriorityDisinherit+0xdc>)
 800b836:	441a      	add	r2, r3
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	3304      	adds	r3, #4
 800b83c:	4619      	mov	r1, r3
 800b83e:	4610      	mov	r0, r2
 800b840:	f7fe fbd5 	bl	8009fee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b844:	2301      	movs	r3, #1
 800b846:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b848:	697b      	ldr	r3, [r7, #20]
	}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3718      	adds	r7, #24
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	24000a84 	.word	0x24000a84
 800b858:	24000f60 	.word	0x24000f60
 800b85c:	24000a88 	.word	0x24000a88

0800b860 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b86a:	4b21      	ldr	r3, [pc, #132]	@ (800b8f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b870:	4b20      	ldr	r3, [pc, #128]	@ (800b8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	3304      	adds	r3, #4
 800b876:	4618      	mov	r0, r3
 800b878:	f7fe fc16 	bl	800a0a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b882:	d10a      	bne.n	800b89a <prvAddCurrentTaskToDelayedList+0x3a>
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d007      	beq.n	800b89a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b88a:	4b1a      	ldr	r3, [pc, #104]	@ (800b8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	3304      	adds	r3, #4
 800b890:	4619      	mov	r1, r3
 800b892:	4819      	ldr	r0, [pc, #100]	@ (800b8f8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b894:	f7fe fbab 	bl	8009fee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b898:	e026      	b.n	800b8e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b89a:	68fa      	ldr	r2, [r7, #12]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	4413      	add	r3, r2
 800b8a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b8a2:	4b14      	ldr	r3, [pc, #80]	@ (800b8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	68ba      	ldr	r2, [r7, #8]
 800b8a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d209      	bcs.n	800b8c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8b2:	4b12      	ldr	r3, [pc, #72]	@ (800b8fc <prvAddCurrentTaskToDelayedList+0x9c>)
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	3304      	adds	r3, #4
 800b8bc:	4619      	mov	r1, r3
 800b8be:	4610      	mov	r0, r2
 800b8c0:	f7fe fbb9 	bl	800a036 <vListInsert>
}
 800b8c4:	e010      	b.n	800b8e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8c6:	4b0e      	ldr	r3, [pc, #56]	@ (800b900 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	4b0a      	ldr	r3, [pc, #40]	@ (800b8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	3304      	adds	r3, #4
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	4610      	mov	r0, r2
 800b8d4:	f7fe fbaf 	bl	800a036 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b904 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d202      	bcs.n	800b8e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b8e2:	4a08      	ldr	r2, [pc, #32]	@ (800b904 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	6013      	str	r3, [r2, #0]
}
 800b8e8:	bf00      	nop
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	24000f5c 	.word	0x24000f5c
 800b8f4:	24000a84 	.word	0x24000a84
 800b8f8:	24000f44 	.word	0x24000f44
 800b8fc:	24000f14 	.word	0x24000f14
 800b900:	24000f10 	.word	0x24000f10
 800b904:	24000f78 	.word	0x24000f78

0800b908 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b08a      	sub	sp, #40	@ 0x28
 800b90c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b90e:	2300      	movs	r3, #0
 800b910:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b912:	f000 fb13 	bl	800bf3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b916:	4b1d      	ldr	r3, [pc, #116]	@ (800b98c <xTimerCreateTimerTask+0x84>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d021      	beq.n	800b962 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b91e:	2300      	movs	r3, #0
 800b920:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b922:	2300      	movs	r3, #0
 800b924:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b926:	1d3a      	adds	r2, r7, #4
 800b928:	f107 0108 	add.w	r1, r7, #8
 800b92c:	f107 030c 	add.w	r3, r7, #12
 800b930:	4618      	mov	r0, r3
 800b932:	f7fe fb15 	bl	8009f60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b936:	6879      	ldr	r1, [r7, #4]
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	9202      	str	r2, [sp, #8]
 800b93e:	9301      	str	r3, [sp, #4]
 800b940:	2302      	movs	r3, #2
 800b942:	9300      	str	r3, [sp, #0]
 800b944:	2300      	movs	r3, #0
 800b946:	460a      	mov	r2, r1
 800b948:	4911      	ldr	r1, [pc, #68]	@ (800b990 <xTimerCreateTimerTask+0x88>)
 800b94a:	4812      	ldr	r0, [pc, #72]	@ (800b994 <xTimerCreateTimerTask+0x8c>)
 800b94c:	f7ff f8d0 	bl	800aaf0 <xTaskCreateStatic>
 800b950:	4603      	mov	r3, r0
 800b952:	4a11      	ldr	r2, [pc, #68]	@ (800b998 <xTimerCreateTimerTask+0x90>)
 800b954:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b956:	4b10      	ldr	r3, [pc, #64]	@ (800b998 <xTimerCreateTimerTask+0x90>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d001      	beq.n	800b962 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b95e:	2301      	movs	r3, #1
 800b960:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d10b      	bne.n	800b980 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b96c:	f383 8811 	msr	BASEPRI, r3
 800b970:	f3bf 8f6f 	isb	sy
 800b974:	f3bf 8f4f 	dsb	sy
 800b978:	613b      	str	r3, [r7, #16]
}
 800b97a:	bf00      	nop
 800b97c:	bf00      	nop
 800b97e:	e7fd      	b.n	800b97c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b980:	697b      	ldr	r3, [r7, #20]
}
 800b982:	4618      	mov	r0, r3
 800b984:	3718      	adds	r7, #24
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	24000fb4 	.word	0x24000fb4
 800b990:	0800e810 	.word	0x0800e810
 800b994:	0800bad5 	.word	0x0800bad5
 800b998:	24000fb8 	.word	0x24000fb8

0800b99c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b08a      	sub	sp, #40	@ 0x28
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
 800b9a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d10b      	bne.n	800b9cc <xTimerGenericCommand+0x30>
	__asm volatile
 800b9b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b8:	f383 8811 	msr	BASEPRI, r3
 800b9bc:	f3bf 8f6f 	isb	sy
 800b9c0:	f3bf 8f4f 	dsb	sy
 800b9c4:	623b      	str	r3, [r7, #32]
}
 800b9c6:	bf00      	nop
 800b9c8:	bf00      	nop
 800b9ca:	e7fd      	b.n	800b9c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b9cc:	4b19      	ldr	r3, [pc, #100]	@ (800ba34 <xTimerGenericCommand+0x98>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d02a      	beq.n	800ba2a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	2b05      	cmp	r3, #5
 800b9e4:	dc18      	bgt.n	800ba18 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b9e6:	f7ff fead 	bl	800b744 <xTaskGetSchedulerState>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	2b02      	cmp	r3, #2
 800b9ee:	d109      	bne.n	800ba04 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b9f0:	4b10      	ldr	r3, [pc, #64]	@ (800ba34 <xTimerGenericCommand+0x98>)
 800b9f2:	6818      	ldr	r0, [r3, #0]
 800b9f4:	f107 0110 	add.w	r1, r7, #16
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9fc:	f7fe fc88 	bl	800a310 <xQueueGenericSend>
 800ba00:	6278      	str	r0, [r7, #36]	@ 0x24
 800ba02:	e012      	b.n	800ba2a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ba04:	4b0b      	ldr	r3, [pc, #44]	@ (800ba34 <xTimerGenericCommand+0x98>)
 800ba06:	6818      	ldr	r0, [r3, #0]
 800ba08:	f107 0110 	add.w	r1, r7, #16
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f7fe fc7e 	bl	800a310 <xQueueGenericSend>
 800ba14:	6278      	str	r0, [r7, #36]	@ 0x24
 800ba16:	e008      	b.n	800ba2a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ba18:	4b06      	ldr	r3, [pc, #24]	@ (800ba34 <xTimerGenericCommand+0x98>)
 800ba1a:	6818      	ldr	r0, [r3, #0]
 800ba1c:	f107 0110 	add.w	r1, r7, #16
 800ba20:	2300      	movs	r3, #0
 800ba22:	683a      	ldr	r2, [r7, #0]
 800ba24:	f7fe fd76 	bl	800a514 <xQueueGenericSendFromISR>
 800ba28:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3728      	adds	r7, #40	@ 0x28
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	24000fb4 	.word	0x24000fb4

0800ba38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b088      	sub	sp, #32
 800ba3c:	af02      	add	r7, sp, #8
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba42:	4b23      	ldr	r3, [pc, #140]	@ (800bad0 <prvProcessExpiredTimer+0x98>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	3304      	adds	r3, #4
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7fe fb29 	bl	800a0a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba5c:	f003 0304 	and.w	r3, r3, #4
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d023      	beq.n	800baac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	699a      	ldr	r2, [r3, #24]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	18d1      	adds	r1, r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	683a      	ldr	r2, [r7, #0]
 800ba70:	6978      	ldr	r0, [r7, #20]
 800ba72:	f000 f8d5 	bl	800bc20 <prvInsertTimerInActiveList>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d020      	beq.n	800babe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	9300      	str	r3, [sp, #0]
 800ba80:	2300      	movs	r3, #0
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	2100      	movs	r1, #0
 800ba86:	6978      	ldr	r0, [r7, #20]
 800ba88:	f7ff ff88 	bl	800b99c <xTimerGenericCommand>
 800ba8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d114      	bne.n	800babe <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ba94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba98:	f383 8811 	msr	BASEPRI, r3
 800ba9c:	f3bf 8f6f 	isb	sy
 800baa0:	f3bf 8f4f 	dsb	sy
 800baa4:	60fb      	str	r3, [r7, #12]
}
 800baa6:	bf00      	nop
 800baa8:	bf00      	nop
 800baaa:	e7fd      	b.n	800baa8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bab2:	f023 0301 	bic.w	r3, r3, #1
 800bab6:	b2da      	uxtb	r2, r3
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	6a1b      	ldr	r3, [r3, #32]
 800bac2:	6978      	ldr	r0, [r7, #20]
 800bac4:	4798      	blx	r3
}
 800bac6:	bf00      	nop
 800bac8:	3718      	adds	r7, #24
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	24000fac 	.word	0x24000fac

0800bad4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800badc:	f107 0308 	add.w	r3, r7, #8
 800bae0:	4618      	mov	r0, r3
 800bae2:	f000 f859 	bl	800bb98 <prvGetNextExpireTime>
 800bae6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	4619      	mov	r1, r3
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	f000 f805 	bl	800bafc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800baf2:	f000 f8d7 	bl	800bca4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800baf6:	bf00      	nop
 800baf8:	e7f0      	b.n	800badc <prvTimerTask+0x8>
	...

0800bafc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bb06:	f7ff fa37 	bl	800af78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb0a:	f107 0308 	add.w	r3, r7, #8
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f000 f866 	bl	800bbe0 <prvSampleTimeNow>
 800bb14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d130      	bne.n	800bb7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d10a      	bne.n	800bb38 <prvProcessTimerOrBlockTask+0x3c>
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d806      	bhi.n	800bb38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bb2a:	f7ff fa33 	bl	800af94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bb2e:	68f9      	ldr	r1, [r7, #12]
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f7ff ff81 	bl	800ba38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bb36:	e024      	b.n	800bb82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d008      	beq.n	800bb50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb3e:	4b13      	ldr	r3, [pc, #76]	@ (800bb8c <prvProcessTimerOrBlockTask+0x90>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d101      	bne.n	800bb4c <prvProcessTimerOrBlockTask+0x50>
 800bb48:	2301      	movs	r3, #1
 800bb4a:	e000      	b.n	800bb4e <prvProcessTimerOrBlockTask+0x52>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb50:	4b0f      	ldr	r3, [pc, #60]	@ (800bb90 <prvProcessTimerOrBlockTask+0x94>)
 800bb52:	6818      	ldr	r0, [r3, #0]
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	1ad3      	subs	r3, r2, r3
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	f7fe ff93 	bl	800aa88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb62:	f7ff fa17 	bl	800af94 <xTaskResumeAll>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d10a      	bne.n	800bb82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bb6c:	4b09      	ldr	r3, [pc, #36]	@ (800bb94 <prvProcessTimerOrBlockTask+0x98>)
 800bb6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb72:	601a      	str	r2, [r3, #0]
 800bb74:	f3bf 8f4f 	dsb	sy
 800bb78:	f3bf 8f6f 	isb	sy
}
 800bb7c:	e001      	b.n	800bb82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bb7e:	f7ff fa09 	bl	800af94 <xTaskResumeAll>
}
 800bb82:	bf00      	nop
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	24000fb0 	.word	0x24000fb0
 800bb90:	24000fb4 	.word	0x24000fb4
 800bb94:	e000ed04 	.word	0xe000ed04

0800bb98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bba0:	4b0e      	ldr	r3, [pc, #56]	@ (800bbdc <prvGetNextExpireTime+0x44>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d101      	bne.n	800bbae <prvGetNextExpireTime+0x16>
 800bbaa:	2201      	movs	r2, #1
 800bbac:	e000      	b.n	800bbb0 <prvGetNextExpireTime+0x18>
 800bbae:	2200      	movs	r2, #0
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d105      	bne.n	800bbc8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbbc:	4b07      	ldr	r3, [pc, #28]	@ (800bbdc <prvGetNextExpireTime+0x44>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	60fb      	str	r3, [r7, #12]
 800bbc6:	e001      	b.n	800bbcc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3714      	adds	r7, #20
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	24000fac 	.word	0x24000fac

0800bbe0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bbe8:	f7ff fa72 	bl	800b0d0 <xTaskGetTickCount>
 800bbec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bbee:	4b0b      	ldr	r3, [pc, #44]	@ (800bc1c <prvSampleTimeNow+0x3c>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	68fa      	ldr	r2, [r7, #12]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d205      	bcs.n	800bc04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bbf8:	f000 f93a 	bl	800be70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	601a      	str	r2, [r3, #0]
 800bc02:	e002      	b.n	800bc0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bc0a:	4a04      	ldr	r2, [pc, #16]	@ (800bc1c <prvSampleTimeNow+0x3c>)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bc10:	68fb      	ldr	r3, [r7, #12]
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	24000fbc 	.word	0x24000fbc

0800bc20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	607a      	str	r2, [r7, #4]
 800bc2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	68ba      	ldr	r2, [r7, #8]
 800bc36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	68fa      	ldr	r2, [r7, #12]
 800bc3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d812      	bhi.n	800bc6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	1ad2      	subs	r2, r2, r3
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	699b      	ldr	r3, [r3, #24]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d302      	bcc.n	800bc5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc54:	2301      	movs	r3, #1
 800bc56:	617b      	str	r3, [r7, #20]
 800bc58:	e01b      	b.n	800bc92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc5a:	4b10      	ldr	r3, [pc, #64]	@ (800bc9c <prvInsertTimerInActiveList+0x7c>)
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	3304      	adds	r3, #4
 800bc62:	4619      	mov	r1, r3
 800bc64:	4610      	mov	r0, r2
 800bc66:	f7fe f9e6 	bl	800a036 <vListInsert>
 800bc6a:	e012      	b.n	800bc92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d206      	bcs.n	800bc82 <prvInsertTimerInActiveList+0x62>
 800bc74:	68ba      	ldr	r2, [r7, #8]
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d302      	bcc.n	800bc82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	617b      	str	r3, [r7, #20]
 800bc80:	e007      	b.n	800bc92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc82:	4b07      	ldr	r3, [pc, #28]	@ (800bca0 <prvInsertTimerInActiveList+0x80>)
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	3304      	adds	r3, #4
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	4610      	mov	r0, r2
 800bc8e:	f7fe f9d2 	bl	800a036 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bc92:	697b      	ldr	r3, [r7, #20]
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3718      	adds	r7, #24
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	24000fb0 	.word	0x24000fb0
 800bca0:	24000fac 	.word	0x24000fac

0800bca4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b08e      	sub	sp, #56	@ 0x38
 800bca8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bcaa:	e0ce      	b.n	800be4a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	da19      	bge.n	800bce6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bcb2:	1d3b      	adds	r3, r7, #4
 800bcb4:	3304      	adds	r3, #4
 800bcb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bcb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d10b      	bne.n	800bcd6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bcbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	61fb      	str	r3, [r7, #28]
}
 800bcd0:	bf00      	nop
 800bcd2:	bf00      	nop
 800bcd4:	e7fd      	b.n	800bcd2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bcd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcdc:	6850      	ldr	r0, [r2, #4]
 800bcde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bce0:	6892      	ldr	r2, [r2, #8]
 800bce2:	4611      	mov	r1, r2
 800bce4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f2c0 80ae 	blt.w	800be4a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bcf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcf4:	695b      	ldr	r3, [r3, #20]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d004      	beq.n	800bd04 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcfc:	3304      	adds	r3, #4
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fe f9d2 	bl	800a0a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd04:	463b      	mov	r3, r7
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7ff ff6a 	bl	800bbe0 <prvSampleTimeNow>
 800bd0c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2b09      	cmp	r3, #9
 800bd12:	f200 8097 	bhi.w	800be44 <prvProcessReceivedCommands+0x1a0>
 800bd16:	a201      	add	r2, pc, #4	@ (adr r2, 800bd1c <prvProcessReceivedCommands+0x78>)
 800bd18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd1c:	0800bd45 	.word	0x0800bd45
 800bd20:	0800bd45 	.word	0x0800bd45
 800bd24:	0800bd45 	.word	0x0800bd45
 800bd28:	0800bdbb 	.word	0x0800bdbb
 800bd2c:	0800bdcf 	.word	0x0800bdcf
 800bd30:	0800be1b 	.word	0x0800be1b
 800bd34:	0800bd45 	.word	0x0800bd45
 800bd38:	0800bd45 	.word	0x0800bd45
 800bd3c:	0800bdbb 	.word	0x0800bdbb
 800bd40:	0800bdcf 	.word	0x0800bdcf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd4a:	f043 0301 	orr.w	r3, r3, #1
 800bd4e:	b2da      	uxtb	r2, r3
 800bd50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd56:	68ba      	ldr	r2, [r7, #8]
 800bd58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd5a:	699b      	ldr	r3, [r3, #24]
 800bd5c:	18d1      	adds	r1, r2, r3
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd64:	f7ff ff5c 	bl	800bc20 <prvInsertTimerInActiveList>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d06c      	beq.n	800be48 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd70:	6a1b      	ldr	r3, [r3, #32]
 800bd72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd7c:	f003 0304 	and.w	r3, r3, #4
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d061      	beq.n	800be48 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bd84:	68ba      	ldr	r2, [r7, #8]
 800bd86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	441a      	add	r2, r3
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	9300      	str	r3, [sp, #0]
 800bd90:	2300      	movs	r3, #0
 800bd92:	2100      	movs	r1, #0
 800bd94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd96:	f7ff fe01 	bl	800b99c <xTimerGenericCommand>
 800bd9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bd9c:	6a3b      	ldr	r3, [r7, #32]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d152      	bne.n	800be48 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bda6:	f383 8811 	msr	BASEPRI, r3
 800bdaa:	f3bf 8f6f 	isb	sy
 800bdae:	f3bf 8f4f 	dsb	sy
 800bdb2:	61bb      	str	r3, [r7, #24]
}
 800bdb4:	bf00      	nop
 800bdb6:	bf00      	nop
 800bdb8:	e7fd      	b.n	800bdb6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdc0:	f023 0301 	bic.w	r3, r3, #1
 800bdc4:	b2da      	uxtb	r2, r3
 800bdc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bdcc:	e03d      	b.n	800be4a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bdce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdd4:	f043 0301 	orr.w	r3, r3, #1
 800bdd8:	b2da      	uxtb	r2, r3
 800bdda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bddc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bde0:	68ba      	ldr	r2, [r7, #8]
 800bde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bde4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bde6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10b      	bne.n	800be06 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bdee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf2:	f383 8811 	msr	BASEPRI, r3
 800bdf6:	f3bf 8f6f 	isb	sy
 800bdfa:	f3bf 8f4f 	dsb	sy
 800bdfe:	617b      	str	r3, [r7, #20]
}
 800be00:	bf00      	nop
 800be02:	bf00      	nop
 800be04:	e7fd      	b.n	800be02 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800be06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be08:	699a      	ldr	r2, [r3, #24]
 800be0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be0c:	18d1      	adds	r1, r2, r3
 800be0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be14:	f7ff ff04 	bl	800bc20 <prvInsertTimerInActiveList>
					break;
 800be18:	e017      	b.n	800be4a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800be1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be20:	f003 0302 	and.w	r3, r3, #2
 800be24:	2b00      	cmp	r3, #0
 800be26:	d103      	bne.n	800be30 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800be28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be2a:	f000 fbe5 	bl	800c5f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800be2e:	e00c      	b.n	800be4a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be36:	f023 0301 	bic.w	r3, r3, #1
 800be3a:	b2da      	uxtb	r2, r3
 800be3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800be42:	e002      	b.n	800be4a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800be44:	bf00      	nop
 800be46:	e000      	b.n	800be4a <prvProcessReceivedCommands+0x1a6>
					break;
 800be48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be4a:	4b08      	ldr	r3, [pc, #32]	@ (800be6c <prvProcessReceivedCommands+0x1c8>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	1d39      	adds	r1, r7, #4
 800be50:	2200      	movs	r2, #0
 800be52:	4618      	mov	r0, r3
 800be54:	f7fe fbfc 	bl	800a650 <xQueueReceive>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f47f af26 	bne.w	800bcac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800be60:	bf00      	nop
 800be62:	bf00      	nop
 800be64:	3730      	adds	r7, #48	@ 0x30
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	24000fb4 	.word	0x24000fb4

0800be70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b088      	sub	sp, #32
 800be74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be76:	e049      	b.n	800bf0c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be78:	4b2e      	ldr	r3, [pc, #184]	@ (800bf34 <prvSwitchTimerLists+0xc4>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	68db      	ldr	r3, [r3, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be82:	4b2c      	ldr	r3, [pc, #176]	@ (800bf34 <prvSwitchTimerLists+0xc4>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	3304      	adds	r3, #4
 800be90:	4618      	mov	r0, r3
 800be92:	f7fe f909 	bl	800a0a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6a1b      	ldr	r3, [r3, #32]
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bea4:	f003 0304 	and.w	r3, r3, #4
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d02f      	beq.n	800bf0c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	693a      	ldr	r2, [r7, #16]
 800beb2:	4413      	add	r3, r2
 800beb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800beb6:	68ba      	ldr	r2, [r7, #8]
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d90e      	bls.n	800bedc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	68ba      	ldr	r2, [r7, #8]
 800bec2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	68fa      	ldr	r2, [r7, #12]
 800bec8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800beca:	4b1a      	ldr	r3, [pc, #104]	@ (800bf34 <prvSwitchTimerLists+0xc4>)
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	3304      	adds	r3, #4
 800bed2:	4619      	mov	r1, r3
 800bed4:	4610      	mov	r0, r2
 800bed6:	f7fe f8ae 	bl	800a036 <vListInsert>
 800beda:	e017      	b.n	800bf0c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bedc:	2300      	movs	r3, #0
 800bede:	9300      	str	r3, [sp, #0]
 800bee0:	2300      	movs	r3, #0
 800bee2:	693a      	ldr	r2, [r7, #16]
 800bee4:	2100      	movs	r1, #0
 800bee6:	68f8      	ldr	r0, [r7, #12]
 800bee8:	f7ff fd58 	bl	800b99c <xTimerGenericCommand>
 800beec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10b      	bne.n	800bf0c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	603b      	str	r3, [r7, #0]
}
 800bf06:	bf00      	nop
 800bf08:	bf00      	nop
 800bf0a:	e7fd      	b.n	800bf08 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf0c:	4b09      	ldr	r3, [pc, #36]	@ (800bf34 <prvSwitchTimerLists+0xc4>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1b0      	bne.n	800be78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bf16:	4b07      	ldr	r3, [pc, #28]	@ (800bf34 <prvSwitchTimerLists+0xc4>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bf1c:	4b06      	ldr	r3, [pc, #24]	@ (800bf38 <prvSwitchTimerLists+0xc8>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a04      	ldr	r2, [pc, #16]	@ (800bf34 <prvSwitchTimerLists+0xc4>)
 800bf22:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bf24:	4a04      	ldr	r2, [pc, #16]	@ (800bf38 <prvSwitchTimerLists+0xc8>)
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	6013      	str	r3, [r2, #0]
}
 800bf2a:	bf00      	nop
 800bf2c:	3718      	adds	r7, #24
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	24000fac 	.word	0x24000fac
 800bf38:	24000fb0 	.word	0x24000fb0

0800bf3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bf42:	f000 f969 	bl	800c218 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bf46:	4b15      	ldr	r3, [pc, #84]	@ (800bf9c <prvCheckForValidListAndQueue+0x60>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d120      	bne.n	800bf90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bf4e:	4814      	ldr	r0, [pc, #80]	@ (800bfa0 <prvCheckForValidListAndQueue+0x64>)
 800bf50:	f7fe f820 	bl	8009f94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf54:	4813      	ldr	r0, [pc, #76]	@ (800bfa4 <prvCheckForValidListAndQueue+0x68>)
 800bf56:	f7fe f81d 	bl	8009f94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf5a:	4b13      	ldr	r3, [pc, #76]	@ (800bfa8 <prvCheckForValidListAndQueue+0x6c>)
 800bf5c:	4a10      	ldr	r2, [pc, #64]	@ (800bfa0 <prvCheckForValidListAndQueue+0x64>)
 800bf5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bf60:	4b12      	ldr	r3, [pc, #72]	@ (800bfac <prvCheckForValidListAndQueue+0x70>)
 800bf62:	4a10      	ldr	r2, [pc, #64]	@ (800bfa4 <prvCheckForValidListAndQueue+0x68>)
 800bf64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bf66:	2300      	movs	r3, #0
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	4b11      	ldr	r3, [pc, #68]	@ (800bfb0 <prvCheckForValidListAndQueue+0x74>)
 800bf6c:	4a11      	ldr	r2, [pc, #68]	@ (800bfb4 <prvCheckForValidListAndQueue+0x78>)
 800bf6e:	2110      	movs	r1, #16
 800bf70:	200a      	movs	r0, #10
 800bf72:	f7fe f92d 	bl	800a1d0 <xQueueGenericCreateStatic>
 800bf76:	4603      	mov	r3, r0
 800bf78:	4a08      	ldr	r2, [pc, #32]	@ (800bf9c <prvCheckForValidListAndQueue+0x60>)
 800bf7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bf7c:	4b07      	ldr	r3, [pc, #28]	@ (800bf9c <prvCheckForValidListAndQueue+0x60>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d005      	beq.n	800bf90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bf84:	4b05      	ldr	r3, [pc, #20]	@ (800bf9c <prvCheckForValidListAndQueue+0x60>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	490b      	ldr	r1, [pc, #44]	@ (800bfb8 <prvCheckForValidListAndQueue+0x7c>)
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fe fd52 	bl	800aa34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf90:	f000 f974 	bl	800c27c <vPortExitCritical>
}
 800bf94:	bf00      	nop
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	24000fb4 	.word	0x24000fb4
 800bfa0:	24000f84 	.word	0x24000f84
 800bfa4:	24000f98 	.word	0x24000f98
 800bfa8:	24000fac 	.word	0x24000fac
 800bfac:	24000fb0 	.word	0x24000fb0
 800bfb0:	24001060 	.word	0x24001060
 800bfb4:	24000fc0 	.word	0x24000fc0
 800bfb8:	0800e818 	.word	0x0800e818

0800bfbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	3b04      	subs	r3, #4
 800bfcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bfd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	3b04      	subs	r3, #4
 800bfda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	f023 0201 	bic.w	r2, r3, #1
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	3b04      	subs	r3, #4
 800bfea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bfec:	4a0c      	ldr	r2, [pc, #48]	@ (800c020 <pxPortInitialiseStack+0x64>)
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	3b14      	subs	r3, #20
 800bff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	3b04      	subs	r3, #4
 800c002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f06f 0202 	mvn.w	r2, #2
 800c00a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	3b20      	subs	r3, #32
 800c010:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c012:	68fb      	ldr	r3, [r7, #12]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3714      	adds	r7, #20
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr
 800c020:	0800c025 	.word	0x0800c025

0800c024 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c02a:	2300      	movs	r3, #0
 800c02c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c02e:	4b13      	ldr	r3, [pc, #76]	@ (800c07c <prvTaskExitError+0x58>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c036:	d00b      	beq.n	800c050 <prvTaskExitError+0x2c>
	__asm volatile
 800c038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c03c:	f383 8811 	msr	BASEPRI, r3
 800c040:	f3bf 8f6f 	isb	sy
 800c044:	f3bf 8f4f 	dsb	sy
 800c048:	60fb      	str	r3, [r7, #12]
}
 800c04a:	bf00      	nop
 800c04c:	bf00      	nop
 800c04e:	e7fd      	b.n	800c04c <prvTaskExitError+0x28>
	__asm volatile
 800c050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c054:	f383 8811 	msr	BASEPRI, r3
 800c058:	f3bf 8f6f 	isb	sy
 800c05c:	f3bf 8f4f 	dsb	sy
 800c060:	60bb      	str	r3, [r7, #8]
}
 800c062:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c064:	bf00      	nop
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d0fc      	beq.n	800c066 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c06c:	bf00      	nop
 800c06e:	bf00      	nop
 800c070:	3714      	adds	r7, #20
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop
 800c07c:	24000010 	.word	0x24000010

0800c080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c080:	4b07      	ldr	r3, [pc, #28]	@ (800c0a0 <pxCurrentTCBConst2>)
 800c082:	6819      	ldr	r1, [r3, #0]
 800c084:	6808      	ldr	r0, [r1, #0]
 800c086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c08a:	f380 8809 	msr	PSP, r0
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f04f 0000 	mov.w	r0, #0
 800c096:	f380 8811 	msr	BASEPRI, r0
 800c09a:	4770      	bx	lr
 800c09c:	f3af 8000 	nop.w

0800c0a0 <pxCurrentTCBConst2>:
 800c0a0:	24000a84 	.word	0x24000a84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c0a4:	bf00      	nop
 800c0a6:	bf00      	nop

0800c0a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c0a8:	4808      	ldr	r0, [pc, #32]	@ (800c0cc <prvPortStartFirstTask+0x24>)
 800c0aa:	6800      	ldr	r0, [r0, #0]
 800c0ac:	6800      	ldr	r0, [r0, #0]
 800c0ae:	f380 8808 	msr	MSP, r0
 800c0b2:	f04f 0000 	mov.w	r0, #0
 800c0b6:	f380 8814 	msr	CONTROL, r0
 800c0ba:	b662      	cpsie	i
 800c0bc:	b661      	cpsie	f
 800c0be:	f3bf 8f4f 	dsb	sy
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	df00      	svc	0
 800c0c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c0ca:	bf00      	nop
 800c0cc:	e000ed08 	.word	0xe000ed08

0800c0d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b086      	sub	sp, #24
 800c0d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c0d6:	4b47      	ldr	r3, [pc, #284]	@ (800c1f4 <xPortStartScheduler+0x124>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a47      	ldr	r2, [pc, #284]	@ (800c1f8 <xPortStartScheduler+0x128>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d10b      	bne.n	800c0f8 <xPortStartScheduler+0x28>
	__asm volatile
 800c0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	613b      	str	r3, [r7, #16]
}
 800c0f2:	bf00      	nop
 800c0f4:	bf00      	nop
 800c0f6:	e7fd      	b.n	800c0f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c0f8:	4b3e      	ldr	r3, [pc, #248]	@ (800c1f4 <xPortStartScheduler+0x124>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a3f      	ldr	r2, [pc, #252]	@ (800c1fc <xPortStartScheduler+0x12c>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d10b      	bne.n	800c11a <xPortStartScheduler+0x4a>
	__asm volatile
 800c102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c106:	f383 8811 	msr	BASEPRI, r3
 800c10a:	f3bf 8f6f 	isb	sy
 800c10e:	f3bf 8f4f 	dsb	sy
 800c112:	60fb      	str	r3, [r7, #12]
}
 800c114:	bf00      	nop
 800c116:	bf00      	nop
 800c118:	e7fd      	b.n	800c116 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c11a:	4b39      	ldr	r3, [pc, #228]	@ (800c200 <xPortStartScheduler+0x130>)
 800c11c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	b2db      	uxtb	r3, r3
 800c124:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	22ff      	movs	r2, #255	@ 0xff
 800c12a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	b2db      	uxtb	r3, r3
 800c132:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c134:	78fb      	ldrb	r3, [r7, #3]
 800c136:	b2db      	uxtb	r3, r3
 800c138:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c13c:	b2da      	uxtb	r2, r3
 800c13e:	4b31      	ldr	r3, [pc, #196]	@ (800c204 <xPortStartScheduler+0x134>)
 800c140:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c142:	4b31      	ldr	r3, [pc, #196]	@ (800c208 <xPortStartScheduler+0x138>)
 800c144:	2207      	movs	r2, #7
 800c146:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c148:	e009      	b.n	800c15e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c14a:	4b2f      	ldr	r3, [pc, #188]	@ (800c208 <xPortStartScheduler+0x138>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	3b01      	subs	r3, #1
 800c150:	4a2d      	ldr	r2, [pc, #180]	@ (800c208 <xPortStartScheduler+0x138>)
 800c152:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c154:	78fb      	ldrb	r3, [r7, #3]
 800c156:	b2db      	uxtb	r3, r3
 800c158:	005b      	lsls	r3, r3, #1
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c15e:	78fb      	ldrb	r3, [r7, #3]
 800c160:	b2db      	uxtb	r3, r3
 800c162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c166:	2b80      	cmp	r3, #128	@ 0x80
 800c168:	d0ef      	beq.n	800c14a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c16a:	4b27      	ldr	r3, [pc, #156]	@ (800c208 <xPortStartScheduler+0x138>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f1c3 0307 	rsb	r3, r3, #7
 800c172:	2b04      	cmp	r3, #4
 800c174:	d00b      	beq.n	800c18e <xPortStartScheduler+0xbe>
	__asm volatile
 800c176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c17a:	f383 8811 	msr	BASEPRI, r3
 800c17e:	f3bf 8f6f 	isb	sy
 800c182:	f3bf 8f4f 	dsb	sy
 800c186:	60bb      	str	r3, [r7, #8]
}
 800c188:	bf00      	nop
 800c18a:	bf00      	nop
 800c18c:	e7fd      	b.n	800c18a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c18e:	4b1e      	ldr	r3, [pc, #120]	@ (800c208 <xPortStartScheduler+0x138>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	021b      	lsls	r3, r3, #8
 800c194:	4a1c      	ldr	r2, [pc, #112]	@ (800c208 <xPortStartScheduler+0x138>)
 800c196:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c198:	4b1b      	ldr	r3, [pc, #108]	@ (800c208 <xPortStartScheduler+0x138>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c1a0:	4a19      	ldr	r2, [pc, #100]	@ (800c208 <xPortStartScheduler+0x138>)
 800c1a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	b2da      	uxtb	r2, r3
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c1ac:	4b17      	ldr	r3, [pc, #92]	@ (800c20c <xPortStartScheduler+0x13c>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a16      	ldr	r2, [pc, #88]	@ (800c20c <xPortStartScheduler+0x13c>)
 800c1b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c1b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c1b8:	4b14      	ldr	r3, [pc, #80]	@ (800c20c <xPortStartScheduler+0x13c>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a13      	ldr	r2, [pc, #76]	@ (800c20c <xPortStartScheduler+0x13c>)
 800c1be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c1c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c1c4:	f000 f8da 	bl	800c37c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c1c8:	4b11      	ldr	r3, [pc, #68]	@ (800c210 <xPortStartScheduler+0x140>)
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c1ce:	f000 f8f9 	bl	800c3c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c1d2:	4b10      	ldr	r3, [pc, #64]	@ (800c214 <xPortStartScheduler+0x144>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4a0f      	ldr	r2, [pc, #60]	@ (800c214 <xPortStartScheduler+0x144>)
 800c1d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c1dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c1de:	f7ff ff63 	bl	800c0a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c1e2:	f7ff f83f 	bl	800b264 <vTaskSwitchContext>
	prvTaskExitError();
 800c1e6:	f7ff ff1d 	bl	800c024 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3718      	adds	r7, #24
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	e000ed00 	.word	0xe000ed00
 800c1f8:	410fc271 	.word	0x410fc271
 800c1fc:	410fc270 	.word	0x410fc270
 800c200:	e000e400 	.word	0xe000e400
 800c204:	240010b0 	.word	0x240010b0
 800c208:	240010b4 	.word	0x240010b4
 800c20c:	e000ed20 	.word	0xe000ed20
 800c210:	24000010 	.word	0x24000010
 800c214:	e000ef34 	.word	0xe000ef34

0800c218 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c218:	b480      	push	{r7}
 800c21a:	b083      	sub	sp, #12
 800c21c:	af00      	add	r7, sp, #0
	__asm volatile
 800c21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c222:	f383 8811 	msr	BASEPRI, r3
 800c226:	f3bf 8f6f 	isb	sy
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	607b      	str	r3, [r7, #4]
}
 800c230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c232:	4b10      	ldr	r3, [pc, #64]	@ (800c274 <vPortEnterCritical+0x5c>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	3301      	adds	r3, #1
 800c238:	4a0e      	ldr	r2, [pc, #56]	@ (800c274 <vPortEnterCritical+0x5c>)
 800c23a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c23c:	4b0d      	ldr	r3, [pc, #52]	@ (800c274 <vPortEnterCritical+0x5c>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2b01      	cmp	r3, #1
 800c242:	d110      	bne.n	800c266 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c244:	4b0c      	ldr	r3, [pc, #48]	@ (800c278 <vPortEnterCritical+0x60>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00b      	beq.n	800c266 <vPortEnterCritical+0x4e>
	__asm volatile
 800c24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	603b      	str	r3, [r7, #0]
}
 800c260:	bf00      	nop
 800c262:	bf00      	nop
 800c264:	e7fd      	b.n	800c262 <vPortEnterCritical+0x4a>
	}
}
 800c266:	bf00      	nop
 800c268:	370c      	adds	r7, #12
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	24000010 	.word	0x24000010
 800c278:	e000ed04 	.word	0xe000ed04

0800c27c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c282:	4b12      	ldr	r3, [pc, #72]	@ (800c2cc <vPortExitCritical+0x50>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d10b      	bne.n	800c2a2 <vPortExitCritical+0x26>
	__asm volatile
 800c28a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c28e:	f383 8811 	msr	BASEPRI, r3
 800c292:	f3bf 8f6f 	isb	sy
 800c296:	f3bf 8f4f 	dsb	sy
 800c29a:	607b      	str	r3, [r7, #4]
}
 800c29c:	bf00      	nop
 800c29e:	bf00      	nop
 800c2a0:	e7fd      	b.n	800c29e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c2a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c2cc <vPortExitCritical+0x50>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	4a08      	ldr	r2, [pc, #32]	@ (800c2cc <vPortExitCritical+0x50>)
 800c2aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c2ac:	4b07      	ldr	r3, [pc, #28]	@ (800c2cc <vPortExitCritical+0x50>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d105      	bne.n	800c2c0 <vPortExitCritical+0x44>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	f383 8811 	msr	BASEPRI, r3
}
 800c2be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c2c0:	bf00      	nop
 800c2c2:	370c      	adds	r7, #12
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	24000010 	.word	0x24000010

0800c2d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c2d0:	f3ef 8009 	mrs	r0, PSP
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	4b15      	ldr	r3, [pc, #84]	@ (800c330 <pxCurrentTCBConst>)
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	f01e 0f10 	tst.w	lr, #16
 800c2e0:	bf08      	it	eq
 800c2e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c2e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ea:	6010      	str	r0, [r2, #0]
 800c2ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c2f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c2f4:	f380 8811 	msr	BASEPRI, r0
 800c2f8:	f3bf 8f4f 	dsb	sy
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f7fe ffb0 	bl	800b264 <vTaskSwitchContext>
 800c304:	f04f 0000 	mov.w	r0, #0
 800c308:	f380 8811 	msr	BASEPRI, r0
 800c30c:	bc09      	pop	{r0, r3}
 800c30e:	6819      	ldr	r1, [r3, #0]
 800c310:	6808      	ldr	r0, [r1, #0]
 800c312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c316:	f01e 0f10 	tst.w	lr, #16
 800c31a:	bf08      	it	eq
 800c31c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c320:	f380 8809 	msr	PSP, r0
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	f3af 8000 	nop.w

0800c330 <pxCurrentTCBConst>:
 800c330:	24000a84 	.word	0x24000a84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c334:	bf00      	nop
 800c336:	bf00      	nop

0800c338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
	__asm volatile
 800c33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c342:	f383 8811 	msr	BASEPRI, r3
 800c346:	f3bf 8f6f 	isb	sy
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	607b      	str	r3, [r7, #4]
}
 800c350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c352:	f7fe fecd 	bl	800b0f0 <xTaskIncrementTick>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d003      	beq.n	800c364 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c35c:	4b06      	ldr	r3, [pc, #24]	@ (800c378 <xPortSysTickHandler+0x40>)
 800c35e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c362:	601a      	str	r2, [r3, #0]
 800c364:	2300      	movs	r3, #0
 800c366:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	f383 8811 	msr	BASEPRI, r3
}
 800c36e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c370:	bf00      	nop
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	e000ed04 	.word	0xe000ed04

0800c37c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c37c:	b480      	push	{r7}
 800c37e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c380:	4b0b      	ldr	r3, [pc, #44]	@ (800c3b0 <vPortSetupTimerInterrupt+0x34>)
 800c382:	2200      	movs	r2, #0
 800c384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c386:	4b0b      	ldr	r3, [pc, #44]	@ (800c3b4 <vPortSetupTimerInterrupt+0x38>)
 800c388:	2200      	movs	r2, #0
 800c38a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c38c:	4b0a      	ldr	r3, [pc, #40]	@ (800c3b8 <vPortSetupTimerInterrupt+0x3c>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a0a      	ldr	r2, [pc, #40]	@ (800c3bc <vPortSetupTimerInterrupt+0x40>)
 800c392:	fba2 2303 	umull	r2, r3, r2, r3
 800c396:	099b      	lsrs	r3, r3, #6
 800c398:	4a09      	ldr	r2, [pc, #36]	@ (800c3c0 <vPortSetupTimerInterrupt+0x44>)
 800c39a:	3b01      	subs	r3, #1
 800c39c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c39e:	4b04      	ldr	r3, [pc, #16]	@ (800c3b0 <vPortSetupTimerInterrupt+0x34>)
 800c3a0:	2207      	movs	r2, #7
 800c3a2:	601a      	str	r2, [r3, #0]
}
 800c3a4:	bf00      	nop
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr
 800c3ae:	bf00      	nop
 800c3b0:	e000e010 	.word	0xe000e010
 800c3b4:	e000e018 	.word	0xe000e018
 800c3b8:	24000000 	.word	0x24000000
 800c3bc:	10624dd3 	.word	0x10624dd3
 800c3c0:	e000e014 	.word	0xe000e014

0800c3c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c3c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c3d4 <vPortEnableVFP+0x10>
 800c3c8:	6801      	ldr	r1, [r0, #0]
 800c3ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c3ce:	6001      	str	r1, [r0, #0]
 800c3d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c3d2:	bf00      	nop
 800c3d4:	e000ed88 	.word	0xe000ed88

0800c3d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c3d8:	b480      	push	{r7}
 800c3da:	b085      	sub	sp, #20
 800c3dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c3de:	f3ef 8305 	mrs	r3, IPSR
 800c3e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2b0f      	cmp	r3, #15
 800c3e8:	d915      	bls.n	800c416 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c3ea:	4a18      	ldr	r2, [pc, #96]	@ (800c44c <vPortValidateInterruptPriority+0x74>)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	4413      	add	r3, r2
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c3f4:	4b16      	ldr	r3, [pc, #88]	@ (800c450 <vPortValidateInterruptPriority+0x78>)
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	7afa      	ldrb	r2, [r7, #11]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d20b      	bcs.n	800c416 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	607b      	str	r3, [r7, #4]
}
 800c410:	bf00      	nop
 800c412:	bf00      	nop
 800c414:	e7fd      	b.n	800c412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c416:	4b0f      	ldr	r3, [pc, #60]	@ (800c454 <vPortValidateInterruptPriority+0x7c>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c41e:	4b0e      	ldr	r3, [pc, #56]	@ (800c458 <vPortValidateInterruptPriority+0x80>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	429a      	cmp	r2, r3
 800c424:	d90b      	bls.n	800c43e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c42a:	f383 8811 	msr	BASEPRI, r3
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	603b      	str	r3, [r7, #0]
}
 800c438:	bf00      	nop
 800c43a:	bf00      	nop
 800c43c:	e7fd      	b.n	800c43a <vPortValidateInterruptPriority+0x62>
	}
 800c43e:	bf00      	nop
 800c440:	3714      	adds	r7, #20
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	e000e3f0 	.word	0xe000e3f0
 800c450:	240010b0 	.word	0x240010b0
 800c454:	e000ed0c 	.word	0xe000ed0c
 800c458:	240010b4 	.word	0x240010b4

0800c45c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b08a      	sub	sp, #40	@ 0x28
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c464:	2300      	movs	r3, #0
 800c466:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c468:	f7fe fd86 	bl	800af78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c46c:	4b5c      	ldr	r3, [pc, #368]	@ (800c5e0 <pvPortMalloc+0x184>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d101      	bne.n	800c478 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c474:	f000 f924 	bl	800c6c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c478:	4b5a      	ldr	r3, [pc, #360]	@ (800c5e4 <pvPortMalloc+0x188>)
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	4013      	ands	r3, r2
 800c480:	2b00      	cmp	r3, #0
 800c482:	f040 8095 	bne.w	800c5b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d01e      	beq.n	800c4ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c48c:	2208      	movs	r2, #8
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4413      	add	r3, r2
 800c492:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f003 0307 	and.w	r3, r3, #7
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d015      	beq.n	800c4ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f023 0307 	bic.w	r3, r3, #7
 800c4a4:	3308      	adds	r3, #8
 800c4a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f003 0307 	and.w	r3, r3, #7
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d00b      	beq.n	800c4ca <pvPortMalloc+0x6e>
	__asm volatile
 800c4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b6:	f383 8811 	msr	BASEPRI, r3
 800c4ba:	f3bf 8f6f 	isb	sy
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	617b      	str	r3, [r7, #20]
}
 800c4c4:	bf00      	nop
 800c4c6:	bf00      	nop
 800c4c8:	e7fd      	b.n	800c4c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d06f      	beq.n	800c5b0 <pvPortMalloc+0x154>
 800c4d0:	4b45      	ldr	r3, [pc, #276]	@ (800c5e8 <pvPortMalloc+0x18c>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d86a      	bhi.n	800c5b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c4da:	4b44      	ldr	r3, [pc, #272]	@ (800c5ec <pvPortMalloc+0x190>)
 800c4dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c4de:	4b43      	ldr	r3, [pc, #268]	@ (800c5ec <pvPortMalloc+0x190>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4e4:	e004      	b.n	800c4f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d903      	bls.n	800c502 <pvPortMalloc+0xa6>
 800c4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d1f1      	bne.n	800c4e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c502:	4b37      	ldr	r3, [pc, #220]	@ (800c5e0 <pvPortMalloc+0x184>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c508:	429a      	cmp	r2, r3
 800c50a:	d051      	beq.n	800c5b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c50c:	6a3b      	ldr	r3, [r7, #32]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2208      	movs	r2, #8
 800c512:	4413      	add	r3, r2
 800c514:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	6a3b      	ldr	r3, [r7, #32]
 800c51c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c520:	685a      	ldr	r2, [r3, #4]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	1ad2      	subs	r2, r2, r3
 800c526:	2308      	movs	r3, #8
 800c528:	005b      	lsls	r3, r3, #1
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d920      	bls.n	800c570 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c52e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4413      	add	r3, r2
 800c534:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	f003 0307 	and.w	r3, r3, #7
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00b      	beq.n	800c558 <pvPortMalloc+0xfc>
	__asm volatile
 800c540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	613b      	str	r3, [r7, #16]
}
 800c552:	bf00      	nop
 800c554:	bf00      	nop
 800c556:	e7fd      	b.n	800c554 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c55a:	685a      	ldr	r2, [r3, #4]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	1ad2      	subs	r2, r2, r3
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c56a:	69b8      	ldr	r0, [r7, #24]
 800c56c:	f000 f90a 	bl	800c784 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c570:	4b1d      	ldr	r3, [pc, #116]	@ (800c5e8 <pvPortMalloc+0x18c>)
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	1ad3      	subs	r3, r2, r3
 800c57a:	4a1b      	ldr	r2, [pc, #108]	@ (800c5e8 <pvPortMalloc+0x18c>)
 800c57c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c57e:	4b1a      	ldr	r3, [pc, #104]	@ (800c5e8 <pvPortMalloc+0x18c>)
 800c580:	681a      	ldr	r2, [r3, #0]
 800c582:	4b1b      	ldr	r3, [pc, #108]	@ (800c5f0 <pvPortMalloc+0x194>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	429a      	cmp	r2, r3
 800c588:	d203      	bcs.n	800c592 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c58a:	4b17      	ldr	r3, [pc, #92]	@ (800c5e8 <pvPortMalloc+0x18c>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	4a18      	ldr	r2, [pc, #96]	@ (800c5f0 <pvPortMalloc+0x194>)
 800c590:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c594:	685a      	ldr	r2, [r3, #4]
 800c596:	4b13      	ldr	r3, [pc, #76]	@ (800c5e4 <pvPortMalloc+0x188>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	431a      	orrs	r2, r3
 800c59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c5a6:	4b13      	ldr	r3, [pc, #76]	@ (800c5f4 <pvPortMalloc+0x198>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	4a11      	ldr	r2, [pc, #68]	@ (800c5f4 <pvPortMalloc+0x198>)
 800c5ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c5b0:	f7fe fcf0 	bl	800af94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	f003 0307 	and.w	r3, r3, #7
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00b      	beq.n	800c5d6 <pvPortMalloc+0x17a>
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	60fb      	str	r3, [r7, #12]
}
 800c5d0:	bf00      	nop
 800c5d2:	bf00      	nop
 800c5d4:	e7fd      	b.n	800c5d2 <pvPortMalloc+0x176>
	return pvReturn;
 800c5d6:	69fb      	ldr	r3, [r7, #28]
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3728      	adds	r7, #40	@ 0x28
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	24004cc0 	.word	0x24004cc0
 800c5e4:	24004cd4 	.word	0x24004cd4
 800c5e8:	24004cc4 	.word	0x24004cc4
 800c5ec:	24004cb8 	.word	0x24004cb8
 800c5f0:	24004cc8 	.word	0x24004cc8
 800c5f4:	24004ccc 	.word	0x24004ccc

0800c5f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d04f      	beq.n	800c6aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c60a:	2308      	movs	r3, #8
 800c60c:	425b      	negs	r3, r3
 800c60e:	697a      	ldr	r2, [r7, #20]
 800c610:	4413      	add	r3, r2
 800c612:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	685a      	ldr	r2, [r3, #4]
 800c61c:	4b25      	ldr	r3, [pc, #148]	@ (800c6b4 <vPortFree+0xbc>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4013      	ands	r3, r2
 800c622:	2b00      	cmp	r3, #0
 800c624:	d10b      	bne.n	800c63e <vPortFree+0x46>
	__asm volatile
 800c626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	60fb      	str	r3, [r7, #12]
}
 800c638:	bf00      	nop
 800c63a:	bf00      	nop
 800c63c:	e7fd      	b.n	800c63a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00b      	beq.n	800c65e <vPortFree+0x66>
	__asm volatile
 800c646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c64a:	f383 8811 	msr	BASEPRI, r3
 800c64e:	f3bf 8f6f 	isb	sy
 800c652:	f3bf 8f4f 	dsb	sy
 800c656:	60bb      	str	r3, [r7, #8]
}
 800c658:	bf00      	nop
 800c65a:	bf00      	nop
 800c65c:	e7fd      	b.n	800c65a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	685a      	ldr	r2, [r3, #4]
 800c662:	4b14      	ldr	r3, [pc, #80]	@ (800c6b4 <vPortFree+0xbc>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4013      	ands	r3, r2
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d01e      	beq.n	800c6aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d11a      	bne.n	800c6aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	685a      	ldr	r2, [r3, #4]
 800c678:	4b0e      	ldr	r3, [pc, #56]	@ (800c6b4 <vPortFree+0xbc>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	43db      	mvns	r3, r3
 800c67e:	401a      	ands	r2, r3
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c684:	f7fe fc78 	bl	800af78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	685a      	ldr	r2, [r3, #4]
 800c68c:	4b0a      	ldr	r3, [pc, #40]	@ (800c6b8 <vPortFree+0xc0>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4413      	add	r3, r2
 800c692:	4a09      	ldr	r2, [pc, #36]	@ (800c6b8 <vPortFree+0xc0>)
 800c694:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c696:	6938      	ldr	r0, [r7, #16]
 800c698:	f000 f874 	bl	800c784 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c69c:	4b07      	ldr	r3, [pc, #28]	@ (800c6bc <vPortFree+0xc4>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	4a06      	ldr	r2, [pc, #24]	@ (800c6bc <vPortFree+0xc4>)
 800c6a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c6a6:	f7fe fc75 	bl	800af94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c6aa:	bf00      	nop
 800c6ac:	3718      	adds	r7, #24
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	24004cd4 	.word	0x24004cd4
 800c6b8:	24004cc4 	.word	0x24004cc4
 800c6bc:	24004cd0 	.word	0x24004cd0

0800c6c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b085      	sub	sp, #20
 800c6c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c6c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c6ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c6cc:	4b27      	ldr	r3, [pc, #156]	@ (800c76c <prvHeapInit+0xac>)
 800c6ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f003 0307 	and.w	r3, r3, #7
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d00c      	beq.n	800c6f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	3307      	adds	r3, #7
 800c6de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f023 0307 	bic.w	r3, r3, #7
 800c6e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c6e8:	68ba      	ldr	r2, [r7, #8]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	1ad3      	subs	r3, r2, r3
 800c6ee:	4a1f      	ldr	r2, [pc, #124]	@ (800c76c <prvHeapInit+0xac>)
 800c6f0:	4413      	add	r3, r2
 800c6f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c6f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c770 <prvHeapInit+0xb0>)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c6fe:	4b1c      	ldr	r3, [pc, #112]	@ (800c770 <prvHeapInit+0xb0>)
 800c700:	2200      	movs	r2, #0
 800c702:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	4413      	add	r3, r2
 800c70a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c70c:	2208      	movs	r2, #8
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	1a9b      	subs	r3, r3, r2
 800c712:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f023 0307 	bic.w	r3, r3, #7
 800c71a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	4a15      	ldr	r2, [pc, #84]	@ (800c774 <prvHeapInit+0xb4>)
 800c720:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c722:	4b14      	ldr	r3, [pc, #80]	@ (800c774 <prvHeapInit+0xb4>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2200      	movs	r2, #0
 800c728:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c72a:	4b12      	ldr	r3, [pc, #72]	@ (800c774 <prvHeapInit+0xb4>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2200      	movs	r2, #0
 800c730:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	1ad2      	subs	r2, r2, r3
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c740:	4b0c      	ldr	r3, [pc, #48]	@ (800c774 <prvHeapInit+0xb4>)
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	4a0a      	ldr	r2, [pc, #40]	@ (800c778 <prvHeapInit+0xb8>)
 800c74e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	4a09      	ldr	r2, [pc, #36]	@ (800c77c <prvHeapInit+0xbc>)
 800c756:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c758:	4b09      	ldr	r3, [pc, #36]	@ (800c780 <prvHeapInit+0xc0>)
 800c75a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c75e:	601a      	str	r2, [r3, #0]
}
 800c760:	bf00      	nop
 800c762:	3714      	adds	r7, #20
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr
 800c76c:	240010b8 	.word	0x240010b8
 800c770:	24004cb8 	.word	0x24004cb8
 800c774:	24004cc0 	.word	0x24004cc0
 800c778:	24004cc8 	.word	0x24004cc8
 800c77c:	24004cc4 	.word	0x24004cc4
 800c780:	24004cd4 	.word	0x24004cd4

0800c784 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c784:	b480      	push	{r7}
 800c786:	b085      	sub	sp, #20
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c78c:	4b28      	ldr	r3, [pc, #160]	@ (800c830 <prvInsertBlockIntoFreeList+0xac>)
 800c78e:	60fb      	str	r3, [r7, #12]
 800c790:	e002      	b.n	800c798 <prvInsertBlockIntoFreeList+0x14>
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	60fb      	str	r3, [r7, #12]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d8f7      	bhi.n	800c792 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	68ba      	ldr	r2, [r7, #8]
 800c7ac:	4413      	add	r3, r2
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d108      	bne.n	800c7c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	685a      	ldr	r2, [r3, #4]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	441a      	add	r2, r3
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	68ba      	ldr	r2, [r7, #8]
 800c7d0:	441a      	add	r2, r3
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d118      	bne.n	800c80c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	4b15      	ldr	r3, [pc, #84]	@ (800c834 <prvInsertBlockIntoFreeList+0xb0>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d00d      	beq.n	800c802 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	685a      	ldr	r2, [r3, #4]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	441a      	add	r2, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	601a      	str	r2, [r3, #0]
 800c800:	e008      	b.n	800c814 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c802:	4b0c      	ldr	r3, [pc, #48]	@ (800c834 <prvInsertBlockIntoFreeList+0xb0>)
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	601a      	str	r2, [r3, #0]
 800c80a:	e003      	b.n	800c814 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d002      	beq.n	800c822 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c822:	bf00      	nop
 800c824:	3714      	adds	r7, #20
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop
 800c830:	24004cb8 	.word	0x24004cb8
 800c834:	24004cc0 	.word	0x24004cc0

0800c838 <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 800c83c:	2200      	movs	r2, #0
 800c83e:	2108      	movs	r1, #8
 800c840:	480a      	ldr	r0, [pc, #40]	@ (800c86c <ad7606_Init+0x34>)
 800c842:	f7f7 f8ad 	bl	80039a0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800c846:	2001      	movs	r0, #1
 800c848:	f7f4 ffc4 	bl	80017d4 <HAL_Delay>
    AD7606_RST_SET();
 800c84c:	2201      	movs	r2, #1
 800c84e:	2108      	movs	r1, #8
 800c850:	4806      	ldr	r0, [pc, #24]	@ (800c86c <ad7606_Init+0x34>)
 800c852:	f7f7 f8a5 	bl	80039a0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800c856:	2001      	movs	r0, #1
 800c858:	f7f4 ffbc 	bl	80017d4 <HAL_Delay>
    AD7606_RST_RESET();
 800c85c:	2200      	movs	r2, #0
 800c85e:	2108      	movs	r1, #8
 800c860:	4802      	ldr	r0, [pc, #8]	@ (800c86c <ad7606_Init+0x34>)
 800c862:	f7f7 f89d 	bl	80039a0 <HAL_GPIO_WritePin>
}
 800c866:	bf00      	nop
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	58021800 	.word	0x58021800

0800c870 <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b084      	sub	sp, #16
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	4613      	mov	r3, r2
 800c87c:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 800c87e:	2200      	movs	r2, #0
 800c880:	2180      	movs	r1, #128	@ 0x80
 800c882:	4809      	ldr	r0, [pc, #36]	@ (800c8a8 <ad7606_Read+0x38>)
 800c884:	f7f7 f88c 	bl	80039a0 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 800c888:	88fa      	ldrh	r2, [r7, #6]
 800c88a:	2364      	movs	r3, #100	@ 0x64
 800c88c:	68b9      	ldr	r1, [r7, #8]
 800c88e:	68f8      	ldr	r0, [r7, #12]
 800c890:	f7fb fbfe 	bl	8008090 <HAL_SPI_Receive>
    AD7606_CS_SET();
 800c894:	2201      	movs	r2, #1
 800c896:	2180      	movs	r1, #128	@ 0x80
 800c898:	4803      	ldr	r0, [pc, #12]	@ (800c8a8 <ad7606_Read+0x38>)
 800c89a:	f7f7 f881 	bl	80039a0 <HAL_GPIO_WritePin>
}
 800c89e:	bf00      	nop
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	58021800 	.word	0x58021800

0800c8ac <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 800c8b6:	6839      	ldr	r1, [r7, #0]
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f7fc f847 	bl	800894c <HAL_TIM_PWM_Start>
}
 800c8be:	bf00      	nop
 800c8c0:	3708      	adds	r7, #8
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
	...

0800c8c8 <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b087      	sub	sp, #28
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	607a      	str	r2, [r7, #4]
 800c8d4:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	617b      	str	r3, [r7, #20]
 800c8da:	e03d      	b.n	800c958 <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	005b      	lsls	r3, r3, #1
 800c8e0:	68fa      	ldr	r2, [r7, #12]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	da0f      	bge.n	800c90c <ad7606_Convert+0x44>
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	005b      	lsls	r3, r3, #1
 800c8f0:	68fa      	ldr	r2, [r7, #12]
 800c8f2:	4413      	add	r3, r2
 800c8f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	425b      	negs	r3, r3
 800c8fc:	b29b      	uxth	r3, r3
 800c8fe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c902:	b29b      	uxth	r3, r3
 800c904:	425b      	negs	r3, r3
 800c906:	b29b      	uxth	r3, r3
 800c908:	b21b      	sxth	r3, r3
 800c90a:	e005      	b.n	800c918 <ad7606_Convert+0x50>
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	005b      	lsls	r3, r3, #1
 800c910:	68fa      	ldr	r2, [r7, #12]
 800c912:	4413      	add	r3, r2
 800c914:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c918:	697a      	ldr	r2, [r7, #20]
 800c91a:	0052      	lsls	r2, r2, #1
 800c91c:	68f9      	ldr	r1, [r7, #12]
 800c91e:	440a      	add	r2, r1
 800c920:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	005b      	lsls	r3, r3, #1
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	4413      	add	r3, r2
 800c92a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c92e:	ee07 3a90 	vmov	s15, r3
 800c932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c936:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800c93a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	4413      	add	r3, r2
 800c946:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800c970 <ad7606_Convert+0xa8>
 800c94a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c94e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	3301      	adds	r3, #1
 800c956:	617b      	str	r3, [r7, #20]
 800c958:	897b      	ldrh	r3, [r7, #10]
 800c95a:	697a      	ldr	r2, [r7, #20]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	dbbd      	blt.n	800c8dc <ad7606_Convert+0x14>
    }
}
 800c960:	bf00      	nop
 800c962:	bf00      	nop
 800c964:	371c      	adds	r7, #28
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop
 800c970:	47000000 	.word	0x47000000

0800c974 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 800c974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c978:	b087      	sub	sp, #28
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	60f8      	str	r0, [r7, #12]
 800c97e:	460b      	mov	r3, r1
 800c980:	607a      	str	r2, [r7, #4]
 800c982:	817b      	strh	r3, [r7, #10]
 800c984:	466b      	mov	r3, sp
 800c986:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 800c988:	8979      	ldrh	r1, [r7, #10]
 800c98a:	460b      	mov	r3, r1
 800c98c:	3b01      	subs	r3, #1
 800c98e:	617b      	str	r3, [r7, #20]
 800c990:	b28b      	uxth	r3, r1
 800c992:	2200      	movs	r2, #0
 800c994:	4698      	mov	r8, r3
 800c996:	4691      	mov	r9, r2
 800c998:	f04f 0200 	mov.w	r2, #0
 800c99c:	f04f 0300 	mov.w	r3, #0
 800c9a0:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800c9a4:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800c9a8:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800c9ac:	b28b      	uxth	r3, r1
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	461c      	mov	r4, r3
 800c9b2:	4615      	mov	r5, r2
 800c9b4:	f04f 0200 	mov.w	r2, #0
 800c9b8:	f04f 0300 	mov.w	r3, #0
 800c9bc:	012b      	lsls	r3, r5, #4
 800c9be:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800c9c2:	0122      	lsls	r2, r4, #4
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	005b      	lsls	r3, r3, #1
 800c9c8:	3307      	adds	r3, #7
 800c9ca:	08db      	lsrs	r3, r3, #3
 800c9cc:	00db      	lsls	r3, r3, #3
 800c9ce:	ebad 0d03 	sub.w	sp, sp, r3
 800c9d2:	466b      	mov	r3, sp
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	085b      	lsrs	r3, r3, #1
 800c9d8:	005b      	lsls	r3, r3, #1
 800c9da:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 800c9dc:	897b      	ldrh	r3, [r7, #10]
 800c9de:	461a      	mov	r2, r3
 800c9e0:	6939      	ldr	r1, [r7, #16]
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	f7ff ff44 	bl	800c870 <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 800c9e8:	897b      	ldrh	r3, [r7, #10]
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	6938      	ldr	r0, [r7, #16]
 800c9f0:	f7ff ff6a 	bl	800c8c8 <ad7606_Convert>
 800c9f4:	46b5      	mov	sp, r6
}
 800c9f6:	bf00      	nop
 800c9f8:	371c      	adds	r7, #28
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ca00 <INA228_readReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要读取的寄存器地址
 * @return 寄存器中的值
 */
uint64_t INA228_readReg(INA228_Handle sensor, uint8_t regAddr)
{
 800ca00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca04:	b08d      	sub	sp, #52	@ 0x34
 800ca06:	af04      	add	r7, sp, #16
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	70fb      	strb	r3, [r7, #3]
	uint64_t value;
	int i;

	uint8_t rxBuf[5] = {0}; // max buffer size
 800ca0e:	2300      	movs	r3, #0
 800ca10:	60fb      	str	r3, [r7, #12]
 800ca12:	2300      	movs	r3, #0
 800ca14:	743b      	strb	r3, [r7, #16]
	// 读取寄存器值
	HAL_I2C_Mem_Read(sensor->hi2c, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, rxBuf, INA228_regSize[regAddr], 100);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	69d8      	ldr	r0, [r3, #28]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ca20:	461e      	mov	r6, r3
 800ca22:	78fb      	ldrb	r3, [r7, #3]
 800ca24:	b29a      	uxth	r2, r3
 800ca26:	78fb      	ldrb	r3, [r7, #3]
 800ca28:	4920      	ldr	r1, [pc, #128]	@ (800caac <INA228_readReg+0xac>)
 800ca2a:	5ccb      	ldrb	r3, [r1, r3]
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	2364      	movs	r3, #100	@ 0x64
 800ca30:	9302      	str	r3, [sp, #8]
 800ca32:	9101      	str	r1, [sp, #4]
 800ca34:	f107 030c 	add.w	r3, r7, #12
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	4631      	mov	r1, r6
 800ca3e:	f7f7 f899 	bl	8003b74 <HAL_I2C_Mem_Read>

	// 合并字节
	value = rxBuf[0];
 800ca42:	7b3b      	ldrb	r3, [r7, #12]
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	2200      	movs	r2, #0
 800ca48:	469a      	mov	sl, r3
 800ca4a:	4693      	mov	fp, r2
 800ca4c:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 800ca50:	2301      	movs	r3, #1
 800ca52:	617b      	str	r3, [r7, #20]
 800ca54:	e01b      	b.n	800ca8e <INA228_readReg+0x8e>
	{
		value = (value << 8) | rxBuf[i];
 800ca56:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ca5a:	f04f 0200 	mov.w	r2, #0
 800ca5e:	f04f 0300 	mov.w	r3, #0
 800ca62:	020b      	lsls	r3, r1, #8
 800ca64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca68:	0202      	lsls	r2, r0, #8
 800ca6a:	f107 000c 	add.w	r0, r7, #12
 800ca6e:	6979      	ldr	r1, [r7, #20]
 800ca70:	4401      	add	r1, r0
 800ca72:	7809      	ldrb	r1, [r1, #0]
 800ca74:	b2c9      	uxtb	r1, r1
 800ca76:	2000      	movs	r0, #0
 800ca78:	460c      	mov	r4, r1
 800ca7a:	4605      	mov	r5, r0
 800ca7c:	ea42 0804 	orr.w	r8, r2, r4
 800ca80:	ea43 0905 	orr.w	r9, r3, r5
 800ca84:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	617b      	str	r3, [r7, #20]
 800ca8e:	78fb      	ldrb	r3, [r7, #3]
 800ca90:	4a06      	ldr	r2, [pc, #24]	@ (800caac <INA228_readReg+0xac>)
 800ca92:	5cd3      	ldrb	r3, [r2, r3]
 800ca94:	461a      	mov	r2, r3
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	dbdc      	blt.n	800ca56 <INA228_readReg+0x56>
	}

	return value;
 800ca9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800caa0:	4610      	mov	r0, r2
 800caa2:	4619      	mov	r1, r3
 800caa4:	3724      	adds	r7, #36	@ 0x24
 800caa6:	46bd      	mov	sp, r7
 800caa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caac:	0800e908 	.word	0x0800e908

0800cab0 <INA228_getVBUS_V>:
 * @brief 获取总线电压值（伏特）
 * @param sensor INA228传感器的句柄
 * @return 总线电压值（V）
 */
float INA228_getVBUS_V(INA228_Handle sensor)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b086      	sub	sp, #24
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_vbus_register);
 800cab8:	2105      	movs	r1, #5
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f7ff ffa0 	bl	800ca00 <INA228_readReg>
 800cac0:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 800cac4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cac8:	f04f 0200 	mov.w	r2, #0
 800cacc:	f04f 0300 	mov.w	r3, #0
 800cad0:	0902      	lsrs	r2, r0, #4
 800cad2:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800cad6:	090b      	lsrs	r3, r1, #4
 800cad8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Convert for 2's compliment and signed value (though always positive)
	if (value > 0x7FFFF)
 800cadc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cae0:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800cae4:	f173 0300 	sbcs.w	r3, r3, #0
 800cae8:	d30c      	bcc.n	800cb04 <INA228_getVBUS_V+0x54>
	{
		data = (float)value - 0x100000; // left for redundancy and error checking, should never get used
 800caea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800caee:	f7f3 fcbf 	bl	8000470 <__aeabi_ul2f>
 800caf2:	ee07 0a10 	vmov	s14, r0
 800caf6:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800cb38 <INA228_getVBUS_V+0x88>
 800cafa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cafe:	edc7 7a05 	vstr	s15, [r7, #20]
 800cb02:	e005      	b.n	800cb10 <INA228_getVBUS_V+0x60>
	}
	else
	{
		data = (float)value;
 800cb04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cb08:	f7f3 fcb2 	bl	8000470 <__aeabi_ul2f>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	617b      	str	r3, [r7, #20]
	}

	// Convert to V
	data = (data * 195.3125f) / 1000000;
 800cb10:	edd7 7a05 	vldr	s15, [r7, #20]
 800cb14:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800cb3c <INA228_getVBUS_V+0x8c>
 800cb18:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cb1c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800cb40 <INA228_getVBUS_V+0x90>
 800cb20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb24:	edc7 7a05 	vstr	s15, [r7, #20]

	return data;
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	ee07 3a90 	vmov	s15, r3
}
 800cb2e:	eeb0 0a67 	vmov.f32	s0, s15
 800cb32:	3718      	adds	r7, #24
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	49800000 	.word	0x49800000
 800cb3c:	43435000 	.word	0x43435000
 800cb40:	49742400 	.word	0x49742400

0800cb44 <INA228_getCURRENT_signedLSB>:
 * @brief 获取电流值（最低有效位）
 * @param sensor INA228传感器的句柄
 * @return 电流值（signed LSBs）
 */
float INA228_getCURRENT_signedLSB(INA228_Handle sensor)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b086      	sub	sp, #24
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_current_register);
 800cb4c:	2107      	movs	r1, #7
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f7ff ff56 	bl	800ca00 <INA228_readReg>
 800cb54:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 800cb58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cb5c:	f04f 0200 	mov.w	r2, #0
 800cb60:	f04f 0300 	mov.w	r3, #0
 800cb64:	0902      	lsrs	r2, r0, #4
 800cb66:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800cb6a:	090b      	lsrs	r3, r1, #4
 800cb6c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// 转换为 2 的补码和有符号值
	if (value > 0x7FFFF)
 800cb70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cb74:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800cb78:	f173 0300 	sbcs.w	r3, r3, #0
 800cb7c:	d30c      	bcc.n	800cb98 <INA228_getCURRENT_signedLSB+0x54>
	{
		data = (float)value - 0x100000;
 800cb7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cb82:	f7f3 fc75 	bl	8000470 <__aeabi_ul2f>
 800cb86:	ee07 0a10 	vmov	s14, r0
 800cb8a:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800cbb4 <INA228_getCURRENT_signedLSB+0x70>
 800cb8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb92:	edc7 7a05 	vstr	s15, [r7, #20]
 800cb96:	e005      	b.n	800cba4 <INA228_getCURRENT_signedLSB+0x60>
	}
	else
	{
		data = (float)value;
 800cb98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cb9c:	f7f3 fc68 	bl	8000470 <__aeabi_ul2f>
 800cba0:	4603      	mov	r3, r0
 800cba2:	617b      	str	r3, [r7, #20]
	}

	return data;
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	ee07 3a90 	vmov	s15, r3
}
 800cbaa:	eeb0 0a67 	vmov.f32	s0, s15
 800cbae:	3718      	adds	r7, #24
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	49800000 	.word	0x49800000

0800cbb8 <INA228_getCURRENT_A>:
 * @brief 获取电流值（安培）
 * @param sensor INA228传感器的句柄
 * @return 电流值（A）
 */
float INA228_getCURRENT_A(INA228_Handle sensor)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
	float data = INA228_getCURRENT_signedLSB(sensor);
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f7ff ffbf 	bl	800cb44 <INA228_getCURRENT_signedLSB>
 800cbc6:	ed87 0a03 	vstr	s0, [r7, #12]

	data = data * sensor->currentlsb;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	edd3 7a06 	vldr	s15, [r3, #24]
 800cbd0:	ed97 7a03 	vldr	s14, [r7, #12]
 800cbd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbd8:	edc7 7a03 	vstr	s15, [r7, #12]

	return data;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	ee07 3a90 	vmov	s15, r3
}
 800cbe2:	eeb0 0a67 	vmov.f32	s0, s15
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <pid_Init>:
 * @param kd 微分系数
 * @param max 输出最大值
 * @param min 输出最小值
 */
void pid_Init(PID *pid, float kp, float ki, float kd, float max, float min) // PID参数初始化
{
 800cbec:	b480      	push	{r7}
 800cbee:	b087      	sub	sp, #28
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6178      	str	r0, [r7, #20]
 800cbf4:	ed87 0a04 	vstr	s0, [r7, #16]
 800cbf8:	edc7 0a03 	vstr	s1, [r7, #12]
 800cbfc:	ed87 1a02 	vstr	s2, [r7, #8]
 800cc00:	edc7 1a01 	vstr	s3, [r7, #4]
 800cc04:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	693a      	ldr	r2, [r7, #16]
 800cc0c:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	68ba      	ldr	r2, [r7, #8]
 800cc18:	609a      	str	r2, [r3, #8]
	pid->Max = max;
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	61da      	str	r2, [r3, #28]
	pid->Min = min;
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	683a      	ldr	r2, [r7, #0]
 800cc24:	621a      	str	r2, [r3, #32]
	pid->err[0] = 0.f;
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	f04f 0200 	mov.w	r2, #0
 800cc2c:	60da      	str	r2, [r3, #12]
	pid->err[1] = 0.f;
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	f04f 0200 	mov.w	r2, #0
 800cc34:	611a      	str	r2, [r3, #16]
	pid->err[2] = 0.f;
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	f04f 0200 	mov.w	r2, #0
 800cc3c:	615a      	str	r2, [r3, #20]
	pid->out = 0.f;
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	f04f 0200 	mov.w	r2, #0
 800cc44:	619a      	str	r2, [r3, #24]
}
 800cc46:	bf00      	nop
 800cc48:	371c      	adds	r7, #28
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr

0800cc52 <pid>:
 * @note e(0)代表本次偏差
 * @note e(1)代表上一次的偏差  以此类推
 * @note result代表增量输出
 */
void pid(PID *pid, float target, float sample)
{
 800cc52:	b580      	push	{r7, lr}
 800cc54:	ed2d 8b02 	vpush	{d8}
 800cc58:	b084      	sub	sp, #16
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	60f8      	str	r0, [r7, #12]
 800cc5e:	ed87 0a02 	vstr	s0, [r7, #8]
 800cc62:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->err[0] = target - sample;
 800cc66:	ed97 7a02 	vldr	s14, [r7, #8]
 800cc6a:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->out += pid->kp * (pid->err[0] - pid->err[1]) + pid->ki * pid->err[0] + pid->kd * (pid->err[0] - 2 * pid->err[1] + pid->err[2]);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	ed93 7a06 	vldr	s14, [r3, #24]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	edd3 6a00 	vldr	s13, [r3]
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	ed93 6a03 	vldr	s12, [r3, #12]
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	edd3 7a04 	vldr	s15, [r3, #16]
 800cc90:	ee76 7a67 	vsub.f32	s15, s12, s15
 800cc94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	ed93 6a01 	vldr	s12, [r3, #4]
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	edd3 7a03 	vldr	s15, [r3, #12]
 800cca4:	ee66 7a27 	vmul.f32	s15, s12, s15
 800cca8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	ed93 6a02 	vldr	s12, [r3, #8]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	edd3 5a03 	vldr	s11, [r3, #12]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	edd3 7a04 	vldr	s15, [r3, #16]
 800ccbe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ccc2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	edd3 7a05 	vldr	s15, [r3, #20]
 800cccc:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800ccd0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ccd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->err[2] = pid->err[1];
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	691a      	ldr	r2, [r3, #16]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	615a      	str	r2, [r3, #20]
	pid->err[1] = pid->err[0];
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	68da      	ldr	r2, [r3, #12]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	611a      	str	r2, [r3, #16]
	// 输出限幅
	pid->out = fminf(pid->Max, fmaxf(pid->out, pid->Min));
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	ed93 8a07 	vldr	s16, [r3, #28]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	edd3 7a06 	vldr	s15, [r3, #24]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	ed93 7a08 	vldr	s14, [r3, #32]
 800cd04:	eef0 0a47 	vmov.f32	s1, s14
 800cd08:	eeb0 0a67 	vmov.f32	s0, s15
 800cd0c:	f001 faf8 	bl	800e300 <fmaxf>
 800cd10:	eef0 7a40 	vmov.f32	s15, s0
 800cd14:	eef0 0a67 	vmov.f32	s1, s15
 800cd18:	eeb0 0a48 	vmov.f32	s0, s16
 800cd1c:	f001 fb0d 	bl	800e33a <fminf>
 800cd20:	eef0 7a40 	vmov.f32	s15, s0
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800cd2a:	bf00      	nop
 800cd2c:	3710      	adds	r7, #16
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	ecbd 8b02 	vpop	{d8}
 800cd34:	bd80      	pop	{r7, pc}
	...

0800cd38 <pll_Init_V>:
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 * @param Umax 交流电压峰值
 */
void pll_Init_V(pll_Signal_V **signal, float f, uint16_t F)
{
 800cd38:	b590      	push	{r4, r7, lr}
 800cd3a:	b087      	sub	sp, #28
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	ed87 0a02 	vstr	s0, [r7, #8]
 800cd44:	460b      	mov	r3, r1
 800cd46:	80fb      	strh	r3, [r7, #6]
    /* 分配内存空间 */
    (*signal) = (pll_Signal_V *)malloc(sizeof(pll_Signal_V));
 800cd48:	200c      	movs	r0, #12
 800cd4a:	f001 f933 	bl	800dfb4 <malloc>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	461a      	mov	r2, r3
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681c      	ldr	r4, [r3, #0]
 800cd5a:	2024      	movs	r0, #36	@ 0x24
 800cd5c:	f001 f92a 	bl	800dfb4 <malloc>
 800cd60:	4603      	mov	r3, r0
 800cd62:	6023      	str	r3, [r4, #0]
    (*signal)->pid = (PID *)malloc(sizeof(PID));
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681c      	ldr	r4, [r3, #0]
 800cd68:	2024      	movs	r0, #36	@ 0x24
 800cd6a:	f001 f923 	bl	800dfb4 <malloc>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	60a3      	str	r3, [r4, #8]

    /* 初始化赋值 */
    (*signal)->basic->input[0] = 0.f;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f04f 0200 	mov.w	r2, #0
 800cd7c:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input[1] = 0.f;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f04f 0200 	mov.w	r2, #0
 800cd88:	605a      	str	r2, [r3, #4]
    (*signal)->basic->input[2] = 0.f;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f04f 0200 	mov.w	r2, #0
 800cd94:	609a      	str	r2, [r3, #8]

    (*signal)->basic->rms = 0.f;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f04f 0200 	mov.w	r2, #0
 800cda0:	60da      	str	r2, [r3, #12]

    (*signal)->basic->park_d = 0.f;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f04f 0200 	mov.w	r2, #0
 800cdac:	615a      	str	r2, [r3, #20]
    (*signal)->basic->park_q = 0.f;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f04f 0200 	mov.w	r2, #0
 800cdb8:	619a      	str	r2, [r3, #24]

    (*signal)->theta = 0.f;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f04f 0200 	mov.w	r2, #0
 800cdc2:	605a      	str	r2, [r3, #4]
    (*signal)->basic->omiga0 = 2 * PI * f; /* f典型值50 */
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	edd7 7a02 	vldr	s15, [r7, #8]
 800cdce:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 800d000 <pll_Init_V+0x2c8>
 800cdd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cdd6:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->Ts = 1.f / F;        /* F典型值20000 */
 800cdda:	88fb      	ldrh	r3, [r7, #6]
 800cddc:	ee07 3a90 	vmov	s15, r3
 800cde0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cdee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdf2:	edc3 7a08 	vstr	s15, [r3, #32]

    /* 初始化pid参数 */
    float ki = (*signal)->basic->omiga0 * (*signal)->basic->omiga0;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	ed93 7a07 	vldr	s14, [r3, #28]
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	edd3 7a07 	vldr	s15, [r3, #28]
 800ce0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce0e:	edc7 7a05 	vstr	s15, [r7, #20]
    float kp = sqrt(2) * sqrt(ki);
 800ce12:	edd7 7a05 	vldr	s15, [r7, #20]
 800ce16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ce1a:	eeb0 0b47 	vmov.f64	d0, d7
 800ce1e:	f001 f9f7 	bl	800e210 <sqrt>
 800ce22:	eeb0 7b40 	vmov.f64	d7, d0
 800ce26:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 800cff8 <pll_Init_V+0x2c0>
 800ce2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ce32:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_Init((*signal)->pid, kp, ki, 0, 50 * PI, -20 * PI);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	ed9f 2a71 	vldr	s4, [pc, #452]	@ 800d004 <pll_Init_V+0x2cc>
 800ce40:	eddf 1a71 	vldr	s3, [pc, #452]	@ 800d008 <pll_Init_V+0x2d0>
 800ce44:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 800d00c <pll_Init_V+0x2d4>
 800ce48:	edd7 0a05 	vldr	s1, [r7, #20]
 800ce4c:	ed97 0a04 	vldr	s0, [r7, #16]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7ff fecb 	bl	800cbec <pid_Init>

    /* 计算sogi中间量 */
    (*signal)->basic->sogi->k = 1.414f;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	691b      	ldr	r3, [r3, #16]
 800ce5e:	4a6c      	ldr	r2, [pc, #432]	@ (800d010 <pll_Init_V+0x2d8>)
 800ce60:	619a      	str	r2, [r3, #24]
    (*signal)->basic->sogi->lamda = 0.5f * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	edd3 7a07 	vldr	s15, [r3, #28]
 800ce6c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ce70:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	edd3 7a08 	vldr	s15, [r3, #32]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce8a:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->sogi->x = 2.f * (*signal)->basic->sogi->k * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	691b      	ldr	r3, [r3, #16]
 800ce96:	edd3 7a06 	vldr	s15, [r3, #24]
 800ce9a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	edd3 7a07 	vldr	s15, [r3, #28]
 800cea8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	edd3 7a08 	vldr	s15, [r3, #32]
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	691b      	ldr	r3, [r3, #16]
 800cebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cec2:	edc3 7a08 	vstr	s15, [r3, #32]
    (*signal)->basic->sogi->y = (*signal)->basic->omiga0 * (*signal)->basic->Ts * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	ed93 7a07 	vldr	s14, [r3, #28]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	edd3 7a08 	vldr	s15, [r3, #32]
 800ceda:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	edd3 7a07 	vldr	s15, [r3, #28]
 800cee8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	edd3 7a08 	vldr	s15, [r3, #32]
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	691b      	ldr	r3, [r3, #16]
 800cefe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf02:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    (*signal)->basic->sogi->b0 = (*signal)->basic->sogi->x / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	691b      	ldr	r3, [r3, #16]
 800cf0e:	edd3 6a08 	vldr	s13, [r3, #32]
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	691b      	ldr	r3, [r3, #16]
 800cf1a:	ed93 7a08 	vldr	s14, [r3, #32]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	691b      	ldr	r3, [r3, #16]
 800cf26:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800cf2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf2e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800cf32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	691b      	ldr	r3, [r3, #16]
 800cf3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf42:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    (*signal)->basic->sogi->a1 = (8 - 2.f * (*signal)->basic->sogi->y) / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	691b      	ldr	r3, [r3, #16]
 800cf4e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800cf52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cf56:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800cf5a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	ed93 7a08 	vldr	s14, [r3, #32]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	691b      	ldr	r3, [r3, #16]
 800cf72:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800cf76:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf7a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800cf7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	691b      	ldr	r3, [r3, #16]
 800cf8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf8e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    (*signal)->basic->sogi->a2 = ((*signal)->basic->sogi->x - (*signal)->basic->sogi->y - 4) / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	691b      	ldr	r3, [r3, #16]
 800cf9a:	ed93 7a08 	vldr	s14, [r3, #32]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	691b      	ldr	r3, [r3, #16]
 800cfa6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800cfaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfae:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800cfb2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	691b      	ldr	r3, [r3, #16]
 800cfbe:	ed93 7a08 	vldr	s14, [r3, #32]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	691b      	ldr	r3, [r3, #16]
 800cfca:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800cfce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfd2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800cfd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	691b      	ldr	r3, [r3, #16]
 800cfe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfe6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 800cfea:	bf00      	nop
 800cfec:	371c      	adds	r7, #28
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd90      	pop	{r4, r7, pc}
 800cff2:	bf00      	nop
 800cff4:	f3af 8000 	nop.w
 800cff8:	667f3bcd 	.word	0x667f3bcd
 800cffc:	3ff6a09e 	.word	0x3ff6a09e
 800d000:	40c90fdb 	.word	0x40c90fdb
 800d004:	c27b53d2 	.word	0xc27b53d2
 800d008:	431d1463 	.word	0x431d1463
 800d00c:	00000000 	.word	0x00000000
 800d010:	3fb4fdf4 	.word	0x3fb4fdf4

0800d014 <pll_Init_I>:
 * @param F 采样频率(典型值:20000)
 * @param pi_kp PI控制器kp参数
 * @param pi_ki PI控制器ki参数
 */
void pll_Init_I(pll_Signal_I **signal, float f, uint16_t F)
{
 800d014:	b590      	push	{r4, r7, lr}
 800d016:	b085      	sub	sp, #20
 800d018:	af00      	add	r7, sp, #0
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	ed87 0a02 	vstr	s0, [r7, #8]
 800d020:	460b      	mov	r3, r1
 800d022:	80fb      	strh	r3, [r7, #6]
    (*signal) = (pll_Signal_I *)malloc(sizeof(pll_Signal_I));
 800d024:	201c      	movs	r0, #28
 800d026:	f000 ffc5 	bl	800dfb4 <malloc>
 800d02a:	4603      	mov	r3, r0
 800d02c:	461a      	mov	r2, r3
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681c      	ldr	r4, [r3, #0]
 800d036:	2024      	movs	r0, #36	@ 0x24
 800d038:	f000 ffbc 	bl	800dfb4 <malloc>
 800d03c:	4603      	mov	r3, r0
 800d03e:	6023      	str	r3, [r4, #0]

    (*signal)->pid_d = (PID *)malloc(sizeof(PID));
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681c      	ldr	r4, [r3, #0]
 800d044:	2024      	movs	r0, #36	@ 0x24
 800d046:	f000 ffb5 	bl	800dfb4 <malloc>
 800d04a:	4603      	mov	r3, r0
 800d04c:	6163      	str	r3, [r4, #20]
    (*signal)->pid_q = (PID *)malloc(sizeof(PID));
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681c      	ldr	r4, [r3, #0]
 800d052:	2024      	movs	r0, #36	@ 0x24
 800d054:	f000 ffae 	bl	800dfb4 <malloc>
 800d058:	4603      	mov	r3, r0
 800d05a:	61a3      	str	r3, [r4, #24]
    /* 初始化赋值 */
    (*signal)->basic->input[0] = 0.f;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f04f 0200 	mov.w	r2, #0
 800d066:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input[1] = 0.f;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f04f 0200 	mov.w	r2, #0
 800d072:	605a      	str	r2, [r3, #4]
    (*signal)->basic->input[2] = 0.f;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f04f 0200 	mov.w	r2, #0
 800d07e:	609a      	str	r2, [r3, #8]

    (*signal)->basic->rms = 0.f;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f04f 0200 	mov.w	r2, #0
 800d08a:	60da      	str	r2, [r3, #12]

    (*signal)->basic->park_d = 0.f;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f04f 0200 	mov.w	r2, #0
 800d096:	615a      	str	r2, [r3, #20]
    (*signal)->basic->park_q = 0.f;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f04f 0200 	mov.w	r2, #0
 800d0a2:	619a      	str	r2, [r3, #24]

    (*signal)->park_inv_alpha = 0.f;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f04f 0200 	mov.w	r2, #0
 800d0ac:	605a      	str	r2, [r3, #4]
    (*signal)->park_inv_beta = 0.f;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f04f 0200 	mov.w	r2, #0
 800d0b6:	609a      	str	r2, [r3, #8]

    (*signal)->basic->omiga0 = 2.f * PI * f; /* f典型值50 */
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	edd7 7a02 	vldr	s15, [r7, #8]
 800d0c2:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 800d2d8 <pll_Init_I+0x2c4>
 800d0c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0ca:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->Ts = 1.f / F;          /* F典型值20000 */
 800d0ce:	88fb      	ldrh	r3, [r7, #6]
 800d0d0:	ee07 3a90 	vmov	s15, r3
 800d0d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d0e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0e6:	edc3 7a08 	vstr	s15, [r3, #32]

    (*signal)->CorL = 0;   /* 0:感性 1:容性 */
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	731a      	strb	r2, [r3, #12]
    (*signal)->L = 0.001f; /* 1mH */
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	4a79      	ldr	r2, [pc, #484]	@ (800d2dc <pll_Init_I+0x2c8>)
 800d0f8:	611a      	str	r2, [r3, #16]

    /* 在调整取值范围时看实际输出值逐渐逼近，防止上电瞬间电流过大 */
    pid_Init((*signal)->pid_d, 1.8f, 0.03f, 0, 0.2f, -0.4f);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	695b      	ldr	r3, [r3, #20]
 800d100:	ed9f 2a77 	vldr	s4, [pc, #476]	@ 800d2e0 <pll_Init_I+0x2cc>
 800d104:	eddf 1a77 	vldr	s3, [pc, #476]	@ 800d2e4 <pll_Init_I+0x2d0>
 800d108:	ed9f 1a77 	vldr	s2, [pc, #476]	@ 800d2e8 <pll_Init_I+0x2d4>
 800d10c:	eddf 0a77 	vldr	s1, [pc, #476]	@ 800d2ec <pll_Init_I+0x2d8>
 800d110:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 800d2f0 <pll_Init_I+0x2dc>
 800d114:	4618      	mov	r0, r3
 800d116:	f7ff fd69 	bl	800cbec <pid_Init>
    pid_Init((*signal)->pid_q, 1.8f, 0.03f, 0, 0.2f, -0.2f);
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	699b      	ldr	r3, [r3, #24]
 800d120:	ed9f 2a74 	vldr	s4, [pc, #464]	@ 800d2f4 <pll_Init_I+0x2e0>
 800d124:	eddf 1a6f 	vldr	s3, [pc, #444]	@ 800d2e4 <pll_Init_I+0x2d0>
 800d128:	ed9f 1a6f 	vldr	s2, [pc, #444]	@ 800d2e8 <pll_Init_I+0x2d4>
 800d12c:	eddf 0a6f 	vldr	s1, [pc, #444]	@ 800d2ec <pll_Init_I+0x2d8>
 800d130:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 800d2f0 <pll_Init_I+0x2dc>
 800d134:	4618      	mov	r0, r3
 800d136:	f7ff fd59 	bl	800cbec <pid_Init>

    /* 计算sogi中间量 */
    (*signal)->basic->sogi->k = 1.414f;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	691b      	ldr	r3, [r3, #16]
 800d142:	4a6d      	ldr	r2, [pc, #436]	@ (800d2f8 <pll_Init_I+0x2e4>)
 800d144:	619a      	str	r2, [r3, #24]
    (*signal)->basic->sogi->lamda = 0.5f * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	edd3 7a07 	vldr	s15, [r3, #28]
 800d150:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d154:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	edd3 7a08 	vldr	s15, [r3, #32]
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	691b      	ldr	r3, [r3, #16]
 800d16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d16e:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->sogi->x = 2.f * (*signal)->basic->sogi->k * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	edd3 7a06 	vldr	s15, [r3, #24]
 800d17e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	edd3 7a07 	vldr	s15, [r3, #28]
 800d18c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	edd3 7a08 	vldr	s15, [r3, #32]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	691b      	ldr	r3, [r3, #16]
 800d1a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1a6:	edc3 7a08 	vstr	s15, [r3, #32]
    (*signal)->basic->sogi->y = (*signal)->basic->omiga0 * (*signal)->basic->Ts * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	ed93 7a07 	vldr	s14, [r3, #28]
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	edd3 7a08 	vldr	s15, [r3, #32]
 800d1be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	edd3 7a07 	vldr	s15, [r3, #28]
 800d1cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	edd3 7a08 	vldr	s15, [r3, #32]
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	691b      	ldr	r3, [r3, #16]
 800d1e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1e6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    (*signal)->basic->sogi->b0 = (*signal)->basic->sogi->x / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	691b      	ldr	r3, [r3, #16]
 800d1f2:	edd3 6a08 	vldr	s13, [r3, #32]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	691b      	ldr	r3, [r3, #16]
 800d1fe:	ed93 7a08 	vldr	s14, [r3, #32]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800d20e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d212:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800d216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	691b      	ldr	r3, [r3, #16]
 800d222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d226:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    (*signal)->basic->sogi->a1 = (8 - 2.f * (*signal)->basic->sogi->y) / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	691b      	ldr	r3, [r3, #16]
 800d232:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800d236:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d23a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800d23e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	691b      	ldr	r3, [r3, #16]
 800d24a:	ed93 7a08 	vldr	s14, [r3, #32]
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	691b      	ldr	r3, [r3, #16]
 800d256:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800d25a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d25e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800d262:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	691b      	ldr	r3, [r3, #16]
 800d26e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d272:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    (*signal)->basic->sogi->a2 = ((*signal)->basic->sogi->x - (*signal)->basic->sogi->y - 4) / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	ed93 7a08 	vldr	s14, [r3, #32]
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	691b      	ldr	r3, [r3, #16]
 800d28a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800d28e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d292:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800d296:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	691b      	ldr	r3, [r3, #16]
 800d2a2:	ed93 7a08 	vldr	s14, [r3, #32]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	691b      	ldr	r3, [r3, #16]
 800d2ae:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800d2b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2b6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800d2ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	691b      	ldr	r3, [r3, #16]
 800d2c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2ca:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 800d2ce:	bf00      	nop
 800d2d0:	3714      	adds	r7, #20
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd90      	pop	{r4, r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	40c90fdb 	.word	0x40c90fdb
 800d2dc:	3a83126f 	.word	0x3a83126f
 800d2e0:	becccccd 	.word	0xbecccccd
 800d2e4:	3e4ccccd 	.word	0x3e4ccccd
 800d2e8:	00000000 	.word	0x00000000
 800d2ec:	3cf5c28f 	.word	0x3cf5c28f
 800d2f0:	3fe66666 	.word	0x3fe66666
 800d2f4:	be4ccccd 	.word	0xbe4ccccd
 800d2f8:	3fb4fdf4 	.word	0x3fb4fdf4
 800d2fc:	00000000 	.word	0x00000000

0800d300 <pll_Control_V>:
/**
 * @brief 电压锁相控制
 * @param signal_V 电压信号指针
 */
void pll_Control_V(pll_Signal_V *signal_V)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b08a      	sub	sp, #40	@ 0x28
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
    /* 对信号先进行sogi变换，得到两个相位相差90度的信号 */
    pll_Sogi(signal_V->basic->sogi, signal_V->basic->input);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	691a      	ldr	r2, [r3, #16]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4619      	mov	r1, r3
 800d314:	4610      	mov	r0, r2
 800d316:	f000 f9e1 	bl	800d6dc <pll_Sogi>

    /* 再对信号sogi变换后的信号进行park变换 */
    float sinTheta = arm_sin_f32(signal_V->theta);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	edd3 7a01 	vldr	s15, [r3, #4]
 800d320:	eeb0 0a67 	vmov.f32	s0, s15
 800d324:	f000 fdb6 	bl	800de94 <arm_sin_f32>
 800d328:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float cosTheta = arm_cos_f32(signal_V->theta);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	edd3 7a01 	vldr	s15, [r3, #4]
 800d332:	eeb0 0a67 	vmov.f32	s0, s15
 800d336:	f000 fdf3 	bl	800df20 <arm_cos_f32>
 800d33a:	ed87 0a08 	vstr	s0, [r7, #32]
    arm_park_f32(signal_V->basic->sogi->alpha[0], signal_V->basic->sogi->beta[0], &signal_V->basic->park_d, &signal_V->basic->park_q, sinTheta, cosTheta);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	691b      	ldr	r3, [r3, #16]
 800d344:	6818      	ldr	r0, [r3, #0]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	691b      	ldr	r3, [r3, #16]
 800d34c:	68d9      	ldr	r1, [r3, #12]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f103 0214 	add.w	r2, r3, #20
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	3318      	adds	r3, #24
 800d35c:	61f8      	str	r0, [r7, #28]
 800d35e:	61b9      	str	r1, [r7, #24]
 800d360:	617a      	str	r2, [r7, #20]
 800d362:	613b      	str	r3, [r7, #16]
 800d364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d366:	60fb      	str	r3, [r7, #12]
 800d368:	6a3b      	ldr	r3, [r7, #32]
 800d36a:	60bb      	str	r3, [r7, #8]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800d36c:	ed97 7a07 	vldr	s14, [r7, #28]
 800d370:	edd7 7a02 	vldr	s15, [r7, #8]
 800d374:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d378:	edd7 6a06 	vldr	s13, [r7, #24]
 800d37c:	edd7 7a03 	vldr	s15, [r7, #12]
 800d380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d384:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800d38e:	edd7 7a07 	vldr	s15, [r7, #28]
 800d392:	eeb1 7a67 	vneg.f32	s14, s15
 800d396:	edd7 7a03 	vldr	s15, [r7, #12]
 800d39a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d39e:	edd7 6a06 	vldr	s13, [r7, #24]
 800d3a2:	edd7 7a02 	vldr	s15, [r7, #8]
 800d3a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d3aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	edc3 7a00 	vstr	s15, [r3]
  }
 800d3b4:	bf00      	nop

    /* 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差 */
    pid(signal_V->pid, signal_V->basic->park_q, 0); /* pid的输出值为旋转坐标系角速度 */
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	689a      	ldr	r2, [r3, #8]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	edd3 7a06 	vldr	s15, [r3, #24]
 800d3c2:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800d438 <pll_Control_V+0x138>
 800d3c6:	eeb0 0a67 	vmov.f32	s0, s15
 800d3ca:	4610      	mov	r0, r2
 800d3cc:	f7ff fc41 	bl	800cc52 <pid>

    /* 更新theta */
    signal_V->theta += (signal_V->pid->out + signal_V->basic->omiga0) * signal_V->basic->Ts;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	ed93 7a01 	vldr	s14, [r3, #4]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	edd3 6a06 	vldr	s13, [r3, #24]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	edd3 7a07 	vldr	s15, [r3, #28]
 800d3e6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	edd3 7a08 	vldr	s15, [r3, #32]
 800d3f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d3f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_V->theta = (float)fmod(signal_V->theta, 2 * PI);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	edd3 7a01 	vldr	s15, [r3, #4]
 800d406:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d40a:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 800d430 <pll_Control_V+0x130>
 800d40e:	eeb0 0b47 	vmov.f64	d0, d7
 800d412:	f000 fed9 	bl	800e1c8 <fmod>
 800d416:	eeb0 7b40 	vmov.f64	d7, d0
 800d41a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800d424:	bf00      	nop
 800d426:	3728      	adds	r7, #40	@ 0x28
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	f3af 8000 	nop.w
 800d430:	60000000 	.word	0x60000000
 800d434:	401921fb 	.word	0x401921fb
 800d438:	00000000 	.word	0x00000000

0800d43c <pll_Control_I>:
 * @param signal_V 电压信号指针
 * @param Iset 电流设定值(有效值)
 * @param PF 功率因数
 */
void pll_Control_I(pll_Signal_I *signal_I, pll_Signal_V *signal_V, float Iset, float PF)
{
 800d43c:	b590      	push	{r4, r7, lr}
 800d43e:	b099      	sub	sp, #100	@ 0x64
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	ed87 0a01 	vstr	s0, [r7, #4]
 800d44a:	edc7 0a00 	vstr	s1, [r7]
    /* 对信号先进行sogi变换，得到两个相位相差90度的信号 */
    pll_Sogi(signal_I->basic->sogi, signal_I->basic->input);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	691a      	ldr	r2, [r3, #16]
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	4619      	mov	r1, r3
 800d45a:	4610      	mov	r0, r2
 800d45c:	f000 f93e 	bl	800d6dc <pll_Sogi>

    /* 在电压的系上得出电流的dq值 */
    float sinTheta = arm_sin_f32(signal_V->theta);
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	edd3 7a01 	vldr	s15, [r3, #4]
 800d466:	eeb0 0a67 	vmov.f32	s0, s15
 800d46a:	f000 fd13 	bl	800de94 <arm_sin_f32>
 800d46e:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
    float cosTheta = arm_cos_f32(signal_V->theta);
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	edd3 7a01 	vldr	s15, [r3, #4]
 800d478:	eeb0 0a67 	vmov.f32	s0, s15
 800d47c:	f000 fd50 	bl	800df20 <arm_cos_f32>
 800d480:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58

    arm_park_f32(signal_I->basic->sogi->alpha[0], signal_I->basic->sogi->beta[0], &signal_I->basic->park_d, &signal_I->basic->park_q, sinTheta, cosTheta);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	691b      	ldr	r3, [r3, #16]
 800d48a:	6818      	ldr	r0, [r3, #0]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	691b      	ldr	r3, [r3, #16]
 800d492:	68d9      	ldr	r1, [r3, #12]
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f103 0214 	add.w	r2, r3, #20
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	3318      	adds	r3, #24
 800d4a2:	6438      	str	r0, [r7, #64]	@ 0x40
 800d4a4:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800d4a6:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d4a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d4b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800d4b2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800d4b6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d4ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4be:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800d4c2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d4c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d4ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d0:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800d4d4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800d4d8:	eeb1 7a67 	vneg.f32	s14, s15
 800d4dc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d4e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4e4:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800d4e8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d4ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d4f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4f6:	edc3 7a00 	vstr	s15, [r3]
  }
 800d4fa:	bf00      	nop

    /* PI控制 */
    float PFTheta = asinf(PF);
 800d4fc:	ed97 0a00 	vldr	s0, [r7]
 800d500:	f000 fea6 	bl	800e250 <asinf>
 800d504:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54

    float Ivalue = Iset * 1.414f / Ibase;
 800d508:	edd7 7a01 	vldr	s15, [r7, #4]
 800d50c:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 800d6cc <pll_Control_I+0x290>
 800d510:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d514:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800d6d0 <pll_Control_I+0x294>
 800d518:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d51c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    pid(signal_I->pid_d, Ivalue * arm_sin_f32(PFTheta), signal_I->basic->park_d); /* 电流大小 */
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	695c      	ldr	r4, [r3, #20]
 800d524:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 800d528:	f000 fcb4 	bl	800de94 <arm_sin_f32>
 800d52c:	eeb0 7a40 	vmov.f32	s14, s0
 800d530:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800d534:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	ed93 7a05 	vldr	s14, [r3, #20]
 800d540:	eef0 0a47 	vmov.f32	s1, s14
 800d544:	eeb0 0a67 	vmov.f32	s0, s15
 800d548:	4620      	mov	r0, r4
 800d54a:	f7ff fb82 	bl	800cc52 <pid>

    float Iphase = Ivalue * arm_cos_f32(PFTheta) * (signal_I->CorL ? 1 : -1);
 800d54e:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 800d552:	f000 fce5 	bl	800df20 <arm_cos_f32>
 800d556:	eeb0 7a40 	vmov.f32	s14, s0
 800d55a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800d55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	7b1b      	ldrb	r3, [r3, #12]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d002      	beq.n	800d570 <pll_Control_I+0x134>
 800d56a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d56e:	e001      	b.n	800d574 <pll_Control_I+0x138>
 800d570:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d574:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d578:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    pid(signal_I->pid_q, Iphase, signal_I->basic->park_q); /* 电流相位 */
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	699a      	ldr	r2, [r3, #24]
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	edd3 7a06 	vldr	s15, [r3, #24]
 800d588:	eef0 0a67 	vmov.f32	s1, s15
 800d58c:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 800d590:	4610      	mov	r0, r2
 800d592:	f7ff fb5e 	bl	800cc52 <pid>

    /* 解耦调制 */
    float Uabd = signal_V->basic->park_d - signal_I->pid_d->out + signal_I->basic->park_q * signal_I->basic->omiga0 * signal_I->L;
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	ed93 7a05 	vldr	s14, [r3, #20]
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	695b      	ldr	r3, [r3, #20]
 800d5a2:	edd3 7a06 	vldr	s15, [r3, #24]
 800d5a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	edd3 6a06 	vldr	s13, [r3, #24]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	edd3 7a07 	vldr	s15, [r3, #28]
 800d5ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	edd3 7a04 	vldr	s15, [r3, #16]
 800d5c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5cc:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    float Uabq = signal_V->basic->park_q - signal_I->pid_q->out - signal_I->basic->park_d * signal_I->basic->omiga0 * signal_I->L;
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	ed93 7a06 	vldr	s14, [r3, #24]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	699b      	ldr	r3, [r3, #24]
 800d5dc:	edd3 7a06 	vldr	s15, [r3, #24]
 800d5e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	edd3 6a05 	vldr	s13, [r3, #20]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	edd3 7a07 	vldr	s15, [r3, #28]
 800d5f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	edd3 7a04 	vldr	s15, [r3, #16]
 800d5fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d602:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d606:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

    /* park逆变换 */
    arm_inv_park_f32(Uabd, Uabq, &signal_I->park_inv_alpha, &signal_I->park_inv_beta, sinTheta, cosTheta);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	1d1a      	adds	r2, r3, #4
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	3308      	adds	r3, #8
 800d612:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d614:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d616:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d618:	6279      	str	r1, [r7, #36]	@ 0x24
 800d61a:	623a      	str	r2, [r7, #32]
 800d61c:	61fb      	str	r3, [r7, #28]
 800d61e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d620:	61bb      	str	r3, [r7, #24]
 800d622:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d624:	617b      	str	r3, [r7, #20]
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 800d626:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d62a:	edd7 7a05 	vldr	s15, [r7, #20]
 800d62e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d632:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800d636:	edd7 7a06 	vldr	s15, [r7, #24]
 800d63a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d63e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d642:	6a3b      	ldr	r3, [r7, #32]
 800d644:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 800d648:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d64c:	edd7 7a06 	vldr	s15, [r7, #24]
 800d650:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d654:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800d658:	edd7 7a05 	vldr	s15, [r7, #20]
 800d65c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d660:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d664:	69fb      	ldr	r3, [r7, #28]
 800d666:	edc3 7a00 	vstr	s15, [r3]
  }
 800d66a:	bf00      	nop

    /* 限幅 */
    signal_I->park_inv_alpha = fmaxf(-0.95f, fminf(0.95f, signal_I->park_inv_alpha));
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	edd3 7a01 	vldr	s15, [r3, #4]
 800d672:	eddf 0a18 	vldr	s1, [pc, #96]	@ 800d6d4 <pll_Control_I+0x298>
 800d676:	eeb0 0a67 	vmov.f32	s0, s15
 800d67a:	f000 fe5e 	bl	800e33a <fminf>
 800d67e:	eef0 7a40 	vmov.f32	s15, s0
 800d682:	eddf 0a15 	vldr	s1, [pc, #84]	@ 800d6d8 <pll_Control_I+0x29c>
 800d686:	eeb0 0a67 	vmov.f32	s0, s15
 800d68a:	f000 fe39 	bl	800e300 <fmaxf>
 800d68e:	eef0 7a40 	vmov.f32	s15, s0
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_I->park_inv_beta = fmaxf(-0.95f, fminf(0.95f, signal_I->park_inv_beta));
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	edd3 7a02 	vldr	s15, [r3, #8]
 800d69e:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 800d6d4 <pll_Control_I+0x298>
 800d6a2:	eeb0 0a67 	vmov.f32	s0, s15
 800d6a6:	f000 fe48 	bl	800e33a <fminf>
 800d6aa:	eef0 7a40 	vmov.f32	s15, s0
 800d6ae:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 800d6d8 <pll_Control_I+0x29c>
 800d6b2:	eeb0 0a67 	vmov.f32	s0, s15
 800d6b6:	f000 fe23 	bl	800e300 <fmaxf>
 800d6ba:	eef0 7a40 	vmov.f32	s15, s0
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800d6c4:	bf00      	nop
 800d6c6:	3764      	adds	r7, #100	@ 0x64
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd90      	pop	{r4, r7, pc}
 800d6cc:	3fb4fdf4 	.word	0x3fb4fdf4
 800d6d0:	4107be77 	.word	0x4107be77
 800d6d4:	3f733333 	.word	0x3f733333
 800d6d8:	bf733333 	.word	0xbf733333

0800d6dc <pll_Sogi>:
 * @brief Sogi变换
 * @param input 输入信号
 * @param sogi sogi指针
 */
static void pll_Sogi(SOGI *sogi, float *input)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
    sogi->alpha[0] = sogi->b0 * input[0] - sogi->b0 * input[2] + sogi->a1 * sogi->alpha[1] + sogi->a2 * sogi->alpha[2];
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	edd3 7a00 	vldr	s15, [r3]
 800d6f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	3308      	adds	r3, #8
 800d700:	edd3 7a00 	vldr	s15, [r3]
 800d704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d708:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	edd3 7a01 	vldr	s15, [r3, #4]
 800d718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d71c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	edd3 7a02 	vldr	s15, [r3, #8]
 800d72c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d730:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	edc3 7a00 	vstr	s15, [r3]
    sogi->beta[0] = sogi->lamda * sogi->b0 * (input[0] + 2 * input[1] + input[2]) + sogi->a1 * sogi->beta[1] + sogi->a2 * sogi->beta[2];
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	ed93 7a07 	vldr	s14, [r3, #28]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800d746:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	edd3 6a00 	vldr	s13, [r3]
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	3304      	adds	r3, #4
 800d754:	edd3 7a00 	vldr	s15, [r3]
 800d758:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d75c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	3308      	adds	r3, #8
 800d764:	edd3 7a00 	vldr	s15, [r3]
 800d768:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d76c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	edd3 7a04 	vldr	s15, [r3, #16]
 800d77c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d780:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	edd3 7a05 	vldr	s15, [r3, #20]
 800d790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d794:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	edc3 7a03 	vstr	s15, [r3, #12]

    input[2] = input[1];
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	3308      	adds	r3, #8
 800d7a2:	683a      	ldr	r2, [r7, #0]
 800d7a4:	6852      	ldr	r2, [r2, #4]
 800d7a6:	601a      	str	r2, [r3, #0]
    input[1] = input[0];
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	3304      	adds	r3, #4
 800d7ac:	683a      	ldr	r2, [r7, #0]
 800d7ae:	6812      	ldr	r2, [r2, #0]
 800d7b0:	601a      	str	r2, [r3, #0]
    sogi->alpha[2] = sogi->alpha[1];
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	685a      	ldr	r2, [r3, #4]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	609a      	str	r2, [r3, #8]
    sogi->alpha[1] = sogi->alpha[0];
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	605a      	str	r2, [r3, #4]
    sogi->beta[2] = sogi->beta[1];
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	691a      	ldr	r2, [r3, #16]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	615a      	str	r2, [r3, #20]
    sogi->beta[1] = sogi->beta[0];
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	68da      	ldr	r2, [r3, #12]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	611a      	str	r2, [r3, #16]
}
 800d7d2:	bf00      	nop
 800d7d4:	370c      	adds	r7, #12
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7dc:	4770      	bx	lr
	...

0800d7e0 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief    GPIO触发中断
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == AD7606_BUSY_Pin)
 800d7ea:	88fb      	ldrh	r3, [r7, #6]
 800d7ec:	2b40      	cmp	r3, #64	@ 0x40
 800d7ee:	d137      	bne.n	800d860 <HAL_GPIO_EXTI_Callback+0x80>
    {
        getVoltageCurrent();     /* 获取电压电流 */
 800d7f0:	f000 f848 	bl	800d884 <getVoltageCurrent>
        calcEffectiveValue();    /* 计算有效值 */
 800d7f4:	f000 f86a 	bl	800d8cc <calcEffectiveValue>
        normalize();             /* 标幺化 */
 800d7f8:	f000 f8b0 	bl	800d95c <normalize>
        pll_Control_V(signal_V); /* 锁相控制 */
 800d7fc:	4b1a      	ldr	r3, [pc, #104]	@ (800d868 <HAL_GPIO_EXTI_Callback+0x88>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4618      	mov	r0, r3
 800d802:	f7ff fd7d 	bl	800d300 <pll_Control_V>

        /* 电流内环控制 */
        if (deviceState == RUN)
 800d806:	4b19      	ldr	r3, [pc, #100]	@ (800d86c <HAL_GPIO_EXTI_Callback+0x8c>)
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	d10e      	bne.n	800d82c <HAL_GPIO_EXTI_Callback+0x4c>
            pll_Control_I(signal_I, signal_V, Itarget, 1.f);
 800d80e:	4b18      	ldr	r3, [pc, #96]	@ (800d870 <HAL_GPIO_EXTI_Callback+0x90>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	4a15      	ldr	r2, [pc, #84]	@ (800d868 <HAL_GPIO_EXTI_Callback+0x88>)
 800d814:	6812      	ldr	r2, [r2, #0]
 800d816:	4917      	ldr	r1, [pc, #92]	@ (800d874 <HAL_GPIO_EXTI_Callback+0x94>)
 800d818:	edd1 7a00 	vldr	s15, [r1]
 800d81c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800d820:	eeb0 0a67 	vmov.f32	s0, s15
 800d824:	4611      	mov	r1, r2
 800d826:	4618      	mov	r0, r3
 800d828:	f7ff fe08 	bl	800d43c <pll_Control_I>

        /* spwm输出 */
        spwmContral();
 800d82c:	f000 f8c2 	bl	800d9b4 <spwmContral>

        /* DAC输出 */
        /* uint32_t dacValue = (uint32_t)((__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 3000.f) / 3000.f * 2000.f + 2048.f); */
        uint32_t dacValue = (uint32_t)(signal_V->basic->input[0] * 2000.f + 2048.f);
 800d830:	4b0d      	ldr	r3, [pc, #52]	@ (800d868 <HAL_GPIO_EXTI_Callback+0x88>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	edd3 7a00 	vldr	s15, [r3]
 800d83a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800d878 <HAL_GPIO_EXTI_Callback+0x98>
 800d83e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d842:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800d87c <HAL_GPIO_EXTI_Callback+0x9c>
 800d846:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d84a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d84e:	ee17 3a90 	vmov	r3, s15
 800d852:	60fb      	str	r3, [r7, #12]
        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacValue);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2200      	movs	r2, #0
 800d858:	2100      	movs	r1, #0
 800d85a:	4809      	ldr	r0, [pc, #36]	@ (800d880 <HAL_GPIO_EXTI_Callback+0xa0>)
 800d85c:	f7f5 fd6f 	bl	800333e <HAL_DAC_SetValue>
    }
}
 800d860:	bf00      	nop
 800d862:	3710      	adds	r7, #16
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	24004cd8 	.word	0x24004cd8
 800d86c:	24005964 	.word	0x24005964
 800d870:	24004cdc 	.word	0x24004cdc
 800d874:	24005974 	.word	0x24005974
 800d878:	44fa0000 	.word	0x44fa0000
 800d87c:	45000000 	.word	0x45000000
 800d880:	2400010c 	.word	0x2400010c

0800d884 <getVoltageCurrent>:

/**
 * @brief    获取相电压和电流
 */
static void getVoltageCurrent(void)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b088      	sub	sp, #32
 800d888:	af00      	add	r7, sp, #0
    /* 读取AD7606数据 */
    float adcValue[8] = {0};
 800d88a:	463b      	mov	r3, r7
 800d88c:	2220      	movs	r2, #32
 800d88e:	2100      	movs	r1, #0
 800d890:	4618      	mov	r0, r3
 800d892:	f000 fc45 	bl	800e120 <memset>
    ad7606_GetValue(&hspi2, 3, adcValue);
 800d896:	463b      	mov	r3, r7
 800d898:	461a      	mov	r2, r3
 800d89a:	2103      	movs	r1, #3
 800d89c:	4808      	ldr	r0, [pc, #32]	@ (800d8c0 <getVoltageCurrent+0x3c>)
 800d89e:	f7ff f869 	bl	800c974 <ad7606_GetValue>

    /* 处理电流电压数据 */
    signal_V->basic->input[0] = adcValue[1];
 800d8a2:	4b08      	ldr	r3, [pc, #32]	@ (800d8c4 <getVoltageCurrent+0x40>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	687a      	ldr	r2, [r7, #4]
 800d8aa:	601a      	str	r2, [r3, #0]
    signal_I->basic->input[0] = adcValue[2];
 800d8ac:	4b06      	ldr	r3, [pc, #24]	@ (800d8c8 <getVoltageCurrent+0x44>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	68ba      	ldr	r2, [r7, #8]
 800d8b4:	601a      	str	r2, [r3, #0]
}
 800d8b6:	bf00      	nop
 800d8b8:	3720      	adds	r7, #32
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	24000214 	.word	0x24000214
 800d8c4:	24004cd8 	.word	0x24004cd8
 800d8c8:	24004cdc 	.word	0x24004cdc

0800d8cc <calcEffectiveValue>:

/**
 * @brief    计算电压电流有效值
 */
static void calcEffectiveValue(void)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	af00      	add	r7, sp, #0
    volatile static uint16_t cnt = 0;

    static float Vrms[400] = {0};
    static float Irms[400] = {0};

    Vrms[cnt] = signal_V->basic->input[0];
 800d8d0:	4b1d      	ldr	r3, [pc, #116]	@ (800d948 <calcEffectiveValue+0x7c>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a1d      	ldr	r2, [pc, #116]	@ (800d94c <calcEffectiveValue+0x80>)
 800d8d8:	8812      	ldrh	r2, [r2, #0]
 800d8da:	b292      	uxth	r2, r2
 800d8dc:	4610      	mov	r0, r2
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	491b      	ldr	r1, [pc, #108]	@ (800d950 <calcEffectiveValue+0x84>)
 800d8e2:	0083      	lsls	r3, r0, #2
 800d8e4:	440b      	add	r3, r1
 800d8e6:	601a      	str	r2, [r3, #0]
    Irms[cnt] = signal_I->basic->input[0];
 800d8e8:	4b1a      	ldr	r3, [pc, #104]	@ (800d954 <calcEffectiveValue+0x88>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	4a17      	ldr	r2, [pc, #92]	@ (800d94c <calcEffectiveValue+0x80>)
 800d8f0:	8812      	ldrh	r2, [r2, #0]
 800d8f2:	b292      	uxth	r2, r2
 800d8f4:	4610      	mov	r0, r2
 800d8f6:	681a      	ldr	r2, [r3, #0]
 800d8f8:	4917      	ldr	r1, [pc, #92]	@ (800d958 <calcEffectiveValue+0x8c>)
 800d8fa:	0083      	lsls	r3, r0, #2
 800d8fc:	440b      	add	r3, r1
 800d8fe:	601a      	str	r2, [r3, #0]

    if (++cnt == 400)
 800d900:	4b12      	ldr	r3, [pc, #72]	@ (800d94c <calcEffectiveValue+0x80>)
 800d902:	881b      	ldrh	r3, [r3, #0]
 800d904:	b29b      	uxth	r3, r3
 800d906:	3301      	adds	r3, #1
 800d908:	b29b      	uxth	r3, r3
 800d90a:	4a10      	ldr	r2, [pc, #64]	@ (800d94c <calcEffectiveValue+0x80>)
 800d90c:	4619      	mov	r1, r3
 800d90e:	8011      	strh	r1, [r2, #0]
 800d910:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800d914:	d116      	bne.n	800d944 <calcEffectiveValue+0x78>
    {
        cnt = 0;
 800d916:	4b0d      	ldr	r3, [pc, #52]	@ (800d94c <calcEffectiveValue+0x80>)
 800d918:	2200      	movs	r2, #0
 800d91a:	801a      	strh	r2, [r3, #0]
        arm_rms_f32(Vrms, 400, &signal_V->basic->rms);
 800d91c:	4b0a      	ldr	r3, [pc, #40]	@ (800d948 <calcEffectiveValue+0x7c>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	330c      	adds	r3, #12
 800d924:	461a      	mov	r2, r3
 800d926:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800d92a:	4809      	ldr	r0, [pc, #36]	@ (800d950 <calcEffectiveValue+0x84>)
 800d92c:	f000 fa4a 	bl	800ddc4 <arm_rms_f32>
        arm_rms_f32(Irms, 400, &signal_I->basic->rms);
 800d930:	4b08      	ldr	r3, [pc, #32]	@ (800d954 <calcEffectiveValue+0x88>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	330c      	adds	r3, #12
 800d938:	461a      	mov	r2, r3
 800d93a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800d93e:	4806      	ldr	r0, [pc, #24]	@ (800d958 <calcEffectiveValue+0x8c>)
 800d940:	f000 fa40 	bl	800ddc4 <arm_rms_f32>
    }
}
 800d944:	bf00      	nop
 800d946:	bd80      	pop	{r7, pc}
 800d948:	24004cd8 	.word	0x24004cd8
 800d94c:	24004ce0 	.word	0x24004ce0
 800d950:	24004ce4 	.word	0x24004ce4
 800d954:	24004cdc 	.word	0x24004cdc
 800d958:	24005324 	.word	0x24005324

0800d95c <normalize>:

/**
 * @brief    标幺化
 */
static void normalize(void)
{
 800d95c:	b480      	push	{r7}
 800d95e:	af00      	add	r7, sp, #0
    signal_V->basic->input[0] /= Ubase;
 800d960:	4b10      	ldr	r3, [pc, #64]	@ (800d9a4 <normalize+0x48>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	ed93 7a00 	vldr	s14, [r3]
 800d96a:	4b0e      	ldr	r3, [pc, #56]	@ (800d9a4 <normalize+0x48>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800d9a8 <normalize+0x4c>
 800d974:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d978:	edc3 7a00 	vstr	s15, [r3]
    signal_I->basic->input[0] /= Ibase;
 800d97c:	4b0b      	ldr	r3, [pc, #44]	@ (800d9ac <normalize+0x50>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	ed93 7a00 	vldr	s14, [r3]
 800d986:	4b09      	ldr	r3, [pc, #36]	@ (800d9ac <normalize+0x50>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800d9b0 <normalize+0x54>
 800d990:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d994:	edc3 7a00 	vstr	s15, [r3]
}
 800d998:	bf00      	nop
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr
 800d9a2:	bf00      	nop
 800d9a4:	24004cd8 	.word	0x24004cd8
 800d9a8:	41a9ae15 	.word	0x41a9ae15
 800d9ac:	24004cdc 	.word	0x24004cdc
 800d9b0:	4107be77 	.word	0x4107be77

0800d9b4 <spwmContral>:
/**
 * @brief    spwm控制
 * @return
 */
static void spwmContral(void)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	af00      	add	r7, sp, #0
    // 调节SPWM占空比
    if (signal_I->park_inv_alpha > 0)
 800d9b8:	4b1b      	ldr	r3, [pc, #108]	@ (800da28 <spwmContral+0x74>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	edd3 7a01 	vldr	s15, [r3, #4]
 800d9c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c8:	dd13      	ble.n	800d9f2 <spwmContral+0x3e>
    {
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, signal_I->park_inv_alpha * (TIM_PERIOD - 1.f));
 800d9ca:	4b17      	ldr	r3, [pc, #92]	@ (800da28 <spwmContral+0x74>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	edd3 7a01 	vldr	s15, [r3, #4]
 800d9d2:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800da2c <spwmContral+0x78>
 800d9d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d9da:	4b15      	ldr	r3, [pc, #84]	@ (800da30 <spwmContral+0x7c>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9e2:	ee17 2a90 	vmov	r2, s15
 800d9e6:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 800d9e8:	4b11      	ldr	r3, [pc, #68]	@ (800da30 <spwmContral+0x7c>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	639a      	str	r2, [r3, #56]	@ 0x38
    else
    {
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, -signal_I->park_inv_alpha * (TIM_PERIOD - 1.f));
    }
}
 800d9f0:	e014      	b.n	800da1c <spwmContral+0x68>
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 800d9f2:	4b0f      	ldr	r3, [pc, #60]	@ (800da30 <spwmContral+0x7c>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, -signal_I->park_inv_alpha * (TIM_PERIOD - 1.f));
 800d9fa:	4b0b      	ldr	r3, [pc, #44]	@ (800da28 <spwmContral+0x74>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	edd3 7a01 	vldr	s15, [r3, #4]
 800da02:	eef1 7a67 	vneg.f32	s15, s15
 800da06:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800da2c <spwmContral+0x78>
 800da0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da0e:	4b08      	ldr	r3, [pc, #32]	@ (800da30 <spwmContral+0x7c>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da16:	ee17 2a90 	vmov	r2, s15
 800da1a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800da1c:	bf00      	nop
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	24004cdc 	.word	0x24004cdc
 800da2c:	45bb7800 	.word	0x45bb7800
 800da30:	24000338 	.word	0x24000338

0800da34 <UserInit>:
static float Idc = 0.0f;            /* 直流电流 */
static float Utarget = 40.0f;       /* 目标直流电压 */
float Itarget = 0.0f;               /* 电流参考值 */

void UserInit(void)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	af00      	add	r7, sp, #0
    ad7606_Init();
 800da38:	f7fe fefe 	bl	800c838 <ad7606_Init>
    pll_Init_V(&signal_V, 50, 20000);
 800da3c:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800da40:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800da74 <UserInit+0x40>
 800da44:	480c      	ldr	r0, [pc, #48]	@ (800da78 <UserInit+0x44>)
 800da46:	f7ff f977 	bl	800cd38 <pll_Init_V>
    pll_Init_I(&signal_I, 50, 20000);
 800da4a:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800da4e:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800da74 <UserInit+0x40>
 800da52:	480a      	ldr	r0, [pc, #40]	@ (800da7c <UserInit+0x48>)
 800da54:	f7ff fade 	bl	800d014 <pll_Init_I>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800da58:	2100      	movs	r1, #0
 800da5a:	4809      	ldr	r0, [pc, #36]	@ (800da80 <UserInit+0x4c>)
 800da5c:	f7fa ff76 	bl	800894c <HAL_TIM_PWM_Start>
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800da60:	2100      	movs	r1, #0
 800da62:	4808      	ldr	r0, [pc, #32]	@ (800da84 <UserInit+0x50>)
 800da64:	f7f5 fbbe 	bl	80031e4 <HAL_DAC_Start>
    ad7606_Start(&htim2, TIM_CHANNEL_1);
 800da68:	2100      	movs	r1, #0
 800da6a:	4807      	ldr	r0, [pc, #28]	@ (800da88 <UserInit+0x54>)
 800da6c:	f7fe ff1e 	bl	800c8ac <ad7606_Start>
}
 800da70:	bf00      	nop
 800da72:	bd80      	pop	{r7, pc}
 800da74:	42480000 	.word	0x42480000
 800da78:	24004cd8 	.word	0x24004cd8
 800da7c:	24004cdc 	.word	0x24004cdc
 800da80:	24000338 	.word	0x24000338
 800da84:	2400010c 	.word	0x2400010c
 800da88:	240002ec 	.word	0x240002ec

0800da8c <StartStateLED>:
 * @brief    状态指示灯控制
 * @param    *argument
 * @return
 */
void StartStateLED(void *argument)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN stateLED */
    /* Infinite loop */
    for (;;)
    {
        switch (deviceState)
 800da94:	4b20      	ldr	r3, [pc, #128]	@ (800db18 <StartStateLED+0x8c>)
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	2b02      	cmp	r3, #2
 800da9a:	d032      	beq.n	800db02 <StartStateLED+0x76>
 800da9c:	2b02      	cmp	r3, #2
 800da9e:	dc38      	bgt.n	800db12 <StartStateLED+0x86>
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d002      	beq.n	800daaa <StartStateLED+0x1e>
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	d006      	beq.n	800dab6 <StartStateLED+0x2a>
        case FAULT: /* 保护状态 */
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
            osDelay(100);
            break;
        default:
            break;
 800daa8:	e033      	b.n	800db12 <StartStateLED+0x86>
            HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 800daaa:	2201      	movs	r2, #1
 800daac:	2101      	movs	r1, #1
 800daae:	481b      	ldr	r0, [pc, #108]	@ (800db1c <StartStateLED+0x90>)
 800dab0:	f7f5 ff76 	bl	80039a0 <HAL_GPIO_WritePin>
            break;
 800dab4:	e02e      	b.n	800db14 <StartStateLED+0x88>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800dab6:	2101      	movs	r1, #1
 800dab8:	4818      	ldr	r0, [pc, #96]	@ (800db1c <StartStateLED+0x90>)
 800daba:	f7f5 ff8a 	bl	80039d2 <HAL_GPIO_TogglePin>
            osDelay(100);
 800dabe:	2064      	movs	r0, #100	@ 0x64
 800dac0:	f7fc fa18 	bl	8009ef4 <osDelay>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800dac4:	2101      	movs	r1, #1
 800dac6:	4815      	ldr	r0, [pc, #84]	@ (800db1c <StartStateLED+0x90>)
 800dac8:	f7f5 ff83 	bl	80039d2 <HAL_GPIO_TogglePin>
            osDelay(200);
 800dacc:	20c8      	movs	r0, #200	@ 0xc8
 800dace:	f7fc fa11 	bl	8009ef4 <osDelay>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800dad2:	2101      	movs	r1, #1
 800dad4:	4811      	ldr	r0, [pc, #68]	@ (800db1c <StartStateLED+0x90>)
 800dad6:	f7f5 ff7c 	bl	80039d2 <HAL_GPIO_TogglePin>
            osDelay(100);
 800dada:	2064      	movs	r0, #100	@ 0x64
 800dadc:	f7fc fa0a 	bl	8009ef4 <osDelay>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800dae0:	2101      	movs	r1, #1
 800dae2:	480e      	ldr	r0, [pc, #56]	@ (800db1c <StartStateLED+0x90>)
 800dae4:	f7f5 ff75 	bl	80039d2 <HAL_GPIO_TogglePin>
            osDelay(200);
 800dae8:	20c8      	movs	r0, #200	@ 0xc8
 800daea:	f7fc fa03 	bl	8009ef4 <osDelay>
            HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800daee:	2200      	movs	r2, #0
 800daf0:	2102      	movs	r1, #2
 800daf2:	480a      	ldr	r0, [pc, #40]	@ (800db1c <StartStateLED+0x90>)
 800daf4:	f7f5 ff54 	bl	80039a0 <HAL_GPIO_WritePin>
            osDelay(1000);
 800daf8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800dafc:	f7fc f9fa 	bl	8009ef4 <osDelay>
            break;
 800db00:	e008      	b.n	800db14 <StartStateLED+0x88>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800db02:	2101      	movs	r1, #1
 800db04:	4805      	ldr	r0, [pc, #20]	@ (800db1c <StartStateLED+0x90>)
 800db06:	f7f5 ff64 	bl	80039d2 <HAL_GPIO_TogglePin>
            osDelay(100);
 800db0a:	2064      	movs	r0, #100	@ 0x64
 800db0c:	f7fc f9f2 	bl	8009ef4 <osDelay>
            break;
 800db10:	e000      	b.n	800db14 <StartStateLED+0x88>
            break;
 800db12:	bf00      	nop
        switch (deviceState)
 800db14:	e7be      	b.n	800da94 <StartStateLED+0x8>
 800db16:	bf00      	nop
 800db18:	24005964 	.word	0x24005964
 800db1c:	58022000 	.word	0x58022000

0800db20 <StartMcuTemperature>:
 * @brief    芯片温度读取
 * @param    *argument
 * @return
 */
void StartMcuTemperature(void *argument)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b084      	sub	sp, #16
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN mcuTemperature */
    HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED, ADC_CALIB_OFFSET);
 800db28:	2200      	movs	r2, #0
 800db2a:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800db2e:	4822      	ldr	r0, [pc, #136]	@ (800dbb8 <StartMcuTemperature+0x98>)
 800db30:	f7f5 f97a 	bl	8002e28 <HAL_ADCEx_Calibration_Start>
    HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED, ADC_CALIB_OFFSET_LINEARITY);
 800db34:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800db38:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800db3c:	481e      	ldr	r0, [pc, #120]	@ (800dbb8 <StartMcuTemperature+0x98>)
 800db3e:	f7f5 f973 	bl	8002e28 <HAL_ADCEx_Calibration_Start>
    /* Infinite loop */
    for (;;)
    {
        HAL_ADC_Start(&hadc3);
 800db42:	481d      	ldr	r0, [pc, #116]	@ (800dbb8 <StartMcuTemperature+0x98>)
 800db44:	f7f4 fa20 	bl	8001f88 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc3, 10) == HAL_OK) /* 判断是否转换完成 */
 800db48:	210a      	movs	r1, #10
 800db4a:	481b      	ldr	r0, [pc, #108]	@ (800dbb8 <StartMcuTemperature+0x98>)
 800db4c:	f7f4 fae6 	bl	800211c <HAL_ADC_PollForConversion>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d125      	bne.n	800dba2 <StartMcuTemperature+0x82>
        {
            uint16_t temprature = HAL_ADC_GetValue(&hadc3); /* 读出转换结果 */
 800db56:	4818      	ldr	r0, [pc, #96]	@ (800dbb8 <StartMcuTemperature+0x98>)
 800db58:	f7f4 fbd4 	bl	8002304 <HAL_ADC_GetValue>
 800db5c:	4603      	mov	r3, r0
 800db5e:	81fb      	strh	r3, [r7, #14]
            mcuTemperature = ((110.0 - 30.0) / (*(unsigned short *)(0x1FF1E840) - *(unsigned short *)(0x1FF1E820))) * (temprature - *(unsigned short *)(0x1FF1E820)) + 30;
 800db60:	4b16      	ldr	r3, [pc, #88]	@ (800dbbc <StartMcuTemperature+0x9c>)
 800db62:	881b      	ldrh	r3, [r3, #0]
 800db64:	461a      	mov	r2, r3
 800db66:	4b16      	ldr	r3, [pc, #88]	@ (800dbc0 <StartMcuTemperature+0xa0>)
 800db68:	881b      	ldrh	r3, [r3, #0]
 800db6a:	1ad3      	subs	r3, r2, r3
 800db6c:	ee07 3a90 	vmov	s15, r3
 800db70:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800db74:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 800dbb0 <StartMcuTemperature+0x90>
 800db78:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800db7c:	89fb      	ldrh	r3, [r7, #14]
 800db7e:	4a10      	ldr	r2, [pc, #64]	@ (800dbc0 <StartMcuTemperature+0xa0>)
 800db80:	8812      	ldrh	r2, [r2, #0]
 800db82:	1a9b      	subs	r3, r3, r2
 800db84:	ee07 3a90 	vmov	s15, r3
 800db88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800db8c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800db90:	eeb3 6b0e 	vmov.f64	d6, #62	@ 0x41f00000  30.0
 800db94:	ee37 7b06 	vadd.f64	d7, d7, d6
 800db98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800db9c:	4b09      	ldr	r3, [pc, #36]	@ (800dbc4 <StartMcuTemperature+0xa4>)
 800db9e:	edc3 7a00 	vstr	s15, [r3]
        }
        osDelay(1000);
 800dba2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800dba6:	f7fc f9a5 	bl	8009ef4 <osDelay>
        HAL_ADC_Start(&hadc3);
 800dbaa:	e7ca      	b.n	800db42 <StartMcuTemperature+0x22>
 800dbac:	f3af 8000 	nop.w
 800dbb0:	00000000 	.word	0x00000000
 800dbb4:	40540000 	.word	0x40540000
 800dbb8:	240000a8 	.word	0x240000a8
 800dbbc:	1ff1e840 	.word	0x1ff1e840
 800dbc0:	1ff1e820 	.word	0x1ff1e820
 800dbc4:	24005968 	.word	0x24005968

0800dbc8 <StartOledDisplay>:
 * @brief    OLED显示控制
 * @param    *argument
 * @return
 */
void StartOledDisplay(void *argument)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN oledDisplay */
    /* Infinite loop */
    for (;;)
    {
        osDelay(100);
 800dbd0:	2064      	movs	r0, #100	@ 0x64
 800dbd2:	f7fc f98f 	bl	8009ef4 <osDelay>
 800dbd6:	e7fb      	b.n	800dbd0 <StartOledDisplay+0x8>

0800dbd8 <StartDCSampling>:
 * @brief    直流采样
 * @param    *argument
 * @return
 */
void StartDCSampling(void *argument)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
    static const INA228_Handle INA228_0 = &INA228_0_state;

    /* Infinite loop */
    for (;;)
    {
        Udc = INA228_getVBUS_V(INA228_0);
 800dbe0:	4b0c      	ldr	r3, [pc, #48]	@ (800dc14 <StartDCSampling+0x3c>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7fe ff63 	bl	800cab0 <INA228_getVBUS_V>
 800dbea:	eef0 7a40 	vmov.f32	s15, s0
 800dbee:	4b0a      	ldr	r3, [pc, #40]	@ (800dc18 <StartDCSampling+0x40>)
 800dbf0:	edc3 7a00 	vstr	s15, [r3]
        Idc = INA228_getCURRENT_A(INA228_0);
 800dbf4:	4b07      	ldr	r3, [pc, #28]	@ (800dc14 <StartDCSampling+0x3c>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7fe ffdd 	bl	800cbb8 <INA228_getCURRENT_A>
 800dbfe:	eef0 7a40 	vmov.f32	s15, s0
 800dc02:	4b06      	ldr	r3, [pc, #24]	@ (800dc1c <StartDCSampling+0x44>)
 800dc04:	edc3 7a00 	vstr	s15, [r3]
        osDelay(10);
 800dc08:	200a      	movs	r0, #10
 800dc0a:	f7fc f973 	bl	8009ef4 <osDelay>
        Udc = INA228_getVBUS_V(INA228_0);
 800dc0e:	bf00      	nop
 800dc10:	e7e6      	b.n	800dbe0 <StartDCSampling+0x8>
 800dc12:	bf00      	nop
 800dc14:	0800e948 	.word	0x0800e948
 800dc18:	2400596c 	.word	0x2400596c
 800dc1c:	24005970 	.word	0x24005970

0800dc20 <StartCircuitProtection>:
 * @brief    电路保护控制
 * @param    *argument
 * @return
 */
void StartCircuitProtection(void *argument)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN circuitProtection */
    /* Infinite loop */
    for (;;)
    {
        float Uac = signal_V->basic->rms;
 800dc28:	4b44      	ldr	r3, [pc, #272]	@ (800dd3c <StartCircuitProtection+0x11c>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	68db      	ldr	r3, [r3, #12]
 800dc30:	60fb      	str	r3, [r7, #12]
        float Iac = signal_I->basic->rms;
 800dc32:	4b43      	ldr	r3, [pc, #268]	@ (800dd40 <StartCircuitProtection+0x120>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	68db      	ldr	r3, [r3, #12]
 800dc3a:	60bb      	str	r3, [r7, #8]
        if (Udc > protection_Udc || fabsf(Idc) > protection_Idc || Uac > protection_Uac || Iac > protection_Iac)
 800dc3c:	4b41      	ldr	r3, [pc, #260]	@ (800dd44 <StartCircuitProtection+0x124>)
 800dc3e:	edd3 7a00 	vldr	s15, [r3]
 800dc42:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800dd48 <StartCircuitProtection+0x128>
 800dc46:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc4e:	dc1d      	bgt.n	800dc8c <StartCircuitProtection+0x6c>
 800dc50:	4b3e      	ldr	r3, [pc, #248]	@ (800dd4c <StartCircuitProtection+0x12c>)
 800dc52:	edd3 7a00 	vldr	s15, [r3]
 800dc56:	eef0 7ae7 	vabs.f32	s15, s15
 800dc5a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800dc5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc66:	dc11      	bgt.n	800dc8c <StartCircuitProtection+0x6c>
 800dc68:	edd7 7a03 	vldr	s15, [r7, #12]
 800dc6c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800dc70:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dc74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc78:	dc08      	bgt.n	800dc8c <StartCircuitProtection+0x6c>
 800dc7a:	edd7 7a02 	vldr	s15, [r7, #8]
 800dc7e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800dc82:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc8a:	dd03      	ble.n	800dc94 <StartCircuitProtection+0x74>
        {
            deviceState = FAULT;
 800dc8c:	4b30      	ldr	r3, [pc, #192]	@ (800dd50 <StartCircuitProtection+0x130>)
 800dc8e:	2202      	movs	r2, #2
 800dc90:	701a      	strb	r2, [r3, #0]
 800dc92:	e04e      	b.n	800dd32 <StartCircuitProtection+0x112>

            /* 关闭输出 */
            // HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_RESET);
        }
        else if (deviceState == START && Uac > 10.f && Iac > 0.5f && fabsf(signal_V->basic->park_q) < 0.02f)
 800dc94:	4b2e      	ldr	r3, [pc, #184]	@ (800dd50 <StartCircuitProtection+0x130>)
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d14a      	bne.n	800dd32 <StartCircuitProtection+0x112>
 800dc9c:	edd7 7a03 	vldr	s15, [r7, #12]
 800dca0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800dca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcac:	dd41      	ble.n	800dd32 <StartCircuitProtection+0x112>
 800dcae:	edd7 7a02 	vldr	s15, [r7, #8]
 800dcb2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800dcb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dcba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcbe:	dd38      	ble.n	800dd32 <StartCircuitProtection+0x112>
 800dcc0:	4b1e      	ldr	r3, [pc, #120]	@ (800dd3c <StartCircuitProtection+0x11c>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	edd3 7a06 	vldr	s15, [r3, #24]
 800dcca:	eef0 7ae7 	vabs.f32	s15, s15
 800dcce:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800dd54 <StartCircuitProtection+0x134>
 800dcd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dcd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcda:	d52a      	bpl.n	800dd32 <StartCircuitProtection+0x112>
        {
            osDelay(500); /* 防止误判 */
 800dcdc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800dce0:	f7fc f908 	bl	8009ef4 <osDelay>
            if (deviceState == START && Uac > 10.f && Iac > 0.5f && fabsf(signal_V->basic->park_q) < 0.02f)
 800dce4:	4b1a      	ldr	r3, [pc, #104]	@ (800dd50 <StartCircuitProtection+0x130>)
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d122      	bne.n	800dd32 <StartCircuitProtection+0x112>
 800dcec:	edd7 7a03 	vldr	s15, [r7, #12]
 800dcf0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800dcf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcfc:	dd19      	ble.n	800dd32 <StartCircuitProtection+0x112>
 800dcfe:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd02:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800dd06:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd0e:	dd10      	ble.n	800dd32 <StartCircuitProtection+0x112>
 800dd10:	4b0a      	ldr	r3, [pc, #40]	@ (800dd3c <StartCircuitProtection+0x11c>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	edd3 7a06 	vldr	s15, [r3, #24]
 800dd1a:	eef0 7ae7 	vabs.f32	s15, s15
 800dd1e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800dd54 <StartCircuitProtection+0x134>
 800dd22:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dd26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd2a:	d502      	bpl.n	800dd32 <StartCircuitProtection+0x112>
            {
                deviceState = RUN;
 800dd2c:	4b08      	ldr	r3, [pc, #32]	@ (800dd50 <StartCircuitProtection+0x130>)
 800dd2e:	2201      	movs	r2, #1
 800dd30:	701a      	strb	r2, [r3, #0]
                /* 打开输出 */
                // HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_SET);
            }
        }
        osDelay(10);
 800dd32:	200a      	movs	r0, #10
 800dd34:	f7fc f8de 	bl	8009ef4 <osDelay>
    {
 800dd38:	e776      	b.n	800dc28 <StartCircuitProtection+0x8>
 800dd3a:	bf00      	nop
 800dd3c:	24004cd8 	.word	0x24004cd8
 800dd40:	24004cdc 	.word	0x24004cdc
 800dd44:	2400596c 	.word	0x2400596c
 800dd48:	42b40000 	.word	0x42b40000
 800dd4c:	24005970 	.word	0x24005970
 800dd50:	24005964 	.word	0x24005964
 800dd54:	3ca3d70a 	.word	0x3ca3d70a

0800dd58 <StartDCControl>:
 * @brief    直流电压控制
 * @param    *argument
 * @return
 */
void StartDCControl(void *argument)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b082      	sub	sp, #8
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN dcControl */
    static PID pidDCV;
    pid_Init(&pidDCV, 0.1f, 0.01f, 0, 2.5f, 0.5f);
 800dd60:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800dd64:	eef0 1a04 	vmov.f32	s3, #4	@ 0x40200000  2.5
 800dd68:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 800dda8 <StartDCControl+0x50>
 800dd6c:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 800ddac <StartDCControl+0x54>
 800dd70:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800ddb0 <StartDCControl+0x58>
 800dd74:	480f      	ldr	r0, [pc, #60]	@ (800ddb4 <StartDCControl+0x5c>)
 800dd76:	f7fe ff39 	bl	800cbec <pid_Init>
    /* Infinite loop */
    for (;;)
    {
        pid(&pidDCV, Utarget, Udc);
 800dd7a:	4b0f      	ldr	r3, [pc, #60]	@ (800ddb8 <StartDCControl+0x60>)
 800dd7c:	edd3 7a00 	vldr	s15, [r3]
 800dd80:	4b0e      	ldr	r3, [pc, #56]	@ (800ddbc <StartDCControl+0x64>)
 800dd82:	ed93 7a00 	vldr	s14, [r3]
 800dd86:	eef0 0a47 	vmov.f32	s1, s14
 800dd8a:	eeb0 0a67 	vmov.f32	s0, s15
 800dd8e:	4809      	ldr	r0, [pc, #36]	@ (800ddb4 <StartDCControl+0x5c>)
 800dd90:	f7fe ff5f 	bl	800cc52 <pid>
        Itarget = pidDCV.out;
 800dd94:	4b07      	ldr	r3, [pc, #28]	@ (800ddb4 <StartDCControl+0x5c>)
 800dd96:	699b      	ldr	r3, [r3, #24]
 800dd98:	4a09      	ldr	r2, [pc, #36]	@ (800ddc0 <StartDCControl+0x68>)
 800dd9a:	6013      	str	r3, [r2, #0]
        osDelay(20);
 800dd9c:	2014      	movs	r0, #20
 800dd9e:	f7fc f8a9 	bl	8009ef4 <osDelay>
        pid(&pidDCV, Utarget, Udc);
 800dda2:	bf00      	nop
 800dda4:	e7e9      	b.n	800dd7a <StartDCControl+0x22>
 800dda6:	bf00      	nop
 800dda8:	00000000 	.word	0x00000000
 800ddac:	3c23d70a 	.word	0x3c23d70a
 800ddb0:	3dcccccd 	.word	0x3dcccccd
 800ddb4:	24005978 	.word	0x24005978
 800ddb8:	24000014 	.word	0x24000014
 800ddbc:	2400596c 	.word	0x2400596c
 800ddc0:	24005974 	.word	0x24005974

0800ddc4 <arm_rms_f32>:
 800ddc4:	b530      	push	{r4, r5, lr}
 800ddc6:	088d      	lsrs	r5, r1, #2
 800ddc8:	ed2d 8b02 	vpush	{d8}
 800ddcc:	b083      	sub	sp, #12
 800ddce:	d054      	beq.n	800de7a <arm_rms_f32+0xb6>
 800ddd0:	f100 0310 	add.w	r3, r0, #16
 800ddd4:	462c      	mov	r4, r5
 800ddd6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800de90 <arm_rms_f32+0xcc>
 800ddda:	ed53 6a04 	vldr	s13, [r3, #-16]
 800ddde:	3c01      	subs	r4, #1
 800dde0:	ed13 7a03 	vldr	s14, [r3, #-12]
 800dde4:	f103 0310 	add.w	r3, r3, #16
 800dde8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800ddec:	ed53 7a06 	vldr	s15, [r3, #-24]	@ 0xffffffe8
 800ddf0:	ee27 7a07 	vmul.f32	s14, s14, s14
 800ddf4:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 800ddf8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ddfc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800de00:	ee26 6a06 	vmul.f32	s12, s12, s12
 800de04:	ee37 7a26 	vadd.f32	s14, s14, s13
 800de08:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de0c:	ee76 5a27 	vadd.f32	s11, s12, s15
 800de10:	d1e3      	bne.n	800ddda <arm_rms_f32+0x16>
 800de12:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800de16:	f011 0303 	ands.w	r3, r1, #3
 800de1a:	d015      	beq.n	800de48 <arm_rms_f32+0x84>
 800de1c:	edd0 7a00 	vldr	s15, [r0]
 800de20:	3b01      	subs	r3, #1
 800de22:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800de26:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800de2a:	d00d      	beq.n	800de48 <arm_rms_f32+0x84>
 800de2c:	edd0 7a01 	vldr	s15, [r0, #4]
 800de30:	2b01      	cmp	r3, #1
 800de32:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800de36:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800de3a:	d005      	beq.n	800de48 <arm_rms_f32+0x84>
 800de3c:	edd0 7a02 	vldr	s15, [r0, #8]
 800de40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800de44:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800de48:	ee07 1a90 	vmov	s15, r1
 800de4c:	2300      	movs	r3, #0
 800de4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de52:	ee85 0aa7 	vdiv.f32	s0, s11, s15
 800de56:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800de5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de5e:	db0f      	blt.n	800de80 <arm_rms_f32+0xbc>
 800de60:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800de64:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800de68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de6c:	d40a      	bmi.n	800de84 <arm_rms_f32+0xc0>
 800de6e:	ed82 8a00 	vstr	s16, [r2]
 800de72:	b003      	add	sp, #12
 800de74:	ecbd 8b02 	vpop	{d8}
 800de78:	bd30      	pop	{r4, r5, pc}
 800de7a:	eddf 5a05 	vldr	s11, [pc, #20]	@ 800de90 <arm_rms_f32+0xcc>
 800de7e:	e7ca      	b.n	800de16 <arm_rms_f32+0x52>
 800de80:	6013      	str	r3, [r2, #0]
 800de82:	e7f6      	b.n	800de72 <arm_rms_f32+0xae>
 800de84:	9201      	str	r2, [sp, #4]
 800de86:	f000 fa0f 	bl	800e2a8 <sqrtf>
 800de8a:	9a01      	ldr	r2, [sp, #4]
 800de8c:	e7ef      	b.n	800de6e <arm_rms_f32+0xaa>
 800de8e:	bf00      	nop
 800de90:	00000000 	.word	0x00000000

0800de94 <arm_sin_f32>:
 800de94:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800df14 <arm_sin_f32+0x80>
 800de98:	ee20 0a27 	vmul.f32	s0, s0, s15
 800de9c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dea0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800dea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dea8:	d504      	bpl.n	800deb4 <arm_sin_f32+0x20>
 800deaa:	ee17 3a90 	vmov	r3, s15
 800deae:	3b01      	subs	r3, #1
 800deb0:	ee07 3a90 	vmov	s15, r3
 800deb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800deb8:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800df18 <arm_sin_f32+0x84>
 800debc:	ee70 7a67 	vsub.f32	s15, s0, s15
 800dec0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dec4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800dec8:	ee17 3a10 	vmov	r3, s14
 800decc:	b29b      	uxth	r3, r3
 800dece:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ded2:	d21a      	bcs.n	800df0a <arm_sin_f32+0x76>
 800ded4:	ee07 3a10 	vmov	s14, r3
 800ded8:	1c59      	adds	r1, r3, #1
 800deda:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800dede:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800dee2:	4a0e      	ldr	r2, [pc, #56]	@ (800df1c <arm_sin_f32+0x88>)
 800dee4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800dee8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800deec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800def0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800def4:	edd3 6a00 	vldr	s13, [r3]
 800def8:	ed92 7a00 	vldr	s14, [r2]
 800defc:	ee20 0a26 	vmul.f32	s0, s0, s13
 800df00:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df04:	ee30 0a27 	vadd.f32	s0, s0, s15
 800df08:	4770      	bx	lr
 800df0a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800df0e:	2101      	movs	r1, #1
 800df10:	2300      	movs	r3, #0
 800df12:	e7e6      	b.n	800dee2 <arm_sin_f32+0x4e>
 800df14:	3e22f983 	.word	0x3e22f983
 800df18:	44000000 	.word	0x44000000
 800df1c:	0800e94c 	.word	0x0800e94c

0800df20 <arm_cos_f32>:
 800df20:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800dfa8 <arm_cos_f32+0x88>
 800df24:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800df28:	ee20 0a27 	vmul.f32	s0, s0, s15
 800df2c:	ee30 0a07 	vadd.f32	s0, s0, s14
 800df30:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800df34:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800df38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df3c:	d504      	bpl.n	800df48 <arm_cos_f32+0x28>
 800df3e:	ee17 3a90 	vmov	r3, s15
 800df42:	3b01      	subs	r3, #1
 800df44:	ee07 3a90 	vmov	s15, r3
 800df48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df4c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800dfac <arm_cos_f32+0x8c>
 800df50:	ee70 7a67 	vsub.f32	s15, s0, s15
 800df54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800df58:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800df5c:	ee17 3a10 	vmov	r3, s14
 800df60:	b29b      	uxth	r3, r3
 800df62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df66:	d21a      	bcs.n	800df9e <arm_cos_f32+0x7e>
 800df68:	ee07 3a10 	vmov	s14, r3
 800df6c:	1c59      	adds	r1, r3, #1
 800df6e:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800df72:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800df76:	4a0e      	ldr	r2, [pc, #56]	@ (800dfb0 <arm_cos_f32+0x90>)
 800df78:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800df7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df80:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800df84:	ee30 0a67 	vsub.f32	s0, s0, s15
 800df88:	edd3 6a00 	vldr	s13, [r3]
 800df8c:	ed92 7a00 	vldr	s14, [r2]
 800df90:	ee20 0a26 	vmul.f32	s0, s0, s13
 800df94:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df98:	ee30 0a27 	vadd.f32	s0, s0, s15
 800df9c:	4770      	bx	lr
 800df9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dfa2:	2101      	movs	r1, #1
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	e7e6      	b.n	800df76 <arm_cos_f32+0x56>
 800dfa8:	3e22f983 	.word	0x3e22f983
 800dfac:	44000000 	.word	0x44000000
 800dfb0:	0800e94c 	.word	0x0800e94c

0800dfb4 <malloc>:
 800dfb4:	4b02      	ldr	r3, [pc, #8]	@ (800dfc0 <malloc+0xc>)
 800dfb6:	4601      	mov	r1, r0
 800dfb8:	6818      	ldr	r0, [r3, #0]
 800dfba:	f000 b825 	b.w	800e008 <_malloc_r>
 800dfbe:	bf00      	nop
 800dfc0:	2400003c 	.word	0x2400003c

0800dfc4 <sbrk_aligned>:
 800dfc4:	b570      	push	{r4, r5, r6, lr}
 800dfc6:	4e0f      	ldr	r6, [pc, #60]	@ (800e004 <sbrk_aligned+0x40>)
 800dfc8:	460c      	mov	r4, r1
 800dfca:	6831      	ldr	r1, [r6, #0]
 800dfcc:	4605      	mov	r5, r0
 800dfce:	b911      	cbnz	r1, 800dfd6 <sbrk_aligned+0x12>
 800dfd0:	f000 f8ae 	bl	800e130 <_sbrk_r>
 800dfd4:	6030      	str	r0, [r6, #0]
 800dfd6:	4621      	mov	r1, r4
 800dfd8:	4628      	mov	r0, r5
 800dfda:	f000 f8a9 	bl	800e130 <_sbrk_r>
 800dfde:	1c43      	adds	r3, r0, #1
 800dfe0:	d103      	bne.n	800dfea <sbrk_aligned+0x26>
 800dfe2:	f04f 34ff 	mov.w	r4, #4294967295
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	bd70      	pop	{r4, r5, r6, pc}
 800dfea:	1cc4      	adds	r4, r0, #3
 800dfec:	f024 0403 	bic.w	r4, r4, #3
 800dff0:	42a0      	cmp	r0, r4
 800dff2:	d0f8      	beq.n	800dfe6 <sbrk_aligned+0x22>
 800dff4:	1a21      	subs	r1, r4, r0
 800dff6:	4628      	mov	r0, r5
 800dff8:	f000 f89a 	bl	800e130 <_sbrk_r>
 800dffc:	3001      	adds	r0, #1
 800dffe:	d1f2      	bne.n	800dfe6 <sbrk_aligned+0x22>
 800e000:	e7ef      	b.n	800dfe2 <sbrk_aligned+0x1e>
 800e002:	bf00      	nop
 800e004:	2400599c 	.word	0x2400599c

0800e008 <_malloc_r>:
 800e008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e00c:	1ccd      	adds	r5, r1, #3
 800e00e:	f025 0503 	bic.w	r5, r5, #3
 800e012:	3508      	adds	r5, #8
 800e014:	2d0c      	cmp	r5, #12
 800e016:	bf38      	it	cc
 800e018:	250c      	movcc	r5, #12
 800e01a:	2d00      	cmp	r5, #0
 800e01c:	4606      	mov	r6, r0
 800e01e:	db01      	blt.n	800e024 <_malloc_r+0x1c>
 800e020:	42a9      	cmp	r1, r5
 800e022:	d904      	bls.n	800e02e <_malloc_r+0x26>
 800e024:	230c      	movs	r3, #12
 800e026:	6033      	str	r3, [r6, #0]
 800e028:	2000      	movs	r0, #0
 800e02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e02e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e104 <_malloc_r+0xfc>
 800e032:	f000 f869 	bl	800e108 <__malloc_lock>
 800e036:	f8d8 3000 	ldr.w	r3, [r8]
 800e03a:	461c      	mov	r4, r3
 800e03c:	bb44      	cbnz	r4, 800e090 <_malloc_r+0x88>
 800e03e:	4629      	mov	r1, r5
 800e040:	4630      	mov	r0, r6
 800e042:	f7ff ffbf 	bl	800dfc4 <sbrk_aligned>
 800e046:	1c43      	adds	r3, r0, #1
 800e048:	4604      	mov	r4, r0
 800e04a:	d158      	bne.n	800e0fe <_malloc_r+0xf6>
 800e04c:	f8d8 4000 	ldr.w	r4, [r8]
 800e050:	4627      	mov	r7, r4
 800e052:	2f00      	cmp	r7, #0
 800e054:	d143      	bne.n	800e0de <_malloc_r+0xd6>
 800e056:	2c00      	cmp	r4, #0
 800e058:	d04b      	beq.n	800e0f2 <_malloc_r+0xea>
 800e05a:	6823      	ldr	r3, [r4, #0]
 800e05c:	4639      	mov	r1, r7
 800e05e:	4630      	mov	r0, r6
 800e060:	eb04 0903 	add.w	r9, r4, r3
 800e064:	f000 f864 	bl	800e130 <_sbrk_r>
 800e068:	4581      	cmp	r9, r0
 800e06a:	d142      	bne.n	800e0f2 <_malloc_r+0xea>
 800e06c:	6821      	ldr	r1, [r4, #0]
 800e06e:	1a6d      	subs	r5, r5, r1
 800e070:	4629      	mov	r1, r5
 800e072:	4630      	mov	r0, r6
 800e074:	f7ff ffa6 	bl	800dfc4 <sbrk_aligned>
 800e078:	3001      	adds	r0, #1
 800e07a:	d03a      	beq.n	800e0f2 <_malloc_r+0xea>
 800e07c:	6823      	ldr	r3, [r4, #0]
 800e07e:	442b      	add	r3, r5
 800e080:	6023      	str	r3, [r4, #0]
 800e082:	f8d8 3000 	ldr.w	r3, [r8]
 800e086:	685a      	ldr	r2, [r3, #4]
 800e088:	bb62      	cbnz	r2, 800e0e4 <_malloc_r+0xdc>
 800e08a:	f8c8 7000 	str.w	r7, [r8]
 800e08e:	e00f      	b.n	800e0b0 <_malloc_r+0xa8>
 800e090:	6822      	ldr	r2, [r4, #0]
 800e092:	1b52      	subs	r2, r2, r5
 800e094:	d420      	bmi.n	800e0d8 <_malloc_r+0xd0>
 800e096:	2a0b      	cmp	r2, #11
 800e098:	d917      	bls.n	800e0ca <_malloc_r+0xc2>
 800e09a:	1961      	adds	r1, r4, r5
 800e09c:	42a3      	cmp	r3, r4
 800e09e:	6025      	str	r5, [r4, #0]
 800e0a0:	bf18      	it	ne
 800e0a2:	6059      	strne	r1, [r3, #4]
 800e0a4:	6863      	ldr	r3, [r4, #4]
 800e0a6:	bf08      	it	eq
 800e0a8:	f8c8 1000 	streq.w	r1, [r8]
 800e0ac:	5162      	str	r2, [r4, r5]
 800e0ae:	604b      	str	r3, [r1, #4]
 800e0b0:	4630      	mov	r0, r6
 800e0b2:	f000 f82f 	bl	800e114 <__malloc_unlock>
 800e0b6:	f104 000b 	add.w	r0, r4, #11
 800e0ba:	1d23      	adds	r3, r4, #4
 800e0bc:	f020 0007 	bic.w	r0, r0, #7
 800e0c0:	1ac2      	subs	r2, r0, r3
 800e0c2:	bf1c      	itt	ne
 800e0c4:	1a1b      	subne	r3, r3, r0
 800e0c6:	50a3      	strne	r3, [r4, r2]
 800e0c8:	e7af      	b.n	800e02a <_malloc_r+0x22>
 800e0ca:	6862      	ldr	r2, [r4, #4]
 800e0cc:	42a3      	cmp	r3, r4
 800e0ce:	bf0c      	ite	eq
 800e0d0:	f8c8 2000 	streq.w	r2, [r8]
 800e0d4:	605a      	strne	r2, [r3, #4]
 800e0d6:	e7eb      	b.n	800e0b0 <_malloc_r+0xa8>
 800e0d8:	4623      	mov	r3, r4
 800e0da:	6864      	ldr	r4, [r4, #4]
 800e0dc:	e7ae      	b.n	800e03c <_malloc_r+0x34>
 800e0de:	463c      	mov	r4, r7
 800e0e0:	687f      	ldr	r7, [r7, #4]
 800e0e2:	e7b6      	b.n	800e052 <_malloc_r+0x4a>
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	42a3      	cmp	r3, r4
 800e0ea:	d1fb      	bne.n	800e0e4 <_malloc_r+0xdc>
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	6053      	str	r3, [r2, #4]
 800e0f0:	e7de      	b.n	800e0b0 <_malloc_r+0xa8>
 800e0f2:	230c      	movs	r3, #12
 800e0f4:	6033      	str	r3, [r6, #0]
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	f000 f80c 	bl	800e114 <__malloc_unlock>
 800e0fc:	e794      	b.n	800e028 <_malloc_r+0x20>
 800e0fe:	6005      	str	r5, [r0, #0]
 800e100:	e7d6      	b.n	800e0b0 <_malloc_r+0xa8>
 800e102:	bf00      	nop
 800e104:	240059a0 	.word	0x240059a0

0800e108 <__malloc_lock>:
 800e108:	4801      	ldr	r0, [pc, #4]	@ (800e110 <__malloc_lock+0x8>)
 800e10a:	f000 b84b 	b.w	800e1a4 <__retarget_lock_acquire_recursive>
 800e10e:	bf00      	nop
 800e110:	24005ae0 	.word	0x24005ae0

0800e114 <__malloc_unlock>:
 800e114:	4801      	ldr	r0, [pc, #4]	@ (800e11c <__malloc_unlock+0x8>)
 800e116:	f000 b846 	b.w	800e1a6 <__retarget_lock_release_recursive>
 800e11a:	bf00      	nop
 800e11c:	24005ae0 	.word	0x24005ae0

0800e120 <memset>:
 800e120:	4402      	add	r2, r0
 800e122:	4603      	mov	r3, r0
 800e124:	4293      	cmp	r3, r2
 800e126:	d100      	bne.n	800e12a <memset+0xa>
 800e128:	4770      	bx	lr
 800e12a:	f803 1b01 	strb.w	r1, [r3], #1
 800e12e:	e7f9      	b.n	800e124 <memset+0x4>

0800e130 <_sbrk_r>:
 800e130:	b538      	push	{r3, r4, r5, lr}
 800e132:	4d06      	ldr	r5, [pc, #24]	@ (800e14c <_sbrk_r+0x1c>)
 800e134:	2300      	movs	r3, #0
 800e136:	4604      	mov	r4, r0
 800e138:	4608      	mov	r0, r1
 800e13a:	602b      	str	r3, [r5, #0]
 800e13c:	f7f3 f83c 	bl	80011b8 <_sbrk>
 800e140:	1c43      	adds	r3, r0, #1
 800e142:	d102      	bne.n	800e14a <_sbrk_r+0x1a>
 800e144:	682b      	ldr	r3, [r5, #0]
 800e146:	b103      	cbz	r3, 800e14a <_sbrk_r+0x1a>
 800e148:	6023      	str	r3, [r4, #0]
 800e14a:	bd38      	pop	{r3, r4, r5, pc}
 800e14c:	24005adc 	.word	0x24005adc

0800e150 <__errno>:
 800e150:	4b01      	ldr	r3, [pc, #4]	@ (800e158 <__errno+0x8>)
 800e152:	6818      	ldr	r0, [r3, #0]
 800e154:	4770      	bx	lr
 800e156:	bf00      	nop
 800e158:	2400003c 	.word	0x2400003c

0800e15c <__libc_init_array>:
 800e15c:	b570      	push	{r4, r5, r6, lr}
 800e15e:	4d0d      	ldr	r5, [pc, #52]	@ (800e194 <__libc_init_array+0x38>)
 800e160:	4c0d      	ldr	r4, [pc, #52]	@ (800e198 <__libc_init_array+0x3c>)
 800e162:	1b64      	subs	r4, r4, r5
 800e164:	10a4      	asrs	r4, r4, #2
 800e166:	2600      	movs	r6, #0
 800e168:	42a6      	cmp	r6, r4
 800e16a:	d109      	bne.n	800e180 <__libc_init_array+0x24>
 800e16c:	4d0b      	ldr	r5, [pc, #44]	@ (800e19c <__libc_init_array+0x40>)
 800e16e:	4c0c      	ldr	r4, [pc, #48]	@ (800e1a0 <__libc_init_array+0x44>)
 800e170:	f000 fb14 	bl	800e79c <_init>
 800e174:	1b64      	subs	r4, r4, r5
 800e176:	10a4      	asrs	r4, r4, #2
 800e178:	2600      	movs	r6, #0
 800e17a:	42a6      	cmp	r6, r4
 800e17c:	d105      	bne.n	800e18a <__libc_init_array+0x2e>
 800e17e:	bd70      	pop	{r4, r5, r6, pc}
 800e180:	f855 3b04 	ldr.w	r3, [r5], #4
 800e184:	4798      	blx	r3
 800e186:	3601      	adds	r6, #1
 800e188:	e7ee      	b.n	800e168 <__libc_init_array+0xc>
 800e18a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e18e:	4798      	blx	r3
 800e190:	3601      	adds	r6, #1
 800e192:	e7f2      	b.n	800e17a <__libc_init_array+0x1e>
 800e194:	0800f168 	.word	0x0800f168
 800e198:	0800f168 	.word	0x0800f168
 800e19c:	0800f168 	.word	0x0800f168
 800e1a0:	0800f16c 	.word	0x0800f16c

0800e1a4 <__retarget_lock_acquire_recursive>:
 800e1a4:	4770      	bx	lr

0800e1a6 <__retarget_lock_release_recursive>:
 800e1a6:	4770      	bx	lr

0800e1a8 <memcpy>:
 800e1a8:	440a      	add	r2, r1
 800e1aa:	4291      	cmp	r1, r2
 800e1ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800e1b0:	d100      	bne.n	800e1b4 <memcpy+0xc>
 800e1b2:	4770      	bx	lr
 800e1b4:	b510      	push	{r4, lr}
 800e1b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1be:	4291      	cmp	r1, r2
 800e1c0:	d1f9      	bne.n	800e1b6 <memcpy+0xe>
 800e1c2:	bd10      	pop	{r4, pc}
 800e1c4:	0000      	movs	r0, r0
	...

0800e1c8 <fmod>:
 800e1c8:	b508      	push	{r3, lr}
 800e1ca:	ed2d 8b04 	vpush	{d8-d9}
 800e1ce:	eeb0 9b40 	vmov.f64	d9, d0
 800e1d2:	eeb0 8b41 	vmov.f64	d8, d1
 800e1d6:	f000 f8ef 	bl	800e3b8 <__ieee754_fmod>
 800e1da:	eeb4 9b48 	vcmp.f64	d9, d8
 800e1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e2:	d60c      	bvs.n	800e1fe <fmod+0x36>
 800e1e4:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 800e208 <fmod+0x40>
 800e1e8:	eeb4 8b49 	vcmp.f64	d8, d9
 800e1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1f0:	d105      	bne.n	800e1fe <fmod+0x36>
 800e1f2:	f7ff ffad 	bl	800e150 <__errno>
 800e1f6:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800e1fa:	2321      	movs	r3, #33	@ 0x21
 800e1fc:	6003      	str	r3, [r0, #0]
 800e1fe:	ecbd 8b04 	vpop	{d8-d9}
 800e202:	bd08      	pop	{r3, pc}
 800e204:	f3af 8000 	nop.w
	...

0800e210 <sqrt>:
 800e210:	b508      	push	{r3, lr}
 800e212:	ed2d 8b04 	vpush	{d8-d9}
 800e216:	eeb0 8b40 	vmov.f64	d8, d0
 800e21a:	f000 f8c7 	bl	800e3ac <__ieee754_sqrt>
 800e21e:	eeb4 8b48 	vcmp.f64	d8, d8
 800e222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e226:	d60c      	bvs.n	800e242 <sqrt+0x32>
 800e228:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800e248 <sqrt+0x38>
 800e22c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800e230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e234:	d505      	bpl.n	800e242 <sqrt+0x32>
 800e236:	f7ff ff8b 	bl	800e150 <__errno>
 800e23a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800e23e:	2321      	movs	r3, #33	@ 0x21
 800e240:	6003      	str	r3, [r0, #0]
 800e242:	ecbd 8b04 	vpop	{d8-d9}
 800e246:	bd08      	pop	{r3, pc}
	...

0800e250 <asinf>:
 800e250:	b508      	push	{r3, lr}
 800e252:	ed2d 8b02 	vpush	{d8}
 800e256:	eeb0 8a40 	vmov.f32	s16, s0
 800e25a:	f000 f9b9 	bl	800e5d0 <__ieee754_asinf>
 800e25e:	eeb4 8a48 	vcmp.f32	s16, s16
 800e262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e266:	eef0 8a40 	vmov.f32	s17, s0
 800e26a:	d615      	bvs.n	800e298 <asinf+0x48>
 800e26c:	eeb0 0a48 	vmov.f32	s0, s16
 800e270:	f000 f838 	bl	800e2e4 <fabsf>
 800e274:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e278:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e280:	dd0a      	ble.n	800e298 <asinf+0x48>
 800e282:	f7ff ff65 	bl	800e150 <__errno>
 800e286:	ecbd 8b02 	vpop	{d8}
 800e28a:	2321      	movs	r3, #33	@ 0x21
 800e28c:	6003      	str	r3, [r0, #0]
 800e28e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e292:	4804      	ldr	r0, [pc, #16]	@ (800e2a4 <asinf+0x54>)
 800e294:	f000 b82e 	b.w	800e2f4 <nanf>
 800e298:	eeb0 0a68 	vmov.f32	s0, s17
 800e29c:	ecbd 8b02 	vpop	{d8}
 800e2a0:	bd08      	pop	{r3, pc}
 800e2a2:	bf00      	nop
 800e2a4:	0800f150 	.word	0x0800f150

0800e2a8 <sqrtf>:
 800e2a8:	b508      	push	{r3, lr}
 800e2aa:	ed2d 8b02 	vpush	{d8}
 800e2ae:	eeb0 8a40 	vmov.f32	s16, s0
 800e2b2:	f000 f87e 	bl	800e3b2 <__ieee754_sqrtf>
 800e2b6:	eeb4 8a48 	vcmp.f32	s16, s16
 800e2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2be:	d60c      	bvs.n	800e2da <sqrtf+0x32>
 800e2c0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800e2e0 <sqrtf+0x38>
 800e2c4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2cc:	d505      	bpl.n	800e2da <sqrtf+0x32>
 800e2ce:	f7ff ff3f 	bl	800e150 <__errno>
 800e2d2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e2d6:	2321      	movs	r3, #33	@ 0x21
 800e2d8:	6003      	str	r3, [r0, #0]
 800e2da:	ecbd 8b02 	vpop	{d8}
 800e2de:	bd08      	pop	{r3, pc}
 800e2e0:	00000000 	.word	0x00000000

0800e2e4 <fabsf>:
 800e2e4:	ee10 3a10 	vmov	r3, s0
 800e2e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e2ec:	ee00 3a10 	vmov	s0, r3
 800e2f0:	4770      	bx	lr
	...

0800e2f4 <nanf>:
 800e2f4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e2fc <nanf+0x8>
 800e2f8:	4770      	bx	lr
 800e2fa:	bf00      	nop
 800e2fc:	7fc00000 	.word	0x7fc00000

0800e300 <fmaxf>:
 800e300:	b508      	push	{r3, lr}
 800e302:	ed2d 8b02 	vpush	{d8}
 800e306:	eeb0 8a40 	vmov.f32	s16, s0
 800e30a:	eef0 8a60 	vmov.f32	s17, s1
 800e30e:	f000 f831 	bl	800e374 <__fpclassifyf>
 800e312:	b930      	cbnz	r0, 800e322 <fmaxf+0x22>
 800e314:	eeb0 8a68 	vmov.f32	s16, s17
 800e318:	eeb0 0a48 	vmov.f32	s0, s16
 800e31c:	ecbd 8b02 	vpop	{d8}
 800e320:	bd08      	pop	{r3, pc}
 800e322:	eeb0 0a68 	vmov.f32	s0, s17
 800e326:	f000 f825 	bl	800e374 <__fpclassifyf>
 800e32a:	2800      	cmp	r0, #0
 800e32c:	d0f4      	beq.n	800e318 <fmaxf+0x18>
 800e32e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e336:	dded      	ble.n	800e314 <fmaxf+0x14>
 800e338:	e7ee      	b.n	800e318 <fmaxf+0x18>

0800e33a <fminf>:
 800e33a:	b508      	push	{r3, lr}
 800e33c:	ed2d 8b02 	vpush	{d8}
 800e340:	eeb0 8a40 	vmov.f32	s16, s0
 800e344:	eef0 8a60 	vmov.f32	s17, s1
 800e348:	f000 f814 	bl	800e374 <__fpclassifyf>
 800e34c:	b930      	cbnz	r0, 800e35c <fminf+0x22>
 800e34e:	eeb0 8a68 	vmov.f32	s16, s17
 800e352:	eeb0 0a48 	vmov.f32	s0, s16
 800e356:	ecbd 8b02 	vpop	{d8}
 800e35a:	bd08      	pop	{r3, pc}
 800e35c:	eeb0 0a68 	vmov.f32	s0, s17
 800e360:	f000 f808 	bl	800e374 <__fpclassifyf>
 800e364:	2800      	cmp	r0, #0
 800e366:	d0f4      	beq.n	800e352 <fminf+0x18>
 800e368:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e370:	d5ed      	bpl.n	800e34e <fminf+0x14>
 800e372:	e7ee      	b.n	800e352 <fminf+0x18>

0800e374 <__fpclassifyf>:
 800e374:	ee10 3a10 	vmov	r3, s0
 800e378:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800e37c:	d00d      	beq.n	800e39a <__fpclassifyf+0x26>
 800e37e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800e382:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800e386:	d30a      	bcc.n	800e39e <__fpclassifyf+0x2a>
 800e388:	4b07      	ldr	r3, [pc, #28]	@ (800e3a8 <__fpclassifyf+0x34>)
 800e38a:	1e42      	subs	r2, r0, #1
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d908      	bls.n	800e3a2 <__fpclassifyf+0x2e>
 800e390:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800e394:	4258      	negs	r0, r3
 800e396:	4158      	adcs	r0, r3
 800e398:	4770      	bx	lr
 800e39a:	2002      	movs	r0, #2
 800e39c:	4770      	bx	lr
 800e39e:	2004      	movs	r0, #4
 800e3a0:	4770      	bx	lr
 800e3a2:	2003      	movs	r0, #3
 800e3a4:	4770      	bx	lr
 800e3a6:	bf00      	nop
 800e3a8:	007ffffe 	.word	0x007ffffe

0800e3ac <__ieee754_sqrt>:
 800e3ac:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800e3b0:	4770      	bx	lr

0800e3b2 <__ieee754_sqrtf>:
 800e3b2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e3b6:	4770      	bx	lr

0800e3b8 <__ieee754_fmod>:
 800e3b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e3bc:	ed8d 1b00 	vstr	d1, [sp]
 800e3c0:	e9dd 6500 	ldrd	r6, r5, [sp]
 800e3c4:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800e3c8:	ea56 0307 	orrs.w	r3, r6, r7
 800e3cc:	46b6      	mov	lr, r6
 800e3ce:	d00d      	beq.n	800e3ec <__ieee754_fmod+0x34>
 800e3d0:	ee10 ca90 	vmov	ip, s1
 800e3d4:	4b78      	ldr	r3, [pc, #480]	@ (800e5b8 <__ieee754_fmod+0x200>)
 800e3d6:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 800e3da:	4598      	cmp	r8, r3
 800e3dc:	d806      	bhi.n	800e3ec <__ieee754_fmod+0x34>
 800e3de:	4273      	negs	r3, r6
 800e3e0:	4a76      	ldr	r2, [pc, #472]	@ (800e5bc <__ieee754_fmod+0x204>)
 800e3e2:	4333      	orrs	r3, r6
 800e3e4:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d908      	bls.n	800e3fe <__ieee754_fmod+0x46>
 800e3ec:	ed9d 7b00 	vldr	d7, [sp]
 800e3f0:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e3f4:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800e3f8:	b003      	add	sp, #12
 800e3fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3fe:	ee10 9a10 	vmov	r9, s0
 800e402:	45b8      	cmp	r8, r7
 800e404:	4649      	mov	r1, r9
 800e406:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 800e40a:	dc09      	bgt.n	800e420 <__ieee754_fmod+0x68>
 800e40c:	dbf4      	blt.n	800e3f8 <__ieee754_fmod+0x40>
 800e40e:	454e      	cmp	r6, r9
 800e410:	d8f2      	bhi.n	800e3f8 <__ieee754_fmod+0x40>
 800e412:	d105      	bne.n	800e420 <__ieee754_fmod+0x68>
 800e414:	4b6a      	ldr	r3, [pc, #424]	@ (800e5c0 <__ieee754_fmod+0x208>)
 800e416:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800e41a:	ed93 0b00 	vldr	d0, [r3]
 800e41e:	e7eb      	b.n	800e3f8 <__ieee754_fmod+0x40>
 800e420:	4a66      	ldr	r2, [pc, #408]	@ (800e5bc <__ieee754_fmod+0x204>)
 800e422:	ea1c 0f02 	tst.w	ip, r2
 800e426:	d14a      	bne.n	800e4be <__ieee754_fmod+0x106>
 800e428:	f1b8 0f00 	cmp.w	r8, #0
 800e42c:	d13f      	bne.n	800e4ae <__ieee754_fmod+0xf6>
 800e42e:	4865      	ldr	r0, [pc, #404]	@ (800e5c4 <__ieee754_fmod+0x20c>)
 800e430:	464b      	mov	r3, r9
 800e432:	2b00      	cmp	r3, #0
 800e434:	dc38      	bgt.n	800e4a8 <__ieee754_fmod+0xf0>
 800e436:	4215      	tst	r5, r2
 800e438:	d150      	bne.n	800e4dc <__ieee754_fmod+0x124>
 800e43a:	2f00      	cmp	r7, #0
 800e43c:	d147      	bne.n	800e4ce <__ieee754_fmod+0x116>
 800e43e:	4a61      	ldr	r2, [pc, #388]	@ (800e5c4 <__ieee754_fmod+0x20c>)
 800e440:	4633      	mov	r3, r6
 800e442:	2b00      	cmp	r3, #0
 800e444:	dc40      	bgt.n	800e4c8 <__ieee754_fmod+0x110>
 800e446:	4b60      	ldr	r3, [pc, #384]	@ (800e5c8 <__ieee754_fmod+0x210>)
 800e448:	4298      	cmp	r0, r3
 800e44a:	db4b      	blt.n	800e4e4 <__ieee754_fmod+0x12c>
 800e44c:	f3cc 0313 	ubfx	r3, ip, #0, #20
 800e450:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e454:	f8df c170 	ldr.w	ip, [pc, #368]	@ 800e5c8 <__ieee754_fmod+0x210>
 800e458:	4562      	cmp	r2, ip
 800e45a:	db58      	blt.n	800e50e <__ieee754_fmod+0x156>
 800e45c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e460:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 800e464:	1a80      	subs	r0, r0, r2
 800e466:	1b5e      	subs	r6, r3, r5
 800e468:	eba1 070e 	sub.w	r7, r1, lr
 800e46c:	2800      	cmp	r0, #0
 800e46e:	d164      	bne.n	800e53a <__ieee754_fmod+0x182>
 800e470:	4571      	cmp	r1, lr
 800e472:	bf38      	it	cc
 800e474:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800e478:	2e00      	cmp	r6, #0
 800e47a:	bfa4      	itt	ge
 800e47c:	4639      	movge	r1, r7
 800e47e:	4633      	movge	r3, r6
 800e480:	ea53 0001 	orrs.w	r0, r3, r1
 800e484:	d0c6      	beq.n	800e414 <__ieee754_fmod+0x5c>
 800e486:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e48a:	db6b      	blt.n	800e564 <__ieee754_fmod+0x1ac>
 800e48c:	484e      	ldr	r0, [pc, #312]	@ (800e5c8 <__ieee754_fmod+0x210>)
 800e48e:	4282      	cmp	r2, r0
 800e490:	db6e      	blt.n	800e570 <__ieee754_fmod+0x1b8>
 800e492:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e496:	4323      	orrs	r3, r4
 800e498:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800e49c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e4a0:	460c      	mov	r4, r1
 800e4a2:	ec45 4b10 	vmov	d0, r4, r5
 800e4a6:	e7a7      	b.n	800e3f8 <__ieee754_fmod+0x40>
 800e4a8:	3801      	subs	r0, #1
 800e4aa:	005b      	lsls	r3, r3, #1
 800e4ac:	e7c1      	b.n	800e432 <__ieee754_fmod+0x7a>
 800e4ae:	4846      	ldr	r0, [pc, #280]	@ (800e5c8 <__ieee754_fmod+0x210>)
 800e4b0:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	ddbe      	ble.n	800e436 <__ieee754_fmod+0x7e>
 800e4b8:	3801      	subs	r0, #1
 800e4ba:	005b      	lsls	r3, r3, #1
 800e4bc:	e7fa      	b.n	800e4b4 <__ieee754_fmod+0xfc>
 800e4be:	ea4f 5028 	mov.w	r0, r8, asr #20
 800e4c2:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800e4c6:	e7b6      	b.n	800e436 <__ieee754_fmod+0x7e>
 800e4c8:	3a01      	subs	r2, #1
 800e4ca:	005b      	lsls	r3, r3, #1
 800e4cc:	e7b9      	b.n	800e442 <__ieee754_fmod+0x8a>
 800e4ce:	4a3e      	ldr	r2, [pc, #248]	@ (800e5c8 <__ieee754_fmod+0x210>)
 800e4d0:	02fb      	lsls	r3, r7, #11
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	ddb7      	ble.n	800e446 <__ieee754_fmod+0x8e>
 800e4d6:	3a01      	subs	r2, #1
 800e4d8:	005b      	lsls	r3, r3, #1
 800e4da:	e7fa      	b.n	800e4d2 <__ieee754_fmod+0x11a>
 800e4dc:	153a      	asrs	r2, r7, #20
 800e4de:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e4e2:	e7b0      	b.n	800e446 <__ieee754_fmod+0x8e>
 800e4e4:	eba3 0c00 	sub.w	ip, r3, r0
 800e4e8:	f1bc 0f1f 	cmp.w	ip, #31
 800e4ec:	dc09      	bgt.n	800e502 <__ieee754_fmod+0x14a>
 800e4ee:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 800e4f2:	fa08 f10c 	lsl.w	r1, r8, ip
 800e4f6:	fa29 f303 	lsr.w	r3, r9, r3
 800e4fa:	430b      	orrs	r3, r1
 800e4fc:	fa09 f10c 	lsl.w	r1, r9, ip
 800e500:	e7a8      	b.n	800e454 <__ieee754_fmod+0x9c>
 800e502:	4b32      	ldr	r3, [pc, #200]	@ (800e5cc <__ieee754_fmod+0x214>)
 800e504:	1a1b      	subs	r3, r3, r0
 800e506:	fa09 f303 	lsl.w	r3, r9, r3
 800e50a:	2100      	movs	r1, #0
 800e50c:	e7a2      	b.n	800e454 <__ieee754_fmod+0x9c>
 800e50e:	ebac 0c02 	sub.w	ip, ip, r2
 800e512:	f1bc 0f1f 	cmp.w	ip, #31
 800e516:	dc09      	bgt.n	800e52c <__ieee754_fmod+0x174>
 800e518:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 800e51c:	fa07 f70c 	lsl.w	r7, r7, ip
 800e520:	fa26 f505 	lsr.w	r5, r6, r5
 800e524:	433d      	orrs	r5, r7
 800e526:	fa06 fe0c 	lsl.w	lr, r6, ip
 800e52a:	e79b      	b.n	800e464 <__ieee754_fmod+0xac>
 800e52c:	4d27      	ldr	r5, [pc, #156]	@ (800e5cc <__ieee754_fmod+0x214>)
 800e52e:	1aad      	subs	r5, r5, r2
 800e530:	fa06 f505 	lsl.w	r5, r6, r5
 800e534:	f04f 0e00 	mov.w	lr, #0
 800e538:	e794      	b.n	800e464 <__ieee754_fmod+0xac>
 800e53a:	4571      	cmp	r1, lr
 800e53c:	bf38      	it	cc
 800e53e:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800e542:	2e00      	cmp	r6, #0
 800e544:	da05      	bge.n	800e552 <__ieee754_fmod+0x19a>
 800e546:	0fce      	lsrs	r6, r1, #31
 800e548:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800e54c:	0049      	lsls	r1, r1, #1
 800e54e:	3801      	subs	r0, #1
 800e550:	e789      	b.n	800e466 <__ieee754_fmod+0xae>
 800e552:	ea56 0307 	orrs.w	r3, r6, r7
 800e556:	f43f af5d 	beq.w	800e414 <__ieee754_fmod+0x5c>
 800e55a:	0ffb      	lsrs	r3, r7, #31
 800e55c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800e560:	0079      	lsls	r1, r7, #1
 800e562:	e7f4      	b.n	800e54e <__ieee754_fmod+0x196>
 800e564:	0fc8      	lsrs	r0, r1, #31
 800e566:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e56a:	0049      	lsls	r1, r1, #1
 800e56c:	3a01      	subs	r2, #1
 800e56e:	e78a      	b.n	800e486 <__ieee754_fmod+0xce>
 800e570:	1a80      	subs	r0, r0, r2
 800e572:	2814      	cmp	r0, #20
 800e574:	dc0c      	bgt.n	800e590 <__ieee754_fmod+0x1d8>
 800e576:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800e57a:	fa03 f202 	lsl.w	r2, r3, r2
 800e57e:	40c1      	lsrs	r1, r0
 800e580:	430a      	orrs	r2, r1
 800e582:	4103      	asrs	r3, r0
 800e584:	ea43 0104 	orr.w	r1, r3, r4
 800e588:	4610      	mov	r0, r2
 800e58a:	ec41 0b10 	vmov	d0, r0, r1
 800e58e:	e733      	b.n	800e3f8 <__ieee754_fmod+0x40>
 800e590:	281f      	cmp	r0, #31
 800e592:	dc07      	bgt.n	800e5a4 <__ieee754_fmod+0x1ec>
 800e594:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800e598:	40c1      	lsrs	r1, r0
 800e59a:	fa03 f202 	lsl.w	r2, r3, r2
 800e59e:	430a      	orrs	r2, r1
 800e5a0:	4623      	mov	r3, r4
 800e5a2:	e7ef      	b.n	800e584 <__ieee754_fmod+0x1cc>
 800e5a4:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800e5a8:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800e5ac:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800e5b0:	32e2      	adds	r2, #226	@ 0xe2
 800e5b2:	fa43 f202 	asr.w	r2, r3, r2
 800e5b6:	e7f3      	b.n	800e5a0 <__ieee754_fmod+0x1e8>
 800e5b8:	7fefffff 	.word	0x7fefffff
 800e5bc:	7ff00000 	.word	0x7ff00000
 800e5c0:	0800f158 	.word	0x0800f158
 800e5c4:	fffffbed 	.word	0xfffffbed
 800e5c8:	fffffc02 	.word	0xfffffc02
 800e5cc:	fffffbe2 	.word	0xfffffbe2

0800e5d0 <__ieee754_asinf>:
 800e5d0:	b538      	push	{r3, r4, r5, lr}
 800e5d2:	ee10 5a10 	vmov	r5, s0
 800e5d6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e5da:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800e5de:	ed2d 8b04 	vpush	{d8-d9}
 800e5e2:	d10c      	bne.n	800e5fe <__ieee754_asinf+0x2e>
 800e5e4:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800e75c <__ieee754_asinf+0x18c>
 800e5e8:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800e760 <__ieee754_asinf+0x190>
 800e5ec:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e5f0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e5f4:	eeb0 0a67 	vmov.f32	s0, s15
 800e5f8:	ecbd 8b04 	vpop	{d8-d9}
 800e5fc:	bd38      	pop	{r3, r4, r5, pc}
 800e5fe:	d904      	bls.n	800e60a <__ieee754_asinf+0x3a>
 800e600:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e604:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e608:	e7f6      	b.n	800e5f8 <__ieee754_asinf+0x28>
 800e60a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e60e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800e612:	d20b      	bcs.n	800e62c <__ieee754_asinf+0x5c>
 800e614:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800e618:	d252      	bcs.n	800e6c0 <__ieee754_asinf+0xf0>
 800e61a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800e764 <__ieee754_asinf+0x194>
 800e61e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e622:	eef4 7ae8 	vcmpe.f32	s15, s17
 800e626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e62a:	dce5      	bgt.n	800e5f8 <__ieee754_asinf+0x28>
 800e62c:	f7ff fe5a 	bl	800e2e4 <fabsf>
 800e630:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800e634:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e638:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e63c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800e768 <__ieee754_asinf+0x198>
 800e640:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800e76c <__ieee754_asinf+0x19c>
 800e644:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800e770 <__ieee754_asinf+0x1a0>
 800e648:	eea8 7a27 	vfma.f32	s14, s16, s15
 800e64c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800e774 <__ieee754_asinf+0x1a4>
 800e650:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e654:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800e778 <__ieee754_asinf+0x1a8>
 800e658:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e65c:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800e77c <__ieee754_asinf+0x1ac>
 800e660:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e664:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800e780 <__ieee754_asinf+0x1b0>
 800e668:	eea7 9a88 	vfma.f32	s18, s15, s16
 800e66c:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800e784 <__ieee754_asinf+0x1b4>
 800e670:	eee8 7a07 	vfma.f32	s15, s16, s14
 800e674:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800e788 <__ieee754_asinf+0x1b8>
 800e678:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e67c:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800e78c <__ieee754_asinf+0x1bc>
 800e680:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e684:	eeb0 0a48 	vmov.f32	s0, s16
 800e688:	eee7 8a88 	vfma.f32	s17, s15, s16
 800e68c:	f7ff fe91 	bl	800e3b2 <__ieee754_sqrtf>
 800e690:	4b3f      	ldr	r3, [pc, #252]	@ (800e790 <__ieee754_asinf+0x1c0>)
 800e692:	ee29 9a08 	vmul.f32	s18, s18, s16
 800e696:	429c      	cmp	r4, r3
 800e698:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800e69c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e6a0:	d93d      	bls.n	800e71e <__ieee754_asinf+0x14e>
 800e6a2:	eea0 0a06 	vfma.f32	s0, s0, s12
 800e6a6:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800e794 <__ieee754_asinf+0x1c4>
 800e6aa:	eee0 7a26 	vfma.f32	s15, s0, s13
 800e6ae:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800e760 <__ieee754_asinf+0x190>
 800e6b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e6b6:	2d00      	cmp	r5, #0
 800e6b8:	bfd8      	it	le
 800e6ba:	eeb1 0a40 	vnegle.f32	s0, s0
 800e6be:	e79b      	b.n	800e5f8 <__ieee754_asinf+0x28>
 800e6c0:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e6c4:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800e76c <__ieee754_asinf+0x19c>
 800e6c8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800e768 <__ieee754_asinf+0x198>
 800e6cc:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800e780 <__ieee754_asinf+0x1b0>
 800e6d0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e6d4:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800e774 <__ieee754_asinf+0x1a4>
 800e6d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e6dc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800e778 <__ieee754_asinf+0x1a8>
 800e6e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6e4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800e77c <__ieee754_asinf+0x1ac>
 800e6e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e6ec:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800e770 <__ieee754_asinf+0x1a0>
 800e6f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6f4:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800e784 <__ieee754_asinf+0x1b4>
 800e6f8:	eee7 6a86 	vfma.f32	s13, s15, s12
 800e6fc:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800e788 <__ieee754_asinf+0x1b8>
 800e700:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e704:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800e78c <__ieee754_asinf+0x1bc>
 800e708:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e70c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e710:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800e714:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800e718:	eea0 0a27 	vfma.f32	s0, s0, s15
 800e71c:	e76c      	b.n	800e5f8 <__ieee754_asinf+0x28>
 800e71e:	ee10 3a10 	vmov	r3, s0
 800e722:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800e726:	f023 030f 	bic.w	r3, r3, #15
 800e72a:	ee07 3a10 	vmov	s14, r3
 800e72e:	eea7 8a47 	vfms.f32	s16, s14, s14
 800e732:	ee70 5a00 	vadd.f32	s11, s0, s0
 800e736:	ee30 0a07 	vadd.f32	s0, s0, s14
 800e73a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e75c <__ieee754_asinf+0x18c>
 800e73e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800e742:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800e798 <__ieee754_asinf+0x1c8>
 800e746:	eee5 7a66 	vfms.f32	s15, s10, s13
 800e74a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800e74e:	eeb0 6a40 	vmov.f32	s12, s0
 800e752:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e756:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e75a:	e7aa      	b.n	800e6b2 <__ieee754_asinf+0xe2>
 800e75c:	b33bbd2e 	.word	0xb33bbd2e
 800e760:	3fc90fdb 	.word	0x3fc90fdb
 800e764:	7149f2ca 	.word	0x7149f2ca
 800e768:	3a4f7f04 	.word	0x3a4f7f04
 800e76c:	3811ef08 	.word	0x3811ef08
 800e770:	3e2aaaab 	.word	0x3e2aaaab
 800e774:	bd241146 	.word	0xbd241146
 800e778:	3e4e0aa8 	.word	0x3e4e0aa8
 800e77c:	bea6b090 	.word	0xbea6b090
 800e780:	3d9dc62e 	.word	0x3d9dc62e
 800e784:	bf303361 	.word	0xbf303361
 800e788:	4001572d 	.word	0x4001572d
 800e78c:	c019d139 	.word	0xc019d139
 800e790:	3f799999 	.word	0x3f799999
 800e794:	333bbd2e 	.word	0x333bbd2e
 800e798:	3f490fdb 	.word	0x3f490fdb

0800e79c <_init>:
 800e79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e79e:	bf00      	nop
 800e7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7a2:	bc08      	pop	{r3}
 800e7a4:	469e      	mov	lr, r3
 800e7a6:	4770      	bx	lr

0800e7a8 <_fini>:
 800e7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7aa:	bf00      	nop
 800e7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7ae:	bc08      	pop	{r3}
 800e7b0:	469e      	mov	lr, r3
 800e7b2:	4770      	bx	lr
