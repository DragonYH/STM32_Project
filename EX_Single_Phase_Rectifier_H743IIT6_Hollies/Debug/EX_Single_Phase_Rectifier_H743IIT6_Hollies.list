
EX_Single_Phase_Rectifier_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121e4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002560  08012488  08012488  00013488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080149e8  080149e8  000159e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080149f0  080149f0  000159f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080149f4  080149f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000208  24000000  080149f8  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005ed8  24000208  08014c00  00016208  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  240060e0  08014c00  000170e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00016208  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003410f  00000000  00000000  00016236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006cc7  00000000  00000000  0004a345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002420  00000000  00000000  00051010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001b57  00000000  00000000  00053430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000400b3  00000000  00000000  00054f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00031121  00000000  00000000  0009503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018761d  00000000  00000000  000c615b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  0024d778  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a81c  00000000  00000000  0024d830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000080  00000000  00000000  0025804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000005c1  00000000  00000000  002580cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000058  00000000  00000000  0025868d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000208 	.word	0x24000208
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801246c 	.word	0x0801246c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400020c 	.word	0x2400020c
 80002dc:	0801246c 	.word	0x0801246c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	@ 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
 80005c0:	615a      	str	r2, [r3, #20]
 80005c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80005c4:	4b34      	ldr	r3, [pc, #208]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005c6:	4a35      	ldr	r2, [pc, #212]	@ (800069c <MX_ADC3_Init+0xf0>)
 80005c8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80005ca:	4b33      	ldr	r3, [pc, #204]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005cc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80005d0:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005d2:	4b31      	ldr	r3, [pc, #196]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005da:	2204      	movs	r2, #4
 80005dc:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80005de:	4b2e      	ldr	r3, [pc, #184]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80005ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005f0:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f6:	4b28      	ldr	r3, [pc, #160]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fc:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005fe:	2200      	movs	r2, #0
 8000600:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000602:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <MX_ADC3_Init+0xec>)
 8000604:	2200      	movs	r2, #0
 8000606:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000608:	4b23      	ldr	r3, [pc, #140]	@ (8000698 <MX_ADC3_Init+0xec>)
 800060a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800060e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000610:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <MX_ADC3_Init+0xec>)
 8000612:	2200      	movs	r2, #0
 8000614:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = ENABLE;
 8000616:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <MX_ADC3_Init+0xec>)
 8000618:	2201      	movs	r2, #1
 800061a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 15;
 800061e:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <MX_ADC3_Init+0xec>)
 8000620:	220f      	movs	r2, #15
 8000622:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000624:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <MX_ADC3_Init+0xec>)
 8000626:	2280      	movs	r2, #128	@ 0x80
 8000628:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800062a:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <MX_ADC3_Init+0xec>)
 800062c:	2200      	movs	r2, #0
 800062e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000630:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_ADC3_Init+0xec>)
 8000632:	2201      	movs	r2, #1
 8000634:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000636:	4818      	ldr	r0, [pc, #96]	@ (8000698 <MX_ADC3_Init+0xec>)
 8000638:	f001 fc70 	bl	8001f1c <HAL_ADC_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000642:	f000 fc9d 	bl	8000f80 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <MX_ADC3_Init+0xec>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800064c:	4812      	ldr	r0, [pc, #72]	@ (8000698 <MX_ADC3_Init+0xec>)
 800064e:	f001 fc65 	bl	8001f1c <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000658:	f000 fc92 	bl	8000f80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800065c:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <MX_ADC3_Init+0xf4>)
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000660:	2306      	movs	r3, #6
 8000662:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000664:	2307      	movs	r3, #7
 8000666:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000668:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800066c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800066e:	2304      	movs	r3, #4
 8000670:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000676:	2300      	movs	r3, #0
 8000678:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	@ (8000698 <MX_ADC3_Init+0xec>)
 8000680:	f001 ffba 	bl	80025f8 <HAL_ADC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 800068a:	f000 fc79 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	3720      	adds	r7, #32
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	24000224 	.word	0x24000224
 800069c:	58026000 	.word	0x58026000
 80006a0:	cb840000 	.word	0xcb840000

080006a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b0b4      	sub	sp, #208	@ 0xd0
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	22c0      	movs	r2, #192	@ 0xc0
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f00f fc48 	bl	800ff4a <memset>
  if(adcHandle->Instance==ADC3)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a1d      	ldr	r2, [pc, #116]	@ (8000734 <HAL_ADC_MspInit+0x90>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d132      	bne.n	800072a <HAL_ADC_MspInit+0x86>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006c4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80006c8:	f04f 0300 	mov.w	r3, #0
 80006cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80006d0:	2319      	movs	r3, #25
 80006d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 504;
 80006d4:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 80006d8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 7;
 80006da:	2307      	movs	r3, #7
 80006dc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80006f2:	2300      	movs	r3, #0
 80006f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	4618      	mov	r0, r3
 80006fe:	f005 f979 	bl	80059f4 <HAL_RCCEx_PeriphCLKConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 8000708:	f000 fc3a 	bl	8000f80 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800070c:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <HAL_ADC_MspInit+0x94>)
 800070e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000712:	4a09      	ldr	r2, [pc, #36]	@ (8000738 <HAL_ADC_MspInit+0x94>)
 8000714:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000718:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <HAL_ADC_MspInit+0x94>)
 800071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000722:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800072a:	bf00      	nop
 800072c:	37d0      	adds	r7, #208	@ 0xd0
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	58026000 	.word	0x58026000
 8000738:	58024400 	.word	0x58024400

0800073c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	@ 0x28
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2224      	movs	r2, #36	@ 0x24
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f00f fbfe 	bl	800ff4a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_DAC1_Init+0x5c>)
 8000750:	4a12      	ldr	r2, [pc, #72]	@ (800079c <MX_DAC1_Init+0x60>)
 8000752:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000754:	4810      	ldr	r0, [pc, #64]	@ (8000798 <MX_DAC1_Init+0x5c>)
 8000756:	f002 fe8f 	bl	8003478 <HAL_DAC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000760:	f000 fc0e 	bl	8000f80 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000770:	2301      	movs	r3, #1
 8000772:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	@ (8000798 <MX_DAC1_Init+0x5c>)
 8000780:	f002 ff7e 	bl	8003680 <HAL_DAC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 fbf9 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3728      	adds	r7, #40	@ 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	24000288 	.word	0x24000288
 800079c:	40007400 	.word	0x40007400

080007a0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	@ 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000830 <HAL_DAC_MspInit+0x90>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d131      	bne.n	8000826 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <HAL_DAC_MspInit+0x94>)
 80007c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000834 <HAL_DAC_MspInit+0x94>)
 80007ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80007ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80007d2:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <HAL_DAC_MspInit+0x94>)
 80007d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <HAL_DAC_MspInit+0x94>)
 80007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e6:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <HAL_DAC_MspInit+0x94>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f0:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <HAL_DAC_MspInit+0x94>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007fe:	2310      	movs	r3, #16
 8000800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000802:	2303      	movs	r3, #3
 8000804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4809      	ldr	r0, [pc, #36]	@ (8000838 <HAL_DAC_MspInit+0x98>)
 8000812:	f003 f881 	bl	8003918 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2105      	movs	r1, #5
 800081a:	2036      	movs	r0, #54	@ 0x36
 800081c:	f002 fd8c 	bl	8003338 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000820:	2036      	movs	r0, #54	@ 0x36
 8000822:	f002 fda3 	bl	800336c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000826:	bf00      	nop
 8000828:	3728      	adds	r7, #40	@ 0x28
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40007400 	.word	0x40007400
 8000834:	58024400 	.word	0x58024400
 8000838:	58020000 	.word	0x58020000

0800083c <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  UserInit();
 8000840:	f00e f940 	bl	800eac4 <UserInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateLED */
  stateLEDHandle = osThreadNew(StartStateLED, NULL, &stateLED_attributes);
 8000844:	4a18      	ldr	r2, [pc, #96]	@ (80008a8 <MX_FREERTOS_Init+0x6c>)
 8000846:	2100      	movs	r1, #0
 8000848:	4818      	ldr	r0, [pc, #96]	@ (80008ac <MX_FREERTOS_Init+0x70>)
 800084a:	f009 ffb1 	bl	800a7b0 <osThreadNew>
 800084e:	4603      	mov	r3, r0
 8000850:	4a17      	ldr	r2, [pc, #92]	@ (80008b0 <MX_FREERTOS_Init+0x74>)
 8000852:	6013      	str	r3, [r2, #0]

  /* creation of mcuTemperature */
  mcuTemperatureHandle = osThreadNew(StartMcuTemperature, NULL, &mcuTemperature_attributes);
 8000854:	4a17      	ldr	r2, [pc, #92]	@ (80008b4 <MX_FREERTOS_Init+0x78>)
 8000856:	2100      	movs	r1, #0
 8000858:	4817      	ldr	r0, [pc, #92]	@ (80008b8 <MX_FREERTOS_Init+0x7c>)
 800085a:	f009 ffa9 	bl	800a7b0 <osThreadNew>
 800085e:	4603      	mov	r3, r0
 8000860:	4a16      	ldr	r2, [pc, #88]	@ (80008bc <MX_FREERTOS_Init+0x80>)
 8000862:	6013      	str	r3, [r2, #0]

  /* creation of oledDisplay */
  oledDisplayHandle = osThreadNew(StartOledDisplay, NULL, &oledDisplay_attributes);
 8000864:	4a16      	ldr	r2, [pc, #88]	@ (80008c0 <MX_FREERTOS_Init+0x84>)
 8000866:	2100      	movs	r1, #0
 8000868:	4816      	ldr	r0, [pc, #88]	@ (80008c4 <MX_FREERTOS_Init+0x88>)
 800086a:	f009 ffa1 	bl	800a7b0 <osThreadNew>
 800086e:	4603      	mov	r3, r0
 8000870:	4a15      	ldr	r2, [pc, #84]	@ (80008c8 <MX_FREERTOS_Init+0x8c>)
 8000872:	6013      	str	r3, [r2, #0]

  /* creation of dcSampling */
  dcSamplingHandle = osThreadNew(StartDCSampling, NULL, &dcSampling_attributes);
 8000874:	4a15      	ldr	r2, [pc, #84]	@ (80008cc <MX_FREERTOS_Init+0x90>)
 8000876:	2100      	movs	r1, #0
 8000878:	4815      	ldr	r0, [pc, #84]	@ (80008d0 <MX_FREERTOS_Init+0x94>)
 800087a:	f009 ff99 	bl	800a7b0 <osThreadNew>
 800087e:	4603      	mov	r3, r0
 8000880:	4a14      	ldr	r2, [pc, #80]	@ (80008d4 <MX_FREERTOS_Init+0x98>)
 8000882:	6013      	str	r3, [r2, #0]

  /* creation of circuitProtecti */
  circuitProtectiHandle = osThreadNew(StartCircuitProtection, NULL, &circuitProtecti_attributes);
 8000884:	4a14      	ldr	r2, [pc, #80]	@ (80008d8 <MX_FREERTOS_Init+0x9c>)
 8000886:	2100      	movs	r1, #0
 8000888:	4814      	ldr	r0, [pc, #80]	@ (80008dc <MX_FREERTOS_Init+0xa0>)
 800088a:	f009 ff91 	bl	800a7b0 <osThreadNew>
 800088e:	4603      	mov	r3, r0
 8000890:	4a13      	ldr	r2, [pc, #76]	@ (80008e0 <MX_FREERTOS_Init+0xa4>)
 8000892:	6013      	str	r3, [r2, #0]

  /* creation of dcControl */
  dcControlHandle = osThreadNew(StartDCControl, NULL, &dcControl_attributes);
 8000894:	4a13      	ldr	r2, [pc, #76]	@ (80008e4 <MX_FREERTOS_Init+0xa8>)
 8000896:	2100      	movs	r1, #0
 8000898:	4813      	ldr	r0, [pc, #76]	@ (80008e8 <MX_FREERTOS_Init+0xac>)
 800089a:	f009 ff89 	bl	800a7b0 <osThreadNew>
 800089e:	4603      	mov	r3, r0
 80008a0:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <MX_FREERTOS_Init+0xb0>)
 80008a2:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	08012578 	.word	0x08012578
 80008ac:	0800eb29 	.word	0x0800eb29
 80008b0:	2400029c 	.word	0x2400029c
 80008b4:	0801259c 	.word	0x0801259c
 80008b8:	0800ebc1 	.word	0x0800ebc1
 80008bc:	240002a0 	.word	0x240002a0
 80008c0:	080125c0 	.word	0x080125c0
 80008c4:	0800ec69 	.word	0x0800ec69
 80008c8:	240002a4 	.word	0x240002a4
 80008cc:	080125e4 	.word	0x080125e4
 80008d0:	0800ee9d 	.word	0x0800ee9d
 80008d4:	240002a8 	.word	0x240002a8
 80008d8:	08012608 	.word	0x08012608
 80008dc:	0800eeed 	.word	0x0800eeed
 80008e0:	240002ac 	.word	0x240002ac
 80008e4:	0801262c 	.word	0x0801262c
 80008e8:	0800f099 	.word	0x0800f099
 80008ec:	240002b0 	.word	0x240002b0

080008f0 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	@ 0x30
 80008f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	4b71      	ldr	r3, [pc, #452]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090c:	4a6f      	ldr	r2, [pc, #444]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 800090e:	f043 0304 	orr.w	r3, r3, #4
 8000912:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000916:	4b6d      	ldr	r3, [pc, #436]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091c:	f003 0304 	and.w	r3, r3, #4
 8000920:	61bb      	str	r3, [r7, #24]
 8000922:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000924:	4b69      	ldr	r3, [pc, #420]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092a:	4a68      	ldr	r2, [pc, #416]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 800092c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000934:	4b65      	ldr	r3, [pc, #404]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b62      	ldr	r3, [pc, #392]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000948:	4a60      	ldr	r2, [pc, #384]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000952:	4b5e      	ldr	r3, [pc, #376]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	4b5a      	ldr	r3, [pc, #360]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000966:	4a59      	ldr	r2, [pc, #356]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000970:	4b56      	ldr	r3, [pc, #344]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800097e:	4b53      	ldr	r3, [pc, #332]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000984:	4a51      	ldr	r2, [pc, #324]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800098a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098e:	4b4f      	ldr	r3, [pc, #316]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800099c:	4b4b      	ldr	r3, [pc, #300]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a2:	4a4a      	ldr	r2, [pc, #296]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 80009a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ac:	4b47      	ldr	r3, [pc, #284]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2120      	movs	r1, #32
 80009be:	4844      	ldr	r0, [pc, #272]	@ (8000ad0 <MX_GPIO_Init+0x1e0>)
 80009c0:	f003 f95a 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2102      	movs	r1, #2
 80009c8:	4842      	ldr	r0, [pc, #264]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 80009ca:	f003 f955 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2188      	movs	r1, #136	@ 0x88
 80009d2:	4841      	ldr	r0, [pc, #260]	@ (8000ad8 <MX_GPIO_Init+0x1e8>)
 80009d4:	f003 f950 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009de:	483f      	ldr	r0, [pc, #252]	@ (8000adc <MX_GPIO_Init+0x1ec>)
 80009e0:	f003 f94a 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0|OLED_DC_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2141      	movs	r1, #65	@ 0x41
 80009e8:	483d      	ldr	r0, [pc, #244]	@ (8000ae0 <MX_GPIO_Init+0x1f0>)
 80009ea:	f003 f945 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 80009ee:	2320      	movs	r3, #32
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009fa:	2301      	movs	r3, #1
 80009fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4832      	ldr	r0, [pc, #200]	@ (8000ad0 <MX_GPIO_Init+0x1e0>)
 8000a06:	f002 ff87 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a16:	2301      	movs	r3, #1
 8000a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	482c      	ldr	r0, [pc, #176]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 8000a22:	f002 ff79 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 8000a26:	2388      	movs	r3, #136	@ 0x88
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4826      	ldr	r0, [pc, #152]	@ (8000ad8 <MX_GPIO_Init+0x1e8>)
 8000a3e:	f002 ff6b 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 8000a42:	2340      	movs	r3, #64	@ 0x40
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a46:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4820      	ldr	r0, [pc, #128]	@ (8000ad8 <MX_GPIO_Init+0x1e8>)
 8000a58:	f002 ff5e 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR2104_SD_Pin;
 8000a5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a66:	2302      	movs	r3, #2
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IR2104_SD_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4819      	ldr	r0, [pc, #100]	@ (8000adc <MX_GPIO_Init+0x1ec>)
 8000a76:	f002 ff4f 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4813      	ldr	r0, [pc, #76]	@ (8000ae0 <MX_GPIO_Init+0x1f0>)
 8000a92:	f002 ff41 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000a96:	2340      	movs	r3, #64	@ 0x40
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <MX_GPIO_Init+0x1f0>)
 8000aae:	f002 ff33 	bl	8003918 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	2017      	movs	r0, #23
 8000ab8:	f002 fc3e 	bl	8003338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000abc:	2017      	movs	r0, #23
 8000abe:	f002 fc55 	bl	800336c <HAL_NVIC_EnableIRQ>

}
 8000ac2:	bf00      	nop
 8000ac4:	3730      	adds	r7, #48	@ 0x30
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	58024400 	.word	0x58024400
 8000ad0:	58020800 	.word	0x58020800
 8000ad4:	58020400 	.word	0x58020400
 8000ad8:	58021800 	.word	0x58021800
 8000adc:	58020000 	.word	0x58020000
 8000ae0:	58022000 	.word	0x58022000

08000ae4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000aea:	4a1c      	ldr	r2, [pc, #112]	@ (8000b5c <MX_I2C1_Init+0x78>)
 8000aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000af0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b60 <MX_I2C1_Init+0x7c>)
 8000af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000af4:	4b18      	ldr	r3, [pc, #96]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b06:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b1e:	480e      	ldr	r0, [pc, #56]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b20:	f003 f8f8 	bl	8003d14 <HAL_I2C_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b2a:	f000 fa29 	bl	8000f80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4809      	ldr	r0, [pc, #36]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b32:	f003 fe7b 	bl	800482c <HAL_I2CEx_ConfigAnalogFilter>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b3c:	f000 fa20 	bl	8000f80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b40:	2100      	movs	r1, #0
 8000b42:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b44:	f003 febd 	bl	80048c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b4e:	f000 fa17 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	240002b4 	.word	0x240002b4
 8000b5c:	40005400 	.word	0x40005400
 8000b60:	307075b1 	.word	0x307075b1

08000b64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0ba      	sub	sp, #232	@ 0xe8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	22c0      	movs	r2, #192	@ 0xc0
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00f f9e0 	bl	800ff4a <memset>
  if(i2cHandle->Instance==I2C1)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a26      	ldr	r2, [pc, #152]	@ (8000c28 <HAL_I2C_MspInit+0xc4>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d145      	bne.n	8000c20 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b94:	f04f 0208 	mov.w	r2, #8
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4618      	mov	r0, r3
 8000bac:	f004 ff22 	bl	80059f4 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000bb6:	f000 f9e3 	bl	8000f80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <HAL_I2C_MspInit+0xc8>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c2c <HAL_I2C_MspInit+0xc8>)
 8000bc2:	f043 0302 	orr.w	r3, r3, #2
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bca:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <HAL_I2C_MspInit+0xc8>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bd8:	23c0      	movs	r3, #192	@ 0xc0
 8000bda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bde:	2312      	movs	r3, #18
 8000be0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000bea:	2301      	movs	r3, #1
 8000bec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480c      	ldr	r0, [pc, #48]	@ (8000c30 <HAL_I2C_MspInit+0xcc>)
 8000bfe:	f002 fe8b 	bl	8003918 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <HAL_I2C_MspInit+0xc8>)
 8000c04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c08:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <HAL_I2C_MspInit+0xc8>)
 8000c0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c0e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_I2C_MspInit+0xc8>)
 8000c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c20:	bf00      	nop
 8000c22:	37e8      	adds	r7, #232	@ 0xe8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40005400 	.word	0x40005400
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	58020400 	.word	0x58020400

08000c34 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c3a:	f000 f961 	bl	8000f00 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c3e:	4b40      	ldr	r3, [pc, #256]	@ (8000d40 <main+0x10c>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d11b      	bne.n	8000c82 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4a:	f3bf 8f4f 	dsb	sy
}
 8000c4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c50:	f3bf 8f6f 	isb	sy
}
 8000c54:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c56:	4b3a      	ldr	r3, [pc, #232]	@ (8000d40 <main+0x10c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c5e:	f3bf 8f4f 	dsb	sy
}
 8000c62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c64:	f3bf 8f6f 	isb	sy
}
 8000c68:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c6a:	4b35      	ldr	r3, [pc, #212]	@ (8000d40 <main+0x10c>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	4a34      	ldr	r2, [pc, #208]	@ (8000d40 <main+0x10c>)
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c74:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c76:	f3bf 8f4f 	dsb	sy
}
 8000c7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c7c:	f3bf 8f6f 	isb	sy
}
 8000c80:	e000      	b.n	8000c84 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c82:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c84:	4b2e      	ldr	r3, [pc, #184]	@ (8000d40 <main+0x10c>)
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d138      	bne.n	8000d02 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000c90:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <main+0x10c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c98:	f3bf 8f4f 	dsb	sy
}
 8000c9c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c9e:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <main+0x10c>)
 8000ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ca4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	0b5b      	lsrs	r3, r3, #13
 8000caa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000cae:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	08db      	lsrs	r3, r3, #3
 8000cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cb8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	015a      	lsls	r2, r3, #5
 8000cbe:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000cc2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cc8:	491d      	ldr	r1, [pc, #116]	@ (8000d40 <main+0x10c>)
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	1e5a      	subs	r2, r3, #1
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1ef      	bne.n	8000cba <main+0x86>
    } while(sets-- != 0U);
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1e5a      	subs	r2, r3, #1
 8000cde:	60ba      	str	r2, [r7, #8]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1e5      	bne.n	8000cb0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ce4:	f3bf 8f4f 	dsb	sy
}
 8000ce8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <main+0x10c>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	4a14      	ldr	r2, [pc, #80]	@ (8000d40 <main+0x10c>)
 8000cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cf4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cf6:	f3bf 8f4f 	dsb	sy
}
 8000cfa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cfc:	f3bf 8f6f 	isb	sy
}
 8000d00:	e000      	b.n	8000d04 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d02:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d04:	f000 fe76 	bl	80019f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d08:	f000 f81c 	bl	8000d44 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d0c:	f000 f8c8 	bl	8000ea0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d10:	f7ff fdee 	bl	80008f0 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000d14:	f7ff fc4a 	bl	80005ac <MX_ADC3_Init>
  MX_SPI1_Init();
 8000d18:	f000 f938 	bl	8000f8c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d1c:	f000 f98e 	bl	800103c <MX_SPI2_Init>
  MX_I2C1_Init();
 8000d20:	f7ff fee0 	bl	8000ae4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000d24:	f000 fc72 	bl	800160c <MX_TIM2_Init>
  MX_DAC1_Init();
 8000d28:	f7ff fd08 	bl	800073c <MX_DAC1_Init>
  MX_TIM8_Init();
 8000d2c:	f000 fce6 	bl	80016fc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d30:	f009 fcf4 	bl	800a71c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d34:	f7ff fd82 	bl	800083c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d38:	f009 fd14 	bl	800a764 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <main+0x108>
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b09e      	sub	sp, #120	@ 0x78
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d4e:	224c      	movs	r2, #76	@ 0x4c
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f00f f8f9 	bl	800ff4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f00f f8f2 	bl	800ff4a <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d66:	2002      	movs	r0, #2
 8000d68:	f003 fdf8 	bl	800495c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	4b48      	ldr	r3, [pc, #288]	@ (8000e94 <SystemClock_Config+0x150>)
 8000d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d74:	4a47      	ldr	r2, [pc, #284]	@ (8000e94 <SystemClock_Config+0x150>)
 8000d76:	f023 0301 	bic.w	r3, r3, #1
 8000d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d7c:	4b45      	ldr	r3, [pc, #276]	@ (8000e94 <SystemClock_Config+0x150>)
 8000d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	4b44      	ldr	r3, [pc, #272]	@ (8000e98 <SystemClock_Config+0x154>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a43      	ldr	r2, [pc, #268]	@ (8000e98 <SystemClock_Config+0x154>)
 8000d8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b41      	ldr	r3, [pc, #260]	@ (8000e98 <SystemClock_Config+0x154>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000d9e:	bf00      	nop
 8000da0:	4b3d      	ldr	r3, [pc, #244]	@ (8000e98 <SystemClock_Config+0x154>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000da8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dac:	d1f8      	bne.n	8000da0 <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	4b3b      	ldr	r3, [pc, #236]	@ (8000e9c <SystemClock_Config+0x158>)
 8000db0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000db4:	4a39      	ldr	r2, [pc, #228]	@ (8000e9c <SystemClock_Config+0x158>)
 8000db6:	f043 0302 	orr.w	r3, r3, #2
 8000dba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dbe:	4b37      	ldr	r3, [pc, #220]	@ (8000e9c <SystemClock_Config+0x158>)
 8000dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	4b31      	ldr	r3, [pc, #196]	@ (8000e98 <SystemClock_Config+0x154>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a30      	ldr	r2, [pc, #192]	@ (8000e98 <SystemClock_Config+0x154>)
 8000dd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8000e98 <SystemClock_Config+0x154>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e94 <SystemClock_Config+0x150>)
 8000de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dea:	4a2a      	ldr	r2, [pc, #168]	@ (8000e94 <SystemClock_Config+0x150>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000df2:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <SystemClock_Config+0x150>)
 8000df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000dfe:	bf00      	nop
 8000e00:	4b25      	ldr	r3, [pc, #148]	@ (8000e98 <SystemClock_Config+0x154>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e0c:	d1f8      	bne.n	8000e00 <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e16:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000e20:	2305      	movs	r3, #5
 8000e22:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e24:	23c0      	movs	r3, #192	@ 0xc0
 8000e26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000e2c:	2314      	movs	r3, #20
 8000e2e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e34:	2308      	movs	r3, #8
 8000e36:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e44:	4618      	mov	r0, r3
 8000e46:	f003 fdc3 	bl	80049d0 <HAL_RCC_OscConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000e50:	f000 f896 	bl	8000f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000e54:	233f      	movs	r3, #63	@ 0x3f
 8000e56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e60:	2308      	movs	r3, #8
 8000e62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e64:	2340      	movs	r3, #64	@ 0x40
 8000e66:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e68:	2340      	movs	r3, #64	@ 0x40
 8000e6a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e72:	2340      	movs	r3, #64	@ 0x40
 8000e74:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f004 fa01 	bl	8005284 <HAL_RCC_ClockConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000e88:	f000 f87a 	bl	8000f80 <Error_Handler>
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	3778      	adds	r7, #120	@ 0x78
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	58000400 	.word	0x58000400
 8000e98:	58024800 	.word	0x58024800
 8000e9c:	58024400 	.word	0x58024400

08000ea0 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0b0      	sub	sp, #192	@ 0xc0
 8000ea4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	22c0      	movs	r2, #192	@ 0xc0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f00f f84c 	bl	800ff4a <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
 8000eb2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000eb6:	f04f 0300 	mov.w	r3, #0
 8000eba:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000ebe:	2319      	movs	r3, #25
 8000ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 8000ec2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000ee0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ee4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f004 fd83 	bl	80059f4 <HAL_RCCEx_PeriphCLKConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000ef4:	f000 f844 	bl	8000f80 <Error_Handler>
  }
}
 8000ef8:	bf00      	nop
 8000efa:	37c0      	adds	r7, #192	@ 0xc0
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f12:	f002 fa39 	bl	8003388 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f16:	2301      	movs	r3, #1
 8000f18:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000f1e:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000f22:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000f24:	2312      	movs	r3, #18
 8000f26:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f30:	2303      	movs	r3, #3
 8000f32:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000f40:	2301      	movs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f44:	463b      	mov	r3, r7
 8000f46:	4618      	mov	r0, r3
 8000f48:	f002 fa56 	bl	80033f8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f4c:	2004      	movs	r0, #4
 8000f4e:	f002 fa33 	bl	80033b8 <HAL_MPU_Enable>
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d101      	bne.n	8000f72 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f6e:	f000 fd7d 	bl	8001a6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40001000 	.word	0x40001000

08000f80 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f84:	b672      	cpsid	i
}
 8000f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <Error_Handler+0x8>

08000f8c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f90:	4b28      	ldr	r3, [pc, #160]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000f92:	4a29      	ldr	r2, [pc, #164]	@ (8001038 <MX_SPI1_Init+0xac>)
 8000f94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f96:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000f98:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000f9e:	4b25      	ldr	r3, [pc, #148]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fa0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fa4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa6:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fac:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb2:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fbe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fce:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000fda:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fe2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fe6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8001002:	2200      	movs	r2, #0
 8001004:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8001008:	2200      	movs	r2, #0
 800100a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_SPI1_Init+0xa8>)
 800100e:	2200      	movs	r2, #0
 8001010:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001012:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8001014:	2200      	movs	r2, #0
 8001016:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_SPI1_Init+0xa8>)
 800101a:	2200      	movs	r2, #0
 800101c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8001020:	f007 f9e6 	bl	80083f0 <HAL_SPI_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800102a:	f7ff ffa9 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	24000308 	.word	0x24000308
 8001038:	40013000 	.word	0x40013000

0800103c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001040:	4b28      	ldr	r3, [pc, #160]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001042:	4a29      	ldr	r2, [pc, #164]	@ (80010e8 <MX_SPI2_Init+0xac>)
 8001044:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001046:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001048:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800104c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800104e:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001050:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001054:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001056:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001058:	220f      	movs	r2, #15
 800105a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800105c:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 800105e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001062:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001064:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800106a:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 800106c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001070:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001072:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001074:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001078:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107a:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001080:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001086:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001088:	2200      	movs	r2, #0
 800108a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800108c:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 800108e:	2200      	movs	r2, #0
 8001090:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001092:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001094:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001098:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800109a:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 800109c:	2200      	movs	r2, #0
 800109e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010a0:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010ac:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010c4:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010d2:	f007 f98d 	bl	80083f0 <HAL_SPI_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 80010dc:	f7ff ff50 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	24000390 	.word	0x24000390
 80010e8:	40003800 	.word	0x40003800

080010ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	@ 0x30
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a34      	ldr	r2, [pc, #208]	@ (80011dc <HAL_SPI_MspInit+0xf0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d12e      	bne.n	800116c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800110e:	4b34      	ldr	r3, [pc, #208]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001110:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001114:	4a32      	ldr	r2, [pc, #200]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001116:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800111a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800111e:	4b30      	ldr	r3, [pc, #192]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001124:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001128:	61bb      	str	r3, [r7, #24]
 800112a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112c:	4b2c      	ldr	r3, [pc, #176]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001132:	4a2b      	ldr	r2, [pc, #172]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800113c:	4b28      	ldr	r3, [pc, #160]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 800114a:	23a0      	movs	r3, #160	@ 0xa0
 800114c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001156:	2301      	movs	r3, #1
 8001158:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800115a:	2305      	movs	r3, #5
 800115c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	4619      	mov	r1, r3
 8001164:	481f      	ldr	r0, [pc, #124]	@ (80011e4 <HAL_SPI_MspInit+0xf8>)
 8001166:	f002 fbd7 	bl	8003918 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800116a:	e032      	b.n	80011d2 <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a1d      	ldr	r2, [pc, #116]	@ (80011e8 <HAL_SPI_MspInit+0xfc>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d12d      	bne.n	80011d2 <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800117c:	4a18      	ldr	r2, [pc, #96]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 800117e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001182:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001186:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800118c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119a:	4a11      	ldr	r2, [pc, #68]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 800119c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a4:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80011b2:	2306      	movs	r3, #6
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011be:	2301      	movs	r3, #1
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011c2:	2305      	movs	r3, #5
 80011c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	4807      	ldr	r0, [pc, #28]	@ (80011ec <HAL_SPI_MspInit+0x100>)
 80011ce:	f002 fba3 	bl	8003918 <HAL_GPIO_Init>
}
 80011d2:	bf00      	nop
 80011d4:	3730      	adds	r7, #48	@ 0x30
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40013000 	.word	0x40013000
 80011e0:	58024400 	.word	0x58024400
 80011e4:	58020000 	.word	0x58020000
 80011e8:	40003800 	.word	0x40003800
 80011ec:	58022000 	.word	0x58022000

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <HAL_MspInit+0x38>)
 80011f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <HAL_MspInit+0x38>)
 80011fe:	f043 0302 	orr.w	r3, r3, #2
 8001202:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001206:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <HAL_MspInit+0x38>)
 8001208:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	210f      	movs	r1, #15
 8001218:	f06f 0001 	mvn.w	r0, #1
 800121c:	f002 f88c 	bl	8003338 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	58024400 	.word	0x58024400

0800122c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b090      	sub	sp, #64	@ 0x40
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	d827      	bhi.n	800128a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800123a:	2200      	movs	r2, #0
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	2036      	movs	r0, #54	@ 0x36
 8001240:	f002 f87a 	bl	8003338 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001244:	2036      	movs	r0, #54	@ 0x36
 8001246:	f002 f891 	bl	800336c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800124a:	4a29      	ldr	r2, [pc, #164]	@ (80012f0 <HAL_InitTick+0xc4>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001250:	4b28      	ldr	r3, [pc, #160]	@ (80012f4 <HAL_InitTick+0xc8>)
 8001252:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001256:	4a27      	ldr	r2, [pc, #156]	@ (80012f4 <HAL_InitTick+0xc8>)
 8001258:	f043 0310 	orr.w	r3, r3, #16
 800125c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001260:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <HAL_InitTick+0xc8>)
 8001262:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800126e:	f107 0210 	add.w	r2, r7, #16
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f004 fb79 	bl	8005970 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800127e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001280:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001284:	2b00      	cmp	r3, #0
 8001286:	d106      	bne.n	8001296 <HAL_InitTick+0x6a>
 8001288:	e001      	b.n	800128e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e02b      	b.n	80012e6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800128e:	f004 fb59 	bl	8005944 <HAL_RCC_GetPCLK1Freq>
 8001292:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001294:	e004      	b.n	80012a0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001296:	f004 fb55 	bl	8005944 <HAL_RCC_GetPCLK1Freq>
 800129a:	4603      	mov	r3, r0
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012a2:	4a15      	ldr	r2, [pc, #84]	@ (80012f8 <HAL_InitTick+0xcc>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	0c9b      	lsrs	r3, r3, #18
 80012aa:	3b01      	subs	r3, #1
 80012ac:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012ae:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <HAL_InitTick+0xd0>)
 80012b0:	4a13      	ldr	r2, [pc, #76]	@ (8001300 <HAL_InitTick+0xd4>)
 80012b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <HAL_InitTick+0xd0>)
 80012b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012bc:	4a0f      	ldr	r2, [pc, #60]	@ (80012fc <HAL_InitTick+0xd0>)
 80012be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <HAL_InitTick+0xd0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <HAL_InitTick+0xd0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80012ce:	480b      	ldr	r0, [pc, #44]	@ (80012fc <HAL_InitTick+0xd0>)
 80012d0:	f007 fefb 	bl	80090ca <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d104      	bne.n	80012e4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012da:	4808      	ldr	r0, [pc, #32]	@ (80012fc <HAL_InitTick+0xd0>)
 80012dc:	f007 ff4c 	bl	8009178 <HAL_TIM_Base_Start_IT>
 80012e0:	4603      	mov	r3, r0
 80012e2:	e000      	b.n	80012e6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3740      	adds	r7, #64	@ 0x40
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	24000008 	.word	0x24000008
 80012f4:	58024400 	.word	0x58024400
 80012f8:	431bde83 	.word	0x431bde83
 80012fc:	24000418 	.word	0x24000418
 8001300:	40001000 	.word	0x40001000

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <NMI_Handler+0x4>

0800130c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <MemManage_Handler+0x4>

0800131c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <UsageFault_Handler+0x4>

0800132c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 800133e:	2040      	movs	r0, #64	@ 0x40
 8001340:	f002 fccd 	bl	8003cde <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <TIM6_DAC_IRQHandler+0x20>)
 800134e:	791b      	ldrb	r3, [r3, #4]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8001356:	4804      	ldr	r0, [pc, #16]	@ (8001368 <TIM6_DAC_IRQHandler+0x20>)
 8001358:	f002 f907 	bl	800356a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800135c:	4803      	ldr	r0, [pc, #12]	@ (800136c <TIM6_DAC_IRQHandler+0x24>)
 800135e:	f008 f8f3 	bl	8009548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	24000288 	.word	0x24000288
 800136c:	24000418 	.word	0x24000418

08001370 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return 1;
 8001374:	2301      	movs	r3, #1
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_kill>:

int _kill(int pid, int sig)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800138a:	f00e fe41 	bl	8010010 <__errno>
 800138e:	4603      	mov	r3, r0
 8001390:	2216      	movs	r2, #22
 8001392:	601a      	str	r2, [r3, #0]
  return -1;
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_exit>:

void _exit (int status)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013a8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ffe7 	bl	8001380 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013b2:	bf00      	nop
 80013b4:	e7fd      	b.n	80013b2 <_exit+0x12>

080013b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e00a      	b.n	80013de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013c8:	f3af 8000 	nop.w
 80013cc:	4601      	mov	r1, r0
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	60ba      	str	r2, [r7, #8]
 80013d4:	b2ca      	uxtb	r2, r1
 80013d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3301      	adds	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	dbf0      	blt.n	80013c8 <_read+0x12>
  }

  return len;
 80013e6:	687b      	ldr	r3, [r7, #4]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e009      	b.n	8001416 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	60ba      	str	r2, [r7, #8]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	3301      	adds	r3, #1
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	429a      	cmp	r2, r3
 800141c:	dbf1      	blt.n	8001402 <_write+0x12>
  }
  return len;
 800141e:	687b      	ldr	r3, [r7, #4]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <_close>:

int _close(int file)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001450:	605a      	str	r2, [r3, #4]
  return 0;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <_isatty>:

int _isatty(int file)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001468:	2301      	movs	r3, #1
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001476:	b480      	push	{r7}
 8001478:	b085      	sub	sp, #20
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001498:	4a14      	ldr	r2, [pc, #80]	@ (80014ec <_sbrk+0x5c>)
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <_sbrk+0x60>)
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a4:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ac:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <_sbrk+0x64>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	@ (80014f8 <_sbrk+0x68>)
 80014b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d207      	bcs.n	80014d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c0:	f00e fda6 	bl	8010010 <__errno>
 80014c4:	4603      	mov	r3, r0
 80014c6:	220c      	movs	r2, #12
 80014c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	e009      	b.n	80014e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d0:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d6:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	4a05      	ldr	r2, [pc, #20]	@ (80014f4 <_sbrk+0x64>)
 80014e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e2:	68fb      	ldr	r3, [r7, #12]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	24080000 	.word	0x24080000
 80014f0:	00004000 	.word	0x00004000
 80014f4:	24000464 	.word	0x24000464
 80014f8:	240060e0 	.word	0x240060e0

080014fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001500:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <SystemInit+0xe4>)
 8001502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001506:	4a36      	ldr	r2, [pc, #216]	@ (80015e0 <SystemInit+0xe4>)
 8001508:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800150c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001510:	4b34      	ldr	r3, [pc, #208]	@ (80015e4 <SystemInit+0xe8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	2b06      	cmp	r3, #6
 800151a:	d807      	bhi.n	800152c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800151c:	4b31      	ldr	r3, [pc, #196]	@ (80015e4 <SystemInit+0xe8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 030f 	bic.w	r3, r3, #15
 8001524:	4a2f      	ldr	r2, [pc, #188]	@ (80015e4 <SystemInit+0xe8>)
 8001526:	f043 0307 	orr.w	r3, r3, #7
 800152a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800152c:	4b2e      	ldr	r3, [pc, #184]	@ (80015e8 <SystemInit+0xec>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a2d      	ldr	r2, [pc, #180]	@ (80015e8 <SystemInit+0xec>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001538:	4b2b      	ldr	r3, [pc, #172]	@ (80015e8 <SystemInit+0xec>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800153e:	4b2a      	ldr	r3, [pc, #168]	@ (80015e8 <SystemInit+0xec>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4929      	ldr	r1, [pc, #164]	@ (80015e8 <SystemInit+0xec>)
 8001544:	4b29      	ldr	r3, [pc, #164]	@ (80015ec <SystemInit+0xf0>)
 8001546:	4013      	ands	r3, r2
 8001548:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800154a:	4b26      	ldr	r3, [pc, #152]	@ (80015e4 <SystemInit+0xe8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001556:	4b23      	ldr	r3, [pc, #140]	@ (80015e4 <SystemInit+0xe8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 030f 	bic.w	r3, r3, #15
 800155e:	4a21      	ldr	r2, [pc, #132]	@ (80015e4 <SystemInit+0xe8>)
 8001560:	f043 0307 	orr.w	r3, r3, #7
 8001564:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <SystemInit+0xec>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800156c:	4b1e      	ldr	r3, [pc, #120]	@ (80015e8 <SystemInit+0xec>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001572:	4b1d      	ldr	r3, [pc, #116]	@ (80015e8 <SystemInit+0xec>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001578:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <SystemInit+0xec>)
 800157a:	4a1d      	ldr	r2, [pc, #116]	@ (80015f0 <SystemInit+0xf4>)
 800157c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800157e:	4b1a      	ldr	r3, [pc, #104]	@ (80015e8 <SystemInit+0xec>)
 8001580:	4a1c      	ldr	r2, [pc, #112]	@ (80015f4 <SystemInit+0xf8>)
 8001582:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001584:	4b18      	ldr	r3, [pc, #96]	@ (80015e8 <SystemInit+0xec>)
 8001586:	4a1c      	ldr	r2, [pc, #112]	@ (80015f8 <SystemInit+0xfc>)
 8001588:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800158a:	4b17      	ldr	r3, [pc, #92]	@ (80015e8 <SystemInit+0xec>)
 800158c:	2200      	movs	r2, #0
 800158e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001590:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <SystemInit+0xec>)
 8001592:	4a19      	ldr	r2, [pc, #100]	@ (80015f8 <SystemInit+0xfc>)
 8001594:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001596:	4b14      	ldr	r3, [pc, #80]	@ (80015e8 <SystemInit+0xec>)
 8001598:	2200      	movs	r2, #0
 800159a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800159c:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <SystemInit+0xec>)
 800159e:	4a16      	ldr	r2, [pc, #88]	@ (80015f8 <SystemInit+0xfc>)
 80015a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015a2:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <SystemInit+0xec>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <SystemInit+0xec>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0e      	ldr	r2, [pc, #56]	@ (80015e8 <SystemInit+0xec>)
 80015ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <SystemInit+0xec>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <SystemInit+0x100>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <SystemInit+0x104>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015c6:	d202      	bcs.n	80015ce <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <SystemInit+0x108>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <SystemInit+0x10c>)
 80015d0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80015d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00
 80015e4:	52002000 	.word	0x52002000
 80015e8:	58024400 	.word	0x58024400
 80015ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80015f0:	02020200 	.word	0x02020200
 80015f4:	01ff0000 	.word	0x01ff0000
 80015f8:	01010280 	.word	0x01010280
 80015fc:	5c001000 	.word	0x5c001000
 8001600:	ffff0000 	.word	0xffff0000
 8001604:	51008108 	.word	0x51008108
 8001608:	52004000 	.word	0x52004000

0800160c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08e      	sub	sp, #56	@ 0x38
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800162c:	463b      	mov	r3, r7
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]
 800163a:	615a      	str	r2, [r3, #20]
 800163c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800163e:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <MX_TIM2_Init+0xec>)
 8001640:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001644:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001646:	4b2c      	ldr	r3, [pc, #176]	@ (80016f8 <MX_TIM2_Init+0xec>)
 8001648:	2200      	movs	r2, #0
 800164a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164c:	4b2a      	ldr	r3, [pc, #168]	@ (80016f8 <MX_TIM2_Init+0xec>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8001652:	4b29      	ldr	r3, [pc, #164]	@ (80016f8 <MX_TIM2_Init+0xec>)
 8001654:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001658:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165a:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <MX_TIM2_Init+0xec>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001660:	4b25      	ldr	r3, [pc, #148]	@ (80016f8 <MX_TIM2_Init+0xec>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001666:	4824      	ldr	r0, [pc, #144]	@ (80016f8 <MX_TIM2_Init+0xec>)
 8001668:	f007 fd2f 	bl	80090ca <HAL_TIM_Base_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001672:	f7ff fc85 	bl	8000f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800167c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001680:	4619      	mov	r1, r3
 8001682:	481d      	ldr	r0, [pc, #116]	@ (80016f8 <MX_TIM2_Init+0xec>)
 8001684:	f008 f97c 	bl	8009980 <HAL_TIM_ConfigClockSource>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800168e:	f7ff fc77 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001692:	4819      	ldr	r0, [pc, #100]	@ (80016f8 <MX_TIM2_Init+0xec>)
 8001694:	f007 fde8 	bl	8009268 <HAL_TIM_PWM_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800169e:	f7ff fc6f 	bl	8000f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	4811      	ldr	r0, [pc, #68]	@ (80016f8 <MX_TIM2_Init+0xec>)
 80016b2:	f008 fec5 	bl	800a440 <HAL_TIMEx_MasterConfigSynchronization>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80016bc:	f7ff fc60 	bl	8000f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c0:	2360      	movs	r3, #96	@ 0x60
 80016c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 80016c4:	f242 3327 	movw	r3, #8999	@ 0x2327
 80016c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80016ce:	2304      	movs	r3, #4
 80016d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d2:	463b      	mov	r3, r7
 80016d4:	2200      	movs	r2, #0
 80016d6:	4619      	mov	r1, r3
 80016d8:	4807      	ldr	r0, [pc, #28]	@ (80016f8 <MX_TIM2_Init+0xec>)
 80016da:	f008 f83d 	bl	8009758 <HAL_TIM_PWM_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80016e4:	f7ff fc4c 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016e8:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <MX_TIM2_Init+0xec>)
 80016ea:	f000 f8f7 	bl	80018dc <HAL_TIM_MspPostInit>

}
 80016ee:	bf00      	nop
 80016f0:	3738      	adds	r7, #56	@ 0x38
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	24000468 	.word	0x24000468

080016fc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b09a      	sub	sp, #104	@ 0x68
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001702:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800171c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	615a      	str	r2, [r3, #20]
 800172e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	222c      	movs	r2, #44	@ 0x2c
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f00e fc07 	bl	800ff4a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800173c:	4b49      	ldr	r3, [pc, #292]	@ (8001864 <MX_TIM8_Init+0x168>)
 800173e:	4a4a      	ldr	r2, [pc, #296]	@ (8001868 <MX_TIM8_Init+0x16c>)
 8001740:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001742:	4b48      	ldr	r3, [pc, #288]	@ (8001864 <MX_TIM8_Init+0x168>)
 8001744:	2200      	movs	r2, #0
 8001746:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001748:	4b46      	ldr	r3, [pc, #280]	@ (8001864 <MX_TIM8_Init+0x168>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000-1;
 800174e:	4b45      	ldr	r3, [pc, #276]	@ (8001864 <MX_TIM8_Init+0x168>)
 8001750:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001754:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001756:	4b43      	ldr	r3, [pc, #268]	@ (8001864 <MX_TIM8_Init+0x168>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800175c:	4b41      	ldr	r3, [pc, #260]	@ (8001864 <MX_TIM8_Init+0x168>)
 800175e:	2200      	movs	r2, #0
 8001760:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001762:	4b40      	ldr	r3, [pc, #256]	@ (8001864 <MX_TIM8_Init+0x168>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001768:	483e      	ldr	r0, [pc, #248]	@ (8001864 <MX_TIM8_Init+0x168>)
 800176a:	f007 fcae 	bl	80090ca <HAL_TIM_Base_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001774:	f7ff fc04 	bl	8000f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800177c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800177e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001782:	4619      	mov	r1, r3
 8001784:	4837      	ldr	r0, [pc, #220]	@ (8001864 <MX_TIM8_Init+0x168>)
 8001786:	f008 f8fb 	bl	8009980 <HAL_TIM_ConfigClockSource>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001790:	f7ff fbf6 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001794:	4833      	ldr	r0, [pc, #204]	@ (8001864 <MX_TIM8_Init+0x168>)
 8001796:	f007 fd67 	bl	8009268 <HAL_TIM_PWM_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80017a0:	f7ff fbee 	bl	8000f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80017b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017b4:	4619      	mov	r1, r3
 80017b6:	482b      	ldr	r0, [pc, #172]	@ (8001864 <MX_TIM8_Init+0x168>)
 80017b8:	f008 fe42 	bl	800a440 <HAL_TIMEx_MasterConfigSynchronization>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80017c2:	f7ff fbdd 	bl	8000f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c6:	2360      	movs	r3, #96	@ 0x60
 80017c8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ce:	2300      	movs	r3, #0
 80017d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017d2:	2300      	movs	r3, #0
 80017d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80017d6:	2304      	movs	r3, #4
 80017d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017e6:	2200      	movs	r2, #0
 80017e8:	4619      	mov	r1, r3
 80017ea:	481e      	ldr	r0, [pc, #120]	@ (8001864 <MX_TIM8_Init+0x168>)
 80017ec:	f007 ffb4 	bl	8009758 <HAL_TIM_PWM_ConfigChannel>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80017f6:	f7ff fbc3 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017fe:	2204      	movs	r2, #4
 8001800:	4619      	mov	r1, r3
 8001802:	4818      	ldr	r0, [pc, #96]	@ (8001864 <MX_TIM8_Init+0x168>)
 8001804:	f007 ffa8 	bl	8009758 <HAL_TIM_PWM_ConfigChannel>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 800180e:	f7ff fbb7 	bl	8000f80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001826:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800182a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001834:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	4619      	mov	r1, r3
 8001846:	4807      	ldr	r0, [pc, #28]	@ (8001864 <MX_TIM8_Init+0x168>)
 8001848:	f008 fe88 	bl	800a55c <HAL_TIMEx_ConfigBreakDeadTime>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 8001852:	f7ff fb95 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001856:	4803      	ldr	r0, [pc, #12]	@ (8001864 <MX_TIM8_Init+0x168>)
 8001858:	f000 f840 	bl	80018dc <HAL_TIM_MspPostInit>

}
 800185c:	bf00      	nop
 800185e:	3768      	adds	r7, #104	@ 0x68
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	240004b4 	.word	0x240004b4
 8001868:	40010400 	.word	0x40010400

0800186c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800187c:	d10f      	bne.n	800189e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <HAL_TIM_Base_MspInit+0x68>)
 8001880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001884:	4a13      	ldr	r2, [pc, #76]	@ (80018d4 <HAL_TIM_Base_MspInit+0x68>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800188e:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <HAL_TIM_Base_MspInit+0x68>)
 8001890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800189c:	e013      	b.n	80018c6 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM8)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a0d      	ldr	r2, [pc, #52]	@ (80018d8 <HAL_TIM_Base_MspInit+0x6c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d10e      	bne.n	80018c6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018a8:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <HAL_TIM_Base_MspInit+0x68>)
 80018aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018ae:	4a09      	ldr	r2, [pc, #36]	@ (80018d4 <HAL_TIM_Base_MspInit+0x68>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_TIM_Base_MspInit+0x68>)
 80018ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
}
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	58024400 	.word	0x58024400
 80018d8:	40010400 	.word	0x40010400

080018dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	@ 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018fc:	d11f      	bne.n	800193e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	4b24      	ldr	r3, [pc, #144]	@ (8001990 <HAL_TIM_MspPostInit+0xb4>)
 8001900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001904:	4a22      	ldr	r2, [pc, #136]	@ (8001990 <HAL_TIM_MspPostInit+0xb4>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800190e:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <HAL_TIM_MspPostInit+0xb4>)
 8001910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800191c:	2301      	movs	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001928:	2302      	movs	r3, #2
 800192a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800192c:	2301      	movs	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	4817      	ldr	r0, [pc, #92]	@ (8001994 <HAL_TIM_MspPostInit+0xb8>)
 8001938:	f001 ffee 	bl	8003918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800193c:	e023      	b.n	8001986 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a15      	ldr	r2, [pc, #84]	@ (8001998 <HAL_TIM_MspPostInit+0xbc>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d11e      	bne.n	8001986 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <HAL_TIM_MspPostInit+0xb4>)
 800194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800194e:	4a10      	ldr	r2, [pc, #64]	@ (8001990 <HAL_TIM_MspPostInit+0xb4>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001958:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <HAL_TIM_MspPostInit+0xb4>)
 800195a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001966:	23c0      	movs	r3, #192	@ 0xc0
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001972:	2302      	movs	r3, #2
 8001974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001976:	2303      	movs	r3, #3
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	4806      	ldr	r0, [pc, #24]	@ (800199c <HAL_TIM_MspPostInit+0xc0>)
 8001982:	f001 ffc9 	bl	8003918 <HAL_GPIO_Init>
}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	@ 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	58024400 	.word	0x58024400
 8001994:	58020000 	.word	0x58020000
 8001998:	40010400 	.word	0x40010400
 800199c:	58020800 	.word	0x58020800

080019a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019a4:	f7ff fdaa 	bl	80014fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a8:	480c      	ldr	r0, [pc, #48]	@ (80019dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019aa:	490d      	ldr	r1, [pc, #52]	@ (80019e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019ac:	4a0d      	ldr	r2, [pc, #52]	@ (80019e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019c0:	4c0a      	ldr	r4, [pc, #40]	@ (80019ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ce:	f00e fb25 	bl	801001c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d2:	f7ff f92f 	bl	8000c34 <main>
  bx  lr
 80019d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019e0:	24000208 	.word	0x24000208
  ldr r2, =_sidata
 80019e4:	080149f8 	.word	0x080149f8
  ldr r2, =_sbss
 80019e8:	24000208 	.word	0x24000208
  ldr r4, =_ebss
 80019ec:	240060e0 	.word	0x240060e0

080019f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC3_IRQHandler>
	...

080019f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fa:	2003      	movs	r0, #3
 80019fc:	f001 fc91 	bl	8003322 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a00:	f003 fdf6 	bl	80055f0 <HAL_RCC_GetSysClockFreq>
 8001a04:	4602      	mov	r2, r0
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <HAL_Init+0x68>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	4913      	ldr	r1, [pc, #76]	@ (8001a60 <HAL_Init+0x6c>)
 8001a12:	5ccb      	ldrb	r3, [r1, r3]
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <HAL_Init+0x68>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	4a0e      	ldr	r2, [pc, #56]	@ (8001a60 <HAL_Init+0x6c>)
 8001a28:	5cd3      	ldrb	r3, [r2, r3]
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	4a0b      	ldr	r2, [pc, #44]	@ (8001a64 <HAL_Init+0x70>)
 8001a36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a38:	4a0b      	ldr	r2, [pc, #44]	@ (8001a68 <HAL_Init+0x74>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a3e:	2005      	movs	r0, #5
 8001a40:	f7ff fbf4 	bl	800122c <HAL_InitTick>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e002      	b.n	8001a54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4e:	f7ff fbcf 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	58024400 	.word	0x58024400
 8001a60:	08012650 	.word	0x08012650
 8001a64:	24000004 	.word	0x24000004
 8001a68:	24000000 	.word	0x24000000

08001a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_IncTick+0x20>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_IncTick+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <HAL_IncTick+0x24>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	2400000c 	.word	0x2400000c
 8001a90:	24000500 	.word	0x24000500

08001a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;
 8001a98:	4b03      	ldr	r3, [pc, #12]	@ (8001aa8 <HAL_GetTick+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	24000500 	.word	0x24000500

08001aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff ffee 	bl	8001a94 <HAL_GetTick>
 8001ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d005      	beq.n	8001ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <HAL_Delay+0x44>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad2:	bf00      	nop
 8001ad4:	f7ff ffde 	bl	8001a94 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d8f7      	bhi.n	8001ad4 <HAL_Delay+0x28>
  {
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	2400000c 	.word	0x2400000c

08001af4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001af8:	4b03      	ldr	r3, [pc, #12]	@ (8001b08 <HAL_GetREVID+0x14>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0c1b      	lsrs	r3, r3, #16
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	5c001000 	.word	0x5c001000

08001b0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	609a      	str	r2, [r3, #8]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3360      	adds	r3, #96	@ 0x60
 8001b86:	461a      	mov	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ba8:	bf00      	nop
 8001baa:	371c      	adds	r7, #28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	611a      	str	r2, [r3, #16]
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b087      	sub	sp, #28
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3360      	adds	r3, #96	@ 0x60
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	601a      	str	r2, [r3, #0]
  }
}
 8001c10:	bf00      	nop
 8001c12:	371c      	adds	r7, #28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b087      	sub	sp, #28
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3330      	adds	r3, #48	@ 0x30
 8001c52:	461a      	mov	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	4413      	add	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	211f      	movs	r1, #31
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	401a      	ands	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	0e9b      	lsrs	r3, r3, #26
 8001c7a:	f003 011f 	and.w	r1, r3, #31
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c8e:	bf00      	nop
 8001c90:	371c      	adds	r7, #28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b087      	sub	sp, #28
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3314      	adds	r3, #20
 8001caa:	461a      	mov	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	0e5b      	lsrs	r3, r3, #25
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	4413      	add	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	0d1b      	lsrs	r3, r3, #20
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	2107      	movs	r1, #7
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	401a      	ands	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	0d1b      	lsrs	r3, r3, #20
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ce4:	bf00      	nop
 8001ce6:	371c      	adds	r7, #28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0318 	and.w	r3, r3, #24
 8001d12:	4908      	ldr	r1, [pc, #32]	@ (8001d34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d14:	40d9      	lsrs	r1, r3
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	400b      	ands	r3, r1
 8001d1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	000fffff 	.word	0x000fffff

08001d38 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 031f 	and.w	r3, r3, #31
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6093      	str	r3, [r2, #8]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	5fffffc0 	.word	0x5fffffc0

08001d94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001da4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001da8:	d101      	bne.n	8001dae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	6fffffc0 	.word	0x6fffffc0

08001de4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001df8:	d101      	bne.n	8001dfe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <LL_ADC_Enable+0x24>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	f043 0201 	orr.w	r2, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	7fffffc0 	.word	0x7fffffc0

08001e34 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <LL_ADC_Disable+0x24>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	f043 0202 	orr.w	r2, r3, #2
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	7fffffc0 	.word	0x7fffffc0

08001e5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <LL_ADC_IsEnabled+0x18>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <LL_ADC_IsEnabled+0x1a>
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d101      	bne.n	8001e9a <LL_ADC_IsDisableOngoing+0x18>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <LL_ADC_IsDisableOngoing+0x1a>
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <LL_ADC_REG_StartConversion+0x24>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	f043 0204 	orr.w	r2, r3, #4
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	7fffffc0 	.word	0x7fffffc0

08001ed0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d101      	bne.n	8001ee8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d101      	bne.n	8001f0e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b089      	sub	sp, #36	@ 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e18f      	b.n	8002256 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d109      	bne.n	8001f58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7fe fbad 	bl	80006a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff19 	bl	8001d94 <LL_ADC_IsDeepPowerDownEnabled>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d004      	beq.n	8001f72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff feff 	bl	8001d70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff34 	bl	8001de4 <LL_ADC_IsInternalRegulatorEnabled>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d114      	bne.n	8001fac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff18 	bl	8001dbc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f8c:	4b87      	ldr	r3, [pc, #540]	@ (80021ac <HAL_ADC_Init+0x290>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	099b      	lsrs	r3, r3, #6
 8001f92:	4a87      	ldr	r2, [pc, #540]	@ (80021b0 <HAL_ADC_Init+0x294>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	099b      	lsrs	r3, r3, #6
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f9e:	e002      	b.n	8001fa6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f9      	bne.n	8001fa0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff17 	bl	8001de4 <LL_ADC_IsInternalRegulatorEnabled>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10d      	bne.n	8001fd8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc0:	f043 0210 	orr.w	r2, r3, #16
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fcc:	f043 0201 	orr.w	r2, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff77 	bl	8001ed0 <LL_ADC_REG_IsConversionOngoing>
 8001fe2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f040 8129 	bne.w	8002244 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f040 8125 	bne.w	8002244 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002002:	f043 0202 	orr.w	r2, r3, #2
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff24 	bl	8001e5c <LL_ADC_IsEnabled>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d136      	bne.n	8002088 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a65      	ldr	r2, [pc, #404]	@ (80021b4 <HAL_ADC_Init+0x298>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d004      	beq.n	800202e <HAL_ADC_Init+0x112>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a63      	ldr	r2, [pc, #396]	@ (80021b8 <HAL_ADC_Init+0x29c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d10e      	bne.n	800204c <HAL_ADC_Init+0x130>
 800202e:	4861      	ldr	r0, [pc, #388]	@ (80021b4 <HAL_ADC_Init+0x298>)
 8002030:	f7ff ff14 	bl	8001e5c <LL_ADC_IsEnabled>
 8002034:	4604      	mov	r4, r0
 8002036:	4860      	ldr	r0, [pc, #384]	@ (80021b8 <HAL_ADC_Init+0x29c>)
 8002038:	f7ff ff10 	bl	8001e5c <LL_ADC_IsEnabled>
 800203c:	4603      	mov	r3, r0
 800203e:	4323      	orrs	r3, r4
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	e008      	b.n	800205e <HAL_ADC_Init+0x142>
 800204c:	485b      	ldr	r0, [pc, #364]	@ (80021bc <HAL_ADC_Init+0x2a0>)
 800204e:	f7ff ff05 	bl	8001e5c <LL_ADC_IsEnabled>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf0c      	ite	eq
 8002058:	2301      	moveq	r3, #1
 800205a:	2300      	movne	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d012      	beq.n	8002088 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a53      	ldr	r2, [pc, #332]	@ (80021b4 <HAL_ADC_Init+0x298>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d004      	beq.n	8002076 <HAL_ADC_Init+0x15a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a51      	ldr	r2, [pc, #324]	@ (80021b8 <HAL_ADC_Init+0x29c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d101      	bne.n	800207a <HAL_ADC_Init+0x15e>
 8002076:	4a52      	ldr	r2, [pc, #328]	@ (80021c0 <HAL_ADC_Init+0x2a4>)
 8002078:	e000      	b.n	800207c <HAL_ADC_Init+0x160>
 800207a:	4a52      	ldr	r2, [pc, #328]	@ (80021c4 <HAL_ADC_Init+0x2a8>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4619      	mov	r1, r3
 8002082:	4610      	mov	r0, r2
 8002084:	f7ff fd42 	bl	8001b0c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002088:	f7ff fd34 	bl	8001af4 <HAL_GetREVID>
 800208c:	4603      	mov	r3, r0
 800208e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002092:	4293      	cmp	r3, r2
 8002094:	d914      	bls.n	80020c0 <HAL_ADC_Init+0x1a4>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b10      	cmp	r3, #16
 800209c:	d110      	bne.n	80020c0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	7d5b      	ldrb	r3, [r3, #21]
 80020a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020a8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	7f1b      	ldrb	r3, [r3, #28]
 80020b4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80020b6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020b8:	f043 030c 	orr.w	r3, r3, #12
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	e00d      	b.n	80020dc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	7d5b      	ldrb	r3, [r3, #21]
 80020c4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020ca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020d0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	7f1b      	ldrb	r3, [r3, #28]
 80020d6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7f1b      	ldrb	r3, [r3, #28]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d106      	bne.n	80020f2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	045b      	lsls	r3, r3, #17
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002106:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	4b2c      	ldr	r3, [pc, #176]	@ (80021c8 <HAL_ADC_Init+0x2ac>)
 8002116:	4013      	ands	r3, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	69b9      	ldr	r1, [r7, #24]
 800211e:	430b      	orrs	r3, r1
 8002120:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fed2 	bl	8001ed0 <LL_ADC_REG_IsConversionOngoing>
 800212c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fedf 	bl	8001ef6 <LL_ADC_INJ_IsConversionOngoing>
 8002138:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d15f      	bne.n	8002200 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d15c      	bne.n	8002200 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7d1b      	ldrb	r3, [r3, #20]
 800214a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <HAL_ADC_Init+0x2b0>)
 800215c:	4013      	ands	r3, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	69b9      	ldr	r1, [r7, #24]
 8002164:	430b      	orrs	r3, r1
 8002166:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800216e:	2b01      	cmp	r3, #1
 8002170:	d130      	bne.n	80021d4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	4b14      	ldr	r3, [pc, #80]	@ (80021d0 <HAL_ADC_Init+0x2b4>)
 8002180:	4013      	ands	r3, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002186:	3a01      	subs	r2, #1
 8002188:	0411      	lsls	r1, r2, #16
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800218e:	4311      	orrs	r1, r2
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002194:	4311      	orrs	r1, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800219a:	430a      	orrs	r2, r1
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0201 	orr.w	r2, r2, #1
 80021a6:	611a      	str	r2, [r3, #16]
 80021a8:	e01c      	b.n	80021e4 <HAL_ADC_Init+0x2c8>
 80021aa:	bf00      	nop
 80021ac:	24000000 	.word	0x24000000
 80021b0:	053e2d63 	.word	0x053e2d63
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40022100 	.word	0x40022100
 80021bc:	58026000 	.word	0x58026000
 80021c0:	40022300 	.word	0x40022300
 80021c4:	58026300 	.word	0x58026300
 80021c8:	fff0c003 	.word	0xfff0c003
 80021cc:	ffffbffc 	.word	0xffffbffc
 80021d0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fe42 	bl	8002e84 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d10c      	bne.n	8002222 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	f023 010f 	bic.w	r1, r3, #15
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	1e5a      	subs	r2, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002220:	e007      	b.n	8002232 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 020f 	bic.w	r2, r2, #15
 8002230:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002236:	f023 0303 	bic.w	r3, r3, #3
 800223a:	f043 0201 	orr.w	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	655a      	str	r2, [r3, #84]	@ 0x54
 8002242:	e007      	b.n	8002254 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002248:	f043 0210 	orr.w	r2, r3, #16
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002254:	7ffb      	ldrb	r3, [r7, #31]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	@ 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd90      	pop	{r4, r7, pc}
 800225e:	bf00      	nop

08002260 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a5c      	ldr	r2, [pc, #368]	@ (80023e0 <HAL_ADC_Start+0x180>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d004      	beq.n	800227c <HAL_ADC_Start+0x1c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a5b      	ldr	r2, [pc, #364]	@ (80023e4 <HAL_ADC_Start+0x184>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d101      	bne.n	8002280 <HAL_ADC_Start+0x20>
 800227c:	4b5a      	ldr	r3, [pc, #360]	@ (80023e8 <HAL_ADC_Start+0x188>)
 800227e:	e000      	b.n	8002282 <HAL_ADC_Start+0x22>
 8002280:	4b5a      	ldr	r3, [pc, #360]	@ (80023ec <HAL_ADC_Start+0x18c>)
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fd58 	bl	8001d38 <LL_ADC_GetMultimode>
 8002288:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fe1e 	bl	8001ed0 <LL_ADC_REG_IsConversionOngoing>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	f040 809a 	bne.w	80023d0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_Start+0x4a>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e095      	b.n	80023d6 <HAL_ADC_Start+0x176>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fcfc 	bl	8002cb0 <ADC_Enable>
 80022b8:	4603      	mov	r3, r0
 80022ba:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022bc:	7dfb      	ldrb	r3, [r7, #23]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 8081 	bne.w	80023c6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80022c8:	4b49      	ldr	r3, [pc, #292]	@ (80023f0 <HAL_ADC_Start+0x190>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a42      	ldr	r2, [pc, #264]	@ (80023e4 <HAL_ADC_Start+0x184>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d002      	beq.n	80022e4 <HAL_ADC_Start+0x84>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	e000      	b.n	80022e6 <HAL_ADC_Start+0x86>
 80022e4:	4b3e      	ldr	r3, [pc, #248]	@ (80023e0 <HAL_ADC_Start+0x180>)
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d002      	beq.n	80022f4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002304:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800230c:	d106      	bne.n	800231c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002312:	f023 0206 	bic.w	r2, r3, #6
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	659a      	str	r2, [r3, #88]	@ 0x58
 800231a:	e002      	b.n	8002322 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	221c      	movs	r2, #28
 8002328:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a2b      	ldr	r2, [pc, #172]	@ (80023e4 <HAL_ADC_Start+0x184>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d002      	beq.n	8002342 <HAL_ADC_Start+0xe2>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	e000      	b.n	8002344 <HAL_ADC_Start+0xe4>
 8002342:	4b27      	ldr	r3, [pc, #156]	@ (80023e0 <HAL_ADC_Start+0x180>)
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	4293      	cmp	r3, r2
 800234a:	d008      	beq.n	800235e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2b05      	cmp	r3, #5
 8002356:	d002      	beq.n	800235e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	2b09      	cmp	r3, #9
 800235c:	d114      	bne.n	8002388 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002370:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002374:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fd91 	bl	8001ea8 <LL_ADC_REG_StartConversion>
 8002386:	e025      	b.n	80023d4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a12      	ldr	r2, [pc, #72]	@ (80023e4 <HAL_ADC_Start+0x184>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d002      	beq.n	80023a4 <HAL_ADC_Start+0x144>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	e000      	b.n	80023a6 <HAL_ADC_Start+0x146>
 80023a4:	4b0e      	ldr	r3, [pc, #56]	@ (80023e0 <HAL_ADC_Start+0x180>)
 80023a6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00f      	beq.n	80023d4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80023c4:	e006      	b.n	80023d4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80023ce:	e001      	b.n	80023d4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
 80023d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40022000 	.word	0x40022000
 80023e4:	40022100 	.word	0x40022100
 80023e8:	40022300 	.word	0x40022300
 80023ec:	58026300 	.word	0x58026300
 80023f0:	fffff0fe 	.word	0xfffff0fe

080023f4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a72      	ldr	r2, [pc, #456]	@ (80025cc <HAL_ADC_PollForConversion+0x1d8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d004      	beq.n	8002412 <HAL_ADC_PollForConversion+0x1e>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a70      	ldr	r2, [pc, #448]	@ (80025d0 <HAL_ADC_PollForConversion+0x1dc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <HAL_ADC_PollForConversion+0x22>
 8002412:	4b70      	ldr	r3, [pc, #448]	@ (80025d4 <HAL_ADC_PollForConversion+0x1e0>)
 8002414:	e000      	b.n	8002418 <HAL_ADC_PollForConversion+0x24>
 8002416:	4b70      	ldr	r3, [pc, #448]	@ (80025d8 <HAL_ADC_PollForConversion+0x1e4>)
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fc8d 	bl	8001d38 <LL_ADC_GetMultimode>
 800241e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	2b08      	cmp	r3, #8
 8002426:	d102      	bne.n	800242e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002428:	2308      	movs	r3, #8
 800242a:	61fb      	str	r3, [r7, #28]
 800242c:	e037      	b.n	800249e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2b05      	cmp	r3, #5
 8002438:	d002      	beq.n	8002440 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b09      	cmp	r3, #9
 800243e:	d111      	bne.n	8002464 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002452:	f043 0220 	orr.w	r2, r3, #32
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0b1      	b.n	80025c2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800245e:	2304      	movs	r3, #4
 8002460:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002462:	e01c      	b.n	800249e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a58      	ldr	r2, [pc, #352]	@ (80025cc <HAL_ADC_PollForConversion+0x1d8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d004      	beq.n	8002478 <HAL_ADC_PollForConversion+0x84>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a57      	ldr	r2, [pc, #348]	@ (80025d0 <HAL_ADC_PollForConversion+0x1dc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_ADC_PollForConversion+0x88>
 8002478:	4b56      	ldr	r3, [pc, #344]	@ (80025d4 <HAL_ADC_PollForConversion+0x1e0>)
 800247a:	e000      	b.n	800247e <HAL_ADC_PollForConversion+0x8a>
 800247c:	4b56      	ldr	r3, [pc, #344]	@ (80025d8 <HAL_ADC_PollForConversion+0x1e4>)
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fc68 	bl	8001d54 <LL_ADC_GetMultiDMATransfer>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248e:	f043 0220 	orr.w	r2, r3, #32
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e093      	b.n	80025c2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800249a:	2304      	movs	r3, #4
 800249c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800249e:	f7ff faf9 	bl	8001a94 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024a4:	e021      	b.n	80024ea <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d01d      	beq.n	80024ea <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80024ae:	f7ff faf1 	bl	8001a94 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d302      	bcc.n	80024c4 <HAL_ADC_PollForConversion+0xd0>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d112      	bne.n	80024ea <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10b      	bne.n	80024ea <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d6:	f043 0204 	orr.w	r2, r3, #4
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e06b      	b.n	80025c2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0d6      	beq.n	80024a6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fb87 	bl	8001c1c <LL_ADC_REG_IsTriggerSourceSWStart>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01c      	beq.n	800254e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7d5b      	ldrb	r3, [r3, #21]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d118      	bne.n	800254e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b08      	cmp	r3, #8
 8002528:	d111      	bne.n	800254e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d105      	bne.n	800254e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002546:	f043 0201 	orr.w	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1f      	ldr	r2, [pc, #124]	@ (80025d0 <HAL_ADC_PollForConversion+0x1dc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d002      	beq.n	800255e <HAL_ADC_PollForConversion+0x16a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	e000      	b.n	8002560 <HAL_ADC_PollForConversion+0x16c>
 800255e:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <HAL_ADC_PollForConversion+0x1d8>)
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	4293      	cmp	r3, r2
 8002566:	d008      	beq.n	800257a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b05      	cmp	r3, #5
 8002572:	d002      	beq.n	800257a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b09      	cmp	r3, #9
 8002578:	d104      	bne.n	8002584 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	e00c      	b.n	800259e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a11      	ldr	r2, [pc, #68]	@ (80025d0 <HAL_ADC_PollForConversion+0x1dc>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d002      	beq.n	8002594 <HAL_ADC_PollForConversion+0x1a0>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e000      	b.n	8002596 <HAL_ADC_PollForConversion+0x1a2>
 8002594:	4b0d      	ldr	r3, [pc, #52]	@ (80025cc <HAL_ADC_PollForConversion+0x1d8>)
 8002596:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d104      	bne.n	80025ae <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2208      	movs	r2, #8
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e008      	b.n	80025c0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d103      	bne.n	80025c0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	220c      	movs	r2, #12
 80025be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3720      	adds	r7, #32
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40022000 	.word	0x40022000
 80025d0:	40022100 	.word	0x40022100
 80025d4:	40022300 	.word	0x40022300
 80025d8:	58026300 	.word	0x58026300

080025dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b0a1      	sub	sp, #132	@ 0x84
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4a65      	ldr	r2, [pc, #404]	@ (80027a8 <HAL_ADC_ConfigChannel+0x1b0>)
 8002612:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x2a>
 800261e:	2302      	movs	r3, #2
 8002620:	e32e      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x688>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fc4e 	bl	8001ed0 <LL_ADC_REG_IsConversionOngoing>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 8313 	bne.w	8002c62 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	db2c      	blt.n	800269e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800264c:	2b00      	cmp	r3, #0
 800264e:	d108      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x6a>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	2201      	movs	r2, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	e016      	b.n	8002690 <HAL_ADC_ConfigChannel+0x98>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002670:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002672:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002674:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800267a:	2320      	movs	r3, #32
 800267c:	e003      	b.n	8002686 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800267e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	2201      	movs	r2, #1
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	69d1      	ldr	r1, [r2, #28]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	430b      	orrs	r3, r1
 800269c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6859      	ldr	r1, [r3, #4]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	f7ff fac9 	bl	8001c42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fc0b 	bl	8001ed0 <LL_ADC_REG_IsConversionOngoing>
 80026ba:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fc18 	bl	8001ef6 <LL_ADC_INJ_IsConversionOngoing>
 80026c6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f040 80b8 	bne.w	8002840 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f040 80b4 	bne.w	8002840 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6819      	ldr	r1, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	461a      	mov	r2, r3
 80026e6:	f7ff fad8 	bl	8001c9a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026ea:	4b30      	ldr	r3, [pc, #192]	@ (80027ac <HAL_ADC_ConfigChannel+0x1b4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80026f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026f6:	d10b      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x118>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	e01d      	b.n	800274c <HAL_ADC_ConfigChannel+0x154>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10b      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x13e>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	e00a      	b.n	800274c <HAL_ADC_ConfigChannel+0x154>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	089b      	lsrs	r3, r3, #2
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	2b04      	cmp	r3, #4
 8002754:	d02c      	beq.n	80027b0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	6919      	ldr	r1, [r3, #16]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002764:	f7ff fa06 	bl	8001b74 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	6919      	ldr	r1, [r3, #16]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	7e5b      	ldrb	r3, [r3, #25]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d102      	bne.n	800277e <HAL_ADC_ConfigChannel+0x186>
 8002778:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800277c:	e000      	b.n	8002780 <HAL_ADC_ConfigChannel+0x188>
 800277e:	2300      	movs	r3, #0
 8002780:	461a      	mov	r2, r3
 8002782:	f7ff fa30 	bl	8001be6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6919      	ldr	r1, [r3, #16]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	7e1b      	ldrb	r3, [r3, #24]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d102      	bne.n	800279c <HAL_ADC_ConfigChannel+0x1a4>
 8002796:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800279a:	e000      	b.n	800279e <HAL_ADC_ConfigChannel+0x1a6>
 800279c:	2300      	movs	r3, #0
 800279e:	461a      	mov	r2, r3
 80027a0:	f7ff fa08 	bl	8001bb4 <LL_ADC_SetDataRightShift>
 80027a4:	e04c      	b.n	8002840 <HAL_ADC_ConfigChannel+0x248>
 80027a6:	bf00      	nop
 80027a8:	47ff0000 	.word	0x47ff0000
 80027ac:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	069b      	lsls	r3, r3, #26
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d107      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027d2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	069b      	lsls	r3, r3, #26
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d107      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027f6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	069b      	lsls	r3, r3, #26
 8002808:	429a      	cmp	r2, r3
 800280a:	d107      	bne.n	800281c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800281a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002822:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	069b      	lsls	r3, r3, #26
 800282c:	429a      	cmp	r2, r3
 800282e:	d107      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800283e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fb09 	bl	8001e5c <LL_ADC_IsEnabled>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 8211 	bne.w	8002c74 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6819      	ldr	r1, [r3, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	461a      	mov	r2, r3
 8002860:	f7ff fa46 	bl	8001cf0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4aa1      	ldr	r2, [pc, #644]	@ (8002af0 <HAL_ADC_ConfigChannel+0x4f8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	f040 812e 	bne.w	8002acc <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10b      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x2a0>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	0e9b      	lsrs	r3, r3, #26
 8002886:	3301      	adds	r3, #1
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	2b09      	cmp	r3, #9
 800288e:	bf94      	ite	ls
 8002890:	2301      	movls	r3, #1
 8002892:	2300      	movhi	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	e019      	b.n	80028cc <HAL_ADC_ConfigChannel+0x2d4>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80028a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80028aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80028b0:	2320      	movs	r3, #32
 80028b2:	e003      	b.n	80028bc <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80028b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	3301      	adds	r3, #1
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	2b09      	cmp	r3, #9
 80028c4:	bf94      	ite	ls
 80028c6:	2301      	movls	r3, #1
 80028c8:	2300      	movhi	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d079      	beq.n	80029c4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d107      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x2f4>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	0e9b      	lsrs	r3, r3, #26
 80028e2:	3301      	adds	r3, #1
 80028e4:	069b      	lsls	r3, r3, #26
 80028e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028ea:	e015      	b.n	8002918 <HAL_ADC_ConfigChannel+0x320>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80028fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028fc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80028fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002904:	2320      	movs	r3, #32
 8002906:	e003      	b.n	8002910 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	3301      	adds	r3, #1
 8002912:	069b      	lsls	r3, r3, #26
 8002914:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x340>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0e9b      	lsrs	r3, r3, #26
 800292a:	3301      	adds	r3, #1
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	2101      	movs	r1, #1
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	e017      	b.n	8002968 <HAL_ADC_ConfigChannel+0x370>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002948:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800294a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002950:	2320      	movs	r3, #32
 8002952:	e003      	b.n	800295c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	3301      	adds	r3, #1
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	ea42 0103 	orr.w	r1, r2, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <HAL_ADC_ConfigChannel+0x396>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0e9b      	lsrs	r3, r3, #26
 800297e:	3301      	adds	r3, #1
 8002980:	f003 021f 	and.w	r2, r3, #31
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	051b      	lsls	r3, r3, #20
 800298c:	e018      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x3c8>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800299c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80029a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e003      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80029aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	f003 021f 	and.w	r2, r3, #31
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c0:	430b      	orrs	r3, r1
 80029c2:	e07e      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d107      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x3e8>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	0e9b      	lsrs	r3, r3, #26
 80029d6:	3301      	adds	r3, #1
 80029d8:	069b      	lsls	r3, r3, #26
 80029da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029de:	e015      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x414>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e8:	fa93 f3a3 	rbit	r3, r3
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80029f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80029f8:	2320      	movs	r3, #32
 80029fa:	e003      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80029fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	069b      	lsls	r3, r3, #26
 8002a08:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x434>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0e9b      	lsrs	r3, r3, #26
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	2101      	movs	r1, #1
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	e017      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x464>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	61bb      	str	r3, [r7, #24]
  return result;
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002a44:	2320      	movs	r3, #32
 8002a46:	e003      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	3301      	adds	r3, #1
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	2101      	movs	r1, #1
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	ea42 0103 	orr.w	r1, r2, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10d      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x490>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0e9b      	lsrs	r3, r3, #26
 8002a72:	3301      	adds	r3, #1
 8002a74:	f003 021f 	and.w	r2, r3, #31
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3b1e      	subs	r3, #30
 8002a80:	051b      	lsls	r3, r3, #20
 8002a82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a86:	e01b      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x4c8>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	60fb      	str	r3, [r7, #12]
  return result;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	e003      	b.n	8002aac <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	3301      	adds	r3, #1
 8002aae:	f003 021f 	and.w	r2, r3, #31
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3b1e      	subs	r3, #30
 8002aba:	051b      	lsls	r3, r3, #20
 8002abc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	6892      	ldr	r2, [r2, #8]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f7ff f8e7 	bl	8001c9a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f280 80cf 	bge.w	8002c74 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a06      	ldr	r2, [pc, #24]	@ (8002af4 <HAL_ADC_ConfigChannel+0x4fc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d004      	beq.n	8002aea <HAL_ADC_ConfigChannel+0x4f2>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a04      	ldr	r2, [pc, #16]	@ (8002af8 <HAL_ADC_ConfigChannel+0x500>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10a      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x508>
 8002aea:	4b04      	ldr	r3, [pc, #16]	@ (8002afc <HAL_ADC_ConfigChannel+0x504>)
 8002aec:	e009      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x50a>
 8002aee:	bf00      	nop
 8002af0:	47ff0000 	.word	0x47ff0000
 8002af4:	40022000 	.word	0x40022000
 8002af8:	40022100 	.word	0x40022100
 8002afc:	40022300 	.word	0x40022300
 8002b00:	4b61      	ldr	r3, [pc, #388]	@ (8002c88 <HAL_ADC_ConfigChannel+0x690>)
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff f828 	bl	8001b58 <LL_ADC_GetCommonPathInternalCh>
 8002b08:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a5f      	ldr	r2, [pc, #380]	@ (8002c8c <HAL_ADC_ConfigChannel+0x694>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d004      	beq.n	8002b1e <HAL_ADC_ConfigChannel+0x526>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a5d      	ldr	r2, [pc, #372]	@ (8002c90 <HAL_ADC_ConfigChannel+0x698>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d10e      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x544>
 8002b1e:	485b      	ldr	r0, [pc, #364]	@ (8002c8c <HAL_ADC_ConfigChannel+0x694>)
 8002b20:	f7ff f99c 	bl	8001e5c <LL_ADC_IsEnabled>
 8002b24:	4604      	mov	r4, r0
 8002b26:	485a      	ldr	r0, [pc, #360]	@ (8002c90 <HAL_ADC_ConfigChannel+0x698>)
 8002b28:	f7ff f998 	bl	8001e5c <LL_ADC_IsEnabled>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4323      	orrs	r3, r4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	e008      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x556>
 8002b3c:	4855      	ldr	r0, [pc, #340]	@ (8002c94 <HAL_ADC_ConfigChannel+0x69c>)
 8002b3e:	f7ff f98d 	bl	8001e5c <LL_ADC_IsEnabled>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d07d      	beq.n	8002c4e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a50      	ldr	r2, [pc, #320]	@ (8002c98 <HAL_ADC_ConfigChannel+0x6a0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d130      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x5c6>
 8002b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d12b      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a4a      	ldr	r2, [pc, #296]	@ (8002c94 <HAL_ADC_ConfigChannel+0x69c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	f040 8081 	bne.w	8002c74 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a45      	ldr	r2, [pc, #276]	@ (8002c8c <HAL_ADC_ConfigChannel+0x694>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_ADC_ConfigChannel+0x58e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a43      	ldr	r2, [pc, #268]	@ (8002c90 <HAL_ADC_ConfigChannel+0x698>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x592>
 8002b86:	4a45      	ldr	r2, [pc, #276]	@ (8002c9c <HAL_ADC_ConfigChannel+0x6a4>)
 8002b88:	e000      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x594>
 8002b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8002c88 <HAL_ADC_ConfigChannel+0x690>)
 8002b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b8e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b92:	4619      	mov	r1, r3
 8002b94:	4610      	mov	r0, r2
 8002b96:	f7fe ffcc 	bl	8001b32 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x6a8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	099b      	lsrs	r3, r3, #6
 8002ba0:	4a40      	ldr	r2, [pc, #256]	@ (8002ca4 <HAL_ADC_ConfigChannel+0x6ac>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	099b      	lsrs	r3, r3, #6
 8002ba8:	3301      	adds	r3, #1
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002bae:	e002      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f9      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bbc:	e05a      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a39      	ldr	r2, [pc, #228]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x6b0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d11e      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x60e>
 8002bc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d119      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a2f      	ldr	r2, [pc, #188]	@ (8002c94 <HAL_ADC_ConfigChannel+0x69c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d14b      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a2a      	ldr	r2, [pc, #168]	@ (8002c8c <HAL_ADC_ConfigChannel+0x694>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <HAL_ADC_ConfigChannel+0x5f8>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a29      	ldr	r2, [pc, #164]	@ (8002c90 <HAL_ADC_ConfigChannel+0x698>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d101      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x5fc>
 8002bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8002c9c <HAL_ADC_ConfigChannel+0x6a4>)
 8002bf2:	e000      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x5fe>
 8002bf4:	4a24      	ldr	r2, [pc, #144]	@ (8002c88 <HAL_ADC_ConfigChannel+0x690>)
 8002bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bf8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f7fe ff97 	bl	8001b32 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c04:	e036      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a28      	ldr	r2, [pc, #160]	@ (8002cac <HAL_ADC_ConfigChannel+0x6b4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d131      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x67c>
 8002c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d12c      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002c94 <HAL_ADC_ConfigChannel+0x69c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d127      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a18      	ldr	r2, [pc, #96]	@ (8002c8c <HAL_ADC_ConfigChannel+0x694>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d004      	beq.n	8002c38 <HAL_ADC_ConfigChannel+0x640>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a17      	ldr	r2, [pc, #92]	@ (8002c90 <HAL_ADC_ConfigChannel+0x698>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d101      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x644>
 8002c38:	4a18      	ldr	r2, [pc, #96]	@ (8002c9c <HAL_ADC_ConfigChannel+0x6a4>)
 8002c3a:	e000      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x646>
 8002c3c:	4a12      	ldr	r2, [pc, #72]	@ (8002c88 <HAL_ADC_ConfigChannel+0x690>)
 8002c3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c44:	4619      	mov	r1, r3
 8002c46:	4610      	mov	r0, r2
 8002c48:	f7fe ff73 	bl	8001b32 <LL_ADC_SetCommonPathInternalCh>
 8002c4c:	e012      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c52:	f043 0220 	orr.w	r2, r3, #32
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002c60:	e008      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c66:	f043 0220 	orr.w	r2, r3, #32
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c7c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3784      	adds	r7, #132	@ 0x84
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}
 8002c88:	58026300 	.word	0x58026300
 8002c8c:	40022000 	.word	0x40022000
 8002c90:	40022100 	.word	0x40022100
 8002c94:	58026000 	.word	0x58026000
 8002c98:	cb840000 	.word	0xcb840000
 8002c9c:	40022300 	.word	0x40022300
 8002ca0:	24000000 	.word	0x24000000
 8002ca4:	053e2d63 	.word	0x053e2d63
 8002ca8:	c7520000 	.word	0xc7520000
 8002cac:	cfb80000 	.word	0xcfb80000

08002cb0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff f8cd 	bl	8001e5c <LL_ADC_IsEnabled>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d16e      	bne.n	8002da6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	4b38      	ldr	r3, [pc, #224]	@ (8002db0 <ADC_Enable+0x100>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cda:	f043 0210 	orr.w	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e05a      	b.n	8002da8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff f888 	bl	8001e0c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cfc:	f7fe feca 	bl	8001a94 <HAL_GetTick>
 8002d00:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a2b      	ldr	r2, [pc, #172]	@ (8002db4 <ADC_Enable+0x104>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d004      	beq.n	8002d16 <ADC_Enable+0x66>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a29      	ldr	r2, [pc, #164]	@ (8002db8 <ADC_Enable+0x108>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d101      	bne.n	8002d1a <ADC_Enable+0x6a>
 8002d16:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <ADC_Enable+0x10c>)
 8002d18:	e000      	b.n	8002d1c <ADC_Enable+0x6c>
 8002d1a:	4b29      	ldr	r3, [pc, #164]	@ (8002dc0 <ADC_Enable+0x110>)
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff f80b 	bl	8001d38 <LL_ADC_GetMultimode>
 8002d22:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a23      	ldr	r2, [pc, #140]	@ (8002db8 <ADC_Enable+0x108>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d002      	beq.n	8002d34 <ADC_Enable+0x84>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	e000      	b.n	8002d36 <ADC_Enable+0x86>
 8002d34:	4b1f      	ldr	r3, [pc, #124]	@ (8002db4 <ADC_Enable+0x104>)
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d02c      	beq.n	8002d98 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d130      	bne.n	8002da6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d44:	e028      	b.n	8002d98 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff f886 	bl	8001e5c <LL_ADC_IsEnabled>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d104      	bne.n	8002d60 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff f856 	bl	8001e0c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d60:	f7fe fe98 	bl	8001a94 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d914      	bls.n	8002d98 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d00d      	beq.n	8002d98 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d80:	f043 0210 	orr.w	r2, r3, #16
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e007      	b.n	8002da8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d1cf      	bne.n	8002d46 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	8000003f 	.word	0x8000003f
 8002db4:	40022000 	.word	0x40022000
 8002db8:	40022100 	.word	0x40022100
 8002dbc:	40022300 	.word	0x40022300
 8002dc0:	58026300 	.word	0x58026300

08002dc4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff f856 	bl	8001e82 <LL_ADC_IsDisableOngoing>
 8002dd6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff f83d 	bl	8001e5c <LL_ADC_IsEnabled>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d047      	beq.n	8002e78 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d144      	bne.n	8002e78 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030d 	and.w	r3, r3, #13
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d10c      	bne.n	8002e16 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff f817 	bl	8001e34 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e0e:	f7fe fe41 	bl	8001a94 <HAL_GetTick>
 8002e12:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e14:	e029      	b.n	8002e6a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1a:	f043 0210 	orr.w	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e26:	f043 0201 	orr.w	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e023      	b.n	8002e7a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e32:	f7fe fe2f 	bl	8001a94 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d914      	bls.n	8002e6a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e52:	f043 0210 	orr.w	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5e:	f043 0201 	orr.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e007      	b.n	8002e7a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1dc      	bne.n	8002e32 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a7a      	ldr	r2, [pc, #488]	@ (800307c <ADC_ConfigureBoostMode+0x1f8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <ADC_ConfigureBoostMode+0x1c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a79      	ldr	r2, [pc, #484]	@ (8003080 <ADC_ConfigureBoostMode+0x1fc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d109      	bne.n	8002eb4 <ADC_ConfigureBoostMode+0x30>
 8002ea0:	4b78      	ldr	r3, [pc, #480]	@ (8003084 <ADC_ConfigureBoostMode+0x200>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	e008      	b.n	8002ec6 <ADC_ConfigureBoostMode+0x42>
 8002eb4:	4b74      	ldr	r3, [pc, #464]	@ (8003088 <ADC_ConfigureBoostMode+0x204>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf14      	ite	ne
 8002ec0:	2301      	movne	r3, #1
 8002ec2:	2300      	moveq	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d01c      	beq.n	8002f04 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002eca:	f002 fd0b 	bl	80058e4 <HAL_RCC_GetHCLKFreq>
 8002ece:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ed8:	d010      	beq.n	8002efc <ADC_ConfigureBoostMode+0x78>
 8002eda:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ede:	d873      	bhi.n	8002fc8 <ADC_ConfigureBoostMode+0x144>
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee4:	d002      	beq.n	8002eec <ADC_ConfigureBoostMode+0x68>
 8002ee6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002eea:	d16d      	bne.n	8002fc8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	60fb      	str	r3, [r7, #12]
        break;
 8002efa:	e068      	b.n	8002fce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	089b      	lsrs	r3, r3, #2
 8002f00:	60fb      	str	r3, [r7, #12]
        break;
 8002f02:	e064      	b.n	8002fce <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f04:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002f08:	f04f 0100 	mov.w	r1, #0
 8002f0c:	f003 ff7c 	bl	8006e08 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f10:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f1a:	d051      	beq.n	8002fc0 <ADC_ConfigureBoostMode+0x13c>
 8002f1c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f20:	d854      	bhi.n	8002fcc <ADC_ConfigureBoostMode+0x148>
 8002f22:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f26:	d047      	beq.n	8002fb8 <ADC_ConfigureBoostMode+0x134>
 8002f28:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f2c:	d84e      	bhi.n	8002fcc <ADC_ConfigureBoostMode+0x148>
 8002f2e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f32:	d03d      	beq.n	8002fb0 <ADC_ConfigureBoostMode+0x12c>
 8002f34:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f38:	d848      	bhi.n	8002fcc <ADC_ConfigureBoostMode+0x148>
 8002f3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f3e:	d033      	beq.n	8002fa8 <ADC_ConfigureBoostMode+0x124>
 8002f40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f44:	d842      	bhi.n	8002fcc <ADC_ConfigureBoostMode+0x148>
 8002f46:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002f4a:	d029      	beq.n	8002fa0 <ADC_ConfigureBoostMode+0x11c>
 8002f4c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002f50:	d83c      	bhi.n	8002fcc <ADC_ConfigureBoostMode+0x148>
 8002f52:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002f56:	d01a      	beq.n	8002f8e <ADC_ConfigureBoostMode+0x10a>
 8002f58:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002f5c:	d836      	bhi.n	8002fcc <ADC_ConfigureBoostMode+0x148>
 8002f5e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002f62:	d014      	beq.n	8002f8e <ADC_ConfigureBoostMode+0x10a>
 8002f64:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002f68:	d830      	bhi.n	8002fcc <ADC_ConfigureBoostMode+0x148>
 8002f6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f6e:	d00e      	beq.n	8002f8e <ADC_ConfigureBoostMode+0x10a>
 8002f70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f74:	d82a      	bhi.n	8002fcc <ADC_ConfigureBoostMode+0x148>
 8002f76:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f7a:	d008      	beq.n	8002f8e <ADC_ConfigureBoostMode+0x10a>
 8002f7c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f80:	d824      	bhi.n	8002fcc <ADC_ConfigureBoostMode+0x148>
 8002f82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f86:	d002      	beq.n	8002f8e <ADC_ConfigureBoostMode+0x10a>
 8002f88:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f8c:	d11e      	bne.n	8002fcc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	0c9b      	lsrs	r3, r3, #18
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	60fb      	str	r3, [r7, #12]
        break;
 8002f9e:	e016      	b.n	8002fce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	60fb      	str	r3, [r7, #12]
        break;
 8002fa6:	e012      	b.n	8002fce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	60fb      	str	r3, [r7, #12]
        break;
 8002fae:	e00e      	b.n	8002fce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	099b      	lsrs	r3, r3, #6
 8002fb4:	60fb      	str	r3, [r7, #12]
        break;
 8002fb6:	e00a      	b.n	8002fce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	09db      	lsrs	r3, r3, #7
 8002fbc:	60fb      	str	r3, [r7, #12]
        break;
 8002fbe:	e006      	b.n	8002fce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	60fb      	str	r3, [r7, #12]
        break;
 8002fc6:	e002      	b.n	8002fce <ADC_ConfigureBoostMode+0x14a>
        break;
 8002fc8:	bf00      	nop
 8002fca:	e000      	b.n	8002fce <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002fcc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002fce:	f7fe fd91 	bl	8001af4 <HAL_GetREVID>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d815      	bhi.n	8003008 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a2b      	ldr	r2, [pc, #172]	@ (800308c <ADC_ConfigureBoostMode+0x208>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d908      	bls.n	8002ff6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ff2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002ff4:	e03e      	b.n	8003074 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003004:	609a      	str	r2, [r3, #8]
}
 8003006:	e035      	b.n	8003074 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	085b      	lsrs	r3, r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4a1f      	ldr	r2, [pc, #124]	@ (8003090 <ADC_ConfigureBoostMode+0x20c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d808      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003024:	609a      	str	r2, [r3, #8]
}
 8003026:	e025      	b.n	8003074 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4a1a      	ldr	r2, [pc, #104]	@ (8003094 <ADC_ConfigureBoostMode+0x210>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d80a      	bhi.n	8003046 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003042:	609a      	str	r2, [r3, #8]
}
 8003044:	e016      	b.n	8003074 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4a13      	ldr	r2, [pc, #76]	@ (8003098 <ADC_ConfigureBoostMode+0x214>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d80a      	bhi.n	8003064 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003060:	609a      	str	r2, [r3, #8]
}
 8003062:	e007      	b.n	8003074 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003072:	609a      	str	r2, [r3, #8]
}
 8003074:	bf00      	nop
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40022000 	.word	0x40022000
 8003080:	40022100 	.word	0x40022100
 8003084:	40022300 	.word	0x40022300
 8003088:	58026300 	.word	0x58026300
 800308c:	01312d00 	.word	0x01312d00
 8003090:	005f5e10 	.word	0x005f5e10
 8003094:	00bebc20 	.word	0x00bebc20
 8003098:	017d7840 	.word	0x017d7840

0800309c <LL_ADC_StartCalibration>:
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <LL_ADC_StartCalibration+0x38>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80030bc:	430a      	orrs	r2, r1
 80030be:	4313      	orrs	r3, r2
 80030c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	609a      	str	r2, [r3, #8]
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	3ffeffc0 	.word	0x3ffeffc0

080030d8 <LL_ADC_IsCalibrationOnGoing>:
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030ec:	d101      	bne.n	80030f2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_ADCEx_Calibration_Start+0x1e>
 800311a:	2302      	movs	r3, #2
 800311c:	e04c      	b.n	80031b8 <HAL_ADCEx_Calibration_Start+0xb8>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7ff fe4c 	bl	8002dc4 <ADC_Disable>
 800312c:	4603      	mov	r3, r0
 800312e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003130:	7dfb      	ldrb	r3, [r7, #23]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d135      	bne.n	80031a2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800313a:	4b21      	ldr	r3, [pc, #132]	@ (80031c0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800313c:	4013      	ands	r3, r2
 800313e:	f043 0202 	orr.w	r2, r3, #2
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff ffa4 	bl	800309c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003154:	e014      	b.n	8003180 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	3301      	adds	r3, #1
 800315a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4a19      	ldr	r2, [pc, #100]	@ (80031c4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d30d      	bcc.n	8003180 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003168:	f023 0312 	bic.w	r3, r3, #18
 800316c:	f043 0210 	orr.w	r2, r3, #16
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e01b      	b.n	80031b8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ffa7 	bl	80030d8 <LL_ADC_IsCalibrationOnGoing>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1e2      	bne.n	8003156 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003194:	f023 0303 	bic.w	r3, r3, #3
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	655a      	str	r2, [r3, #84]	@ 0x54
 80031a0:	e005      	b.n	80031ae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a6:	f043 0210 	orr.w	r2, r3, #16
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	ffffeefd 	.word	0xffffeefd
 80031c4:	25c3f800 	.word	0x25c3f800

080031c8 <__NVIC_SetPriorityGrouping>:
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003208 <__NVIC_SetPriorityGrouping+0x40>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031e4:	4013      	ands	r3, r2
 80031e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031f0:	4b06      	ldr	r3, [pc, #24]	@ (800320c <__NVIC_SetPriorityGrouping+0x44>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031f6:	4a04      	ldr	r2, [pc, #16]	@ (8003208 <__NVIC_SetPriorityGrouping+0x40>)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	60d3      	str	r3, [r2, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000ed00 	.word	0xe000ed00
 800320c:	05fa0000 	.word	0x05fa0000

08003210 <__NVIC_GetPriorityGrouping>:
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003214:	4b04      	ldr	r3, [pc, #16]	@ (8003228 <__NVIC_GetPriorityGrouping+0x18>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	0a1b      	lsrs	r3, r3, #8
 800321a:	f003 0307 	and.w	r3, r3, #7
}
 800321e:	4618      	mov	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <__NVIC_EnableIRQ>:
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800323a:	2b00      	cmp	r3, #0
 800323c:	db0b      	blt.n	8003256 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	f003 021f 	and.w	r2, r3, #31
 8003244:	4907      	ldr	r1, [pc, #28]	@ (8003264 <__NVIC_EnableIRQ+0x38>)
 8003246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	2001      	movs	r0, #1
 800324e:	fa00 f202 	lsl.w	r2, r0, r2
 8003252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	e000e100 	.word	0xe000e100

08003268 <__NVIC_SetPriority>:
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	6039      	str	r1, [r7, #0]
 8003272:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003274:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003278:	2b00      	cmp	r3, #0
 800327a:	db0a      	blt.n	8003292 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	490c      	ldr	r1, [pc, #48]	@ (80032b4 <__NVIC_SetPriority+0x4c>)
 8003282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003286:	0112      	lsls	r2, r2, #4
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	440b      	add	r3, r1
 800328c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003290:	e00a      	b.n	80032a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	b2da      	uxtb	r2, r3
 8003296:	4908      	ldr	r1, [pc, #32]	@ (80032b8 <__NVIC_SetPriority+0x50>)
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	3b04      	subs	r3, #4
 80032a0:	0112      	lsls	r2, r2, #4
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	440b      	add	r3, r1
 80032a6:	761a      	strb	r2, [r3, #24]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	e000e100 	.word	0xe000e100
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <NVIC_EncodePriority>:
{
 80032bc:	b480      	push	{r7}
 80032be:	b089      	sub	sp, #36	@ 0x24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f1c3 0307 	rsb	r3, r3, #7
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	bf28      	it	cs
 80032da:	2304      	movcs	r3, #4
 80032dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3304      	adds	r3, #4
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d902      	bls.n	80032ec <NVIC_EncodePriority+0x30>
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3b03      	subs	r3, #3
 80032ea:	e000      	b.n	80032ee <NVIC_EncodePriority+0x32>
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	f04f 32ff 	mov.w	r2, #4294967295
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43da      	mvns	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	401a      	ands	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003304:	f04f 31ff 	mov.w	r1, #4294967295
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	fa01 f303 	lsl.w	r3, r1, r3
 800330e:	43d9      	mvns	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003314:	4313      	orrs	r3, r2
}
 8003316:	4618      	mov	r0, r3
 8003318:	3724      	adds	r7, #36	@ 0x24
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff ff4c 	bl	80031c8 <__NVIC_SetPriorityGrouping>
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003346:	f7ff ff63 	bl	8003210 <__NVIC_GetPriorityGrouping>
 800334a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	68b9      	ldr	r1, [r7, #8]
 8003350:	6978      	ldr	r0, [r7, #20]
 8003352:	f7ff ffb3 	bl	80032bc <NVIC_EncodePriority>
 8003356:	4602      	mov	r2, r0
 8003358:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff ff82 	bl	8003268 <__NVIC_SetPriority>
}
 8003364:	bf00      	nop
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff ff56 	bl	800322c <__NVIC_EnableIRQ>
}
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800338c:	f3bf 8f5f 	dmb	sy
}
 8003390:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003392:	4b07      	ldr	r3, [pc, #28]	@ (80033b0 <HAL_MPU_Disable+0x28>)
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	4a06      	ldr	r2, [pc, #24]	@ (80033b0 <HAL_MPU_Disable+0x28>)
 8003398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800339c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800339e:	4b05      	ldr	r3, [pc, #20]	@ (80033b4 <HAL_MPU_Disable+0x2c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	605a      	str	r2, [r3, #4]
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000ed00 	.word	0xe000ed00
 80033b4:	e000ed90 	.word	0xe000ed90

080033b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80033c0:	4a0b      	ldr	r2, [pc, #44]	@ (80033f0 <HAL_MPU_Enable+0x38>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80033ca:	4b0a      	ldr	r3, [pc, #40]	@ (80033f4 <HAL_MPU_Enable+0x3c>)
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	4a09      	ldr	r2, [pc, #36]	@ (80033f4 <HAL_MPU_Enable+0x3c>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80033d6:	f3bf 8f4f 	dsb	sy
}
 80033da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033dc:	f3bf 8f6f 	isb	sy
}
 80033e0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000ed90 	.word	0xe000ed90
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	785a      	ldrb	r2, [r3, #1]
 8003404:	4b1b      	ldr	r3, [pc, #108]	@ (8003474 <HAL_MPU_ConfigRegion+0x7c>)
 8003406:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003408:	4b1a      	ldr	r3, [pc, #104]	@ (8003474 <HAL_MPU_ConfigRegion+0x7c>)
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	4a19      	ldr	r2, [pc, #100]	@ (8003474 <HAL_MPU_ConfigRegion+0x7c>)
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003414:	4a17      	ldr	r2, [pc, #92]	@ (8003474 <HAL_MPU_ConfigRegion+0x7c>)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	7b1b      	ldrb	r3, [r3, #12]
 8003420:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	7adb      	ldrb	r3, [r3, #11]
 8003426:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003428:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	7a9b      	ldrb	r3, [r3, #10]
 800342e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003430:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	7b5b      	ldrb	r3, [r3, #13]
 8003436:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003438:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	7b9b      	ldrb	r3, [r3, #14]
 800343e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003440:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	7bdb      	ldrb	r3, [r3, #15]
 8003446:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003448:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	7a5b      	ldrb	r3, [r3, #9]
 800344e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003450:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	7a1b      	ldrb	r3, [r3, #8]
 8003456:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003458:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	7812      	ldrb	r2, [r2, #0]
 800345e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003460:	4a04      	ldr	r2, [pc, #16]	@ (8003474 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003462:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003464:	6113      	str	r3, [r2, #16]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	e000ed90 	.word	0xe000ed90

08003478 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e014      	b.n	80034b4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	791b      	ldrb	r3, [r3, #4]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fd f980 	bl	80007a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e046      	b.n	800355e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	795b      	ldrb	r3, [r3, #5]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_DAC_Start+0x20>
 80034d8:	2302      	movs	r3, #2
 80034da:	e040      	b.n	800355e <HAL_DAC_Start+0xa2>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6819      	ldr	r1, [r3, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2201      	movs	r2, #1
 80034f6:	409a      	lsls	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10f      	bne.n	8003526 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8003510:	2b02      	cmp	r3, #2
 8003512:	d11d      	bne.n	8003550 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	605a      	str	r2, [r3, #4]
 8003524:	e014      	b.n	8003550 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2102      	movs	r1, #2
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	429a      	cmp	r2, r3
 800353e:	d107      	bne.n	8003550 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0202 	orr.w	r2, r2, #2
 800354e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003580:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01d      	beq.n	80035c8 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d018      	beq.n	80035c8 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2204      	movs	r2, #4
 800359a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f043 0201 	orr.w	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035c0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f851 	bl	800366a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d01d      	beq.n	800360e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d018      	beq.n	800360e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2204      	movs	r2, #4
 80035e0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f043 0202 	orr.w	r2, r3, #2
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80035f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003606:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f97b 	bl	8003904 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800360e:	bf00      	nop
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003616:	b480      	push	{r7}
 8003618:	b087      	sub	sp, #28
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e015      	b.n	800365e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d105      	bne.n	800364a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4413      	add	r3, r2
 8003644:	3308      	adds	r3, #8
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	e004      	b.n	8003654 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4413      	add	r3, r2
 8003650:	3314      	adds	r3, #20
 8003652:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	461a      	mov	r2, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	371c      	adds	r7, #28
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	@ 0x28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <HAL_DAC_ConfigChannel+0x1e>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e12a      	b.n	80038f8 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	795b      	ldrb	r3, [r3, #5]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_DAC_ConfigChannel+0x2e>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e124      	b.n	80038f8 <HAL_DAC_ConfigChannel+0x278>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2202      	movs	r2, #2
 80036b8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d17a      	bne.n	80037b8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80036c2:	f7fe f9e7 	bl	8001a94 <HAL_GetTick>
 80036c6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d13d      	bne.n	800374a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036ce:	e018      	b.n	8003702 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80036d0:	f7fe f9e0 	bl	8001a94 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d911      	bls.n	8003702 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036e4:	4b86      	ldr	r3, [pc, #536]	@ (8003900 <HAL_DAC_ConfigChannel+0x280>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f043 0208 	orr.w	r2, r3, #8
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2203      	movs	r2, #3
 80036fc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0fa      	b.n	80038f8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003708:	4b7d      	ldr	r3, [pc, #500]	@ (8003900 <HAL_DAC_ConfigChannel+0x280>)
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1df      	bne.n	80036d0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	6992      	ldr	r2, [r2, #24]
 8003718:	641a      	str	r2, [r3, #64]	@ 0x40
 800371a:	e020      	b.n	800375e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800371c:	f7fe f9ba 	bl	8001a94 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d90f      	bls.n	800374a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003730:	2b00      	cmp	r3, #0
 8003732:	da0a      	bge.n	800374a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f043 0208 	orr.w	r2, r3, #8
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2203      	movs	r2, #3
 8003744:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e0d6      	b.n	80038f8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003750:	2b00      	cmp	r3, #0
 8003752:	dbe3      	blt.n	800371c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	6992      	ldr	r2, [r2, #24]
 800375c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800376e:	fa01 f303 	lsl.w	r3, r1, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	ea02 0103 	and.w	r1, r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	69da      	ldr	r2, [r3, #28]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	409a      	lsls	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	21ff      	movs	r1, #255	@ 0xff
 800379a:	fa01 f303 	lsl.w	r3, r1, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	ea02 0103 	and.w	r1, r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	6a1a      	ldr	r2, [r3, #32]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	409a      	lsls	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d11d      	bne.n	80037fc <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	221f      	movs	r2, #31
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003802:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2207      	movs	r2, #7
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d102      	bne.n	8003826 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8003820:	2300      	movs	r3, #0
 8003822:	627b      	str	r3, [r7, #36]	@ 0x24
 8003824:	e00f      	b.n	8003846 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d102      	bne.n	8003834 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800382e:	2301      	movs	r3, #1
 8003830:	627b      	str	r3, [r7, #36]	@ 0x24
 8003832:	e008      	b.n	8003846 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d102      	bne.n	8003842 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800383c:	2301      	movs	r3, #1
 800383e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003840:	e001      	b.n	8003846 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003842:	2300      	movs	r3, #0
 8003844:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	4313      	orrs	r3, r2
 8003850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4313      	orrs	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6819      	ldr	r1, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43da      	mvns	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	400a      	ands	r2, r1
 800388c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6819      	ldr	r1, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	22c0      	movs	r2, #192	@ 0xc0
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43da      	mvns	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	400a      	ands	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80038f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3728      	adds	r7, #40	@ 0x28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20008000 	.word	0x20008000

08003904 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	@ 0x24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003926:	4b89      	ldr	r3, [pc, #548]	@ (8003b4c <HAL_GPIO_Init+0x234>)
 8003928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800392a:	e194      	b.n	8003c56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	2101      	movs	r1, #1
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	fa01 f303 	lsl.w	r3, r1, r3
 8003938:	4013      	ands	r3, r2
 800393a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 8186 	beq.w	8003c50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d005      	beq.n	800395c <HAL_GPIO_Init+0x44>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d130      	bne.n	80039be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	2203      	movs	r2, #3
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003992:	2201      	movs	r2, #1
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	091b      	lsrs	r3, r3, #4
 80039a8:	f003 0201 	and.w	r2, r3, #1
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d017      	beq.n	80039fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	2203      	movs	r2, #3
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4013      	ands	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d123      	bne.n	8003a4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	08da      	lsrs	r2, r3, #3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3208      	adds	r2, #8
 8003a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	220f      	movs	r2, #15
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43db      	mvns	r3, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4013      	ands	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	08da      	lsrs	r2, r3, #3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3208      	adds	r2, #8
 8003a48:	69b9      	ldr	r1, [r7, #24]
 8003a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	2203      	movs	r2, #3
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4013      	ands	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 0203 	and.w	r2, r3, #3
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80e0 	beq.w	8003c50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a90:	4b2f      	ldr	r3, [pc, #188]	@ (8003b50 <HAL_GPIO_Init+0x238>)
 8003a92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a96:	4a2e      	ldr	r2, [pc, #184]	@ (8003b50 <HAL_GPIO_Init+0x238>)
 8003a98:	f043 0302 	orr.w	r3, r3, #2
 8003a9c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8003b50 <HAL_GPIO_Init+0x238>)
 8003aa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aae:	4a29      	ldr	r2, [pc, #164]	@ (8003b54 <HAL_GPIO_Init+0x23c>)
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	089b      	lsrs	r3, r3, #2
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	220f      	movs	r2, #15
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a20      	ldr	r2, [pc, #128]	@ (8003b58 <HAL_GPIO_Init+0x240>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d052      	beq.n	8003b80 <HAL_GPIO_Init+0x268>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a1f      	ldr	r2, [pc, #124]	@ (8003b5c <HAL_GPIO_Init+0x244>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d031      	beq.n	8003b46 <HAL_GPIO_Init+0x22e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8003b60 <HAL_GPIO_Init+0x248>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d02b      	beq.n	8003b42 <HAL_GPIO_Init+0x22a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a1d      	ldr	r2, [pc, #116]	@ (8003b64 <HAL_GPIO_Init+0x24c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d025      	beq.n	8003b3e <HAL_GPIO_Init+0x226>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b68 <HAL_GPIO_Init+0x250>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01f      	beq.n	8003b3a <HAL_GPIO_Init+0x222>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a1b      	ldr	r2, [pc, #108]	@ (8003b6c <HAL_GPIO_Init+0x254>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d019      	beq.n	8003b36 <HAL_GPIO_Init+0x21e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a1a      	ldr	r2, [pc, #104]	@ (8003b70 <HAL_GPIO_Init+0x258>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <HAL_GPIO_Init+0x21a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a19      	ldr	r2, [pc, #100]	@ (8003b74 <HAL_GPIO_Init+0x25c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00d      	beq.n	8003b2e <HAL_GPIO_Init+0x216>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a18      	ldr	r2, [pc, #96]	@ (8003b78 <HAL_GPIO_Init+0x260>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d007      	beq.n	8003b2a <HAL_GPIO_Init+0x212>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a17      	ldr	r2, [pc, #92]	@ (8003b7c <HAL_GPIO_Init+0x264>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d101      	bne.n	8003b26 <HAL_GPIO_Init+0x20e>
 8003b22:	2309      	movs	r3, #9
 8003b24:	e02d      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b26:	230a      	movs	r3, #10
 8003b28:	e02b      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	e029      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b2e:	2307      	movs	r3, #7
 8003b30:	e027      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b32:	2306      	movs	r3, #6
 8003b34:	e025      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b36:	2305      	movs	r3, #5
 8003b38:	e023      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b3a:	2304      	movs	r3, #4
 8003b3c:	e021      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e01f      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b42:	2302      	movs	r3, #2
 8003b44:	e01d      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e01b      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b4a:	bf00      	nop
 8003b4c:	58000080 	.word	0x58000080
 8003b50:	58024400 	.word	0x58024400
 8003b54:	58000400 	.word	0x58000400
 8003b58:	58020000 	.word	0x58020000
 8003b5c:	58020400 	.word	0x58020400
 8003b60:	58020800 	.word	0x58020800
 8003b64:	58020c00 	.word	0x58020c00
 8003b68:	58021000 	.word	0x58021000
 8003b6c:	58021400 	.word	0x58021400
 8003b70:	58021800 	.word	0x58021800
 8003b74:	58021c00 	.word	0x58021c00
 8003b78:	58022000 	.word	0x58022000
 8003b7c:	58022400 	.word	0x58022400
 8003b80:	2300      	movs	r3, #0
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	f002 0203 	and.w	r2, r2, #3
 8003b88:	0092      	lsls	r2, r2, #2
 8003b8a:	4093      	lsls	r3, r2
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b92:	4938      	ldr	r1, [pc, #224]	@ (8003c74 <HAL_GPIO_Init+0x35c>)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	089b      	lsrs	r3, r3, #2
 8003b98:	3302      	adds	r3, #2
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003bc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003bf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	3301      	adds	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f47f ae63 	bne.w	800392c <HAL_GPIO_Init+0x14>
  }
}
 8003c66:	bf00      	nop
 8003c68:	bf00      	nop
 8003c6a:	3724      	adds	r7, #36	@ 0x24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	58000400 	.word	0x58000400

08003c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	807b      	strh	r3, [r7, #2]
 8003c84:	4613      	mov	r3, r2
 8003c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c88:	787b      	ldrb	r3, [r7, #1]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c8e:	887a      	ldrh	r2, [r7, #2]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c94:	e003      	b.n	8003c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c96:	887b      	ldrh	r3, [r7, #2]
 8003c98:	041a      	lsls	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	619a      	str	r2, [r3, #24]
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b085      	sub	sp, #20
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cbc:	887a      	ldrh	r2, [r7, #2]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	041a      	lsls	r2, r3, #16
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	43d9      	mvns	r1, r3
 8003cc8:	887b      	ldrh	r3, [r7, #2]
 8003cca:	400b      	ands	r3, r1
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	619a      	str	r2, [r3, #24]
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d008      	beq.n	8003d0a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cfc:	88fb      	ldrh	r3, [r7, #6]
 8003cfe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f00a fd9d 	bl	800e844 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e08b      	b.n	8003e3e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fc ff12 	bl	8000b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2224      	movs	r2, #36	@ 0x24
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0201 	bic.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d107      	bne.n	8003d8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d8a:	609a      	str	r2, [r3, #8]
 8003d8c:	e006      	b.n	8003d9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003d9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d108      	bne.n	8003db6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003db2:	605a      	str	r2, [r3, #4]
 8003db4:	e007      	b.n	8003dc6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6859      	ldr	r1, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e48 <HAL_I2C_Init+0x134>)
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003de4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69d9      	ldr	r1, [r3, #28]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1a      	ldr	r2, [r3, #32]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	02008000 	.word	0x02008000

08003e4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	4608      	mov	r0, r1
 8003e56:	4611      	mov	r1, r2
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	817b      	strh	r3, [r7, #10]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	813b      	strh	r3, [r7, #8]
 8003e62:	4613      	mov	r3, r2
 8003e64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	f040 80f9 	bne.w	8004066 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_I2C_Mem_Write+0x34>
 8003e7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e86:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0ed      	b.n	8004068 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_I2C_Mem_Write+0x4e>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e0e6      	b.n	8004068 <HAL_I2C_Mem_Write+0x21c>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ea2:	f7fd fdf7 	bl	8001a94 <HAL_GetTick>
 8003ea6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	2319      	movs	r3, #25
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fac3 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0d1      	b.n	8004068 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2221      	movs	r2, #33	@ 0x21
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2240      	movs	r2, #64	@ 0x40
 8003ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a3a      	ldr	r2, [r7, #32]
 8003ede:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ee4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003eec:	88f8      	ldrh	r0, [r7, #6]
 8003eee:	893a      	ldrh	r2, [r7, #8]
 8003ef0:	8979      	ldrh	r1, [r7, #10]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	9301      	str	r3, [sp, #4]
 8003ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	4603      	mov	r3, r0
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f9d3 	bl	80042a8 <I2C_RequestMemoryWrite>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0a9      	b.n	8004068 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2bff      	cmp	r3, #255	@ 0xff
 8003f1c:	d90e      	bls.n	8003f3c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	22ff      	movs	r2, #255	@ 0xff
 8003f22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	8979      	ldrh	r1, [r7, #10]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fc47 	bl	80047c8 <I2C_TransferConfig>
 8003f3a:	e00f      	b.n	8003f5c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	8979      	ldrh	r1, [r7, #10]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fc36 	bl	80047c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 fac6 	bl	80044f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e07b      	b.n	8004068 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	781a      	ldrb	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d034      	beq.n	8004014 <HAL_I2C_Mem_Write+0x1c8>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d130      	bne.n	8004014 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2180      	movs	r1, #128	@ 0x80
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 fa3f 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e04d      	b.n	8004068 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2bff      	cmp	r3, #255	@ 0xff
 8003fd4:	d90e      	bls.n	8003ff4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	22ff      	movs	r2, #255	@ 0xff
 8003fda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	8979      	ldrh	r1, [r7, #10]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 fbeb 	bl	80047c8 <I2C_TransferConfig>
 8003ff2:	e00f      	b.n	8004014 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004002:	b2da      	uxtb	r2, r3
 8004004:	8979      	ldrh	r1, [r7, #10]
 8004006:	2300      	movs	r3, #0
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 fbda 	bl	80047c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d19e      	bne.n	8003f5c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 faac 	bl	8004580 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e01a      	b.n	8004068 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2220      	movs	r2, #32
 8004038:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6859      	ldr	r1, [r3, #4]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4b0a      	ldr	r3, [pc, #40]	@ (8004070 <HAL_I2C_Mem_Write+0x224>)
 8004046:	400b      	ands	r3, r1
 8004048:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	e000      	b.n	8004068 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004066:	2302      	movs	r3, #2
  }
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	fe00e800 	.word	0xfe00e800

08004074 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af02      	add	r7, sp, #8
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	4608      	mov	r0, r1
 800407e:	4611      	mov	r1, r2
 8004080:	461a      	mov	r2, r3
 8004082:	4603      	mov	r3, r0
 8004084:	817b      	strh	r3, [r7, #10]
 8004086:	460b      	mov	r3, r1
 8004088:	813b      	strh	r3, [r7, #8]
 800408a:	4613      	mov	r3, r2
 800408c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b20      	cmp	r3, #32
 8004098:	f040 80fd 	bne.w	8004296 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <HAL_I2C_Mem_Read+0x34>
 80040a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d105      	bne.n	80040b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0f1      	b.n	8004298 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_I2C_Mem_Read+0x4e>
 80040be:	2302      	movs	r3, #2
 80040c0:	e0ea      	b.n	8004298 <HAL_I2C_Mem_Read+0x224>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040ca:	f7fd fce3 	bl	8001a94 <HAL_GetTick>
 80040ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	2319      	movs	r3, #25
 80040d6:	2201      	movs	r2, #1
 80040d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 f9af 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0d5      	b.n	8004298 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2222      	movs	r2, #34	@ 0x22
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2240      	movs	r2, #64	@ 0x40
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a3a      	ldr	r2, [r7, #32]
 8004106:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800410c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004114:	88f8      	ldrh	r0, [r7, #6]
 8004116:	893a      	ldrh	r2, [r7, #8]
 8004118:	8979      	ldrh	r1, [r7, #10]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	4603      	mov	r3, r0
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f913 	bl	8004350 <I2C_RequestMemoryRead>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0ad      	b.n	8004298 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	2bff      	cmp	r3, #255	@ 0xff
 8004144:	d90e      	bls.n	8004164 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	22ff      	movs	r2, #255	@ 0xff
 800414a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004150:	b2da      	uxtb	r2, r3
 8004152:	8979      	ldrh	r1, [r7, #10]
 8004154:	4b52      	ldr	r3, [pc, #328]	@ (80042a0 <HAL_I2C_Mem_Read+0x22c>)
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fb33 	bl	80047c8 <I2C_TransferConfig>
 8004162:	e00f      	b.n	8004184 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004172:	b2da      	uxtb	r2, r3
 8004174:	8979      	ldrh	r1, [r7, #10]
 8004176:	4b4a      	ldr	r3, [pc, #296]	@ (80042a0 <HAL_I2C_Mem_Read+0x22c>)
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 fb22 	bl	80047c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418a:	2200      	movs	r2, #0
 800418c:	2104      	movs	r1, #4
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f956 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e07c      	b.n	8004298 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d034      	beq.n	8004244 <HAL_I2C_Mem_Read+0x1d0>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d130      	bne.n	8004244 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e8:	2200      	movs	r2, #0
 80041ea:	2180      	movs	r1, #128	@ 0x80
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f927 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e04d      	b.n	8004298 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	2bff      	cmp	r3, #255	@ 0xff
 8004204:	d90e      	bls.n	8004224 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	22ff      	movs	r2, #255	@ 0xff
 800420a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004210:	b2da      	uxtb	r2, r3
 8004212:	8979      	ldrh	r1, [r7, #10]
 8004214:	2300      	movs	r3, #0
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 fad3 	bl	80047c8 <I2C_TransferConfig>
 8004222:	e00f      	b.n	8004244 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004232:	b2da      	uxtb	r2, r3
 8004234:	8979      	ldrh	r1, [r7, #10]
 8004236:	2300      	movs	r3, #0
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fac2 	bl	80047c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d19a      	bne.n	8004184 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f994 	bl	8004580 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e01a      	b.n	8004298 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2220      	movs	r2, #32
 8004268:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6859      	ldr	r1, [r3, #4]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	4b0b      	ldr	r3, [pc, #44]	@ (80042a4 <HAL_I2C_Mem_Read+0x230>)
 8004276:	400b      	ands	r3, r1
 8004278:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e000      	b.n	8004298 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004296:	2302      	movs	r3, #2
  }
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	80002400 	.word	0x80002400
 80042a4:	fe00e800 	.word	0xfe00e800

080042a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	4608      	mov	r0, r1
 80042b2:	4611      	mov	r1, r2
 80042b4:	461a      	mov	r2, r3
 80042b6:	4603      	mov	r3, r0
 80042b8:	817b      	strh	r3, [r7, #10]
 80042ba:	460b      	mov	r3, r1
 80042bc:	813b      	strh	r3, [r7, #8]
 80042be:	4613      	mov	r3, r2
 80042c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	8979      	ldrh	r1, [r7, #10]
 80042c8:	4b20      	ldr	r3, [pc, #128]	@ (800434c <I2C_RequestMemoryWrite+0xa4>)
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 fa79 	bl	80047c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	69b9      	ldr	r1, [r7, #24]
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f909 	bl	80044f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e02c      	b.n	8004344 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d105      	bne.n	80042fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042f0:	893b      	ldrh	r3, [r7, #8]
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80042fa:	e015      	b.n	8004328 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042fc:	893b      	ldrh	r3, [r7, #8]
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	b29b      	uxth	r3, r3
 8004302:	b2da      	uxtb	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	69b9      	ldr	r1, [r7, #24]
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 f8ef 	bl	80044f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e012      	b.n	8004344 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800431e:	893b      	ldrh	r3, [r7, #8]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2200      	movs	r2, #0
 8004330:	2180      	movs	r1, #128	@ 0x80
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f884 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	80002000 	.word	0x80002000

08004350 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	4608      	mov	r0, r1
 800435a:	4611      	mov	r1, r2
 800435c:	461a      	mov	r2, r3
 800435e:	4603      	mov	r3, r0
 8004360:	817b      	strh	r3, [r7, #10]
 8004362:	460b      	mov	r3, r1
 8004364:	813b      	strh	r3, [r7, #8]
 8004366:	4613      	mov	r3, r2
 8004368:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	b2da      	uxtb	r2, r3
 800436e:	8979      	ldrh	r1, [r7, #10]
 8004370:	4b20      	ldr	r3, [pc, #128]	@ (80043f4 <I2C_RequestMemoryRead+0xa4>)
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	2300      	movs	r3, #0
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 fa26 	bl	80047c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800437c:	69fa      	ldr	r2, [r7, #28]
 800437e:	69b9      	ldr	r1, [r7, #24]
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f8b6 	bl	80044f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e02c      	b.n	80043ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d105      	bne.n	80043a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004396:	893b      	ldrh	r3, [r7, #8]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	629a      	str	r2, [r3, #40]	@ 0x28
 80043a0:	e015      	b.n	80043ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043a2:	893b      	ldrh	r3, [r7, #8]
 80043a4:	0a1b      	lsrs	r3, r3, #8
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	69b9      	ldr	r1, [r7, #24]
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f89c 	bl	80044f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e012      	b.n	80043ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043c4:	893b      	ldrh	r3, [r7, #8]
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2200      	movs	r2, #0
 80043d6:	2140      	movs	r1, #64	@ 0x40
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f831 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	80002000 	.word	0x80002000

080043f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b02      	cmp	r3, #2
 800440c:	d103      	bne.n	8004416 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2200      	movs	r2, #0
 8004414:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b01      	cmp	r3, #1
 8004422:	d007      	beq.n	8004434 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	619a      	str	r2, [r3, #24]
  }
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	4613      	mov	r3, r2
 800444e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004450:	e03b      	b.n	80044ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	6839      	ldr	r1, [r7, #0]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f8d6 	bl	8004608 <I2C_IsErrorOccurred>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e041      	b.n	80044ea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446c:	d02d      	beq.n	80044ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446e:	f7fd fb11 	bl	8001a94 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d302      	bcc.n	8004484 <I2C_WaitOnFlagUntilTimeout+0x44>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d122      	bne.n	80044ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699a      	ldr	r2, [r3, #24]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4013      	ands	r3, r2
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	429a      	cmp	r2, r3
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	461a      	mov	r2, r3
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d113      	bne.n	80044ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a6:	f043 0220 	orr.w	r2, r3, #32
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e00f      	b.n	80044ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699a      	ldr	r2, [r3, #24]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4013      	ands	r3, r2
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	bf0c      	ite	eq
 80044da:	2301      	moveq	r3, #1
 80044dc:	2300      	movne	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	461a      	mov	r2, r3
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d0b4      	beq.n	8004452 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044fe:	e033      	b.n	8004568 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 f87f 	bl	8004608 <I2C_IsErrorOccurred>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e031      	b.n	8004578 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451a:	d025      	beq.n	8004568 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451c:	f7fd faba 	bl	8001a94 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	429a      	cmp	r2, r3
 800452a:	d302      	bcc.n	8004532 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d11a      	bne.n	8004568 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b02      	cmp	r3, #2
 800453e:	d013      	beq.n	8004568 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004544:	f043 0220 	orr.w	r2, r3, #32
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e007      	b.n	8004578 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b02      	cmp	r3, #2
 8004574:	d1c4      	bne.n	8004500 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800458c:	e02f      	b.n	80045ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f838 	bl	8004608 <I2C_IsErrorOccurred>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e02d      	b.n	80045fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a2:	f7fd fa77 	bl	8001a94 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d302      	bcc.n	80045b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d11a      	bne.n	80045ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b20      	cmp	r3, #32
 80045c4:	d013      	beq.n	80045ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ca:	f043 0220 	orr.w	r2, r3, #32
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e007      	b.n	80045fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	d1c8      	bne.n	800458e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	@ 0x28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004622:	2300      	movs	r3, #0
 8004624:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	2b00      	cmp	r3, #0
 8004632:	d068      	beq.n	8004706 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2210      	movs	r2, #16
 800463a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800463c:	e049      	b.n	80046d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d045      	beq.n	80046d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004646:	f7fd fa25 	bl	8001a94 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <I2C_IsErrorOccurred+0x54>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d13a      	bne.n	80046d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004666:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800466e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800467a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800467e:	d121      	bne.n	80046c4 <I2C_IsErrorOccurred+0xbc>
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004686:	d01d      	beq.n	80046c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	2b20      	cmp	r3, #32
 800468c:	d01a      	beq.n	80046c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800469c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800469e:	f7fd f9f9 	bl	8001a94 <HAL_GetTick>
 80046a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046a4:	e00e      	b.n	80046c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046a6:	f7fd f9f5 	bl	8001a94 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b19      	cmp	r3, #25
 80046b2:	d907      	bls.n	80046c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	f043 0320 	orr.w	r3, r3, #32
 80046ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80046c2:	e006      	b.n	80046d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d1e9      	bne.n	80046a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d003      	beq.n	80046e8 <I2C_IsErrorOccurred+0xe0>
 80046e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0aa      	beq.n	800463e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2220      	movs	r2, #32
 80046f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	f043 0304 	orr.w	r3, r3, #4
 80046fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00b      	beq.n	8004730 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004728:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00b      	beq.n	8004752 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	f043 0308 	orr.w	r3, r3, #8
 8004740:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800474a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00b      	beq.n	8004774 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	f043 0302 	orr.w	r3, r3, #2
 8004762:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800476c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01c      	beq.n	80047b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7ff fe3b 	bl	80043f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6859      	ldr	r1, [r3, #4]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4b0d      	ldr	r3, [pc, #52]	@ (80047c4 <I2C_IsErrorOccurred+0x1bc>)
 800478e:	400b      	ands	r3, r1
 8004790:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	431a      	orrs	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80047b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3728      	adds	r7, #40	@ 0x28
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	fe00e800 	.word	0xfe00e800

080047c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	607b      	str	r3, [r7, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	817b      	strh	r3, [r7, #10]
 80047d6:	4613      	mov	r3, r2
 80047d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047da:	897b      	ldrh	r3, [r7, #10]
 80047dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047e0:	7a7b      	ldrb	r3, [r7, #9]
 80047e2:	041b      	lsls	r3, r3, #16
 80047e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	0d5b      	lsrs	r3, r3, #21
 8004802:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004806:	4b08      	ldr	r3, [pc, #32]	@ (8004828 <I2C_TransferConfig+0x60>)
 8004808:	430b      	orrs	r3, r1
 800480a:	43db      	mvns	r3, r3
 800480c:	ea02 0103 	and.w	r1, r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	03ff63ff 	.word	0x03ff63ff

0800482c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b20      	cmp	r3, #32
 8004840:	d138      	bne.n	80048b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800484c:	2302      	movs	r3, #2
 800484e:	e032      	b.n	80048b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2224      	movs	r2, #36	@ 0x24
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800487e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6819      	ldr	r1, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	e000      	b.n	80048b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048b4:	2302      	movs	r3, #2
  }
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	d139      	bne.n	800494c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e033      	b.n	800494e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2224      	movs	r2, #36	@ 0x24
 80048f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0201 	bic.w	r2, r2, #1
 8004904:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004914:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	e000      	b.n	800494e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800494c:	2302      	movs	r3, #2
  }
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004964:	4b19      	ldr	r3, [pc, #100]	@ (80049cc <HAL_PWREx_ConfigSupply+0x70>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b04      	cmp	r3, #4
 800496e:	d00a      	beq.n	8004986 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004970:	4b16      	ldr	r3, [pc, #88]	@ (80049cc <HAL_PWREx_ConfigSupply+0x70>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d001      	beq.n	8004982 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e01f      	b.n	80049c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e01d      	b.n	80049c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004986:	4b11      	ldr	r3, [pc, #68]	@ (80049cc <HAL_PWREx_ConfigSupply+0x70>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f023 0207 	bic.w	r2, r3, #7
 800498e:	490f      	ldr	r1, [pc, #60]	@ (80049cc <HAL_PWREx_ConfigSupply+0x70>)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4313      	orrs	r3, r2
 8004994:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004996:	f7fd f87d 	bl	8001a94 <HAL_GetTick>
 800499a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800499c:	e009      	b.n	80049b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800499e:	f7fd f879 	bl	8001a94 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049ac:	d901      	bls.n	80049b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e007      	b.n	80049c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049b2:	4b06      	ldr	r3, [pc, #24]	@ (80049cc <HAL_PWREx_ConfigSupply+0x70>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049be:	d1ee      	bne.n	800499e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	58024800 	.word	0x58024800

080049d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08c      	sub	sp, #48	@ 0x30
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	f000 bc48 	b.w	8005274 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8088 	beq.w	8004b02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049f2:	4b99      	ldr	r3, [pc, #612]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049fc:	4b96      	ldr	r3, [pc, #600]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 80049fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a00:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d007      	beq.n	8004a18 <HAL_RCC_OscConfig+0x48>
 8004a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a0a:	2b18      	cmp	r3, #24
 8004a0c:	d111      	bne.n	8004a32 <HAL_RCC_OscConfig+0x62>
 8004a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a10:	f003 0303 	and.w	r3, r3, #3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d10c      	bne.n	8004a32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a18:	4b8f      	ldr	r3, [pc, #572]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d06d      	beq.n	8004b00 <HAL_RCC_OscConfig+0x130>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d169      	bne.n	8004b00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f000 bc21 	b.w	8005274 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a3a:	d106      	bne.n	8004a4a <HAL_RCC_OscConfig+0x7a>
 8004a3c:	4b86      	ldr	r3, [pc, #536]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a85      	ldr	r2, [pc, #532]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a46:	6013      	str	r3, [r2, #0]
 8004a48:	e02e      	b.n	8004aa8 <HAL_RCC_OscConfig+0xd8>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCC_OscConfig+0x9c>
 8004a52:	4b81      	ldr	r3, [pc, #516]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a80      	ldr	r2, [pc, #512]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	4b7e      	ldr	r3, [pc, #504]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a7d      	ldr	r2, [pc, #500]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e01d      	b.n	8004aa8 <HAL_RCC_OscConfig+0xd8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCC_OscConfig+0xc0>
 8004a76:	4b78      	ldr	r3, [pc, #480]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a77      	ldr	r2, [pc, #476]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	4b75      	ldr	r3, [pc, #468]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a74      	ldr	r2, [pc, #464]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e00b      	b.n	8004aa8 <HAL_RCC_OscConfig+0xd8>
 8004a90:	4b71      	ldr	r3, [pc, #452]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a70      	ldr	r2, [pc, #448]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	4b6e      	ldr	r3, [pc, #440]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a6d      	ldr	r2, [pc, #436]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004aa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d013      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab0:	f7fc fff0 	bl	8001a94 <HAL_GetTick>
 8004ab4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab8:	f7fc ffec 	bl	8001a94 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	@ 0x64
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e3d4      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004aca:	4b63      	ldr	r3, [pc, #396]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0f0      	beq.n	8004ab8 <HAL_RCC_OscConfig+0xe8>
 8004ad6:	e014      	b.n	8004b02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad8:	f7fc ffdc 	bl	8001a94 <HAL_GetTick>
 8004adc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae0:	f7fc ffd8 	bl	8001a94 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	@ 0x64
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e3c0      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004af2:	4b59      	ldr	r3, [pc, #356]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x110>
 8004afe:	e000      	b.n	8004b02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 80ca 	beq.w	8004ca4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b10:	4b51      	ldr	r3, [pc, #324]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b18:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b1a:	4b4f      	ldr	r3, [pc, #316]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_RCC_OscConfig+0x166>
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	2b18      	cmp	r3, #24
 8004b2a:	d156      	bne.n	8004bda <HAL_RCC_OscConfig+0x20a>
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d151      	bne.n	8004bda <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b36:	4b48      	ldr	r3, [pc, #288]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <HAL_RCC_OscConfig+0x17e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e392      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b4e:	4b42      	ldr	r3, [pc, #264]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f023 0219 	bic.w	r2, r3, #25
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	493f      	ldr	r1, [pc, #252]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fc ff98 	bl	8001a94 <HAL_GetTick>
 8004b64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b68:	f7fc ff94 	bl	8001a94 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e37c      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b7a:	4b37      	ldr	r3, [pc, #220]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0f0      	beq.n	8004b68 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b86:	f7fc ffb5 	bl	8001af4 <HAL_GetREVID>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d817      	bhi.n	8004bc4 <HAL_RCC_OscConfig+0x1f4>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	2b40      	cmp	r3, #64	@ 0x40
 8004b9a:	d108      	bne.n	8004bae <HAL_RCC_OscConfig+0x1de>
 8004b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004ba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004baa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bac:	e07a      	b.n	8004ca4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bae:	4b2a      	ldr	r3, [pc, #168]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	031b      	lsls	r3, r3, #12
 8004bbc:	4926      	ldr	r1, [pc, #152]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc2:	e06f      	b.n	8004ca4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc4:	4b24      	ldr	r3, [pc, #144]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	061b      	lsls	r3, r3, #24
 8004bd2:	4921      	ldr	r1, [pc, #132]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bd8:	e064      	b.n	8004ca4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d047      	beq.n	8004c72 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004be2:	4b1d      	ldr	r3, [pc, #116]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f023 0219 	bic.w	r2, r3, #25
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	491a      	ldr	r1, [pc, #104]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf4:	f7fc ff4e 	bl	8001a94 <HAL_GetTick>
 8004bf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bfc:	f7fc ff4a 	bl	8001a94 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e332      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c0e:	4b12      	ldr	r3, [pc, #72]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0304 	and.w	r3, r3, #4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0f0      	beq.n	8004bfc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1a:	f7fc ff6b 	bl	8001af4 <HAL_GetREVID>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d819      	bhi.n	8004c5c <HAL_RCC_OscConfig+0x28c>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	2b40      	cmp	r3, #64	@ 0x40
 8004c2e:	d108      	bne.n	8004c42 <HAL_RCC_OscConfig+0x272>
 8004c30:	4b09      	ldr	r3, [pc, #36]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c38:	4a07      	ldr	r2, [pc, #28]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c3e:	6053      	str	r3, [r2, #4]
 8004c40:	e030      	b.n	8004ca4 <HAL_RCC_OscConfig+0x2d4>
 8004c42:	4b05      	ldr	r3, [pc, #20]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	031b      	lsls	r3, r3, #12
 8004c50:	4901      	ldr	r1, [pc, #4]	@ (8004c58 <HAL_RCC_OscConfig+0x288>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	604b      	str	r3, [r1, #4]
 8004c56:	e025      	b.n	8004ca4 <HAL_RCC_OscConfig+0x2d4>
 8004c58:	58024400 	.word	0x58024400
 8004c5c:	4b9a      	ldr	r3, [pc, #616]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	061b      	lsls	r3, r3, #24
 8004c6a:	4997      	ldr	r1, [pc, #604]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	604b      	str	r3, [r1, #4]
 8004c70:	e018      	b.n	8004ca4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c72:	4b95      	ldr	r3, [pc, #596]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a94      	ldr	r2, [pc, #592]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004c78:	f023 0301 	bic.w	r3, r3, #1
 8004c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7e:	f7fc ff09 	bl	8001a94 <HAL_GetTick>
 8004c82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c86:	f7fc ff05 	bl	8001a94 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e2ed      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c98:	4b8b      	ldr	r3, [pc, #556]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1f0      	bne.n	8004c86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80a9 	beq.w	8004e04 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb2:	4b85      	ldr	r3, [pc, #532]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cbc:	4b82      	ldr	r3, [pc, #520]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d007      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x308>
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	2b18      	cmp	r3, #24
 8004ccc:	d13a      	bne.n	8004d44 <HAL_RCC_OscConfig+0x374>
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d135      	bne.n	8004d44 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cd8:	4b7b      	ldr	r3, [pc, #492]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x320>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	2b80      	cmp	r3, #128	@ 0x80
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e2c1      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cf0:	f7fc ff00 	bl	8001af4 <HAL_GetREVID>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d817      	bhi.n	8004d2e <HAL_RCC_OscConfig+0x35e>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	d108      	bne.n	8004d18 <HAL_RCC_OscConfig+0x348>
 8004d06:	4b70      	ldr	r3, [pc, #448]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d0e:	4a6e      	ldr	r2, [pc, #440]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d14:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d16:	e075      	b.n	8004e04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d18:	4b6b      	ldr	r3, [pc, #428]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	069b      	lsls	r3, r3, #26
 8004d26:	4968      	ldr	r1, [pc, #416]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d2c:	e06a      	b.n	8004e04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d2e:	4b66      	ldr	r3, [pc, #408]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	061b      	lsls	r3, r3, #24
 8004d3c:	4962      	ldr	r1, [pc, #392]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d42:	e05f      	b.n	8004e04 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d042      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d4c:	4b5e      	ldr	r3, [pc, #376]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a5d      	ldr	r2, [pc, #372]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fc fe9c 	bl	8001a94 <HAL_GetTick>
 8004d5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d60:	f7fc fe98 	bl	8001a94 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e280      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d72:	4b55      	ldr	r3, [pc, #340]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0f0      	beq.n	8004d60 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d7e:	f7fc feb9 	bl	8001af4 <HAL_GetREVID>
 8004d82:	4603      	mov	r3, r0
 8004d84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d817      	bhi.n	8004dbc <HAL_RCC_OscConfig+0x3ec>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d108      	bne.n	8004da6 <HAL_RCC_OscConfig+0x3d6>
 8004d94:	4b4c      	ldr	r3, [pc, #304]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d9c:	4a4a      	ldr	r2, [pc, #296]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004d9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004da2:	6053      	str	r3, [r2, #4]
 8004da4:	e02e      	b.n	8004e04 <HAL_RCC_OscConfig+0x434>
 8004da6:	4b48      	ldr	r3, [pc, #288]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	069b      	lsls	r3, r3, #26
 8004db4:	4944      	ldr	r1, [pc, #272]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	604b      	str	r3, [r1, #4]
 8004dba:	e023      	b.n	8004e04 <HAL_RCC_OscConfig+0x434>
 8004dbc:	4b42      	ldr	r3, [pc, #264]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	061b      	lsls	r3, r3, #24
 8004dca:	493f      	ldr	r1, [pc, #252]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60cb      	str	r3, [r1, #12]
 8004dd0:	e018      	b.n	8004e04 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a3c      	ldr	r2, [pc, #240]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004dd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dde:	f7fc fe59 	bl	8001a94 <HAL_GetTick>
 8004de2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004de6:	f7fc fe55 	bl	8001a94 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e23d      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004df8:	4b33      	ldr	r3, [pc, #204]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1f0      	bne.n	8004de6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d036      	beq.n	8004e7e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d019      	beq.n	8004e4c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e18:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e24:	f7fc fe36 	bl	8001a94 <HAL_GetTick>
 8004e28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e2c:	f7fc fe32 	bl	8001a94 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e21a      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e3e:	4b22      	ldr	r3, [pc, #136]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0x45c>
 8004e4a:	e018      	b.n	8004e7e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e50:	4a1d      	ldr	r2, [pc, #116]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004e52:	f023 0301 	bic.w	r3, r3, #1
 8004e56:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e58:	f7fc fe1c 	bl	8001a94 <HAL_GetTick>
 8004e5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e60:	f7fc fe18 	bl	8001a94 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e200      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e72:	4b15      	ldr	r3, [pc, #84]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f0      	bne.n	8004e60 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d039      	beq.n	8004efe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d01c      	beq.n	8004ecc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e92:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a0c      	ldr	r2, [pc, #48]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004e98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e9e:	f7fc fdf9 	bl	8001a94 <HAL_GetTick>
 8004ea2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ea6:	f7fc fdf5 	bl	8001a94 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e1dd      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004eb8:	4b03      	ldr	r3, [pc, #12]	@ (8004ec8 <HAL_RCC_OscConfig+0x4f8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0f0      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x4d6>
 8004ec4:	e01b      	b.n	8004efe <HAL_RCC_OscConfig+0x52e>
 8004ec6:	bf00      	nop
 8004ec8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ecc:	4b9b      	ldr	r3, [pc, #620]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a9a      	ldr	r2, [pc, #616]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004ed2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ed6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ed8:	f7fc fddc 	bl	8001a94 <HAL_GetTick>
 8004edc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ee0:	f7fc fdd8 	bl	8001a94 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e1c0      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ef2:	4b92      	ldr	r3, [pc, #584]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 8081 	beq.w	800500e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f0c:	4b8c      	ldr	r3, [pc, #560]	@ (8005140 <HAL_RCC_OscConfig+0x770>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a8b      	ldr	r2, [pc, #556]	@ (8005140 <HAL_RCC_OscConfig+0x770>)
 8004f12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f18:	f7fc fdbc 	bl	8001a94 <HAL_GetTick>
 8004f1c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f20:	f7fc fdb8 	bl	8001a94 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b64      	cmp	r3, #100	@ 0x64
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e1a0      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f32:	4b83      	ldr	r3, [pc, #524]	@ (8005140 <HAL_RCC_OscConfig+0x770>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d106      	bne.n	8004f54 <HAL_RCC_OscConfig+0x584>
 8004f46:	4b7d      	ldr	r3, [pc, #500]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4a:	4a7c      	ldr	r2, [pc, #496]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f4c:	f043 0301 	orr.w	r3, r3, #1
 8004f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f52:	e02d      	b.n	8004fb0 <HAL_RCC_OscConfig+0x5e0>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10c      	bne.n	8004f76 <HAL_RCC_OscConfig+0x5a6>
 8004f5c:	4b77      	ldr	r3, [pc, #476]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f60:	4a76      	ldr	r2, [pc, #472]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f62:	f023 0301 	bic.w	r3, r3, #1
 8004f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f68:	4b74      	ldr	r3, [pc, #464]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6c:	4a73      	ldr	r2, [pc, #460]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f6e:	f023 0304 	bic.w	r3, r3, #4
 8004f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f74:	e01c      	b.n	8004fb0 <HAL_RCC_OscConfig+0x5e0>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b05      	cmp	r3, #5
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x5c8>
 8004f7e:	4b6f      	ldr	r3, [pc, #444]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f82:	4a6e      	ldr	r2, [pc, #440]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f84:	f043 0304 	orr.w	r3, r3, #4
 8004f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f8a:	4b6c      	ldr	r3, [pc, #432]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8e:	4a6b      	ldr	r2, [pc, #428]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f96:	e00b      	b.n	8004fb0 <HAL_RCC_OscConfig+0x5e0>
 8004f98:	4b68      	ldr	r3, [pc, #416]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9c:	4a67      	ldr	r2, [pc, #412]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa4:	4b65      	ldr	r3, [pc, #404]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa8:	4a64      	ldr	r2, [pc, #400]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004faa:	f023 0304 	bic.w	r3, r3, #4
 8004fae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d015      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fc fd6c 	bl	8001a94 <HAL_GetTick>
 8004fbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fc fd68 	bl	8001a94 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e14e      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fd6:	4b59      	ldr	r3, [pc, #356]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0ee      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x5f0>
 8004fe2:	e014      	b.n	800500e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe4:	f7fc fd56 	bl	8001a94 <HAL_GetTick>
 8004fe8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fec:	f7fc fd52 	bl	8001a94 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e138      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005002:	4b4e      	ldr	r3, [pc, #312]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1ee      	bne.n	8004fec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 812d 	beq.w	8005272 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005018:	4b48      	ldr	r3, [pc, #288]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005020:	2b18      	cmp	r3, #24
 8005022:	f000 80bd 	beq.w	80051a0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502a:	2b02      	cmp	r3, #2
 800502c:	f040 809e 	bne.w	800516c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005030:	4b42      	ldr	r3, [pc, #264]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a41      	ldr	r2, [pc, #260]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005036:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800503a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503c:	f7fc fd2a 	bl	8001a94 <HAL_GetTick>
 8005040:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005044:	f7fc fd26 	bl	8001a94 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e10e      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005056:	4b39      	ldr	r3, [pc, #228]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f0      	bne.n	8005044 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005062:	4b36      	ldr	r3, [pc, #216]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005064:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005066:	4b37      	ldr	r3, [pc, #220]	@ (8005144 <HAL_RCC_OscConfig+0x774>)
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005072:	0112      	lsls	r2, r2, #4
 8005074:	430a      	orrs	r2, r1
 8005076:	4931      	ldr	r1, [pc, #196]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005078:	4313      	orrs	r3, r2
 800507a:	628b      	str	r3, [r1, #40]	@ 0x28
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005080:	3b01      	subs	r3, #1
 8005082:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800508a:	3b01      	subs	r3, #1
 800508c:	025b      	lsls	r3, r3, #9
 800508e:	b29b      	uxth	r3, r3
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005096:	3b01      	subs	r3, #1
 8005098:	041b      	lsls	r3, r3, #16
 800509a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a4:	3b01      	subs	r3, #1
 80050a6:	061b      	lsls	r3, r3, #24
 80050a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050ac:	4923      	ldr	r1, [pc, #140]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80050b2:	4b22      	ldr	r3, [pc, #136]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b6:	4a21      	ldr	r2, [pc, #132]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050b8:	f023 0301 	bic.w	r3, r3, #1
 80050bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050be:	4b1f      	ldr	r3, [pc, #124]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050c2:	4b21      	ldr	r3, [pc, #132]	@ (8005148 <HAL_RCC_OscConfig+0x778>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80050ca:	00d2      	lsls	r2, r2, #3
 80050cc:	491b      	ldr	r1, [pc, #108]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80050d2:	4b1a      	ldr	r3, [pc, #104]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d6:	f023 020c 	bic.w	r2, r3, #12
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050de:	4917      	ldr	r1, [pc, #92]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050e4:	4b15      	ldr	r3, [pc, #84]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e8:	f023 0202 	bic.w	r2, r3, #2
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f0:	4912      	ldr	r1, [pc, #72]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050f6:	4b11      	ldr	r3, [pc, #68]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fa:	4a10      	ldr	r2, [pc, #64]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 80050fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005100:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005102:	4b0e      	ldr	r3, [pc, #56]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005106:	4a0d      	ldr	r2, [pc, #52]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800510c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800510e:	4b0b      	ldr	r3, [pc, #44]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005112:	4a0a      	ldr	r2, [pc, #40]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005114:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005118:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800511a:	4b08      	ldr	r3, [pc, #32]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 800511c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511e:	4a07      	ldr	r2, [pc, #28]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005120:	f043 0301 	orr.w	r3, r3, #1
 8005124:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005126:	4b05      	ldr	r3, [pc, #20]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a04      	ldr	r2, [pc, #16]	@ (800513c <HAL_RCC_OscConfig+0x76c>)
 800512c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005132:	f7fc fcaf 	bl	8001a94 <HAL_GetTick>
 8005136:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005138:	e011      	b.n	800515e <HAL_RCC_OscConfig+0x78e>
 800513a:	bf00      	nop
 800513c:	58024400 	.word	0x58024400
 8005140:	58024800 	.word	0x58024800
 8005144:	fffffc0c 	.word	0xfffffc0c
 8005148:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800514c:	f7fc fca2 	bl	8001a94 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e08a      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800515e:	4b47      	ldr	r3, [pc, #284]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f0      	beq.n	800514c <HAL_RCC_OscConfig+0x77c>
 800516a:	e082      	b.n	8005272 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800516c:	4b43      	ldr	r3, [pc, #268]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a42      	ldr	r2, [pc, #264]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 8005172:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005178:	f7fc fc8c 	bl	8001a94 <HAL_GetTick>
 800517c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005180:	f7fc fc88 	bl	8001a94 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e070      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005192:	4b3a      	ldr	r3, [pc, #232]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f0      	bne.n	8005180 <HAL_RCC_OscConfig+0x7b0>
 800519e:	e068      	b.n	8005272 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80051a0:	4b36      	ldr	r3, [pc, #216]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 80051a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80051a6:	4b35      	ldr	r3, [pc, #212]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d031      	beq.n	8005218 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f003 0203 	and.w	r2, r3, #3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051be:	429a      	cmp	r2, r3
 80051c0:	d12a      	bne.n	8005218 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d122      	bne.n	8005218 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051de:	429a      	cmp	r2, r3
 80051e0:	d11a      	bne.n	8005218 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	0a5b      	lsrs	r3, r3, #9
 80051e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d111      	bne.n	8005218 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	0c1b      	lsrs	r3, r3, #16
 80051f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005200:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005202:	429a      	cmp	r2, r3
 8005204:	d108      	bne.n	8005218 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	0e1b      	lsrs	r3, r3, #24
 800520a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005212:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005214:	429a      	cmp	r2, r3
 8005216:	d001      	beq.n	800521c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e02b      	b.n	8005274 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800521c:	4b17      	ldr	r3, [pc, #92]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 800521e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005220:	08db      	lsrs	r3, r3, #3
 8005222:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005226:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	429a      	cmp	r2, r3
 8005230:	d01f      	beq.n	8005272 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005232:	4b12      	ldr	r3, [pc, #72]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 8005234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005236:	4a11      	ldr	r2, [pc, #68]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 8005238:	f023 0301 	bic.w	r3, r3, #1
 800523c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800523e:	f7fc fc29 	bl	8001a94 <HAL_GetTick>
 8005242:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005244:	bf00      	nop
 8005246:	f7fc fc25 	bl	8001a94 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524e:	4293      	cmp	r3, r2
 8005250:	d0f9      	beq.n	8005246 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005252:	4b0a      	ldr	r3, [pc, #40]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 8005254:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005256:	4b0a      	ldr	r3, [pc, #40]	@ (8005280 <HAL_RCC_OscConfig+0x8b0>)
 8005258:	4013      	ands	r3, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800525e:	00d2      	lsls	r2, r2, #3
 8005260:	4906      	ldr	r1, [pc, #24]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 8005262:	4313      	orrs	r3, r2
 8005264:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005266:	4b05      	ldr	r3, [pc, #20]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 8005268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526a:	4a04      	ldr	r2, [pc, #16]	@ (800527c <HAL_RCC_OscConfig+0x8ac>)
 800526c:	f043 0301 	orr.w	r3, r3, #1
 8005270:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3730      	adds	r7, #48	@ 0x30
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	58024400 	.word	0x58024400
 8005280:	ffff0007 	.word	0xffff0007

08005284 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e19c      	b.n	80055d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005298:	4b8a      	ldr	r3, [pc, #552]	@ (80054c4 <HAL_RCC_ClockConfig+0x240>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 030f 	and.w	r3, r3, #15
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d910      	bls.n	80052c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a6:	4b87      	ldr	r3, [pc, #540]	@ (80054c4 <HAL_RCC_ClockConfig+0x240>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f023 020f 	bic.w	r2, r3, #15
 80052ae:	4985      	ldr	r1, [pc, #532]	@ (80054c4 <HAL_RCC_ClockConfig+0x240>)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b6:	4b83      	ldr	r3, [pc, #524]	@ (80054c4 <HAL_RCC_ClockConfig+0x240>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 030f 	and.w	r3, r3, #15
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d001      	beq.n	80052c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e184      	b.n	80055d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d010      	beq.n	80052f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	4b7b      	ldr	r3, [pc, #492]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d908      	bls.n	80052f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052e4:	4b78      	ldr	r3, [pc, #480]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	4975      	ldr	r1, [pc, #468]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d010      	beq.n	8005324 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695a      	ldr	r2, [r3, #20]
 8005306:	4b70      	ldr	r3, [pc, #448]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800530e:	429a      	cmp	r2, r3
 8005310:	d908      	bls.n	8005324 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005312:	4b6d      	ldr	r3, [pc, #436]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	496a      	ldr	r1, [pc, #424]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005320:	4313      	orrs	r3, r2
 8005322:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	2b00      	cmp	r3, #0
 800532e:	d010      	beq.n	8005352 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699a      	ldr	r2, [r3, #24]
 8005334:	4b64      	ldr	r3, [pc, #400]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800533c:	429a      	cmp	r2, r3
 800533e:	d908      	bls.n	8005352 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005340:	4b61      	ldr	r3, [pc, #388]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	495e      	ldr	r1, [pc, #376]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 800534e:	4313      	orrs	r3, r2
 8005350:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b00      	cmp	r3, #0
 800535c:	d010      	beq.n	8005380 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69da      	ldr	r2, [r3, #28]
 8005362:	4b59      	ldr	r3, [pc, #356]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800536a:	429a      	cmp	r2, r3
 800536c:	d908      	bls.n	8005380 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800536e:	4b56      	ldr	r3, [pc, #344]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	4953      	ldr	r1, [pc, #332]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 800537c:	4313      	orrs	r3, r2
 800537e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d010      	beq.n	80053ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	4b4d      	ldr	r3, [pc, #308]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	429a      	cmp	r2, r3
 800539a:	d908      	bls.n	80053ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800539c:	4b4a      	ldr	r3, [pc, #296]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f023 020f 	bic.w	r2, r3, #15
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	4947      	ldr	r1, [pc, #284]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d055      	beq.n	8005466 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80053ba:	4b43      	ldr	r3, [pc, #268]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	4940      	ldr	r1, [pc, #256]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d107      	bne.n	80053e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053d4:	4b3c      	ldr	r3, [pc, #240]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d121      	bne.n	8005424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e0f6      	b.n	80055d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	d107      	bne.n	80053fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053ec:	4b36      	ldr	r3, [pc, #216]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d115      	bne.n	8005424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0ea      	b.n	80055d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d107      	bne.n	8005414 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005404:	4b30      	ldr	r3, [pc, #192]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800540c:	2b00      	cmp	r3, #0
 800540e:	d109      	bne.n	8005424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e0de      	b.n	80055d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005414:	4b2c      	ldr	r3, [pc, #176]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e0d6      	b.n	80055d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005424:	4b28      	ldr	r3, [pc, #160]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f023 0207 	bic.w	r2, r3, #7
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	4925      	ldr	r1, [pc, #148]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005432:	4313      	orrs	r3, r2
 8005434:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005436:	f7fc fb2d 	bl	8001a94 <HAL_GetTick>
 800543a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543c:	e00a      	b.n	8005454 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800543e:	f7fc fb29 	bl	8001a94 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800544c:	4293      	cmp	r3, r2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e0be      	b.n	80055d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005454:	4b1c      	ldr	r3, [pc, #112]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	429a      	cmp	r2, r3
 8005464:	d1eb      	bne.n	800543e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d010      	beq.n	8005494 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	4b14      	ldr	r3, [pc, #80]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	429a      	cmp	r2, r3
 8005480:	d208      	bcs.n	8005494 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005482:	4b11      	ldr	r3, [pc, #68]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	f023 020f 	bic.w	r2, r3, #15
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	490e      	ldr	r1, [pc, #56]	@ (80054c8 <HAL_RCC_ClockConfig+0x244>)
 8005490:	4313      	orrs	r3, r2
 8005492:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005494:	4b0b      	ldr	r3, [pc, #44]	@ (80054c4 <HAL_RCC_ClockConfig+0x240>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d214      	bcs.n	80054cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a2:	4b08      	ldr	r3, [pc, #32]	@ (80054c4 <HAL_RCC_ClockConfig+0x240>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f023 020f 	bic.w	r2, r3, #15
 80054aa:	4906      	ldr	r1, [pc, #24]	@ (80054c4 <HAL_RCC_ClockConfig+0x240>)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b2:	4b04      	ldr	r3, [pc, #16]	@ (80054c4 <HAL_RCC_ClockConfig+0x240>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d005      	beq.n	80054cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e086      	b.n	80055d2 <HAL_RCC_ClockConfig+0x34e>
 80054c4:	52002000 	.word	0x52002000
 80054c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d010      	beq.n	80054fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	4b3f      	ldr	r3, [pc, #252]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d208      	bcs.n	80054fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054e8:	4b3c      	ldr	r3, [pc, #240]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	4939      	ldr	r1, [pc, #228]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0308 	and.w	r3, r3, #8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d010      	beq.n	8005528 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	695a      	ldr	r2, [r3, #20]
 800550a:	4b34      	ldr	r3, [pc, #208]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005512:	429a      	cmp	r2, r3
 8005514:	d208      	bcs.n	8005528 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005516:	4b31      	ldr	r3, [pc, #196]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	492e      	ldr	r1, [pc, #184]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 8005524:	4313      	orrs	r3, r2
 8005526:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2b00      	cmp	r3, #0
 8005532:	d010      	beq.n	8005556 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699a      	ldr	r2, [r3, #24]
 8005538:	4b28      	ldr	r3, [pc, #160]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005540:	429a      	cmp	r2, r3
 8005542:	d208      	bcs.n	8005556 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005544:	4b25      	ldr	r3, [pc, #148]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	4922      	ldr	r1, [pc, #136]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 8005552:	4313      	orrs	r3, r2
 8005554:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b00      	cmp	r3, #0
 8005560:	d010      	beq.n	8005584 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69da      	ldr	r2, [r3, #28]
 8005566:	4b1d      	ldr	r3, [pc, #116]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800556e:	429a      	cmp	r2, r3
 8005570:	d208      	bcs.n	8005584 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005572:	4b1a      	ldr	r3, [pc, #104]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	4917      	ldr	r1, [pc, #92]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 8005580:	4313      	orrs	r3, r2
 8005582:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005584:	f000 f834 	bl	80055f0 <HAL_RCC_GetSysClockFreq>
 8005588:	4602      	mov	r2, r0
 800558a:	4b14      	ldr	r3, [pc, #80]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	0a1b      	lsrs	r3, r3, #8
 8005590:	f003 030f 	and.w	r3, r3, #15
 8005594:	4912      	ldr	r1, [pc, #72]	@ (80055e0 <HAL_RCC_ClockConfig+0x35c>)
 8005596:	5ccb      	ldrb	r3, [r1, r3]
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	fa22 f303 	lsr.w	r3, r2, r3
 80055a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055a2:	4b0e      	ldr	r3, [pc, #56]	@ (80055dc <HAL_RCC_ClockConfig+0x358>)
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	4a0d      	ldr	r2, [pc, #52]	@ (80055e0 <HAL_RCC_ClockConfig+0x35c>)
 80055ac:	5cd3      	ldrb	r3, [r2, r3]
 80055ae:	f003 031f 	and.w	r3, r3, #31
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	fa22 f303 	lsr.w	r3, r2, r3
 80055b8:	4a0a      	ldr	r2, [pc, #40]	@ (80055e4 <HAL_RCC_ClockConfig+0x360>)
 80055ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055bc:	4a0a      	ldr	r2, [pc, #40]	@ (80055e8 <HAL_RCC_ClockConfig+0x364>)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80055c2:	4b0a      	ldr	r3, [pc, #40]	@ (80055ec <HAL_RCC_ClockConfig+0x368>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fb fe30 	bl	800122c <HAL_InitTick>
 80055cc:	4603      	mov	r3, r0
 80055ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	58024400 	.word	0x58024400
 80055e0:	08012650 	.word	0x08012650
 80055e4:	24000004 	.word	0x24000004
 80055e8:	24000000 	.word	0x24000000
 80055ec:	24000008 	.word	0x24000008

080055f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b089      	sub	sp, #36	@ 0x24
 80055f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055f6:	4bb3      	ldr	r3, [pc, #716]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055fe:	2b18      	cmp	r3, #24
 8005600:	f200 8155 	bhi.w	80058ae <HAL_RCC_GetSysClockFreq+0x2be>
 8005604:	a201      	add	r2, pc, #4	@ (adr r2, 800560c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560a:	bf00      	nop
 800560c:	08005671 	.word	0x08005671
 8005610:	080058af 	.word	0x080058af
 8005614:	080058af 	.word	0x080058af
 8005618:	080058af 	.word	0x080058af
 800561c:	080058af 	.word	0x080058af
 8005620:	080058af 	.word	0x080058af
 8005624:	080058af 	.word	0x080058af
 8005628:	080058af 	.word	0x080058af
 800562c:	08005697 	.word	0x08005697
 8005630:	080058af 	.word	0x080058af
 8005634:	080058af 	.word	0x080058af
 8005638:	080058af 	.word	0x080058af
 800563c:	080058af 	.word	0x080058af
 8005640:	080058af 	.word	0x080058af
 8005644:	080058af 	.word	0x080058af
 8005648:	080058af 	.word	0x080058af
 800564c:	0800569d 	.word	0x0800569d
 8005650:	080058af 	.word	0x080058af
 8005654:	080058af 	.word	0x080058af
 8005658:	080058af 	.word	0x080058af
 800565c:	080058af 	.word	0x080058af
 8005660:	080058af 	.word	0x080058af
 8005664:	080058af 	.word	0x080058af
 8005668:	080058af 	.word	0x080058af
 800566c:	080056a3 	.word	0x080056a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005670:	4b94      	ldr	r3, [pc, #592]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0320 	and.w	r3, r3, #32
 8005678:	2b00      	cmp	r3, #0
 800567a:	d009      	beq.n	8005690 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800567c:	4b91      	ldr	r3, [pc, #580]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	08db      	lsrs	r3, r3, #3
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	4a90      	ldr	r2, [pc, #576]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005688:	fa22 f303 	lsr.w	r3, r2, r3
 800568c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800568e:	e111      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005690:	4b8d      	ldr	r3, [pc, #564]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005692:	61bb      	str	r3, [r7, #24]
      break;
 8005694:	e10e      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005696:	4b8d      	ldr	r3, [pc, #564]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005698:	61bb      	str	r3, [r7, #24]
      break;
 800569a:	e10b      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800569c:	4b8c      	ldr	r3, [pc, #560]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800569e:	61bb      	str	r3, [r7, #24]
      break;
 80056a0:	e108      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056a2:	4b88      	ldr	r3, [pc, #544]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80056ac:	4b85      	ldr	r3, [pc, #532]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b0:	091b      	lsrs	r3, r3, #4
 80056b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80056b8:	4b82      	ldr	r3, [pc, #520]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80056c2:	4b80      	ldr	r3, [pc, #512]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c6:	08db      	lsrs	r3, r3, #3
 80056c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	fb02 f303 	mul.w	r3, r2, r3
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 80e1 	beq.w	80058a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	f000 8083 	beq.w	80057f4 <HAL_RCC_GetSysClockFreq+0x204>
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	f200 80a1 	bhi.w	8005838 <HAL_RCC_GetSysClockFreq+0x248>
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_RCC_GetSysClockFreq+0x114>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d056      	beq.n	80057b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005702:	e099      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005704:	4b6f      	ldr	r3, [pc, #444]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b00      	cmp	r3, #0
 800570e:	d02d      	beq.n	800576c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005710:	4b6c      	ldr	r3, [pc, #432]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	08db      	lsrs	r3, r3, #3
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	4a6b      	ldr	r2, [pc, #428]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800571c:	fa22 f303 	lsr.w	r3, r2, r3
 8005720:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	ee07 3a90 	vmov	s15, r3
 8005728:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800573a:	4b62      	ldr	r3, [pc, #392]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800573c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574a:	ed97 6a02 	vldr	s12, [r7, #8]
 800574e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80058d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800575a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800575e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005766:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800576a:	e087      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005776:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80058d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800577a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800577e:	4b51      	ldr	r3, [pc, #324]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005792:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80058d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800579a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057ae:	e065      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80058dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80057be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c2:	4b40      	ldr	r3, [pc, #256]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80057d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80058d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057f2:	e043      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80058e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005806:	4b2f      	ldr	r3, [pc, #188]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005816:	ed97 6a02 	vldr	s12, [r7, #8]
 800581a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80058d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800581e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800582a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005832:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005836:	e021      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80058dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800584a:	4b1e      	ldr	r3, [pc, #120]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585a:	ed97 6a02 	vldr	s12, [r7, #8]
 800585e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80058d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800586e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005876:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800587a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800587c:	4b11      	ldr	r3, [pc, #68]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800587e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005880:	0a5b      	lsrs	r3, r3, #9
 8005882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005886:	3301      	adds	r3, #1
 8005888:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	ee07 3a90 	vmov	s15, r3
 8005890:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005894:	edd7 6a07 	vldr	s13, [r7, #28]
 8005898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800589c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058a0:	ee17 3a90 	vmov	r3, s15
 80058a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80058a6:	e005      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	61bb      	str	r3, [r7, #24]
      break;
 80058ac:	e002      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80058ae:	4b07      	ldr	r3, [pc, #28]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058b0:	61bb      	str	r3, [r7, #24]
      break;
 80058b2:	bf00      	nop
  }

  return sysclockfreq;
 80058b4:	69bb      	ldr	r3, [r7, #24]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3724      	adds	r7, #36	@ 0x24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	58024400 	.word	0x58024400
 80058c8:	03d09000 	.word	0x03d09000
 80058cc:	003d0900 	.word	0x003d0900
 80058d0:	017d7840 	.word	0x017d7840
 80058d4:	46000000 	.word	0x46000000
 80058d8:	4c742400 	.word	0x4c742400
 80058dc:	4a742400 	.word	0x4a742400
 80058e0:	4bbebc20 	.word	0x4bbebc20

080058e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80058ea:	f7ff fe81 	bl	80055f0 <HAL_RCC_GetSysClockFreq>
 80058ee:	4602      	mov	r2, r0
 80058f0:	4b10      	ldr	r3, [pc, #64]	@ (8005934 <HAL_RCC_GetHCLKFreq+0x50>)
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	0a1b      	lsrs	r3, r3, #8
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	490f      	ldr	r1, [pc, #60]	@ (8005938 <HAL_RCC_GetHCLKFreq+0x54>)
 80058fc:	5ccb      	ldrb	r3, [r1, r3]
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	fa22 f303 	lsr.w	r3, r2, r3
 8005906:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005908:	4b0a      	ldr	r3, [pc, #40]	@ (8005934 <HAL_RCC_GetHCLKFreq+0x50>)
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	f003 030f 	and.w	r3, r3, #15
 8005910:	4a09      	ldr	r2, [pc, #36]	@ (8005938 <HAL_RCC_GetHCLKFreq+0x54>)
 8005912:	5cd3      	ldrb	r3, [r2, r3]
 8005914:	f003 031f 	and.w	r3, r3, #31
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	fa22 f303 	lsr.w	r3, r2, r3
 800591e:	4a07      	ldr	r2, [pc, #28]	@ (800593c <HAL_RCC_GetHCLKFreq+0x58>)
 8005920:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005922:	4a07      	ldr	r2, [pc, #28]	@ (8005940 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005928:	4b04      	ldr	r3, [pc, #16]	@ (800593c <HAL_RCC_GetHCLKFreq+0x58>)
 800592a:	681b      	ldr	r3, [r3, #0]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	58024400 	.word	0x58024400
 8005938:	08012650 	.word	0x08012650
 800593c:	24000004 	.word	0x24000004
 8005940:	24000000 	.word	0x24000000

08005944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005948:	f7ff ffcc 	bl	80058e4 <HAL_RCC_GetHCLKFreq>
 800594c:	4602      	mov	r2, r0
 800594e:	4b06      	ldr	r3, [pc, #24]	@ (8005968 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	091b      	lsrs	r3, r3, #4
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	4904      	ldr	r1, [pc, #16]	@ (800596c <HAL_RCC_GetPCLK1Freq+0x28>)
 800595a:	5ccb      	ldrb	r3, [r1, r3]
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005964:	4618      	mov	r0, r3
 8005966:	bd80      	pop	{r7, pc}
 8005968:	58024400 	.word	0x58024400
 800596c:	08012650 	.word	0x08012650

08005970 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	223f      	movs	r2, #63	@ 0x3f
 800597e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005980:	4b1a      	ldr	r3, [pc, #104]	@ (80059ec <HAL_RCC_GetClockConfig+0x7c>)
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	f003 0207 	and.w	r2, r3, #7
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800598c:	4b17      	ldr	r3, [pc, #92]	@ (80059ec <HAL_RCC_GetClockConfig+0x7c>)
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005998:	4b14      	ldr	r3, [pc, #80]	@ (80059ec <HAL_RCC_GetClockConfig+0x7c>)
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f003 020f 	and.w	r2, r3, #15
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80059a4:	4b11      	ldr	r3, [pc, #68]	@ (80059ec <HAL_RCC_GetClockConfig+0x7c>)
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80059b0:	4b0e      	ldr	r3, [pc, #56]	@ (80059ec <HAL_RCC_GetClockConfig+0x7c>)
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80059bc:	4b0b      	ldr	r3, [pc, #44]	@ (80059ec <HAL_RCC_GetClockConfig+0x7c>)
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80059c8:	4b08      	ldr	r3, [pc, #32]	@ (80059ec <HAL_RCC_GetClockConfig+0x7c>)
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059d4:	4b06      	ldr	r3, [pc, #24]	@ (80059f0 <HAL_RCC_GetClockConfig+0x80>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 020f 	and.w	r2, r3, #15
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	601a      	str	r2, [r3, #0]
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	58024400 	.word	0x58024400
 80059f0:	52002000 	.word	0x52002000

080059f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059f8:	b0ca      	sub	sp, #296	@ 0x128
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a00:	2300      	movs	r3, #0
 8005a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a06:	2300      	movs	r3, #0
 8005a08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005a18:	2500      	movs	r5, #0
 8005a1a:	ea54 0305 	orrs.w	r3, r4, r5
 8005a1e:	d049      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a2a:	d02f      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a30:	d828      	bhi.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a36:	d01a      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a3c:	d822      	bhi.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a46:	d007      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a48:	e01c      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a4a:	4bb8      	ldr	r3, [pc, #736]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4e:	4ab7      	ldr	r2, [pc, #732]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a56:	e01a      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	2102      	movs	r1, #2
 8005a60:	4618      	mov	r0, r3
 8005a62:	f002 fb61 	bl	8008128 <RCCEx_PLL2_Config>
 8005a66:	4603      	mov	r3, r0
 8005a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a6c:	e00f      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a72:	3328      	adds	r3, #40	@ 0x28
 8005a74:	2102      	movs	r1, #2
 8005a76:	4618      	mov	r0, r3
 8005a78:	f002 fc08 	bl	800828c <RCCEx_PLL3_Config>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a82:	e004      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a8a:	e000      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a96:	4ba5      	ldr	r3, [pc, #660]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a9a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005aa4:	4aa1      	ldr	r2, [pc, #644]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aa6:	430b      	orrs	r3, r1
 8005aa8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005aaa:	e003      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ab0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005ac0:	f04f 0900 	mov.w	r9, #0
 8005ac4:	ea58 0309 	orrs.w	r3, r8, r9
 8005ac8:	d047      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	d82a      	bhi.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8005adc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005af1 	.word	0x08005af1
 8005ae0:	08005aff 	.word	0x08005aff
 8005ae4:	08005b15 	.word	0x08005b15
 8005ae8:	08005b33 	.word	0x08005b33
 8005aec:	08005b33 	.word	0x08005b33
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005af0:	4b8e      	ldr	r3, [pc, #568]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af4:	4a8d      	ldr	r2, [pc, #564]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005af6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005afa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005afc:	e01a      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b02:	3308      	adds	r3, #8
 8005b04:	2100      	movs	r1, #0
 8005b06:	4618      	mov	r0, r3
 8005b08:	f002 fb0e 	bl	8008128 <RCCEx_PLL2_Config>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b12:	e00f      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b18:	3328      	adds	r3, #40	@ 0x28
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f002 fbb5 	bl	800828c <RCCEx_PLL3_Config>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b28:	e004      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b30:	e000      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10a      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b3c:	4b7b      	ldr	r3, [pc, #492]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b40:	f023 0107 	bic.w	r1, r3, #7
 8005b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b4a:	4a78      	ldr	r2, [pc, #480]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b50:	e003      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b62:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005b66:	f04f 0b00 	mov.w	fp, #0
 8005b6a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005b6e:	d04c      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b7a:	d030      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005b7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b80:	d829      	bhi.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b82:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b84:	d02d      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005b86:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b88:	d825      	bhi.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b8a:	2b80      	cmp	r3, #128	@ 0x80
 8005b8c:	d018      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005b8e:	2b80      	cmp	r3, #128	@ 0x80
 8005b90:	d821      	bhi.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005b96:	2b40      	cmp	r3, #64	@ 0x40
 8005b98:	d007      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005b9a:	e01c      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b9c:	4b63      	ldr	r3, [pc, #396]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba0:	4a62      	ldr	r2, [pc, #392]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ba2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ba6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ba8:	e01c      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bae:	3308      	adds	r3, #8
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f002 fab8 	bl	8008128 <RCCEx_PLL2_Config>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bbe:	e011      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc4:	3328      	adds	r3, #40	@ 0x28
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f002 fb5f 	bl	800828c <RCCEx_PLL3_Config>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bd4:	e006      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bdc:	e002      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005bde:	bf00      	nop
 8005be0:	e000      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10a      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005bec:	4b4f      	ldr	r3, [pc, #316]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bfa:	4a4c      	ldr	r2, [pc, #304]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c00:	e003      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c12:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005c16:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005c20:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005c24:	460b      	mov	r3, r1
 8005c26:	4313      	orrs	r3, r2
 8005c28:	d053      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c36:	d035      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005c38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c3c:	d82e      	bhi.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c42:	d031      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005c44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c48:	d828      	bhi.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c4e:	d01a      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005c50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c54:	d822      	bhi.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005c5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c5e:	d007      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005c60:	e01c      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c62:	4b32      	ldr	r3, [pc, #200]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c66:	4a31      	ldr	r2, [pc, #196]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c6e:	e01c      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c74:	3308      	adds	r3, #8
 8005c76:	2100      	movs	r1, #0
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f002 fa55 	bl	8008128 <RCCEx_PLL2_Config>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c84:	e011      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8a:	3328      	adds	r3, #40	@ 0x28
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f002 fafc 	bl	800828c <RCCEx_PLL3_Config>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c9a:	e006      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ca2:	e002      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005ca4:	bf00      	nop
 8005ca6:	e000      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10b      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cc8:	e003      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cda:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005cde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005ce8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005cec:	460b      	mov	r3, r1
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	d056      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005cfa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cfe:	d038      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005d00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d04:	d831      	bhi.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d0a:	d034      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005d0c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d10:	d82b      	bhi.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d16:	d01d      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005d18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d1c:	d825      	bhi.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d006      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005d22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d26:	d00a      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d28:	e01f      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d2a:	bf00      	nop
 8005d2c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d30:	4ba2      	ldr	r3, [pc, #648]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d34:	4aa1      	ldr	r2, [pc, #644]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d3c:	e01c      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d42:	3308      	adds	r3, #8
 8005d44:	2100      	movs	r1, #0
 8005d46:	4618      	mov	r0, r3
 8005d48:	f002 f9ee 	bl	8008128 <RCCEx_PLL2_Config>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d52:	e011      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d58:	3328      	adds	r3, #40	@ 0x28
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f002 fa95 	bl	800828c <RCCEx_PLL3_Config>
 8005d62:	4603      	mov	r3, r0
 8005d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d68:	e006      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d70:	e002      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d72:	bf00      	nop
 8005d74:	e000      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10b      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d80:	4b8e      	ldr	r3, [pc, #568]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d84:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d90:	4a8a      	ldr	r2, [pc, #552]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d92:	430b      	orrs	r3, r1
 8005d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d96:	e003      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005dac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005db0:	2300      	movs	r3, #0
 8005db2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005db6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005dba:	460b      	mov	r3, r1
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	d03a      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dc6:	2b30      	cmp	r3, #48	@ 0x30
 8005dc8:	d01f      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005dca:	2b30      	cmp	r3, #48	@ 0x30
 8005dcc:	d819      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005dce:	2b20      	cmp	r3, #32
 8005dd0:	d00c      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005dd2:	2b20      	cmp	r3, #32
 8005dd4:	d815      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d019      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005dda:	2b10      	cmp	r3, #16
 8005ddc:	d111      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dde:	4b77      	ldr	r3, [pc, #476]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de2:	4a76      	ldr	r2, [pc, #472]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005de8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005dea:	e011      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df0:	3308      	adds	r3, #8
 8005df2:	2102      	movs	r1, #2
 8005df4:	4618      	mov	r0, r3
 8005df6:	f002 f997 	bl	8008128 <RCCEx_PLL2_Config>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005e00:	e006      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e08:	e002      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e0a:	bf00      	nop
 8005e0c:	e000      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e18:	4b68      	ldr	r3, [pc, #416]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e1c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e26:	4a65      	ldr	r2, [pc, #404]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e28:	430b      	orrs	r3, r1
 8005e2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e2c:	e003      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e46:	2300      	movs	r3, #0
 8005e48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e4c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e50:	460b      	mov	r3, r1
 8005e52:	4313      	orrs	r3, r2
 8005e54:	d051      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e60:	d035      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005e62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e66:	d82e      	bhi.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e6c:	d031      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005e6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e72:	d828      	bhi.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e78:	d01a      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e7e:	d822      	bhi.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e88:	d007      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005e8a:	e01c      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e8c:	4b4b      	ldr	r3, [pc, #300]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e90:	4a4a      	ldr	r2, [pc, #296]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e98:	e01c      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9e:	3308      	adds	r3, #8
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f002 f940 	bl	8008128 <RCCEx_PLL2_Config>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005eae:	e011      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb4:	3328      	adds	r3, #40	@ 0x28
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f002 f9e7 	bl	800828c <RCCEx_PLL3_Config>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ec4:	e006      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ecc:	e002      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ece:	bf00      	nop
 8005ed0:	e000      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005edc:	4b37      	ldr	r3, [pc, #220]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ee0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eea:	4a34      	ldr	r2, [pc, #208]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005eec:	430b      	orrs	r3, r1
 8005eee:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ef0:	e003      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ef6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005f14:	460b      	mov	r3, r1
 8005f16:	4313      	orrs	r3, r2
 8005f18:	d056      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f24:	d033      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005f26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f2a:	d82c      	bhi.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f30:	d02f      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005f32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f36:	d826      	bhi.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f3c:	d02b      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005f3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f42:	d820      	bhi.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f48:	d012      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005f4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f4e:	d81a      	bhi.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d022      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f58:	d115      	bne.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5e:	3308      	adds	r3, #8
 8005f60:	2101      	movs	r1, #1
 8005f62:	4618      	mov	r0, r3
 8005f64:	f002 f8e0 	bl	8008128 <RCCEx_PLL2_Config>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f6e:	e015      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f74:	3328      	adds	r3, #40	@ 0x28
 8005f76:	2101      	movs	r1, #1
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f002 f987 	bl	800828c <RCCEx_PLL3_Config>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f84:	e00a      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f8c:	e006      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f8e:	bf00      	nop
 8005f90:	e004      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f92:	bf00      	nop
 8005f94:	e002      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f96:	bf00      	nop
 8005f98:	e000      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10d      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fa4:	4b05      	ldr	r3, [pc, #20]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fb2:	4a02      	ldr	r2, [pc, #8]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fb8:	e006      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005fba:	bf00      	nop
 8005fbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fde:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	d055      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ff4:	d033      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ffa:	d82c      	bhi.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006000:	d02f      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006006:	d826      	bhi.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006008:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800600c:	d02b      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800600e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006012:	d820      	bhi.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006018:	d012      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800601a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800601e:	d81a      	bhi.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006020:	2b00      	cmp	r3, #0
 8006022:	d022      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006024:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006028:	d115      	bne.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800602a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602e:	3308      	adds	r3, #8
 8006030:	2101      	movs	r1, #1
 8006032:	4618      	mov	r0, r3
 8006034:	f002 f878 	bl	8008128 <RCCEx_PLL2_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800603e:	e015      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006044:	3328      	adds	r3, #40	@ 0x28
 8006046:	2101      	movs	r1, #1
 8006048:	4618      	mov	r0, r3
 800604a:	f002 f91f 	bl	800828c <RCCEx_PLL3_Config>
 800604e:	4603      	mov	r3, r0
 8006050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006054:	e00a      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800605c:	e006      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800605e:	bf00      	nop
 8006060:	e004      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006062:	bf00      	nop
 8006064:	e002      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006066:	bf00      	nop
 8006068:	e000      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800606a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800606c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10b      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006074:	4ba3      	ldr	r3, [pc, #652]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006078:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800607c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006080:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006084:	4a9f      	ldr	r2, [pc, #636]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006086:	430b      	orrs	r3, r1
 8006088:	6593      	str	r3, [r2, #88]	@ 0x58
 800608a:	e003      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006090:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80060a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060a4:	2300      	movs	r3, #0
 80060a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060ae:	460b      	mov	r3, r1
 80060b0:	4313      	orrs	r3, r2
 80060b2:	d037      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060be:	d00e      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80060c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060c4:	d816      	bhi.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d018      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80060ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060ce:	d111      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d0:	4b8c      	ldr	r3, [pc, #560]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d4:	4a8b      	ldr	r2, [pc, #556]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060dc:	e00f      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e2:	3308      	adds	r3, #8
 80060e4:	2101      	movs	r1, #1
 80060e6:	4618      	mov	r0, r3
 80060e8:	f002 f81e 	bl	8008128 <RCCEx_PLL2_Config>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060f2:	e004      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060fa:	e000      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80060fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006106:	4b7f      	ldr	r3, [pc, #508]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800610a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800610e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006114:	4a7b      	ldr	r2, [pc, #492]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006116:	430b      	orrs	r3, r1
 8006118:	6513      	str	r3, [r2, #80]	@ 0x50
 800611a:	e003      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006120:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006130:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006134:	2300      	movs	r3, #0
 8006136:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800613a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800613e:	460b      	mov	r3, r1
 8006140:	4313      	orrs	r3, r2
 8006142:	d039      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800614a:	2b03      	cmp	r3, #3
 800614c:	d81c      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800614e:	a201      	add	r2, pc, #4	@ (adr r2, 8006154 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006154:	08006191 	.word	0x08006191
 8006158:	08006165 	.word	0x08006165
 800615c:	08006173 	.word	0x08006173
 8006160:	08006191 	.word	0x08006191
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006164:	4b67      	ldr	r3, [pc, #412]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006168:	4a66      	ldr	r2, [pc, #408]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800616a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800616e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006170:	e00f      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006176:	3308      	adds	r3, #8
 8006178:	2102      	movs	r1, #2
 800617a:	4618      	mov	r0, r3
 800617c:	f001 ffd4 	bl	8008128 <RCCEx_PLL2_Config>
 8006180:	4603      	mov	r3, r0
 8006182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006186:	e004      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800618e:	e000      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10a      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800619a:	4b5a      	ldr	r3, [pc, #360]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800619c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800619e:	f023 0103 	bic.w	r1, r3, #3
 80061a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061a8:	4a56      	ldr	r2, [pc, #344]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061aa:	430b      	orrs	r3, r1
 80061ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061ae:	e003      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80061c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061c8:	2300      	movs	r3, #0
 80061ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80061d2:	460b      	mov	r3, r1
 80061d4:	4313      	orrs	r3, r2
 80061d6:	f000 809f 	beq.w	8006318 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061da:	4b4b      	ldr	r3, [pc, #300]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a4a      	ldr	r2, [pc, #296]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061e6:	f7fb fc55 	bl	8001a94 <HAL_GetTick>
 80061ea:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061ee:	e00b      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061f0:	f7fb fc50 	bl	8001a94 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b64      	cmp	r3, #100	@ 0x64
 80061fe:	d903      	bls.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006206:	e005      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006208:	4b3f      	ldr	r3, [pc, #252]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0ed      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006214:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006218:	2b00      	cmp	r3, #0
 800621a:	d179      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800621c:	4b39      	ldr	r3, [pc, #228]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800621e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006224:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006228:	4053      	eors	r3, r2
 800622a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800622e:	2b00      	cmp	r3, #0
 8006230:	d015      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006232:	4b34      	ldr	r3, [pc, #208]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006236:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800623a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800623e:	4b31      	ldr	r3, [pc, #196]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006242:	4a30      	ldr	r2, [pc, #192]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006248:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800624a:	4b2e      	ldr	r3, [pc, #184]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800624c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800624e:	4a2d      	ldr	r2, [pc, #180]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006254:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006256:	4a2b      	ldr	r2, [pc, #172]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006258:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800625c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800625e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006262:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800626a:	d118      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626c:	f7fb fc12 	bl	8001a94 <HAL_GetTick>
 8006270:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006274:	e00d      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006276:	f7fb fc0d 	bl	8001a94 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006280:	1ad2      	subs	r2, r2, r3
 8006282:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006286:	429a      	cmp	r2, r3
 8006288:	d903      	bls.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006290:	e005      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006292:	4b1c      	ldr	r3, [pc, #112]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0eb      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800629e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d129      	bne.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062b6:	d10e      	bne.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80062b8:	4b12      	ldr	r3, [pc, #72]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80062c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062c8:	091a      	lsrs	r2, r3, #4
 80062ca:	4b10      	ldr	r3, [pc, #64]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80062cc:	4013      	ands	r3, r2
 80062ce:	4a0d      	ldr	r2, [pc, #52]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062d0:	430b      	orrs	r3, r1
 80062d2:	6113      	str	r3, [r2, #16]
 80062d4:	e005      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80062d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	4a0a      	ldr	r2, [pc, #40]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062e0:	6113      	str	r3, [r2, #16]
 80062e2:	4b08      	ldr	r3, [pc, #32]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062e4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80062e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062f2:	4a04      	ldr	r2, [pc, #16]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062f4:	430b      	orrs	r3, r1
 80062f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80062f8:	e00e      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006302:	e009      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006304:	58024400 	.word	0x58024400
 8006308:	58024800 	.word	0x58024800
 800630c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006314:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	f002 0301 	and.w	r3, r2, #1
 8006324:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006328:	2300      	movs	r3, #0
 800632a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800632e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006332:	460b      	mov	r3, r1
 8006334:	4313      	orrs	r3, r2
 8006336:	f000 8089 	beq.w	800644c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800633a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006340:	2b28      	cmp	r3, #40	@ 0x28
 8006342:	d86b      	bhi.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006344:	a201      	add	r2, pc, #4	@ (adr r2, 800634c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634a:	bf00      	nop
 800634c:	08006425 	.word	0x08006425
 8006350:	0800641d 	.word	0x0800641d
 8006354:	0800641d 	.word	0x0800641d
 8006358:	0800641d 	.word	0x0800641d
 800635c:	0800641d 	.word	0x0800641d
 8006360:	0800641d 	.word	0x0800641d
 8006364:	0800641d 	.word	0x0800641d
 8006368:	0800641d 	.word	0x0800641d
 800636c:	080063f1 	.word	0x080063f1
 8006370:	0800641d 	.word	0x0800641d
 8006374:	0800641d 	.word	0x0800641d
 8006378:	0800641d 	.word	0x0800641d
 800637c:	0800641d 	.word	0x0800641d
 8006380:	0800641d 	.word	0x0800641d
 8006384:	0800641d 	.word	0x0800641d
 8006388:	0800641d 	.word	0x0800641d
 800638c:	08006407 	.word	0x08006407
 8006390:	0800641d 	.word	0x0800641d
 8006394:	0800641d 	.word	0x0800641d
 8006398:	0800641d 	.word	0x0800641d
 800639c:	0800641d 	.word	0x0800641d
 80063a0:	0800641d 	.word	0x0800641d
 80063a4:	0800641d 	.word	0x0800641d
 80063a8:	0800641d 	.word	0x0800641d
 80063ac:	08006425 	.word	0x08006425
 80063b0:	0800641d 	.word	0x0800641d
 80063b4:	0800641d 	.word	0x0800641d
 80063b8:	0800641d 	.word	0x0800641d
 80063bc:	0800641d 	.word	0x0800641d
 80063c0:	0800641d 	.word	0x0800641d
 80063c4:	0800641d 	.word	0x0800641d
 80063c8:	0800641d 	.word	0x0800641d
 80063cc:	08006425 	.word	0x08006425
 80063d0:	0800641d 	.word	0x0800641d
 80063d4:	0800641d 	.word	0x0800641d
 80063d8:	0800641d 	.word	0x0800641d
 80063dc:	0800641d 	.word	0x0800641d
 80063e0:	0800641d 	.word	0x0800641d
 80063e4:	0800641d 	.word	0x0800641d
 80063e8:	0800641d 	.word	0x0800641d
 80063ec:	08006425 	.word	0x08006425
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f4:	3308      	adds	r3, #8
 80063f6:	2101      	movs	r1, #1
 80063f8:	4618      	mov	r0, r3
 80063fa:	f001 fe95 	bl	8008128 <RCCEx_PLL2_Config>
 80063fe:	4603      	mov	r3, r0
 8006400:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006404:	e00f      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800640a:	3328      	adds	r3, #40	@ 0x28
 800640c:	2101      	movs	r1, #1
 800640e:	4618      	mov	r0, r3
 8006410:	f001 ff3c 	bl	800828c <RCCEx_PLL3_Config>
 8006414:	4603      	mov	r3, r0
 8006416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800641a:	e004      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006422:	e000      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10a      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800642e:	4bbf      	ldr	r3, [pc, #764]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006432:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800643c:	4abb      	ldr	r2, [pc, #748]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800643e:	430b      	orrs	r3, r1
 8006440:	6553      	str	r3, [r2, #84]	@ 0x54
 8006442:	e003      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006444:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006448:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800644c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006454:	f002 0302 	and.w	r3, r2, #2
 8006458:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800645c:	2300      	movs	r3, #0
 800645e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006462:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006466:	460b      	mov	r3, r1
 8006468:	4313      	orrs	r3, r2
 800646a:	d041      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800646c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006470:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006472:	2b05      	cmp	r3, #5
 8006474:	d824      	bhi.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006476:	a201      	add	r2, pc, #4	@ (adr r2, 800647c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647c:	080064c9 	.word	0x080064c9
 8006480:	08006495 	.word	0x08006495
 8006484:	080064ab 	.word	0x080064ab
 8006488:	080064c9 	.word	0x080064c9
 800648c:	080064c9 	.word	0x080064c9
 8006490:	080064c9 	.word	0x080064c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006498:	3308      	adds	r3, #8
 800649a:	2101      	movs	r1, #1
 800649c:	4618      	mov	r0, r3
 800649e:	f001 fe43 	bl	8008128 <RCCEx_PLL2_Config>
 80064a2:	4603      	mov	r3, r0
 80064a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064a8:	e00f      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ae:	3328      	adds	r3, #40	@ 0x28
 80064b0:	2101      	movs	r1, #1
 80064b2:	4618      	mov	r0, r3
 80064b4:	f001 feea 	bl	800828c <RCCEx_PLL3_Config>
 80064b8:	4603      	mov	r3, r0
 80064ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064be:	e004      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064c6:	e000      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80064c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064d2:	4b96      	ldr	r3, [pc, #600]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d6:	f023 0107 	bic.w	r1, r3, #7
 80064da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064e0:	4a92      	ldr	r2, [pc, #584]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064e2:	430b      	orrs	r3, r1
 80064e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80064e6:	e003      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	f002 0304 	and.w	r3, r2, #4
 80064fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006500:	2300      	movs	r3, #0
 8006502:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006506:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800650a:	460b      	mov	r3, r1
 800650c:	4313      	orrs	r3, r2
 800650e:	d044      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006518:	2b05      	cmp	r3, #5
 800651a:	d825      	bhi.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800651c:	a201      	add	r2, pc, #4	@ (adr r2, 8006524 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800651e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006522:	bf00      	nop
 8006524:	08006571 	.word	0x08006571
 8006528:	0800653d 	.word	0x0800653d
 800652c:	08006553 	.word	0x08006553
 8006530:	08006571 	.word	0x08006571
 8006534:	08006571 	.word	0x08006571
 8006538:	08006571 	.word	0x08006571
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800653c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006540:	3308      	adds	r3, #8
 8006542:	2101      	movs	r1, #1
 8006544:	4618      	mov	r0, r3
 8006546:	f001 fdef 	bl	8008128 <RCCEx_PLL2_Config>
 800654a:	4603      	mov	r3, r0
 800654c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006550:	e00f      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006556:	3328      	adds	r3, #40	@ 0x28
 8006558:	2101      	movs	r1, #1
 800655a:	4618      	mov	r0, r3
 800655c:	f001 fe96 	bl	800828c <RCCEx_PLL3_Config>
 8006560:	4603      	mov	r3, r0
 8006562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006566:	e004      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800656e:	e000      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10b      	bne.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800657a:	4b6c      	ldr	r3, [pc, #432]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800657c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800657e:	f023 0107 	bic.w	r1, r3, #7
 8006582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800658a:	4a68      	ldr	r2, [pc, #416]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800658c:	430b      	orrs	r3, r1
 800658e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006590:	e003      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006592:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006596:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800659a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	f002 0320 	and.w	r3, r2, #32
 80065a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065aa:	2300      	movs	r3, #0
 80065ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065b4:	460b      	mov	r3, r1
 80065b6:	4313      	orrs	r3, r2
 80065b8:	d055      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065c6:	d033      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80065c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065cc:	d82c      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d2:	d02f      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80065d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d8:	d826      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065de:	d02b      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80065e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065e4:	d820      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065ea:	d012      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80065ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065f0:	d81a      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d022      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80065f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065fa:	d115      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006600:	3308      	adds	r3, #8
 8006602:	2100      	movs	r1, #0
 8006604:	4618      	mov	r0, r3
 8006606:	f001 fd8f 	bl	8008128 <RCCEx_PLL2_Config>
 800660a:	4603      	mov	r3, r0
 800660c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006610:	e015      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006616:	3328      	adds	r3, #40	@ 0x28
 8006618:	2102      	movs	r1, #2
 800661a:	4618      	mov	r0, r3
 800661c:	f001 fe36 	bl	800828c <RCCEx_PLL3_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006626:	e00a      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800662e:	e006      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006630:	bf00      	nop
 8006632:	e004      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006634:	bf00      	nop
 8006636:	e002      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006638:	bf00      	nop
 800663a:	e000      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800663c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800663e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10b      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006646:	4b39      	ldr	r3, [pc, #228]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800664e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006656:	4a35      	ldr	r2, [pc, #212]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006658:	430b      	orrs	r3, r1
 800665a:	6553      	str	r3, [r2, #84]	@ 0x54
 800665c:	e003      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800665e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006662:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006672:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006676:	2300      	movs	r3, #0
 8006678:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800667c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006680:	460b      	mov	r3, r1
 8006682:	4313      	orrs	r3, r2
 8006684:	d058      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800668e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006692:	d033      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006694:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006698:	d82c      	bhi.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800669a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800669e:	d02f      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80066a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066a4:	d826      	bhi.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066aa:	d02b      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80066ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066b0:	d820      	bhi.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066b6:	d012      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80066b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066bc:	d81a      	bhi.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d022      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80066c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066c6:	d115      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066cc:	3308      	adds	r3, #8
 80066ce:	2100      	movs	r1, #0
 80066d0:	4618      	mov	r0, r3
 80066d2:	f001 fd29 	bl	8008128 <RCCEx_PLL2_Config>
 80066d6:	4603      	mov	r3, r0
 80066d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066dc:	e015      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e2:	3328      	adds	r3, #40	@ 0x28
 80066e4:	2102      	movs	r1, #2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f001 fdd0 	bl	800828c <RCCEx_PLL3_Config>
 80066ec:	4603      	mov	r3, r0
 80066ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066f2:	e00a      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066fa:	e006      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066fc:	bf00      	nop
 80066fe:	e004      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006700:	bf00      	nop
 8006702:	e002      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006704:	bf00      	nop
 8006706:	e000      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800670a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10e      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006712:	4b06      	ldr	r3, [pc, #24]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006716:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800671a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006722:	4a02      	ldr	r2, [pc, #8]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006724:	430b      	orrs	r3, r1
 8006726:	6593      	str	r3, [r2, #88]	@ 0x58
 8006728:	e006      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800672a:	bf00      	nop
 800672c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006730:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006734:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006744:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006748:	2300      	movs	r3, #0
 800674a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800674e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006752:	460b      	mov	r3, r1
 8006754:	4313      	orrs	r3, r2
 8006756:	d055      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006760:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006764:	d033      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006766:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800676a:	d82c      	bhi.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800676c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006770:	d02f      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006772:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006776:	d826      	bhi.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006778:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800677c:	d02b      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800677e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006782:	d820      	bhi.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006784:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006788:	d012      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800678a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800678e:	d81a      	bhi.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006790:	2b00      	cmp	r3, #0
 8006792:	d022      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006798:	d115      	bne.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800679a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679e:	3308      	adds	r3, #8
 80067a0:	2100      	movs	r1, #0
 80067a2:	4618      	mov	r0, r3
 80067a4:	f001 fcc0 	bl	8008128 <RCCEx_PLL2_Config>
 80067a8:	4603      	mov	r3, r0
 80067aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067ae:	e015      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b4:	3328      	adds	r3, #40	@ 0x28
 80067b6:	2102      	movs	r1, #2
 80067b8:	4618      	mov	r0, r3
 80067ba:	f001 fd67 	bl	800828c <RCCEx_PLL3_Config>
 80067be:	4603      	mov	r3, r0
 80067c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067c4:	e00a      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067cc:	e006      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067ce:	bf00      	nop
 80067d0:	e004      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067d2:	bf00      	nop
 80067d4:	e002      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067d6:	bf00      	nop
 80067d8:	e000      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10b      	bne.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067e4:	4ba1      	ldr	r3, [pc, #644]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80067ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067f4:	4a9d      	ldr	r2, [pc, #628]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067f6:	430b      	orrs	r3, r1
 80067f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80067fa:	e003      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006800:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f002 0308 	and.w	r3, r2, #8
 8006810:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006814:	2300      	movs	r3, #0
 8006816:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800681a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800681e:	460b      	mov	r3, r1
 8006820:	4313      	orrs	r3, r2
 8006822:	d01e      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800682c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006830:	d10c      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006836:	3328      	adds	r3, #40	@ 0x28
 8006838:	2102      	movs	r1, #2
 800683a:	4618      	mov	r0, r3
 800683c:	f001 fd26 	bl	800828c <RCCEx_PLL3_Config>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800684c:	4b87      	ldr	r3, [pc, #540]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800684e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006850:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800685c:	4a83      	ldr	r2, [pc, #524]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800685e:	430b      	orrs	r3, r1
 8006860:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	f002 0310 	and.w	r3, r2, #16
 800686e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006872:	2300      	movs	r3, #0
 8006874:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006878:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800687c:	460b      	mov	r3, r1
 800687e:	4313      	orrs	r3, r2
 8006880:	d01e      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006886:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800688a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800688e:	d10c      	bne.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006894:	3328      	adds	r3, #40	@ 0x28
 8006896:	2102      	movs	r1, #2
 8006898:	4618      	mov	r0, r3
 800689a:	f001 fcf7 	bl	800828c <RCCEx_PLL3_Config>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068aa:	4b70      	ldr	r3, [pc, #448]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068ba:	4a6c      	ldr	r2, [pc, #432]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068bc:	430b      	orrs	r3, r1
 80068be:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80068cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068d0:	2300      	movs	r3, #0
 80068d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80068da:	460b      	mov	r3, r1
 80068dc:	4313      	orrs	r3, r2
 80068de:	d03e      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80068e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068ec:	d022      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80068ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068f2:	d81b      	bhi.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d003      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80068f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068fc:	d00b      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80068fe:	e015      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006904:	3308      	adds	r3, #8
 8006906:	2100      	movs	r1, #0
 8006908:	4618      	mov	r0, r3
 800690a:	f001 fc0d 	bl	8008128 <RCCEx_PLL2_Config>
 800690e:	4603      	mov	r3, r0
 8006910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006914:	e00f      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691a:	3328      	adds	r3, #40	@ 0x28
 800691c:	2102      	movs	r1, #2
 800691e:	4618      	mov	r0, r3
 8006920:	f001 fcb4 	bl	800828c <RCCEx_PLL3_Config>
 8006924:	4603      	mov	r3, r0
 8006926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800692a:	e004      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006932:	e000      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10b      	bne.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800693e:	4b4b      	ldr	r3, [pc, #300]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006942:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800694e:	4a47      	ldr	r2, [pc, #284]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006950:	430b      	orrs	r3, r1
 8006952:	6593      	str	r3, [r2, #88]	@ 0x58
 8006954:	e003      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800695a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800695e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006966:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800696a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800696c:	2300      	movs	r3, #0
 800696e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006970:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006974:	460b      	mov	r3, r1
 8006976:	4313      	orrs	r3, r2
 8006978:	d03b      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800697a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006982:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006986:	d01f      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006988:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800698c:	d818      	bhi.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800698e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006992:	d003      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006994:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006998:	d007      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800699a:	e011      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800699c:	4b33      	ldr	r3, [pc, #204]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800699e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a0:	4a32      	ldr	r2, [pc, #200]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069a8:	e00f      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ae:	3328      	adds	r3, #40	@ 0x28
 80069b0:	2101      	movs	r1, #1
 80069b2:	4618      	mov	r0, r3
 80069b4:	f001 fc6a 	bl	800828c <RCCEx_PLL3_Config>
 80069b8:	4603      	mov	r3, r0
 80069ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80069be:	e004      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069c6:	e000      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80069c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10b      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069d2:	4b26      	ldr	r3, [pc, #152]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e2:	4a22      	ldr	r2, [pc, #136]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069e4:	430b      	orrs	r3, r1
 80069e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80069e8:	e003      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80069fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a00:	2300      	movs	r3, #0
 8006a02:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	d034      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a1c:	d007      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006a1e:	e011      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a20:	4b12      	ldr	r3, [pc, #72]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a24:	4a11      	ldr	r2, [pc, #68]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a2c:	e00e      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a32:	3308      	adds	r3, #8
 8006a34:	2102      	movs	r1, #2
 8006a36:	4618      	mov	r0, r3
 8006a38:	f001 fb76 	bl	8008128 <RCCEx_PLL2_Config>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a42:	e003      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10d      	bne.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a54:	4b05      	ldr	r3, [pc, #20]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a58:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a62:	4a02      	ldr	r2, [pc, #8]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a64:	430b      	orrs	r3, r1
 8006a66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a68:	e006      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006a6a:	bf00      	nop
 8006a6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a80:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a86:	2300      	movs	r3, #0
 8006a88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a8a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4313      	orrs	r3, r2
 8006a92:	d00c      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a98:	3328      	adds	r3, #40	@ 0x28
 8006a9a:	2102      	movs	r1, #2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f001 fbf5 	bl	800828c <RCCEx_PLL3_Config>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006aba:	663b      	str	r3, [r7, #96]	@ 0x60
 8006abc:	2300      	movs	r3, #0
 8006abe:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ac0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	d038      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ad2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ad6:	d018      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006ad8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006adc:	d811      	bhi.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006ade:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ae2:	d014      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ae8:	d80b      	bhi.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d011      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006af2:	d106      	bne.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af4:	4bc3      	ldr	r3, [pc, #780]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af8:	4ac2      	ldr	r2, [pc, #776]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006afe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b00:	e008      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b08:	e004      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b0a:	bf00      	nop
 8006b0c:	e002      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b0e:	bf00      	nop
 8006b10:	e000      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10b      	bne.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b1c:	4bb9      	ldr	r3, [pc, #740]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b20:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b2c:	4ab5      	ldr	r2, [pc, #724]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b2e:	430b      	orrs	r3, r1
 8006b30:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b32:	e003      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b44:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b4e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b52:	460b      	mov	r3, r1
 8006b54:	4313      	orrs	r3, r2
 8006b56:	d009      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b58:	4baa      	ldr	r3, [pc, #680]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b66:	4aa7      	ldr	r2, [pc, #668]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b74:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006b78:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b82:	460b      	mov	r3, r1
 8006b84:	4313      	orrs	r3, r2
 8006b86:	d00a      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006b88:	4b9e      	ldr	r3, [pc, #632]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b98:	4a9a      	ldr	r2, [pc, #616]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b9a:	430b      	orrs	r3, r1
 8006b9c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006baa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bac:	2300      	movs	r3, #0
 8006bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bb0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	d009      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bba:	4b92      	ldr	r3, [pc, #584]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bbe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bc8:	4a8e      	ldr	r2, [pc, #568]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bca:	430b      	orrs	r3, r1
 8006bcc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006bda:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bdc:	2300      	movs	r3, #0
 8006bde:	647b      	str	r3, [r7, #68]	@ 0x44
 8006be0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006be4:	460b      	mov	r3, r1
 8006be6:	4313      	orrs	r3, r2
 8006be8:	d00e      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bea:	4b86      	ldr	r3, [pc, #536]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	4a85      	ldr	r2, [pc, #532]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bf0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006bf4:	6113      	str	r3, [r2, #16]
 8006bf6:	4b83      	ldr	r3, [pc, #524]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bf8:	6919      	ldr	r1, [r3, #16]
 8006bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bfe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006c02:	4a80      	ldr	r2, [pc, #512]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c04:	430b      	orrs	r3, r1
 8006c06:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c10:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006c14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c16:	2300      	movs	r3, #0
 8006c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c1a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4313      	orrs	r3, r2
 8006c22:	d009      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c24:	4b77      	ldr	r3, [pc, #476]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c28:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c32:	4a74      	ldr	r2, [pc, #464]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c34:	430b      	orrs	r3, r1
 8006c36:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c44:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c46:	2300      	movs	r3, #0
 8006c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c4a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4313      	orrs	r3, r2
 8006c52:	d00a      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c54:	4b6b      	ldr	r3, [pc, #428]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c58:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c64:	4a67      	ldr	r2, [pc, #412]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c66:	430b      	orrs	r3, r1
 8006c68:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c72:	2100      	movs	r1, #0
 8006c74:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c7c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c80:	460b      	mov	r3, r1
 8006c82:	4313      	orrs	r3, r2
 8006c84:	d011      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f001 fa4a 	bl	8008128 <RCCEx_PLL2_Config>
 8006c94:	4603      	mov	r3, r0
 8006c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	6239      	str	r1, [r7, #32]
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cbc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	d011      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cca:	3308      	adds	r3, #8
 8006ccc:	2101      	movs	r1, #1
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f001 fa2a 	bl	8008128 <RCCEx_PLL2_Config>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ce6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	61b9      	str	r1, [r7, #24]
 8006cf6:	f003 0304 	and.w	r3, r3, #4
 8006cfa:	61fb      	str	r3, [r7, #28]
 8006cfc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d00:	460b      	mov	r3, r1
 8006d02:	4313      	orrs	r3, r2
 8006d04:	d011      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	2102      	movs	r1, #2
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f001 fa0a 	bl	8008128 <RCCEx_PLL2_Config>
 8006d14:	4603      	mov	r3, r0
 8006d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d32:	2100      	movs	r1, #0
 8006d34:	6139      	str	r1, [r7, #16]
 8006d36:	f003 0308 	and.w	r3, r3, #8
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d40:	460b      	mov	r3, r1
 8006d42:	4313      	orrs	r3, r2
 8006d44:	d011      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d4a:	3328      	adds	r3, #40	@ 0x28
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f001 fa9c 	bl	800828c <RCCEx_PLL3_Config>
 8006d54:	4603      	mov	r3, r0
 8006d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d72:	2100      	movs	r1, #0
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	f003 0310 	and.w	r3, r3, #16
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d80:	460b      	mov	r3, r1
 8006d82:	4313      	orrs	r3, r2
 8006d84:	d011      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d8a:	3328      	adds	r3, #40	@ 0x28
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f001 fa7c 	bl	800828c <RCCEx_PLL3_Config>
 8006d94:	4603      	mov	r3, r0
 8006d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006da6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db2:	2100      	movs	r1, #0
 8006db4:	6039      	str	r1, [r7, #0]
 8006db6:	f003 0320 	and.w	r3, r3, #32
 8006dba:	607b      	str	r3, [r7, #4]
 8006dbc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	d011      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dca:	3328      	adds	r3, #40	@ 0x28
 8006dcc:	2102      	movs	r1, #2
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f001 fa5c 	bl	800828c <RCCEx_PLL3_Config>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006de6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006dea:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	e000      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e04:	58024400 	.word	0x58024400

08006e08 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b090      	sub	sp, #64	@ 0x40
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e16:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006e1a:	430b      	orrs	r3, r1
 8006e1c:	f040 8094 	bne.w	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006e20:	4b9e      	ldr	r3, [pc, #632]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	f200 8087 	bhi.w	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006e32:	a201      	add	r2, pc, #4	@ (adr r2, 8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e38:	08006e4d 	.word	0x08006e4d
 8006e3c:	08006e75 	.word	0x08006e75
 8006e40:	08006e9d 	.word	0x08006e9d
 8006e44:	08006f39 	.word	0x08006f39
 8006e48:	08006ec5 	.word	0x08006ec5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e4c:	4b93      	ldr	r3, [pc, #588]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e58:	d108      	bne.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f001 f810 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e68:	f000 bd45 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e70:	f000 bd41 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e74:	4b89      	ldr	r3, [pc, #548]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e80:	d108      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e82:	f107 0318 	add.w	r3, r7, #24
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fd54 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e90:	f000 bd31 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e98:	f000 bd2d 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e9c:	4b7f      	ldr	r3, [pc, #508]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ea4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ea8:	d108      	bne.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eaa:	f107 030c 	add.w	r3, r7, #12
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fe94 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eb8:	f000 bd1d 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ec0:	f000 bd19 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ec4:	4b75      	ldr	r3, [pc, #468]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ec8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ecc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ece:	4b73      	ldr	r3, [pc, #460]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0304 	and.w	r3, r3, #4
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d10c      	bne.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d109      	bne.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ee0:	4b6e      	ldr	r3, [pc, #440]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	08db      	lsrs	r3, r3, #3
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	4a6d      	ldr	r2, [pc, #436]	@ (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006eec:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ef2:	e01f      	b.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ef4:	4b69      	ldr	r3, [pc, #420]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006efc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f00:	d106      	bne.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f08:	d102      	bne.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f0a:	4b66      	ldr	r3, [pc, #408]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f0e:	e011      	b.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f10:	4b62      	ldr	r3, [pc, #392]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f1c:	d106      	bne.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f24:	d102      	bne.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f26:	4b60      	ldr	r3, [pc, #384]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f2a:	e003      	b.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f30:	f000 bce1 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f34:	f000 bcdf 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f38:	4b5c      	ldr	r3, [pc, #368]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f3c:	f000 bcdb 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f44:	f000 bcd7 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f4c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006f50:	430b      	orrs	r3, r1
 8006f52:	f040 80ad 	bne.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006f56:	4b51      	ldr	r3, [pc, #324]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f5a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006f5e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f66:	d056      	beq.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f6e:	f200 8090 	bhi.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f74:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f76:	f000 8088 	beq.w	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7c:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f7e:	f200 8088 	bhi.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	2b80      	cmp	r3, #128	@ 0x80
 8006f86:	d032      	beq.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8a:	2b80      	cmp	r3, #128	@ 0x80
 8006f8c:	f200 8081 	bhi.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f98:	2b40      	cmp	r3, #64	@ 0x40
 8006f9a:	d014      	beq.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006f9c:	e079      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f9e:	4b3f      	ldr	r3, [pc, #252]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fa6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006faa:	d108      	bne.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 ff67 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fba:	f000 bc9c 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fc2:	f000 bc98 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fc6:	4b35      	ldr	r3, [pc, #212]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fd2:	d108      	bne.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fd4:	f107 0318 	add.w	r3, r7, #24
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 fcab 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fe2:	f000 bc88 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fea:	f000 bc84 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fee:	4b2b      	ldr	r3, [pc, #172]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ff6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ffa:	d108      	bne.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ffc:	f107 030c 	add.w	r3, r7, #12
 8007000:	4618      	mov	r0, r3
 8007002:	f000 fdeb 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800700a:	f000 bc74 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007012:	f000 bc70 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007016:	4b21      	ldr	r3, [pc, #132]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800701a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800701e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007020:	4b1e      	ldr	r3, [pc, #120]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b04      	cmp	r3, #4
 800702a:	d10c      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800702c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800702e:	2b00      	cmp	r3, #0
 8007030:	d109      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007032:	4b1a      	ldr	r3, [pc, #104]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	08db      	lsrs	r3, r3, #3
 8007038:	f003 0303 	and.w	r3, r3, #3
 800703c:	4a18      	ldr	r2, [pc, #96]	@ (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800703e:	fa22 f303 	lsr.w	r3, r2, r3
 8007042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007044:	e01f      	b.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007046:	4b15      	ldr	r3, [pc, #84]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800704e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007052:	d106      	bne.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007056:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800705a:	d102      	bne.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800705c:	4b11      	ldr	r3, [pc, #68]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800705e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007060:	e011      	b.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007062:	4b0e      	ldr	r3, [pc, #56]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800706a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800706e:	d106      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007072:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007076:	d102      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007078:	4b0b      	ldr	r3, [pc, #44]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800707a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800707c:	e003      	b.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800707e:	2300      	movs	r3, #0
 8007080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007082:	f000 bc38 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007086:	f000 bc36 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800708a:	4b08      	ldr	r3, [pc, #32]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800708c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800708e:	f000 bc32 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007092:	2300      	movs	r3, #0
 8007094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007096:	f000 bc2e 	b.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800709a:	bf00      	nop
 800709c:	58024400 	.word	0x58024400
 80070a0:	03d09000 	.word	0x03d09000
 80070a4:	003d0900 	.word	0x003d0900
 80070a8:	017d7840 	.word	0x017d7840
 80070ac:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80070b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070b4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80070b8:	430b      	orrs	r3, r1
 80070ba:	f040 809c 	bne.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80070be:	4b9e      	ldr	r3, [pc, #632]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070c2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80070c6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80070c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070ce:	d054      	beq.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80070d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070d6:	f200 808b 	bhi.w	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80070da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070dc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80070e0:	f000 8083 	beq.w	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80070e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80070ea:	f200 8081 	bhi.w	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80070ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070f4:	d02f      	beq.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80070f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070fc:	d878      	bhi.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80070fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007100:	2b00      	cmp	r3, #0
 8007102:	d004      	beq.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007106:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800710a:	d012      	beq.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800710c:	e070      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800710e:	4b8a      	ldr	r3, [pc, #552]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007116:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800711a:	d107      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800711c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007120:	4618      	mov	r0, r3
 8007122:	f000 feaf 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800712a:	e3e4      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800712c:	2300      	movs	r3, #0
 800712e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007130:	e3e1      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007132:	4b81      	ldr	r3, [pc, #516]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800713a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800713e:	d107      	bne.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007140:	f107 0318 	add.w	r3, r7, #24
 8007144:	4618      	mov	r0, r3
 8007146:	f000 fbf5 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800714e:	e3d2      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007150:	2300      	movs	r3, #0
 8007152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007154:	e3cf      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007156:	4b78      	ldr	r3, [pc, #480]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800715e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007162:	d107      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007164:	f107 030c 	add.w	r3, r7, #12
 8007168:	4618      	mov	r0, r3
 800716a:	f000 fd37 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007172:	e3c0      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007178:	e3bd      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800717a:	4b6f      	ldr	r3, [pc, #444]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800717c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800717e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007182:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007184:	4b6c      	ldr	r3, [pc, #432]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b04      	cmp	r3, #4
 800718e:	d10c      	bne.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007192:	2b00      	cmp	r3, #0
 8007194:	d109      	bne.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007196:	4b68      	ldr	r3, [pc, #416]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	08db      	lsrs	r3, r3, #3
 800719c:	f003 0303 	and.w	r3, r3, #3
 80071a0:	4a66      	ldr	r2, [pc, #408]	@ (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80071a2:	fa22 f303 	lsr.w	r3, r2, r3
 80071a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071a8:	e01e      	b.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071aa:	4b63      	ldr	r3, [pc, #396]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071b6:	d106      	bne.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80071b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071be:	d102      	bne.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80071c0:	4b5f      	ldr	r3, [pc, #380]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80071c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071c4:	e010      	b.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071c6:	4b5c      	ldr	r3, [pc, #368]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071d2:	d106      	bne.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80071d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071da:	d102      	bne.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80071dc:	4b59      	ldr	r3, [pc, #356]	@ (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80071de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071e0:	e002      	b.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80071e2:	2300      	movs	r3, #0
 80071e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80071e6:	e386      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071e8:	e385      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80071ea:	4b57      	ldr	r3, [pc, #348]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80071ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071ee:	e382      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071f4:	e37f      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80071f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071fa:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80071fe:	430b      	orrs	r3, r1
 8007200:	f040 80a7 	bne.w	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007204:	4b4c      	ldr	r3, [pc, #304]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007208:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800720c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800720e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007210:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007214:	d055      	beq.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800721c:	f200 8096 	bhi.w	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007222:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007226:	f000 8084 	beq.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800722a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007230:	f200 808c 	bhi.w	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007236:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800723a:	d030      	beq.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800723c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007242:	f200 8083 	bhi.w	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007248:	2b00      	cmp	r3, #0
 800724a:	d004      	beq.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800724c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007252:	d012      	beq.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007254:	e07a      	b.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007256:	4b38      	ldr	r3, [pc, #224]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800725e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007262:	d107      	bne.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007268:	4618      	mov	r0, r3
 800726a:	f000 fe0b 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800726e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007272:	e340      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007274:	2300      	movs	r3, #0
 8007276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007278:	e33d      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800727a:	4b2f      	ldr	r3, [pc, #188]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007282:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007286:	d107      	bne.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007288:	f107 0318 	add.w	r3, r7, #24
 800728c:	4618      	mov	r0, r3
 800728e:	f000 fb51 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007296:	e32e      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800729c:	e32b      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800729e:	4b26      	ldr	r3, [pc, #152]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072aa:	d107      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072ac:	f107 030c 	add.w	r3, r7, #12
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fc93 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072ba:	e31c      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072bc:	2300      	movs	r3, #0
 80072be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072c0:	e319      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80072ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0304 	and.w	r3, r3, #4
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	d10c      	bne.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80072d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d109      	bne.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072de:	4b16      	ldr	r3, [pc, #88]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	08db      	lsrs	r3, r3, #3
 80072e4:	f003 0303 	and.w	r3, r3, #3
 80072e8:	4a14      	ldr	r2, [pc, #80]	@ (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80072ea:	fa22 f303 	lsr.w	r3, r2, r3
 80072ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072f0:	e01e      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072f2:	4b11      	ldr	r3, [pc, #68]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072fe:	d106      	bne.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007302:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007306:	d102      	bne.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007308:	4b0d      	ldr	r3, [pc, #52]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800730a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800730c:	e010      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800730e:	4b0a      	ldr	r3, [pc, #40]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007316:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800731a:	d106      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800731c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007322:	d102      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007324:	4b07      	ldr	r3, [pc, #28]	@ (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007328:	e002      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800732a:	2300      	movs	r3, #0
 800732c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800732e:	e2e2      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007330:	e2e1      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007332:	4b05      	ldr	r3, [pc, #20]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007336:	e2de      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007338:	58024400 	.word	0x58024400
 800733c:	03d09000 	.word	0x03d09000
 8007340:	003d0900 	.word	0x003d0900
 8007344:	017d7840 	.word	0x017d7840
 8007348:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800734c:	2300      	movs	r3, #0
 800734e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007350:	e2d1      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007352:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007356:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800735a:	430b      	orrs	r3, r1
 800735c:	f040 809c 	bne.w	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007360:	4b93      	ldr	r3, [pc, #588]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007364:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007368:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800736a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007370:	d054      	beq.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007374:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007378:	f200 808b 	bhi.w	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800737c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007382:	f000 8083 	beq.w	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007388:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800738c:	f200 8081 	bhi.w	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007396:	d02f      	beq.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800739a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800739e:	d878      	bhi.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80073a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d004      	beq.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80073a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ac:	d012      	beq.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80073ae:	e070      	b.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073b0:	4b7f      	ldr	r3, [pc, #508]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073bc:	d107      	bne.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fd5e 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073cc:	e293      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073d2:	e290      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073d4:	4b76      	ldr	r3, [pc, #472]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073e0:	d107      	bne.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073e2:	f107 0318 	add.w	r3, r7, #24
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 faa4 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073f0:	e281      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073f2:	2300      	movs	r3, #0
 80073f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073f6:	e27e      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073f8:	4b6d      	ldr	r3, [pc, #436]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007400:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007404:	d107      	bne.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007406:	f107 030c 	add.w	r3, r7, #12
 800740a:	4618      	mov	r0, r3
 800740c:	f000 fbe6 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007414:	e26f      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007416:	2300      	movs	r3, #0
 8007418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800741a:	e26c      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800741c:	4b64      	ldr	r3, [pc, #400]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800741e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007420:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007424:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007426:	4b62      	ldr	r3, [pc, #392]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0304 	and.w	r3, r3, #4
 800742e:	2b04      	cmp	r3, #4
 8007430:	d10c      	bne.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007434:	2b00      	cmp	r3, #0
 8007436:	d109      	bne.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007438:	4b5d      	ldr	r3, [pc, #372]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	08db      	lsrs	r3, r3, #3
 800743e:	f003 0303 	and.w	r3, r3, #3
 8007442:	4a5c      	ldr	r2, [pc, #368]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007444:	fa22 f303 	lsr.w	r3, r2, r3
 8007448:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800744a:	e01e      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800744c:	4b58      	ldr	r3, [pc, #352]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007454:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007458:	d106      	bne.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800745a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800745c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007460:	d102      	bne.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007462:	4b55      	ldr	r3, [pc, #340]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007464:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007466:	e010      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007468:	4b51      	ldr	r3, [pc, #324]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007470:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007474:	d106      	bne.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800747c:	d102      	bne.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800747e:	4b4f      	ldr	r3, [pc, #316]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007480:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007482:	e002      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007484:	2300      	movs	r3, #0
 8007486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007488:	e235      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800748a:	e234      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800748c:	4b4c      	ldr	r3, [pc, #304]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800748e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007490:	e231      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007496:	e22e      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800749c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80074a0:	430b      	orrs	r3, r1
 80074a2:	f040 808f 	bne.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80074a6:	4b42      	ldr	r3, [pc, #264]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074aa:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80074ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80074b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074b6:	d06b      	beq.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80074b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074be:	d874      	bhi.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074c6:	d056      	beq.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80074c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074ce:	d86c      	bhi.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074d6:	d03b      	beq.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80074d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074de:	d864      	bhi.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074e6:	d021      	beq.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80074e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074ee:	d85c      	bhi.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d004      	beq.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80074f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074fc:	d004      	beq.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80074fe:	e054      	b.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007500:	f7fe fa20 	bl	8005944 <HAL_RCC_GetPCLK1Freq>
 8007504:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007506:	e1f6      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007508:	4b29      	ldr	r3, [pc, #164]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007510:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007514:	d107      	bne.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007516:	f107 0318 	add.w	r3, r7, #24
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fa0a 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007524:	e1e7      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800752a:	e1e4      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800752c:	4b20      	ldr	r3, [pc, #128]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007538:	d107      	bne.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800753a:	f107 030c 	add.w	r3, r7, #12
 800753e:	4618      	mov	r0, r3
 8007540:	f000 fb4c 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007548:	e1d5      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800754a:	2300      	movs	r3, #0
 800754c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800754e:	e1d2      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007550:	4b17      	ldr	r3, [pc, #92]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0304 	and.w	r3, r3, #4
 8007558:	2b04      	cmp	r3, #4
 800755a:	d109      	bne.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800755c:	4b14      	ldr	r3, [pc, #80]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	08db      	lsrs	r3, r3, #3
 8007562:	f003 0303 	and.w	r3, r3, #3
 8007566:	4a13      	ldr	r2, [pc, #76]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007568:	fa22 f303 	lsr.w	r3, r2, r3
 800756c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800756e:	e1c2      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007570:	2300      	movs	r3, #0
 8007572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007574:	e1bf      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007576:	4b0e      	ldr	r3, [pc, #56]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800757e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007582:	d102      	bne.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007584:	4b0c      	ldr	r3, [pc, #48]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007588:	e1b5      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800758a:	2300      	movs	r3, #0
 800758c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800758e:	e1b2      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007590:	4b07      	ldr	r3, [pc, #28]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007598:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800759c:	d102      	bne.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800759e:	4b07      	ldr	r3, [pc, #28]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80075a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075a2:	e1a8      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075a8:	e1a5      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80075aa:	2300      	movs	r3, #0
 80075ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ae:	e1a2      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80075b0:	58024400 	.word	0x58024400
 80075b4:	03d09000 	.word	0x03d09000
 80075b8:	003d0900 	.word	0x003d0900
 80075bc:	017d7840 	.word	0x017d7840
 80075c0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80075c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80075cc:	430b      	orrs	r3, r1
 80075ce:	d173      	bne.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80075d0:	4b9c      	ldr	r3, [pc, #624]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80075d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80075da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075e0:	d02f      	beq.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80075e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075e8:	d863      	bhi.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80075ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d004      	beq.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80075f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075f6:	d012      	beq.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80075f8:	e05b      	b.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075fa:	4b92      	ldr	r3, [pc, #584]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007602:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007606:	d107      	bne.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007608:	f107 0318 	add.w	r3, r7, #24
 800760c:	4618      	mov	r0, r3
 800760e:	f000 f991 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007616:	e16e      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007618:	2300      	movs	r3, #0
 800761a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800761c:	e16b      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800761e:	4b89      	ldr	r3, [pc, #548]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007626:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800762a:	d107      	bne.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800762c:	f107 030c 	add.w	r3, r7, #12
 8007630:	4618      	mov	r0, r3
 8007632:	f000 fad3 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800763a:	e15c      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800763c:	2300      	movs	r3, #0
 800763e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007640:	e159      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007642:	4b80      	ldr	r3, [pc, #512]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007646:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800764a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800764c:	4b7d      	ldr	r3, [pc, #500]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b04      	cmp	r3, #4
 8007656:	d10c      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800765a:	2b00      	cmp	r3, #0
 800765c:	d109      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800765e:	4b79      	ldr	r3, [pc, #484]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	08db      	lsrs	r3, r3, #3
 8007664:	f003 0303 	and.w	r3, r3, #3
 8007668:	4a77      	ldr	r2, [pc, #476]	@ (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800766a:	fa22 f303 	lsr.w	r3, r2, r3
 800766e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007670:	e01e      	b.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007672:	4b74      	ldr	r3, [pc, #464]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800767a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800767e:	d106      	bne.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007682:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007686:	d102      	bne.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007688:	4b70      	ldr	r3, [pc, #448]	@ (800784c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800768a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800768c:	e010      	b.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800768e:	4b6d      	ldr	r3, [pc, #436]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007696:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800769a:	d106      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800769c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800769e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076a2:	d102      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80076a4:	4b6a      	ldr	r3, [pc, #424]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80076a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076a8:	e002      	b.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80076ae:	e122      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076b0:	e121      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076b6:	e11e      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80076b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076bc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80076c0:	430b      	orrs	r3, r1
 80076c2:	d133      	bne.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80076c4:	4b5f      	ldr	r3, [pc, #380]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80076ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d004      	beq.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80076d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076da:	d012      	beq.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80076dc:	e023      	b.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076de:	4b59      	ldr	r3, [pc, #356]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076ea:	d107      	bne.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 fbc7 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076fa:	e0fc      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007700:	e0f9      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007702:	4b50      	ldr	r3, [pc, #320]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800770a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800770e:	d107      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007710:	f107 0318 	add.w	r3, r7, #24
 8007714:	4618      	mov	r0, r3
 8007716:	f000 f90d 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800771e:	e0ea      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007720:	2300      	movs	r3, #0
 8007722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007724:	e0e7      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007726:	2300      	movs	r3, #0
 8007728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800772a:	e0e4      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800772c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007730:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007734:	430b      	orrs	r3, r1
 8007736:	f040 808d 	bne.w	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800773a:	4b42      	ldr	r3, [pc, #264]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800773c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800773e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007742:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007746:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800774a:	d06b      	beq.n	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800774c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007752:	d874      	bhi.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800775a:	d056      	beq.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800775c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007762:	d86c      	bhi.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007766:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800776a:	d03b      	beq.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800776c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007772:	d864      	bhi.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800777a:	d021      	beq.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800777c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007782:	d85c      	bhi.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007786:	2b00      	cmp	r3, #0
 8007788:	d004      	beq.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800778a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007790:	d004      	beq.n	800779c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007792:	e054      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007794:	f000 f8b8 	bl	8007908 <HAL_RCCEx_GetD3PCLK1Freq>
 8007798:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800779a:	e0ac      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800779c:	4b29      	ldr	r3, [pc, #164]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077a8:	d107      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077aa:	f107 0318 	add.w	r3, r7, #24
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 f8c0 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077b8:	e09d      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077be:	e09a      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077c0:	4b20      	ldr	r3, [pc, #128]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077cc:	d107      	bne.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077ce:	f107 030c 	add.w	r3, r7, #12
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 fa02 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077dc:	e08b      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077e2:	e088      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077e4:	4b17      	ldr	r3, [pc, #92]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	d109      	bne.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077f0:	4b14      	ldr	r3, [pc, #80]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	08db      	lsrs	r3, r3, #3
 80077f6:	f003 0303 	and.w	r3, r3, #3
 80077fa:	4a13      	ldr	r2, [pc, #76]	@ (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80077fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007802:	e078      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007808:	e075      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800780a:	4b0e      	ldr	r3, [pc, #56]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007816:	d102      	bne.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007818:	4b0c      	ldr	r3, [pc, #48]	@ (800784c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800781a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800781c:	e06b      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007822:	e068      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007824:	4b07      	ldr	r3, [pc, #28]	@ (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800782c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007830:	d102      	bne.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007832:	4b07      	ldr	r3, [pc, #28]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007836:	e05e      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007838:	2300      	movs	r3, #0
 800783a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800783c:	e05b      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007842:	e058      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007844:	58024400 	.word	0x58024400
 8007848:	03d09000 	.word	0x03d09000
 800784c:	003d0900 	.word	0x003d0900
 8007850:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007858:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800785c:	430b      	orrs	r3, r1
 800785e:	d148      	bne.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007860:	4b27      	ldr	r3, [pc, #156]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007864:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007868:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800786a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007870:	d02a      	beq.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007874:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007878:	d838      	bhi.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800787a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787c:	2b00      	cmp	r3, #0
 800787e:	d004      	beq.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007882:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007886:	d00d      	beq.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007888:	e030      	b.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800788a:	4b1d      	ldr	r3, [pc, #116]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007892:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007896:	d102      	bne.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007898:	4b1a      	ldr	r3, [pc, #104]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800789a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800789c:	e02b      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800789e:	2300      	movs	r3, #0
 80078a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078a2:	e028      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078a4:	4b16      	ldr	r3, [pc, #88]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078b0:	d107      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 fae4 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078c0:	e019      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078c2:	2300      	movs	r3, #0
 80078c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078c6:	e016      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078d4:	d107      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078d6:	f107 0318 	add.w	r3, r7, #24
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 f82a 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078e4:	e007      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078e6:	2300      	movs	r3, #0
 80078e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ea:	e004      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80078ec:	2300      	movs	r3, #0
 80078ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078f0:	e001      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80078f2:	2300      	movs	r3, #0
 80078f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80078f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3740      	adds	r7, #64	@ 0x40
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	58024400 	.word	0x58024400
 8007904:	017d7840 	.word	0x017d7840

08007908 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800790c:	f7fd ffea 	bl	80058e4 <HAL_RCC_GetHCLKFreq>
 8007910:	4602      	mov	r2, r0
 8007912:	4b06      	ldr	r3, [pc, #24]	@ (800792c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	091b      	lsrs	r3, r3, #4
 8007918:	f003 0307 	and.w	r3, r3, #7
 800791c:	4904      	ldr	r1, [pc, #16]	@ (8007930 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800791e:	5ccb      	ldrb	r3, [r1, r3]
 8007920:	f003 031f 	and.w	r3, r3, #31
 8007924:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007928:	4618      	mov	r0, r3
 800792a:	bd80      	pop	{r7, pc}
 800792c:	58024400 	.word	0x58024400
 8007930:	08012650 	.word	0x08012650

08007934 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007934:	b480      	push	{r7}
 8007936:	b089      	sub	sp, #36	@ 0x24
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800793c:	4ba1      	ldr	r3, [pc, #644]	@ (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800793e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007940:	f003 0303 	and.w	r3, r3, #3
 8007944:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007946:	4b9f      	ldr	r3, [pc, #636]	@ (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800794a:	0b1b      	lsrs	r3, r3, #12
 800794c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007950:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007952:	4b9c      	ldr	r3, [pc, #624]	@ (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007956:	091b      	lsrs	r3, r3, #4
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800795e:	4b99      	ldr	r3, [pc, #612]	@ (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007962:	08db      	lsrs	r3, r3, #3
 8007964:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	fb02 f303 	mul.w	r3, r2, r3
 800796e:	ee07 3a90 	vmov	s15, r3
 8007972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007976:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 8111 	beq.w	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	2b02      	cmp	r3, #2
 8007986:	f000 8083 	beq.w	8007a90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	2b02      	cmp	r3, #2
 800798e:	f200 80a1 	bhi.w	8007ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d003      	beq.n	80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d056      	beq.n	8007a4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800799e:	e099      	b.n	8007ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079a0:	4b88      	ldr	r3, [pc, #544]	@ (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0320 	and.w	r3, r3, #32
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d02d      	beq.n	8007a08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079ac:	4b85      	ldr	r3, [pc, #532]	@ (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	08db      	lsrs	r3, r3, #3
 80079b2:	f003 0303 	and.w	r3, r3, #3
 80079b6:	4a84      	ldr	r2, [pc, #528]	@ (8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80079b8:	fa22 f303 	lsr.w	r3, r2, r3
 80079bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	ee07 3a90 	vmov	s15, r3
 80079c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	ee07 3a90 	vmov	s15, r3
 80079ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d6:	4b7b      	ldr	r3, [pc, #492]	@ (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079de:	ee07 3a90 	vmov	s15, r3
 80079e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a06:	e087      	b.n	8007b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	ee07 3a90 	vmov	s15, r3
 8007a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a1a:	4b6a      	ldr	r3, [pc, #424]	@ (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a22:	ee07 3a90 	vmov	s15, r3
 8007a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a4a:	e065      	b.n	8007b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	ee07 3a90 	vmov	s15, r3
 8007a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a5e:	4b59      	ldr	r3, [pc, #356]	@ (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a66:	ee07 3a90 	vmov	s15, r3
 8007a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a8e:	e043      	b.n	8007b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aa2:	4b48      	ldr	r3, [pc, #288]	@ (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aaa:	ee07 3a90 	vmov	s15, r3
 8007aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ab6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ad2:	e021      	b.n	8007b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	ee07 3a90 	vmov	s15, r3
 8007ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ade:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ae6:	4b37      	ldr	r3, [pc, #220]	@ (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aee:	ee07 3a90 	vmov	s15, r3
 8007af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007afa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007b18:	4b2a      	ldr	r3, [pc, #168]	@ (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b1c:	0a5b      	lsrs	r3, r3, #9
 8007b1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b22:	ee07 3a90 	vmov	s15, r3
 8007b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b32:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b3e:	ee17 2a90 	vmov	r2, s15
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007b46:	4b1f      	ldr	r3, [pc, #124]	@ (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b4a:	0c1b      	lsrs	r3, r3, #16
 8007b4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b50:	ee07 3a90 	vmov	s15, r3
 8007b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b60:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b6c:	ee17 2a90 	vmov	r2, s15
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007b74:	4b13      	ldr	r3, [pc, #76]	@ (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b78:	0e1b      	lsrs	r3, r3, #24
 8007b7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b7e:	ee07 3a90 	vmov	s15, r3
 8007b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b9a:	ee17 2a90 	vmov	r2, s15
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	609a      	str	r2, [r3, #8]
}
 8007bb6:	bf00      	nop
 8007bb8:	3724      	adds	r7, #36	@ 0x24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	58024400 	.word	0x58024400
 8007bc8:	03d09000 	.word	0x03d09000
 8007bcc:	46000000 	.word	0x46000000
 8007bd0:	4c742400 	.word	0x4c742400
 8007bd4:	4a742400 	.word	0x4a742400
 8007bd8:	4bbebc20 	.word	0x4bbebc20

08007bdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b089      	sub	sp, #36	@ 0x24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007be4:	4ba1      	ldr	r3, [pc, #644]	@ (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007bee:	4b9f      	ldr	r3, [pc, #636]	@ (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf2:	0d1b      	lsrs	r3, r3, #20
 8007bf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bf8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007bfa:	4b9c      	ldr	r3, [pc, #624]	@ (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfe:	0a1b      	lsrs	r3, r3, #8
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007c06:	4b99      	ldr	r3, [pc, #612]	@ (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c0a:	08db      	lsrs	r3, r3, #3
 8007c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	fb02 f303 	mul.w	r3, r2, r3
 8007c16:	ee07 3a90 	vmov	s15, r3
 8007c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 8111 	beq.w	8007e4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	f000 8083 	beq.w	8007d38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	f200 80a1 	bhi.w	8007d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d056      	beq.n	8007cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007c46:	e099      	b.n	8007d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c48:	4b88      	ldr	r3, [pc, #544]	@ (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0320 	and.w	r3, r3, #32
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d02d      	beq.n	8007cb0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c54:	4b85      	ldr	r3, [pc, #532]	@ (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	08db      	lsrs	r3, r3, #3
 8007c5a:	f003 0303 	and.w	r3, r3, #3
 8007c5e:	4a84      	ldr	r2, [pc, #528]	@ (8007e70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007c60:	fa22 f303 	lsr.w	r3, r2, r3
 8007c64:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	ee07 3a90 	vmov	s15, r3
 8007c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c7e:	4b7b      	ldr	r3, [pc, #492]	@ (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c92:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007caa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007cae:	e087      	b.n	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	ee07 3a90 	vmov	s15, r3
 8007cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cca:	ee07 3a90 	vmov	s15, r3
 8007cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cd6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cf2:	e065      	b.n	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	ee07 3a90 	vmov	s15, r3
 8007cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cfe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007e7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d06:	4b59      	ldr	r3, [pc, #356]	@ (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0e:	ee07 3a90 	vmov	s15, r3
 8007d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d1a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d36:	e043      	b.n	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	ee07 3a90 	vmov	s15, r3
 8007d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d42:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d4a:	4b48      	ldr	r3, [pc, #288]	@ (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d52:	ee07 3a90 	vmov	s15, r3
 8007d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d5e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d7a:	e021      	b.n	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	ee07 3a90 	vmov	s15, r3
 8007d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d86:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007e7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d8e:	4b37      	ldr	r3, [pc, #220]	@ (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d96:	ee07 3a90 	vmov	s15, r3
 8007d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007da2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dbe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dc4:	0a5b      	lsrs	r3, r3, #9
 8007dc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dca:	ee07 3a90 	vmov	s15, r3
 8007dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007de6:	ee17 2a90 	vmov	r2, s15
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007dee:	4b1f      	ldr	r3, [pc, #124]	@ (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df2:	0c1b      	lsrs	r3, r3, #16
 8007df4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007df8:	ee07 3a90 	vmov	s15, r3
 8007dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e14:	ee17 2a90 	vmov	r2, s15
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007e1c:	4b13      	ldr	r3, [pc, #76]	@ (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e20:	0e1b      	lsrs	r3, r3, #24
 8007e22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e26:	ee07 3a90 	vmov	s15, r3
 8007e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e42:	ee17 2a90 	vmov	r2, s15
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007e4a:	e008      	b.n	8007e5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	609a      	str	r2, [r3, #8]
}
 8007e5e:	bf00      	nop
 8007e60:	3724      	adds	r7, #36	@ 0x24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	58024400 	.word	0x58024400
 8007e70:	03d09000 	.word	0x03d09000
 8007e74:	46000000 	.word	0x46000000
 8007e78:	4c742400 	.word	0x4c742400
 8007e7c:	4a742400 	.word	0x4a742400
 8007e80:	4bbebc20 	.word	0x4bbebc20

08007e84 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b089      	sub	sp, #36	@ 0x24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e8c:	4ba0      	ldr	r3, [pc, #640]	@ (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e90:	f003 0303 	and.w	r3, r3, #3
 8007e94:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007e96:	4b9e      	ldr	r3, [pc, #632]	@ (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e9a:	091b      	lsrs	r3, r3, #4
 8007e9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ea0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007ea2:	4b9b      	ldr	r3, [pc, #620]	@ (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007eac:	4b98      	ldr	r3, [pc, #608]	@ (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eb0:	08db      	lsrs	r3, r3, #3
 8007eb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	fb02 f303 	mul.w	r3, r2, r3
 8007ebc:	ee07 3a90 	vmov	s15, r3
 8007ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 8111 	beq.w	80080f2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	f000 8083 	beq.w	8007fde <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	f200 80a1 	bhi.w	8008022 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d003      	beq.n	8007eee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d056      	beq.n	8007f9a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007eec:	e099      	b.n	8008022 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eee:	4b88      	ldr	r3, [pc, #544]	@ (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0320 	and.w	r3, r3, #32
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d02d      	beq.n	8007f56 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007efa:	4b85      	ldr	r3, [pc, #532]	@ (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	08db      	lsrs	r3, r3, #3
 8007f00:	f003 0303 	and.w	r3, r3, #3
 8007f04:	4a83      	ldr	r2, [pc, #524]	@ (8008114 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007f06:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	ee07 3a90 	vmov	s15, r3
 8007f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	ee07 3a90 	vmov	s15, r3
 8007f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f24:	4b7a      	ldr	r3, [pc, #488]	@ (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2c:	ee07 3a90 	vmov	s15, r3
 8007f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f34:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f38:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f50:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f54:	e087      	b.n	8008066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	ee07 3a90 	vmov	s15, r3
 8007f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f60:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800811c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f68:	4b69      	ldr	r3, [pc, #420]	@ (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f70:	ee07 3a90 	vmov	s15, r3
 8007f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f78:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f7c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f98:	e065      	b.n	8008066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	ee07 3a90 	vmov	s15, r3
 8007fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008120 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fac:	4b58      	ldr	r3, [pc, #352]	@ (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb4:	ee07 3a90 	vmov	s15, r3
 8007fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fc0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fdc:	e043      	b.n	8008066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	ee07 3a90 	vmov	s15, r3
 8007fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008124 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ff0:	4b47      	ldr	r3, [pc, #284]	@ (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff8:	ee07 3a90 	vmov	s15, r3
 8007ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008000:	ed97 6a03 	vldr	s12, [r7, #12]
 8008004:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800800c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008010:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800801c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008020:	e021      	b.n	8008066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	ee07 3a90 	vmov	s15, r3
 8008028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800811c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008034:	4b36      	ldr	r3, [pc, #216]	@ (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800803c:	ee07 3a90 	vmov	s15, r3
 8008040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008044:	ed97 6a03 	vldr	s12, [r7, #12]
 8008048:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800804c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008054:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800805c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008060:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008064:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008066:	4b2a      	ldr	r3, [pc, #168]	@ (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800806a:	0a5b      	lsrs	r3, r3, #9
 800806c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008070:	ee07 3a90 	vmov	s15, r3
 8008074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008078:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800807c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008080:	edd7 6a07 	vldr	s13, [r7, #28]
 8008084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800808c:	ee17 2a90 	vmov	r2, s15
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008094:	4b1e      	ldr	r3, [pc, #120]	@ (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008098:	0c1b      	lsrs	r3, r3, #16
 800809a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800809e:	ee07 3a90 	vmov	s15, r3
 80080a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80080b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080ba:	ee17 2a90 	vmov	r2, s15
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80080c2:	4b13      	ldr	r3, [pc, #76]	@ (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c6:	0e1b      	lsrs	r3, r3, #24
 80080c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080cc:	ee07 3a90 	vmov	s15, r3
 80080d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80080e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080e8:	ee17 2a90 	vmov	r2, s15
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80080f0:	e008      	b.n	8008104 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	609a      	str	r2, [r3, #8]
}
 8008104:	bf00      	nop
 8008106:	3724      	adds	r7, #36	@ 0x24
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	58024400 	.word	0x58024400
 8008114:	03d09000 	.word	0x03d09000
 8008118:	46000000 	.word	0x46000000
 800811c:	4c742400 	.word	0x4c742400
 8008120:	4a742400 	.word	0x4a742400
 8008124:	4bbebc20 	.word	0x4bbebc20

08008128 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008136:	4b53      	ldr	r3, [pc, #332]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 8008138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813a:	f003 0303 	and.w	r3, r3, #3
 800813e:	2b03      	cmp	r3, #3
 8008140:	d101      	bne.n	8008146 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e099      	b.n	800827a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008146:	4b4f      	ldr	r3, [pc, #316]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a4e      	ldr	r2, [pc, #312]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 800814c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008152:	f7f9 fc9f 	bl	8001a94 <HAL_GetTick>
 8008156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008158:	e008      	b.n	800816c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800815a:	f7f9 fc9b 	bl	8001a94 <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	2b02      	cmp	r3, #2
 8008166:	d901      	bls.n	800816c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e086      	b.n	800827a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800816c:	4b45      	ldr	r3, [pc, #276]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1f0      	bne.n	800815a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008178:	4b42      	ldr	r3, [pc, #264]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 800817a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800817c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	031b      	lsls	r3, r3, #12
 8008186:	493f      	ldr	r1, [pc, #252]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 8008188:	4313      	orrs	r3, r2
 800818a:	628b      	str	r3, [r1, #40]	@ 0x28
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	3b01      	subs	r3, #1
 8008192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	3b01      	subs	r3, #1
 800819c:	025b      	lsls	r3, r3, #9
 800819e:	b29b      	uxth	r3, r3
 80081a0:	431a      	orrs	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	041b      	lsls	r3, r3, #16
 80081aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80081ae:	431a      	orrs	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	061b      	lsls	r3, r3, #24
 80081b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081bc:	4931      	ldr	r1, [pc, #196]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80081c2:	4b30      	ldr	r3, [pc, #192]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 80081c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	492d      	ldr	r1, [pc, #180]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80081d4:	4b2b      	ldr	r3, [pc, #172]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 80081d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d8:	f023 0220 	bic.w	r2, r3, #32
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	4928      	ldr	r1, [pc, #160]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80081e6:	4b27      	ldr	r3, [pc, #156]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 80081e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ea:	4a26      	ldr	r2, [pc, #152]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 80081ec:	f023 0310 	bic.w	r3, r3, #16
 80081f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80081f2:	4b24      	ldr	r3, [pc, #144]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 80081f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081f6:	4b24      	ldr	r3, [pc, #144]	@ (8008288 <RCCEx_PLL2_Config+0x160>)
 80081f8:	4013      	ands	r3, r2
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	69d2      	ldr	r2, [r2, #28]
 80081fe:	00d2      	lsls	r2, r2, #3
 8008200:	4920      	ldr	r1, [pc, #128]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 8008202:	4313      	orrs	r3, r2
 8008204:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008206:	4b1f      	ldr	r3, [pc, #124]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 8008208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820a:	4a1e      	ldr	r2, [pc, #120]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 800820c:	f043 0310 	orr.w	r3, r3, #16
 8008210:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d106      	bne.n	8008226 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008218:	4b1a      	ldr	r3, [pc, #104]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 800821a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821c:	4a19      	ldr	r2, [pc, #100]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 800821e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008222:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008224:	e00f      	b.n	8008246 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d106      	bne.n	800823a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800822c:	4b15      	ldr	r3, [pc, #84]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 800822e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008230:	4a14      	ldr	r2, [pc, #80]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 8008232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008236:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008238:	e005      	b.n	8008246 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800823a:	4b12      	ldr	r3, [pc, #72]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 800823c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823e:	4a11      	ldr	r2, [pc, #68]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 8008240:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008244:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008246:	4b0f      	ldr	r3, [pc, #60]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a0e      	ldr	r2, [pc, #56]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 800824c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008252:	f7f9 fc1f 	bl	8001a94 <HAL_GetTick>
 8008256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008258:	e008      	b.n	800826c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800825a:	f7f9 fc1b 	bl	8001a94 <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	2b02      	cmp	r3, #2
 8008266:	d901      	bls.n	800826c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e006      	b.n	800827a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800826c:	4b05      	ldr	r3, [pc, #20]	@ (8008284 <RCCEx_PLL2_Config+0x15c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d0f0      	beq.n	800825a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008278:	7bfb      	ldrb	r3, [r7, #15]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	58024400 	.word	0x58024400
 8008288:	ffff0007 	.word	0xffff0007

0800828c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800829a:	4b53      	ldr	r3, [pc, #332]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 800829c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800829e:	f003 0303 	and.w	r3, r3, #3
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d101      	bne.n	80082aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e099      	b.n	80083de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082aa:	4b4f      	ldr	r3, [pc, #316]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a4e      	ldr	r2, [pc, #312]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80082b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082b6:	f7f9 fbed 	bl	8001a94 <HAL_GetTick>
 80082ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082bc:	e008      	b.n	80082d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80082be:	f7f9 fbe9 	bl	8001a94 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d901      	bls.n	80082d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e086      	b.n	80083de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082d0:	4b45      	ldr	r3, [pc, #276]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1f0      	bne.n	80082be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082dc:	4b42      	ldr	r3, [pc, #264]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80082de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	051b      	lsls	r3, r3, #20
 80082ea:	493f      	ldr	r1, [pc, #252]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	3b01      	subs	r3, #1
 80082f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	3b01      	subs	r3, #1
 8008300:	025b      	lsls	r3, r3, #9
 8008302:	b29b      	uxth	r3, r3
 8008304:	431a      	orrs	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	3b01      	subs	r3, #1
 800830c:	041b      	lsls	r3, r3, #16
 800830e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008312:	431a      	orrs	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	3b01      	subs	r3, #1
 800831a:	061b      	lsls	r3, r3, #24
 800831c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008320:	4931      	ldr	r1, [pc, #196]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008322:	4313      	orrs	r3, r2
 8008324:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008326:	4b30      	ldr	r3, [pc, #192]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800832a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	492d      	ldr	r1, [pc, #180]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008334:	4313      	orrs	r3, r2
 8008336:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008338:	4b2b      	ldr	r3, [pc, #172]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 800833a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	4928      	ldr	r1, [pc, #160]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008346:	4313      	orrs	r3, r2
 8008348:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800834a:	4b27      	ldr	r3, [pc, #156]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 800834c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834e:	4a26      	ldr	r2, [pc, #152]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008354:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008356:	4b24      	ldr	r3, [pc, #144]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008358:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800835a:	4b24      	ldr	r3, [pc, #144]	@ (80083ec <RCCEx_PLL3_Config+0x160>)
 800835c:	4013      	ands	r3, r2
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	69d2      	ldr	r2, [r2, #28]
 8008362:	00d2      	lsls	r2, r2, #3
 8008364:	4920      	ldr	r1, [pc, #128]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008366:	4313      	orrs	r3, r2
 8008368:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800836a:	4b1f      	ldr	r3, [pc, #124]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 800836c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800836e:	4a1e      	ldr	r2, [pc, #120]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008374:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d106      	bne.n	800838a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800837c:	4b1a      	ldr	r3, [pc, #104]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 800837e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008380:	4a19      	ldr	r2, [pc, #100]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008382:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008386:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008388:	e00f      	b.n	80083aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d106      	bne.n	800839e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008390:	4b15      	ldr	r3, [pc, #84]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008394:	4a14      	ldr	r2, [pc, #80]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008396:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800839a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800839c:	e005      	b.n	80083aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800839e:	4b12      	ldr	r3, [pc, #72]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80083a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a2:	4a11      	ldr	r2, [pc, #68]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80083a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083aa:	4b0f      	ldr	r3, [pc, #60]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a0e      	ldr	r2, [pc, #56]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80083b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083b6:	f7f9 fb6d 	bl	8001a94 <HAL_GetTick>
 80083ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083bc:	e008      	b.n	80083d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80083be:	f7f9 fb69 	bl	8001a94 <HAL_GetTick>
 80083c2:	4602      	mov	r2, r0
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d901      	bls.n	80083d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e006      	b.n	80083de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083d0:	4b05      	ldr	r3, [pc, #20]	@ (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d0f0      	beq.n	80083be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	58024400 	.word	0x58024400
 80083ec:	ffff0007 	.word	0xffff0007

080083f0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e10f      	b.n	8008622 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a87      	ldr	r2, [pc, #540]	@ (800862c <HAL_SPI_Init+0x23c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d00f      	beq.n	8008432 <HAL_SPI_Init+0x42>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a86      	ldr	r2, [pc, #536]	@ (8008630 <HAL_SPI_Init+0x240>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d00a      	beq.n	8008432 <HAL_SPI_Init+0x42>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a84      	ldr	r2, [pc, #528]	@ (8008634 <HAL_SPI_Init+0x244>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d005      	beq.n	8008432 <HAL_SPI_Init+0x42>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	2b0f      	cmp	r3, #15
 800842c:	d901      	bls.n	8008432 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e0f7      	b.n	8008622 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fe2e 	bl	8009094 <SPI_GetPacketSize>
 8008438:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a7b      	ldr	r2, [pc, #492]	@ (800862c <HAL_SPI_Init+0x23c>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d00c      	beq.n	800845e <HAL_SPI_Init+0x6e>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a79      	ldr	r2, [pc, #484]	@ (8008630 <HAL_SPI_Init+0x240>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d007      	beq.n	800845e <HAL_SPI_Init+0x6e>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a78      	ldr	r2, [pc, #480]	@ (8008634 <HAL_SPI_Init+0x244>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d002      	beq.n	800845e <HAL_SPI_Init+0x6e>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2b08      	cmp	r3, #8
 800845c:	d811      	bhi.n	8008482 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008462:	4a72      	ldr	r2, [pc, #456]	@ (800862c <HAL_SPI_Init+0x23c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d009      	beq.n	800847c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a70      	ldr	r2, [pc, #448]	@ (8008630 <HAL_SPI_Init+0x240>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d004      	beq.n	800847c <HAL_SPI_Init+0x8c>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a6f      	ldr	r2, [pc, #444]	@ (8008634 <HAL_SPI_Init+0x244>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d104      	bne.n	8008486 <HAL_SPI_Init+0x96>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b10      	cmp	r3, #16
 8008480:	d901      	bls.n	8008486 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e0cd      	b.n	8008622 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d106      	bne.n	80084a0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f7f8 fe26 	bl	80010ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2202      	movs	r2, #2
 80084a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f022 0201 	bic.w	r2, r2, #1
 80084b6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80084c2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80084cc:	d119      	bne.n	8008502 <HAL_SPI_Init+0x112>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084d6:	d103      	bne.n	80084e0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d008      	beq.n	80084f2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10c      	bne.n	8008502 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80084ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084f0:	d107      	bne.n	8008502 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008500:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00f      	beq.n	800852e <HAL_SPI_Init+0x13e>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	2b06      	cmp	r3, #6
 8008514:	d90b      	bls.n	800852e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	e007      	b.n	800853e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800853c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	69da      	ldr	r2, [r3, #28]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008546:	431a      	orrs	r2, r3
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	431a      	orrs	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008550:	ea42 0103 	orr.w	r1, r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	68da      	ldr	r2, [r3, #12]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	430a      	orrs	r2, r1
 800855e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008568:	431a      	orrs	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800856e:	431a      	orrs	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	431a      	orrs	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	431a      	orrs	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	695b      	ldr	r3, [r3, #20]
 8008580:	431a      	orrs	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	431a      	orrs	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	431a      	orrs	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008592:	431a      	orrs	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	431a      	orrs	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800859e:	ea42 0103 	orr.w	r1, r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d113      	bne.n	80085de <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085c8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80085dc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f022 0201 	bic.w	r2, r2, #1
 80085ec:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00a      	beq.n	8008610 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	430a      	orrs	r2, r1
 800860e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	40013000 	.word	0x40013000
 8008630:	40003800 	.word	0x40003800
 8008634:	40003c00 	.word	0x40003c00

08008638 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af02      	add	r7, sp, #8
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	603b      	str	r3, [r7, #0]
 8008644:	4613      	mov	r3, r2
 8008646:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3320      	adds	r3, #32
 800864e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008650:	f7f9 fa20 	bl	8001a94 <HAL_GetTick>
 8008654:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b01      	cmp	r3, #1
 8008660:	d001      	beq.n	8008666 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8008662:	2302      	movs	r3, #2
 8008664:	e1d1      	b.n	8008a0a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <HAL_SPI_Transmit+0x3a>
 800866c:	88fb      	ldrh	r3, [r7, #6]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d101      	bne.n	8008676 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e1c9      	b.n	8008a0a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800867c:	2b01      	cmp	r3, #1
 800867e:	d101      	bne.n	8008684 <HAL_SPI_Transmit+0x4c>
 8008680:	2302      	movs	r3, #2
 8008682:	e1c2      	b.n	8008a0a <HAL_SPI_Transmit+0x3d2>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2203      	movs	r2, #3
 8008690:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	88fa      	ldrh	r2, [r7, #6]
 80086a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	88fa      	ldrh	r2, [r7, #6]
 80086ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80086dc:	d108      	bne.n	80086f0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	e009      	b.n	8008704 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008702:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685a      	ldr	r2, [r3, #4]
 800870a:	4b96      	ldr	r3, [pc, #600]	@ (8008964 <HAL_SPI_Transmit+0x32c>)
 800870c:	4013      	ands	r3, r2
 800870e:	88f9      	ldrh	r1, [r7, #6]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	6812      	ldr	r2, [r2, #0]
 8008714:	430b      	orrs	r3, r1
 8008716:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f042 0201 	orr.w	r2, r2, #1
 8008726:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008730:	d107      	bne.n	8008742 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008740:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	2b0f      	cmp	r3, #15
 8008748:	d947      	bls.n	80087da <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800874a:	e03f      	b.n	80087cc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	f003 0302 	and.w	r3, r3, #2
 8008756:	2b02      	cmp	r3, #2
 8008758:	d114      	bne.n	8008784 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	6812      	ldr	r2, [r2, #0]
 8008764:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800876a:	1d1a      	adds	r2, r3, #4
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008776:	b29b      	uxth	r3, r3
 8008778:	3b01      	subs	r3, #1
 800877a:	b29a      	uxth	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008782:	e023      	b.n	80087cc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008784:	f7f9 f986 	bl	8001a94 <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	429a      	cmp	r2, r3
 8008792:	d803      	bhi.n	800879c <HAL_SPI_Transmit+0x164>
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879a:	d102      	bne.n	80087a2 <HAL_SPI_Transmit+0x16a>
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d114      	bne.n	80087cc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f000 fba8 	bl	8008ef8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e11e      	b.n	8008a0a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1b9      	bne.n	800874c <HAL_SPI_Transmit+0x114>
 80087d8:	e0f1      	b.n	80089be <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	2b07      	cmp	r3, #7
 80087e0:	f240 80e6 	bls.w	80089b0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80087e4:	e05d      	b.n	80088a2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	f003 0302 	and.w	r3, r3, #2
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d132      	bne.n	800885a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d918      	bls.n	8008832 <HAL_SPI_Transmit+0x1fa>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008804:	2b00      	cmp	r3, #0
 8008806:	d014      	beq.n	8008832 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6812      	ldr	r2, [r2, #0]
 8008812:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008818:	1d1a      	adds	r2, r3, #4
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008824:	b29b      	uxth	r3, r3
 8008826:	3b02      	subs	r3, #2
 8008828:	b29a      	uxth	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008830:	e037      	b.n	80088a2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008836:	881a      	ldrh	r2, [r3, #0]
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008840:	1c9a      	adds	r2, r3, #2
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800884c:	b29b      	uxth	r3, r3
 800884e:	3b01      	subs	r3, #1
 8008850:	b29a      	uxth	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008858:	e023      	b.n	80088a2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800885a:	f7f9 f91b 	bl	8001a94 <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	429a      	cmp	r2, r3
 8008868:	d803      	bhi.n	8008872 <HAL_SPI_Transmit+0x23a>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008870:	d102      	bne.n	8008878 <HAL_SPI_Transmit+0x240>
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d114      	bne.n	80088a2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 fb3d 	bl	8008ef8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008884:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e0b3      	b.n	8008a0a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d19b      	bne.n	80087e6 <HAL_SPI_Transmit+0x1ae>
 80088ae:	e086      	b.n	80089be <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	f003 0302 	and.w	r3, r3, #2
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d154      	bne.n	8008968 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d918      	bls.n	80088fc <HAL_SPI_Transmit+0x2c4>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ce:	2b40      	cmp	r3, #64	@ 0x40
 80088d0:	d914      	bls.n	80088fc <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6812      	ldr	r2, [r2, #0]
 80088dc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088e2:	1d1a      	adds	r2, r3, #4
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	3b04      	subs	r3, #4
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80088fa:	e059      	b.n	80089b0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008902:	b29b      	uxth	r3, r3
 8008904:	2b01      	cmp	r3, #1
 8008906:	d917      	bls.n	8008938 <HAL_SPI_Transmit+0x300>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800890c:	2b00      	cmp	r3, #0
 800890e:	d013      	beq.n	8008938 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008914:	881a      	ldrh	r2, [r3, #0]
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800891e:	1c9a      	adds	r2, r3, #2
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800892a:	b29b      	uxth	r3, r3
 800892c:	3b02      	subs	r3, #2
 800892e:	b29a      	uxth	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008936:	e03b      	b.n	80089b0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3320      	adds	r3, #32
 8008942:	7812      	ldrb	r2, [r2, #0]
 8008944:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800894a:	1c5a      	adds	r2, r3, #1
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008956:	b29b      	uxth	r3, r3
 8008958:	3b01      	subs	r3, #1
 800895a:	b29a      	uxth	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008962:	e025      	b.n	80089b0 <HAL_SPI_Transmit+0x378>
 8008964:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008968:	f7f9 f894 	bl	8001a94 <HAL_GetTick>
 800896c:	4602      	mov	r2, r0
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	429a      	cmp	r2, r3
 8008976:	d803      	bhi.n	8008980 <HAL_SPI_Transmit+0x348>
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897e:	d102      	bne.n	8008986 <HAL_SPI_Transmit+0x34e>
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d114      	bne.n	80089b0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f000 fab6 	bl	8008ef8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008992:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e02c      	b.n	8008a0a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f47f af79 	bne.w	80088b0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	2200      	movs	r2, #0
 80089c6:	2108      	movs	r1, #8
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 fb35 	bl	8009038 <SPI_WaitOnFlagUntilTimeout>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d007      	beq.n	80089e4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089da:	f043 0220 	orr.w	r2, r3, #32
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f000 fa87 	bl	8008ef8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e000      	b.n	8008a0a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008a08:	2300      	movs	r3, #0
  }
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3718      	adds	r7, #24
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop

08008a14 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b088      	sub	sp, #32
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	603b      	str	r3, [r7, #0]
 8008a20:	4613      	mov	r3, r2
 8008a22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a28:	095b      	lsrs	r3, r3, #5
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	3330      	adds	r3, #48	@ 0x30
 8008a36:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a38:	f7f9 f82c 	bl	8001a94 <HAL_GetTick>
 8008a3c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d001      	beq.n	8008a4e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e250      	b.n	8008ef0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <HAL_SPI_Receive+0x46>
 8008a54:	88fb      	ldrh	r3, [r7, #6]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d101      	bne.n	8008a5e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e248      	b.n	8008ef0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d101      	bne.n	8008a6c <HAL_SPI_Receive+0x58>
 8008a68:	2302      	movs	r3, #2
 8008a6a:	e241      	b.n	8008ef0 <HAL_SPI_Receive+0x4dc>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2204      	movs	r2, #4
 8008a78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	88fa      	ldrh	r2, [r7, #6]
 8008a8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	88fa      	ldrh	r2, [r7, #6]
 8008a96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008ac4:	d108      	bne.n	8008ad8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	e009      	b.n	8008aec <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008aea:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	4b95      	ldr	r3, [pc, #596]	@ (8008d48 <HAL_SPI_Receive+0x334>)
 8008af4:	4013      	ands	r3, r2
 8008af6:	88f9      	ldrh	r1, [r7, #6]
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	6812      	ldr	r2, [r2, #0]
 8008afc:	430b      	orrs	r3, r1
 8008afe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f042 0201 	orr.w	r2, r2, #1
 8008b0e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b18:	d107      	bne.n	8008b2a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b28:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	2b0f      	cmp	r3, #15
 8008b30:	d96c      	bls.n	8008c0c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008b32:	e064      	b.n	8008bfe <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d114      	bne.n	8008b74 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b52:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008b54:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b5a:	1d1a      	adds	r2, r3, #4
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008b72:	e044      	b.n	8008bfe <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	8bfa      	ldrh	r2, [r7, #30]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d919      	bls.n	8008bb6 <HAL_SPI_Receive+0x1a2>
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d014      	beq.n	8008bb6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b94:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008b96:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b9c:	1d1a      	adds	r2, r3, #4
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	3b01      	subs	r3, #1
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008bb4:	e023      	b.n	8008bfe <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bb6:	f7f8 ff6d 	bl	8001a94 <HAL_GetTick>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	683a      	ldr	r2, [r7, #0]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d803      	bhi.n	8008bce <HAL_SPI_Receive+0x1ba>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bcc:	d102      	bne.n	8008bd4 <HAL_SPI_Receive+0x1c0>
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d114      	bne.n	8008bfe <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f000 f98f 	bl	8008ef8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008be0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e178      	b.n	8008ef0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d194      	bne.n	8008b34 <HAL_SPI_Receive+0x120>
 8008c0a:	e15e      	b.n	8008eca <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	2b07      	cmp	r3, #7
 8008c12:	f240 8153 	bls.w	8008ebc <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008c16:	e08f      	b.n	8008d38 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d114      	bne.n	8008c58 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c32:	69ba      	ldr	r2, [r7, #24]
 8008c34:	8812      	ldrh	r2, [r2, #0]
 8008c36:	b292      	uxth	r2, r2
 8008c38:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c3e:	1c9a      	adds	r2, r3, #2
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008c56:	e06f      	b.n	8008d38 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	8bfa      	ldrh	r2, [r7, #30]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d924      	bls.n	8008cb0 <HAL_SPI_Receive+0x29c>
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d01f      	beq.n	8008cb0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	8812      	ldrh	r2, [r2, #0]
 8008c78:	b292      	uxth	r2, r2
 8008c7a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c80:	1c9a      	adds	r2, r3, #2
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	8812      	ldrh	r2, [r2, #0]
 8008c8e:	b292      	uxth	r2, r2
 8008c90:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c96:	1c9a      	adds	r2, r3, #2
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	3b02      	subs	r3, #2
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008cae:	e043      	b.n	8008d38 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d119      	bne.n	8008cf0 <HAL_SPI_Receive+0x2dc>
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d014      	beq.n	8008cf0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	8812      	ldrh	r2, [r2, #0]
 8008cce:	b292      	uxth	r2, r2
 8008cd0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cd6:	1c9a      	adds	r2, r3, #2
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008cee:	e023      	b.n	8008d38 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cf0:	f7f8 fed0 	bl	8001a94 <HAL_GetTick>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d803      	bhi.n	8008d08 <HAL_SPI_Receive+0x2f4>
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d06:	d102      	bne.n	8008d0e <HAL_SPI_Receive+0x2fa>
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d114      	bne.n	8008d38 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 f8f2 	bl	8008ef8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e0db      	b.n	8008ef0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f47f af69 	bne.w	8008c18 <HAL_SPI_Receive+0x204>
 8008d46:	e0c0      	b.n	8008eca <HAL_SPI_Receive+0x4b6>
 8008d48:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d117      	bne.n	8008d92 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d6e:	7812      	ldrb	r2, [r2, #0]
 8008d70:	b2d2      	uxtb	r2, r2
 8008d72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d78:	1c5a      	adds	r2, r3, #1
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	3b01      	subs	r3, #1
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008d90:	e094      	b.n	8008ebc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	8bfa      	ldrh	r2, [r7, #30]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d946      	bls.n	8008e2e <HAL_SPI_Receive+0x41a>
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d041      	beq.n	8008e2e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008db6:	7812      	ldrb	r2, [r2, #0]
 8008db8:	b2d2      	uxtb	r2, r2
 8008dba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dd2:	7812      	ldrb	r2, [r2, #0]
 8008dd4:	b2d2      	uxtb	r2, r2
 8008dd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ddc:	1c5a      	adds	r2, r3, #1
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dee:	7812      	ldrb	r2, [r2, #0]
 8008df0:	b2d2      	uxtb	r2, r2
 8008df2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e0a:	7812      	ldrb	r2, [r2, #0]
 8008e0c:	b2d2      	uxtb	r2, r2
 8008e0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e14:	1c5a      	adds	r2, r3, #1
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	3b04      	subs	r3, #4
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008e2c:	e046      	b.n	8008ebc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	2b03      	cmp	r3, #3
 8008e38:	d81c      	bhi.n	8008e74 <HAL_SPI_Receive+0x460>
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d017      	beq.n	8008e74 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e50:	7812      	ldrb	r2, [r2, #0]
 8008e52:	b2d2      	uxtb	r2, r2
 8008e54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e5a:	1c5a      	adds	r2, r3, #1
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008e72:	e023      	b.n	8008ebc <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e74:	f7f8 fe0e 	bl	8001a94 <HAL_GetTick>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d803      	bhi.n	8008e8c <HAL_SPI_Receive+0x478>
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8a:	d102      	bne.n	8008e92 <HAL_SPI_Receive+0x47e>
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d114      	bne.n	8008ebc <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f000 f830 	bl	8008ef8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e019      	b.n	8008ef0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f47f af41 	bne.w	8008d4c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 f814 	bl	8008ef8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d001      	beq.n	8008eee <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e000      	b.n	8008ef0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8008eee:	2300      	movs	r3, #0
  }
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3720      	adds	r7, #32
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	695b      	ldr	r3, [r3, #20]
 8008f06:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	699a      	ldr	r2, [r3, #24]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f042 0208 	orr.w	r2, r2, #8
 8008f16:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	699a      	ldr	r2, [r3, #24]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f042 0210 	orr.w	r2, r2, #16
 8008f26:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f022 0201 	bic.w	r2, r2, #1
 8008f36:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6919      	ldr	r1, [r3, #16]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	4b3c      	ldr	r3, [pc, #240]	@ (8009034 <SPI_CloseTransfer+0x13c>)
 8008f44:	400b      	ands	r3, r1
 8008f46:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008f56:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b04      	cmp	r3, #4
 8008f62:	d014      	beq.n	8008f8e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f003 0320 	and.w	r3, r3, #32
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00f      	beq.n	8008f8e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	699a      	ldr	r2, [r3, #24]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f042 0220 	orr.w	r2, r2, #32
 8008f8c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d014      	beq.n	8008fc4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00f      	beq.n	8008fc4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008faa:	f043 0204 	orr.w	r2, r3, #4
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	699a      	ldr	r2, [r3, #24]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fc2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00f      	beq.n	8008fee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fd4:	f043 0201 	orr.w	r2, r3, #1
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	699a      	ldr	r2, [r3, #24]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008fec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00f      	beq.n	8009018 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ffe:	f043 0208 	orr.w	r2, r3, #8
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	699a      	ldr	r2, [r3, #24]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009016:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009028:	bf00      	nop
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	fffffc90 	.word	0xfffffc90

08009038 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	603b      	str	r3, [r7, #0]
 8009044:	4613      	mov	r3, r2
 8009046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009048:	e010      	b.n	800906c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800904a:	f7f8 fd23 	bl	8001a94 <HAL_GetTick>
 800904e:	4602      	mov	r2, r0
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	429a      	cmp	r2, r3
 8009058:	d803      	bhi.n	8009062 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009060:	d102      	bne.n	8009068 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d101      	bne.n	800906c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e00f      	b.n	800908c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	695a      	ldr	r2, [r3, #20]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	4013      	ands	r3, r2
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	429a      	cmp	r2, r3
 800907a:	bf0c      	ite	eq
 800907c:	2301      	moveq	r3, #1
 800907e:	2300      	movne	r3, #0
 8009080:	b2db      	uxtb	r3, r3
 8009082:	461a      	mov	r2, r3
 8009084:	79fb      	ldrb	r3, [r7, #7]
 8009086:	429a      	cmp	r2, r3
 8009088:	d0df      	beq.n	800904a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090a0:	095b      	lsrs	r3, r3, #5
 80090a2:	3301      	adds	r3, #1
 80090a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	3301      	adds	r3, #1
 80090ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	3307      	adds	r3, #7
 80090b2:	08db      	lsrs	r3, r3, #3
 80090b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	fb02 f303 	mul.w	r3, r2, r3
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3714      	adds	r7, #20
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr

080090ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e049      	b.n	8009170 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d106      	bne.n	80090f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7f8 fbbb 	bl	800186c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2202      	movs	r2, #2
 80090fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	3304      	adds	r3, #4
 8009106:	4619      	mov	r1, r3
 8009108:	4610      	mov	r0, r2
 800910a:	f000 fd59 	bl	8009bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2201      	movs	r2, #1
 8009122:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2201      	movs	r2, #1
 800913a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2201      	movs	r2, #1
 8009162:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009186:	b2db      	uxtb	r3, r3
 8009188:	2b01      	cmp	r3, #1
 800918a:	d001      	beq.n	8009190 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	e054      	b.n	800923a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2202      	movs	r2, #2
 8009194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68da      	ldr	r2, [r3, #12]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f042 0201 	orr.w	r2, r2, #1
 80091a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a26      	ldr	r2, [pc, #152]	@ (8009248 <HAL_TIM_Base_Start_IT+0xd0>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d022      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091ba:	d01d      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a22      	ldr	r2, [pc, #136]	@ (800924c <HAL_TIM_Base_Start_IT+0xd4>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d018      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a21      	ldr	r2, [pc, #132]	@ (8009250 <HAL_TIM_Base_Start_IT+0xd8>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d013      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a1f      	ldr	r2, [pc, #124]	@ (8009254 <HAL_TIM_Base_Start_IT+0xdc>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d00e      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a1e      	ldr	r2, [pc, #120]	@ (8009258 <HAL_TIM_Base_Start_IT+0xe0>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d009      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a1c      	ldr	r2, [pc, #112]	@ (800925c <HAL_TIM_Base_Start_IT+0xe4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d004      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a1b      	ldr	r2, [pc, #108]	@ (8009260 <HAL_TIM_Base_Start_IT+0xe8>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d115      	bne.n	8009224 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	689a      	ldr	r2, [r3, #8]
 80091fe:	4b19      	ldr	r3, [pc, #100]	@ (8009264 <HAL_TIM_Base_Start_IT+0xec>)
 8009200:	4013      	ands	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2b06      	cmp	r3, #6
 8009208:	d015      	beq.n	8009236 <HAL_TIM_Base_Start_IT+0xbe>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009210:	d011      	beq.n	8009236 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f042 0201 	orr.w	r2, r2, #1
 8009220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009222:	e008      	b.n	8009236 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f042 0201 	orr.w	r2, r2, #1
 8009232:	601a      	str	r2, [r3, #0]
 8009234:	e000      	b.n	8009238 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009236:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	40010000 	.word	0x40010000
 800924c:	40000400 	.word	0x40000400
 8009250:	40000800 	.word	0x40000800
 8009254:	40000c00 	.word	0x40000c00
 8009258:	40010400 	.word	0x40010400
 800925c:	40001800 	.word	0x40001800
 8009260:	40014000 	.word	0x40014000
 8009264:	00010007 	.word	0x00010007

08009268 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e049      	b.n	800930e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	d106      	bne.n	8009294 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f841 	bl	8009316 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2202      	movs	r2, #2
 8009298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	3304      	adds	r3, #4
 80092a4:	4619      	mov	r1, r3
 80092a6:	4610      	mov	r0, r2
 80092a8:	f000 fc8a 	bl	8009bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009316:	b480      	push	{r7}
 8009318:	b083      	sub	sp, #12
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800931e:	bf00      	nop
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
	...

0800932c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d109      	bne.n	8009350 <HAL_TIM_PWM_Start+0x24>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b01      	cmp	r3, #1
 8009346:	bf14      	ite	ne
 8009348:	2301      	movne	r3, #1
 800934a:	2300      	moveq	r3, #0
 800934c:	b2db      	uxtb	r3, r3
 800934e:	e03c      	b.n	80093ca <HAL_TIM_PWM_Start+0x9e>
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	2b04      	cmp	r3, #4
 8009354:	d109      	bne.n	800936a <HAL_TIM_PWM_Start+0x3e>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b01      	cmp	r3, #1
 8009360:	bf14      	ite	ne
 8009362:	2301      	movne	r3, #1
 8009364:	2300      	moveq	r3, #0
 8009366:	b2db      	uxtb	r3, r3
 8009368:	e02f      	b.n	80093ca <HAL_TIM_PWM_Start+0x9e>
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2b08      	cmp	r3, #8
 800936e:	d109      	bne.n	8009384 <HAL_TIM_PWM_Start+0x58>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b01      	cmp	r3, #1
 800937a:	bf14      	ite	ne
 800937c:	2301      	movne	r3, #1
 800937e:	2300      	moveq	r3, #0
 8009380:	b2db      	uxtb	r3, r3
 8009382:	e022      	b.n	80093ca <HAL_TIM_PWM_Start+0x9e>
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	2b0c      	cmp	r3, #12
 8009388:	d109      	bne.n	800939e <HAL_TIM_PWM_Start+0x72>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b01      	cmp	r3, #1
 8009394:	bf14      	ite	ne
 8009396:	2301      	movne	r3, #1
 8009398:	2300      	moveq	r3, #0
 800939a:	b2db      	uxtb	r3, r3
 800939c:	e015      	b.n	80093ca <HAL_TIM_PWM_Start+0x9e>
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2b10      	cmp	r3, #16
 80093a2:	d109      	bne.n	80093b8 <HAL_TIM_PWM_Start+0x8c>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	bf14      	ite	ne
 80093b0:	2301      	movne	r3, #1
 80093b2:	2300      	moveq	r3, #0
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	e008      	b.n	80093ca <HAL_TIM_PWM_Start+0x9e>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	bf14      	ite	ne
 80093c4:	2301      	movne	r3, #1
 80093c6:	2300      	moveq	r3, #0
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e0a1      	b.n	8009516 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d104      	bne.n	80093e2 <HAL_TIM_PWM_Start+0xb6>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2202      	movs	r2, #2
 80093dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80093e0:	e023      	b.n	800942a <HAL_TIM_PWM_Start+0xfe>
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	2b04      	cmp	r3, #4
 80093e6:	d104      	bne.n	80093f2 <HAL_TIM_PWM_Start+0xc6>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2202      	movs	r2, #2
 80093ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80093f0:	e01b      	b.n	800942a <HAL_TIM_PWM_Start+0xfe>
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2b08      	cmp	r3, #8
 80093f6:	d104      	bne.n	8009402 <HAL_TIM_PWM_Start+0xd6>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2202      	movs	r2, #2
 80093fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009400:	e013      	b.n	800942a <HAL_TIM_PWM_Start+0xfe>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	2b0c      	cmp	r3, #12
 8009406:	d104      	bne.n	8009412 <HAL_TIM_PWM_Start+0xe6>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2202      	movs	r2, #2
 800940c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009410:	e00b      	b.n	800942a <HAL_TIM_PWM_Start+0xfe>
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	2b10      	cmp	r3, #16
 8009416:	d104      	bne.n	8009422 <HAL_TIM_PWM_Start+0xf6>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2202      	movs	r2, #2
 800941c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009420:	e003      	b.n	800942a <HAL_TIM_PWM_Start+0xfe>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2202      	movs	r2, #2
 8009426:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2201      	movs	r2, #1
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	4618      	mov	r0, r3
 8009434:	f000 ffde 	bl	800a3f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a38      	ldr	r2, [pc, #224]	@ (8009520 <HAL_TIM_PWM_Start+0x1f4>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d013      	beq.n	800946a <HAL_TIM_PWM_Start+0x13e>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a37      	ldr	r2, [pc, #220]	@ (8009524 <HAL_TIM_PWM_Start+0x1f8>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d00e      	beq.n	800946a <HAL_TIM_PWM_Start+0x13e>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a35      	ldr	r2, [pc, #212]	@ (8009528 <HAL_TIM_PWM_Start+0x1fc>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d009      	beq.n	800946a <HAL_TIM_PWM_Start+0x13e>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a34      	ldr	r2, [pc, #208]	@ (800952c <HAL_TIM_PWM_Start+0x200>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d004      	beq.n	800946a <HAL_TIM_PWM_Start+0x13e>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a32      	ldr	r2, [pc, #200]	@ (8009530 <HAL_TIM_PWM_Start+0x204>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d101      	bne.n	800946e <HAL_TIM_PWM_Start+0x142>
 800946a:	2301      	movs	r3, #1
 800946c:	e000      	b.n	8009470 <HAL_TIM_PWM_Start+0x144>
 800946e:	2300      	movs	r3, #0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d007      	beq.n	8009484 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009482:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a25      	ldr	r2, [pc, #148]	@ (8009520 <HAL_TIM_PWM_Start+0x1f4>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d022      	beq.n	80094d4 <HAL_TIM_PWM_Start+0x1a8>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009496:	d01d      	beq.n	80094d4 <HAL_TIM_PWM_Start+0x1a8>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a25      	ldr	r2, [pc, #148]	@ (8009534 <HAL_TIM_PWM_Start+0x208>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d018      	beq.n	80094d4 <HAL_TIM_PWM_Start+0x1a8>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a24      	ldr	r2, [pc, #144]	@ (8009538 <HAL_TIM_PWM_Start+0x20c>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d013      	beq.n	80094d4 <HAL_TIM_PWM_Start+0x1a8>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a22      	ldr	r2, [pc, #136]	@ (800953c <HAL_TIM_PWM_Start+0x210>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d00e      	beq.n	80094d4 <HAL_TIM_PWM_Start+0x1a8>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a1a      	ldr	r2, [pc, #104]	@ (8009524 <HAL_TIM_PWM_Start+0x1f8>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d009      	beq.n	80094d4 <HAL_TIM_PWM_Start+0x1a8>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a1e      	ldr	r2, [pc, #120]	@ (8009540 <HAL_TIM_PWM_Start+0x214>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d004      	beq.n	80094d4 <HAL_TIM_PWM_Start+0x1a8>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a16      	ldr	r2, [pc, #88]	@ (8009528 <HAL_TIM_PWM_Start+0x1fc>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d115      	bne.n	8009500 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	689a      	ldr	r2, [r3, #8]
 80094da:	4b1a      	ldr	r3, [pc, #104]	@ (8009544 <HAL_TIM_PWM_Start+0x218>)
 80094dc:	4013      	ands	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2b06      	cmp	r3, #6
 80094e4:	d015      	beq.n	8009512 <HAL_TIM_PWM_Start+0x1e6>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094ec:	d011      	beq.n	8009512 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f042 0201 	orr.w	r2, r2, #1
 80094fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094fe:	e008      	b.n	8009512 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f042 0201 	orr.w	r2, r2, #1
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	e000      	b.n	8009514 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009512:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	40010000 	.word	0x40010000
 8009524:	40010400 	.word	0x40010400
 8009528:	40014000 	.word	0x40014000
 800952c:	40014400 	.word	0x40014400
 8009530:	40014800 	.word	0x40014800
 8009534:	40000400 	.word	0x40000400
 8009538:	40000800 	.word	0x40000800
 800953c:	40000c00 	.word	0x40000c00
 8009540:	40001800 	.word	0x40001800
 8009544:	00010007 	.word	0x00010007

08009548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	f003 0302 	and.w	r3, r3, #2
 8009566:	2b00      	cmp	r3, #0
 8009568:	d020      	beq.n	80095ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f003 0302 	and.w	r3, r3, #2
 8009570:	2b00      	cmp	r3, #0
 8009572:	d01b      	beq.n	80095ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f06f 0202 	mvn.w	r2, #2
 800957c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2201      	movs	r2, #1
 8009582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	f003 0303 	and.w	r3, r3, #3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d003      	beq.n	800959a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 faf6 	bl	8009b84 <HAL_TIM_IC_CaptureCallback>
 8009598:	e005      	b.n	80095a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fae8 	bl	8009b70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 faf9 	bl	8009b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	f003 0304 	and.w	r3, r3, #4
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d020      	beq.n	80095f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f003 0304 	and.w	r3, r3, #4
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d01b      	beq.n	80095f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f06f 0204 	mvn.w	r2, #4
 80095c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2202      	movs	r2, #2
 80095ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d003      	beq.n	80095e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fad0 	bl	8009b84 <HAL_TIM_IC_CaptureCallback>
 80095e4:	e005      	b.n	80095f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fac2 	bl	8009b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 fad3 	bl	8009b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	f003 0308 	and.w	r3, r3, #8
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d020      	beq.n	8009644 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f003 0308 	and.w	r3, r3, #8
 8009608:	2b00      	cmp	r3, #0
 800960a:	d01b      	beq.n	8009644 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f06f 0208 	mvn.w	r2, #8
 8009614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2204      	movs	r2, #4
 800961a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	69db      	ldr	r3, [r3, #28]
 8009622:	f003 0303 	and.w	r3, r3, #3
 8009626:	2b00      	cmp	r3, #0
 8009628:	d003      	beq.n	8009632 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 faaa 	bl	8009b84 <HAL_TIM_IC_CaptureCallback>
 8009630:	e005      	b.n	800963e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fa9c 	bl	8009b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 faad 	bl	8009b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	f003 0310 	and.w	r3, r3, #16
 800964a:	2b00      	cmp	r3, #0
 800964c:	d020      	beq.n	8009690 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f003 0310 	and.w	r3, r3, #16
 8009654:	2b00      	cmp	r3, #0
 8009656:	d01b      	beq.n	8009690 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f06f 0210 	mvn.w	r2, #16
 8009660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2208      	movs	r2, #8
 8009666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	69db      	ldr	r3, [r3, #28]
 800966e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fa84 	bl	8009b84 <HAL_TIM_IC_CaptureCallback>
 800967c:	e005      	b.n	800968a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fa76 	bl	8009b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fa87 	bl	8009b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	f003 0301 	and.w	r3, r3, #1
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00c      	beq.n	80096b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f003 0301 	and.w	r3, r3, #1
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d007      	beq.n	80096b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f06f 0201 	mvn.w	r2, #1
 80096ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7f7 fc54 	bl	8000f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d104      	bne.n	80096c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00c      	beq.n	80096e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d007      	beq.n	80096e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80096da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 ffc5 	bl	800a66c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00c      	beq.n	8009706 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d007      	beq.n	8009706 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80096fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 ffbd 	bl	800a680 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00c      	beq.n	800972a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009716:	2b00      	cmp	r3, #0
 8009718:	d007      	beq.n	800972a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fa41 	bl	8009bac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	f003 0320 	and.w	r3, r3, #32
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00c      	beq.n	800974e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f003 0320 	and.w	r3, r3, #32
 800973a:	2b00      	cmp	r3, #0
 800973c:	d007      	beq.n	800974e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f06f 0220 	mvn.w	r2, #32
 8009746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 ff85 	bl	800a658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800974e:	bf00      	nop
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
	...

08009758 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800976e:	2b01      	cmp	r3, #1
 8009770:	d101      	bne.n	8009776 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009772:	2302      	movs	r3, #2
 8009774:	e0ff      	b.n	8009976 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2201      	movs	r2, #1
 800977a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2b14      	cmp	r3, #20
 8009782:	f200 80f0 	bhi.w	8009966 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009786:	a201      	add	r2, pc, #4	@ (adr r2, 800978c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978c:	080097e1 	.word	0x080097e1
 8009790:	08009967 	.word	0x08009967
 8009794:	08009967 	.word	0x08009967
 8009798:	08009967 	.word	0x08009967
 800979c:	08009821 	.word	0x08009821
 80097a0:	08009967 	.word	0x08009967
 80097a4:	08009967 	.word	0x08009967
 80097a8:	08009967 	.word	0x08009967
 80097ac:	08009863 	.word	0x08009863
 80097b0:	08009967 	.word	0x08009967
 80097b4:	08009967 	.word	0x08009967
 80097b8:	08009967 	.word	0x08009967
 80097bc:	080098a3 	.word	0x080098a3
 80097c0:	08009967 	.word	0x08009967
 80097c4:	08009967 	.word	0x08009967
 80097c8:	08009967 	.word	0x08009967
 80097cc:	080098e5 	.word	0x080098e5
 80097d0:	08009967 	.word	0x08009967
 80097d4:	08009967 	.word	0x08009967
 80097d8:	08009967 	.word	0x08009967
 80097dc:	08009925 	.word	0x08009925
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68b9      	ldr	r1, [r7, #8]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 fa90 	bl	8009d0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	699a      	ldr	r2, [r3, #24]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f042 0208 	orr.w	r2, r2, #8
 80097fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	699a      	ldr	r2, [r3, #24]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f022 0204 	bic.w	r2, r2, #4
 800980a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6999      	ldr	r1, [r3, #24]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	691a      	ldr	r2, [r3, #16]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	430a      	orrs	r2, r1
 800981c:	619a      	str	r2, [r3, #24]
      break;
 800981e:	e0a5      	b.n	800996c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68b9      	ldr	r1, [r7, #8]
 8009826:	4618      	mov	r0, r3
 8009828:	f000 fb00 	bl	8009e2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	699a      	ldr	r2, [r3, #24]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800983a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	699a      	ldr	r2, [r3, #24]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800984a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6999      	ldr	r1, [r3, #24]
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	021a      	lsls	r2, r3, #8
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	430a      	orrs	r2, r1
 800985e:	619a      	str	r2, [r3, #24]
      break;
 8009860:	e084      	b.n	800996c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68b9      	ldr	r1, [r7, #8]
 8009868:	4618      	mov	r0, r3
 800986a:	f000 fb69 	bl	8009f40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	69da      	ldr	r2, [r3, #28]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f042 0208 	orr.w	r2, r2, #8
 800987c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	69da      	ldr	r2, [r3, #28]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f022 0204 	bic.w	r2, r2, #4
 800988c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	69d9      	ldr	r1, [r3, #28]
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	691a      	ldr	r2, [r3, #16]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	430a      	orrs	r2, r1
 800989e:	61da      	str	r2, [r3, #28]
      break;
 80098a0:	e064      	b.n	800996c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68b9      	ldr	r1, [r7, #8]
 80098a8:	4618      	mov	r0, r3
 80098aa:	f000 fbd1 	bl	800a050 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	69da      	ldr	r2, [r3, #28]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	69da      	ldr	r2, [r3, #28]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	69d9      	ldr	r1, [r3, #28]
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	021a      	lsls	r2, r3, #8
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	430a      	orrs	r2, r1
 80098e0:	61da      	str	r2, [r3, #28]
      break;
 80098e2:	e043      	b.n	800996c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68b9      	ldr	r1, [r7, #8]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 fc1a 	bl	800a124 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f042 0208 	orr.w	r2, r2, #8
 80098fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f022 0204 	bic.w	r2, r2, #4
 800990e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	691a      	ldr	r2, [r3, #16]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	430a      	orrs	r2, r1
 8009920:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009922:	e023      	b.n	800996c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68b9      	ldr	r1, [r7, #8]
 800992a:	4618      	mov	r0, r3
 800992c:	f000 fc5e 	bl	800a1ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800993e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800994e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	021a      	lsls	r2, r3, #8
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	430a      	orrs	r2, r1
 8009962:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009964:	e002      	b.n	800996c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	75fb      	strb	r3, [r7, #23]
      break;
 800996a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009974:	7dfb      	ldrb	r3, [r7, #23]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3718      	adds	r7, #24
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop

08009980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800998a:	2300      	movs	r3, #0
 800998c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009994:	2b01      	cmp	r3, #1
 8009996:	d101      	bne.n	800999c <HAL_TIM_ConfigClockSource+0x1c>
 8009998:	2302      	movs	r3, #2
 800999a:	e0dc      	b.n	8009b56 <HAL_TIM_ConfigClockSource+0x1d6>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2202      	movs	r2, #2
 80099a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099b4:	68ba      	ldr	r2, [r7, #8]
 80099b6:	4b6a      	ldr	r3, [pc, #424]	@ (8009b60 <HAL_TIM_ConfigClockSource+0x1e0>)
 80099b8:	4013      	ands	r3, r2
 80099ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80099c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a64      	ldr	r2, [pc, #400]	@ (8009b64 <HAL_TIM_ConfigClockSource+0x1e4>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	f000 80a9 	beq.w	8009b2a <HAL_TIM_ConfigClockSource+0x1aa>
 80099d8:	4a62      	ldr	r2, [pc, #392]	@ (8009b64 <HAL_TIM_ConfigClockSource+0x1e4>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	f200 80ae 	bhi.w	8009b3c <HAL_TIM_ConfigClockSource+0x1bc>
 80099e0:	4a61      	ldr	r2, [pc, #388]	@ (8009b68 <HAL_TIM_ConfigClockSource+0x1e8>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	f000 80a1 	beq.w	8009b2a <HAL_TIM_ConfigClockSource+0x1aa>
 80099e8:	4a5f      	ldr	r2, [pc, #380]	@ (8009b68 <HAL_TIM_ConfigClockSource+0x1e8>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	f200 80a6 	bhi.w	8009b3c <HAL_TIM_ConfigClockSource+0x1bc>
 80099f0:	4a5e      	ldr	r2, [pc, #376]	@ (8009b6c <HAL_TIM_ConfigClockSource+0x1ec>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	f000 8099 	beq.w	8009b2a <HAL_TIM_ConfigClockSource+0x1aa>
 80099f8:	4a5c      	ldr	r2, [pc, #368]	@ (8009b6c <HAL_TIM_ConfigClockSource+0x1ec>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	f200 809e 	bhi.w	8009b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a00:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009a04:	f000 8091 	beq.w	8009b2a <HAL_TIM_ConfigClockSource+0x1aa>
 8009a08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009a0c:	f200 8096 	bhi.w	8009b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a14:	f000 8089 	beq.w	8009b2a <HAL_TIM_ConfigClockSource+0x1aa>
 8009a18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a1c:	f200 808e 	bhi.w	8009b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a24:	d03e      	beq.n	8009aa4 <HAL_TIM_ConfigClockSource+0x124>
 8009a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a2a:	f200 8087 	bhi.w	8009b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a32:	f000 8086 	beq.w	8009b42 <HAL_TIM_ConfigClockSource+0x1c2>
 8009a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a3a:	d87f      	bhi.n	8009b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a3c:	2b70      	cmp	r3, #112	@ 0x70
 8009a3e:	d01a      	beq.n	8009a76 <HAL_TIM_ConfigClockSource+0xf6>
 8009a40:	2b70      	cmp	r3, #112	@ 0x70
 8009a42:	d87b      	bhi.n	8009b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a44:	2b60      	cmp	r3, #96	@ 0x60
 8009a46:	d050      	beq.n	8009aea <HAL_TIM_ConfigClockSource+0x16a>
 8009a48:	2b60      	cmp	r3, #96	@ 0x60
 8009a4a:	d877      	bhi.n	8009b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a4c:	2b50      	cmp	r3, #80	@ 0x50
 8009a4e:	d03c      	beq.n	8009aca <HAL_TIM_ConfigClockSource+0x14a>
 8009a50:	2b50      	cmp	r3, #80	@ 0x50
 8009a52:	d873      	bhi.n	8009b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a54:	2b40      	cmp	r3, #64	@ 0x40
 8009a56:	d058      	beq.n	8009b0a <HAL_TIM_ConfigClockSource+0x18a>
 8009a58:	2b40      	cmp	r3, #64	@ 0x40
 8009a5a:	d86f      	bhi.n	8009b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a5c:	2b30      	cmp	r3, #48	@ 0x30
 8009a5e:	d064      	beq.n	8009b2a <HAL_TIM_ConfigClockSource+0x1aa>
 8009a60:	2b30      	cmp	r3, #48	@ 0x30
 8009a62:	d86b      	bhi.n	8009b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a64:	2b20      	cmp	r3, #32
 8009a66:	d060      	beq.n	8009b2a <HAL_TIM_ConfigClockSource+0x1aa>
 8009a68:	2b20      	cmp	r3, #32
 8009a6a:	d867      	bhi.n	8009b3c <HAL_TIM_ConfigClockSource+0x1bc>
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d05c      	beq.n	8009b2a <HAL_TIM_ConfigClockSource+0x1aa>
 8009a70:	2b10      	cmp	r3, #16
 8009a72:	d05a      	beq.n	8009b2a <HAL_TIM_ConfigClockSource+0x1aa>
 8009a74:	e062      	b.n	8009b3c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a86:	f000 fc95 	bl	800a3b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	609a      	str	r2, [r3, #8]
      break;
 8009aa2:	e04f      	b.n	8009b44 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009ab4:	f000 fc7e 	bl	800a3b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	689a      	ldr	r2, [r3, #8]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009ac6:	609a      	str	r2, [r3, #8]
      break;
 8009ac8:	e03c      	b.n	8009b44 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	f000 fbee 	bl	800a2b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2150      	movs	r1, #80	@ 0x50
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f000 fc48 	bl	800a378 <TIM_ITRx_SetConfig>
      break;
 8009ae8:	e02c      	b.n	8009b44 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009af6:	461a      	mov	r2, r3
 8009af8:	f000 fc0d 	bl	800a316 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2160      	movs	r1, #96	@ 0x60
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 fc38 	bl	800a378 <TIM_ITRx_SetConfig>
      break;
 8009b08:	e01c      	b.n	8009b44 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b16:	461a      	mov	r2, r3
 8009b18:	f000 fbce 	bl	800a2b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2140      	movs	r1, #64	@ 0x40
 8009b22:	4618      	mov	r0, r3
 8009b24:	f000 fc28 	bl	800a378 <TIM_ITRx_SetConfig>
      break;
 8009b28:	e00c      	b.n	8009b44 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4619      	mov	r1, r3
 8009b34:	4610      	mov	r0, r2
 8009b36:	f000 fc1f 	bl	800a378 <TIM_ITRx_SetConfig>
      break;
 8009b3a:	e003      	b.n	8009b44 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b40:	e000      	b.n	8009b44 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	ffceff88 	.word	0xffceff88
 8009b64:	00100040 	.word	0x00100040
 8009b68:	00100030 	.word	0x00100030
 8009b6c:	00100020 	.word	0x00100020

08009b70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b78:	bf00      	nop
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4a46      	ldr	r2, [pc, #280]	@ (8009cec <TIM_Base_SetConfig+0x12c>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d013      	beq.n	8009c00 <TIM_Base_SetConfig+0x40>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bde:	d00f      	beq.n	8009c00 <TIM_Base_SetConfig+0x40>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a43      	ldr	r2, [pc, #268]	@ (8009cf0 <TIM_Base_SetConfig+0x130>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d00b      	beq.n	8009c00 <TIM_Base_SetConfig+0x40>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a42      	ldr	r2, [pc, #264]	@ (8009cf4 <TIM_Base_SetConfig+0x134>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d007      	beq.n	8009c00 <TIM_Base_SetConfig+0x40>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a41      	ldr	r2, [pc, #260]	@ (8009cf8 <TIM_Base_SetConfig+0x138>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d003      	beq.n	8009c00 <TIM_Base_SetConfig+0x40>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a40      	ldr	r2, [pc, #256]	@ (8009cfc <TIM_Base_SetConfig+0x13c>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d108      	bne.n	8009c12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4a35      	ldr	r2, [pc, #212]	@ (8009cec <TIM_Base_SetConfig+0x12c>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d01f      	beq.n	8009c5a <TIM_Base_SetConfig+0x9a>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c20:	d01b      	beq.n	8009c5a <TIM_Base_SetConfig+0x9a>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a32      	ldr	r2, [pc, #200]	@ (8009cf0 <TIM_Base_SetConfig+0x130>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d017      	beq.n	8009c5a <TIM_Base_SetConfig+0x9a>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a31      	ldr	r2, [pc, #196]	@ (8009cf4 <TIM_Base_SetConfig+0x134>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d013      	beq.n	8009c5a <TIM_Base_SetConfig+0x9a>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a30      	ldr	r2, [pc, #192]	@ (8009cf8 <TIM_Base_SetConfig+0x138>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d00f      	beq.n	8009c5a <TIM_Base_SetConfig+0x9a>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a2f      	ldr	r2, [pc, #188]	@ (8009cfc <TIM_Base_SetConfig+0x13c>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d00b      	beq.n	8009c5a <TIM_Base_SetConfig+0x9a>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a2e      	ldr	r2, [pc, #184]	@ (8009d00 <TIM_Base_SetConfig+0x140>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d007      	beq.n	8009c5a <TIM_Base_SetConfig+0x9a>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a2d      	ldr	r2, [pc, #180]	@ (8009d04 <TIM_Base_SetConfig+0x144>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d003      	beq.n	8009c5a <TIM_Base_SetConfig+0x9a>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a2c      	ldr	r2, [pc, #176]	@ (8009d08 <TIM_Base_SetConfig+0x148>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d108      	bne.n	8009c6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	695b      	ldr	r3, [r3, #20]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	689a      	ldr	r2, [r3, #8]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a16      	ldr	r2, [pc, #88]	@ (8009cec <TIM_Base_SetConfig+0x12c>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d00f      	beq.n	8009cb8 <TIM_Base_SetConfig+0xf8>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a18      	ldr	r2, [pc, #96]	@ (8009cfc <TIM_Base_SetConfig+0x13c>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d00b      	beq.n	8009cb8 <TIM_Base_SetConfig+0xf8>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a17      	ldr	r2, [pc, #92]	@ (8009d00 <TIM_Base_SetConfig+0x140>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d007      	beq.n	8009cb8 <TIM_Base_SetConfig+0xf8>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a16      	ldr	r2, [pc, #88]	@ (8009d04 <TIM_Base_SetConfig+0x144>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d003      	beq.n	8009cb8 <TIM_Base_SetConfig+0xf8>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a15      	ldr	r2, [pc, #84]	@ (8009d08 <TIM_Base_SetConfig+0x148>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d103      	bne.n	8009cc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	691a      	ldr	r2, [r3, #16]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	691b      	ldr	r3, [r3, #16]
 8009cca:	f003 0301 	and.w	r3, r3, #1
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d105      	bne.n	8009cde <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	f023 0201 	bic.w	r2, r3, #1
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	611a      	str	r2, [r3, #16]
  }
}
 8009cde:	bf00      	nop
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	40010000 	.word	0x40010000
 8009cf0:	40000400 	.word	0x40000400
 8009cf4:	40000800 	.word	0x40000800
 8009cf8:	40000c00 	.word	0x40000c00
 8009cfc:	40010400 	.word	0x40010400
 8009d00:	40014000 	.word	0x40014000
 8009d04:	40014400 	.word	0x40014400
 8009d08:	40014800 	.word	0x40014800

08009d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b087      	sub	sp, #28
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a1b      	ldr	r3, [r3, #32]
 8009d20:	f023 0201 	bic.w	r2, r3, #1
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	4b37      	ldr	r3, [pc, #220]	@ (8009e14 <TIM_OC1_SetConfig+0x108>)
 8009d38:	4013      	ands	r3, r2
 8009d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f023 0303 	bic.w	r3, r3, #3
 8009d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	f023 0302 	bic.w	r3, r3, #2
 8009d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a2d      	ldr	r2, [pc, #180]	@ (8009e18 <TIM_OC1_SetConfig+0x10c>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d00f      	beq.n	8009d88 <TIM_OC1_SetConfig+0x7c>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8009e1c <TIM_OC1_SetConfig+0x110>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d00b      	beq.n	8009d88 <TIM_OC1_SetConfig+0x7c>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a2b      	ldr	r2, [pc, #172]	@ (8009e20 <TIM_OC1_SetConfig+0x114>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d007      	beq.n	8009d88 <TIM_OC1_SetConfig+0x7c>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8009e24 <TIM_OC1_SetConfig+0x118>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d003      	beq.n	8009d88 <TIM_OC1_SetConfig+0x7c>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a29      	ldr	r2, [pc, #164]	@ (8009e28 <TIM_OC1_SetConfig+0x11c>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d10c      	bne.n	8009da2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	f023 0308 	bic.w	r3, r3, #8
 8009d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	f023 0304 	bic.w	r3, r3, #4
 8009da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a1c      	ldr	r2, [pc, #112]	@ (8009e18 <TIM_OC1_SetConfig+0x10c>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d00f      	beq.n	8009dca <TIM_OC1_SetConfig+0xbe>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a1b      	ldr	r2, [pc, #108]	@ (8009e1c <TIM_OC1_SetConfig+0x110>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d00b      	beq.n	8009dca <TIM_OC1_SetConfig+0xbe>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a1a      	ldr	r2, [pc, #104]	@ (8009e20 <TIM_OC1_SetConfig+0x114>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d007      	beq.n	8009dca <TIM_OC1_SetConfig+0xbe>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a19      	ldr	r2, [pc, #100]	@ (8009e24 <TIM_OC1_SetConfig+0x118>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d003      	beq.n	8009dca <TIM_OC1_SetConfig+0xbe>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a18      	ldr	r2, [pc, #96]	@ (8009e28 <TIM_OC1_SetConfig+0x11c>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d111      	bne.n	8009dee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	695b      	ldr	r3, [r3, #20]
 8009dde:	693a      	ldr	r2, [r7, #16]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	693a      	ldr	r2, [r7, #16]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	685a      	ldr	r2, [r3, #4]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	621a      	str	r2, [r3, #32]
}
 8009e08:	bf00      	nop
 8009e0a:	371c      	adds	r7, #28
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr
 8009e14:	fffeff8f 	.word	0xfffeff8f
 8009e18:	40010000 	.word	0x40010000
 8009e1c:	40010400 	.word	0x40010400
 8009e20:	40014000 	.word	0x40014000
 8009e24:	40014400 	.word	0x40014400
 8009e28:	40014800 	.word	0x40014800

08009e2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b087      	sub	sp, #28
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a1b      	ldr	r3, [r3, #32]
 8009e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6a1b      	ldr	r3, [r3, #32]
 8009e40:	f023 0210 	bic.w	r2, r3, #16
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	699b      	ldr	r3, [r3, #24]
 8009e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	4b34      	ldr	r3, [pc, #208]	@ (8009f28 <TIM_OC2_SetConfig+0xfc>)
 8009e58:	4013      	ands	r3, r2
 8009e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	021b      	lsls	r3, r3, #8
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	f023 0320 	bic.w	r3, r3, #32
 8009e76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	011b      	lsls	r3, r3, #4
 8009e7e:	697a      	ldr	r2, [r7, #20]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a29      	ldr	r2, [pc, #164]	@ (8009f2c <TIM_OC2_SetConfig+0x100>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d003      	beq.n	8009e94 <TIM_OC2_SetConfig+0x68>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a28      	ldr	r2, [pc, #160]	@ (8009f30 <TIM_OC2_SetConfig+0x104>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d10d      	bne.n	8009eb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	011b      	lsls	r3, r3, #4
 8009ea2:	697a      	ldr	r2, [r7, #20]
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009eae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8009f2c <TIM_OC2_SetConfig+0x100>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d00f      	beq.n	8009ed8 <TIM_OC2_SetConfig+0xac>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a1d      	ldr	r2, [pc, #116]	@ (8009f30 <TIM_OC2_SetConfig+0x104>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d00b      	beq.n	8009ed8 <TIM_OC2_SetConfig+0xac>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8009f34 <TIM_OC2_SetConfig+0x108>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d007      	beq.n	8009ed8 <TIM_OC2_SetConfig+0xac>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a1b      	ldr	r2, [pc, #108]	@ (8009f38 <TIM_OC2_SetConfig+0x10c>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d003      	beq.n	8009ed8 <TIM_OC2_SetConfig+0xac>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8009f3c <TIM_OC2_SetConfig+0x110>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d113      	bne.n	8009f00 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009ede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	695b      	ldr	r3, [r3, #20]
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	693a      	ldr	r2, [r7, #16]
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	685a      	ldr	r2, [r3, #4]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	697a      	ldr	r2, [r7, #20]
 8009f18:	621a      	str	r2, [r3, #32]
}
 8009f1a:	bf00      	nop
 8009f1c:	371c      	adds	r7, #28
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	feff8fff 	.word	0xfeff8fff
 8009f2c:	40010000 	.word	0x40010000
 8009f30:	40010400 	.word	0x40010400
 8009f34:	40014000 	.word	0x40014000
 8009f38:	40014400 	.word	0x40014400
 8009f3c:	40014800 	.word	0x40014800

08009f40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b087      	sub	sp, #28
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	69db      	ldr	r3, [r3, #28]
 8009f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	4b33      	ldr	r3, [pc, #204]	@ (800a038 <TIM_OC3_SetConfig+0xf8>)
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f023 0303 	bic.w	r3, r3, #3
 8009f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	021b      	lsls	r3, r3, #8
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4a28      	ldr	r2, [pc, #160]	@ (800a03c <TIM_OC3_SetConfig+0xfc>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d003      	beq.n	8009fa6 <TIM_OC3_SetConfig+0x66>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a27      	ldr	r2, [pc, #156]	@ (800a040 <TIM_OC3_SetConfig+0x100>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d10d      	bne.n	8009fc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009fac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	021b      	lsls	r3, r3, #8
 8009fb4:	697a      	ldr	r2, [r7, #20]
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800a03c <TIM_OC3_SetConfig+0xfc>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d00f      	beq.n	8009fea <TIM_OC3_SetConfig+0xaa>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a1c      	ldr	r2, [pc, #112]	@ (800a040 <TIM_OC3_SetConfig+0x100>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d00b      	beq.n	8009fea <TIM_OC3_SetConfig+0xaa>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a1b      	ldr	r2, [pc, #108]	@ (800a044 <TIM_OC3_SetConfig+0x104>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d007      	beq.n	8009fea <TIM_OC3_SetConfig+0xaa>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a1a      	ldr	r2, [pc, #104]	@ (800a048 <TIM_OC3_SetConfig+0x108>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d003      	beq.n	8009fea <TIM_OC3_SetConfig+0xaa>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a19      	ldr	r2, [pc, #100]	@ (800a04c <TIM_OC3_SetConfig+0x10c>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d113      	bne.n	800a012 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	695b      	ldr	r3, [r3, #20]
 8009ffe:	011b      	lsls	r3, r3, #4
 800a000:	693a      	ldr	r2, [r7, #16]
 800a002:	4313      	orrs	r3, r2
 800a004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	699b      	ldr	r3, [r3, #24]
 800a00a:	011b      	lsls	r3, r3, #4
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	4313      	orrs	r3, r2
 800a010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	685a      	ldr	r2, [r3, #4]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	621a      	str	r2, [r3, #32]
}
 800a02c:	bf00      	nop
 800a02e:	371c      	adds	r7, #28
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr
 800a038:	fffeff8f 	.word	0xfffeff8f
 800a03c:	40010000 	.word	0x40010000
 800a040:	40010400 	.word	0x40010400
 800a044:	40014000 	.word	0x40014000
 800a048:	40014400 	.word	0x40014400
 800a04c:	40014800 	.word	0x40014800

0800a050 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a050:	b480      	push	{r7}
 800a052:	b087      	sub	sp, #28
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a1b      	ldr	r3, [r3, #32]
 800a064:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	69db      	ldr	r3, [r3, #28]
 800a076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	4b24      	ldr	r3, [pc, #144]	@ (800a10c <TIM_OC4_SetConfig+0xbc>)
 800a07c:	4013      	ands	r3, r2
 800a07e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	021b      	lsls	r3, r3, #8
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	4313      	orrs	r3, r2
 800a092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a09a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	031b      	lsls	r3, r3, #12
 800a0a2:	693a      	ldr	r2, [r7, #16]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a19      	ldr	r2, [pc, #100]	@ (800a110 <TIM_OC4_SetConfig+0xc0>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d00f      	beq.n	800a0d0 <TIM_OC4_SetConfig+0x80>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a18      	ldr	r2, [pc, #96]	@ (800a114 <TIM_OC4_SetConfig+0xc4>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d00b      	beq.n	800a0d0 <TIM_OC4_SetConfig+0x80>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a17      	ldr	r2, [pc, #92]	@ (800a118 <TIM_OC4_SetConfig+0xc8>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d007      	beq.n	800a0d0 <TIM_OC4_SetConfig+0x80>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4a16      	ldr	r2, [pc, #88]	@ (800a11c <TIM_OC4_SetConfig+0xcc>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d003      	beq.n	800a0d0 <TIM_OC4_SetConfig+0x80>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a15      	ldr	r2, [pc, #84]	@ (800a120 <TIM_OC4_SetConfig+0xd0>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d109      	bne.n	800a0e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a0d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	695b      	ldr	r3, [r3, #20]
 800a0dc:	019b      	lsls	r3, r3, #6
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	685a      	ldr	r2, [r3, #4]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	621a      	str	r2, [r3, #32]
}
 800a0fe:	bf00      	nop
 800a100:	371c      	adds	r7, #28
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	feff8fff 	.word	0xfeff8fff
 800a110:	40010000 	.word	0x40010000
 800a114:	40010400 	.word	0x40010400
 800a118:	40014000 	.word	0x40014000
 800a11c:	40014400 	.word	0x40014400
 800a120:	40014800 	.word	0x40014800

0800a124 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a124:	b480      	push	{r7}
 800a126:	b087      	sub	sp, #28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a1b      	ldr	r3, [r3, #32]
 800a138:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a14a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	4b21      	ldr	r3, [pc, #132]	@ (800a1d4 <TIM_OC5_SetConfig+0xb0>)
 800a150:	4013      	ands	r3, r2
 800a152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a164:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	041b      	lsls	r3, r3, #16
 800a16c:	693a      	ldr	r2, [r7, #16]
 800a16e:	4313      	orrs	r3, r2
 800a170:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a18      	ldr	r2, [pc, #96]	@ (800a1d8 <TIM_OC5_SetConfig+0xb4>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d00f      	beq.n	800a19a <TIM_OC5_SetConfig+0x76>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4a17      	ldr	r2, [pc, #92]	@ (800a1dc <TIM_OC5_SetConfig+0xb8>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d00b      	beq.n	800a19a <TIM_OC5_SetConfig+0x76>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a16      	ldr	r2, [pc, #88]	@ (800a1e0 <TIM_OC5_SetConfig+0xbc>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d007      	beq.n	800a19a <TIM_OC5_SetConfig+0x76>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a15      	ldr	r2, [pc, #84]	@ (800a1e4 <TIM_OC5_SetConfig+0xc0>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d003      	beq.n	800a19a <TIM_OC5_SetConfig+0x76>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a14      	ldr	r2, [pc, #80]	@ (800a1e8 <TIM_OC5_SetConfig+0xc4>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d109      	bne.n	800a1ae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a1a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	695b      	ldr	r3, [r3, #20]
 800a1a6:	021b      	lsls	r3, r3, #8
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	697a      	ldr	r2, [r7, #20]
 800a1b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	621a      	str	r2, [r3, #32]
}
 800a1c8:	bf00      	nop
 800a1ca:	371c      	adds	r7, #28
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	fffeff8f 	.word	0xfffeff8f
 800a1d8:	40010000 	.word	0x40010000
 800a1dc:	40010400 	.word	0x40010400
 800a1e0:	40014000 	.word	0x40014000
 800a1e4:	40014400 	.word	0x40014400
 800a1e8:	40014800 	.word	0x40014800

0800a1ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b087      	sub	sp, #28
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6a1b      	ldr	r3, [r3, #32]
 800a200:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	4b22      	ldr	r3, [pc, #136]	@ (800a2a0 <TIM_OC6_SetConfig+0xb4>)
 800a218:	4013      	ands	r3, r2
 800a21a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	021b      	lsls	r3, r3, #8
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	4313      	orrs	r3, r2
 800a226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a22e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	051b      	lsls	r3, r3, #20
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	4313      	orrs	r3, r2
 800a23a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a19      	ldr	r2, [pc, #100]	@ (800a2a4 <TIM_OC6_SetConfig+0xb8>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d00f      	beq.n	800a264 <TIM_OC6_SetConfig+0x78>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4a18      	ldr	r2, [pc, #96]	@ (800a2a8 <TIM_OC6_SetConfig+0xbc>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d00b      	beq.n	800a264 <TIM_OC6_SetConfig+0x78>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4a17      	ldr	r2, [pc, #92]	@ (800a2ac <TIM_OC6_SetConfig+0xc0>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d007      	beq.n	800a264 <TIM_OC6_SetConfig+0x78>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a16      	ldr	r2, [pc, #88]	@ (800a2b0 <TIM_OC6_SetConfig+0xc4>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d003      	beq.n	800a264 <TIM_OC6_SetConfig+0x78>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a15      	ldr	r2, [pc, #84]	@ (800a2b4 <TIM_OC6_SetConfig+0xc8>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d109      	bne.n	800a278 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a26a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	695b      	ldr	r3, [r3, #20]
 800a270:	029b      	lsls	r3, r3, #10
 800a272:	697a      	ldr	r2, [r7, #20]
 800a274:	4313      	orrs	r3, r2
 800a276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	697a      	ldr	r2, [r7, #20]
 800a27c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	685a      	ldr	r2, [r3, #4]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	693a      	ldr	r2, [r7, #16]
 800a290:	621a      	str	r2, [r3, #32]
}
 800a292:	bf00      	nop
 800a294:	371c      	adds	r7, #28
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	feff8fff 	.word	0xfeff8fff
 800a2a4:	40010000 	.word	0x40010000
 800a2a8:	40010400 	.word	0x40010400
 800a2ac:	40014000 	.word	0x40014000
 800a2b0:	40014400 	.word	0x40014400
 800a2b4:	40014800 	.word	0x40014800

0800a2b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b087      	sub	sp, #28
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6a1b      	ldr	r3, [r3, #32]
 800a2c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	f023 0201 	bic.w	r2, r3, #1
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	699b      	ldr	r3, [r3, #24]
 800a2da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a2e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	011b      	lsls	r3, r3, #4
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f023 030a 	bic.w	r3, r3, #10
 800a2f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	697a      	ldr	r2, [r7, #20]
 800a308:	621a      	str	r2, [r3, #32]
}
 800a30a:	bf00      	nop
 800a30c:	371c      	adds	r7, #28
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a316:	b480      	push	{r7}
 800a318:	b087      	sub	sp, #28
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	60f8      	str	r0, [r7, #12]
 800a31e:	60b9      	str	r1, [r7, #8]
 800a320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6a1b      	ldr	r3, [r3, #32]
 800a32c:	f023 0210 	bic.w	r2, r3, #16
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a340:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	031b      	lsls	r3, r3, #12
 800a346:	693a      	ldr	r2, [r7, #16]
 800a348:	4313      	orrs	r3, r2
 800a34a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a352:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	011b      	lsls	r3, r3, #4
 800a358:	697a      	ldr	r2, [r7, #20]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	693a      	ldr	r2, [r7, #16]
 800a362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	697a      	ldr	r2, [r7, #20]
 800a368:	621a      	str	r2, [r3, #32]
}
 800a36a:	bf00      	nop
 800a36c:	371c      	adds	r7, #28
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
	...

0800a378 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	4b09      	ldr	r3, [pc, #36]	@ (800a3b0 <TIM_ITRx_SetConfig+0x38>)
 800a38c:	4013      	ands	r3, r2
 800a38e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a390:	683a      	ldr	r2, [r7, #0]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	4313      	orrs	r3, r2
 800a396:	f043 0307 	orr.w	r3, r3, #7
 800a39a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	609a      	str	r2, [r3, #8]
}
 800a3a2:	bf00      	nop
 800a3a4:	3714      	adds	r7, #20
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	ffcfff8f 	.word	0xffcfff8f

0800a3b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b087      	sub	sp, #28
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
 800a3c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a3ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	021a      	lsls	r2, r3, #8
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	431a      	orrs	r2, r3
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	697a      	ldr	r2, [r7, #20]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	697a      	ldr	r2, [r7, #20]
 800a3e6:	609a      	str	r2, [r3, #8]
}
 800a3e8:	bf00      	nop
 800a3ea:	371c      	adds	r7, #28
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b087      	sub	sp, #28
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	f003 031f 	and.w	r3, r3, #31
 800a406:	2201      	movs	r2, #1
 800a408:	fa02 f303 	lsl.w	r3, r2, r3
 800a40c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6a1a      	ldr	r2, [r3, #32]
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	43db      	mvns	r3, r3
 800a416:	401a      	ands	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6a1a      	ldr	r2, [r3, #32]
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	f003 031f 	and.w	r3, r3, #31
 800a426:	6879      	ldr	r1, [r7, #4]
 800a428:	fa01 f303 	lsl.w	r3, r1, r3
 800a42c:	431a      	orrs	r2, r3
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	621a      	str	r2, [r3, #32]
}
 800a432:	bf00      	nop
 800a434:	371c      	adds	r7, #28
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
	...

0800a440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a450:	2b01      	cmp	r3, #1
 800a452:	d101      	bne.n	800a458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a454:	2302      	movs	r3, #2
 800a456:	e06d      	b.n	800a534 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2202      	movs	r2, #2
 800a464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a30      	ldr	r2, [pc, #192]	@ (800a540 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d004      	beq.n	800a48c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a2f      	ldr	r2, [pc, #188]	@ (800a544 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d108      	bne.n	800a49e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a492:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a20      	ldr	r2, [pc, #128]	@ (800a540 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d022      	beq.n	800a508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4ca:	d01d      	beq.n	800a508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a1d      	ldr	r2, [pc, #116]	@ (800a548 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d018      	beq.n	800a508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a1c      	ldr	r2, [pc, #112]	@ (800a54c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d013      	beq.n	800a508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a1a      	ldr	r2, [pc, #104]	@ (800a550 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d00e      	beq.n	800a508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a15      	ldr	r2, [pc, #84]	@ (800a544 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d009      	beq.n	800a508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a16      	ldr	r2, [pc, #88]	@ (800a554 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d004      	beq.n	800a508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a15      	ldr	r2, [pc, #84]	@ (800a558 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d10c      	bne.n	800a522 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a50e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	4313      	orrs	r3, r2
 800a518:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2201      	movs	r2, #1
 800a526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	3714      	adds	r7, #20
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	40010000 	.word	0x40010000
 800a544:	40010400 	.word	0x40010400
 800a548:	40000400 	.word	0x40000400
 800a54c:	40000800 	.word	0x40000800
 800a550:	40000c00 	.word	0x40000c00
 800a554:	40001800 	.word	0x40001800
 800a558:	40014000 	.word	0x40014000

0800a55c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a566:	2300      	movs	r3, #0
 800a568:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a570:	2b01      	cmp	r3, #1
 800a572:	d101      	bne.n	800a578 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a574:	2302      	movs	r3, #2
 800a576:	e065      	b.n	800a644 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	4313      	orrs	r3, r2
 800a59a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	695b      	ldr	r3, [r3, #20]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	041b      	lsls	r3, r3, #16
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a16      	ldr	r2, [pc, #88]	@ (800a650 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d004      	beq.n	800a606 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a14      	ldr	r2, [pc, #80]	@ (800a654 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d115      	bne.n	800a632 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a610:	051b      	lsls	r3, r3, #20
 800a612:	4313      	orrs	r3, r2
 800a614:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	69db      	ldr	r3, [r3, #28]
 800a620:	4313      	orrs	r3, r2
 800a622:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	4313      	orrs	r3, r2
 800a630:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	40010000 	.word	0x40010000
 800a654:	40010400 	.word	0x40010400

0800a658 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a660:	bf00      	nop
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a674:	bf00      	nop
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <__NVIC_SetPriority>:
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	4603      	mov	r3, r0
 800a69c:	6039      	str	r1, [r7, #0]
 800a69e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a6a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	db0a      	blt.n	800a6be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	b2da      	uxtb	r2, r3
 800a6ac:	490c      	ldr	r1, [pc, #48]	@ (800a6e0 <__NVIC_SetPriority+0x4c>)
 800a6ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a6b2:	0112      	lsls	r2, r2, #4
 800a6b4:	b2d2      	uxtb	r2, r2
 800a6b6:	440b      	add	r3, r1
 800a6b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a6bc:	e00a      	b.n	800a6d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	4908      	ldr	r1, [pc, #32]	@ (800a6e4 <__NVIC_SetPriority+0x50>)
 800a6c4:	88fb      	ldrh	r3, [r7, #6]
 800a6c6:	f003 030f 	and.w	r3, r3, #15
 800a6ca:	3b04      	subs	r3, #4
 800a6cc:	0112      	lsls	r2, r2, #4
 800a6ce:	b2d2      	uxtb	r2, r2
 800a6d0:	440b      	add	r3, r1
 800a6d2:	761a      	strb	r2, [r3, #24]
}
 800a6d4:	bf00      	nop
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr
 800a6e0:	e000e100 	.word	0xe000e100
 800a6e4:	e000ed00 	.word	0xe000ed00

0800a6e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a6ec:	4b05      	ldr	r3, [pc, #20]	@ (800a704 <SysTick_Handler+0x1c>)
 800a6ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a6f0:	f001 fd18 	bl	800c124 <xTaskGetSchedulerState>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d001      	beq.n	800a6fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a6fa:	f002 fb0d 	bl	800cd18 <xPortSysTickHandler>
  }
}
 800a6fe:	bf00      	nop
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	e000e010 	.word	0xe000e010

0800a708 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a708:	b580      	push	{r7, lr}
 800a70a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a70c:	2100      	movs	r1, #0
 800a70e:	f06f 0004 	mvn.w	r0, #4
 800a712:	f7ff ffbf 	bl	800a694 <__NVIC_SetPriority>
#endif
}
 800a716:	bf00      	nop
 800a718:	bd80      	pop	{r7, pc}
	...

0800a71c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a722:	f3ef 8305 	mrs	r3, IPSR
 800a726:	603b      	str	r3, [r7, #0]
  return(result);
 800a728:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d003      	beq.n	800a736 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a72e:	f06f 0305 	mvn.w	r3, #5
 800a732:	607b      	str	r3, [r7, #4]
 800a734:	e00c      	b.n	800a750 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a736:	4b0a      	ldr	r3, [pc, #40]	@ (800a760 <osKernelInitialize+0x44>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d105      	bne.n	800a74a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a73e:	4b08      	ldr	r3, [pc, #32]	@ (800a760 <osKernelInitialize+0x44>)
 800a740:	2201      	movs	r2, #1
 800a742:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a744:	2300      	movs	r3, #0
 800a746:	607b      	str	r3, [r7, #4]
 800a748:	e002      	b.n	800a750 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a74a:	f04f 33ff 	mov.w	r3, #4294967295
 800a74e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a750:	687b      	ldr	r3, [r7, #4]
}
 800a752:	4618      	mov	r0, r3
 800a754:	370c      	adds	r7, #12
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	24000504 	.word	0x24000504

0800a764 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a76a:	f3ef 8305 	mrs	r3, IPSR
 800a76e:	603b      	str	r3, [r7, #0]
  return(result);
 800a770:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a776:	f06f 0305 	mvn.w	r3, #5
 800a77a:	607b      	str	r3, [r7, #4]
 800a77c:	e010      	b.n	800a7a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a77e:	4b0b      	ldr	r3, [pc, #44]	@ (800a7ac <osKernelStart+0x48>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2b01      	cmp	r3, #1
 800a784:	d109      	bne.n	800a79a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a786:	f7ff ffbf 	bl	800a708 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a78a:	4b08      	ldr	r3, [pc, #32]	@ (800a7ac <osKernelStart+0x48>)
 800a78c:	2202      	movs	r2, #2
 800a78e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a790:	f001 f87a 	bl	800b888 <vTaskStartScheduler>
      stat = osOK;
 800a794:	2300      	movs	r3, #0
 800a796:	607b      	str	r3, [r7, #4]
 800a798:	e002      	b.n	800a7a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a79a:	f04f 33ff 	mov.w	r3, #4294967295
 800a79e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a7a0:	687b      	ldr	r3, [r7, #4]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	24000504 	.word	0x24000504

0800a7b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b08e      	sub	sp, #56	@ 0x38
 800a7b4:	af04      	add	r7, sp, #16
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7c0:	f3ef 8305 	mrs	r3, IPSR
 800a7c4:	617b      	str	r3, [r7, #20]
  return(result);
 800a7c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d17e      	bne.n	800a8ca <osThreadNew+0x11a>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d07b      	beq.n	800a8ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a7d2:	2380      	movs	r3, #128	@ 0x80
 800a7d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a7d6:	2318      	movs	r3, #24
 800a7d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a7de:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d045      	beq.n	800a876 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d002      	beq.n	800a7f8 <osThreadNew+0x48>
        name = attr->name;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	699b      	ldr	r3, [r3, #24]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d002      	beq.n	800a806 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	699b      	ldr	r3, [r3, #24]
 800a804:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d008      	beq.n	800a81e <osThreadNew+0x6e>
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	2b38      	cmp	r3, #56	@ 0x38
 800a810:	d805      	bhi.n	800a81e <osThreadNew+0x6e>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	f003 0301 	and.w	r3, r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d001      	beq.n	800a822 <osThreadNew+0x72>
        return (NULL);
 800a81e:	2300      	movs	r3, #0
 800a820:	e054      	b.n	800a8cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d003      	beq.n	800a832 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	695b      	ldr	r3, [r3, #20]
 800a82e:	089b      	lsrs	r3, r3, #2
 800a830:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00e      	beq.n	800a858 <osThreadNew+0xa8>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	2b5b      	cmp	r3, #91	@ 0x5b
 800a840:	d90a      	bls.n	800a858 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a846:	2b00      	cmp	r3, #0
 800a848:	d006      	beq.n	800a858 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d002      	beq.n	800a858 <osThreadNew+0xa8>
        mem = 1;
 800a852:	2301      	movs	r3, #1
 800a854:	61bb      	str	r3, [r7, #24]
 800a856:	e010      	b.n	800a87a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d10c      	bne.n	800a87a <osThreadNew+0xca>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d108      	bne.n	800a87a <osThreadNew+0xca>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d104      	bne.n	800a87a <osThreadNew+0xca>
          mem = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	61bb      	str	r3, [r7, #24]
 800a874:	e001      	b.n	800a87a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a876:	2300      	movs	r3, #0
 800a878:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d110      	bne.n	800a8a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a888:	9202      	str	r2, [sp, #8]
 800a88a:	9301      	str	r3, [sp, #4]
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	9300      	str	r3, [sp, #0]
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	6a3a      	ldr	r2, [r7, #32]
 800a894:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f000 fe1a 	bl	800b4d0 <xTaskCreateStatic>
 800a89c:	4603      	mov	r3, r0
 800a89e:	613b      	str	r3, [r7, #16]
 800a8a0:	e013      	b.n	800a8ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d110      	bne.n	800a8ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a8a8:	6a3b      	ldr	r3, [r7, #32]
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	f107 0310 	add.w	r3, r7, #16
 800a8b0:	9301      	str	r3, [sp, #4]
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f000 fe68 	bl	800b590 <xTaskCreate>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d001      	beq.n	800a8ca <osThreadNew+0x11a>
            hTask = NULL;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a8ca:	693b      	ldr	r3, [r7, #16]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3728      	adds	r7, #40	@ 0x28
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8dc:	f3ef 8305 	mrs	r3, IPSR
 800a8e0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d003      	beq.n	800a8f0 <osDelay+0x1c>
    stat = osErrorISR;
 800a8e8:	f06f 0305 	mvn.w	r3, #5
 800a8ec:	60fb      	str	r3, [r7, #12]
 800a8ee:	e007      	b.n	800a900 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d002      	beq.n	800a900 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 ff8e 	bl	800b81c <vTaskDelay>
    }
  }

  return (stat);
 800a900:	68fb      	ldr	r3, [r7, #12]
}
 800a902:	4618      	mov	r0, r3
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
	...

0800a90c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a90c:	b480      	push	{r7}
 800a90e:	b085      	sub	sp, #20
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	4a07      	ldr	r2, [pc, #28]	@ (800a938 <vApplicationGetIdleTaskMemory+0x2c>)
 800a91c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	4a06      	ldr	r2, [pc, #24]	@ (800a93c <vApplicationGetIdleTaskMemory+0x30>)
 800a922:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2280      	movs	r2, #128	@ 0x80
 800a928:	601a      	str	r2, [r3, #0]
}
 800a92a:	bf00      	nop
 800a92c:	3714      	adds	r7, #20
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	24000508 	.word	0x24000508
 800a93c:	24000564 	.word	0x24000564

0800a940 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	4a07      	ldr	r2, [pc, #28]	@ (800a96c <vApplicationGetTimerTaskMemory+0x2c>)
 800a950:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	4a06      	ldr	r2, [pc, #24]	@ (800a970 <vApplicationGetTimerTaskMemory+0x30>)
 800a956:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a95e:	601a      	str	r2, [r3, #0]
}
 800a960:	bf00      	nop
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	24000764 	.word	0x24000764
 800a970:	240007c0 	.word	0x240007c0

0800a974 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f103 0208 	add.w	r2, r3, #8
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f04f 32ff 	mov.w	r2, #4294967295
 800a98c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f103 0208 	add.w	r2, r3, #8
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f103 0208 	add.w	r2, r3, #8
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a9c2:	bf00      	nop
 800a9c4:	370c      	adds	r7, #12
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	b085      	sub	sp, #20
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	689a      	ldr	r2, [r3, #8]
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	683a      	ldr	r2, [r7, #0]
 800a9f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	1c5a      	adds	r2, r3, #1
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	601a      	str	r2, [r3, #0]
}
 800aa0a:	bf00      	nop
 800aa0c:	3714      	adds	r7, #20
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr

0800aa16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa16:	b480      	push	{r7}
 800aa18:	b085      	sub	sp, #20
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
 800aa1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2c:	d103      	bne.n	800aa36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	e00c      	b.n	800aa50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	3308      	adds	r3, #8
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	e002      	b.n	800aa44 <vListInsert+0x2e>
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	60fb      	str	r3, [r7, #12]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d2f6      	bcs.n	800aa3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	685a      	ldr	r2, [r3, #4]
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	683a      	ldr	r2, [r7, #0]
 800aa5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	683a      	ldr	r2, [r7, #0]
 800aa6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	1c5a      	adds	r2, r3, #1
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	601a      	str	r2, [r3, #0]
}
 800aa7c:	bf00      	nop
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	6892      	ldr	r2, [r2, #8]
 800aa9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	6852      	ldr	r2, [r2, #4]
 800aaa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d103      	bne.n	800aabc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	689a      	ldr	r2, [r3, #8]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	1e5a      	subs	r2, r3, #1
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3714      	adds	r7, #20
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10b      	bne.n	800ab08 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ab02:	bf00      	nop
 800ab04:	bf00      	nop
 800ab06:	e7fd      	b.n	800ab04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab08:	f002 f876 	bl	800cbf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab14:	68f9      	ldr	r1, [r7, #12]
 800ab16:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ab18:	fb01 f303 	mul.w	r3, r1, r3
 800ab1c:	441a      	add	r2, r3
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab38:	3b01      	subs	r3, #1
 800ab3a:	68f9      	ldr	r1, [r7, #12]
 800ab3c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ab3e:	fb01 f303 	mul.w	r3, r1, r3
 800ab42:	441a      	add	r2, r3
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	22ff      	movs	r2, #255	@ 0xff
 800ab4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	22ff      	movs	r2, #255	@ 0xff
 800ab54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d114      	bne.n	800ab88 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d01a      	beq.n	800ab9c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	3310      	adds	r3, #16
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f001 f91a 	bl	800bda4 <xTaskRemoveFromEventList>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d012      	beq.n	800ab9c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab76:	4b0d      	ldr	r3, [pc, #52]	@ (800abac <xQueueGenericReset+0xd0>)
 800ab78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	e009      	b.n	800ab9c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	3310      	adds	r3, #16
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7ff fef1 	bl	800a974 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	3324      	adds	r3, #36	@ 0x24
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7ff feec 	bl	800a974 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab9c:	f002 f85e 	bl	800cc5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aba0:	2301      	movs	r3, #1
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	e000ed04 	.word	0xe000ed04

0800abb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b08e      	sub	sp, #56	@ 0x38
 800abb4:	af02      	add	r7, sp, #8
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	607a      	str	r2, [r7, #4]
 800abbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10b      	bne.n	800abdc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800abc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc8:	f383 8811 	msr	BASEPRI, r3
 800abcc:	f3bf 8f6f 	isb	sy
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800abd6:	bf00      	nop
 800abd8:	bf00      	nop
 800abda:	e7fd      	b.n	800abd8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d10b      	bne.n	800abfa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800abe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe6:	f383 8811 	msr	BASEPRI, r3
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800abf4:	bf00      	nop
 800abf6:	bf00      	nop
 800abf8:	e7fd      	b.n	800abf6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d002      	beq.n	800ac06 <xQueueGenericCreateStatic+0x56>
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d001      	beq.n	800ac0a <xQueueGenericCreateStatic+0x5a>
 800ac06:	2301      	movs	r3, #1
 800ac08:	e000      	b.n	800ac0c <xQueueGenericCreateStatic+0x5c>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10b      	bne.n	800ac28 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	623b      	str	r3, [r7, #32]
}
 800ac22:	bf00      	nop
 800ac24:	bf00      	nop
 800ac26:	e7fd      	b.n	800ac24 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d102      	bne.n	800ac34 <xQueueGenericCreateStatic+0x84>
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d101      	bne.n	800ac38 <xQueueGenericCreateStatic+0x88>
 800ac34:	2301      	movs	r3, #1
 800ac36:	e000      	b.n	800ac3a <xQueueGenericCreateStatic+0x8a>
 800ac38:	2300      	movs	r3, #0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d10b      	bne.n	800ac56 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ac3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	61fb      	str	r3, [r7, #28]
}
 800ac50:	bf00      	nop
 800ac52:	bf00      	nop
 800ac54:	e7fd      	b.n	800ac52 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac56:	2350      	movs	r3, #80	@ 0x50
 800ac58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	2b50      	cmp	r3, #80	@ 0x50
 800ac5e:	d00b      	beq.n	800ac78 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	61bb      	str	r3, [r7, #24]
}
 800ac72:	bf00      	nop
 800ac74:	bf00      	nop
 800ac76:	e7fd      	b.n	800ac74 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac78:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ac7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00d      	beq.n	800aca0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac86:	2201      	movs	r2, #1
 800ac88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac8c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ac90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	4613      	mov	r3, r2
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	68b9      	ldr	r1, [r7, #8]
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f000 f805 	bl	800acaa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3730      	adds	r7, #48	@ 0x30
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b084      	sub	sp, #16
 800acae:	af00      	add	r7, sp, #0
 800acb0:	60f8      	str	r0, [r7, #12]
 800acb2:	60b9      	str	r1, [r7, #8]
 800acb4:	607a      	str	r2, [r7, #4]
 800acb6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d103      	bne.n	800acc6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	69ba      	ldr	r2, [r7, #24]
 800acc2:	601a      	str	r2, [r3, #0]
 800acc4:	e002      	b.n	800accc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	68ba      	ldr	r2, [r7, #8]
 800acd6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800acd8:	2101      	movs	r1, #1
 800acda:	69b8      	ldr	r0, [r7, #24]
 800acdc:	f7ff fefe 	bl	800aadc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	78fa      	ldrb	r2, [r7, #3]
 800ace4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ace8:	bf00      	nop
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b08e      	sub	sp, #56	@ 0x38
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
 800acfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800acfe:	2300      	movs	r3, #0
 800ad00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ad06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10b      	bne.n	800ad24 <xQueueGenericSend+0x34>
	__asm volatile
 800ad0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad10:	f383 8811 	msr	BASEPRI, r3
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	f3bf 8f4f 	dsb	sy
 800ad1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ad1e:	bf00      	nop
 800ad20:	bf00      	nop
 800ad22:	e7fd      	b.n	800ad20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d103      	bne.n	800ad32 <xQueueGenericSend+0x42>
 800ad2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d101      	bne.n	800ad36 <xQueueGenericSend+0x46>
 800ad32:	2301      	movs	r3, #1
 800ad34:	e000      	b.n	800ad38 <xQueueGenericSend+0x48>
 800ad36:	2300      	movs	r3, #0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10b      	bne.n	800ad54 <xQueueGenericSend+0x64>
	__asm volatile
 800ad3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad40:	f383 8811 	msr	BASEPRI, r3
 800ad44:	f3bf 8f6f 	isb	sy
 800ad48:	f3bf 8f4f 	dsb	sy
 800ad4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ad4e:	bf00      	nop
 800ad50:	bf00      	nop
 800ad52:	e7fd      	b.n	800ad50 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	2b02      	cmp	r3, #2
 800ad58:	d103      	bne.n	800ad62 <xQueueGenericSend+0x72>
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d101      	bne.n	800ad66 <xQueueGenericSend+0x76>
 800ad62:	2301      	movs	r3, #1
 800ad64:	e000      	b.n	800ad68 <xQueueGenericSend+0x78>
 800ad66:	2300      	movs	r3, #0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10b      	bne.n	800ad84 <xQueueGenericSend+0x94>
	__asm volatile
 800ad6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad70:	f383 8811 	msr	BASEPRI, r3
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	623b      	str	r3, [r7, #32]
}
 800ad7e:	bf00      	nop
 800ad80:	bf00      	nop
 800ad82:	e7fd      	b.n	800ad80 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad84:	f001 f9ce 	bl	800c124 <xTaskGetSchedulerState>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d102      	bne.n	800ad94 <xQueueGenericSend+0xa4>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d101      	bne.n	800ad98 <xQueueGenericSend+0xa8>
 800ad94:	2301      	movs	r3, #1
 800ad96:	e000      	b.n	800ad9a <xQueueGenericSend+0xaa>
 800ad98:	2300      	movs	r3, #0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d10b      	bne.n	800adb6 <xQueueGenericSend+0xc6>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	61fb      	str	r3, [r7, #28]
}
 800adb0:	bf00      	nop
 800adb2:	bf00      	nop
 800adb4:	e7fd      	b.n	800adb2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adb6:	f001 ff1f 	bl	800cbf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d302      	bcc.n	800adcc <xQueueGenericSend+0xdc>
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	2b02      	cmp	r3, #2
 800adca:	d129      	bne.n	800ae20 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800adcc:	683a      	ldr	r2, [r7, #0]
 800adce:	68b9      	ldr	r1, [r7, #8]
 800add0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800add2:	f000 fa0f 	bl	800b1f4 <prvCopyDataToQueue>
 800add6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800add8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800addc:	2b00      	cmp	r3, #0
 800adde:	d010      	beq.n	800ae02 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ade0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade2:	3324      	adds	r3, #36	@ 0x24
 800ade4:	4618      	mov	r0, r3
 800ade6:	f000 ffdd 	bl	800bda4 <xTaskRemoveFromEventList>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d013      	beq.n	800ae18 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800adf0:	4b3f      	ldr	r3, [pc, #252]	@ (800aef0 <xQueueGenericSend+0x200>)
 800adf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adf6:	601a      	str	r2, [r3, #0]
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	e00a      	b.n	800ae18 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d007      	beq.n	800ae18 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae08:	4b39      	ldr	r3, [pc, #228]	@ (800aef0 <xQueueGenericSend+0x200>)
 800ae0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae0e:	601a      	str	r2, [r3, #0]
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae18:	f001 ff20 	bl	800cc5c <vPortExitCritical>
				return pdPASS;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e063      	b.n	800aee8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d103      	bne.n	800ae2e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae26:	f001 ff19 	bl	800cc5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	e05c      	b.n	800aee8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d106      	bne.n	800ae42 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae34:	f107 0314 	add.w	r3, r7, #20
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f001 f817 	bl	800be6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae42:	f001 ff0b 	bl	800cc5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae46:	f000 fd87 	bl	800b958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae4a:	f001 fed5 	bl	800cbf8 <vPortEnterCritical>
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae54:	b25b      	sxtb	r3, r3
 800ae56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae5a:	d103      	bne.n	800ae64 <xQueueGenericSend+0x174>
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae6a:	b25b      	sxtb	r3, r3
 800ae6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae70:	d103      	bne.n	800ae7a <xQueueGenericSend+0x18a>
 800ae72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae7a:	f001 feef 	bl	800cc5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae7e:	1d3a      	adds	r2, r7, #4
 800ae80:	f107 0314 	add.w	r3, r7, #20
 800ae84:	4611      	mov	r1, r2
 800ae86:	4618      	mov	r0, r3
 800ae88:	f001 f806 	bl	800be98 <xTaskCheckForTimeOut>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d124      	bne.n	800aedc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae94:	f000 faa6 	bl	800b3e4 <prvIsQueueFull>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d018      	beq.n	800aed0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea0:	3310      	adds	r3, #16
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	4611      	mov	r1, r2
 800aea6:	4618      	mov	r0, r3
 800aea8:	f000 ff2a 	bl	800bd00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aeac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aeae:	f000 fa31 	bl	800b314 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aeb2:	f000 fd5f 	bl	800b974 <xTaskResumeAll>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f47f af7c 	bne.w	800adb6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800aebe:	4b0c      	ldr	r3, [pc, #48]	@ (800aef0 <xQueueGenericSend+0x200>)
 800aec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aec4:	601a      	str	r2, [r3, #0]
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	e772      	b.n	800adb6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aed0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aed2:	f000 fa1f 	bl	800b314 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aed6:	f000 fd4d 	bl	800b974 <xTaskResumeAll>
 800aeda:	e76c      	b.n	800adb6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aedc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aede:	f000 fa19 	bl	800b314 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aee2:	f000 fd47 	bl	800b974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aee6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3738      	adds	r7, #56	@ 0x38
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	e000ed04 	.word	0xe000ed04

0800aef4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b090      	sub	sp, #64	@ 0x40
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
 800af00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800af06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d10b      	bne.n	800af24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800af0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af10:	f383 8811 	msr	BASEPRI, r3
 800af14:	f3bf 8f6f 	isb	sy
 800af18:	f3bf 8f4f 	dsb	sy
 800af1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800af1e:	bf00      	nop
 800af20:	bf00      	nop
 800af22:	e7fd      	b.n	800af20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d103      	bne.n	800af32 <xQueueGenericSendFromISR+0x3e>
 800af2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d101      	bne.n	800af36 <xQueueGenericSendFromISR+0x42>
 800af32:	2301      	movs	r3, #1
 800af34:	e000      	b.n	800af38 <xQueueGenericSendFromISR+0x44>
 800af36:	2300      	movs	r3, #0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d10b      	bne.n	800af54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800af3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af40:	f383 8811 	msr	BASEPRI, r3
 800af44:	f3bf 8f6f 	isb	sy
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800af4e:	bf00      	nop
 800af50:	bf00      	nop
 800af52:	e7fd      	b.n	800af50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	2b02      	cmp	r3, #2
 800af58:	d103      	bne.n	800af62 <xQueueGenericSendFromISR+0x6e>
 800af5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d101      	bne.n	800af66 <xQueueGenericSendFromISR+0x72>
 800af62:	2301      	movs	r3, #1
 800af64:	e000      	b.n	800af68 <xQueueGenericSendFromISR+0x74>
 800af66:	2300      	movs	r3, #0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d10b      	bne.n	800af84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800af6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af70:	f383 8811 	msr	BASEPRI, r3
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	623b      	str	r3, [r7, #32]
}
 800af7e:	bf00      	nop
 800af80:	bf00      	nop
 800af82:	e7fd      	b.n	800af80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af84:	f001 ff18 	bl	800cdb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800af88:	f3ef 8211 	mrs	r2, BASEPRI
 800af8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	61fa      	str	r2, [r7, #28]
 800af9e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800afa0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afa2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afac:	429a      	cmp	r2, r3
 800afae:	d302      	bcc.n	800afb6 <xQueueGenericSendFromISR+0xc2>
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	d12f      	bne.n	800b016 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800afbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	68b9      	ldr	r1, [r7, #8]
 800afca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800afcc:	f000 f912 	bl	800b1f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800afd0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800afd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd8:	d112      	bne.n	800b000 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d016      	beq.n	800b010 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe4:	3324      	adds	r3, #36	@ 0x24
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 fedc 	bl	800bda4 <xTaskRemoveFromEventList>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00e      	beq.n	800b010 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00b      	beq.n	800b010 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	601a      	str	r2, [r3, #0]
 800affe:	e007      	b.n	800b010 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b000:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b004:	3301      	adds	r3, #1
 800b006:	b2db      	uxtb	r3, r3
 800b008:	b25a      	sxtb	r2, r3
 800b00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b00c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b010:	2301      	movs	r3, #1
 800b012:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b014:	e001      	b.n	800b01a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b016:	2300      	movs	r3, #0
 800b018:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b01a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b01c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b024:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3740      	adds	r7, #64	@ 0x40
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b08c      	sub	sp, #48	@ 0x30
 800b034:	af00      	add	r7, sp, #0
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b03c:	2300      	movs	r3, #0
 800b03e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10b      	bne.n	800b062 <xQueueReceive+0x32>
	__asm volatile
 800b04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b04e:	f383 8811 	msr	BASEPRI, r3
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	f3bf 8f4f 	dsb	sy
 800b05a:	623b      	str	r3, [r7, #32]
}
 800b05c:	bf00      	nop
 800b05e:	bf00      	nop
 800b060:	e7fd      	b.n	800b05e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d103      	bne.n	800b070 <xQueueReceive+0x40>
 800b068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b06a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d101      	bne.n	800b074 <xQueueReceive+0x44>
 800b070:	2301      	movs	r3, #1
 800b072:	e000      	b.n	800b076 <xQueueReceive+0x46>
 800b074:	2300      	movs	r3, #0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d10b      	bne.n	800b092 <xQueueReceive+0x62>
	__asm volatile
 800b07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b07e:	f383 8811 	msr	BASEPRI, r3
 800b082:	f3bf 8f6f 	isb	sy
 800b086:	f3bf 8f4f 	dsb	sy
 800b08a:	61fb      	str	r3, [r7, #28]
}
 800b08c:	bf00      	nop
 800b08e:	bf00      	nop
 800b090:	e7fd      	b.n	800b08e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b092:	f001 f847 	bl	800c124 <xTaskGetSchedulerState>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d102      	bne.n	800b0a2 <xQueueReceive+0x72>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <xQueueReceive+0x76>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e000      	b.n	800b0a8 <xQueueReceive+0x78>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d10b      	bne.n	800b0c4 <xQueueReceive+0x94>
	__asm volatile
 800b0ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b0:	f383 8811 	msr	BASEPRI, r3
 800b0b4:	f3bf 8f6f 	isb	sy
 800b0b8:	f3bf 8f4f 	dsb	sy
 800b0bc:	61bb      	str	r3, [r7, #24]
}
 800b0be:	bf00      	nop
 800b0c0:	bf00      	nop
 800b0c2:	e7fd      	b.n	800b0c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0c4:	f001 fd98 	bl	800cbf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d01f      	beq.n	800b114 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0d4:	68b9      	ldr	r1, [r7, #8]
 800b0d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0d8:	f000 f8f6 	bl	800b2c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0de:	1e5a      	subs	r2, r3, #1
 800b0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00f      	beq.n	800b10c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ee:	3310      	adds	r3, #16
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f000 fe57 	bl	800bda4 <xTaskRemoveFromEventList>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d007      	beq.n	800b10c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b0fc:	4b3c      	ldr	r3, [pc, #240]	@ (800b1f0 <xQueueReceive+0x1c0>)
 800b0fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b102:	601a      	str	r2, [r3, #0]
 800b104:	f3bf 8f4f 	dsb	sy
 800b108:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b10c:	f001 fda6 	bl	800cc5c <vPortExitCritical>
				return pdPASS;
 800b110:	2301      	movs	r3, #1
 800b112:	e069      	b.n	800b1e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d103      	bne.n	800b122 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b11a:	f001 fd9f 	bl	800cc5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b11e:	2300      	movs	r3, #0
 800b120:	e062      	b.n	800b1e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b124:	2b00      	cmp	r3, #0
 800b126:	d106      	bne.n	800b136 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b128:	f107 0310 	add.w	r3, r7, #16
 800b12c:	4618      	mov	r0, r3
 800b12e:	f000 fe9d 	bl	800be6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b132:	2301      	movs	r3, #1
 800b134:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b136:	f001 fd91 	bl	800cc5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b13a:	f000 fc0d 	bl	800b958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b13e:	f001 fd5b 	bl	800cbf8 <vPortEnterCritical>
 800b142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b144:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b148:	b25b      	sxtb	r3, r3
 800b14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b14e:	d103      	bne.n	800b158 <xQueueReceive+0x128>
 800b150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b152:	2200      	movs	r2, #0
 800b154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b15a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b15e:	b25b      	sxtb	r3, r3
 800b160:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b164:	d103      	bne.n	800b16e <xQueueReceive+0x13e>
 800b166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b16e:	f001 fd75 	bl	800cc5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b172:	1d3a      	adds	r2, r7, #4
 800b174:	f107 0310 	add.w	r3, r7, #16
 800b178:	4611      	mov	r1, r2
 800b17a:	4618      	mov	r0, r3
 800b17c:	f000 fe8c 	bl	800be98 <xTaskCheckForTimeOut>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d123      	bne.n	800b1ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b186:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b188:	f000 f916 	bl	800b3b8 <prvIsQueueEmpty>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d017      	beq.n	800b1c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b194:	3324      	adds	r3, #36	@ 0x24
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	4611      	mov	r1, r2
 800b19a:	4618      	mov	r0, r3
 800b19c:	f000 fdb0 	bl	800bd00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1a2:	f000 f8b7 	bl	800b314 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b1a6:	f000 fbe5 	bl	800b974 <xTaskResumeAll>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d189      	bne.n	800b0c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b1b0:	4b0f      	ldr	r3, [pc, #60]	@ (800b1f0 <xQueueReceive+0x1c0>)
 800b1b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1b6:	601a      	str	r2, [r3, #0]
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	f3bf 8f6f 	isb	sy
 800b1c0:	e780      	b.n	800b0c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b1c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1c4:	f000 f8a6 	bl	800b314 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1c8:	f000 fbd4 	bl	800b974 <xTaskResumeAll>
 800b1cc:	e77a      	b.n	800b0c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b1ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1d0:	f000 f8a0 	bl	800b314 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1d4:	f000 fbce 	bl	800b974 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1da:	f000 f8ed 	bl	800b3b8 <prvIsQueueEmpty>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	f43f af6f 	beq.w	800b0c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b1e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3730      	adds	r7, #48	@ 0x30
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	e000ed04 	.word	0xe000ed04

0800b1f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b200:	2300      	movs	r3, #0
 800b202:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b208:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d10d      	bne.n	800b22e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d14d      	bne.n	800b2b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 ff9e 	bl	800c160 <xTaskPriorityDisinherit>
 800b224:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	609a      	str	r2, [r3, #8]
 800b22c:	e043      	b.n	800b2b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d119      	bne.n	800b268 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6858      	ldr	r0, [r3, #4]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b23c:	461a      	mov	r2, r3
 800b23e:	68b9      	ldr	r1, [r7, #8]
 800b240:	f004 ff13 	bl	801006a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	685a      	ldr	r2, [r3, #4]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b24c:	441a      	add	r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	685a      	ldr	r2, [r3, #4]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d32b      	bcc.n	800b2b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	605a      	str	r2, [r3, #4]
 800b266:	e026      	b.n	800b2b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	68d8      	ldr	r0, [r3, #12]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b270:	461a      	mov	r2, r3
 800b272:	68b9      	ldr	r1, [r7, #8]
 800b274:	f004 fef9 	bl	801006a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	68da      	ldr	r2, [r3, #12]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b280:	425b      	negs	r3, r3
 800b282:	441a      	add	r2, r3
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	68da      	ldr	r2, [r3, #12]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	429a      	cmp	r2, r3
 800b292:	d207      	bcs.n	800b2a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	689a      	ldr	r2, [r3, #8]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b29c:	425b      	negs	r3, r3
 800b29e:	441a      	add	r2, r3
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d105      	bne.n	800b2b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	1c5a      	adds	r2, r3, #1
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b2be:	697b      	ldr	r3, [r7, #20]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3718      	adds	r7, #24
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d018      	beq.n	800b30c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	68da      	ldr	r2, [r3, #12]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2e2:	441a      	add	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	68da      	ldr	r2, [r3, #12]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d303      	bcc.n	800b2fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	68d9      	ldr	r1, [r3, #12]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b304:	461a      	mov	r2, r3
 800b306:	6838      	ldr	r0, [r7, #0]
 800b308:	f004 feaf 	bl	801006a <memcpy>
	}
}
 800b30c:	bf00      	nop
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b31c:	f001 fc6c 	bl	800cbf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b326:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b328:	e011      	b.n	800b34e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d012      	beq.n	800b358 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	3324      	adds	r3, #36	@ 0x24
 800b336:	4618      	mov	r0, r3
 800b338:	f000 fd34 	bl	800bda4 <xTaskRemoveFromEventList>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d001      	beq.n	800b346 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b342:	f000 fe0d 	bl	800bf60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b346:	7bfb      	ldrb	r3, [r7, #15]
 800b348:	3b01      	subs	r3, #1
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b34e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b352:	2b00      	cmp	r3, #0
 800b354:	dce9      	bgt.n	800b32a <prvUnlockQueue+0x16>
 800b356:	e000      	b.n	800b35a <prvUnlockQueue+0x46>
					break;
 800b358:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	22ff      	movs	r2, #255	@ 0xff
 800b35e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b362:	f001 fc7b 	bl	800cc5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b366:	f001 fc47 	bl	800cbf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b370:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b372:	e011      	b.n	800b398 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d012      	beq.n	800b3a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	3310      	adds	r3, #16
 800b380:	4618      	mov	r0, r3
 800b382:	f000 fd0f 	bl	800bda4 <xTaskRemoveFromEventList>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b38c:	f000 fde8 	bl	800bf60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b390:	7bbb      	ldrb	r3, [r7, #14]
 800b392:	3b01      	subs	r3, #1
 800b394:	b2db      	uxtb	r3, r3
 800b396:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	dce9      	bgt.n	800b374 <prvUnlockQueue+0x60>
 800b3a0:	e000      	b.n	800b3a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b3a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	22ff      	movs	r2, #255	@ 0xff
 800b3a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b3ac:	f001 fc56 	bl	800cc5c <vPortExitCritical>
}
 800b3b0:	bf00      	nop
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3c0:	f001 fc1a 	bl	800cbf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d102      	bne.n	800b3d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	60fb      	str	r3, [r7, #12]
 800b3d0:	e001      	b.n	800b3d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3d6:	f001 fc41 	bl	800cc5c <vPortExitCritical>

	return xReturn;
 800b3da:	68fb      	ldr	r3, [r7, #12]
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3710      	adds	r7, #16
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3ec:	f001 fc04 	bl	800cbf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d102      	bne.n	800b402 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	60fb      	str	r3, [r7, #12]
 800b400:	e001      	b.n	800b406 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b402:	2300      	movs	r3, #0
 800b404:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b406:	f001 fc29 	bl	800cc5c <vPortExitCritical>

	return xReturn;
 800b40a:	68fb      	ldr	r3, [r7, #12]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b41e:	2300      	movs	r3, #0
 800b420:	60fb      	str	r3, [r7, #12]
 800b422:	e014      	b.n	800b44e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b424:	4a0f      	ldr	r2, [pc, #60]	@ (800b464 <vQueueAddToRegistry+0x50>)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10b      	bne.n	800b448 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b430:	490c      	ldr	r1, [pc, #48]	@ (800b464 <vQueueAddToRegistry+0x50>)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	683a      	ldr	r2, [r7, #0]
 800b436:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b43a:	4a0a      	ldr	r2, [pc, #40]	@ (800b464 <vQueueAddToRegistry+0x50>)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	4413      	add	r3, r2
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b446:	e006      	b.n	800b456 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3301      	adds	r3, #1
 800b44c:	60fb      	str	r3, [r7, #12]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2b07      	cmp	r3, #7
 800b452:	d9e7      	bls.n	800b424 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b454:	bf00      	nop
 800b456:	bf00      	nop
 800b458:	3714      	adds	r7, #20
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	24000bc0 	.word	0x24000bc0

0800b468 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b478:	f001 fbbe 	bl	800cbf8 <vPortEnterCritical>
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b482:	b25b      	sxtb	r3, r3
 800b484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b488:	d103      	bne.n	800b492 <vQueueWaitForMessageRestricted+0x2a>
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b498:	b25b      	sxtb	r3, r3
 800b49a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b49e:	d103      	bne.n	800b4a8 <vQueueWaitForMessageRestricted+0x40>
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b4a8:	f001 fbd8 	bl	800cc5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d106      	bne.n	800b4c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	3324      	adds	r3, #36	@ 0x24
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	68b9      	ldr	r1, [r7, #8]
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f000 fc45 	bl	800bd4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b4c2:	6978      	ldr	r0, [r7, #20]
 800b4c4:	f7ff ff26 	bl	800b314 <prvUnlockQueue>
	}
 800b4c8:	bf00      	nop
 800b4ca:	3718      	adds	r7, #24
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b08e      	sub	sp, #56	@ 0x38
 800b4d4:	af04      	add	r7, sp, #16
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	607a      	str	r2, [r7, #4]
 800b4dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b4de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d10b      	bne.n	800b4fc <xTaskCreateStatic+0x2c>
	__asm volatile
 800b4e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e8:	f383 8811 	msr	BASEPRI, r3
 800b4ec:	f3bf 8f6f 	isb	sy
 800b4f0:	f3bf 8f4f 	dsb	sy
 800b4f4:	623b      	str	r3, [r7, #32]
}
 800b4f6:	bf00      	nop
 800b4f8:	bf00      	nop
 800b4fa:	e7fd      	b.n	800b4f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d10b      	bne.n	800b51a <xTaskCreateStatic+0x4a>
	__asm volatile
 800b502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	61fb      	str	r3, [r7, #28]
}
 800b514:	bf00      	nop
 800b516:	bf00      	nop
 800b518:	e7fd      	b.n	800b516 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b51a:	235c      	movs	r3, #92	@ 0x5c
 800b51c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	2b5c      	cmp	r3, #92	@ 0x5c
 800b522:	d00b      	beq.n	800b53c <xTaskCreateStatic+0x6c>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	61bb      	str	r3, [r7, #24]
}
 800b536:	bf00      	nop
 800b538:	bf00      	nop
 800b53a:	e7fd      	b.n	800b538 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b53c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b540:	2b00      	cmp	r3, #0
 800b542:	d01e      	beq.n	800b582 <xTaskCreateStatic+0xb2>
 800b544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b546:	2b00      	cmp	r3, #0
 800b548:	d01b      	beq.n	800b582 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b54c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b550:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b552:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b556:	2202      	movs	r2, #2
 800b558:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b55c:	2300      	movs	r3, #0
 800b55e:	9303      	str	r3, [sp, #12]
 800b560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b562:	9302      	str	r3, [sp, #8]
 800b564:	f107 0314 	add.w	r3, r7, #20
 800b568:	9301      	str	r3, [sp, #4]
 800b56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	68b9      	ldr	r1, [r7, #8]
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f000 f850 	bl	800b61a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b57a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b57c:	f000 f8de 	bl	800b73c <prvAddNewTaskToReadyList>
 800b580:	e001      	b.n	800b586 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b582:	2300      	movs	r3, #0
 800b584:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b586:	697b      	ldr	r3, [r7, #20]
	}
 800b588:	4618      	mov	r0, r3
 800b58a:	3728      	adds	r7, #40	@ 0x28
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b590:	b580      	push	{r7, lr}
 800b592:	b08c      	sub	sp, #48	@ 0x30
 800b594:	af04      	add	r7, sp, #16
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	603b      	str	r3, [r7, #0]
 800b59c:	4613      	mov	r3, r2
 800b59e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b5a0:	88fb      	ldrh	r3, [r7, #6]
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f001 fc49 	bl	800ce3c <pvPortMalloc>
 800b5aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00e      	beq.n	800b5d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b5b2:	205c      	movs	r0, #92	@ 0x5c
 800b5b4:	f001 fc42 	bl	800ce3c <pvPortMalloc>
 800b5b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d003      	beq.n	800b5c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	697a      	ldr	r2, [r7, #20]
 800b5c4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b5c6:	e005      	b.n	800b5d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5c8:	6978      	ldr	r0, [r7, #20]
 800b5ca:	f001 fd05 	bl	800cfd8 <vPortFree>
 800b5ce:	e001      	b.n	800b5d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d017      	beq.n	800b60a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b5e2:	88fa      	ldrh	r2, [r7, #6]
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	9303      	str	r3, [sp, #12]
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	9302      	str	r3, [sp, #8]
 800b5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	68b9      	ldr	r1, [r7, #8]
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f000 f80e 	bl	800b61a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5fe:	69f8      	ldr	r0, [r7, #28]
 800b600:	f000 f89c 	bl	800b73c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b604:	2301      	movs	r3, #1
 800b606:	61bb      	str	r3, [r7, #24]
 800b608:	e002      	b.n	800b610 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b60a:	f04f 33ff 	mov.w	r3, #4294967295
 800b60e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b610:	69bb      	ldr	r3, [r7, #24]
	}
 800b612:	4618      	mov	r0, r3
 800b614:	3720      	adds	r7, #32
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b088      	sub	sp, #32
 800b61e:	af00      	add	r7, sp, #0
 800b620:	60f8      	str	r0, [r7, #12]
 800b622:	60b9      	str	r1, [r7, #8]
 800b624:	607a      	str	r2, [r7, #4]
 800b626:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b62a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	461a      	mov	r2, r3
 800b632:	21a5      	movs	r1, #165	@ 0xa5
 800b634:	f004 fc89 	bl	800ff4a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b63a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b63c:	6879      	ldr	r1, [r7, #4]
 800b63e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b642:	440b      	add	r3, r1
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	f023 0307 	bic.w	r3, r3, #7
 800b650:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	f003 0307 	and.w	r3, r3, #7
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00b      	beq.n	800b674 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b660:	f383 8811 	msr	BASEPRI, r3
 800b664:	f3bf 8f6f 	isb	sy
 800b668:	f3bf 8f4f 	dsb	sy
 800b66c:	617b      	str	r3, [r7, #20]
}
 800b66e:	bf00      	nop
 800b670:	bf00      	nop
 800b672:	e7fd      	b.n	800b670 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d01f      	beq.n	800b6ba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b67a:	2300      	movs	r3, #0
 800b67c:	61fb      	str	r3, [r7, #28]
 800b67e:	e012      	b.n	800b6a6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	4413      	add	r3, r2
 800b686:	7819      	ldrb	r1, [r3, #0]
 800b688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	4413      	add	r3, r2
 800b68e:	3334      	adds	r3, #52	@ 0x34
 800b690:	460a      	mov	r2, r1
 800b692:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	4413      	add	r3, r2
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d006      	beq.n	800b6ae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	61fb      	str	r3, [r7, #28]
 800b6a6:	69fb      	ldr	r3, [r7, #28]
 800b6a8:	2b0f      	cmp	r3, #15
 800b6aa:	d9e9      	bls.n	800b680 <prvInitialiseNewTask+0x66>
 800b6ac:	e000      	b.n	800b6b0 <prvInitialiseNewTask+0x96>
			{
				break;
 800b6ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b6b8:	e003      	b.n	800b6c2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6c4:	2b37      	cmp	r3, #55	@ 0x37
 800b6c6:	d901      	bls.n	800b6cc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6c8:	2337      	movs	r3, #55	@ 0x37
 800b6ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6d6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6da:	2200      	movs	r2, #0
 800b6dc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e0:	3304      	adds	r3, #4
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7ff f966 	bl	800a9b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ea:	3318      	adds	r3, #24
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7ff f961 	bl	800a9b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b700:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b706:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b70a:	2200      	movs	r2, #0
 800b70c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b710:	2200      	movs	r2, #0
 800b712:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	68f9      	ldr	r1, [r7, #12]
 800b71a:	69b8      	ldr	r0, [r7, #24]
 800b71c:	f001 f93e 	bl	800c99c <pxPortInitialiseStack>
 800b720:	4602      	mov	r2, r0
 800b722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b724:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d002      	beq.n	800b732 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b72e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b730:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b732:	bf00      	nop
 800b734:	3720      	adds	r7, #32
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
	...

0800b73c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b744:	f001 fa58 	bl	800cbf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b748:	4b2d      	ldr	r3, [pc, #180]	@ (800b800 <prvAddNewTaskToReadyList+0xc4>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	3301      	adds	r3, #1
 800b74e:	4a2c      	ldr	r2, [pc, #176]	@ (800b800 <prvAddNewTaskToReadyList+0xc4>)
 800b750:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b752:	4b2c      	ldr	r3, [pc, #176]	@ (800b804 <prvAddNewTaskToReadyList+0xc8>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d109      	bne.n	800b76e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b75a:	4a2a      	ldr	r2, [pc, #168]	@ (800b804 <prvAddNewTaskToReadyList+0xc8>)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b760:	4b27      	ldr	r3, [pc, #156]	@ (800b800 <prvAddNewTaskToReadyList+0xc4>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d110      	bne.n	800b78a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b768:	f000 fc1e 	bl	800bfa8 <prvInitialiseTaskLists>
 800b76c:	e00d      	b.n	800b78a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b76e:	4b26      	ldr	r3, [pc, #152]	@ (800b808 <prvAddNewTaskToReadyList+0xcc>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d109      	bne.n	800b78a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b776:	4b23      	ldr	r3, [pc, #140]	@ (800b804 <prvAddNewTaskToReadyList+0xc8>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b780:	429a      	cmp	r2, r3
 800b782:	d802      	bhi.n	800b78a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b784:	4a1f      	ldr	r2, [pc, #124]	@ (800b804 <prvAddNewTaskToReadyList+0xc8>)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b78a:	4b20      	ldr	r3, [pc, #128]	@ (800b80c <prvAddNewTaskToReadyList+0xd0>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	3301      	adds	r3, #1
 800b790:	4a1e      	ldr	r2, [pc, #120]	@ (800b80c <prvAddNewTaskToReadyList+0xd0>)
 800b792:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b794:	4b1d      	ldr	r3, [pc, #116]	@ (800b80c <prvAddNewTaskToReadyList+0xd0>)
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7a0:	4b1b      	ldr	r3, [pc, #108]	@ (800b810 <prvAddNewTaskToReadyList+0xd4>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d903      	bls.n	800b7b0 <prvAddNewTaskToReadyList+0x74>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ac:	4a18      	ldr	r2, [pc, #96]	@ (800b810 <prvAddNewTaskToReadyList+0xd4>)
 800b7ae:	6013      	str	r3, [r2, #0]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7b4:	4613      	mov	r3, r2
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	4413      	add	r3, r2
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	4a15      	ldr	r2, [pc, #84]	@ (800b814 <prvAddNewTaskToReadyList+0xd8>)
 800b7be:	441a      	add	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	3304      	adds	r3, #4
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4610      	mov	r0, r2
 800b7c8:	f7ff f901 	bl	800a9ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b7cc:	f001 fa46 	bl	800cc5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b7d0:	4b0d      	ldr	r3, [pc, #52]	@ (800b808 <prvAddNewTaskToReadyList+0xcc>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00e      	beq.n	800b7f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b7d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b804 <prvAddNewTaskToReadyList+0xc8>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d207      	bcs.n	800b7f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b7e6:	4b0c      	ldr	r3, [pc, #48]	@ (800b818 <prvAddNewTaskToReadyList+0xdc>)
 800b7e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7ec:	601a      	str	r2, [r3, #0]
 800b7ee:	f3bf 8f4f 	dsb	sy
 800b7f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7f6:	bf00      	nop
 800b7f8:	3708      	adds	r7, #8
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	240010d4 	.word	0x240010d4
 800b804:	24000c00 	.word	0x24000c00
 800b808:	240010e0 	.word	0x240010e0
 800b80c:	240010f0 	.word	0x240010f0
 800b810:	240010dc 	.word	0x240010dc
 800b814:	24000c04 	.word	0x24000c04
 800b818:	e000ed04 	.word	0xe000ed04

0800b81c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b824:	2300      	movs	r3, #0
 800b826:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d018      	beq.n	800b860 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b82e:	4b14      	ldr	r3, [pc, #80]	@ (800b880 <vTaskDelay+0x64>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00b      	beq.n	800b84e <vTaskDelay+0x32>
	__asm volatile
 800b836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b83a:	f383 8811 	msr	BASEPRI, r3
 800b83e:	f3bf 8f6f 	isb	sy
 800b842:	f3bf 8f4f 	dsb	sy
 800b846:	60bb      	str	r3, [r7, #8]
}
 800b848:	bf00      	nop
 800b84a:	bf00      	nop
 800b84c:	e7fd      	b.n	800b84a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b84e:	f000 f883 	bl	800b958 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b852:	2100      	movs	r1, #0
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 fcf3 	bl	800c240 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b85a:	f000 f88b 	bl	800b974 <xTaskResumeAll>
 800b85e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d107      	bne.n	800b876 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b866:	4b07      	ldr	r3, [pc, #28]	@ (800b884 <vTaskDelay+0x68>)
 800b868:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b86c:	601a      	str	r2, [r3, #0]
 800b86e:	f3bf 8f4f 	dsb	sy
 800b872:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b876:	bf00      	nop
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	240010fc 	.word	0x240010fc
 800b884:	e000ed04 	.word	0xe000ed04

0800b888 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b08a      	sub	sp, #40	@ 0x28
 800b88c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b88e:	2300      	movs	r3, #0
 800b890:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b892:	2300      	movs	r3, #0
 800b894:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b896:	463a      	mov	r2, r7
 800b898:	1d39      	adds	r1, r7, #4
 800b89a:	f107 0308 	add.w	r3, r7, #8
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7ff f834 	bl	800a90c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b8a4:	6839      	ldr	r1, [r7, #0]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	9202      	str	r2, [sp, #8]
 800b8ac:	9301      	str	r3, [sp, #4]
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	9300      	str	r3, [sp, #0]
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	460a      	mov	r2, r1
 800b8b6:	4922      	ldr	r1, [pc, #136]	@ (800b940 <vTaskStartScheduler+0xb8>)
 800b8b8:	4822      	ldr	r0, [pc, #136]	@ (800b944 <vTaskStartScheduler+0xbc>)
 800b8ba:	f7ff fe09 	bl	800b4d0 <xTaskCreateStatic>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	4a21      	ldr	r2, [pc, #132]	@ (800b948 <vTaskStartScheduler+0xc0>)
 800b8c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b8c4:	4b20      	ldr	r3, [pc, #128]	@ (800b948 <vTaskStartScheduler+0xc0>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d002      	beq.n	800b8d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	617b      	str	r3, [r7, #20]
 800b8d0:	e001      	b.n	800b8d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d102      	bne.n	800b8e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b8dc:	f000 fd04 	bl	800c2e8 <xTimerCreateTimerTask>
 800b8e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d116      	bne.n	800b916 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ec:	f383 8811 	msr	BASEPRI, r3
 800b8f0:	f3bf 8f6f 	isb	sy
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	613b      	str	r3, [r7, #16]
}
 800b8fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b8fc:	4b13      	ldr	r3, [pc, #76]	@ (800b94c <vTaskStartScheduler+0xc4>)
 800b8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b902:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b904:	4b12      	ldr	r3, [pc, #72]	@ (800b950 <vTaskStartScheduler+0xc8>)
 800b906:	2201      	movs	r2, #1
 800b908:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b90a:	4b12      	ldr	r3, [pc, #72]	@ (800b954 <vTaskStartScheduler+0xcc>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b910:	f001 f8ce 	bl	800cab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b914:	e00f      	b.n	800b936 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b91c:	d10b      	bne.n	800b936 <vTaskStartScheduler+0xae>
	__asm volatile
 800b91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b922:	f383 8811 	msr	BASEPRI, r3
 800b926:	f3bf 8f6f 	isb	sy
 800b92a:	f3bf 8f4f 	dsb	sy
 800b92e:	60fb      	str	r3, [r7, #12]
}
 800b930:	bf00      	nop
 800b932:	bf00      	nop
 800b934:	e7fd      	b.n	800b932 <vTaskStartScheduler+0xaa>
}
 800b936:	bf00      	nop
 800b938:	3718      	adds	r7, #24
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	080124d8 	.word	0x080124d8
 800b944:	0800bf79 	.word	0x0800bf79
 800b948:	240010f8 	.word	0x240010f8
 800b94c:	240010f4 	.word	0x240010f4
 800b950:	240010e0 	.word	0x240010e0
 800b954:	240010d8 	.word	0x240010d8

0800b958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b958:	b480      	push	{r7}
 800b95a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b95c:	4b04      	ldr	r3, [pc, #16]	@ (800b970 <vTaskSuspendAll+0x18>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	3301      	adds	r3, #1
 800b962:	4a03      	ldr	r2, [pc, #12]	@ (800b970 <vTaskSuspendAll+0x18>)
 800b964:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b966:	bf00      	nop
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr
 800b970:	240010fc 	.word	0x240010fc

0800b974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b97a:	2300      	movs	r3, #0
 800b97c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b97e:	2300      	movs	r3, #0
 800b980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b982:	4b42      	ldr	r3, [pc, #264]	@ (800ba8c <xTaskResumeAll+0x118>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d10b      	bne.n	800b9a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	603b      	str	r3, [r7, #0]
}
 800b99c:	bf00      	nop
 800b99e:	bf00      	nop
 800b9a0:	e7fd      	b.n	800b99e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b9a2:	f001 f929 	bl	800cbf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b9a6:	4b39      	ldr	r3, [pc, #228]	@ (800ba8c <xTaskResumeAll+0x118>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	4a37      	ldr	r2, [pc, #220]	@ (800ba8c <xTaskResumeAll+0x118>)
 800b9ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9b0:	4b36      	ldr	r3, [pc, #216]	@ (800ba8c <xTaskResumeAll+0x118>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d162      	bne.n	800ba7e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b9b8:	4b35      	ldr	r3, [pc, #212]	@ (800ba90 <xTaskResumeAll+0x11c>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d05e      	beq.n	800ba7e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9c0:	e02f      	b.n	800ba22 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9c2:	4b34      	ldr	r3, [pc, #208]	@ (800ba94 <xTaskResumeAll+0x120>)
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	3318      	adds	r3, #24
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7ff f85a 	bl	800aa88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	3304      	adds	r3, #4
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7ff f855 	bl	800aa88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9e2:	4b2d      	ldr	r3, [pc, #180]	@ (800ba98 <xTaskResumeAll+0x124>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d903      	bls.n	800b9f2 <xTaskResumeAll+0x7e>
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ee:	4a2a      	ldr	r2, [pc, #168]	@ (800ba98 <xTaskResumeAll+0x124>)
 800b9f0:	6013      	str	r3, [r2, #0]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9f6:	4613      	mov	r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	4413      	add	r3, r2
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	4a27      	ldr	r2, [pc, #156]	@ (800ba9c <xTaskResumeAll+0x128>)
 800ba00:	441a      	add	r2, r3
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	3304      	adds	r3, #4
 800ba06:	4619      	mov	r1, r3
 800ba08:	4610      	mov	r0, r2
 800ba0a:	f7fe ffe0 	bl	800a9ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba12:	4b23      	ldr	r3, [pc, #140]	@ (800baa0 <xTaskResumeAll+0x12c>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d302      	bcc.n	800ba22 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ba1c:	4b21      	ldr	r3, [pc, #132]	@ (800baa4 <xTaskResumeAll+0x130>)
 800ba1e:	2201      	movs	r2, #1
 800ba20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba22:	4b1c      	ldr	r3, [pc, #112]	@ (800ba94 <xTaskResumeAll+0x120>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1cb      	bne.n	800b9c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d001      	beq.n	800ba34 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba30:	f000 fb58 	bl	800c0e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba34:	4b1c      	ldr	r3, [pc, #112]	@ (800baa8 <xTaskResumeAll+0x134>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d010      	beq.n	800ba62 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba40:	f000 f846 	bl	800bad0 <xTaskIncrementTick>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d002      	beq.n	800ba50 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ba4a:	4b16      	ldr	r3, [pc, #88]	@ (800baa4 <xTaskResumeAll+0x130>)
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	3b01      	subs	r3, #1
 800ba54:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1f1      	bne.n	800ba40 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ba5c:	4b12      	ldr	r3, [pc, #72]	@ (800baa8 <xTaskResumeAll+0x134>)
 800ba5e:	2200      	movs	r2, #0
 800ba60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba62:	4b10      	ldr	r3, [pc, #64]	@ (800baa4 <xTaskResumeAll+0x130>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d009      	beq.n	800ba7e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba6e:	4b0f      	ldr	r3, [pc, #60]	@ (800baac <xTaskResumeAll+0x138>)
 800ba70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba74:	601a      	str	r2, [r3, #0]
 800ba76:	f3bf 8f4f 	dsb	sy
 800ba7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba7e:	f001 f8ed 	bl	800cc5c <vPortExitCritical>

	return xAlreadyYielded;
 800ba82:	68bb      	ldr	r3, [r7, #8]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	240010fc 	.word	0x240010fc
 800ba90:	240010d4 	.word	0x240010d4
 800ba94:	24001094 	.word	0x24001094
 800ba98:	240010dc 	.word	0x240010dc
 800ba9c:	24000c04 	.word	0x24000c04
 800baa0:	24000c00 	.word	0x24000c00
 800baa4:	240010e8 	.word	0x240010e8
 800baa8:	240010e4 	.word	0x240010e4
 800baac:	e000ed04 	.word	0xe000ed04

0800bab0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bab0:	b480      	push	{r7}
 800bab2:	b083      	sub	sp, #12
 800bab4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bab6:	4b05      	ldr	r3, [pc, #20]	@ (800bacc <xTaskGetTickCount+0x1c>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800babc:	687b      	ldr	r3, [r7, #4]
}
 800babe:	4618      	mov	r0, r3
 800bac0:	370c      	adds	r7, #12
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	240010d8 	.word	0x240010d8

0800bad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bad6:	2300      	movs	r3, #0
 800bad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bada:	4b4f      	ldr	r3, [pc, #316]	@ (800bc18 <xTaskIncrementTick+0x148>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f040 8090 	bne.w	800bc04 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bae4:	4b4d      	ldr	r3, [pc, #308]	@ (800bc1c <xTaskIncrementTick+0x14c>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	3301      	adds	r3, #1
 800baea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800baec:	4a4b      	ldr	r2, [pc, #300]	@ (800bc1c <xTaskIncrementTick+0x14c>)
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d121      	bne.n	800bb3c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800baf8:	4b49      	ldr	r3, [pc, #292]	@ (800bc20 <xTaskIncrementTick+0x150>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00b      	beq.n	800bb1a <xTaskIncrementTick+0x4a>
	__asm volatile
 800bb02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb06:	f383 8811 	msr	BASEPRI, r3
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	603b      	str	r3, [r7, #0]
}
 800bb14:	bf00      	nop
 800bb16:	bf00      	nop
 800bb18:	e7fd      	b.n	800bb16 <xTaskIncrementTick+0x46>
 800bb1a:	4b41      	ldr	r3, [pc, #260]	@ (800bc20 <xTaskIncrementTick+0x150>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	60fb      	str	r3, [r7, #12]
 800bb20:	4b40      	ldr	r3, [pc, #256]	@ (800bc24 <xTaskIncrementTick+0x154>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a3e      	ldr	r2, [pc, #248]	@ (800bc20 <xTaskIncrementTick+0x150>)
 800bb26:	6013      	str	r3, [r2, #0]
 800bb28:	4a3e      	ldr	r2, [pc, #248]	@ (800bc24 <xTaskIncrementTick+0x154>)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6013      	str	r3, [r2, #0]
 800bb2e:	4b3e      	ldr	r3, [pc, #248]	@ (800bc28 <xTaskIncrementTick+0x158>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	3301      	adds	r3, #1
 800bb34:	4a3c      	ldr	r2, [pc, #240]	@ (800bc28 <xTaskIncrementTick+0x158>)
 800bb36:	6013      	str	r3, [r2, #0]
 800bb38:	f000 fad4 	bl	800c0e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb3c:	4b3b      	ldr	r3, [pc, #236]	@ (800bc2c <xTaskIncrementTick+0x15c>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	693a      	ldr	r2, [r7, #16]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d349      	bcc.n	800bbda <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb46:	4b36      	ldr	r3, [pc, #216]	@ (800bc20 <xTaskIncrementTick+0x150>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d104      	bne.n	800bb5a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb50:	4b36      	ldr	r3, [pc, #216]	@ (800bc2c <xTaskIncrementTick+0x15c>)
 800bb52:	f04f 32ff 	mov.w	r2, #4294967295
 800bb56:	601a      	str	r2, [r3, #0]
					break;
 800bb58:	e03f      	b.n	800bbda <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb5a:	4b31      	ldr	r3, [pc, #196]	@ (800bc20 <xTaskIncrementTick+0x150>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d203      	bcs.n	800bb7a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb72:	4a2e      	ldr	r2, [pc, #184]	@ (800bc2c <xTaskIncrementTick+0x15c>)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb78:	e02f      	b.n	800bbda <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fe ff82 	bl	800aa88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d004      	beq.n	800bb96 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	3318      	adds	r3, #24
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe ff79 	bl	800aa88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb9a:	4b25      	ldr	r3, [pc, #148]	@ (800bc30 <xTaskIncrementTick+0x160>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d903      	bls.n	800bbaa <xTaskIncrementTick+0xda>
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba6:	4a22      	ldr	r2, [pc, #136]	@ (800bc30 <xTaskIncrementTick+0x160>)
 800bba8:	6013      	str	r3, [r2, #0]
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbae:	4613      	mov	r3, r2
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	4413      	add	r3, r2
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	4a1f      	ldr	r2, [pc, #124]	@ (800bc34 <xTaskIncrementTick+0x164>)
 800bbb8:	441a      	add	r2, r3
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	3304      	adds	r3, #4
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	4610      	mov	r0, r2
 800bbc2:	f7fe ff04 	bl	800a9ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbca:	4b1b      	ldr	r3, [pc, #108]	@ (800bc38 <xTaskIncrementTick+0x168>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d3b8      	bcc.n	800bb46 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbd8:	e7b5      	b.n	800bb46 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bbda:	4b17      	ldr	r3, [pc, #92]	@ (800bc38 <xTaskIncrementTick+0x168>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbe0:	4914      	ldr	r1, [pc, #80]	@ (800bc34 <xTaskIncrementTick+0x164>)
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	4413      	add	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	440b      	add	r3, r1
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d901      	bls.n	800bbf6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bbf6:	4b11      	ldr	r3, [pc, #68]	@ (800bc3c <xTaskIncrementTick+0x16c>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d007      	beq.n	800bc0e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	617b      	str	r3, [r7, #20]
 800bc02:	e004      	b.n	800bc0e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bc04:	4b0e      	ldr	r3, [pc, #56]	@ (800bc40 <xTaskIncrementTick+0x170>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	4a0d      	ldr	r2, [pc, #52]	@ (800bc40 <xTaskIncrementTick+0x170>)
 800bc0c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bc0e:	697b      	ldr	r3, [r7, #20]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3718      	adds	r7, #24
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	240010fc 	.word	0x240010fc
 800bc1c:	240010d8 	.word	0x240010d8
 800bc20:	2400108c 	.word	0x2400108c
 800bc24:	24001090 	.word	0x24001090
 800bc28:	240010ec 	.word	0x240010ec
 800bc2c:	240010f4 	.word	0x240010f4
 800bc30:	240010dc 	.word	0x240010dc
 800bc34:	24000c04 	.word	0x24000c04
 800bc38:	24000c00 	.word	0x24000c00
 800bc3c:	240010e8 	.word	0x240010e8
 800bc40:	240010e4 	.word	0x240010e4

0800bc44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc4a:	4b28      	ldr	r3, [pc, #160]	@ (800bcec <vTaskSwitchContext+0xa8>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d003      	beq.n	800bc5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc52:	4b27      	ldr	r3, [pc, #156]	@ (800bcf0 <vTaskSwitchContext+0xac>)
 800bc54:	2201      	movs	r2, #1
 800bc56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc58:	e042      	b.n	800bce0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800bc5a:	4b25      	ldr	r3, [pc, #148]	@ (800bcf0 <vTaskSwitchContext+0xac>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc60:	4b24      	ldr	r3, [pc, #144]	@ (800bcf4 <vTaskSwitchContext+0xb0>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	60fb      	str	r3, [r7, #12]
 800bc66:	e011      	b.n	800bc8c <vTaskSwitchContext+0x48>
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d10b      	bne.n	800bc86 <vTaskSwitchContext+0x42>
	__asm volatile
 800bc6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc72:	f383 8811 	msr	BASEPRI, r3
 800bc76:	f3bf 8f6f 	isb	sy
 800bc7a:	f3bf 8f4f 	dsb	sy
 800bc7e:	607b      	str	r3, [r7, #4]
}
 800bc80:	bf00      	nop
 800bc82:	bf00      	nop
 800bc84:	e7fd      	b.n	800bc82 <vTaskSwitchContext+0x3e>
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	60fb      	str	r3, [r7, #12]
 800bc8c:	491a      	ldr	r1, [pc, #104]	@ (800bcf8 <vTaskSwitchContext+0xb4>)
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	4613      	mov	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4413      	add	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	440b      	add	r3, r1
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d0e3      	beq.n	800bc68 <vTaskSwitchContext+0x24>
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	4613      	mov	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4413      	add	r3, r2
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	4a13      	ldr	r2, [pc, #76]	@ (800bcf8 <vTaskSwitchContext+0xb4>)
 800bcac:	4413      	add	r3, r2
 800bcae:	60bb      	str	r3, [r7, #8]
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	685a      	ldr	r2, [r3, #4]
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	605a      	str	r2, [r3, #4]
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	685a      	ldr	r2, [r3, #4]
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	3308      	adds	r3, #8
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d104      	bne.n	800bcd0 <vTaskSwitchContext+0x8c>
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	685a      	ldr	r2, [r3, #4]
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	605a      	str	r2, [r3, #4]
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	4a09      	ldr	r2, [pc, #36]	@ (800bcfc <vTaskSwitchContext+0xb8>)
 800bcd8:	6013      	str	r3, [r2, #0]
 800bcda:	4a06      	ldr	r2, [pc, #24]	@ (800bcf4 <vTaskSwitchContext+0xb0>)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6013      	str	r3, [r2, #0]
}
 800bce0:	bf00      	nop
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr
 800bcec:	240010fc 	.word	0x240010fc
 800bcf0:	240010e8 	.word	0x240010e8
 800bcf4:	240010dc 	.word	0x240010dc
 800bcf8:	24000c04 	.word	0x24000c04
 800bcfc:	24000c00 	.word	0x24000c00

0800bd00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d10b      	bne.n	800bd28 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd14:	f383 8811 	msr	BASEPRI, r3
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	60fb      	str	r3, [r7, #12]
}
 800bd22:	bf00      	nop
 800bd24:	bf00      	nop
 800bd26:	e7fd      	b.n	800bd24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd28:	4b07      	ldr	r3, [pc, #28]	@ (800bd48 <vTaskPlaceOnEventList+0x48>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	3318      	adds	r3, #24
 800bd2e:	4619      	mov	r1, r3
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f7fe fe70 	bl	800aa16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd36:	2101      	movs	r1, #1
 800bd38:	6838      	ldr	r0, [r7, #0]
 800bd3a:	f000 fa81 	bl	800c240 <prvAddCurrentTaskToDelayedList>
}
 800bd3e:	bf00      	nop
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	24000c00 	.word	0x24000c00

0800bd4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b086      	sub	sp, #24
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d10b      	bne.n	800bd76 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd62:	f383 8811 	msr	BASEPRI, r3
 800bd66:	f3bf 8f6f 	isb	sy
 800bd6a:	f3bf 8f4f 	dsb	sy
 800bd6e:	617b      	str	r3, [r7, #20]
}
 800bd70:	bf00      	nop
 800bd72:	bf00      	nop
 800bd74:	e7fd      	b.n	800bd72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd76:	4b0a      	ldr	r3, [pc, #40]	@ (800bda0 <vTaskPlaceOnEventListRestricted+0x54>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	3318      	adds	r3, #24
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f7fe fe25 	bl	800a9ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d002      	beq.n	800bd90 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bd8a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd90:	6879      	ldr	r1, [r7, #4]
 800bd92:	68b8      	ldr	r0, [r7, #8]
 800bd94:	f000 fa54 	bl	800c240 <prvAddCurrentTaskToDelayedList>
	}
 800bd98:	bf00      	nop
 800bd9a:	3718      	adds	r7, #24
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	24000c00 	.word	0x24000c00

0800bda4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	68db      	ldr	r3, [r3, #12]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d10b      	bne.n	800bdd2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bdba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	60fb      	str	r3, [r7, #12]
}
 800bdcc:	bf00      	nop
 800bdce:	bf00      	nop
 800bdd0:	e7fd      	b.n	800bdce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	3318      	adds	r3, #24
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7fe fe56 	bl	800aa88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bddc:	4b1d      	ldr	r3, [pc, #116]	@ (800be54 <xTaskRemoveFromEventList+0xb0>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d11d      	bne.n	800be20 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	3304      	adds	r3, #4
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7fe fe4d 	bl	800aa88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdf2:	4b19      	ldr	r3, [pc, #100]	@ (800be58 <xTaskRemoveFromEventList+0xb4>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d903      	bls.n	800be02 <xTaskRemoveFromEventList+0x5e>
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdfe:	4a16      	ldr	r2, [pc, #88]	@ (800be58 <xTaskRemoveFromEventList+0xb4>)
 800be00:	6013      	str	r3, [r2, #0]
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be06:	4613      	mov	r3, r2
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	4413      	add	r3, r2
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	4a13      	ldr	r2, [pc, #76]	@ (800be5c <xTaskRemoveFromEventList+0xb8>)
 800be10:	441a      	add	r2, r3
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	3304      	adds	r3, #4
 800be16:	4619      	mov	r1, r3
 800be18:	4610      	mov	r0, r2
 800be1a:	f7fe fdd8 	bl	800a9ce <vListInsertEnd>
 800be1e:	e005      	b.n	800be2c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	3318      	adds	r3, #24
 800be24:	4619      	mov	r1, r3
 800be26:	480e      	ldr	r0, [pc, #56]	@ (800be60 <xTaskRemoveFromEventList+0xbc>)
 800be28:	f7fe fdd1 	bl	800a9ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be30:	4b0c      	ldr	r3, [pc, #48]	@ (800be64 <xTaskRemoveFromEventList+0xc0>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be36:	429a      	cmp	r2, r3
 800be38:	d905      	bls.n	800be46 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be3a:	2301      	movs	r3, #1
 800be3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be3e:	4b0a      	ldr	r3, [pc, #40]	@ (800be68 <xTaskRemoveFromEventList+0xc4>)
 800be40:	2201      	movs	r2, #1
 800be42:	601a      	str	r2, [r3, #0]
 800be44:	e001      	b.n	800be4a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800be46:	2300      	movs	r3, #0
 800be48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be4a:	697b      	ldr	r3, [r7, #20]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3718      	adds	r7, #24
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	240010fc 	.word	0x240010fc
 800be58:	240010dc 	.word	0x240010dc
 800be5c:	24000c04 	.word	0x24000c04
 800be60:	24001094 	.word	0x24001094
 800be64:	24000c00 	.word	0x24000c00
 800be68:	240010e8 	.word	0x240010e8

0800be6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be74:	4b06      	ldr	r3, [pc, #24]	@ (800be90 <vTaskInternalSetTimeOutState+0x24>)
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be7c:	4b05      	ldr	r3, [pc, #20]	@ (800be94 <vTaskInternalSetTimeOutState+0x28>)
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	605a      	str	r2, [r3, #4]
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr
 800be90:	240010ec 	.word	0x240010ec
 800be94:	240010d8 	.word	0x240010d8

0800be98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b088      	sub	sp, #32
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d10b      	bne.n	800bec0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beac:	f383 8811 	msr	BASEPRI, r3
 800beb0:	f3bf 8f6f 	isb	sy
 800beb4:	f3bf 8f4f 	dsb	sy
 800beb8:	613b      	str	r3, [r7, #16]
}
 800beba:	bf00      	nop
 800bebc:	bf00      	nop
 800bebe:	e7fd      	b.n	800bebc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d10b      	bne.n	800bede <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beca:	f383 8811 	msr	BASEPRI, r3
 800bece:	f3bf 8f6f 	isb	sy
 800bed2:	f3bf 8f4f 	dsb	sy
 800bed6:	60fb      	str	r3, [r7, #12]
}
 800bed8:	bf00      	nop
 800beda:	bf00      	nop
 800bedc:	e7fd      	b.n	800beda <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bede:	f000 fe8b 	bl	800cbf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bee2:	4b1d      	ldr	r3, [pc, #116]	@ (800bf58 <xTaskCheckForTimeOut+0xc0>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	69ba      	ldr	r2, [r7, #24]
 800beee:	1ad3      	subs	r3, r2, r3
 800bef0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800befa:	d102      	bne.n	800bf02 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800befc:	2300      	movs	r3, #0
 800befe:	61fb      	str	r3, [r7, #28]
 800bf00:	e023      	b.n	800bf4a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	4b15      	ldr	r3, [pc, #84]	@ (800bf5c <xTaskCheckForTimeOut+0xc4>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d007      	beq.n	800bf1e <xTaskCheckForTimeOut+0x86>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	69ba      	ldr	r2, [r7, #24]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d302      	bcc.n	800bf1e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	61fb      	str	r3, [r7, #28]
 800bf1c:	e015      	b.n	800bf4a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	697a      	ldr	r2, [r7, #20]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d20b      	bcs.n	800bf40 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	1ad2      	subs	r2, r2, r3
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7ff ff99 	bl	800be6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	61fb      	str	r3, [r7, #28]
 800bf3e:	e004      	b.n	800bf4a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	2200      	movs	r2, #0
 800bf44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf46:	2301      	movs	r3, #1
 800bf48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf4a:	f000 fe87 	bl	800cc5c <vPortExitCritical>

	return xReturn;
 800bf4e:	69fb      	ldr	r3, [r7, #28]
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3720      	adds	r7, #32
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	240010d8 	.word	0x240010d8
 800bf5c:	240010ec 	.word	0x240010ec

0800bf60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf60:	b480      	push	{r7}
 800bf62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf64:	4b03      	ldr	r3, [pc, #12]	@ (800bf74 <vTaskMissedYield+0x14>)
 800bf66:	2201      	movs	r2, #1
 800bf68:	601a      	str	r2, [r3, #0]
}
 800bf6a:	bf00      	nop
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr
 800bf74:	240010e8 	.word	0x240010e8

0800bf78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf80:	f000 f852 	bl	800c028 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf84:	4b06      	ldr	r3, [pc, #24]	@ (800bfa0 <prvIdleTask+0x28>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d9f9      	bls.n	800bf80 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf8c:	4b05      	ldr	r3, [pc, #20]	@ (800bfa4 <prvIdleTask+0x2c>)
 800bf8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf92:	601a      	str	r2, [r3, #0]
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf9c:	e7f0      	b.n	800bf80 <prvIdleTask+0x8>
 800bf9e:	bf00      	nop
 800bfa0:	24000c04 	.word	0x24000c04
 800bfa4:	e000ed04 	.word	0xe000ed04

0800bfa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfae:	2300      	movs	r3, #0
 800bfb0:	607b      	str	r3, [r7, #4]
 800bfb2:	e00c      	b.n	800bfce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	4413      	add	r3, r2
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	4a12      	ldr	r2, [pc, #72]	@ (800c008 <prvInitialiseTaskLists+0x60>)
 800bfc0:	4413      	add	r3, r2
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7fe fcd6 	bl	800a974 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	607b      	str	r3, [r7, #4]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2b37      	cmp	r3, #55	@ 0x37
 800bfd2:	d9ef      	bls.n	800bfb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bfd4:	480d      	ldr	r0, [pc, #52]	@ (800c00c <prvInitialiseTaskLists+0x64>)
 800bfd6:	f7fe fccd 	bl	800a974 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bfda:	480d      	ldr	r0, [pc, #52]	@ (800c010 <prvInitialiseTaskLists+0x68>)
 800bfdc:	f7fe fcca 	bl	800a974 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bfe0:	480c      	ldr	r0, [pc, #48]	@ (800c014 <prvInitialiseTaskLists+0x6c>)
 800bfe2:	f7fe fcc7 	bl	800a974 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bfe6:	480c      	ldr	r0, [pc, #48]	@ (800c018 <prvInitialiseTaskLists+0x70>)
 800bfe8:	f7fe fcc4 	bl	800a974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bfec:	480b      	ldr	r0, [pc, #44]	@ (800c01c <prvInitialiseTaskLists+0x74>)
 800bfee:	f7fe fcc1 	bl	800a974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bff2:	4b0b      	ldr	r3, [pc, #44]	@ (800c020 <prvInitialiseTaskLists+0x78>)
 800bff4:	4a05      	ldr	r2, [pc, #20]	@ (800c00c <prvInitialiseTaskLists+0x64>)
 800bff6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bff8:	4b0a      	ldr	r3, [pc, #40]	@ (800c024 <prvInitialiseTaskLists+0x7c>)
 800bffa:	4a05      	ldr	r2, [pc, #20]	@ (800c010 <prvInitialiseTaskLists+0x68>)
 800bffc:	601a      	str	r2, [r3, #0]
}
 800bffe:	bf00      	nop
 800c000:	3708      	adds	r7, #8
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	24000c04 	.word	0x24000c04
 800c00c:	24001064 	.word	0x24001064
 800c010:	24001078 	.word	0x24001078
 800c014:	24001094 	.word	0x24001094
 800c018:	240010a8 	.word	0x240010a8
 800c01c:	240010c0 	.word	0x240010c0
 800c020:	2400108c 	.word	0x2400108c
 800c024:	24001090 	.word	0x24001090

0800c028 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c02e:	e019      	b.n	800c064 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c030:	f000 fde2 	bl	800cbf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c034:	4b10      	ldr	r3, [pc, #64]	@ (800c078 <prvCheckTasksWaitingTermination+0x50>)
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	3304      	adds	r3, #4
 800c040:	4618      	mov	r0, r3
 800c042:	f7fe fd21 	bl	800aa88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c046:	4b0d      	ldr	r3, [pc, #52]	@ (800c07c <prvCheckTasksWaitingTermination+0x54>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	3b01      	subs	r3, #1
 800c04c:	4a0b      	ldr	r2, [pc, #44]	@ (800c07c <prvCheckTasksWaitingTermination+0x54>)
 800c04e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c050:	4b0b      	ldr	r3, [pc, #44]	@ (800c080 <prvCheckTasksWaitingTermination+0x58>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	3b01      	subs	r3, #1
 800c056:	4a0a      	ldr	r2, [pc, #40]	@ (800c080 <prvCheckTasksWaitingTermination+0x58>)
 800c058:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c05a:	f000 fdff 	bl	800cc5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f810 	bl	800c084 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c064:	4b06      	ldr	r3, [pc, #24]	@ (800c080 <prvCheckTasksWaitingTermination+0x58>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d1e1      	bne.n	800c030 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c06c:	bf00      	nop
 800c06e:	bf00      	nop
 800c070:	3708      	adds	r7, #8
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	240010a8 	.word	0x240010a8
 800c07c:	240010d4 	.word	0x240010d4
 800c080:	240010bc 	.word	0x240010bc

0800c084 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c092:	2b00      	cmp	r3, #0
 800c094:	d108      	bne.n	800c0a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c09a:	4618      	mov	r0, r3
 800c09c:	f000 ff9c 	bl	800cfd8 <vPortFree>
				vPortFree( pxTCB );
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 ff99 	bl	800cfd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c0a6:	e019      	b.n	800c0dc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d103      	bne.n	800c0ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 ff90 	bl	800cfd8 <vPortFree>
	}
 800c0b8:	e010      	b.n	800c0dc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c0c0:	2b02      	cmp	r3, #2
 800c0c2:	d00b      	beq.n	800c0dc <prvDeleteTCB+0x58>
	__asm volatile
 800c0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c8:	f383 8811 	msr	BASEPRI, r3
 800c0cc:	f3bf 8f6f 	isb	sy
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	60fb      	str	r3, [r7, #12]
}
 800c0d6:	bf00      	nop
 800c0d8:	bf00      	nop
 800c0da:	e7fd      	b.n	800c0d8 <prvDeleteTCB+0x54>
	}
 800c0dc:	bf00      	nop
 800c0de:	3710      	adds	r7, #16
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0ea:	4b0c      	ldr	r3, [pc, #48]	@ (800c11c <prvResetNextTaskUnblockTime+0x38>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d104      	bne.n	800c0fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c0f4:	4b0a      	ldr	r3, [pc, #40]	@ (800c120 <prvResetNextTaskUnblockTime+0x3c>)
 800c0f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c0fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c0fc:	e008      	b.n	800c110 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0fe:	4b07      	ldr	r3, [pc, #28]	@ (800c11c <prvResetNextTaskUnblockTime+0x38>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	4a04      	ldr	r2, [pc, #16]	@ (800c120 <prvResetNextTaskUnblockTime+0x3c>)
 800c10e:	6013      	str	r3, [r2, #0]
}
 800c110:	bf00      	nop
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr
 800c11c:	2400108c 	.word	0x2400108c
 800c120:	240010f4 	.word	0x240010f4

0800c124 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c12a:	4b0b      	ldr	r3, [pc, #44]	@ (800c158 <xTaskGetSchedulerState+0x34>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d102      	bne.n	800c138 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c132:	2301      	movs	r3, #1
 800c134:	607b      	str	r3, [r7, #4]
 800c136:	e008      	b.n	800c14a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c138:	4b08      	ldr	r3, [pc, #32]	@ (800c15c <xTaskGetSchedulerState+0x38>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d102      	bne.n	800c146 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c140:	2302      	movs	r3, #2
 800c142:	607b      	str	r3, [r7, #4]
 800c144:	e001      	b.n	800c14a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c146:	2300      	movs	r3, #0
 800c148:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c14a:	687b      	ldr	r3, [r7, #4]
	}
 800c14c:	4618      	mov	r0, r3
 800c14e:	370c      	adds	r7, #12
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr
 800c158:	240010e0 	.word	0x240010e0
 800c15c:	240010fc 	.word	0x240010fc

0800c160 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c160:	b580      	push	{r7, lr}
 800c162:	b086      	sub	sp, #24
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c16c:	2300      	movs	r3, #0
 800c16e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d058      	beq.n	800c228 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c176:	4b2f      	ldr	r3, [pc, #188]	@ (800c234 <xTaskPriorityDisinherit+0xd4>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	693a      	ldr	r2, [r7, #16]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d00b      	beq.n	800c198 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	60fb      	str	r3, [r7, #12]
}
 800c192:	bf00      	nop
 800c194:	bf00      	nop
 800c196:	e7fd      	b.n	800c194 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d10b      	bne.n	800c1b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a4:	f383 8811 	msr	BASEPRI, r3
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	60bb      	str	r3, [r7, #8]
}
 800c1b2:	bf00      	nop
 800c1b4:	bf00      	nop
 800c1b6:	e7fd      	b.n	800c1b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1bc:	1e5a      	subs	r2, r3, #1
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d02c      	beq.n	800c228 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d128      	bne.n	800c228 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	3304      	adds	r3, #4
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7fe fc54 	bl	800aa88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c238 <xTaskPriorityDisinherit+0xd8>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d903      	bls.n	800c208 <xTaskPriorityDisinherit+0xa8>
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c204:	4a0c      	ldr	r2, [pc, #48]	@ (800c238 <xTaskPriorityDisinherit+0xd8>)
 800c206:	6013      	str	r3, [r2, #0]
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c20c:	4613      	mov	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	4413      	add	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4a09      	ldr	r2, [pc, #36]	@ (800c23c <xTaskPriorityDisinherit+0xdc>)
 800c216:	441a      	add	r2, r3
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	3304      	adds	r3, #4
 800c21c:	4619      	mov	r1, r3
 800c21e:	4610      	mov	r0, r2
 800c220:	f7fe fbd5 	bl	800a9ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c224:	2301      	movs	r3, #1
 800c226:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c228:	697b      	ldr	r3, [r7, #20]
	}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3718      	adds	r7, #24
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	24000c00 	.word	0x24000c00
 800c238:	240010dc 	.word	0x240010dc
 800c23c:	24000c04 	.word	0x24000c04

0800c240 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c24a:	4b21      	ldr	r3, [pc, #132]	@ (800c2d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c250:	4b20      	ldr	r3, [pc, #128]	@ (800c2d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	3304      	adds	r3, #4
 800c256:	4618      	mov	r0, r3
 800c258:	f7fe fc16 	bl	800aa88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c262:	d10a      	bne.n	800c27a <prvAddCurrentTaskToDelayedList+0x3a>
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d007      	beq.n	800c27a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c26a:	4b1a      	ldr	r3, [pc, #104]	@ (800c2d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	3304      	adds	r3, #4
 800c270:	4619      	mov	r1, r3
 800c272:	4819      	ldr	r0, [pc, #100]	@ (800c2d8 <prvAddCurrentTaskToDelayedList+0x98>)
 800c274:	f7fe fbab 	bl	800a9ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c278:	e026      	b.n	800c2c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c27a:	68fa      	ldr	r2, [r7, #12]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4413      	add	r3, r2
 800c280:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c282:	4b14      	ldr	r3, [pc, #80]	@ (800c2d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68ba      	ldr	r2, [r7, #8]
 800c288:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c28a:	68ba      	ldr	r2, [r7, #8]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d209      	bcs.n	800c2a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c292:	4b12      	ldr	r3, [pc, #72]	@ (800c2dc <prvAddCurrentTaskToDelayedList+0x9c>)
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	4b0f      	ldr	r3, [pc, #60]	@ (800c2d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	3304      	adds	r3, #4
 800c29c:	4619      	mov	r1, r3
 800c29e:	4610      	mov	r0, r2
 800c2a0:	f7fe fbb9 	bl	800aa16 <vListInsert>
}
 800c2a4:	e010      	b.n	800c2c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2a6:	4b0e      	ldr	r3, [pc, #56]	@ (800c2e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	4b0a      	ldr	r3, [pc, #40]	@ (800c2d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	3304      	adds	r3, #4
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	4610      	mov	r0, r2
 800c2b4:	f7fe fbaf 	bl	800aa16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c2b8:	4b0a      	ldr	r3, [pc, #40]	@ (800c2e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	68ba      	ldr	r2, [r7, #8]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d202      	bcs.n	800c2c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c2c2:	4a08      	ldr	r2, [pc, #32]	@ (800c2e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	6013      	str	r3, [r2, #0]
}
 800c2c8:	bf00      	nop
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	240010d8 	.word	0x240010d8
 800c2d4:	24000c00 	.word	0x24000c00
 800c2d8:	240010c0 	.word	0x240010c0
 800c2dc:	24001090 	.word	0x24001090
 800c2e0:	2400108c 	.word	0x2400108c
 800c2e4:	240010f4 	.word	0x240010f4

0800c2e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b08a      	sub	sp, #40	@ 0x28
 800c2ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c2f2:	f000 fb13 	bl	800c91c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c2f6:	4b1d      	ldr	r3, [pc, #116]	@ (800c36c <xTimerCreateTimerTask+0x84>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d021      	beq.n	800c342 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c2fe:	2300      	movs	r3, #0
 800c300:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c302:	2300      	movs	r3, #0
 800c304:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c306:	1d3a      	adds	r2, r7, #4
 800c308:	f107 0108 	add.w	r1, r7, #8
 800c30c:	f107 030c 	add.w	r3, r7, #12
 800c310:	4618      	mov	r0, r3
 800c312:	f7fe fb15 	bl	800a940 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c316:	6879      	ldr	r1, [r7, #4]
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	68fa      	ldr	r2, [r7, #12]
 800c31c:	9202      	str	r2, [sp, #8]
 800c31e:	9301      	str	r3, [sp, #4]
 800c320:	2302      	movs	r3, #2
 800c322:	9300      	str	r3, [sp, #0]
 800c324:	2300      	movs	r3, #0
 800c326:	460a      	mov	r2, r1
 800c328:	4911      	ldr	r1, [pc, #68]	@ (800c370 <xTimerCreateTimerTask+0x88>)
 800c32a:	4812      	ldr	r0, [pc, #72]	@ (800c374 <xTimerCreateTimerTask+0x8c>)
 800c32c:	f7ff f8d0 	bl	800b4d0 <xTaskCreateStatic>
 800c330:	4603      	mov	r3, r0
 800c332:	4a11      	ldr	r2, [pc, #68]	@ (800c378 <xTimerCreateTimerTask+0x90>)
 800c334:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c336:	4b10      	ldr	r3, [pc, #64]	@ (800c378 <xTimerCreateTimerTask+0x90>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d001      	beq.n	800c342 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c33e:	2301      	movs	r3, #1
 800c340:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d10b      	bne.n	800c360 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c34c:	f383 8811 	msr	BASEPRI, r3
 800c350:	f3bf 8f6f 	isb	sy
 800c354:	f3bf 8f4f 	dsb	sy
 800c358:	613b      	str	r3, [r7, #16]
}
 800c35a:	bf00      	nop
 800c35c:	bf00      	nop
 800c35e:	e7fd      	b.n	800c35c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c360:	697b      	ldr	r3, [r7, #20]
}
 800c362:	4618      	mov	r0, r3
 800c364:	3718      	adds	r7, #24
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	24001130 	.word	0x24001130
 800c370:	080124e0 	.word	0x080124e0
 800c374:	0800c4b5 	.word	0x0800c4b5
 800c378:	24001134 	.word	0x24001134

0800c37c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b08a      	sub	sp, #40	@ 0x28
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	607a      	str	r2, [r7, #4]
 800c388:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c38a:	2300      	movs	r3, #0
 800c38c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d10b      	bne.n	800c3ac <xTimerGenericCommand+0x30>
	__asm volatile
 800c394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c398:	f383 8811 	msr	BASEPRI, r3
 800c39c:	f3bf 8f6f 	isb	sy
 800c3a0:	f3bf 8f4f 	dsb	sy
 800c3a4:	623b      	str	r3, [r7, #32]
}
 800c3a6:	bf00      	nop
 800c3a8:	bf00      	nop
 800c3aa:	e7fd      	b.n	800c3a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c3ac:	4b19      	ldr	r3, [pc, #100]	@ (800c414 <xTimerGenericCommand+0x98>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d02a      	beq.n	800c40a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	2b05      	cmp	r3, #5
 800c3c4:	dc18      	bgt.n	800c3f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c3c6:	f7ff fead 	bl	800c124 <xTaskGetSchedulerState>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b02      	cmp	r3, #2
 800c3ce:	d109      	bne.n	800c3e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c3d0:	4b10      	ldr	r3, [pc, #64]	@ (800c414 <xTimerGenericCommand+0x98>)
 800c3d2:	6818      	ldr	r0, [r3, #0]
 800c3d4:	f107 0110 	add.w	r1, r7, #16
 800c3d8:	2300      	movs	r3, #0
 800c3da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3dc:	f7fe fc88 	bl	800acf0 <xQueueGenericSend>
 800c3e0:	6278      	str	r0, [r7, #36]	@ 0x24
 800c3e2:	e012      	b.n	800c40a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c3e4:	4b0b      	ldr	r3, [pc, #44]	@ (800c414 <xTimerGenericCommand+0x98>)
 800c3e6:	6818      	ldr	r0, [r3, #0]
 800c3e8:	f107 0110 	add.w	r1, r7, #16
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	f7fe fc7e 	bl	800acf0 <xQueueGenericSend>
 800c3f4:	6278      	str	r0, [r7, #36]	@ 0x24
 800c3f6:	e008      	b.n	800c40a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c3f8:	4b06      	ldr	r3, [pc, #24]	@ (800c414 <xTimerGenericCommand+0x98>)
 800c3fa:	6818      	ldr	r0, [r3, #0]
 800c3fc:	f107 0110 	add.w	r1, r7, #16
 800c400:	2300      	movs	r3, #0
 800c402:	683a      	ldr	r2, [r7, #0]
 800c404:	f7fe fd76 	bl	800aef4 <xQueueGenericSendFromISR>
 800c408:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3728      	adds	r7, #40	@ 0x28
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	24001130 	.word	0x24001130

0800c418 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b088      	sub	sp, #32
 800c41c:	af02      	add	r7, sp, #8
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c422:	4b23      	ldr	r3, [pc, #140]	@ (800c4b0 <prvProcessExpiredTimer+0x98>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	3304      	adds	r3, #4
 800c430:	4618      	mov	r0, r3
 800c432:	f7fe fb29 	bl	800aa88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c43c:	f003 0304 	and.w	r3, r3, #4
 800c440:	2b00      	cmp	r3, #0
 800c442:	d023      	beq.n	800c48c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	699a      	ldr	r2, [r3, #24]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	18d1      	adds	r1, r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	683a      	ldr	r2, [r7, #0]
 800c450:	6978      	ldr	r0, [r7, #20]
 800c452:	f000 f8d5 	bl	800c600 <prvInsertTimerInActiveList>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d020      	beq.n	800c49e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c45c:	2300      	movs	r3, #0
 800c45e:	9300      	str	r3, [sp, #0]
 800c460:	2300      	movs	r3, #0
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	2100      	movs	r1, #0
 800c466:	6978      	ldr	r0, [r7, #20]
 800c468:	f7ff ff88 	bl	800c37c <xTimerGenericCommand>
 800c46c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d114      	bne.n	800c49e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c478:	f383 8811 	msr	BASEPRI, r3
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	f3bf 8f4f 	dsb	sy
 800c484:	60fb      	str	r3, [r7, #12]
}
 800c486:	bf00      	nop
 800c488:	bf00      	nop
 800c48a:	e7fd      	b.n	800c488 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c492:	f023 0301 	bic.w	r3, r3, #1
 800c496:	b2da      	uxtb	r2, r3
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	6a1b      	ldr	r3, [r3, #32]
 800c4a2:	6978      	ldr	r0, [r7, #20]
 800c4a4:	4798      	blx	r3
}
 800c4a6:	bf00      	nop
 800c4a8:	3718      	adds	r7, #24
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	24001128 	.word	0x24001128

0800c4b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c4bc:	f107 0308 	add.w	r3, r7, #8
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f000 f859 	bl	800c578 <prvGetNextExpireTime>
 800c4c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f000 f805 	bl	800c4dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c4d2:	f000 f8d7 	bl	800c684 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c4d6:	bf00      	nop
 800c4d8:	e7f0      	b.n	800c4bc <prvTimerTask+0x8>
	...

0800c4dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c4e6:	f7ff fa37 	bl	800b958 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c4ea:	f107 0308 	add.w	r3, r7, #8
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f000 f866 	bl	800c5c0 <prvSampleTimeNow>
 800c4f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d130      	bne.n	800c55e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10a      	bne.n	800c518 <prvProcessTimerOrBlockTask+0x3c>
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	429a      	cmp	r2, r3
 800c508:	d806      	bhi.n	800c518 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c50a:	f7ff fa33 	bl	800b974 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c50e:	68f9      	ldr	r1, [r7, #12]
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f7ff ff81 	bl	800c418 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c516:	e024      	b.n	800c562 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d008      	beq.n	800c530 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c51e:	4b13      	ldr	r3, [pc, #76]	@ (800c56c <prvProcessTimerOrBlockTask+0x90>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d101      	bne.n	800c52c <prvProcessTimerOrBlockTask+0x50>
 800c528:	2301      	movs	r3, #1
 800c52a:	e000      	b.n	800c52e <prvProcessTimerOrBlockTask+0x52>
 800c52c:	2300      	movs	r3, #0
 800c52e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c530:	4b0f      	ldr	r3, [pc, #60]	@ (800c570 <prvProcessTimerOrBlockTask+0x94>)
 800c532:	6818      	ldr	r0, [r3, #0]
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	1ad3      	subs	r3, r2, r3
 800c53a:	683a      	ldr	r2, [r7, #0]
 800c53c:	4619      	mov	r1, r3
 800c53e:	f7fe ff93 	bl	800b468 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c542:	f7ff fa17 	bl	800b974 <xTaskResumeAll>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d10a      	bne.n	800c562 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c54c:	4b09      	ldr	r3, [pc, #36]	@ (800c574 <prvProcessTimerOrBlockTask+0x98>)
 800c54e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c552:	601a      	str	r2, [r3, #0]
 800c554:	f3bf 8f4f 	dsb	sy
 800c558:	f3bf 8f6f 	isb	sy
}
 800c55c:	e001      	b.n	800c562 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c55e:	f7ff fa09 	bl	800b974 <xTaskResumeAll>
}
 800c562:	bf00      	nop
 800c564:	3710      	adds	r7, #16
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	2400112c 	.word	0x2400112c
 800c570:	24001130 	.word	0x24001130
 800c574:	e000ed04 	.word	0xe000ed04

0800c578 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c578:	b480      	push	{r7}
 800c57a:	b085      	sub	sp, #20
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c580:	4b0e      	ldr	r3, [pc, #56]	@ (800c5bc <prvGetNextExpireTime+0x44>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d101      	bne.n	800c58e <prvGetNextExpireTime+0x16>
 800c58a:	2201      	movs	r2, #1
 800c58c:	e000      	b.n	800c590 <prvGetNextExpireTime+0x18>
 800c58e:	2200      	movs	r2, #0
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d105      	bne.n	800c5a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c59c:	4b07      	ldr	r3, [pc, #28]	@ (800c5bc <prvGetNextExpireTime+0x44>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	60fb      	str	r3, [r7, #12]
 800c5a6:	e001      	b.n	800c5ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3714      	adds	r7, #20
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop
 800c5bc:	24001128 	.word	0x24001128

0800c5c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c5c8:	f7ff fa72 	bl	800bab0 <xTaskGetTickCount>
 800c5cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c5ce:	4b0b      	ldr	r3, [pc, #44]	@ (800c5fc <prvSampleTimeNow+0x3c>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68fa      	ldr	r2, [r7, #12]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d205      	bcs.n	800c5e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c5d8:	f000 f93a 	bl	800c850 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	601a      	str	r2, [r3, #0]
 800c5e2:	e002      	b.n	800c5ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c5ea:	4a04      	ldr	r2, [pc, #16]	@ (800c5fc <prvSampleTimeNow+0x3c>)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	24001138 	.word	0x24001138

0800c600 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b086      	sub	sp, #24
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	607a      	str	r2, [r7, #4]
 800c60c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c60e:	2300      	movs	r3, #0
 800c610:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	68ba      	ldr	r2, [r7, #8]
 800c616:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	68fa      	ldr	r2, [r7, #12]
 800c61c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c61e:	68ba      	ldr	r2, [r7, #8]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	429a      	cmp	r2, r3
 800c624:	d812      	bhi.n	800c64c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	1ad2      	subs	r2, r2, r3
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	699b      	ldr	r3, [r3, #24]
 800c630:	429a      	cmp	r2, r3
 800c632:	d302      	bcc.n	800c63a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c634:	2301      	movs	r3, #1
 800c636:	617b      	str	r3, [r7, #20]
 800c638:	e01b      	b.n	800c672 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c63a:	4b10      	ldr	r3, [pc, #64]	@ (800c67c <prvInsertTimerInActiveList+0x7c>)
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	3304      	adds	r3, #4
 800c642:	4619      	mov	r1, r3
 800c644:	4610      	mov	r0, r2
 800c646:	f7fe f9e6 	bl	800aa16 <vListInsert>
 800c64a:	e012      	b.n	800c672 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	429a      	cmp	r2, r3
 800c652:	d206      	bcs.n	800c662 <prvInsertTimerInActiveList+0x62>
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d302      	bcc.n	800c662 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c65c:	2301      	movs	r3, #1
 800c65e:	617b      	str	r3, [r7, #20]
 800c660:	e007      	b.n	800c672 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c662:	4b07      	ldr	r3, [pc, #28]	@ (800c680 <prvInsertTimerInActiveList+0x80>)
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	3304      	adds	r3, #4
 800c66a:	4619      	mov	r1, r3
 800c66c:	4610      	mov	r0, r2
 800c66e:	f7fe f9d2 	bl	800aa16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c672:	697b      	ldr	r3, [r7, #20]
}
 800c674:	4618      	mov	r0, r3
 800c676:	3718      	adds	r7, #24
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	2400112c 	.word	0x2400112c
 800c680:	24001128 	.word	0x24001128

0800c684 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b08e      	sub	sp, #56	@ 0x38
 800c688:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c68a:	e0ce      	b.n	800c82a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	da19      	bge.n	800c6c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c692:	1d3b      	adds	r3, r7, #4
 800c694:	3304      	adds	r3, #4
 800c696:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d10b      	bne.n	800c6b6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a2:	f383 8811 	msr	BASEPRI, r3
 800c6a6:	f3bf 8f6f 	isb	sy
 800c6aa:	f3bf 8f4f 	dsb	sy
 800c6ae:	61fb      	str	r3, [r7, #28]
}
 800c6b0:	bf00      	nop
 800c6b2:	bf00      	nop
 800c6b4:	e7fd      	b.n	800c6b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6bc:	6850      	ldr	r0, [r2, #4]
 800c6be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6c0:	6892      	ldr	r2, [r2, #8]
 800c6c2:	4611      	mov	r1, r2
 800c6c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f2c0 80ae 	blt.w	800c82a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d4:	695b      	ldr	r3, [r3, #20]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d004      	beq.n	800c6e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6dc:	3304      	adds	r3, #4
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7fe f9d2 	bl	800aa88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c6e4:	463b      	mov	r3, r7
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff ff6a 	bl	800c5c0 <prvSampleTimeNow>
 800c6ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2b09      	cmp	r3, #9
 800c6f2:	f200 8097 	bhi.w	800c824 <prvProcessReceivedCommands+0x1a0>
 800c6f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c6fc <prvProcessReceivedCommands+0x78>)
 800c6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6fc:	0800c725 	.word	0x0800c725
 800c700:	0800c725 	.word	0x0800c725
 800c704:	0800c725 	.word	0x0800c725
 800c708:	0800c79b 	.word	0x0800c79b
 800c70c:	0800c7af 	.word	0x0800c7af
 800c710:	0800c7fb 	.word	0x0800c7fb
 800c714:	0800c725 	.word	0x0800c725
 800c718:	0800c725 	.word	0x0800c725
 800c71c:	0800c79b 	.word	0x0800c79b
 800c720:	0800c7af 	.word	0x0800c7af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c726:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c72a:	f043 0301 	orr.w	r3, r3, #1
 800c72e:	b2da      	uxtb	r2, r3
 800c730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c732:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c73a:	699b      	ldr	r3, [r3, #24]
 800c73c:	18d1      	adds	r1, r2, r3
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c744:	f7ff ff5c 	bl	800c600 <prvInsertTimerInActiveList>
 800c748:	4603      	mov	r3, r0
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d06c      	beq.n	800c828 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c750:	6a1b      	ldr	r3, [r3, #32]
 800c752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c754:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c758:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c75c:	f003 0304 	and.w	r3, r3, #4
 800c760:	2b00      	cmp	r3, #0
 800c762:	d061      	beq.n	800c828 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c764:	68ba      	ldr	r2, [r7, #8]
 800c766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c768:	699b      	ldr	r3, [r3, #24]
 800c76a:	441a      	add	r2, r3
 800c76c:	2300      	movs	r3, #0
 800c76e:	9300      	str	r3, [sp, #0]
 800c770:	2300      	movs	r3, #0
 800c772:	2100      	movs	r1, #0
 800c774:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c776:	f7ff fe01 	bl	800c37c <xTimerGenericCommand>
 800c77a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c77c:	6a3b      	ldr	r3, [r7, #32]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d152      	bne.n	800c828 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c786:	f383 8811 	msr	BASEPRI, r3
 800c78a:	f3bf 8f6f 	isb	sy
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	61bb      	str	r3, [r7, #24]
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop
 800c798:	e7fd      	b.n	800c796 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c79c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c7a0:	f023 0301 	bic.w	r3, r3, #1
 800c7a4:	b2da      	uxtb	r2, r3
 800c7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c7ac:	e03d      	b.n	800c82a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c7ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c7b4:	f043 0301 	orr.w	r3, r3, #1
 800c7b8:	b2da      	uxtb	r2, r3
 800c7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c7c0:	68ba      	ldr	r2, [r7, #8]
 800c7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d10b      	bne.n	800c7e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7d2:	f383 8811 	msr	BASEPRI, r3
 800c7d6:	f3bf 8f6f 	isb	sy
 800c7da:	f3bf 8f4f 	dsb	sy
 800c7de:	617b      	str	r3, [r7, #20]
}
 800c7e0:	bf00      	nop
 800c7e2:	bf00      	nop
 800c7e4:	e7fd      	b.n	800c7e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7e8:	699a      	ldr	r2, [r3, #24]
 800c7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ec:	18d1      	adds	r1, r2, r3
 800c7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7f4:	f7ff ff04 	bl	800c600 <prvInsertTimerInActiveList>
					break;
 800c7f8:	e017      	b.n	800c82a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c7fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c800:	f003 0302 	and.w	r3, r3, #2
 800c804:	2b00      	cmp	r3, #0
 800c806:	d103      	bne.n	800c810 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c808:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c80a:	f000 fbe5 	bl	800cfd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c80e:	e00c      	b.n	800c82a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c812:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c816:	f023 0301 	bic.w	r3, r3, #1
 800c81a:	b2da      	uxtb	r2, r3
 800c81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c81e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c822:	e002      	b.n	800c82a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c824:	bf00      	nop
 800c826:	e000      	b.n	800c82a <prvProcessReceivedCommands+0x1a6>
					break;
 800c828:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c82a:	4b08      	ldr	r3, [pc, #32]	@ (800c84c <prvProcessReceivedCommands+0x1c8>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	1d39      	adds	r1, r7, #4
 800c830:	2200      	movs	r2, #0
 800c832:	4618      	mov	r0, r3
 800c834:	f7fe fbfc 	bl	800b030 <xQueueReceive>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	f47f af26 	bne.w	800c68c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c840:	bf00      	nop
 800c842:	bf00      	nop
 800c844:	3730      	adds	r7, #48	@ 0x30
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	24001130 	.word	0x24001130

0800c850 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b088      	sub	sp, #32
 800c854:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c856:	e049      	b.n	800c8ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c858:	4b2e      	ldr	r3, [pc, #184]	@ (800c914 <prvSwitchTimerLists+0xc4>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c862:	4b2c      	ldr	r3, [pc, #176]	@ (800c914 <prvSwitchTimerLists+0xc4>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	3304      	adds	r3, #4
 800c870:	4618      	mov	r0, r3
 800c872:	f7fe f909 	bl	800aa88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6a1b      	ldr	r3, [r3, #32]
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c884:	f003 0304 	and.w	r3, r3, #4
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d02f      	beq.n	800c8ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	699b      	ldr	r3, [r3, #24]
 800c890:	693a      	ldr	r2, [r7, #16]
 800c892:	4413      	add	r3, r2
 800c894:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d90e      	bls.n	800c8bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	68ba      	ldr	r2, [r7, #8]
 800c8a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8aa:	4b1a      	ldr	r3, [pc, #104]	@ (800c914 <prvSwitchTimerLists+0xc4>)
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	3304      	adds	r3, #4
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	4610      	mov	r0, r2
 800c8b6:	f7fe f8ae 	bl	800aa16 <vListInsert>
 800c8ba:	e017      	b.n	800c8ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c8bc:	2300      	movs	r3, #0
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	693a      	ldr	r2, [r7, #16]
 800c8c4:	2100      	movs	r1, #0
 800c8c6:	68f8      	ldr	r0, [r7, #12]
 800c8c8:	f7ff fd58 	bl	800c37c <xTimerGenericCommand>
 800c8cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10b      	bne.n	800c8ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8d8:	f383 8811 	msr	BASEPRI, r3
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	603b      	str	r3, [r7, #0]
}
 800c8e6:	bf00      	nop
 800c8e8:	bf00      	nop
 800c8ea:	e7fd      	b.n	800c8e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8ec:	4b09      	ldr	r3, [pc, #36]	@ (800c914 <prvSwitchTimerLists+0xc4>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1b0      	bne.n	800c858 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c8f6:	4b07      	ldr	r3, [pc, #28]	@ (800c914 <prvSwitchTimerLists+0xc4>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c8fc:	4b06      	ldr	r3, [pc, #24]	@ (800c918 <prvSwitchTimerLists+0xc8>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a04      	ldr	r2, [pc, #16]	@ (800c914 <prvSwitchTimerLists+0xc4>)
 800c902:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c904:	4a04      	ldr	r2, [pc, #16]	@ (800c918 <prvSwitchTimerLists+0xc8>)
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	6013      	str	r3, [r2, #0]
}
 800c90a:	bf00      	nop
 800c90c:	3718      	adds	r7, #24
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	24001128 	.word	0x24001128
 800c918:	2400112c 	.word	0x2400112c

0800c91c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c922:	f000 f969 	bl	800cbf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c926:	4b15      	ldr	r3, [pc, #84]	@ (800c97c <prvCheckForValidListAndQueue+0x60>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d120      	bne.n	800c970 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c92e:	4814      	ldr	r0, [pc, #80]	@ (800c980 <prvCheckForValidListAndQueue+0x64>)
 800c930:	f7fe f820 	bl	800a974 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c934:	4813      	ldr	r0, [pc, #76]	@ (800c984 <prvCheckForValidListAndQueue+0x68>)
 800c936:	f7fe f81d 	bl	800a974 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c93a:	4b13      	ldr	r3, [pc, #76]	@ (800c988 <prvCheckForValidListAndQueue+0x6c>)
 800c93c:	4a10      	ldr	r2, [pc, #64]	@ (800c980 <prvCheckForValidListAndQueue+0x64>)
 800c93e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c940:	4b12      	ldr	r3, [pc, #72]	@ (800c98c <prvCheckForValidListAndQueue+0x70>)
 800c942:	4a10      	ldr	r2, [pc, #64]	@ (800c984 <prvCheckForValidListAndQueue+0x68>)
 800c944:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c946:	2300      	movs	r3, #0
 800c948:	9300      	str	r3, [sp, #0]
 800c94a:	4b11      	ldr	r3, [pc, #68]	@ (800c990 <prvCheckForValidListAndQueue+0x74>)
 800c94c:	4a11      	ldr	r2, [pc, #68]	@ (800c994 <prvCheckForValidListAndQueue+0x78>)
 800c94e:	2110      	movs	r1, #16
 800c950:	200a      	movs	r0, #10
 800c952:	f7fe f92d 	bl	800abb0 <xQueueGenericCreateStatic>
 800c956:	4603      	mov	r3, r0
 800c958:	4a08      	ldr	r2, [pc, #32]	@ (800c97c <prvCheckForValidListAndQueue+0x60>)
 800c95a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c95c:	4b07      	ldr	r3, [pc, #28]	@ (800c97c <prvCheckForValidListAndQueue+0x60>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d005      	beq.n	800c970 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c964:	4b05      	ldr	r3, [pc, #20]	@ (800c97c <prvCheckForValidListAndQueue+0x60>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	490b      	ldr	r1, [pc, #44]	@ (800c998 <prvCheckForValidListAndQueue+0x7c>)
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fe fd52 	bl	800b414 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c970:	f000 f974 	bl	800cc5c <vPortExitCritical>
}
 800c974:	bf00      	nop
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	24001130 	.word	0x24001130
 800c980:	24001100 	.word	0x24001100
 800c984:	24001114 	.word	0x24001114
 800c988:	24001128 	.word	0x24001128
 800c98c:	2400112c 	.word	0x2400112c
 800c990:	240011dc 	.word	0x240011dc
 800c994:	2400113c 	.word	0x2400113c
 800c998:	080124e8 	.word	0x080124e8

0800c99c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c99c:	b480      	push	{r7}
 800c99e:	b085      	sub	sp, #20
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	3b04      	subs	r3, #4
 800c9ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c9b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	3b04      	subs	r3, #4
 800c9ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	f023 0201 	bic.w	r2, r3, #1
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	3b04      	subs	r3, #4
 800c9ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c9cc:	4a0c      	ldr	r2, [pc, #48]	@ (800ca00 <pxPortInitialiseStack+0x64>)
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	3b14      	subs	r3, #20
 800c9d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	3b04      	subs	r3, #4
 800c9e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f06f 0202 	mvn.w	r2, #2
 800c9ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	3b20      	subs	r3, #32
 800c9f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3714      	adds	r7, #20
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr
 800ca00:	0800ca05 	.word	0x0800ca05

0800ca04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca04:	b480      	push	{r7}
 800ca06:	b085      	sub	sp, #20
 800ca08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca0e:	4b13      	ldr	r3, [pc, #76]	@ (800ca5c <prvTaskExitError+0x58>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca16:	d00b      	beq.n	800ca30 <prvTaskExitError+0x2c>
	__asm volatile
 800ca18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca1c:	f383 8811 	msr	BASEPRI, r3
 800ca20:	f3bf 8f6f 	isb	sy
 800ca24:	f3bf 8f4f 	dsb	sy
 800ca28:	60fb      	str	r3, [r7, #12]
}
 800ca2a:	bf00      	nop
 800ca2c:	bf00      	nop
 800ca2e:	e7fd      	b.n	800ca2c <prvTaskExitError+0x28>
	__asm volatile
 800ca30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca34:	f383 8811 	msr	BASEPRI, r3
 800ca38:	f3bf 8f6f 	isb	sy
 800ca3c:	f3bf 8f4f 	dsb	sy
 800ca40:	60bb      	str	r3, [r7, #8]
}
 800ca42:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca44:	bf00      	nop
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d0fc      	beq.n	800ca46 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ca4c:	bf00      	nop
 800ca4e:	bf00      	nop
 800ca50:	3714      	adds	r7, #20
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	24000010 	.word	0x24000010

0800ca60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ca60:	4b07      	ldr	r3, [pc, #28]	@ (800ca80 <pxCurrentTCBConst2>)
 800ca62:	6819      	ldr	r1, [r3, #0]
 800ca64:	6808      	ldr	r0, [r1, #0]
 800ca66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6a:	f380 8809 	msr	PSP, r0
 800ca6e:	f3bf 8f6f 	isb	sy
 800ca72:	f04f 0000 	mov.w	r0, #0
 800ca76:	f380 8811 	msr	BASEPRI, r0
 800ca7a:	4770      	bx	lr
 800ca7c:	f3af 8000 	nop.w

0800ca80 <pxCurrentTCBConst2>:
 800ca80:	24000c00 	.word	0x24000c00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca84:	bf00      	nop
 800ca86:	bf00      	nop

0800ca88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ca88:	4808      	ldr	r0, [pc, #32]	@ (800caac <prvPortStartFirstTask+0x24>)
 800ca8a:	6800      	ldr	r0, [r0, #0]
 800ca8c:	6800      	ldr	r0, [r0, #0]
 800ca8e:	f380 8808 	msr	MSP, r0
 800ca92:	f04f 0000 	mov.w	r0, #0
 800ca96:	f380 8814 	msr	CONTROL, r0
 800ca9a:	b662      	cpsie	i
 800ca9c:	b661      	cpsie	f
 800ca9e:	f3bf 8f4f 	dsb	sy
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	df00      	svc	0
 800caa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800caaa:	bf00      	nop
 800caac:	e000ed08 	.word	0xe000ed08

0800cab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b086      	sub	sp, #24
 800cab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cab6:	4b47      	ldr	r3, [pc, #284]	@ (800cbd4 <xPortStartScheduler+0x124>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4a47      	ldr	r2, [pc, #284]	@ (800cbd8 <xPortStartScheduler+0x128>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d10b      	bne.n	800cad8 <xPortStartScheduler+0x28>
	__asm volatile
 800cac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cac4:	f383 8811 	msr	BASEPRI, r3
 800cac8:	f3bf 8f6f 	isb	sy
 800cacc:	f3bf 8f4f 	dsb	sy
 800cad0:	613b      	str	r3, [r7, #16]
}
 800cad2:	bf00      	nop
 800cad4:	bf00      	nop
 800cad6:	e7fd      	b.n	800cad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cad8:	4b3e      	ldr	r3, [pc, #248]	@ (800cbd4 <xPortStartScheduler+0x124>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a3f      	ldr	r2, [pc, #252]	@ (800cbdc <xPortStartScheduler+0x12c>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d10b      	bne.n	800cafa <xPortStartScheduler+0x4a>
	__asm volatile
 800cae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae6:	f383 8811 	msr	BASEPRI, r3
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	60fb      	str	r3, [r7, #12]
}
 800caf4:	bf00      	nop
 800caf6:	bf00      	nop
 800caf8:	e7fd      	b.n	800caf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cafa:	4b39      	ldr	r3, [pc, #228]	@ (800cbe0 <xPortStartScheduler+0x130>)
 800cafc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	22ff      	movs	r2, #255	@ 0xff
 800cb0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb14:	78fb      	ldrb	r3, [r7, #3]
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cb1c:	b2da      	uxtb	r2, r3
 800cb1e:	4b31      	ldr	r3, [pc, #196]	@ (800cbe4 <xPortStartScheduler+0x134>)
 800cb20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb22:	4b31      	ldr	r3, [pc, #196]	@ (800cbe8 <xPortStartScheduler+0x138>)
 800cb24:	2207      	movs	r2, #7
 800cb26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb28:	e009      	b.n	800cb3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cb2a:	4b2f      	ldr	r3, [pc, #188]	@ (800cbe8 <xPortStartScheduler+0x138>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	3b01      	subs	r3, #1
 800cb30:	4a2d      	ldr	r2, [pc, #180]	@ (800cbe8 <xPortStartScheduler+0x138>)
 800cb32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb34:	78fb      	ldrb	r3, [r7, #3]
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	005b      	lsls	r3, r3, #1
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb3e:	78fb      	ldrb	r3, [r7, #3]
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb46:	2b80      	cmp	r3, #128	@ 0x80
 800cb48:	d0ef      	beq.n	800cb2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cb4a:	4b27      	ldr	r3, [pc, #156]	@ (800cbe8 <xPortStartScheduler+0x138>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f1c3 0307 	rsb	r3, r3, #7
 800cb52:	2b04      	cmp	r3, #4
 800cb54:	d00b      	beq.n	800cb6e <xPortStartScheduler+0xbe>
	__asm volatile
 800cb56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb5a:	f383 8811 	msr	BASEPRI, r3
 800cb5e:	f3bf 8f6f 	isb	sy
 800cb62:	f3bf 8f4f 	dsb	sy
 800cb66:	60bb      	str	r3, [r7, #8]
}
 800cb68:	bf00      	nop
 800cb6a:	bf00      	nop
 800cb6c:	e7fd      	b.n	800cb6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cb6e:	4b1e      	ldr	r3, [pc, #120]	@ (800cbe8 <xPortStartScheduler+0x138>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	021b      	lsls	r3, r3, #8
 800cb74:	4a1c      	ldr	r2, [pc, #112]	@ (800cbe8 <xPortStartScheduler+0x138>)
 800cb76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb78:	4b1b      	ldr	r3, [pc, #108]	@ (800cbe8 <xPortStartScheduler+0x138>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cb80:	4a19      	ldr	r2, [pc, #100]	@ (800cbe8 <xPortStartScheduler+0x138>)
 800cb82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	b2da      	uxtb	r2, r3
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb8c:	4b17      	ldr	r3, [pc, #92]	@ (800cbec <xPortStartScheduler+0x13c>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a16      	ldr	r2, [pc, #88]	@ (800cbec <xPortStartScheduler+0x13c>)
 800cb92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cb96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb98:	4b14      	ldr	r3, [pc, #80]	@ (800cbec <xPortStartScheduler+0x13c>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a13      	ldr	r2, [pc, #76]	@ (800cbec <xPortStartScheduler+0x13c>)
 800cb9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cba2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cba4:	f000 f8da 	bl	800cd5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cba8:	4b11      	ldr	r3, [pc, #68]	@ (800cbf0 <xPortStartScheduler+0x140>)
 800cbaa:	2200      	movs	r2, #0
 800cbac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cbae:	f000 f8f9 	bl	800cda4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cbb2:	4b10      	ldr	r3, [pc, #64]	@ (800cbf4 <xPortStartScheduler+0x144>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4a0f      	ldr	r2, [pc, #60]	@ (800cbf4 <xPortStartScheduler+0x144>)
 800cbb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cbbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cbbe:	f7ff ff63 	bl	800ca88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cbc2:	f7ff f83f 	bl	800bc44 <vTaskSwitchContext>
	prvTaskExitError();
 800cbc6:	f7ff ff1d 	bl	800ca04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cbca:	2300      	movs	r3, #0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3718      	adds	r7, #24
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	e000ed00 	.word	0xe000ed00
 800cbd8:	410fc271 	.word	0x410fc271
 800cbdc:	410fc270 	.word	0x410fc270
 800cbe0:	e000e400 	.word	0xe000e400
 800cbe4:	2400122c 	.word	0x2400122c
 800cbe8:	24001230 	.word	0x24001230
 800cbec:	e000ed20 	.word	0xe000ed20
 800cbf0:	24000010 	.word	0x24000010
 800cbf4:	e000ef34 	.word	0xe000ef34

0800cbf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
	__asm volatile
 800cbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc02:	f383 8811 	msr	BASEPRI, r3
 800cc06:	f3bf 8f6f 	isb	sy
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	607b      	str	r3, [r7, #4]
}
 800cc10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc12:	4b10      	ldr	r3, [pc, #64]	@ (800cc54 <vPortEnterCritical+0x5c>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	3301      	adds	r3, #1
 800cc18:	4a0e      	ldr	r2, [pc, #56]	@ (800cc54 <vPortEnterCritical+0x5c>)
 800cc1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc1c:	4b0d      	ldr	r3, [pc, #52]	@ (800cc54 <vPortEnterCritical+0x5c>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d110      	bne.n	800cc46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc24:	4b0c      	ldr	r3, [pc, #48]	@ (800cc58 <vPortEnterCritical+0x60>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	b2db      	uxtb	r3, r3
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d00b      	beq.n	800cc46 <vPortEnterCritical+0x4e>
	__asm volatile
 800cc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc32:	f383 8811 	msr	BASEPRI, r3
 800cc36:	f3bf 8f6f 	isb	sy
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	603b      	str	r3, [r7, #0]
}
 800cc40:	bf00      	nop
 800cc42:	bf00      	nop
 800cc44:	e7fd      	b.n	800cc42 <vPortEnterCritical+0x4a>
	}
}
 800cc46:	bf00      	nop
 800cc48:	370c      	adds	r7, #12
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr
 800cc52:	bf00      	nop
 800cc54:	24000010 	.word	0x24000010
 800cc58:	e000ed04 	.word	0xe000ed04

0800cc5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b083      	sub	sp, #12
 800cc60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cc62:	4b12      	ldr	r3, [pc, #72]	@ (800ccac <vPortExitCritical+0x50>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10b      	bne.n	800cc82 <vPortExitCritical+0x26>
	__asm volatile
 800cc6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc6e:	f383 8811 	msr	BASEPRI, r3
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	607b      	str	r3, [r7, #4]
}
 800cc7c:	bf00      	nop
 800cc7e:	bf00      	nop
 800cc80:	e7fd      	b.n	800cc7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cc82:	4b0a      	ldr	r3, [pc, #40]	@ (800ccac <vPortExitCritical+0x50>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	3b01      	subs	r3, #1
 800cc88:	4a08      	ldr	r2, [pc, #32]	@ (800ccac <vPortExitCritical+0x50>)
 800cc8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc8c:	4b07      	ldr	r3, [pc, #28]	@ (800ccac <vPortExitCritical+0x50>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d105      	bne.n	800cca0 <vPortExitCritical+0x44>
 800cc94:	2300      	movs	r3, #0
 800cc96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	f383 8811 	msr	BASEPRI, r3
}
 800cc9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cca0:	bf00      	nop
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr
 800ccac:	24000010 	.word	0x24000010

0800ccb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ccb0:	f3ef 8009 	mrs	r0, PSP
 800ccb4:	f3bf 8f6f 	isb	sy
 800ccb8:	4b15      	ldr	r3, [pc, #84]	@ (800cd10 <pxCurrentTCBConst>)
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	f01e 0f10 	tst.w	lr, #16
 800ccc0:	bf08      	it	eq
 800ccc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ccc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccca:	6010      	str	r0, [r2, #0]
 800cccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ccd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ccd4:	f380 8811 	msr	BASEPRI, r0
 800ccd8:	f3bf 8f4f 	dsb	sy
 800ccdc:	f3bf 8f6f 	isb	sy
 800cce0:	f7fe ffb0 	bl	800bc44 <vTaskSwitchContext>
 800cce4:	f04f 0000 	mov.w	r0, #0
 800cce8:	f380 8811 	msr	BASEPRI, r0
 800ccec:	bc09      	pop	{r0, r3}
 800ccee:	6819      	ldr	r1, [r3, #0]
 800ccf0:	6808      	ldr	r0, [r1, #0]
 800ccf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf6:	f01e 0f10 	tst.w	lr, #16
 800ccfa:	bf08      	it	eq
 800ccfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd00:	f380 8809 	msr	PSP, r0
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	4770      	bx	lr
 800cd0a:	bf00      	nop
 800cd0c:	f3af 8000 	nop.w

0800cd10 <pxCurrentTCBConst>:
 800cd10:	24000c00 	.word	0x24000c00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd14:	bf00      	nop
 800cd16:	bf00      	nop

0800cd18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	607b      	str	r3, [r7, #4]
}
 800cd30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd32:	f7fe fecd 	bl	800bad0 <xTaskIncrementTick>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d003      	beq.n	800cd44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd3c:	4b06      	ldr	r3, [pc, #24]	@ (800cd58 <xPortSysTickHandler+0x40>)
 800cd3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd42:	601a      	str	r2, [r3, #0]
 800cd44:	2300      	movs	r3, #0
 800cd46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	f383 8811 	msr	BASEPRI, r3
}
 800cd4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cd50:	bf00      	nop
 800cd52:	3708      	adds	r7, #8
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	e000ed04 	.word	0xe000ed04

0800cd5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cd60:	4b0b      	ldr	r3, [pc, #44]	@ (800cd90 <vPortSetupTimerInterrupt+0x34>)
 800cd62:	2200      	movs	r2, #0
 800cd64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cd66:	4b0b      	ldr	r3, [pc, #44]	@ (800cd94 <vPortSetupTimerInterrupt+0x38>)
 800cd68:	2200      	movs	r2, #0
 800cd6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cd6c:	4b0a      	ldr	r3, [pc, #40]	@ (800cd98 <vPortSetupTimerInterrupt+0x3c>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4a0a      	ldr	r2, [pc, #40]	@ (800cd9c <vPortSetupTimerInterrupt+0x40>)
 800cd72:	fba2 2303 	umull	r2, r3, r2, r3
 800cd76:	099b      	lsrs	r3, r3, #6
 800cd78:	4a09      	ldr	r2, [pc, #36]	@ (800cda0 <vPortSetupTimerInterrupt+0x44>)
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cd7e:	4b04      	ldr	r3, [pc, #16]	@ (800cd90 <vPortSetupTimerInterrupt+0x34>)
 800cd80:	2207      	movs	r2, #7
 800cd82:	601a      	str	r2, [r3, #0]
}
 800cd84:	bf00      	nop
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	e000e010 	.word	0xe000e010
 800cd94:	e000e018 	.word	0xe000e018
 800cd98:	24000000 	.word	0x24000000
 800cd9c:	10624dd3 	.word	0x10624dd3
 800cda0:	e000e014 	.word	0xe000e014

0800cda4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cda4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cdb4 <vPortEnableVFP+0x10>
 800cda8:	6801      	ldr	r1, [r0, #0]
 800cdaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cdae:	6001      	str	r1, [r0, #0]
 800cdb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cdb2:	bf00      	nop
 800cdb4:	e000ed88 	.word	0xe000ed88

0800cdb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cdbe:	f3ef 8305 	mrs	r3, IPSR
 800cdc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2b0f      	cmp	r3, #15
 800cdc8:	d915      	bls.n	800cdf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cdca:	4a18      	ldr	r2, [pc, #96]	@ (800ce2c <vPortValidateInterruptPriority+0x74>)
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	4413      	add	r3, r2
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cdd4:	4b16      	ldr	r3, [pc, #88]	@ (800ce30 <vPortValidateInterruptPriority+0x78>)
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	7afa      	ldrb	r2, [r7, #11]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d20b      	bcs.n	800cdf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cdde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde2:	f383 8811 	msr	BASEPRI, r3
 800cde6:	f3bf 8f6f 	isb	sy
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	607b      	str	r3, [r7, #4]
}
 800cdf0:	bf00      	nop
 800cdf2:	bf00      	nop
 800cdf4:	e7fd      	b.n	800cdf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cdf6:	4b0f      	ldr	r3, [pc, #60]	@ (800ce34 <vPortValidateInterruptPriority+0x7c>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cdfe:	4b0e      	ldr	r3, [pc, #56]	@ (800ce38 <vPortValidateInterruptPriority+0x80>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d90b      	bls.n	800ce1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ce06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce0a:	f383 8811 	msr	BASEPRI, r3
 800ce0e:	f3bf 8f6f 	isb	sy
 800ce12:	f3bf 8f4f 	dsb	sy
 800ce16:	603b      	str	r3, [r7, #0]
}
 800ce18:	bf00      	nop
 800ce1a:	bf00      	nop
 800ce1c:	e7fd      	b.n	800ce1a <vPortValidateInterruptPriority+0x62>
	}
 800ce1e:	bf00      	nop
 800ce20:	3714      	adds	r7, #20
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop
 800ce2c:	e000e3f0 	.word	0xe000e3f0
 800ce30:	2400122c 	.word	0x2400122c
 800ce34:	e000ed0c 	.word	0xe000ed0c
 800ce38:	24001230 	.word	0x24001230

0800ce3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b08a      	sub	sp, #40	@ 0x28
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce44:	2300      	movs	r3, #0
 800ce46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce48:	f7fe fd86 	bl	800b958 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce4c:	4b5c      	ldr	r3, [pc, #368]	@ (800cfc0 <pvPortMalloc+0x184>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d101      	bne.n	800ce58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce54:	f000 f924 	bl	800d0a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce58:	4b5a      	ldr	r3, [pc, #360]	@ (800cfc4 <pvPortMalloc+0x188>)
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	4013      	ands	r3, r2
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	f040 8095 	bne.w	800cf90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d01e      	beq.n	800ceaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ce6c:	2208      	movs	r2, #8
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	4413      	add	r3, r2
 800ce72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f003 0307 	and.w	r3, r3, #7
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d015      	beq.n	800ceaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f023 0307 	bic.w	r3, r3, #7
 800ce84:	3308      	adds	r3, #8
 800ce86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f003 0307 	and.w	r3, r3, #7
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d00b      	beq.n	800ceaa <pvPortMalloc+0x6e>
	__asm volatile
 800ce92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce96:	f383 8811 	msr	BASEPRI, r3
 800ce9a:	f3bf 8f6f 	isb	sy
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	617b      	str	r3, [r7, #20]
}
 800cea4:	bf00      	nop
 800cea6:	bf00      	nop
 800cea8:	e7fd      	b.n	800cea6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d06f      	beq.n	800cf90 <pvPortMalloc+0x154>
 800ceb0:	4b45      	ldr	r3, [pc, #276]	@ (800cfc8 <pvPortMalloc+0x18c>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d86a      	bhi.n	800cf90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ceba:	4b44      	ldr	r3, [pc, #272]	@ (800cfcc <pvPortMalloc+0x190>)
 800cebc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cebe:	4b43      	ldr	r3, [pc, #268]	@ (800cfcc <pvPortMalloc+0x190>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cec4:	e004      	b.n	800ced0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ceca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ced0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d903      	bls.n	800cee2 <pvPortMalloc+0xa6>
 800ceda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d1f1      	bne.n	800cec6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cee2:	4b37      	ldr	r3, [pc, #220]	@ (800cfc0 <pvPortMalloc+0x184>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d051      	beq.n	800cf90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ceec:	6a3b      	ldr	r3, [r7, #32]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	2208      	movs	r2, #8
 800cef2:	4413      	add	r3, r2
 800cef4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	6a3b      	ldr	r3, [r7, #32]
 800cefc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cefe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf00:	685a      	ldr	r2, [r3, #4]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	1ad2      	subs	r2, r2, r3
 800cf06:	2308      	movs	r3, #8
 800cf08:	005b      	lsls	r3, r3, #1
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d920      	bls.n	800cf50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cf0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	4413      	add	r3, r2
 800cf14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	f003 0307 	and.w	r3, r3, #7
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00b      	beq.n	800cf38 <pvPortMalloc+0xfc>
	__asm volatile
 800cf20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	613b      	str	r3, [r7, #16]
}
 800cf32:	bf00      	nop
 800cf34:	bf00      	nop
 800cf36:	e7fd      	b.n	800cf34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf3a:	685a      	ldr	r2, [r3, #4]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	1ad2      	subs	r2, r2, r3
 800cf40:	69bb      	ldr	r3, [r7, #24]
 800cf42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf4a:	69b8      	ldr	r0, [r7, #24]
 800cf4c:	f000 f90a 	bl	800d164 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf50:	4b1d      	ldr	r3, [pc, #116]	@ (800cfc8 <pvPortMalloc+0x18c>)
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf56:	685b      	ldr	r3, [r3, #4]
 800cf58:	1ad3      	subs	r3, r2, r3
 800cf5a:	4a1b      	ldr	r2, [pc, #108]	@ (800cfc8 <pvPortMalloc+0x18c>)
 800cf5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cf5e:	4b1a      	ldr	r3, [pc, #104]	@ (800cfc8 <pvPortMalloc+0x18c>)
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	4b1b      	ldr	r3, [pc, #108]	@ (800cfd0 <pvPortMalloc+0x194>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d203      	bcs.n	800cf72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cf6a:	4b17      	ldr	r3, [pc, #92]	@ (800cfc8 <pvPortMalloc+0x18c>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a18      	ldr	r2, [pc, #96]	@ (800cfd0 <pvPortMalloc+0x194>)
 800cf70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cf72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf74:	685a      	ldr	r2, [r3, #4]
 800cf76:	4b13      	ldr	r3, [pc, #76]	@ (800cfc4 <pvPortMalloc+0x188>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	431a      	orrs	r2, r3
 800cf7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf82:	2200      	movs	r2, #0
 800cf84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cf86:	4b13      	ldr	r3, [pc, #76]	@ (800cfd4 <pvPortMalloc+0x198>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	4a11      	ldr	r2, [pc, #68]	@ (800cfd4 <pvPortMalloc+0x198>)
 800cf8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf90:	f7fe fcf0 	bl	800b974 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	f003 0307 	and.w	r3, r3, #7
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00b      	beq.n	800cfb6 <pvPortMalloc+0x17a>
	__asm volatile
 800cf9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfa2:	f383 8811 	msr	BASEPRI, r3
 800cfa6:	f3bf 8f6f 	isb	sy
 800cfaa:	f3bf 8f4f 	dsb	sy
 800cfae:	60fb      	str	r3, [r7, #12]
}
 800cfb0:	bf00      	nop
 800cfb2:	bf00      	nop
 800cfb4:	e7fd      	b.n	800cfb2 <pvPortMalloc+0x176>
	return pvReturn;
 800cfb6:	69fb      	ldr	r3, [r7, #28]
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3728      	adds	r7, #40	@ 0x28
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	24004e3c 	.word	0x24004e3c
 800cfc4:	24004e50 	.word	0x24004e50
 800cfc8:	24004e40 	.word	0x24004e40
 800cfcc:	24004e34 	.word	0x24004e34
 800cfd0:	24004e44 	.word	0x24004e44
 800cfd4:	24004e48 	.word	0x24004e48

0800cfd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b086      	sub	sp, #24
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d04f      	beq.n	800d08a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cfea:	2308      	movs	r3, #8
 800cfec:	425b      	negs	r3, r3
 800cfee:	697a      	ldr	r2, [r7, #20]
 800cff0:	4413      	add	r3, r2
 800cff2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	685a      	ldr	r2, [r3, #4]
 800cffc:	4b25      	ldr	r3, [pc, #148]	@ (800d094 <vPortFree+0xbc>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4013      	ands	r3, r2
 800d002:	2b00      	cmp	r3, #0
 800d004:	d10b      	bne.n	800d01e <vPortFree+0x46>
	__asm volatile
 800d006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d00a:	f383 8811 	msr	BASEPRI, r3
 800d00e:	f3bf 8f6f 	isb	sy
 800d012:	f3bf 8f4f 	dsb	sy
 800d016:	60fb      	str	r3, [r7, #12]
}
 800d018:	bf00      	nop
 800d01a:	bf00      	nop
 800d01c:	e7fd      	b.n	800d01a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d00b      	beq.n	800d03e <vPortFree+0x66>
	__asm volatile
 800d026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d02a:	f383 8811 	msr	BASEPRI, r3
 800d02e:	f3bf 8f6f 	isb	sy
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	60bb      	str	r3, [r7, #8]
}
 800d038:	bf00      	nop
 800d03a:	bf00      	nop
 800d03c:	e7fd      	b.n	800d03a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	685a      	ldr	r2, [r3, #4]
 800d042:	4b14      	ldr	r3, [pc, #80]	@ (800d094 <vPortFree+0xbc>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4013      	ands	r3, r2
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d01e      	beq.n	800d08a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d11a      	bne.n	800d08a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	685a      	ldr	r2, [r3, #4]
 800d058:	4b0e      	ldr	r3, [pc, #56]	@ (800d094 <vPortFree+0xbc>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	43db      	mvns	r3, r3
 800d05e:	401a      	ands	r2, r3
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d064:	f7fe fc78 	bl	800b958 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	685a      	ldr	r2, [r3, #4]
 800d06c:	4b0a      	ldr	r3, [pc, #40]	@ (800d098 <vPortFree+0xc0>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4413      	add	r3, r2
 800d072:	4a09      	ldr	r2, [pc, #36]	@ (800d098 <vPortFree+0xc0>)
 800d074:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d076:	6938      	ldr	r0, [r7, #16]
 800d078:	f000 f874 	bl	800d164 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d07c:	4b07      	ldr	r3, [pc, #28]	@ (800d09c <vPortFree+0xc4>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	3301      	adds	r3, #1
 800d082:	4a06      	ldr	r2, [pc, #24]	@ (800d09c <vPortFree+0xc4>)
 800d084:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d086:	f7fe fc75 	bl	800b974 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d08a:	bf00      	nop
 800d08c:	3718      	adds	r7, #24
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop
 800d094:	24004e50 	.word	0x24004e50
 800d098:	24004e40 	.word	0x24004e40
 800d09c:	24004e4c 	.word	0x24004e4c

0800d0a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b085      	sub	sp, #20
 800d0a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d0a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d0aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d0ac:	4b27      	ldr	r3, [pc, #156]	@ (800d14c <prvHeapInit+0xac>)
 800d0ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f003 0307 	and.w	r3, r3, #7
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d00c      	beq.n	800d0d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	3307      	adds	r3, #7
 800d0be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f023 0307 	bic.w	r3, r3, #7
 800d0c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d0c8:	68ba      	ldr	r2, [r7, #8]
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	1ad3      	subs	r3, r2, r3
 800d0ce:	4a1f      	ldr	r2, [pc, #124]	@ (800d14c <prvHeapInit+0xac>)
 800d0d0:	4413      	add	r3, r2
 800d0d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d0d8:	4a1d      	ldr	r2, [pc, #116]	@ (800d150 <prvHeapInit+0xb0>)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d0de:	4b1c      	ldr	r3, [pc, #112]	@ (800d150 <prvHeapInit+0xb0>)
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	68ba      	ldr	r2, [r7, #8]
 800d0e8:	4413      	add	r3, r2
 800d0ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d0ec:	2208      	movs	r2, #8
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	1a9b      	subs	r3, r3, r2
 800d0f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f023 0307 	bic.w	r3, r3, #7
 800d0fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	4a15      	ldr	r2, [pc, #84]	@ (800d154 <prvHeapInit+0xb4>)
 800d100:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d102:	4b14      	ldr	r3, [pc, #80]	@ (800d154 <prvHeapInit+0xb4>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2200      	movs	r2, #0
 800d108:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d10a:	4b12      	ldr	r3, [pc, #72]	@ (800d154 <prvHeapInit+0xb4>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2200      	movs	r2, #0
 800d110:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	68fa      	ldr	r2, [r7, #12]
 800d11a:	1ad2      	subs	r2, r2, r3
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d120:	4b0c      	ldr	r3, [pc, #48]	@ (800d154 <prvHeapInit+0xb4>)
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	4a0a      	ldr	r2, [pc, #40]	@ (800d158 <prvHeapInit+0xb8>)
 800d12e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	4a09      	ldr	r2, [pc, #36]	@ (800d15c <prvHeapInit+0xbc>)
 800d136:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d138:	4b09      	ldr	r3, [pc, #36]	@ (800d160 <prvHeapInit+0xc0>)
 800d13a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d13e:	601a      	str	r2, [r3, #0]
}
 800d140:	bf00      	nop
 800d142:	3714      	adds	r7, #20
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr
 800d14c:	24001234 	.word	0x24001234
 800d150:	24004e34 	.word	0x24004e34
 800d154:	24004e3c 	.word	0x24004e3c
 800d158:	24004e44 	.word	0x24004e44
 800d15c:	24004e40 	.word	0x24004e40
 800d160:	24004e50 	.word	0x24004e50

0800d164 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d164:	b480      	push	{r7}
 800d166:	b085      	sub	sp, #20
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d16c:	4b28      	ldr	r3, [pc, #160]	@ (800d210 <prvInsertBlockIntoFreeList+0xac>)
 800d16e:	60fb      	str	r3, [r7, #12]
 800d170:	e002      	b.n	800d178 <prvInsertBlockIntoFreeList+0x14>
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	60fb      	str	r3, [r7, #12]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d8f7      	bhi.n	800d172 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	68ba      	ldr	r2, [r7, #8]
 800d18c:	4413      	add	r3, r2
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	429a      	cmp	r2, r3
 800d192:	d108      	bne.n	800d1a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	685a      	ldr	r2, [r3, #4]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	441a      	add	r2, r3
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	68ba      	ldr	r2, [r7, #8]
 800d1b0:	441a      	add	r2, r3
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d118      	bne.n	800d1ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	4b15      	ldr	r3, [pc, #84]	@ (800d214 <prvInsertBlockIntoFreeList+0xb0>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d00d      	beq.n	800d1e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	685a      	ldr	r2, [r3, #4]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	441a      	add	r2, r3
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	601a      	str	r2, [r3, #0]
 800d1e0:	e008      	b.n	800d1f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d1e2:	4b0c      	ldr	r3, [pc, #48]	@ (800d214 <prvInsertBlockIntoFreeList+0xb0>)
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	601a      	str	r2, [r3, #0]
 800d1ea:	e003      	b.n	800d1f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d002      	beq.n	800d202 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d202:	bf00      	nop
 800d204:	3714      	adds	r7, #20
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr
 800d20e:	bf00      	nop
 800d210:	24004e34 	.word	0x24004e34
 800d214:	24004e3c 	.word	0x24004e3c

0800d218 <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 800d21c:	2200      	movs	r2, #0
 800d21e:	2108      	movs	r1, #8
 800d220:	480a      	ldr	r0, [pc, #40]	@ (800d24c <ad7606_Init+0x34>)
 800d222:	f7f6 fd29 	bl	8003c78 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800d226:	2001      	movs	r0, #1
 800d228:	f7f4 fc40 	bl	8001aac <HAL_Delay>
    AD7606_RST_SET();
 800d22c:	2201      	movs	r2, #1
 800d22e:	2108      	movs	r1, #8
 800d230:	4806      	ldr	r0, [pc, #24]	@ (800d24c <ad7606_Init+0x34>)
 800d232:	f7f6 fd21 	bl	8003c78 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800d236:	2001      	movs	r0, #1
 800d238:	f7f4 fc38 	bl	8001aac <HAL_Delay>
    AD7606_RST_RESET();
 800d23c:	2200      	movs	r2, #0
 800d23e:	2108      	movs	r1, #8
 800d240:	4802      	ldr	r0, [pc, #8]	@ (800d24c <ad7606_Init+0x34>)
 800d242:	f7f6 fd19 	bl	8003c78 <HAL_GPIO_WritePin>
}
 800d246:	bf00      	nop
 800d248:	bd80      	pop	{r7, pc}
 800d24a:	bf00      	nop
 800d24c:	58021800 	.word	0x58021800

0800d250 <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	60f8      	str	r0, [r7, #12]
 800d258:	60b9      	str	r1, [r7, #8]
 800d25a:	4613      	mov	r3, r2
 800d25c:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 800d25e:	2200      	movs	r2, #0
 800d260:	2180      	movs	r1, #128	@ 0x80
 800d262:	4809      	ldr	r0, [pc, #36]	@ (800d288 <ad7606_Read+0x38>)
 800d264:	f7f6 fd08 	bl	8003c78 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 800d268:	88fa      	ldrh	r2, [r7, #6]
 800d26a:	2364      	movs	r3, #100	@ 0x64
 800d26c:	68b9      	ldr	r1, [r7, #8]
 800d26e:	68f8      	ldr	r0, [r7, #12]
 800d270:	f7fb fbd0 	bl	8008a14 <HAL_SPI_Receive>
    AD7606_CS_SET();
 800d274:	2201      	movs	r2, #1
 800d276:	2180      	movs	r1, #128	@ 0x80
 800d278:	4803      	ldr	r0, [pc, #12]	@ (800d288 <ad7606_Read+0x38>)
 800d27a:	f7f6 fcfd 	bl	8003c78 <HAL_GPIO_WritePin>
}
 800d27e:	bf00      	nop
 800d280:	3710      	adds	r7, #16
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	58021800 	.word	0x58021800

0800d28c <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 800d296:	6839      	ldr	r1, [r7, #0]
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7fc f847 	bl	800932c <HAL_TIM_PWM_Start>
}
 800d29e:	bf00      	nop
 800d2a0:	3708      	adds	r7, #8
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
	...

0800d2a8 <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b087      	sub	sp, #28
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	607a      	str	r2, [r7, #4]
 800d2b4:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	617b      	str	r3, [r7, #20]
 800d2ba:	e03d      	b.n	800d338 <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	005b      	lsls	r3, r3, #1
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	4413      	add	r3, r2
 800d2c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	da0f      	bge.n	800d2ec <ad7606_Convert+0x44>
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	005b      	lsls	r3, r3, #1
 800d2d0:	68fa      	ldr	r2, [r7, #12]
 800d2d2:	4413      	add	r3, r2
 800d2d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	425b      	negs	r3, r3
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	425b      	negs	r3, r3
 800d2e6:	b29b      	uxth	r3, r3
 800d2e8:	b21b      	sxth	r3, r3
 800d2ea:	e005      	b.n	800d2f8 <ad7606_Convert+0x50>
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	005b      	lsls	r3, r3, #1
 800d2f0:	68fa      	ldr	r2, [r7, #12]
 800d2f2:	4413      	add	r3, r2
 800d2f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d2f8:	697a      	ldr	r2, [r7, #20]
 800d2fa:	0052      	lsls	r2, r2, #1
 800d2fc:	68f9      	ldr	r1, [r7, #12]
 800d2fe:	440a      	add	r2, r1
 800d300:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	005b      	lsls	r3, r3, #1
 800d306:	68fa      	ldr	r2, [r7, #12]
 800d308:	4413      	add	r3, r2
 800d30a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d30e:	ee07 3a90 	vmov	s15, r3
 800d312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d316:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d31a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	4413      	add	r3, r2
 800d326:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800d350 <ad7606_Convert+0xa8>
 800d32a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d32e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	3301      	adds	r3, #1
 800d336:	617b      	str	r3, [r7, #20]
 800d338:	897b      	ldrh	r3, [r7, #10]
 800d33a:	697a      	ldr	r2, [r7, #20]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	dbbd      	blt.n	800d2bc <ad7606_Convert+0x14>
    }
}
 800d340:	bf00      	nop
 800d342:	bf00      	nop
 800d344:	371c      	adds	r7, #28
 800d346:	46bd      	mov	sp, r7
 800d348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34c:	4770      	bx	lr
 800d34e:	bf00      	nop
 800d350:	47000000 	.word	0x47000000

0800d354 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 800d354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d358:	b087      	sub	sp, #28
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	60f8      	str	r0, [r7, #12]
 800d35e:	460b      	mov	r3, r1
 800d360:	607a      	str	r2, [r7, #4]
 800d362:	817b      	strh	r3, [r7, #10]
 800d364:	466b      	mov	r3, sp
 800d366:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 800d368:	8979      	ldrh	r1, [r7, #10]
 800d36a:	460b      	mov	r3, r1
 800d36c:	3b01      	subs	r3, #1
 800d36e:	617b      	str	r3, [r7, #20]
 800d370:	b28b      	uxth	r3, r1
 800d372:	2200      	movs	r2, #0
 800d374:	4698      	mov	r8, r3
 800d376:	4691      	mov	r9, r2
 800d378:	f04f 0200 	mov.w	r2, #0
 800d37c:	f04f 0300 	mov.w	r3, #0
 800d380:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800d384:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800d388:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800d38c:	b28b      	uxth	r3, r1
 800d38e:	2200      	movs	r2, #0
 800d390:	461c      	mov	r4, r3
 800d392:	4615      	mov	r5, r2
 800d394:	f04f 0200 	mov.w	r2, #0
 800d398:	f04f 0300 	mov.w	r3, #0
 800d39c:	012b      	lsls	r3, r5, #4
 800d39e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800d3a2:	0122      	lsls	r2, r4, #4
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	005b      	lsls	r3, r3, #1
 800d3a8:	3307      	adds	r3, #7
 800d3aa:	08db      	lsrs	r3, r3, #3
 800d3ac:	00db      	lsls	r3, r3, #3
 800d3ae:	ebad 0d03 	sub.w	sp, sp, r3
 800d3b2:	466b      	mov	r3, sp
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	085b      	lsrs	r3, r3, #1
 800d3b8:	005b      	lsls	r3, r3, #1
 800d3ba:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 800d3bc:	897b      	ldrh	r3, [r7, #10]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	6939      	ldr	r1, [r7, #16]
 800d3c2:	68f8      	ldr	r0, [r7, #12]
 800d3c4:	f7ff ff44 	bl	800d250 <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 800d3c8:	897b      	ldrh	r3, [r7, #10]
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	6938      	ldr	r0, [r7, #16]
 800d3d0:	f7ff ff6a 	bl	800d2a8 <ad7606_Convert>
 800d3d4:	46b5      	mov	sp, r6
}
 800d3d6:	bf00      	nop
 800d3d8:	371c      	adds	r7, #28
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d3e0 <INA228_writeReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要写入的寄存器地址
 * @param value 要写入的值
 */
void INA228_writeReg(INA228_Handle sensor, uint8_t regAddr, uint16_t value)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b088      	sub	sp, #32
 800d3e4:	af04      	add	r7, sp, #16
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	70fb      	strb	r3, [r7, #3]
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	803b      	strh	r3, [r7, #0]
	uint8_t txBuf[2] = {0}; // 所有可写寄存器均为 2 字节
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	81bb      	strh	r3, [r7, #12]

	txBuf[0] = MSB(value);
 800d3f4:	883b      	ldrh	r3, [r7, #0]
 800d3f6:	0a1b      	lsrs	r3, r3, #8
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	733b      	strb	r3, [r7, #12]
	txBuf[1] = LSB(value);
 800d3fe:	883b      	ldrh	r3, [r7, #0]
 800d400:	b2db      	uxtb	r3, r3
 800d402:	737b      	strb	r3, [r7, #13]
	// 写入寄存器
	HAL_I2C_Mem_Write(sensor->hi2c, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, txBuf, 2, 100);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	69d8      	ldr	r0, [r3, #28]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d40e:	4619      	mov	r1, r3
 800d410:	78fb      	ldrb	r3, [r7, #3]
 800d412:	b29a      	uxth	r2, r3
 800d414:	2364      	movs	r3, #100	@ 0x64
 800d416:	9302      	str	r3, [sp, #8]
 800d418:	2302      	movs	r3, #2
 800d41a:	9301      	str	r3, [sp, #4]
 800d41c:	f107 030c 	add.w	r3, r7, #12
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	2301      	movs	r3, #1
 800d424:	f7f6 fd12 	bl	8003e4c <HAL_I2C_Mem_Write>

	// 检查 ADC量程 的变化
	if (regAddr == INA228_config_register)
 800d428:	78fb      	ldrb	r3, [r7, #3]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d105      	bne.n	800d43a <INA228_writeReg+0x5a>
	{
		sensor->adcrange = value & INA228_config_register_adcrange_4096mV;
 800d42e:	883b      	ldrh	r3, [r7, #0]
 800d430:	f003 0310 	and.w	r3, r3, #16
 800d434:	b29a      	uxth	r2, r3
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	82da      	strh	r2, [r3, #22]
	}
}
 800d43a:	bf00      	nop
 800d43c:	3710      	adds	r7, #16
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}

0800d442 <INA228_config>:
/**
 * @brief 使用当前设置配置设备
 * @param sensor INA228传感器的句柄
 */
void INA228_config(INA228_Handle sensor)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b082      	sub	sp, #8
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
	// 写入传感器配置寄存器
	INA228_writeReg(sensor, INA228_config_register, sensor->configRegister);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	881b      	ldrh	r3, [r3, #0]
 800d44e:	461a      	mov	r2, r3
 800d450:	2100      	movs	r1, #0
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f7ff ffc4 	bl	800d3e0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_adc_config_register, sensor->adcConfigRegister);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	885b      	ldrh	r3, [r3, #2]
 800d45c:	461a      	mov	r2, r3
 800d45e:	2101      	movs	r1, #1
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f7ff ffbd 	bl	800d3e0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_cal_register, sensor->shuntCalRegister);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	889b      	ldrh	r3, [r3, #4]
 800d46a:	461a      	mov	r2, r3
 800d46c:	2102      	movs	r1, #2
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f7ff ffb6 	bl	800d3e0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_tempco_register, sensor->shuntTempcoRegister);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	88db      	ldrh	r3, [r3, #6]
 800d478:	461a      	mov	r2, r3
 800d47a:	2103      	movs	r1, #3
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f7ff ffaf 	bl	800d3e0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_diag_alrt_register, sensor->diagAlrtRegister);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	891b      	ldrh	r3, [r3, #8]
 800d486:	461a      	mov	r2, r3
 800d488:	210b      	movs	r1, #11
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f7ff ffa8 	bl	800d3e0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_sovl_register, sensor->sovlRegister);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	895b      	ldrh	r3, [r3, #10]
 800d494:	461a      	mov	r2, r3
 800d496:	210c      	movs	r1, #12
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f7ff ffa1 	bl	800d3e0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_suvl_register, sensor->suvlRegister);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	899b      	ldrh	r3, [r3, #12]
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	210d      	movs	r1, #13
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f7ff ff9a 	bl	800d3e0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_bovl_register, sensor->bovlRegister);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	89db      	ldrh	r3, [r3, #14]
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	210e      	movs	r1, #14
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f7ff ff93 	bl	800d3e0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_buvl_register, sensor->buvlRegister);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	8a1b      	ldrh	r3, [r3, #16]
 800d4be:	461a      	mov	r2, r3
 800d4c0:	210f      	movs	r1, #15
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f7ff ff8c 	bl	800d3e0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_temp_limit_register, sensor->tempLimitRegister);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	8a5b      	ldrh	r3, [r3, #18]
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	2110      	movs	r1, #16
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f7ff ff85 	bl	800d3e0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_pwr_limit_register, sensor->pwrLimitRegister);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	8a9b      	ldrh	r3, [r3, #20]
 800d4da:	461a      	mov	r2, r3
 800d4dc:	2111      	movs	r1, #17
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f7ff ff7e 	bl	800d3e0 <INA228_writeReg>
}
 800d4e4:	bf00      	nop
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <INA228_readReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要读取的寄存器地址
 * @return 寄存器中的值
 */
uint64_t INA228_readReg(INA228_Handle sensor, uint8_t regAddr)
{
 800d4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f0:	b08d      	sub	sp, #52	@ 0x34
 800d4f2:	af04      	add	r7, sp, #16
 800d4f4:	6078      	str	r0, [r7, #4]
 800d4f6:	460b      	mov	r3, r1
 800d4f8:	70fb      	strb	r3, [r7, #3]
	uint64_t value;
	int i;

	uint8_t rxBuf[5] = {0}; // max buffer size
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	60fb      	str	r3, [r7, #12]
 800d4fe:	2300      	movs	r3, #0
 800d500:	743b      	strb	r3, [r7, #16]
	// 读取寄存器值
	HAL_I2C_Mem_Read(sensor->hi2c, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, rxBuf, INA228_regSize[regAddr], 100);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	69d8      	ldr	r0, [r3, #28]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d50c:	461e      	mov	r6, r3
 800d50e:	78fb      	ldrb	r3, [r7, #3]
 800d510:	b29a      	uxth	r2, r3
 800d512:	78fb      	ldrb	r3, [r7, #3]
 800d514:	4920      	ldr	r1, [pc, #128]	@ (800d598 <INA228_readReg+0xac>)
 800d516:	5ccb      	ldrb	r3, [r1, r3]
 800d518:	4619      	mov	r1, r3
 800d51a:	2364      	movs	r3, #100	@ 0x64
 800d51c:	9302      	str	r3, [sp, #8]
 800d51e:	9101      	str	r1, [sp, #4]
 800d520:	f107 030c 	add.w	r3, r7, #12
 800d524:	9300      	str	r3, [sp, #0]
 800d526:	2301      	movs	r3, #1
 800d528:	4631      	mov	r1, r6
 800d52a:	f7f6 fda3 	bl	8004074 <HAL_I2C_Mem_Read>

	// 合并字节
	value = rxBuf[0];
 800d52e:	7b3b      	ldrb	r3, [r7, #12]
 800d530:	b2db      	uxtb	r3, r3
 800d532:	2200      	movs	r2, #0
 800d534:	469a      	mov	sl, r3
 800d536:	4693      	mov	fp, r2
 800d538:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 800d53c:	2301      	movs	r3, #1
 800d53e:	617b      	str	r3, [r7, #20]
 800d540:	e01b      	b.n	800d57a <INA228_readReg+0x8e>
	{
		value = (value << 8) | rxBuf[i];
 800d542:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d546:	f04f 0200 	mov.w	r2, #0
 800d54a:	f04f 0300 	mov.w	r3, #0
 800d54e:	020b      	lsls	r3, r1, #8
 800d550:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d554:	0202      	lsls	r2, r0, #8
 800d556:	f107 000c 	add.w	r0, r7, #12
 800d55a:	6979      	ldr	r1, [r7, #20]
 800d55c:	4401      	add	r1, r0
 800d55e:	7809      	ldrb	r1, [r1, #0]
 800d560:	b2c9      	uxtb	r1, r1
 800d562:	2000      	movs	r0, #0
 800d564:	460c      	mov	r4, r1
 800d566:	4605      	mov	r5, r0
 800d568:	ea42 0804 	orr.w	r8, r2, r4
 800d56c:	ea43 0905 	orr.w	r9, r3, r5
 800d570:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	3301      	adds	r3, #1
 800d578:	617b      	str	r3, [r7, #20]
 800d57a:	78fb      	ldrb	r3, [r7, #3]
 800d57c:	4a06      	ldr	r2, [pc, #24]	@ (800d598 <INA228_readReg+0xac>)
 800d57e:	5cd3      	ldrb	r3, [r2, r3]
 800d580:	461a      	mov	r2, r3
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	4293      	cmp	r3, r2
 800d586:	dbdc      	blt.n	800d542 <INA228_readReg+0x56>
	}

	return value;
 800d588:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800d58c:	4610      	mov	r0, r2
 800d58e:	4619      	mov	r1, r3
 800d590:	3724      	adds	r7, #36	@ 0x24
 800d592:	46bd      	mov	sp, r7
 800d594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d598:	08012660 	.word	0x08012660

0800d59c <INA228_getVBUS_V>:
 * @brief 获取总线电压值（伏特）
 * @param sensor INA228传感器的句柄
 * @return 总线电压值（V）
 */
float INA228_getVBUS_V(INA228_Handle sensor)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b086      	sub	sp, #24
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_vbus_register);
 800d5a4:	2105      	movs	r1, #5
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f7ff ffa0 	bl	800d4ec <INA228_readReg>
 800d5ac:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 800d5b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d5b4:	f04f 0200 	mov.w	r2, #0
 800d5b8:	f04f 0300 	mov.w	r3, #0
 800d5bc:	0902      	lsrs	r2, r0, #4
 800d5be:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800d5c2:	090b      	lsrs	r3, r1, #4
 800d5c4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Convert for 2's compliment and signed value (though always positive)
	if (value > 0x7FFFF)
 800d5c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d5cc:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800d5d0:	f173 0300 	sbcs.w	r3, r3, #0
 800d5d4:	d30c      	bcc.n	800d5f0 <INA228_getVBUS_V+0x54>
	{
		data = (float)value - 0x100000; // left for redundancy and error checking, should never get used
 800d5d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d5da:	f7f2 ffa1 	bl	8000520 <__aeabi_ul2f>
 800d5de:	ee07 0a10 	vmov	s14, r0
 800d5e2:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800d624 <INA228_getVBUS_V+0x88>
 800d5e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5ea:	edc7 7a05 	vstr	s15, [r7, #20]
 800d5ee:	e005      	b.n	800d5fc <INA228_getVBUS_V+0x60>
	}
	else
	{
		data = (float)value;
 800d5f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d5f4:	f7f2 ff94 	bl	8000520 <__aeabi_ul2f>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	617b      	str	r3, [r7, #20]
	}

	// Convert to V
	data = (data * 195.3125f) / 1000000;
 800d5fc:	edd7 7a05 	vldr	s15, [r7, #20]
 800d600:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800d628 <INA228_getVBUS_V+0x8c>
 800d604:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d608:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800d62c <INA228_getVBUS_V+0x90>
 800d60c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d610:	edc7 7a05 	vstr	s15, [r7, #20]

	return data;
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	ee07 3a90 	vmov	s15, r3
}
 800d61a:	eeb0 0a67 	vmov.f32	s0, s15
 800d61e:	3718      	adds	r7, #24
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	49800000 	.word	0x49800000
 800d628:	43435000 	.word	0x43435000
 800d62c:	49742400 	.word	0x49742400

0800d630 <INA228_getCURRENT_signedLSB>:
 * @brief 获取电流值（最低有效位）
 * @param sensor INA228传感器的句柄
 * @return 电流值（signed LSBs）
 */
float INA228_getCURRENT_signedLSB(INA228_Handle sensor)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b086      	sub	sp, #24
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_current_register);
 800d638:	2107      	movs	r1, #7
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f7ff ff56 	bl	800d4ec <INA228_readReg>
 800d640:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 800d644:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d648:	f04f 0200 	mov.w	r2, #0
 800d64c:	f04f 0300 	mov.w	r3, #0
 800d650:	0902      	lsrs	r2, r0, #4
 800d652:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800d656:	090b      	lsrs	r3, r1, #4
 800d658:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// 转换为 2 的补码和有符号值
	if (value > 0x7FFFF)
 800d65c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d660:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800d664:	f173 0300 	sbcs.w	r3, r3, #0
 800d668:	d30c      	bcc.n	800d684 <INA228_getCURRENT_signedLSB+0x54>
	{
		data = (float)value - 0x100000;
 800d66a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d66e:	f7f2 ff57 	bl	8000520 <__aeabi_ul2f>
 800d672:	ee07 0a10 	vmov	s14, r0
 800d676:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800d6a0 <INA228_getCURRENT_signedLSB+0x70>
 800d67a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d67e:	edc7 7a05 	vstr	s15, [r7, #20]
 800d682:	e005      	b.n	800d690 <INA228_getCURRENT_signedLSB+0x60>
	}
	else
	{
		data = (float)value;
 800d684:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d688:	f7f2 ff4a 	bl	8000520 <__aeabi_ul2f>
 800d68c:	4603      	mov	r3, r0
 800d68e:	617b      	str	r3, [r7, #20]
	}

	return data;
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	ee07 3a90 	vmov	s15, r3
}
 800d696:	eeb0 0a67 	vmov.f32	s0, s15
 800d69a:	3718      	adds	r7, #24
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	49800000 	.word	0x49800000

0800d6a4 <INA228_getCURRENT_A>:
 * @brief 获取电流值（安培）
 * @param sensor INA228传感器的句柄
 * @return 电流值（A）
 */
float INA228_getCURRENT_A(INA228_Handle sensor)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b084      	sub	sp, #16
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
	float data = INA228_getCURRENT_signedLSB(sensor);
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f7ff ffbf 	bl	800d630 <INA228_getCURRENT_signedLSB>
 800d6b2:	ed87 0a03 	vstr	s0, [r7, #12]

	data = data * sensor->currentlsb;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	edd3 7a06 	vldr	s15, [r3, #24]
 800d6bc:	ed97 7a03 	vldr	s14, [r7, #12]
 800d6c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6c4:	edc7 7a03 	vstr	s15, [r7, #12]

	return data;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	ee07 3a90 	vmov	s15, r3
}
 800d6ce:	eeb0 0a67 	vmov.f32	s0, s15
 800d6d2:	3710      	adds	r7, #16
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <OLED_WR_Byte>:
 * @brief 写入数据
 * @param dat 要写入的数据
 * @param cmd 数据类型 0 写入命令 1 写入数据
 */
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b084      	sub	sp, #16
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	4603      	mov	r3, r0
 800d6e0:	460a      	mov	r2, r1
 800d6e2:	71fb      	strb	r3, [r7, #7]
 800d6e4:	4613      	mov	r3, r2
 800d6e6:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 800d6e8:	1dfb      	adds	r3, r7, #7
 800d6ea:	60fb      	str	r3, [r7, #12]
	if (cmd)
 800d6ec:	79bb      	ldrb	r3, [r7, #6]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d005      	beq.n	800d6fe <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	2140      	movs	r1, #64	@ 0x40
 800d6f6:	4811      	ldr	r0, [pc, #68]	@ (800d73c <OLED_WR_Byte+0x64>)
 800d6f8:	f7f6 fabe 	bl	8003c78 <HAL_GPIO_WritePin>
 800d6fc:	e004      	b.n	800d708 <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 800d6fe:	2200      	movs	r2, #0
 800d700:	2140      	movs	r1, #64	@ 0x40
 800d702:	480e      	ldr	r0, [pc, #56]	@ (800d73c <OLED_WR_Byte+0x64>)
 800d704:	f7f6 fab8 	bl	8003c78 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 800d708:	2200      	movs	r2, #0
 800d70a:	2102      	movs	r1, #2
 800d70c:	480c      	ldr	r0, [pc, #48]	@ (800d740 <OLED_WR_Byte+0x68>)
 800d70e:	f7f6 fab3 	bl	8003c78 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 800d712:	23c8      	movs	r3, #200	@ 0xc8
 800d714:	2201      	movs	r2, #1
 800d716:	68f9      	ldr	r1, [r7, #12]
 800d718:	480a      	ldr	r0, [pc, #40]	@ (800d744 <OLED_WR_Byte+0x6c>)
 800d71a:	f7fa ff8d 	bl	8008638 <HAL_SPI_Transmit>

	OLED_CS_Set();
 800d71e:	2201      	movs	r2, #1
 800d720:	2102      	movs	r1, #2
 800d722:	4807      	ldr	r0, [pc, #28]	@ (800d740 <OLED_WR_Byte+0x68>)
 800d724:	f7f6 faa8 	bl	8003c78 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 800d728:	2201      	movs	r2, #1
 800d72a:	2140      	movs	r1, #64	@ 0x40
 800d72c:	4803      	ldr	r0, [pc, #12]	@ (800d73c <OLED_WR_Byte+0x64>)
 800d72e:	f7f6 faa3 	bl	8003c78 <HAL_GPIO_WritePin>
}
 800d732:	bf00      	nop
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	58022000 	.word	0x58022000
 800d740:	58020400 	.word	0x58020400
 800d744:	24000308 	.word	0x24000308

0800d748 <OLED_Refresh>:

/**
 * @brief 更新显存到OLED
 */
void OLED_Refresh(void)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b082      	sub	sp, #8
 800d74c:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800d74e:	2300      	movs	r3, #0
 800d750:	71fb      	strb	r3, [r7, #7]
 800d752:	e026      	b.n	800d7a2 <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 800d754:	79fb      	ldrb	r3, [r7, #7]
 800d756:	3b50      	subs	r3, #80	@ 0x50
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	2100      	movs	r1, #0
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7ff ffbb 	bl	800d6d8 <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 800d762:	2100      	movs	r1, #0
 800d764:	2000      	movs	r0, #0
 800d766:	f7ff ffb7 	bl	800d6d8 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 800d76a:	2100      	movs	r1, #0
 800d76c:	2010      	movs	r0, #16
 800d76e:	f7ff ffb3 	bl	800d6d8 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800d772:	2300      	movs	r3, #0
 800d774:	71bb      	strb	r3, [r7, #6]
 800d776:	e00d      	b.n	800d794 <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800d778:	79ba      	ldrb	r2, [r7, #6]
 800d77a:	79fb      	ldrb	r3, [r7, #7]
 800d77c:	490d      	ldr	r1, [pc, #52]	@ (800d7b4 <OLED_Refresh+0x6c>)
 800d77e:	00d2      	lsls	r2, r2, #3
 800d780:	440a      	add	r2, r1
 800d782:	4413      	add	r3, r2
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	2101      	movs	r1, #1
 800d788:	4618      	mov	r0, r3
 800d78a:	f7ff ffa5 	bl	800d6d8 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800d78e:	79bb      	ldrb	r3, [r7, #6]
 800d790:	3301      	adds	r3, #1
 800d792:	71bb      	strb	r3, [r7, #6]
 800d794:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	daed      	bge.n	800d778 <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 800d79c:	79fb      	ldrb	r3, [r7, #7]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	71fb      	strb	r3, [r7, #7]
 800d7a2:	79fb      	ldrb	r3, [r7, #7]
 800d7a4:	2b07      	cmp	r3, #7
 800d7a6:	d9d5      	bls.n	800d754 <OLED_Refresh+0xc>
	}
}
 800d7a8:	bf00      	nop
 800d7aa:	bf00      	nop
 800d7ac:	3708      	adds	r7, #8
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	24004e54 	.word	0x24004e54

0800d7b8 <OLED_Clear>:

/**
 * @brief 清屏
 */
void OLED_Clear(void)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800d7be:	2300      	movs	r3, #0
 800d7c0:	71fb      	strb	r3, [r7, #7]
 800d7c2:	e014      	b.n	800d7ee <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	71bb      	strb	r3, [r7, #6]
 800d7c8:	e00a      	b.n	800d7e0 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 800d7ca:	79ba      	ldrb	r2, [r7, #6]
 800d7cc:	79fb      	ldrb	r3, [r7, #7]
 800d7ce:	490c      	ldr	r1, [pc, #48]	@ (800d800 <OLED_Clear+0x48>)
 800d7d0:	00d2      	lsls	r2, r2, #3
 800d7d2:	440a      	add	r2, r1
 800d7d4:	4413      	add	r3, r2
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800d7da:	79bb      	ldrb	r3, [r7, #6]
 800d7dc:	3301      	adds	r3, #1
 800d7de:	71bb      	strb	r3, [r7, #6]
 800d7e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	daf0      	bge.n	800d7ca <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800d7e8:	79fb      	ldrb	r3, [r7, #7]
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	71fb      	strb	r3, [r7, #7]
 800d7ee:	79fb      	ldrb	r3, [r7, #7]
 800d7f0:	2b07      	cmp	r3, #7
 800d7f2:	d9e7      	bls.n	800d7c4 <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 800d7f4:	f7ff ffa8 	bl	800d748 <OLED_Refresh>
}
 800d7f8:	bf00      	nop
 800d7fa:	3708      	adds	r7, #8
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	24004e54 	.word	0x24004e54

0800d804 <OLED_DrawPoint>:
 * @brief 画点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 800d804:	b480      	push	{r7}
 800d806:	b085      	sub	sp, #20
 800d808:	af00      	add	r7, sp, #0
 800d80a:	4603      	mov	r3, r0
 800d80c:	460a      	mov	r2, r1
 800d80e:	71fb      	strb	r3, [r7, #7]
 800d810:	4613      	mov	r3, r2
 800d812:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800d814:	79bb      	ldrb	r3, [r7, #6]
 800d816:	08db      	lsrs	r3, r3, #3
 800d818:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800d81a:	79bb      	ldrb	r3, [r7, #6]
 800d81c:	f003 0307 	and.w	r3, r3, #7
 800d820:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800d822:	7bbb      	ldrb	r3, [r7, #14]
 800d824:	2201      	movs	r2, #1
 800d826:	fa02 f303 	lsl.w	r3, r2, r3
 800d82a:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 800d82c:	79fa      	ldrb	r2, [r7, #7]
 800d82e:	7bfb      	ldrb	r3, [r7, #15]
 800d830:	490a      	ldr	r1, [pc, #40]	@ (800d85c <OLED_DrawPoint+0x58>)
 800d832:	00d2      	lsls	r2, r2, #3
 800d834:	440a      	add	r2, r1
 800d836:	4413      	add	r3, r2
 800d838:	7818      	ldrb	r0, [r3, #0]
 800d83a:	79fa      	ldrb	r2, [r7, #7]
 800d83c:	7bfb      	ldrb	r3, [r7, #15]
 800d83e:	7b79      	ldrb	r1, [r7, #13]
 800d840:	4301      	orrs	r1, r0
 800d842:	b2c8      	uxtb	r0, r1
 800d844:	4905      	ldr	r1, [pc, #20]	@ (800d85c <OLED_DrawPoint+0x58>)
 800d846:	00d2      	lsls	r2, r2, #3
 800d848:	440a      	add	r2, r1
 800d84a:	4413      	add	r3, r2
 800d84c:	4602      	mov	r2, r0
 800d84e:	701a      	strb	r2, [r3, #0]
}
 800d850:	bf00      	nop
 800d852:	3714      	adds	r7, #20
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr
 800d85c:	24004e54 	.word	0x24004e54

0800d860 <OLED_ClearPoint>:
 * @brief 清除一个点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 800d860:	b480      	push	{r7}
 800d862:	b085      	sub	sp, #20
 800d864:	af00      	add	r7, sp, #0
 800d866:	4603      	mov	r3, r0
 800d868:	460a      	mov	r2, r1
 800d86a:	71fb      	strb	r3, [r7, #7]
 800d86c:	4613      	mov	r3, r2
 800d86e:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800d870:	79bb      	ldrb	r3, [r7, #6]
 800d872:	08db      	lsrs	r3, r3, #3
 800d874:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800d876:	79bb      	ldrb	r3, [r7, #6]
 800d878:	f003 0307 	and.w	r3, r3, #7
 800d87c:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800d87e:	7bbb      	ldrb	r3, [r7, #14]
 800d880:	2201      	movs	r2, #1
 800d882:	fa02 f303 	lsl.w	r3, r2, r3
 800d886:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800d888:	79fa      	ldrb	r2, [r7, #7]
 800d88a:	7bfb      	ldrb	r3, [r7, #15]
 800d88c:	491b      	ldr	r1, [pc, #108]	@ (800d8fc <OLED_ClearPoint+0x9c>)
 800d88e:	00d2      	lsls	r2, r2, #3
 800d890:	440a      	add	r2, r1
 800d892:	4413      	add	r3, r2
 800d894:	7819      	ldrb	r1, [r3, #0]
 800d896:	79fa      	ldrb	r2, [r7, #7]
 800d898:	7bfb      	ldrb	r3, [r7, #15]
 800d89a:	43c9      	mvns	r1, r1
 800d89c:	b2c8      	uxtb	r0, r1
 800d89e:	4917      	ldr	r1, [pc, #92]	@ (800d8fc <OLED_ClearPoint+0x9c>)
 800d8a0:	00d2      	lsls	r2, r2, #3
 800d8a2:	440a      	add	r2, r1
 800d8a4:	4413      	add	r3, r2
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 800d8aa:	79fa      	ldrb	r2, [r7, #7]
 800d8ac:	7bfb      	ldrb	r3, [r7, #15]
 800d8ae:	4913      	ldr	r1, [pc, #76]	@ (800d8fc <OLED_ClearPoint+0x9c>)
 800d8b0:	00d2      	lsls	r2, r2, #3
 800d8b2:	440a      	add	r2, r1
 800d8b4:	4413      	add	r3, r2
 800d8b6:	7818      	ldrb	r0, [r3, #0]
 800d8b8:	79fa      	ldrb	r2, [r7, #7]
 800d8ba:	7bfb      	ldrb	r3, [r7, #15]
 800d8bc:	7b79      	ldrb	r1, [r7, #13]
 800d8be:	4301      	orrs	r1, r0
 800d8c0:	b2c8      	uxtb	r0, r1
 800d8c2:	490e      	ldr	r1, [pc, #56]	@ (800d8fc <OLED_ClearPoint+0x9c>)
 800d8c4:	00d2      	lsls	r2, r2, #3
 800d8c6:	440a      	add	r2, r1
 800d8c8:	4413      	add	r3, r2
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800d8ce:	79fa      	ldrb	r2, [r7, #7]
 800d8d0:	7bfb      	ldrb	r3, [r7, #15]
 800d8d2:	490a      	ldr	r1, [pc, #40]	@ (800d8fc <OLED_ClearPoint+0x9c>)
 800d8d4:	00d2      	lsls	r2, r2, #3
 800d8d6:	440a      	add	r2, r1
 800d8d8:	4413      	add	r3, r2
 800d8da:	7819      	ldrb	r1, [r3, #0]
 800d8dc:	79fa      	ldrb	r2, [r7, #7]
 800d8de:	7bfb      	ldrb	r3, [r7, #15]
 800d8e0:	43c9      	mvns	r1, r1
 800d8e2:	b2c8      	uxtb	r0, r1
 800d8e4:	4905      	ldr	r1, [pc, #20]	@ (800d8fc <OLED_ClearPoint+0x9c>)
 800d8e6:	00d2      	lsls	r2, r2, #3
 800d8e8:	440a      	add	r2, r1
 800d8ea:	4413      	add	r3, r2
 800d8ec:	4602      	mov	r2, r0
 800d8ee:	701a      	strb	r2, [r3, #0]
}
 800d8f0:	bf00      	nop
 800d8f2:	3714      	adds	r7, #20
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr
 800d8fc:	24004e54 	.word	0x24004e54

0800d900 <OLED_ShowChar>:
 * @param chr 要显示的字符
 * @param size1 字体大小 12/16/24
 * @note 取模方式 逐列式
 */
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 800d900:	b590      	push	{r4, r7, lr}
 800d902:	b085      	sub	sp, #20
 800d904:	af00      	add	r7, sp, #0
 800d906:	4604      	mov	r4, r0
 800d908:	4608      	mov	r0, r1
 800d90a:	4611      	mov	r1, r2
 800d90c:	461a      	mov	r2, r3
 800d90e:	4623      	mov	r3, r4
 800d910:	71fb      	strb	r3, [r7, #7]
 800d912:	4603      	mov	r3, r0
 800d914:	71bb      	strb	r3, [r7, #6]
 800d916:	460b      	mov	r3, r1
 800d918:	717b      	strb	r3, [r7, #5]
 800d91a:	4613      	mov	r3, r2
 800d91c:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 800d91e:	79bb      	ldrb	r3, [r7, #6]
 800d920:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 800d922:	793b      	ldrb	r3, [r7, #4]
 800d924:	08db      	lsrs	r3, r3, #3
 800d926:	b2db      	uxtb	r3, r3
 800d928:	461a      	mov	r2, r3
 800d92a:	793b      	ldrb	r3, [r7, #4]
 800d92c:	f003 0307 	and.w	r3, r3, #7
 800d930:	b2db      	uxtb	r3, r3
 800d932:	2b00      	cmp	r3, #0
 800d934:	bf14      	ite	ne
 800d936:	2301      	movne	r3, #1
 800d938:	2300      	moveq	r3, #0
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	4413      	add	r3, r2
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	793b      	ldrb	r3, [r7, #4]
 800d942:	085b      	lsrs	r3, r3, #1
 800d944:	b2db      	uxtb	r3, r3
 800d946:	fb12 f303 	smulbb	r3, r2, r3
 800d94a:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 800d94c:	797b      	ldrb	r3, [r7, #5]
 800d94e:	3b20      	subs	r3, #32
 800d950:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 800d952:	2300      	movs	r3, #0
 800d954:	73fb      	strb	r3, [r7, #15]
 800d956:	e057      	b.n	800da08 <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 800d958:	793b      	ldrb	r3, [r7, #4]
 800d95a:	2b0c      	cmp	r3, #12
 800d95c:	d10b      	bne.n	800d976 <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 800d95e:	7aba      	ldrb	r2, [r7, #10]
 800d960:	7bf9      	ldrb	r1, [r7, #15]
 800d962:	482e      	ldr	r0, [pc, #184]	@ (800da1c <OLED_ShowChar+0x11c>)
 800d964:	4613      	mov	r3, r2
 800d966:	005b      	lsls	r3, r3, #1
 800d968:	4413      	add	r3, r2
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	4403      	add	r3, r0
 800d96e:	440b      	add	r3, r1
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	737b      	strb	r3, [r7, #13]
 800d974:	e019      	b.n	800d9aa <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 800d976:	793b      	ldrb	r3, [r7, #4]
 800d978:	2b10      	cmp	r3, #16
 800d97a:	d108      	bne.n	800d98e <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 800d97c:	7aba      	ldrb	r2, [r7, #10]
 800d97e:	7bfb      	ldrb	r3, [r7, #15]
 800d980:	4927      	ldr	r1, [pc, #156]	@ (800da20 <OLED_ShowChar+0x120>)
 800d982:	0112      	lsls	r2, r2, #4
 800d984:	440a      	add	r2, r1
 800d986:	4413      	add	r3, r2
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	737b      	strb	r3, [r7, #13]
 800d98c:	e00d      	b.n	800d9aa <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 800d98e:	793b      	ldrb	r3, [r7, #4]
 800d990:	2b18      	cmp	r3, #24
 800d992:	d13e      	bne.n	800da12 <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 800d994:	7aba      	ldrb	r2, [r7, #10]
 800d996:	7bf9      	ldrb	r1, [r7, #15]
 800d998:	4822      	ldr	r0, [pc, #136]	@ (800da24 <OLED_ShowChar+0x124>)
 800d99a:	4613      	mov	r3, r2
 800d99c:	00db      	lsls	r3, r3, #3
 800d99e:	4413      	add	r3, r2
 800d9a0:	009b      	lsls	r3, r3, #2
 800d9a2:	4403      	add	r3, r0
 800d9a4:	440b      	add	r3, r1
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	73bb      	strb	r3, [r7, #14]
 800d9ae:	e025      	b.n	800d9fc <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 800d9b0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	da06      	bge.n	800d9c6 <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 800d9b8:	79ba      	ldrb	r2, [r7, #6]
 800d9ba:	79fb      	ldrb	r3, [r7, #7]
 800d9bc:	4611      	mov	r1, r2
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7ff ff20 	bl	800d804 <OLED_DrawPoint>
 800d9c4:	e005      	b.n	800d9d2 <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 800d9c6:	79ba      	ldrb	r2, [r7, #6]
 800d9c8:	79fb      	ldrb	r3, [r7, #7]
 800d9ca:	4611      	mov	r1, r2
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f7ff ff47 	bl	800d860 <OLED_ClearPoint>
			temp <<= 1;
 800d9d2:	7b7b      	ldrb	r3, [r7, #13]
 800d9d4:	005b      	lsls	r3, r3, #1
 800d9d6:	737b      	strb	r3, [r7, #13]
			y++;
 800d9d8:	79bb      	ldrb	r3, [r7, #6]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 800d9de:	79ba      	ldrb	r2, [r7, #6]
 800d9e0:	7b3b      	ldrb	r3, [r7, #12]
 800d9e2:	1ad2      	subs	r2, r2, r3
 800d9e4:	793b      	ldrb	r3, [r7, #4]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d105      	bne.n	800d9f6 <OLED_ShowChar+0xf6>
			{
				y = y0;
 800d9ea:	7b3b      	ldrb	r3, [r7, #12]
 800d9ec:	71bb      	strb	r3, [r7, #6]
				x++;
 800d9ee:	79fb      	ldrb	r3, [r7, #7]
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	71fb      	strb	r3, [r7, #7]
				break;
 800d9f4:	e005      	b.n	800da02 <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 800d9f6:	7bbb      	ldrb	r3, [r7, #14]
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	73bb      	strb	r3, [r7, #14]
 800d9fc:	7bbb      	ldrb	r3, [r7, #14]
 800d9fe:	2b07      	cmp	r3, #7
 800da00:	d9d6      	bls.n	800d9b0 <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 800da02:	7bfb      	ldrb	r3, [r7, #15]
 800da04:	3301      	adds	r3, #1
 800da06:	73fb      	strb	r3, [r7, #15]
 800da08:	7bfa      	ldrb	r2, [r7, #15]
 800da0a:	7afb      	ldrb	r3, [r7, #11]
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d3a3      	bcc.n	800d958 <OLED_ShowChar+0x58>
 800da10:	e000      	b.n	800da14 <OLED_ShowChar+0x114>
			return;
 800da12:	bf00      	nop
			}
		}
	}
}
 800da14:	3714      	adds	r7, #20
 800da16:	46bd      	mov	sp, r7
 800da18:	bd90      	pop	{r4, r7, pc}
 800da1a:	bf00      	nop
 800da1c:	080126a0 	.word	0x080126a0
 800da20:	08012b14 	.word	0x08012b14
 800da24:	08013104 	.word	0x08013104

0800da28 <OLED_ShowString>:
 *@param y y坐标
 *@param chr 字符串起始地址
 *@param size1 字体大小
 */
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	603a      	str	r2, [r7, #0]
 800da30:	461a      	mov	r2, r3
 800da32:	4603      	mov	r3, r0
 800da34:	71fb      	strb	r3, [r7, #7]
 800da36:	460b      	mov	r3, r1
 800da38:	71bb      	strb	r3, [r7, #6]
 800da3a:	4613      	mov	r3, r2
 800da3c:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800da3e:	e01b      	b.n	800da78 <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	781a      	ldrb	r2, [r3, #0]
 800da44:	797b      	ldrb	r3, [r7, #5]
 800da46:	79b9      	ldrb	r1, [r7, #6]
 800da48:	79f8      	ldrb	r0, [r7, #7]
 800da4a:	f7ff ff59 	bl	800d900 <OLED_ShowChar>
		x += size1 / 2;
 800da4e:	797b      	ldrb	r3, [r7, #5]
 800da50:	085b      	lsrs	r3, r3, #1
 800da52:	b2da      	uxtb	r2, r3
 800da54:	79fb      	ldrb	r3, [r7, #7]
 800da56:	4413      	add	r3, r2
 800da58:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 800da5a:	79fa      	ldrb	r2, [r7, #7]
 800da5c:	797b      	ldrb	r3, [r7, #5]
 800da5e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800da62:	429a      	cmp	r2, r3
 800da64:	dd05      	ble.n	800da72 <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 800da66:	2302      	movs	r3, #2
 800da68:	71fb      	strb	r3, [r7, #7]
			y += size1;
 800da6a:	79ba      	ldrb	r2, [r7, #6]
 800da6c:	797b      	ldrb	r3, [r7, #5]
 800da6e:	4413      	add	r3, r2
 800da70:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	3301      	adds	r3, #1
 800da76:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	2b1f      	cmp	r3, #31
 800da7e:	d903      	bls.n	800da88 <OLED_ShowString+0x60>
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	2b7e      	cmp	r3, #126	@ 0x7e
 800da86:	d9db      	bls.n	800da40 <OLED_ShowString+0x18>
	}
}
 800da88:	bf00      	nop
 800da8a:	3708      	adds	r7, #8
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <OLED_Init>:

/**
 * @brief OLED初始化
 */
void OLED_Init(void)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 800da94:	2200      	movs	r2, #0
 800da96:	2120      	movs	r1, #32
 800da98:	483f      	ldr	r0, [pc, #252]	@ (800db98 <OLED_Init+0x108>)
 800da9a:	f7f6 f8ed 	bl	8003c78 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800da9e:	20c8      	movs	r0, #200	@ 0xc8
 800daa0:	f7f4 f804 	bl	8001aac <HAL_Delay>
	OLED_RES_Set();
 800daa4:	2201      	movs	r2, #1
 800daa6:	2120      	movs	r1, #32
 800daa8:	483b      	ldr	r0, [pc, #236]	@ (800db98 <OLED_Init+0x108>)
 800daaa:	f7f6 f8e5 	bl	8003c78 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 800daae:	2100      	movs	r1, #0
 800dab0:	20ae      	movs	r0, #174	@ 0xae
 800dab2:	f7ff fe11 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 800dab6:	2100      	movs	r1, #0
 800dab8:	2000      	movs	r0, #0
 800daba:	f7ff fe0d 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 800dabe:	2100      	movs	r1, #0
 800dac0:	2010      	movs	r0, #16
 800dac2:	f7ff fe09 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 800dac6:	2100      	movs	r1, #0
 800dac8:	2040      	movs	r0, #64	@ 0x40
 800daca:	f7ff fe05 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 800dace:	2100      	movs	r1, #0
 800dad0:	2081      	movs	r0, #129	@ 0x81
 800dad2:	f7ff fe01 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 800dad6:	2100      	movs	r1, #0
 800dad8:	20cf      	movs	r0, #207	@ 0xcf
 800dada:	f7ff fdfd 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 800dade:	2100      	movs	r1, #0
 800dae0:	20a1      	movs	r0, #161	@ 0xa1
 800dae2:	f7ff fdf9 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 800dae6:	2100      	movs	r1, #0
 800dae8:	20c8      	movs	r0, #200	@ 0xc8
 800daea:	f7ff fdf5 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 800daee:	2100      	movs	r1, #0
 800daf0:	20a6      	movs	r0, #166	@ 0xa6
 800daf2:	f7ff fdf1 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 800daf6:	2100      	movs	r1, #0
 800daf8:	20a8      	movs	r0, #168	@ 0xa8
 800dafa:	f7ff fded 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 800dafe:	2100      	movs	r1, #0
 800db00:	203f      	movs	r0, #63	@ 0x3f
 800db02:	f7ff fde9 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800db06:	2100      	movs	r1, #0
 800db08:	20d3      	movs	r0, #211	@ 0xd3
 800db0a:	f7ff fde5 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 800db0e:	2100      	movs	r1, #0
 800db10:	2000      	movs	r0, #0
 800db12:	f7ff fde1 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 800db16:	2100      	movs	r1, #0
 800db18:	20d5      	movs	r0, #213	@ 0xd5
 800db1a:	f7ff fddd 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 800db1e:	2100      	movs	r1, #0
 800db20:	2080      	movs	r0, #128	@ 0x80
 800db22:	f7ff fdd9 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 800db26:	2100      	movs	r1, #0
 800db28:	20d9      	movs	r0, #217	@ 0xd9
 800db2a:	f7ff fdd5 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 800db2e:	2100      	movs	r1, #0
 800db30:	20f1      	movs	r0, #241	@ 0xf1
 800db32:	f7ff fdd1 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 800db36:	2100      	movs	r1, #0
 800db38:	20da      	movs	r0, #218	@ 0xda
 800db3a:	f7ff fdcd 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 800db3e:	2100      	movs	r1, #0
 800db40:	2012      	movs	r0, #18
 800db42:	f7ff fdc9 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 800db46:	2100      	movs	r1, #0
 800db48:	20db      	movs	r0, #219	@ 0xdb
 800db4a:	f7ff fdc5 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 800db4e:	2100      	movs	r1, #0
 800db50:	2040      	movs	r0, #64	@ 0x40
 800db52:	f7ff fdc1 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 800db56:	2100      	movs	r1, #0
 800db58:	2020      	movs	r0, #32
 800db5a:	f7ff fdbd 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 800db5e:	2100      	movs	r1, #0
 800db60:	2002      	movs	r0, #2
 800db62:	f7ff fdb9 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 800db66:	2100      	movs	r1, #0
 800db68:	208d      	movs	r0, #141	@ 0x8d
 800db6a:	f7ff fdb5 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 800db6e:	2100      	movs	r1, #0
 800db70:	2014      	movs	r0, #20
 800db72:	f7ff fdb1 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 800db76:	2100      	movs	r1, #0
 800db78:	20a4      	movs	r0, #164	@ 0xa4
 800db7a:	f7ff fdad 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 800db7e:	2100      	movs	r1, #0
 800db80:	20a6      	movs	r0, #166	@ 0xa6
 800db82:	f7ff fda9 	bl	800d6d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 800db86:	2100      	movs	r1, #0
 800db88:	20af      	movs	r0, #175	@ 0xaf
 800db8a:	f7ff fda5 	bl	800d6d8 <OLED_WR_Byte>
	OLED_Clear();
 800db8e:	f7ff fe13 	bl	800d7b8 <OLED_Clear>
}
 800db92:	bf00      	nop
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	58020800 	.word	0x58020800

0800db9c <pid_Init>:
 * @param kd 微分系数
 * @param max 输出最大值
 * @param min 输出最小值
 */
void pid_Init(PID *pid, float kp, float ki, float kd, float max, float min) // PID参数初始化
{
 800db9c:	b480      	push	{r7}
 800db9e:	b087      	sub	sp, #28
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6178      	str	r0, [r7, #20]
 800dba4:	ed87 0a04 	vstr	s0, [r7, #16]
 800dba8:	edc7 0a03 	vstr	s1, [r7, #12]
 800dbac:	ed87 1a02 	vstr	s2, [r7, #8]
 800dbb0:	edc7 1a01 	vstr	s3, [r7, #4]
 800dbb4:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	693a      	ldr	r2, [r7, #16]
 800dbbc:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	68fa      	ldr	r2, [r7, #12]
 800dbc2:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	68ba      	ldr	r2, [r7, #8]
 800dbc8:	609a      	str	r2, [r3, #8]
	pid->Max = max;
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	61da      	str	r2, [r3, #28]
	pid->Min = min;
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	683a      	ldr	r2, [r7, #0]
 800dbd4:	621a      	str	r2, [r3, #32]
	pid->err[0] = 0.f;
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	f04f 0200 	mov.w	r2, #0
 800dbdc:	60da      	str	r2, [r3, #12]
	pid->err[1] = 0.f;
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	f04f 0200 	mov.w	r2, #0
 800dbe4:	611a      	str	r2, [r3, #16]
	pid->err[2] = 0.f;
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	f04f 0200 	mov.w	r2, #0
 800dbec:	615a      	str	r2, [r3, #20]
	pid->out = 0.f;
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	f04f 0200 	mov.w	r2, #0
 800dbf4:	619a      	str	r2, [r3, #24]
}
 800dbf6:	bf00      	nop
 800dbf8:	371c      	adds	r7, #28
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr

0800dc02 <pid>:
 * @note e(0)代表本次偏差
 * @note e(1)代表上一次的偏差  以此类推
 * @note result代表增量输出
 */
void pid(PID *pid, float target, float sample)
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	ed2d 8b02 	vpush	{d8}
 800dc08:	b084      	sub	sp, #16
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	60f8      	str	r0, [r7, #12]
 800dc0e:	ed87 0a02 	vstr	s0, [r7, #8]
 800dc12:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->err[0] = target - sample;
 800dc16:	ed97 7a02 	vldr	s14, [r7, #8]
 800dc1a:	edd7 7a01 	vldr	s15, [r7, #4]
 800dc1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->out += pid->kp * (pid->err[0] - pid->err[1]) + pid->ki * pid->err[0] + pid->kd * (pid->err[0] - 2 * pid->err[1] + pid->err[2]);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	ed93 7a06 	vldr	s14, [r3, #24]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	edd3 6a00 	vldr	s13, [r3]
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	ed93 6a03 	vldr	s12, [r3, #12]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	edd3 7a04 	vldr	s15, [r3, #16]
 800dc40:	ee76 7a67 	vsub.f32	s15, s12, s15
 800dc44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	ed93 6a01 	vldr	s12, [r3, #4]
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	edd3 7a03 	vldr	s15, [r3, #12]
 800dc54:	ee66 7a27 	vmul.f32	s15, s12, s15
 800dc58:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	ed93 6a02 	vldr	s12, [r3, #8]
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	edd3 5a03 	vldr	s11, [r3, #12]
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	edd3 7a04 	vldr	s15, [r3, #16]
 800dc6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dc72:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	edd3 7a05 	vldr	s15, [r3, #20]
 800dc7c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800dc80:	ee66 7a27 	vmul.f32	s15, s12, s15
 800dc84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->err[2] = pid->err[1];
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	691a      	ldr	r2, [r3, #16]
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	615a      	str	r2, [r3, #20]
	pid->err[1] = pid->err[0];
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	68da      	ldr	r2, [r3, #12]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	611a      	str	r2, [r3, #16]
	// 输出限幅
	pid->out = fminf(pid->Max, fmaxf(pid->out, pid->Min));
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	ed93 8a07 	vldr	s16, [r3, #28]
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	edd3 7a06 	vldr	s15, [r3, #24]
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	ed93 7a08 	vldr	s14, [r3, #32]
 800dcb4:	eef0 0a47 	vmov.f32	s1, s14
 800dcb8:	eeb0 0a67 	vmov.f32	s0, s15
 800dcbc:	f004 f988 	bl	8011fd0 <fmaxf>
 800dcc0:	eef0 7a40 	vmov.f32	s15, s0
 800dcc4:	eef0 0a67 	vmov.f32	s1, s15
 800dcc8:	eeb0 0a48 	vmov.f32	s0, s16
 800dccc:	f004 f99d 	bl	801200a <fminf>
 800dcd0:	eef0 7a40 	vmov.f32	s15, s0
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800dcda:	bf00      	nop
 800dcdc:	3710      	adds	r7, #16
 800dcde:	46bd      	mov	sp, r7
 800dce0:	ecbd 8b02 	vpop	{d8}
 800dce4:	bd80      	pop	{r7, pc}
	...

0800dce8 <pll_Init_V>:
 * @param signal 信号指针
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 */
void pll_Init_V(pll_Signal_V **signal, float f, uint16_t F)
{
 800dce8:	b590      	push	{r4, r7, lr}
 800dcea:	b087      	sub	sp, #28
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	ed87 0a02 	vstr	s0, [r7, #8]
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	80fb      	strh	r3, [r7, #6]
    /* 分配内存空间 */
    (*signal) = (pll_Signal_V *)malloc(sizeof(pll_Signal_V));
 800dcf8:	200c      	movs	r0, #12
 800dcfa:	f001 fb01 	bl	800f300 <malloc>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	461a      	mov	r2, r3
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681c      	ldr	r4, [r3, #0]
 800dd0a:	2024      	movs	r0, #36	@ 0x24
 800dd0c:	f001 faf8 	bl	800f300 <malloc>
 800dd10:	4603      	mov	r3, r0
 800dd12:	6023      	str	r3, [r4, #0]
    (*signal)->basic->sogi = (SOGI *)malloc(sizeof(SOGI));
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	681c      	ldr	r4, [r3, #0]
 800dd1a:	2034      	movs	r0, #52	@ 0x34
 800dd1c:	f001 faf0 	bl	800f300 <malloc>
 800dd20:	4603      	mov	r3, r0
 800dd22:	6123      	str	r3, [r4, #16]
    (*signal)->pid = (PID *)malloc(sizeof(PID));
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681c      	ldr	r4, [r3, #0]
 800dd28:	2024      	movs	r0, #36	@ 0x24
 800dd2a:	f001 fae9 	bl	800f300 <malloc>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	60a3      	str	r3, [r4, #8]

    /* 输入初始化赋值 */
    (*signal)->basic->input[0] = 0.f;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f04f 0200 	mov.w	r2, #0
 800dd3c:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input[1] = 0.f;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f04f 0200 	mov.w	r2, #0
 800dd48:	605a      	str	r2, [r3, #4]
    (*signal)->basic->input[2] = 0.f;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f04f 0200 	mov.w	r2, #0
 800dd54:	609a      	str	r2, [r3, #8]

    /* 有效值初始化赋值 */
    (*signal)->basic->rms = 0.f;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f04f 0200 	mov.w	r2, #0
 800dd60:	60da      	str	r2, [r3, #12]

    /* sogi变换相关变量初始化赋值 */
    (*signal)->basic->sogi->alpha[0] = 0.f;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	691b      	ldr	r3, [r3, #16]
 800dd6a:	f04f 0200 	mov.w	r2, #0
 800dd6e:	601a      	str	r2, [r3, #0]
    (*signal)->basic->sogi->alpha[1] = 0.f;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	691b      	ldr	r3, [r3, #16]
 800dd78:	f04f 0200 	mov.w	r2, #0
 800dd7c:	605a      	str	r2, [r3, #4]
    (*signal)->basic->sogi->alpha[2] = 0.f;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	691b      	ldr	r3, [r3, #16]
 800dd86:	f04f 0200 	mov.w	r2, #0
 800dd8a:	609a      	str	r2, [r3, #8]
    (*signal)->basic->sogi->beta[0] = 0.f;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	691b      	ldr	r3, [r3, #16]
 800dd94:	f04f 0200 	mov.w	r2, #0
 800dd98:	60da      	str	r2, [r3, #12]
    (*signal)->basic->sogi->beta[1] = 0.f;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	691b      	ldr	r3, [r3, #16]
 800dda2:	f04f 0200 	mov.w	r2, #0
 800dda6:	611a      	str	r2, [r3, #16]
    (*signal)->basic->sogi->beta[2] = 0.f;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	691b      	ldr	r3, [r3, #16]
 800ddb0:	f04f 0200 	mov.w	r2, #0
 800ddb4:	615a      	str	r2, [r3, #20]

    /* park变换相关变量初始化赋值 */
    (*signal)->basic->park_d = 0.f;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f04f 0200 	mov.w	r2, #0
 800ddc0:	615a      	str	r2, [r3, #20]
    (*signal)->basic->park_q = 0.f;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f04f 0200 	mov.w	r2, #0
 800ddcc:	619a      	str	r2, [r3, #24]

    (*signal)->basic->omiga0 = 2 * PI * f; /* f典型值50 */
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	edd7 7a02 	vldr	s15, [r7, #8]
 800ddd8:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 800e010 <pll_Init_V+0x328>
 800dddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dde0:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->Ts = 1.f / F;        /* F典型值20000 */
 800dde4:	88fb      	ldrh	r3, [r7, #6]
 800dde6:	ee07 3a90 	vmov	s15, r3
 800ddea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ddf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddfc:	edc3 7a08 	vstr	s15, [r3, #32]

    (*signal)->theta = 0.f;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f04f 0200 	mov.w	r2, #0
 800de08:	605a      	str	r2, [r3, #4]

    /* 计算sogi中间量 */
    (*signal)->basic->sogi->k = 1.414f;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	691b      	ldr	r3, [r3, #16]
 800de12:	4a80      	ldr	r2, [pc, #512]	@ (800e014 <pll_Init_V+0x32c>)
 800de14:	619a      	str	r2, [r3, #24]
    (*signal)->basic->sogi->lamda = 0.5f * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	edd3 7a07 	vldr	s15, [r3, #28]
 800de20:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800de24:	ee27 7a87 	vmul.f32	s14, s15, s14
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	edd3 7a08 	vldr	s15, [r3, #32]
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	691b      	ldr	r3, [r3, #16]
 800de3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de3e:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->sogi->x = 2.f * (*signal)->basic->sogi->k * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	691b      	ldr	r3, [r3, #16]
 800de4a:	edd3 7a06 	vldr	s15, [r3, #24]
 800de4e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	edd3 7a07 	vldr	s15, [r3, #28]
 800de5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	edd3 7a08 	vldr	s15, [r3, #32]
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	691b      	ldr	r3, [r3, #16]
 800de72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de76:	edc3 7a08 	vstr	s15, [r3, #32]
    (*signal)->basic->sogi->y = (*signal)->basic->omiga0 * (*signal)->basic->Ts * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	ed93 7a07 	vldr	s14, [r3, #28]
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	edd3 7a08 	vldr	s15, [r3, #32]
 800de8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	edd3 7a07 	vldr	s15, [r3, #28]
 800de9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	edd3 7a08 	vldr	s15, [r3, #32]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	691b      	ldr	r3, [r3, #16]
 800deb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deb6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    (*signal)->basic->sogi->b0 = (*signal)->basic->sogi->x / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	691b      	ldr	r3, [r3, #16]
 800dec2:	edd3 6a08 	vldr	s13, [r3, #32]
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	691b      	ldr	r3, [r3, #16]
 800dece:	ed93 7a08 	vldr	s14, [r3, #32]
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	691b      	ldr	r3, [r3, #16]
 800deda:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800dede:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dee2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800dee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	691b      	ldr	r3, [r3, #16]
 800def2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800def6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    (*signal)->basic->sogi->a1 = (8 - 2.f * (*signal)->basic->sogi->y) / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	691b      	ldr	r3, [r3, #16]
 800df02:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800df06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800df0a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800df0e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	691b      	ldr	r3, [r3, #16]
 800df1a:	ed93 7a08 	vldr	s14, [r3, #32]
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	691b      	ldr	r3, [r3, #16]
 800df26:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800df2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df2e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800df32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	691b      	ldr	r3, [r3, #16]
 800df3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df42:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    (*signal)->basic->sogi->a2 = ((*signal)->basic->sogi->x - (*signal)->basic->sogi->y - 4) / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	691b      	ldr	r3, [r3, #16]
 800df4e:	ed93 7a08 	vldr	s14, [r3, #32]
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	691b      	ldr	r3, [r3, #16]
 800df5a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800df5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df62:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800df66:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	691b      	ldr	r3, [r3, #16]
 800df72:	ed93 7a08 	vldr	s14, [r3, #32]
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	691b      	ldr	r3, [r3, #16]
 800df7e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800df82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df86:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800df8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	691b      	ldr	r3, [r3, #16]
 800df96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df9a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    /* 初始化pid参数 */
    float ki = (*signal)->basic->omiga0 * (*signal)->basic->omiga0;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	ed93 7a07 	vldr	s14, [r3, #28]
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	edd3 7a07 	vldr	s15, [r3, #28]
 800dfb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfb6:	edc7 7a05 	vstr	s15, [r7, #20]
    float kp = sqrt(2) * sqrt(ki);
 800dfba:	edd7 7a05 	vldr	s15, [r7, #20]
 800dfbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dfc2:	eeb0 0b47 	vmov.f64	d0, d7
 800dfc6:	f003 ff8b 	bl	8011ee0 <sqrt>
 800dfca:	eeb0 7b40 	vmov.f64	d7, d0
 800dfce:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 800e008 <pll_Init_V+0x320>
 800dfd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dfd6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800dfda:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_Init((*signal)->pid, kp, ki, 0, 50 * PI, -20 * PI);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	689b      	ldr	r3, [r3, #8]
 800dfe4:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 800e018 <pll_Init_V+0x330>
 800dfe8:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 800e01c <pll_Init_V+0x334>
 800dfec:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 800e020 <pll_Init_V+0x338>
 800dff0:	edd7 0a05 	vldr	s1, [r7, #20]
 800dff4:	ed97 0a04 	vldr	s0, [r7, #16]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7ff fdcf 	bl	800db9c <pid_Init>
}
 800dffe:	bf00      	nop
 800e000:	371c      	adds	r7, #28
 800e002:	46bd      	mov	sp, r7
 800e004:	bd90      	pop	{r4, r7, pc}
 800e006:	bf00      	nop
 800e008:	667f3bcd 	.word	0x667f3bcd
 800e00c:	3ff6a09e 	.word	0x3ff6a09e
 800e010:	40c90fdb 	.word	0x40c90fdb
 800e014:	3fb4fdf4 	.word	0x3fb4fdf4
 800e018:	c27b53d2 	.word	0xc27b53d2
 800e01c:	431d1463 	.word	0x431d1463
 800e020:	00000000 	.word	0x00000000

0800e024 <pll_Init_I>:
 * @param signal 信号指针
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 */
void pll_Init_I(pll_Signal_I **signal, float f, uint16_t F)
{
 800e024:	b590      	push	{r4, r7, lr}
 800e026:	b085      	sub	sp, #20
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	ed87 0a02 	vstr	s0, [r7, #8]
 800e030:	460b      	mov	r3, r1
 800e032:	80fb      	strh	r3, [r7, #6]
    /* 分配内存空间 */
    (*signal) = (pll_Signal_I *)malloc(sizeof(pll_Signal_I));
 800e034:	201c      	movs	r0, #28
 800e036:	f001 f963 	bl	800f300 <malloc>
 800e03a:	4603      	mov	r3, r0
 800e03c:	461a      	mov	r2, r3
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681c      	ldr	r4, [r3, #0]
 800e046:	2024      	movs	r0, #36	@ 0x24
 800e048:	f001 f95a 	bl	800f300 <malloc>
 800e04c:	4603      	mov	r3, r0
 800e04e:	6023      	str	r3, [r4, #0]
    (*signal)->basic->sogi = (SOGI *)malloc(sizeof(SOGI));
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	681c      	ldr	r4, [r3, #0]
 800e056:	2034      	movs	r0, #52	@ 0x34
 800e058:	f001 f952 	bl	800f300 <malloc>
 800e05c:	4603      	mov	r3, r0
 800e05e:	6123      	str	r3, [r4, #16]
    (*signal)->pid_d = (PID *)malloc(sizeof(PID));
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681c      	ldr	r4, [r3, #0]
 800e064:	2024      	movs	r0, #36	@ 0x24
 800e066:	f001 f94b 	bl	800f300 <malloc>
 800e06a:	4603      	mov	r3, r0
 800e06c:	6163      	str	r3, [r4, #20]
    (*signal)->pid_q = (PID *)malloc(sizeof(PID));
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681c      	ldr	r4, [r3, #0]
 800e072:	2024      	movs	r0, #36	@ 0x24
 800e074:	f001 f944 	bl	800f300 <malloc>
 800e078:	4603      	mov	r3, r0
 800e07a:	61a3      	str	r3, [r4, #24]

    /* 初始化赋值 */
    (*signal)->basic->input[0] = 0.f;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f04f 0200 	mov.w	r2, #0
 800e086:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input[1] = 0.f;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f04f 0200 	mov.w	r2, #0
 800e092:	605a      	str	r2, [r3, #4]
    (*signal)->basic->input[2] = 0.f;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f04f 0200 	mov.w	r2, #0
 800e09e:	609a      	str	r2, [r3, #8]

    /* 有效值初始化赋值 */
    (*signal)->basic->rms = 0.f;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f04f 0200 	mov.w	r2, #0
 800e0aa:	60da      	str	r2, [r3, #12]

    /* sogi变换相关变量初始化赋值 */
    (*signal)->basic->sogi->alpha[0] = 0.f;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	691b      	ldr	r3, [r3, #16]
 800e0b4:	f04f 0200 	mov.w	r2, #0
 800e0b8:	601a      	str	r2, [r3, #0]
    (*signal)->basic->sogi->alpha[1] = 0.f;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	691b      	ldr	r3, [r3, #16]
 800e0c2:	f04f 0200 	mov.w	r2, #0
 800e0c6:	605a      	str	r2, [r3, #4]
    (*signal)->basic->sogi->alpha[2] = 0.f;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	691b      	ldr	r3, [r3, #16]
 800e0d0:	f04f 0200 	mov.w	r2, #0
 800e0d4:	609a      	str	r2, [r3, #8]
    (*signal)->basic->sogi->beta[0] = 0.f;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	691b      	ldr	r3, [r3, #16]
 800e0de:	f04f 0200 	mov.w	r2, #0
 800e0e2:	60da      	str	r2, [r3, #12]
    (*signal)->basic->sogi->beta[1] = 0.f;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	691b      	ldr	r3, [r3, #16]
 800e0ec:	f04f 0200 	mov.w	r2, #0
 800e0f0:	611a      	str	r2, [r3, #16]
    (*signal)->basic->sogi->beta[2] = 0.f;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	691b      	ldr	r3, [r3, #16]
 800e0fa:	f04f 0200 	mov.w	r2, #0
 800e0fe:	615a      	str	r2, [r3, #20]

    /* park变换相关变量初始化赋值 */
    (*signal)->basic->park_d = 0.f;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f04f 0200 	mov.w	r2, #0
 800e10a:	615a      	str	r2, [r3, #20]
    (*signal)->basic->park_q = 0.f;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f04f 0200 	mov.w	r2, #0
 800e116:	619a      	str	r2, [r3, #24]

    (*signal)->basic->omiga0 = 2.f * PI * f; /* f典型值50 */
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	edd7 7a02 	vldr	s15, [r7, #8]
 800e122:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 800e34c <pll_Init_I+0x328>
 800e126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e12a:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->Ts = 1.f / F;          /* F典型值20000 */
 800e12e:	88fb      	ldrh	r3, [r7, #6]
 800e130:	ee07 3a90 	vmov	s15, r3
 800e134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e146:	edc3 7a08 	vstr	s15, [r3, #32]

    /* park逆变换相关变量初始化赋值 */
    (*signal)->park_inv_alpha = 0.f;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f04f 0200 	mov.w	r2, #0
 800e152:	605a      	str	r2, [r3, #4]
    (*signal)->park_inv_beta = 0.f;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f04f 0200 	mov.w	r2, #0
 800e15c:	609a      	str	r2, [r3, #8]

    (*signal)->CorL = 0;    /* 0:感性 1:容性 */
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	2200      	movs	r2, #0
 800e164:	731a      	strb	r2, [r3, #12]
    (*signal)->L = 0.0043f; /* 1mH */
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a79      	ldr	r2, [pc, #484]	@ (800e350 <pll_Init_I+0x32c>)
 800e16c:	611a      	str	r2, [r3, #16]

    /* 计算sogi中间量 */
    (*signal)->basic->sogi->k = 1.414f;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	691b      	ldr	r3, [r3, #16]
 800e176:	4a77      	ldr	r2, [pc, #476]	@ (800e354 <pll_Init_I+0x330>)
 800e178:	619a      	str	r2, [r3, #24]
    (*signal)->basic->sogi->lamda = 0.5f * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	edd3 7a07 	vldr	s15, [r3, #28]
 800e184:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e188:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	edd3 7a08 	vldr	s15, [r3, #32]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	691b      	ldr	r3, [r3, #16]
 800e19e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1a2:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->sogi->x = 2.f * (*signal)->basic->sogi->k * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	691b      	ldr	r3, [r3, #16]
 800e1ae:	edd3 7a06 	vldr	s15, [r3, #24]
 800e1b2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	edd3 7a07 	vldr	s15, [r3, #28]
 800e1c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	edd3 7a08 	vldr	s15, [r3, #32]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	691b      	ldr	r3, [r3, #16]
 800e1d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1da:	edc3 7a08 	vstr	s15, [r3, #32]
    (*signal)->basic->sogi->y = (*signal)->basic->omiga0 * (*signal)->basic->Ts * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	ed93 7a07 	vldr	s14, [r3, #28]
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	edd3 7a08 	vldr	s15, [r3, #32]
 800e1f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	edd3 7a07 	vldr	s15, [r3, #28]
 800e200:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	edd3 7a08 	vldr	s15, [r3, #32]
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	691b      	ldr	r3, [r3, #16]
 800e216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e21a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    (*signal)->basic->sogi->b0 = (*signal)->basic->sogi->x / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	691b      	ldr	r3, [r3, #16]
 800e226:	edd3 6a08 	vldr	s13, [r3, #32]
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	691b      	ldr	r3, [r3, #16]
 800e232:	ed93 7a08 	vldr	s14, [r3, #32]
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	691b      	ldr	r3, [r3, #16]
 800e23e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e242:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e246:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800e24a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	691b      	ldr	r3, [r3, #16]
 800e256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e25a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    (*signal)->basic->sogi->a1 = (8 - 2.f * (*signal)->basic->sogi->y) / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	691b      	ldr	r3, [r3, #16]
 800e266:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e26a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e26e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800e272:	ee77 6a67 	vsub.f32	s13, s14, s15
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	691b      	ldr	r3, [r3, #16]
 800e27e:	ed93 7a08 	vldr	s14, [r3, #32]
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	691b      	ldr	r3, [r3, #16]
 800e28a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e28e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e292:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800e296:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	691b      	ldr	r3, [r3, #16]
 800e2a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e2a6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    (*signal)->basic->sogi->a2 = ((*signal)->basic->sogi->x - (*signal)->basic->sogi->y - 4) / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	691b      	ldr	r3, [r3, #16]
 800e2b2:	ed93 7a08 	vldr	s14, [r3, #32]
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	691b      	ldr	r3, [r3, #16]
 800e2be:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e2c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e2c6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800e2ca:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	691b      	ldr	r3, [r3, #16]
 800e2d6:	ed93 7a08 	vldr	s14, [r3, #32]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	691b      	ldr	r3, [r3, #16]
 800e2e2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e2e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2ea:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800e2ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	691b      	ldr	r3, [r3, #16]
 800e2fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e2fe:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    /* 在调整取值范围时看实际输出值逐渐逼近，防止上电瞬间电流过大 */
    pid_Init((*signal)->pid_d, 2.f, 0.004f, 0, 0.5f, 0.f);
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	695b      	ldr	r3, [r3, #20]
 800e308:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 800e358 <pll_Init_I+0x334>
 800e30c:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800e310:	ed9f 1a11 	vldr	s2, [pc, #68]	@ 800e358 <pll_Init_I+0x334>
 800e314:	eddf 0a11 	vldr	s1, [pc, #68]	@ 800e35c <pll_Init_I+0x338>
 800e318:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7ff fc3d 	bl	800db9c <pid_Init>
    pid_Init((*signal)->pid_q, 0.2f, 0.0003f, 0, 0.0f, -0.5f);
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	699b      	ldr	r3, [r3, #24]
 800e328:	eebe 2a00 	vmov.f32	s4, #224	@ 0xbf000000 -0.5
 800e32c:	eddf 1a0a 	vldr	s3, [pc, #40]	@ 800e358 <pll_Init_I+0x334>
 800e330:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 800e358 <pll_Init_I+0x334>
 800e334:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 800e360 <pll_Init_I+0x33c>
 800e338:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800e364 <pll_Init_I+0x340>
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7ff fc2d 	bl	800db9c <pid_Init>
}
 800e342:	bf00      	nop
 800e344:	3714      	adds	r7, #20
 800e346:	46bd      	mov	sp, r7
 800e348:	bd90      	pop	{r4, r7, pc}
 800e34a:	bf00      	nop
 800e34c:	40c90fdb 	.word	0x40c90fdb
 800e350:	3b8ce704 	.word	0x3b8ce704
 800e354:	3fb4fdf4 	.word	0x3fb4fdf4
 800e358:	00000000 	.word	0x00000000
 800e35c:	3b83126f 	.word	0x3b83126f
 800e360:	399d4952 	.word	0x399d4952
 800e364:	3e4ccccd 	.word	0x3e4ccccd

0800e368 <pll_Control_V>:
/**
 * @brief 电压锁相控制
 * @param signal_V 电压信号指针
 */
void pll_Control_V(pll_Signal_V *signal_V)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b08a      	sub	sp, #40	@ 0x28
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
    /* 对信号先进行sogi变换，得到两个相位相差90度的信号 */
    pll_Sogi(signal_V->basic->sogi, signal_V->basic->input);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	691a      	ldr	r2, [r3, #16]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4619      	mov	r1, r3
 800e37c:	4610      	mov	r0, r2
 800e37e:	f000 f9df 	bl	800e740 <pll_Sogi>

    /* 再对信号sogi变换后的信号进行park变换 */
    float sinTheta = arm_sin_f32(signal_V->theta);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	edd3 7a01 	vldr	s15, [r3, #4]
 800e388:	eeb0 0a67 	vmov.f32	s0, s15
 800e38c:	f000 ff28 	bl	800f1e0 <arm_sin_f32>
 800e390:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float cosTheta = arm_cos_f32(signal_V->theta);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	edd3 7a01 	vldr	s15, [r3, #4]
 800e39a:	eeb0 0a67 	vmov.f32	s0, s15
 800e39e:	f000 ff65 	bl	800f26c <arm_cos_f32>
 800e3a2:	ed87 0a08 	vstr	s0, [r7, #32]
    arm_park_f32(signal_V->basic->sogi->alpha[0], signal_V->basic->sogi->beta[0], &signal_V->basic->park_d, &signal_V->basic->park_q, sinTheta, cosTheta);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	691b      	ldr	r3, [r3, #16]
 800e3ac:	6818      	ldr	r0, [r3, #0]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	691b      	ldr	r3, [r3, #16]
 800e3b4:	68d9      	ldr	r1, [r3, #12]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f103 0214 	add.w	r2, r3, #20
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	3318      	adds	r3, #24
 800e3c4:	61f8      	str	r0, [r7, #28]
 800e3c6:	61b9      	str	r1, [r7, #24]
 800e3c8:	617a      	str	r2, [r7, #20]
 800e3ca:	613b      	str	r3, [r7, #16]
 800e3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ce:	60fb      	str	r3, [r7, #12]
 800e3d0:	6a3b      	ldr	r3, [r7, #32]
 800e3d2:	60bb      	str	r3, [r7, #8]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800e3d4:	ed97 7a07 	vldr	s14, [r7, #28]
 800e3d8:	edd7 7a02 	vldr	s15, [r7, #8]
 800e3dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e3e0:	edd7 6a06 	vldr	s13, [r7, #24]
 800e3e4:	edd7 7a03 	vldr	s15, [r7, #12]
 800e3e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e3ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800e3f6:	edd7 7a07 	vldr	s15, [r7, #28]
 800e3fa:	eeb1 7a67 	vneg.f32	s14, s15
 800e3fe:	edd7 7a03 	vldr	s15, [r7, #12]
 800e402:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e406:	edd7 6a06 	vldr	s13, [r7, #24]
 800e40a:	edd7 7a02 	vldr	s15, [r7, #8]
 800e40e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e412:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	edc3 7a00 	vstr	s15, [r3]
  }
 800e41c:	bf00      	nop

    /* 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差 */
    pid(signal_V->pid, signal_V->basic->park_q, 0); /* pid的输出值为旋转坐标系角速度 */
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	689a      	ldr	r2, [r3, #8]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	edd3 7a06 	vldr	s15, [r3, #24]
 800e42a:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800e4a0 <pll_Control_V+0x138>
 800e42e:	eeb0 0a67 	vmov.f32	s0, s15
 800e432:	4610      	mov	r0, r2
 800e434:	f7ff fbe5 	bl	800dc02 <pid>

    /* 更新theta */
    signal_V->theta += (signal_V->pid->out + signal_V->basic->omiga0) * signal_V->basic->Ts;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	ed93 7a01 	vldr	s14, [r3, #4]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	689b      	ldr	r3, [r3, #8]
 800e442:	edd3 6a06 	vldr	s13, [r3, #24]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	edd3 7a07 	vldr	s15, [r3, #28]
 800e44e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	edd3 7a08 	vldr	s15, [r3, #32]
 800e45a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e45e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_V->theta = (float)fmod(signal_V->theta, 2 * PI);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	edd3 7a01 	vldr	s15, [r3, #4]
 800e46e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e472:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 800e498 <pll_Control_V+0x130>
 800e476:	eeb0 0b47 	vmov.f64	d0, d7
 800e47a:	f003 fd0d 	bl	8011e98 <fmod>
 800e47e:	eeb0 7b40 	vmov.f64	d7, d0
 800e482:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800e48c:	bf00      	nop
 800e48e:	3728      	adds	r7, #40	@ 0x28
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	f3af 8000 	nop.w
 800e498:	60000000 	.word	0x60000000
 800e49c:	401921fb 	.word	0x401921fb
 800e4a0:	00000000 	.word	0x00000000

0800e4a4 <pll_Control_I>:
 * @param signal_V 电压信号指针
 * @param Iset 电流设定值(有效值)
 * @param PF 功率因数
 */
void pll_Control_I(pll_Signal_I *signal_I, pll_Signal_V *signal_V, float Iset, float PF)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b098      	sub	sp, #96	@ 0x60
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	ed87 0a01 	vstr	s0, [r7, #4]
 800e4b2:	edc7 0a00 	vstr	s1, [r7]
    /* 对信号先进行sogi变换，得到两个相位相差90度的信号 */
    pll_Sogi(signal_I->basic->sogi, signal_I->basic->input);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	691a      	ldr	r2, [r3, #16]
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	4610      	mov	r0, r2
 800e4c4:	f000 f93c 	bl	800e740 <pll_Sogi>

    /* 在电压的系上得出电流的dq值 */
    float sinTheta = arm_sin_f32(signal_V->theta);
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	edd3 7a01 	vldr	s15, [r3, #4]
 800e4ce:	eeb0 0a67 	vmov.f32	s0, s15
 800e4d2:	f000 fe85 	bl	800f1e0 <arm_sin_f32>
 800e4d6:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
    float cosTheta = arm_cos_f32(signal_V->theta);
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	edd3 7a01 	vldr	s15, [r3, #4]
 800e4e0:	eeb0 0a67 	vmov.f32	s0, s15
 800e4e4:	f000 fec2 	bl	800f26c <arm_cos_f32>
 800e4e8:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58

    arm_park_f32(signal_I->basic->sogi->alpha[0], signal_I->basic->sogi->beta[0], &signal_I->basic->park_d, &signal_I->basic->park_q, sinTheta, cosTheta);
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	691b      	ldr	r3, [r3, #16]
 800e4f2:	6818      	ldr	r0, [r3, #0]
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	691b      	ldr	r3, [r3, #16]
 800e4fa:	68d9      	ldr	r1, [r3, #12]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f103 0214 	add.w	r2, r3, #20
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	3318      	adds	r3, #24
 800e50a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e50c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e50e:	637a      	str	r2, [r7, #52]	@ 0x34
 800e510:	633b      	str	r3, [r7, #48]	@ 0x30
 800e512:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e516:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e518:	62bb      	str	r3, [r7, #40]	@ 0x28
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800e51a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800e51e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800e522:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e526:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800e52a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800e52e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e532:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e538:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800e53c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800e540:	eeb1 7a67 	vneg.f32	s14, s15
 800e544:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800e548:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e54c:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800e550:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800e554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e55e:	edc3 7a00 	vstr	s15, [r3]
  }
 800e562:	bf00      	nop

    /* PI控制 */
    float PFTheta = asinf(PF);
 800e564:	ed97 0a00 	vldr	s0, [r7]
 800e568:	f003 fcda 	bl	8011f20 <asinf>
 800e56c:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54

    float Ipeak = Iset * 1.414f / Ibase;
 800e570:	edd7 7a01 	vldr	s15, [r7, #4]
 800e574:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 800e738 <pll_Control_I+0x294>
 800e578:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e57c:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e73c <pll_Control_I+0x298>
 800e580:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e584:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    float Ivalue = Ipeak * arm_sin_f32(PFTheta); /* 电流大小 */
 800e588:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 800e58c:	f000 fe28 	bl	800f1e0 <arm_sin_f32>
 800e590:	eeb0 7a40 	vmov.f32	s14, s0
 800e594:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800e598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e59c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    pid(signal_I->pid_d, Ivalue, signal_I->basic->park_d);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	695a      	ldr	r2, [r3, #20]
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	edd3 7a05 	vldr	s15, [r3, #20]
 800e5ac:	eef0 0a67 	vmov.f32	s1, s15
 800e5b0:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 800e5b4:	4610      	mov	r0, r2
 800e5b6:	f7ff fb24 	bl	800dc02 <pid>

    float Iphase = Ipeak * arm_cos_f32(PFTheta) * (signal_I->CorL ? 1 : -1); /* 电流相位 */
 800e5ba:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 800e5be:	f000 fe55 	bl	800f26c <arm_cos_f32>
 800e5c2:	eeb0 7a40 	vmov.f32	s14, s0
 800e5c6:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800e5ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	7b1b      	ldrb	r3, [r3, #12]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d002      	beq.n	800e5dc <pll_Control_I+0x138>
 800e5d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e5da:	e001      	b.n	800e5e0 <pll_Control_I+0x13c>
 800e5dc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e5e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5e4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    pid(signal_I->pid_q, Iphase, signal_I->basic->park_q);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	699a      	ldr	r2, [r3, #24]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	edd3 7a06 	vldr	s15, [r3, #24]
 800e5f4:	eef0 0a67 	vmov.f32	s1, s15
 800e5f8:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 800e5fc:	4610      	mov	r0, r2
 800e5fe:	f7ff fb00 	bl	800dc02 <pid>

    /* 解耦调制 */
    float Uabd = signal_V->basic->park_d - signal_I->pid_d->out + signal_I->basic->park_q * signal_I->basic->omiga0 * signal_I->L;
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	ed93 7a05 	vldr	s14, [r3, #20]
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	695b      	ldr	r3, [r3, #20]
 800e60e:	edd3 7a06 	vldr	s15, [r3, #24]
 800e612:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	edd3 6a06 	vldr	s13, [r3, #24]
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	edd3 7a07 	vldr	s15, [r3, #28]
 800e626:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	edd3 7a04 	vldr	s15, [r3, #16]
 800e630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e634:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e638:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float Uabq = signal_V->basic->park_q - signal_I->pid_q->out - signal_I->basic->park_d * signal_I->basic->omiga0 * signal_I->L;
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	ed93 7a06 	vldr	s14, [r3, #24]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	699b      	ldr	r3, [r3, #24]
 800e648:	edd3 7a06 	vldr	s15, [r3, #24]
 800e64c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	edd3 6a05 	vldr	s13, [r3, #20]
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	edd3 7a07 	vldr	s15, [r3, #28]
 800e660:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	edd3 7a04 	vldr	s15, [r3, #16]
 800e66a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e66e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e672:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    /* park逆变换 */
    arm_inv_park_f32(Uabd, Uabq, &signal_I->park_inv_alpha, &signal_I->park_inv_beta, sinTheta, cosTheta);
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	1d1a      	adds	r2, r3, #4
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	3308      	adds	r3, #8
 800e67e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e680:	6279      	str	r1, [r7, #36]	@ 0x24
 800e682:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e684:	6239      	str	r1, [r7, #32]
 800e686:	61fa      	str	r2, [r7, #28]
 800e688:	61bb      	str	r3, [r7, #24]
 800e68a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e68c:	617b      	str	r3, [r7, #20]
 800e68e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e690:	613b      	str	r3, [r7, #16]
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 800e692:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800e696:	edd7 7a04 	vldr	s15, [r7, #16]
 800e69a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e69e:	edd7 6a08 	vldr	s13, [r7, #32]
 800e6a2:	edd7 7a05 	vldr	s15, [r7, #20]
 800e6a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 800e6b4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800e6b8:	edd7 7a05 	vldr	s15, [r7, #20]
 800e6bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e6c0:	edd7 6a08 	vldr	s13, [r7, #32]
 800e6c4:	edd7 7a04 	vldr	s15, [r7, #16]
 800e6c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6d0:	69bb      	ldr	r3, [r7, #24]
 800e6d2:	edc3 7a00 	vstr	s15, [r3]
  }
 800e6d6:	bf00      	nop

    /* 限幅 */
    signal_I->park_inv_alpha = fmaxf(-1.0f, fminf(1.0f, signal_I->park_inv_alpha));
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	edd3 7a01 	vldr	s15, [r3, #4]
 800e6de:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800e6e2:	eeb0 0a67 	vmov.f32	s0, s15
 800e6e6:	f003 fc90 	bl	801200a <fminf>
 800e6ea:	eef0 7a40 	vmov.f32	s15, s0
 800e6ee:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 800e6f2:	eeb0 0a67 	vmov.f32	s0, s15
 800e6f6:	f003 fc6b 	bl	8011fd0 <fmaxf>
 800e6fa:	eef0 7a40 	vmov.f32	s15, s0
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_I->park_inv_beta = fmaxf(-1.0f, fminf(1.0f, signal_I->park_inv_beta));
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	edd3 7a02 	vldr	s15, [r3, #8]
 800e70a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800e70e:	eeb0 0a67 	vmov.f32	s0, s15
 800e712:	f003 fc7a 	bl	801200a <fminf>
 800e716:	eef0 7a40 	vmov.f32	s15, s0
 800e71a:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 800e71e:	eeb0 0a67 	vmov.f32	s0, s15
 800e722:	f003 fc55 	bl	8011fd0 <fmaxf>
 800e726:	eef0 7a40 	vmov.f32	s15, s0
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800e730:	bf00      	nop
 800e732:	3760      	adds	r7, #96	@ 0x60
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	3fb4fdf4 	.word	0x3fb4fdf4
 800e73c:	4107be77 	.word	0x4107be77

0800e740 <pll_Sogi>:
 * @brief Sogi变换
 * @param sogi sogi指针
 * @param input 输入信号
 */
static void pll_Sogi(SOGI *sogi, float *input)
{
 800e740:	b480      	push	{r7}
 800e742:	b083      	sub	sp, #12
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6039      	str	r1, [r7, #0]
    sogi->alpha[0] = sogi->b0 * input[0] - sogi->b0 * input[2] + sogi->a1 * sogi->alpha[1] + sogi->a2 * sogi->alpha[2];
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	edd3 7a00 	vldr	s15, [r3]
 800e756:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	3308      	adds	r3, #8
 800e764:	edd3 7a00 	vldr	s15, [r3]
 800e768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e76c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	edd3 7a01 	vldr	s15, [r3, #4]
 800e77c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e780:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	edd3 7a02 	vldr	s15, [r3, #8]
 800e790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e794:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	edc3 7a00 	vstr	s15, [r3]
    sogi->beta[0] = sogi->lamda * sogi->b0 * (input[0] + 2 * input[1] + input[2]) + sogi->a1 * sogi->beta[1] + sogi->a2 * sogi->beta[2];
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	ed93 7a07 	vldr	s14, [r3, #28]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800e7aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	edd3 6a00 	vldr	s13, [r3]
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	3304      	adds	r3, #4
 800e7b8:	edd3 7a00 	vldr	s15, [r3]
 800e7bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e7c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	3308      	adds	r3, #8
 800e7c8:	edd3 7a00 	vldr	s15, [r3]
 800e7cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	edd3 7a04 	vldr	s15, [r3, #16]
 800e7e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e7e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	edd3 7a05 	vldr	s15, [r3, #20]
 800e7f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e7f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	edc3 7a03 	vstr	s15, [r3, #12]

    input[2] = input[1];
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	3308      	adds	r3, #8
 800e806:	683a      	ldr	r2, [r7, #0]
 800e808:	6852      	ldr	r2, [r2, #4]
 800e80a:	601a      	str	r2, [r3, #0]
    input[1] = input[0];
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	3304      	adds	r3, #4
 800e810:	683a      	ldr	r2, [r7, #0]
 800e812:	6812      	ldr	r2, [r2, #0]
 800e814:	601a      	str	r2, [r3, #0]
    sogi->alpha[2] = sogi->alpha[1];
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	685a      	ldr	r2, [r3, #4]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	609a      	str	r2, [r3, #8]
    sogi->alpha[1] = sogi->alpha[0];
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681a      	ldr	r2, [r3, #0]
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	605a      	str	r2, [r3, #4]
    sogi->beta[2] = sogi->beta[1];
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	691a      	ldr	r2, [r3, #16]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	615a      	str	r2, [r3, #20]
    sogi->beta[1] = sogi->beta[0];
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	68da      	ldr	r2, [r3, #12]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	611a      	str	r2, [r3, #16]
}
 800e836:	bf00      	nop
 800e838:	370c      	adds	r7, #12
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr
	...

0800e844 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief    GPIO触发中断
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	4603      	mov	r3, r0
 800e84c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == AD7606_BUSY_Pin)
 800e84e:	88fb      	ldrh	r3, [r7, #6]
 800e850:	2b40      	cmp	r3, #64	@ 0x40
 800e852:	d13c      	bne.n	800e8ce <HAL_GPIO_EXTI_Callback+0x8a>
    {
        getVoltageCurrent();     /* 获取电压电流 */
 800e854:	f000 f84e 	bl	800e8f4 <getVoltageCurrent>
        calcEffectiveValue();    /* 计算有效值 */
 800e858:	f000 f880 	bl	800e95c <calcEffectiveValue>
        normalize();             /* 标幺化 */
 800e85c:	f000 f8c6 	bl	800e9ec <normalize>
        pll_Control_V(signal_V); /* 锁相控制 */
 800e860:	4b1d      	ldr	r3, [pc, #116]	@ (800e8d8 <HAL_GPIO_EXTI_Callback+0x94>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4618      	mov	r0, r3
 800e866:	f7ff fd7f 	bl	800e368 <pll_Control_V>

        /* 电流内环控制 */
        if (deviceState == RUN)
 800e86a:	4b1c      	ldr	r3, [pc, #112]	@ (800e8dc <HAL_GPIO_EXTI_Callback+0x98>)
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d10e      	bne.n	800e890 <HAL_GPIO_EXTI_Callback+0x4c>
            pll_Control_I(signal_I, signal_V, Itarget, 1.f);
 800e872:	4b1b      	ldr	r3, [pc, #108]	@ (800e8e0 <HAL_GPIO_EXTI_Callback+0x9c>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	4a18      	ldr	r2, [pc, #96]	@ (800e8d8 <HAL_GPIO_EXTI_Callback+0x94>)
 800e878:	6812      	ldr	r2, [r2, #0]
 800e87a:	491a      	ldr	r1, [pc, #104]	@ (800e8e4 <HAL_GPIO_EXTI_Callback+0xa0>)
 800e87c:	edd1 7a00 	vldr	s15, [r1]
 800e880:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800e884:	eeb0 0a67 	vmov.f32	s0, s15
 800e888:	4611      	mov	r1, r2
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7ff fe0a 	bl	800e4a4 <pll_Control_I>

        /* spwm输出 */
        spwmContral();
 800e890:	f000 f8d8 	bl	800ea44 <spwmContral>

        /* DAC输出 */
        // uint32_t dacValue = (uint32_t)(signal_I->basic->input[0] * 2000.f + 2048.f);
        uint32_t dacValue = (uint32_t)(arm_cos_f32(signal_V->theta) * 2000.f + 2048.f);
 800e894:	4b10      	ldr	r3, [pc, #64]	@ (800e8d8 <HAL_GPIO_EXTI_Callback+0x94>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	edd3 7a01 	vldr	s15, [r3, #4]
 800e89c:	eeb0 0a67 	vmov.f32	s0, s15
 800e8a0:	f000 fce4 	bl	800f26c <arm_cos_f32>
 800e8a4:	eef0 7a40 	vmov.f32	s15, s0
 800e8a8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800e8e8 <HAL_GPIO_EXTI_Callback+0xa4>
 800e8ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e8b0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800e8ec <HAL_GPIO_EXTI_Callback+0xa8>
 800e8b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e8b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e8bc:	ee17 3a90 	vmov	r3, s15
 800e8c0:	60fb      	str	r3, [r7, #12]
        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacValue);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	2100      	movs	r1, #0
 800e8c8:	4809      	ldr	r0, [pc, #36]	@ (800e8f0 <HAL_GPIO_EXTI_Callback+0xac>)
 800e8ca:	f7f4 fea4 	bl	8003616 <HAL_DAC_SetValue>
    }
}
 800e8ce:	bf00      	nop
 800e8d0:	3710      	adds	r7, #16
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	240052d4 	.word	0x240052d4
 800e8dc:	24005f60 	.word	0x24005f60
 800e8e0:	240052d8 	.word	0x240052d8
 800e8e4:	24000018 	.word	0x24000018
 800e8e8:	44fa0000 	.word	0x44fa0000
 800e8ec:	45000000 	.word	0x45000000
 800e8f0:	24000288 	.word	0x24000288

0800e8f4 <getVoltageCurrent>:

/**
 * @brief    获取相电压和电流
 */
static void getVoltageCurrent(void)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b088      	sub	sp, #32
 800e8f8:	af00      	add	r7, sp, #0
    /* 读取AD7606数据 */
    float adcValue[8] = {0};
 800e8fa:	463b      	mov	r3, r7
 800e8fc:	2220      	movs	r2, #32
 800e8fe:	2100      	movs	r1, #0
 800e900:	4618      	mov	r0, r3
 800e902:	f001 fb22 	bl	800ff4a <memset>
    ad7606_GetValue(&hspi2, 3, adcValue);
 800e906:	463b      	mov	r3, r7
 800e908:	461a      	mov	r2, r3
 800e90a:	2103      	movs	r1, #3
 800e90c:	480e      	ldr	r0, [pc, #56]	@ (800e948 <getVoltageCurrent+0x54>)
 800e90e:	f7fe fd21 	bl	800d354 <ad7606_GetValue>

    /* 处理电流电压数据 */
    signal_V->basic->input[0] = adcValue[1] * 41.795775f;
 800e912:	edd7 7a01 	vldr	s15, [r7, #4]
 800e916:	4b0d      	ldr	r3, [pc, #52]	@ (800e94c <getVoltageCurrent+0x58>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800e950 <getVoltageCurrent+0x5c>
 800e920:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e924:	edc3 7a00 	vstr	s15, [r3]
    signal_I->basic->input[0] = adcValue[2] * 2.5223214f;
 800e928:	edd7 7a02 	vldr	s15, [r7, #8]
 800e92c:	4b09      	ldr	r3, [pc, #36]	@ (800e954 <getVoltageCurrent+0x60>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800e958 <getVoltageCurrent+0x64>
 800e936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e93a:	edc3 7a00 	vstr	s15, [r3]
}
 800e93e:	bf00      	nop
 800e940:	3720      	adds	r7, #32
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}
 800e946:	bf00      	nop
 800e948:	24000390 	.word	0x24000390
 800e94c:	240052d4 	.word	0x240052d4
 800e950:	42272ee0 	.word	0x42272ee0
 800e954:	240052d8 	.word	0x240052d8
 800e958:	40216db7 	.word	0x40216db7

0800e95c <calcEffectiveValue>:

/**
 * @brief    计算电压电流有效值
 */
static void calcEffectiveValue(void)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	af00      	add	r7, sp, #0
    volatile static uint16_t cnt = 0;

    static float Vrms[400] = {0};
    static float Irms[400] = {0};

    Vrms[cnt] = signal_V->basic->input[0];
 800e960:	4b1d      	ldr	r3, [pc, #116]	@ (800e9d8 <calcEffectiveValue+0x7c>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	4a1d      	ldr	r2, [pc, #116]	@ (800e9dc <calcEffectiveValue+0x80>)
 800e968:	8812      	ldrh	r2, [r2, #0]
 800e96a:	b292      	uxth	r2, r2
 800e96c:	4610      	mov	r0, r2
 800e96e:	681a      	ldr	r2, [r3, #0]
 800e970:	491b      	ldr	r1, [pc, #108]	@ (800e9e0 <calcEffectiveValue+0x84>)
 800e972:	0083      	lsls	r3, r0, #2
 800e974:	440b      	add	r3, r1
 800e976:	601a      	str	r2, [r3, #0]
    Irms[cnt] = signal_I->basic->input[0];
 800e978:	4b1a      	ldr	r3, [pc, #104]	@ (800e9e4 <calcEffectiveValue+0x88>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	4a17      	ldr	r2, [pc, #92]	@ (800e9dc <calcEffectiveValue+0x80>)
 800e980:	8812      	ldrh	r2, [r2, #0]
 800e982:	b292      	uxth	r2, r2
 800e984:	4610      	mov	r0, r2
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	4917      	ldr	r1, [pc, #92]	@ (800e9e8 <calcEffectiveValue+0x8c>)
 800e98a:	0083      	lsls	r3, r0, #2
 800e98c:	440b      	add	r3, r1
 800e98e:	601a      	str	r2, [r3, #0]

    if (++cnt == 400)
 800e990:	4b12      	ldr	r3, [pc, #72]	@ (800e9dc <calcEffectiveValue+0x80>)
 800e992:	881b      	ldrh	r3, [r3, #0]
 800e994:	b29b      	uxth	r3, r3
 800e996:	3301      	adds	r3, #1
 800e998:	b29b      	uxth	r3, r3
 800e99a:	4a10      	ldr	r2, [pc, #64]	@ (800e9dc <calcEffectiveValue+0x80>)
 800e99c:	4619      	mov	r1, r3
 800e99e:	8011      	strh	r1, [r2, #0]
 800e9a0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800e9a4:	d116      	bne.n	800e9d4 <calcEffectiveValue+0x78>
    {
        cnt = 0;
 800e9a6:	4b0d      	ldr	r3, [pc, #52]	@ (800e9dc <calcEffectiveValue+0x80>)
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	801a      	strh	r2, [r3, #0]
        arm_rms_f32(Vrms, 400, &signal_V->basic->rms);
 800e9ac:	4b0a      	ldr	r3, [pc, #40]	@ (800e9d8 <calcEffectiveValue+0x7c>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	330c      	adds	r3, #12
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800e9ba:	4809      	ldr	r0, [pc, #36]	@ (800e9e0 <calcEffectiveValue+0x84>)
 800e9bc:	f000 fba8 	bl	800f110 <arm_rms_f32>
        arm_rms_f32(Irms, 400, &signal_I->basic->rms);
 800e9c0:	4b08      	ldr	r3, [pc, #32]	@ (800e9e4 <calcEffectiveValue+0x88>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	330c      	adds	r3, #12
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800e9ce:	4806      	ldr	r0, [pc, #24]	@ (800e9e8 <calcEffectiveValue+0x8c>)
 800e9d0:	f000 fb9e 	bl	800f110 <arm_rms_f32>
    }
}
 800e9d4:	bf00      	nop
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	240052d4 	.word	0x240052d4
 800e9dc:	240052dc 	.word	0x240052dc
 800e9e0:	240052e0 	.word	0x240052e0
 800e9e4:	240052d8 	.word	0x240052d8
 800e9e8:	24005920 	.word	0x24005920

0800e9ec <normalize>:

/**
 * @brief    标幺化
 */
static void normalize(void)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	af00      	add	r7, sp, #0
    signal_V->basic->input[0] /= Ubase;
 800e9f0:	4b10      	ldr	r3, [pc, #64]	@ (800ea34 <normalize+0x48>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	ed93 7a00 	vldr	s14, [r3]
 800e9fa:	4b0e      	ldr	r3, [pc, #56]	@ (800ea34 <normalize+0x48>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800ea38 <normalize+0x4c>
 800ea04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ea08:	edc3 7a00 	vstr	s15, [r3]
    signal_I->basic->input[0] /= Ibase;
 800ea0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ea3c <normalize+0x50>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	ed93 7a00 	vldr	s14, [r3]
 800ea16:	4b09      	ldr	r3, [pc, #36]	@ (800ea3c <normalize+0x50>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800ea40 <normalize+0x54>
 800ea20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ea24:	edc3 7a00 	vstr	s15, [r3]
}
 800ea28:	bf00      	nop
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr
 800ea32:	bf00      	nop
 800ea34:	240052d4 	.word	0x240052d4
 800ea38:	4229ae15 	.word	0x4229ae15
 800ea3c:	240052d8 	.word	0x240052d8
 800ea40:	4107be77 	.word	0x4107be77

0800ea44 <spwmContral>:
/**
 * @brief    spwm控制
 * @return
 */
static void spwmContral(void)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
    /* 计算比较值 */
    float COMPARE = signal_I->park_inv_alpha * (TIM_PERIOD - 1);
 800ea4a:	4b1b      	ldr	r3, [pc, #108]	@ (800eab8 <spwmContral+0x74>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	edd3 7a01 	vldr	s15, [r3, #4]
 800ea52:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800eabc <spwmContral+0x78>
 800ea56:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea5a:	edc7 7a01 	vstr	s15, [r7, #4]

    /* 调节SPWM占空比 */
    if (signal_I->park_inv_alpha > 0)
 800ea5e:	4b16      	ldr	r3, [pc, #88]	@ (800eab8 <spwmContral+0x74>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	edd3 7a01 	vldr	s15, [r3, #4]
 800ea66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ea6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea6e:	dd0d      	ble.n	800ea8c <spwmContral+0x48>
    {
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, COMPARE);
 800ea70:	4b13      	ldr	r3, [pc, #76]	@ (800eac0 <spwmContral+0x7c>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	edd7 7a01 	vldr	s15, [r7, #4]
 800ea78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea7c:	ee17 2a90 	vmov	r2, s15
 800ea80:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 800ea82:	4b0f      	ldr	r3, [pc, #60]	@ (800eac0 <spwmContral+0x7c>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	2200      	movs	r2, #0
 800ea88:	639a      	str	r2, [r3, #56]	@ 0x38
    else
    {
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, -COMPARE);
    }
}
 800ea8a:	e00e      	b.n	800eaaa <spwmContral+0x66>
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 800ea8c:	4b0c      	ldr	r3, [pc, #48]	@ (800eac0 <spwmContral+0x7c>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	2200      	movs	r2, #0
 800ea92:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, -COMPARE);
 800ea94:	edd7 7a01 	vldr	s15, [r7, #4]
 800ea98:	eef1 7a67 	vneg.f32	s15, s15
 800ea9c:	4b08      	ldr	r3, [pc, #32]	@ (800eac0 <spwmContral+0x7c>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eaa4:	ee17 2a90 	vmov	r2, s15
 800eaa8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800eaaa:	bf00      	nop
 800eaac:	370c      	adds	r7, #12
 800eaae:	46bd      	mov	sp, r7
 800eab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab4:	4770      	bx	lr
 800eab6:	bf00      	nop
 800eab8:	240052d8 	.word	0x240052d8
 800eabc:	463b7c00 	.word	0x463b7c00
 800eac0:	240004b4 	.word	0x240004b4

0800eac4 <UserInit>:
static float Idc = 0.0f;            /* 直流电流 */
static float Utarget = 50.0f;       /* 目标直流电压 */
float Itarget = 1.0f;               /* 电流参考值 */

void UserInit(void)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	af00      	add	r7, sp, #0
    ad7606_Init();
 800eac8:	f7fe fba6 	bl	800d218 <ad7606_Init>
    OLED_Init();
 800eacc:	f7fe ffe0 	bl	800da90 <OLED_Init>
    pll_Init_V(&signal_V, 50, 20000);
 800ead0:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800ead4:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 800eb10 <UserInit+0x4c>
 800ead8:	480e      	ldr	r0, [pc, #56]	@ (800eb14 <UserInit+0x50>)
 800eada:	f7ff f905 	bl	800dce8 <pll_Init_V>
    pll_Init_I(&signal_I, 50, 20000);
 800eade:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800eae2:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800eb10 <UserInit+0x4c>
 800eae6:	480c      	ldr	r0, [pc, #48]	@ (800eb18 <UserInit+0x54>)
 800eae8:	f7ff fa9c 	bl	800e024 <pll_Init_I>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800eaec:	2100      	movs	r1, #0
 800eaee:	480b      	ldr	r0, [pc, #44]	@ (800eb1c <UserInit+0x58>)
 800eaf0:	f7fa fc1c 	bl	800932c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800eaf4:	2104      	movs	r1, #4
 800eaf6:	4809      	ldr	r0, [pc, #36]	@ (800eb1c <UserInit+0x58>)
 800eaf8:	f7fa fc18 	bl	800932c <HAL_TIM_PWM_Start>
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800eafc:	2100      	movs	r1, #0
 800eafe:	4808      	ldr	r0, [pc, #32]	@ (800eb20 <UserInit+0x5c>)
 800eb00:	f7f4 fcdc 	bl	80034bc <HAL_DAC_Start>
    ad7606_Start(&htim2, TIM_CHANNEL_1);
 800eb04:	2100      	movs	r1, #0
 800eb06:	4807      	ldr	r0, [pc, #28]	@ (800eb24 <UserInit+0x60>)
 800eb08:	f7fe fbc0 	bl	800d28c <ad7606_Start>
}
 800eb0c:	bf00      	nop
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	42480000 	.word	0x42480000
 800eb14:	240052d4 	.word	0x240052d4
 800eb18:	240052d8 	.word	0x240052d8
 800eb1c:	240004b4 	.word	0x240004b4
 800eb20:	24000288 	.word	0x24000288
 800eb24:	24000468 	.word	0x24000468

0800eb28 <StartStateLED>:
 * @brief    状态指示灯控制
 * @param    *argument
 * @return
 */
void StartStateLED(void *argument)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b082      	sub	sp, #8
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN stateLED */
    /* Infinite loop */
    for (;;)
    {
        switch (deviceState)
 800eb30:	4b20      	ldr	r3, [pc, #128]	@ (800ebb4 <StartStateLED+0x8c>)
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	2b02      	cmp	r3, #2
 800eb36:	d032      	beq.n	800eb9e <StartStateLED+0x76>
 800eb38:	2b02      	cmp	r3, #2
 800eb3a:	dc38      	bgt.n	800ebae <StartStateLED+0x86>
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d002      	beq.n	800eb46 <StartStateLED+0x1e>
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d006      	beq.n	800eb52 <StartStateLED+0x2a>
        case FAULT: /* 保护状态 */
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
            osDelay(50);
            break;
        default:
            break;
 800eb44:	e033      	b.n	800ebae <StartStateLED+0x86>
            HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 800eb46:	2201      	movs	r2, #1
 800eb48:	2101      	movs	r1, #1
 800eb4a:	481b      	ldr	r0, [pc, #108]	@ (800ebb8 <StartStateLED+0x90>)
 800eb4c:	f7f5 f894 	bl	8003c78 <HAL_GPIO_WritePin>
            break;
 800eb50:	e02e      	b.n	800ebb0 <StartStateLED+0x88>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800eb52:	2101      	movs	r1, #1
 800eb54:	4818      	ldr	r0, [pc, #96]	@ (800ebb8 <StartStateLED+0x90>)
 800eb56:	f7f5 f8a8 	bl	8003caa <HAL_GPIO_TogglePin>
            osDelay(100);
 800eb5a:	2064      	movs	r0, #100	@ 0x64
 800eb5c:	f7fb feba 	bl	800a8d4 <osDelay>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800eb60:	2101      	movs	r1, #1
 800eb62:	4815      	ldr	r0, [pc, #84]	@ (800ebb8 <StartStateLED+0x90>)
 800eb64:	f7f5 f8a1 	bl	8003caa <HAL_GPIO_TogglePin>
            osDelay(200);
 800eb68:	20c8      	movs	r0, #200	@ 0xc8
 800eb6a:	f7fb feb3 	bl	800a8d4 <osDelay>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800eb6e:	2101      	movs	r1, #1
 800eb70:	4811      	ldr	r0, [pc, #68]	@ (800ebb8 <StartStateLED+0x90>)
 800eb72:	f7f5 f89a 	bl	8003caa <HAL_GPIO_TogglePin>
            osDelay(100);
 800eb76:	2064      	movs	r0, #100	@ 0x64
 800eb78:	f7fb feac 	bl	800a8d4 <osDelay>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800eb7c:	2101      	movs	r1, #1
 800eb7e:	480e      	ldr	r0, [pc, #56]	@ (800ebb8 <StartStateLED+0x90>)
 800eb80:	f7f5 f893 	bl	8003caa <HAL_GPIO_TogglePin>
            osDelay(200);
 800eb84:	20c8      	movs	r0, #200	@ 0xc8
 800eb86:	f7fb fea5 	bl	800a8d4 <osDelay>
            HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	2101      	movs	r1, #1
 800eb8e:	480a      	ldr	r0, [pc, #40]	@ (800ebb8 <StartStateLED+0x90>)
 800eb90:	f7f5 f872 	bl	8003c78 <HAL_GPIO_WritePin>
            osDelay(1000);
 800eb94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800eb98:	f7fb fe9c 	bl	800a8d4 <osDelay>
            break;
 800eb9c:	e008      	b.n	800ebb0 <StartStateLED+0x88>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800eb9e:	2101      	movs	r1, #1
 800eba0:	4805      	ldr	r0, [pc, #20]	@ (800ebb8 <StartStateLED+0x90>)
 800eba2:	f7f5 f882 	bl	8003caa <HAL_GPIO_TogglePin>
            osDelay(50);
 800eba6:	2032      	movs	r0, #50	@ 0x32
 800eba8:	f7fb fe94 	bl	800a8d4 <osDelay>
            break;
 800ebac:	e000      	b.n	800ebb0 <StartStateLED+0x88>
            break;
 800ebae:	bf00      	nop
        switch (deviceState)
 800ebb0:	e7be      	b.n	800eb30 <StartStateLED+0x8>
 800ebb2:	bf00      	nop
 800ebb4:	24005f60 	.word	0x24005f60
 800ebb8:	58022000 	.word	0x58022000
 800ebbc:	00000000 	.word	0x00000000

0800ebc0 <StartMcuTemperature>:
 * @brief    芯片温度读取
 * @param    *argument
 * @return
 */
void StartMcuTemperature(void *argument)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b084      	sub	sp, #16
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN mcuTemperature */
    HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED, ADC_CALIB_OFFSET);
 800ebc8:	2200      	movs	r2, #0
 800ebca:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800ebce:	4822      	ldr	r0, [pc, #136]	@ (800ec58 <StartMcuTemperature+0x98>)
 800ebd0:	f7f4 fa96 	bl	8003100 <HAL_ADCEx_Calibration_Start>
    HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED, ADC_CALIB_OFFSET_LINEARITY);
 800ebd4:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800ebd8:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800ebdc:	481e      	ldr	r0, [pc, #120]	@ (800ec58 <StartMcuTemperature+0x98>)
 800ebde:	f7f4 fa8f 	bl	8003100 <HAL_ADCEx_Calibration_Start>
    // /* Infinite loop */
    for (;;)
    {
        HAL_ADC_Start(&hadc3);
 800ebe2:	481d      	ldr	r0, [pc, #116]	@ (800ec58 <StartMcuTemperature+0x98>)
 800ebe4:	f7f3 fb3c 	bl	8002260 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc3, 1000) == HAL_OK) /* 判断是否转换完成 */
 800ebe8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ebec:	481a      	ldr	r0, [pc, #104]	@ (800ec58 <StartMcuTemperature+0x98>)
 800ebee:	f7f3 fc01 	bl	80023f4 <HAL_ADC_PollForConversion>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d125      	bne.n	800ec44 <StartMcuTemperature+0x84>
        {
            uint16_t temprature = HAL_ADC_GetValue(&hadc3); /* 读出转换结果 */
 800ebf8:	4817      	ldr	r0, [pc, #92]	@ (800ec58 <StartMcuTemperature+0x98>)
 800ebfa:	f7f3 fcef 	bl	80025dc <HAL_ADC_GetValue>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	81fb      	strh	r3, [r7, #14]
            mcuTemperature = ((110.0 - 30.0) / (*(unsigned short *)(0x1FF1E840) - *(unsigned short *)(0x1FF1E820))) * (temprature - *(unsigned short *)(0x1FF1E820)) + 30;
 800ec02:	4b16      	ldr	r3, [pc, #88]	@ (800ec5c <StartMcuTemperature+0x9c>)
 800ec04:	881b      	ldrh	r3, [r3, #0]
 800ec06:	461a      	mov	r2, r3
 800ec08:	4b15      	ldr	r3, [pc, #84]	@ (800ec60 <StartMcuTemperature+0xa0>)
 800ec0a:	881b      	ldrh	r3, [r3, #0]
 800ec0c:	1ad3      	subs	r3, r2, r3
 800ec0e:	ee07 3a90 	vmov	s15, r3
 800ec12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ec16:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 800ec50 <StartMcuTemperature+0x90>
 800ec1a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800ec1e:	89fb      	ldrh	r3, [r7, #14]
 800ec20:	4a0f      	ldr	r2, [pc, #60]	@ (800ec60 <StartMcuTemperature+0xa0>)
 800ec22:	8812      	ldrh	r2, [r2, #0]
 800ec24:	1a9b      	subs	r3, r3, r2
 800ec26:	ee07 3a90 	vmov	s15, r3
 800ec2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ec2e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ec32:	eeb3 6b0e 	vmov.f64	d6, #62	@ 0x41f00000  30.0
 800ec36:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ec3a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ec3e:	4b09      	ldr	r3, [pc, #36]	@ (800ec64 <StartMcuTemperature+0xa4>)
 800ec40:	edc3 7a00 	vstr	s15, [r3]
        }

        osDelay(500);
 800ec44:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ec48:	f7fb fe44 	bl	800a8d4 <osDelay>
        HAL_ADC_Start(&hadc3);
 800ec4c:	e7c9      	b.n	800ebe2 <StartMcuTemperature+0x22>
 800ec4e:	bf00      	nop
 800ec50:	00000000 	.word	0x00000000
 800ec54:	40540000 	.word	0x40540000
 800ec58:	24000224 	.word	0x24000224
 800ec5c:	1ff1e840 	.word	0x1ff1e840
 800ec60:	1ff1e820 	.word	0x1ff1e820
 800ec64:	24005f64 	.word	0x24005f64

0800ec68 <StartOledDisplay>:
 * @brief    OLED显示控制
 * @param    *argument
 * @return
 */
void StartOledDisplay(void *argument)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b092      	sub	sp, #72	@ 0x48
 800ec6c:	af06      	add	r7, sp, #24
 800ec6e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN oledDisplay */
    /* Infinite loop */
    for (;;)
    {
        char oledBuffer[22] = {0};
 800ec70:	2300      	movs	r3, #0
 800ec72:	60bb      	str	r3, [r7, #8]
 800ec74:	f107 030c 	add.w	r3, r7, #12
 800ec78:	2200      	movs	r2, #0
 800ec7a:	601a      	str	r2, [r3, #0]
 800ec7c:	605a      	str	r2, [r3, #4]
 800ec7e:	609a      	str	r2, [r3, #8]
 800ec80:	60da      	str	r2, [r3, #12]
 800ec82:	821a      	strh	r2, [r3, #16]
        float Uac = signal_V->basic->rms;
 800ec84:	4b73      	ldr	r3, [pc, #460]	@ (800ee54 <StartOledDisplay+0x1ec>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	62bb      	str	r3, [r7, #40]	@ 0x28
        float Iac = signal_I->basic->rms;
 800ec8e:	4b72      	ldr	r3, [pc, #456]	@ (800ee58 <StartOledDisplay+0x1f0>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	68db      	ldr	r3, [r3, #12]
 800ec96:	627b      	str	r3, [r7, #36]	@ 0x24

        /* 显示直流电压电流 */
        snprintf(oledBuffer, sizeof(oledBuffer), "Udc:%5.2fV Idc:%4.2fA", Udc, Idc);
 800ec98:	4b70      	ldr	r3, [pc, #448]	@ (800ee5c <StartOledDisplay+0x1f4>)
 800ec9a:	edd3 7a00 	vldr	s15, [r3]
 800ec9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800eca2:	4b6f      	ldr	r3, [pc, #444]	@ (800ee60 <StartOledDisplay+0x1f8>)
 800eca4:	edd3 6a00 	vldr	s13, [r3]
 800eca8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800ecac:	f107 0308 	add.w	r3, r7, #8
 800ecb0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ecb4:	ed8d 7b00 	vstr	d7, [sp]
 800ecb8:	4a6a      	ldr	r2, [pc, #424]	@ (800ee64 <StartOledDisplay+0x1fc>)
 800ecba:	2116      	movs	r1, #22
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f001 f8cd 	bl	800fe5c <sniprintf>
        OLED_ShowString(0, 0, (uint8_t *)oledBuffer, 12);
 800ecc2:	f107 0208 	add.w	r2, r7, #8
 800ecc6:	230c      	movs	r3, #12
 800ecc8:	2100      	movs	r1, #0
 800ecca:	2000      	movs	r0, #0
 800eccc:	f7fe feac 	bl	800da28 <OLED_ShowString>

        /* 显示交流电压电流 */
        snprintf(oledBuffer, sizeof(oledBuffer), "Uac:%5.2fV Iac:%4.2fA", Uac, Iac);
 800ecd0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800ecd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ecd8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800ecdc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800ece0:	f107 0308 	add.w	r3, r7, #8
 800ece4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ece8:	ed8d 7b00 	vstr	d7, [sp]
 800ecec:	4a5e      	ldr	r2, [pc, #376]	@ (800ee68 <StartOledDisplay+0x200>)
 800ecee:	2116      	movs	r1, #22
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f001 f8b3 	bl	800fe5c <sniprintf>
        OLED_ShowString(0, 12, (uint8_t *)oledBuffer, 12);
 800ecf6:	f107 0208 	add.w	r2, r7, #8
 800ecfa:	230c      	movs	r3, #12
 800ecfc:	210c      	movs	r1, #12
 800ecfe:	2000      	movs	r0, #0
 800ed00:	f7fe fe92 	bl	800da28 <OLED_ShowString>

        /* 锁相信息 */
        snprintf(oledBuffer, sizeof(oledBuffer), "a:%5.2fV b:%5.2fA", signal_I->pid_d->out, signal_I->pid_q->out);
 800ed04:	4b54      	ldr	r3, [pc, #336]	@ (800ee58 <StartOledDisplay+0x1f0>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	695b      	ldr	r3, [r3, #20]
 800ed0a:	edd3 7a06 	vldr	s15, [r3, #24]
 800ed0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ed12:	4b51      	ldr	r3, [pc, #324]	@ (800ee58 <StartOledDisplay+0x1f0>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	699b      	ldr	r3, [r3, #24]
 800ed18:	edd3 6a06 	vldr	s13, [r3, #24]
 800ed1c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800ed20:	f107 0308 	add.w	r3, r7, #8
 800ed24:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ed28:	ed8d 7b00 	vstr	d7, [sp]
 800ed2c:	4a4f      	ldr	r2, [pc, #316]	@ (800ee6c <StartOledDisplay+0x204>)
 800ed2e:	2116      	movs	r1, #22
 800ed30:	4618      	mov	r0, r3
 800ed32:	f001 f893 	bl	800fe5c <sniprintf>
        OLED_ShowString(0, 24, (uint8_t *)oledBuffer, 12);
 800ed36:	f107 0208 	add.w	r2, r7, #8
 800ed3a:	230c      	movs	r3, #12
 800ed3c:	2118      	movs	r1, #24
 800ed3e:	2000      	movs	r0, #0
 800ed40:	f7fe fe72 	bl	800da28 <OLED_ShowString>

        /* pid */
        snprintf(oledBuffer, sizeof(oledBuffer), "%5.2f %5.2f %4.2f", signal_I->basic->park_d, signal_I->basic->park_q, Itarget);
 800ed44:	4b44      	ldr	r3, [pc, #272]	@ (800ee58 <StartOledDisplay+0x1f0>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	edd3 7a05 	vldr	s15, [r3, #20]
 800ed4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ed52:	4b41      	ldr	r3, [pc, #260]	@ (800ee58 <StartOledDisplay+0x1f0>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	edd3 6a06 	vldr	s13, [r3, #24]
 800ed5c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800ed60:	4b43      	ldr	r3, [pc, #268]	@ (800ee70 <StartOledDisplay+0x208>)
 800ed62:	edd3 5a00 	vldr	s11, [r3]
 800ed66:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800ed6a:	f107 0308 	add.w	r3, r7, #8
 800ed6e:	ed8d 5b04 	vstr	d5, [sp, #16]
 800ed72:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ed76:	ed8d 7b00 	vstr	d7, [sp]
 800ed7a:	4a3e      	ldr	r2, [pc, #248]	@ (800ee74 <StartOledDisplay+0x20c>)
 800ed7c:	2116      	movs	r1, #22
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f001 f86c 	bl	800fe5c <sniprintf>
        OLED_ShowString(0, 36, (uint8_t *)oledBuffer, 12);
 800ed84:	f107 0208 	add.w	r2, r7, #8
 800ed88:	230c      	movs	r3, #12
 800ed8a:	2124      	movs	r1, #36	@ 0x24
 800ed8c:	2000      	movs	r0, #0
 800ed8e:	f7fe fe4b 	bl	800da28 <OLED_ShowString>

        /* 显示设备状态和温度 */
        const char *stateText;
        switch (deviceState)
 800ed92:	4b39      	ldr	r3, [pc, #228]	@ (800ee78 <StartOledDisplay+0x210>)
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	2b02      	cmp	r3, #2
 800ed98:	d00c      	beq.n	800edb4 <StartOledDisplay+0x14c>
 800ed9a:	2b02      	cmp	r3, #2
 800ed9c:	dc0d      	bgt.n	800edba <StartOledDisplay+0x152>
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d002      	beq.n	800eda8 <StartOledDisplay+0x140>
 800eda2:	2b01      	cmp	r3, #1
 800eda4:	d003      	beq.n	800edae <StartOledDisplay+0x146>
 800eda6:	e008      	b.n	800edba <StartOledDisplay+0x152>
        {
        case START:
            stateText = "START";
 800eda8:	4b34      	ldr	r3, [pc, #208]	@ (800ee7c <StartOledDisplay+0x214>)
 800edaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800edac:	e008      	b.n	800edc0 <StartOledDisplay+0x158>
        case RUN:
            stateText = "RUN";
 800edae:	4b34      	ldr	r3, [pc, #208]	@ (800ee80 <StartOledDisplay+0x218>)
 800edb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800edb2:	e005      	b.n	800edc0 <StartOledDisplay+0x158>
        case FAULT:
            stateText = "FAULT";
 800edb4:	4b33      	ldr	r3, [pc, #204]	@ (800ee84 <StartOledDisplay+0x21c>)
 800edb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800edb8:	e002      	b.n	800edc0 <StartOledDisplay+0x158>
        default:
            stateText = "UNKNOWN";
 800edba:	4b33      	ldr	r3, [pc, #204]	@ (800ee88 <StartOledDisplay+0x220>)
 800edbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800edbe:	bf00      	nop
        }

        float efficiency = fabsf(Udc * Idc) / (Uac * Iac) * 100.f;
 800edc0:	4b26      	ldr	r3, [pc, #152]	@ (800ee5c <StartOledDisplay+0x1f4>)
 800edc2:	ed93 7a00 	vldr	s14, [r3]
 800edc6:	4b26      	ldr	r3, [pc, #152]	@ (800ee60 <StartOledDisplay+0x1f8>)
 800edc8:	edd3 7a00 	vldr	s15, [r3]
 800edcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edd0:	eef0 6ae7 	vabs.f32	s13, s15
 800edd4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800edd8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800eddc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ede0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ede4:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800ee8c <StartOledDisplay+0x224>
 800ede8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800edec:	edc7 7a08 	vstr	s15, [r7, #32]
        efficiency = fmaxf(0.f, fminf(100.f, efficiency));
 800edf0:	eddf 0a26 	vldr	s1, [pc, #152]	@ 800ee8c <StartOledDisplay+0x224>
 800edf4:	ed97 0a08 	vldr	s0, [r7, #32]
 800edf8:	f003 f907 	bl	801200a <fminf>
 800edfc:	eef0 7a40 	vmov.f32	s15, s0
 800ee00:	eddf 0a23 	vldr	s1, [pc, #140]	@ 800ee90 <StartOledDisplay+0x228>
 800ee04:	eeb0 0a67 	vmov.f32	s0, s15
 800ee08:	f003 f8e2 	bl	8011fd0 <fmaxf>
 800ee0c:	ed87 0a08 	vstr	s0, [r7, #32]

        snprintf(oledBuffer, sizeof(oledBuffer), "%-6s%5.1f%%%7.2fC", stateText, efficiency, mcuTemperature);
 800ee10:	edd7 7a08 	vldr	s15, [r7, #32]
 800ee14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ee18:	4b1e      	ldr	r3, [pc, #120]	@ (800ee94 <StartOledDisplay+0x22c>)
 800ee1a:	edd3 6a00 	vldr	s13, [r3]
 800ee1e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800ee22:	f107 0008 	add.w	r0, r7, #8
 800ee26:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ee2a:	ed8d 7b00 	vstr	d7, [sp]
 800ee2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee30:	4a19      	ldr	r2, [pc, #100]	@ (800ee98 <StartOledDisplay+0x230>)
 800ee32:	2116      	movs	r1, #22
 800ee34:	f001 f812 	bl	800fe5c <sniprintf>
        OLED_ShowString(0, 48, (uint8_t *)oledBuffer, 12);
 800ee38:	f107 0208 	add.w	r2, r7, #8
 800ee3c:	230c      	movs	r3, #12
 800ee3e:	2130      	movs	r1, #48	@ 0x30
 800ee40:	2000      	movs	r0, #0
 800ee42:	f7fe fdf1 	bl	800da28 <OLED_ShowString>

        /* 刷新显示 */
        OLED_Refresh();
 800ee46:	f7fe fc7f 	bl	800d748 <OLED_Refresh>

        osDelay(100);
 800ee4a:	2064      	movs	r0, #100	@ 0x64
 800ee4c:	f7fb fd42 	bl	800a8d4 <osDelay>
    {
 800ee50:	e70e      	b.n	800ec70 <StartOledDisplay+0x8>
 800ee52:	bf00      	nop
 800ee54:	240052d4 	.word	0x240052d4
 800ee58:	240052d8 	.word	0x240052d8
 800ee5c:	24005f68 	.word	0x24005f68
 800ee60:	24005f6c 	.word	0x24005f6c
 800ee64:	080124f0 	.word	0x080124f0
 800ee68:	08012508 	.word	0x08012508
 800ee6c:	08012520 	.word	0x08012520
 800ee70:	24000018 	.word	0x24000018
 800ee74:	08012534 	.word	0x08012534
 800ee78:	24005f60 	.word	0x24005f60
 800ee7c:	08012548 	.word	0x08012548
 800ee80:	08012550 	.word	0x08012550
 800ee84:	08012554 	.word	0x08012554
 800ee88:	0801255c 	.word	0x0801255c
 800ee8c:	42c80000 	.word	0x42c80000
 800ee90:	00000000 	.word	0x00000000
 800ee94:	24005f64 	.word	0x24005f64
 800ee98:	08012564 	.word	0x08012564

0800ee9c <StartDCSampling>:
 * @brief    直流采样
 * @param    *argument
 * @return
 */
void StartDCSampling(void *argument)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
        .devAddr = 0x80U,
    };

    static const INA228_Handle INA228_0 = &INA228_0_state;

    INA228_config(INA228_0); /* 初始化 */
 800eea4:	4b0e      	ldr	r3, [pc, #56]	@ (800eee0 <StartDCSampling+0x44>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7fe faca 	bl	800d442 <INA228_config>
    /* Infinite loop */
    for (;;)
    {
        Udc = INA228_getVBUS_V(INA228_0);
 800eeae:	4b0c      	ldr	r3, [pc, #48]	@ (800eee0 <StartDCSampling+0x44>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7fe fb72 	bl	800d59c <INA228_getVBUS_V>
 800eeb8:	eef0 7a40 	vmov.f32	s15, s0
 800eebc:	4b09      	ldr	r3, [pc, #36]	@ (800eee4 <StartDCSampling+0x48>)
 800eebe:	edc3 7a00 	vstr	s15, [r3]
        Idc = INA228_getCURRENT_A(INA228_0);
 800eec2:	4b07      	ldr	r3, [pc, #28]	@ (800eee0 <StartDCSampling+0x44>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7fe fbec 	bl	800d6a4 <INA228_getCURRENT_A>
 800eecc:	eef0 7a40 	vmov.f32	s15, s0
 800eed0:	4b05      	ldr	r3, [pc, #20]	@ (800eee8 <StartDCSampling+0x4c>)
 800eed2:	edc3 7a00 	vstr	s15, [r3]

        osDelay(10);
 800eed6:	200a      	movs	r0, #10
 800eed8:	f7fb fcfc 	bl	800a8d4 <osDelay>
        Udc = INA228_getVBUS_V(INA228_0);
 800eedc:	bf00      	nop
 800eede:	e7e6      	b.n	800eeae <StartDCSampling+0x12>
 800eee0:	08013e60 	.word	0x08013e60
 800eee4:	24005f68 	.word	0x24005f68
 800eee8:	24005f6c 	.word	0x24005f6c

0800eeec <StartCircuitProtection>:
 * @brief    电路保护控制
 * @param    *argument
 * @return
 */
void StartCircuitProtection(void *argument)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b084      	sub	sp, #16
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN circuitProtection */
    /* Infinite loop */
    for (;;)
    {
        float Uac = signal_V->basic->rms;
 800eef4:	4b60      	ldr	r3, [pc, #384]	@ (800f078 <StartCircuitProtection+0x18c>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	68db      	ldr	r3, [r3, #12]
 800eefc:	60fb      	str	r3, [r7, #12]
        float Iac = signal_I->basic->rms;
 800eefe:	4b5f      	ldr	r3, [pc, #380]	@ (800f07c <StartCircuitProtection+0x190>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	68db      	ldr	r3, [r3, #12]
 800ef06:	60bb      	str	r3, [r7, #8]

        if (Udc > protection_Udc || fabsf(Idc) > protection_Idc || Uac > protection_Uac || Iac > protection_Iac)
 800ef08:	4b5d      	ldr	r3, [pc, #372]	@ (800f080 <StartCircuitProtection+0x194>)
 800ef0a:	edd3 7a00 	vldr	s15, [r3]
 800ef0e:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800f084 <StartCircuitProtection+0x198>
 800ef12:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ef16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef1a:	dc1d      	bgt.n	800ef58 <StartCircuitProtection+0x6c>
 800ef1c:	4b5a      	ldr	r3, [pc, #360]	@ (800f088 <StartCircuitProtection+0x19c>)
 800ef1e:	edd3 7a00 	vldr	s15, [r3]
 800ef22:	eef0 7ae7 	vabs.f32	s15, s15
 800ef26:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800ef2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ef2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef32:	dc11      	bgt.n	800ef58 <StartCircuitProtection+0x6c>
 800ef34:	edd7 7a03 	vldr	s15, [r7, #12]
 800ef38:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800ef3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ef40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef44:	dc08      	bgt.n	800ef58 <StartCircuitProtection+0x6c>
 800ef46:	edd7 7a02 	vldr	s15, [r7, #8]
 800ef4a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800ef4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ef52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef56:	dd35      	ble.n	800efc4 <StartCircuitProtection+0xd8>
        {
            osDelay(100);
 800ef58:	2064      	movs	r0, #100	@ 0x64
 800ef5a:	f7fb fcbb 	bl	800a8d4 <osDelay>
            if (Udc > protection_Udc || fabsf(Idc) > protection_Idc || Uac > protection_Uac || Iac > protection_Iac)
 800ef5e:	4b48      	ldr	r3, [pc, #288]	@ (800f080 <StartCircuitProtection+0x194>)
 800ef60:	edd3 7a00 	vldr	s15, [r3]
 800ef64:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800f084 <StartCircuitProtection+0x198>
 800ef68:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ef6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef70:	dc1e      	bgt.n	800efb0 <StartCircuitProtection+0xc4>
 800ef72:	4b45      	ldr	r3, [pc, #276]	@ (800f088 <StartCircuitProtection+0x19c>)
 800ef74:	edd3 7a00 	vldr	s15, [r3]
 800ef78:	eef0 7ae7 	vabs.f32	s15, s15
 800ef7c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800ef80:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ef84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef88:	dc12      	bgt.n	800efb0 <StartCircuitProtection+0xc4>
 800ef8a:	edd7 7a03 	vldr	s15, [r7, #12]
 800ef8e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800ef92:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ef96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef9a:	dc09      	bgt.n	800efb0 <StartCircuitProtection+0xc4>
 800ef9c:	edd7 7a02 	vldr	s15, [r7, #8]
 800efa0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800efa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800efa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efac:	dc00      	bgt.n	800efb0 <StartCircuitProtection+0xc4>
 800efae:	e05e      	b.n	800f06e <StartCircuitProtection+0x182>
            {
                deviceState = FAULT;
 800efb0:	4b36      	ldr	r3, [pc, #216]	@ (800f08c <StartCircuitProtection+0x1a0>)
 800efb2:	2202      	movs	r2, #2
 800efb4:	701a      	strb	r2, [r3, #0]

                HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_RESET); /* 关闭输出 */
 800efb6:	2200      	movs	r2, #0
 800efb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800efbc:	4834      	ldr	r0, [pc, #208]	@ (800f090 <StartCircuitProtection+0x1a4>)
 800efbe:	f7f4 fe5b 	bl	8003c78 <HAL_GPIO_WritePin>
            if (Udc > protection_Udc || fabsf(Idc) > protection_Idc || Uac > protection_Uac || Iac > protection_Iac)
 800efc2:	e054      	b.n	800f06e <StartCircuitProtection+0x182>
            }
        }
        else if (deviceState == START && Uac > 10.f && Iac > 0.5f && fabsf(signal_V->basic->park_q) < 0.02f)
 800efc4:	4b31      	ldr	r3, [pc, #196]	@ (800f08c <StartCircuitProtection+0x1a0>)
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d150      	bne.n	800f06e <StartCircuitProtection+0x182>
 800efcc:	edd7 7a03 	vldr	s15, [r7, #12]
 800efd0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800efd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800efd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efdc:	dd47      	ble.n	800f06e <StartCircuitProtection+0x182>
 800efde:	edd7 7a02 	vldr	s15, [r7, #8]
 800efe2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800efe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800efea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efee:	dd3e      	ble.n	800f06e <StartCircuitProtection+0x182>
 800eff0:	4b21      	ldr	r3, [pc, #132]	@ (800f078 <StartCircuitProtection+0x18c>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	edd3 7a06 	vldr	s15, [r3, #24]
 800effa:	eef0 7ae7 	vabs.f32	s15, s15
 800effe:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800f094 <StartCircuitProtection+0x1a8>
 800f002:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f00a:	d530      	bpl.n	800f06e <StartCircuitProtection+0x182>
        {
            osDelay(500); /* 防止误判 */
 800f00c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800f010:	f7fb fc60 	bl	800a8d4 <osDelay>
            if (deviceState == START && Uac > 10.f && Iac > 0.5f && fabsf(signal_V->basic->park_q) < 0.02f)
 800f014:	4b1d      	ldr	r3, [pc, #116]	@ (800f08c <StartCircuitProtection+0x1a0>)
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d128      	bne.n	800f06e <StartCircuitProtection+0x182>
 800f01c:	edd7 7a03 	vldr	s15, [r7, #12]
 800f020:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800f024:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f02c:	dd1f      	ble.n	800f06e <StartCircuitProtection+0x182>
 800f02e:	edd7 7a02 	vldr	s15, [r7, #8]
 800f032:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f03e:	dd16      	ble.n	800f06e <StartCircuitProtection+0x182>
 800f040:	4b0d      	ldr	r3, [pc, #52]	@ (800f078 <StartCircuitProtection+0x18c>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	edd3 7a06 	vldr	s15, [r3, #24]
 800f04a:	eef0 7ae7 	vabs.f32	s15, s15
 800f04e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800f094 <StartCircuitProtection+0x1a8>
 800f052:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f05a:	d508      	bpl.n	800f06e <StartCircuitProtection+0x182>
            {
                deviceState = RUN;
 800f05c:	4b0b      	ldr	r3, [pc, #44]	@ (800f08c <StartCircuitProtection+0x1a0>)
 800f05e:	2201      	movs	r2, #1
 800f060:	701a      	strb	r2, [r3, #0]

                HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_SET); /* 打开输出 */
 800f062:	2201      	movs	r2, #1
 800f064:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f068:	4809      	ldr	r0, [pc, #36]	@ (800f090 <StartCircuitProtection+0x1a4>)
 800f06a:	f7f4 fe05 	bl	8003c78 <HAL_GPIO_WritePin>
            }
        }

        osDelay(10);
 800f06e:	200a      	movs	r0, #10
 800f070:	f7fb fc30 	bl	800a8d4 <osDelay>
    {
 800f074:	e73e      	b.n	800eef4 <StartCircuitProtection+0x8>
 800f076:	bf00      	nop
 800f078:	240052d4 	.word	0x240052d4
 800f07c:	240052d8 	.word	0x240052d8
 800f080:	24005f68 	.word	0x24005f68
 800f084:	42a00000 	.word	0x42a00000
 800f088:	24005f6c 	.word	0x24005f6c
 800f08c:	24005f60 	.word	0x24005f60
 800f090:	58020000 	.word	0x58020000
 800f094:	3ca3d70a 	.word	0x3ca3d70a

0800f098 <StartDCControl>:
 * @brief    直流电压控制
 * @param    *argument
 * @return
 */
void StartDCControl(void *argument)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b082      	sub	sp, #8
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN dcControl */
    static PID pidDCV;
    pid_Init(&pidDCV, 0.1f, 0.01f, 0, 2.2f, 0.0f);
 800f0a0:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 800f0ec <StartDCControl+0x54>
 800f0a4:	eddf 1a12 	vldr	s3, [pc, #72]	@ 800f0f0 <StartDCControl+0x58>
 800f0a8:	ed9f 1a10 	vldr	s2, [pc, #64]	@ 800f0ec <StartDCControl+0x54>
 800f0ac:	eddf 0a11 	vldr	s1, [pc, #68]	@ 800f0f4 <StartDCControl+0x5c>
 800f0b0:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 800f0f8 <StartDCControl+0x60>
 800f0b4:	4811      	ldr	r0, [pc, #68]	@ (800f0fc <StartDCControl+0x64>)
 800f0b6:	f7fe fd71 	bl	800db9c <pid_Init>
    /* Infinite loop */
    for (;;)
    {
        if (deviceState == RUN)
 800f0ba:	4b11      	ldr	r3, [pc, #68]	@ (800f100 <StartDCControl+0x68>)
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	2b01      	cmp	r3, #1
 800f0c0:	d110      	bne.n	800f0e4 <StartDCControl+0x4c>
        {
            pid(&pidDCV, Utarget, Udc);
 800f0c2:	4b10      	ldr	r3, [pc, #64]	@ (800f104 <StartDCControl+0x6c>)
 800f0c4:	edd3 7a00 	vldr	s15, [r3]
 800f0c8:	4b0f      	ldr	r3, [pc, #60]	@ (800f108 <StartDCControl+0x70>)
 800f0ca:	ed93 7a00 	vldr	s14, [r3]
 800f0ce:	eef0 0a47 	vmov.f32	s1, s14
 800f0d2:	eeb0 0a67 	vmov.f32	s0, s15
 800f0d6:	4809      	ldr	r0, [pc, #36]	@ (800f0fc <StartDCControl+0x64>)
 800f0d8:	f7fe fd93 	bl	800dc02 <pid>
            Itarget = pidDCV.out;
 800f0dc:	4b07      	ldr	r3, [pc, #28]	@ (800f0fc <StartDCControl+0x64>)
 800f0de:	699b      	ldr	r3, [r3, #24]
 800f0e0:	4a0a      	ldr	r2, [pc, #40]	@ (800f10c <StartDCControl+0x74>)
 800f0e2:	6013      	str	r3, [r2, #0]
        }

        osDelay(20);
 800f0e4:	2014      	movs	r0, #20
 800f0e6:	f7fb fbf5 	bl	800a8d4 <osDelay>
        if (deviceState == RUN)
 800f0ea:	e7e6      	b.n	800f0ba <StartDCControl+0x22>
 800f0ec:	00000000 	.word	0x00000000
 800f0f0:	400ccccd 	.word	0x400ccccd
 800f0f4:	3c23d70a 	.word	0x3c23d70a
 800f0f8:	3dcccccd 	.word	0x3dcccccd
 800f0fc:	24005f70 	.word	0x24005f70
 800f100:	24005f60 	.word	0x24005f60
 800f104:	24000014 	.word	0x24000014
 800f108:	24005f68 	.word	0x24005f68
 800f10c:	24000018 	.word	0x24000018

0800f110 <arm_rms_f32>:
 800f110:	b530      	push	{r4, r5, lr}
 800f112:	088d      	lsrs	r5, r1, #2
 800f114:	ed2d 8b02 	vpush	{d8}
 800f118:	b083      	sub	sp, #12
 800f11a:	d054      	beq.n	800f1c6 <arm_rms_f32+0xb6>
 800f11c:	f100 0310 	add.w	r3, r0, #16
 800f120:	462c      	mov	r4, r5
 800f122:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800f1dc <arm_rms_f32+0xcc>
 800f126:	ed53 6a04 	vldr	s13, [r3, #-16]
 800f12a:	3c01      	subs	r4, #1
 800f12c:	ed13 7a03 	vldr	s14, [r3, #-12]
 800f130:	f103 0310 	add.w	r3, r3, #16
 800f134:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800f138:	ed53 7a06 	vldr	s15, [r3, #-24]	@ 0xffffffe8
 800f13c:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f140:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 800f144:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f148:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800f14c:	ee26 6a06 	vmul.f32	s12, s12, s12
 800f150:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f154:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f158:	ee76 5a27 	vadd.f32	s11, s12, s15
 800f15c:	d1e3      	bne.n	800f126 <arm_rms_f32+0x16>
 800f15e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800f162:	f011 0303 	ands.w	r3, r1, #3
 800f166:	d015      	beq.n	800f194 <arm_rms_f32+0x84>
 800f168:	edd0 7a00 	vldr	s15, [r0]
 800f16c:	3b01      	subs	r3, #1
 800f16e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f172:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800f176:	d00d      	beq.n	800f194 <arm_rms_f32+0x84>
 800f178:	edd0 7a01 	vldr	s15, [r0, #4]
 800f17c:	2b01      	cmp	r3, #1
 800f17e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f182:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800f186:	d005      	beq.n	800f194 <arm_rms_f32+0x84>
 800f188:	edd0 7a02 	vldr	s15, [r0, #8]
 800f18c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f190:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800f194:	ee07 1a90 	vmov	s15, r1
 800f198:	2300      	movs	r3, #0
 800f19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f19e:	ee85 0aa7 	vdiv.f32	s0, s11, s15
 800f1a2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1aa:	db0f      	blt.n	800f1cc <arm_rms_f32+0xbc>
 800f1ac:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f1b0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800f1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1b8:	d40a      	bmi.n	800f1d0 <arm_rms_f32+0xc0>
 800f1ba:	ed82 8a00 	vstr	s16, [r2]
 800f1be:	b003      	add	sp, #12
 800f1c0:	ecbd 8b02 	vpop	{d8}
 800f1c4:	bd30      	pop	{r4, r5, pc}
 800f1c6:	eddf 5a05 	vldr	s11, [pc, #20]	@ 800f1dc <arm_rms_f32+0xcc>
 800f1ca:	e7ca      	b.n	800f162 <arm_rms_f32+0x52>
 800f1cc:	6013      	str	r3, [r2, #0]
 800f1ce:	e7f6      	b.n	800f1be <arm_rms_f32+0xae>
 800f1d0:	9201      	str	r2, [sp, #4]
 800f1d2:	f002 fed1 	bl	8011f78 <sqrtf>
 800f1d6:	9a01      	ldr	r2, [sp, #4]
 800f1d8:	e7ef      	b.n	800f1ba <arm_rms_f32+0xaa>
 800f1da:	bf00      	nop
 800f1dc:	00000000 	.word	0x00000000

0800f1e0 <arm_sin_f32>:
 800f1e0:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800f260 <arm_sin_f32+0x80>
 800f1e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f1e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f1ec:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1f4:	d504      	bpl.n	800f200 <arm_sin_f32+0x20>
 800f1f6:	ee17 3a90 	vmov	r3, s15
 800f1fa:	3b01      	subs	r3, #1
 800f1fc:	ee07 3a90 	vmov	s15, r3
 800f200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f204:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800f264 <arm_sin_f32+0x84>
 800f208:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f20c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f210:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800f214:	ee17 3a10 	vmov	r3, s14
 800f218:	b29b      	uxth	r3, r3
 800f21a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f21e:	d21a      	bcs.n	800f256 <arm_sin_f32+0x76>
 800f220:	ee07 3a10 	vmov	s14, r3
 800f224:	1c59      	adds	r1, r3, #1
 800f226:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800f22a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f22e:	4a0e      	ldr	r2, [pc, #56]	@ (800f268 <arm_sin_f32+0x88>)
 800f230:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f234:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f238:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f23c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f240:	edd3 6a00 	vldr	s13, [r3]
 800f244:	ed92 7a00 	vldr	s14, [r2]
 800f248:	ee20 0a26 	vmul.f32	s0, s0, s13
 800f24c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f250:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f254:	4770      	bx	lr
 800f256:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f25a:	2101      	movs	r1, #1
 800f25c:	2300      	movs	r3, #0
 800f25e:	e7e6      	b.n	800f22e <arm_sin_f32+0x4e>
 800f260:	3e22f983 	.word	0x3e22f983
 800f264:	44000000 	.word	0x44000000
 800f268:	08013e64 	.word	0x08013e64

0800f26c <arm_cos_f32>:
 800f26c:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800f2f4 <arm_cos_f32+0x88>
 800f270:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800f274:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f278:	ee30 0a07 	vadd.f32	s0, s0, s14
 800f27c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f280:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f288:	d504      	bpl.n	800f294 <arm_cos_f32+0x28>
 800f28a:	ee17 3a90 	vmov	r3, s15
 800f28e:	3b01      	subs	r3, #1
 800f290:	ee07 3a90 	vmov	s15, r3
 800f294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f298:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800f2f8 <arm_cos_f32+0x8c>
 800f29c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f2a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f2a4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800f2a8:	ee17 3a10 	vmov	r3, s14
 800f2ac:	b29b      	uxth	r3, r3
 800f2ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f2b2:	d21a      	bcs.n	800f2ea <arm_cos_f32+0x7e>
 800f2b4:	ee07 3a10 	vmov	s14, r3
 800f2b8:	1c59      	adds	r1, r3, #1
 800f2ba:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800f2be:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f2c2:	4a0e      	ldr	r2, [pc, #56]	@ (800f2fc <arm_cos_f32+0x90>)
 800f2c4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f2c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f2cc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f2d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f2d4:	edd3 6a00 	vldr	s13, [r3]
 800f2d8:	ed92 7a00 	vldr	s14, [r2]
 800f2dc:	ee20 0a26 	vmul.f32	s0, s0, s13
 800f2e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f2e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f2e8:	4770      	bx	lr
 800f2ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f2ee:	2101      	movs	r1, #1
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	e7e6      	b.n	800f2c2 <arm_cos_f32+0x56>
 800f2f4:	3e22f983 	.word	0x3e22f983
 800f2f8:	44000000 	.word	0x44000000
 800f2fc:	08013e64 	.word	0x08013e64

0800f300 <malloc>:
 800f300:	4b02      	ldr	r3, [pc, #8]	@ (800f30c <malloc+0xc>)
 800f302:	4601      	mov	r1, r0
 800f304:	6818      	ldr	r0, [r3, #0]
 800f306:	f000 b825 	b.w	800f354 <_malloc_r>
 800f30a:	bf00      	nop
 800f30c:	2400004c 	.word	0x2400004c

0800f310 <sbrk_aligned>:
 800f310:	b570      	push	{r4, r5, r6, lr}
 800f312:	4e0f      	ldr	r6, [pc, #60]	@ (800f350 <sbrk_aligned+0x40>)
 800f314:	460c      	mov	r4, r1
 800f316:	6831      	ldr	r1, [r6, #0]
 800f318:	4605      	mov	r5, r0
 800f31a:	b911      	cbnz	r1, 800f322 <sbrk_aligned+0x12>
 800f31c:	f000 fe56 	bl	800ffcc <_sbrk_r>
 800f320:	6030      	str	r0, [r6, #0]
 800f322:	4621      	mov	r1, r4
 800f324:	4628      	mov	r0, r5
 800f326:	f000 fe51 	bl	800ffcc <_sbrk_r>
 800f32a:	1c43      	adds	r3, r0, #1
 800f32c:	d103      	bne.n	800f336 <sbrk_aligned+0x26>
 800f32e:	f04f 34ff 	mov.w	r4, #4294967295
 800f332:	4620      	mov	r0, r4
 800f334:	bd70      	pop	{r4, r5, r6, pc}
 800f336:	1cc4      	adds	r4, r0, #3
 800f338:	f024 0403 	bic.w	r4, r4, #3
 800f33c:	42a0      	cmp	r0, r4
 800f33e:	d0f8      	beq.n	800f332 <sbrk_aligned+0x22>
 800f340:	1a21      	subs	r1, r4, r0
 800f342:	4628      	mov	r0, r5
 800f344:	f000 fe42 	bl	800ffcc <_sbrk_r>
 800f348:	3001      	adds	r0, #1
 800f34a:	d1f2      	bne.n	800f332 <sbrk_aligned+0x22>
 800f34c:	e7ef      	b.n	800f32e <sbrk_aligned+0x1e>
 800f34e:	bf00      	nop
 800f350:	24005f94 	.word	0x24005f94

0800f354 <_malloc_r>:
 800f354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f358:	1ccd      	adds	r5, r1, #3
 800f35a:	f025 0503 	bic.w	r5, r5, #3
 800f35e:	3508      	adds	r5, #8
 800f360:	2d0c      	cmp	r5, #12
 800f362:	bf38      	it	cc
 800f364:	250c      	movcc	r5, #12
 800f366:	2d00      	cmp	r5, #0
 800f368:	4606      	mov	r6, r0
 800f36a:	db01      	blt.n	800f370 <_malloc_r+0x1c>
 800f36c:	42a9      	cmp	r1, r5
 800f36e:	d904      	bls.n	800f37a <_malloc_r+0x26>
 800f370:	230c      	movs	r3, #12
 800f372:	6033      	str	r3, [r6, #0]
 800f374:	2000      	movs	r0, #0
 800f376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f37a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f450 <_malloc_r+0xfc>
 800f37e:	f000 f869 	bl	800f454 <__malloc_lock>
 800f382:	f8d8 3000 	ldr.w	r3, [r8]
 800f386:	461c      	mov	r4, r3
 800f388:	bb44      	cbnz	r4, 800f3dc <_malloc_r+0x88>
 800f38a:	4629      	mov	r1, r5
 800f38c:	4630      	mov	r0, r6
 800f38e:	f7ff ffbf 	bl	800f310 <sbrk_aligned>
 800f392:	1c43      	adds	r3, r0, #1
 800f394:	4604      	mov	r4, r0
 800f396:	d158      	bne.n	800f44a <_malloc_r+0xf6>
 800f398:	f8d8 4000 	ldr.w	r4, [r8]
 800f39c:	4627      	mov	r7, r4
 800f39e:	2f00      	cmp	r7, #0
 800f3a0:	d143      	bne.n	800f42a <_malloc_r+0xd6>
 800f3a2:	2c00      	cmp	r4, #0
 800f3a4:	d04b      	beq.n	800f43e <_malloc_r+0xea>
 800f3a6:	6823      	ldr	r3, [r4, #0]
 800f3a8:	4639      	mov	r1, r7
 800f3aa:	4630      	mov	r0, r6
 800f3ac:	eb04 0903 	add.w	r9, r4, r3
 800f3b0:	f000 fe0c 	bl	800ffcc <_sbrk_r>
 800f3b4:	4581      	cmp	r9, r0
 800f3b6:	d142      	bne.n	800f43e <_malloc_r+0xea>
 800f3b8:	6821      	ldr	r1, [r4, #0]
 800f3ba:	1a6d      	subs	r5, r5, r1
 800f3bc:	4629      	mov	r1, r5
 800f3be:	4630      	mov	r0, r6
 800f3c0:	f7ff ffa6 	bl	800f310 <sbrk_aligned>
 800f3c4:	3001      	adds	r0, #1
 800f3c6:	d03a      	beq.n	800f43e <_malloc_r+0xea>
 800f3c8:	6823      	ldr	r3, [r4, #0]
 800f3ca:	442b      	add	r3, r5
 800f3cc:	6023      	str	r3, [r4, #0]
 800f3ce:	f8d8 3000 	ldr.w	r3, [r8]
 800f3d2:	685a      	ldr	r2, [r3, #4]
 800f3d4:	bb62      	cbnz	r2, 800f430 <_malloc_r+0xdc>
 800f3d6:	f8c8 7000 	str.w	r7, [r8]
 800f3da:	e00f      	b.n	800f3fc <_malloc_r+0xa8>
 800f3dc:	6822      	ldr	r2, [r4, #0]
 800f3de:	1b52      	subs	r2, r2, r5
 800f3e0:	d420      	bmi.n	800f424 <_malloc_r+0xd0>
 800f3e2:	2a0b      	cmp	r2, #11
 800f3e4:	d917      	bls.n	800f416 <_malloc_r+0xc2>
 800f3e6:	1961      	adds	r1, r4, r5
 800f3e8:	42a3      	cmp	r3, r4
 800f3ea:	6025      	str	r5, [r4, #0]
 800f3ec:	bf18      	it	ne
 800f3ee:	6059      	strne	r1, [r3, #4]
 800f3f0:	6863      	ldr	r3, [r4, #4]
 800f3f2:	bf08      	it	eq
 800f3f4:	f8c8 1000 	streq.w	r1, [r8]
 800f3f8:	5162      	str	r2, [r4, r5]
 800f3fa:	604b      	str	r3, [r1, #4]
 800f3fc:	4630      	mov	r0, r6
 800f3fe:	f000 f82f 	bl	800f460 <__malloc_unlock>
 800f402:	f104 000b 	add.w	r0, r4, #11
 800f406:	1d23      	adds	r3, r4, #4
 800f408:	f020 0007 	bic.w	r0, r0, #7
 800f40c:	1ac2      	subs	r2, r0, r3
 800f40e:	bf1c      	itt	ne
 800f410:	1a1b      	subne	r3, r3, r0
 800f412:	50a3      	strne	r3, [r4, r2]
 800f414:	e7af      	b.n	800f376 <_malloc_r+0x22>
 800f416:	6862      	ldr	r2, [r4, #4]
 800f418:	42a3      	cmp	r3, r4
 800f41a:	bf0c      	ite	eq
 800f41c:	f8c8 2000 	streq.w	r2, [r8]
 800f420:	605a      	strne	r2, [r3, #4]
 800f422:	e7eb      	b.n	800f3fc <_malloc_r+0xa8>
 800f424:	4623      	mov	r3, r4
 800f426:	6864      	ldr	r4, [r4, #4]
 800f428:	e7ae      	b.n	800f388 <_malloc_r+0x34>
 800f42a:	463c      	mov	r4, r7
 800f42c:	687f      	ldr	r7, [r7, #4]
 800f42e:	e7b6      	b.n	800f39e <_malloc_r+0x4a>
 800f430:	461a      	mov	r2, r3
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	42a3      	cmp	r3, r4
 800f436:	d1fb      	bne.n	800f430 <_malloc_r+0xdc>
 800f438:	2300      	movs	r3, #0
 800f43a:	6053      	str	r3, [r2, #4]
 800f43c:	e7de      	b.n	800f3fc <_malloc_r+0xa8>
 800f43e:	230c      	movs	r3, #12
 800f440:	6033      	str	r3, [r6, #0]
 800f442:	4630      	mov	r0, r6
 800f444:	f000 f80c 	bl	800f460 <__malloc_unlock>
 800f448:	e794      	b.n	800f374 <_malloc_r+0x20>
 800f44a:	6005      	str	r5, [r0, #0]
 800f44c:	e7d6      	b.n	800f3fc <_malloc_r+0xa8>
 800f44e:	bf00      	nop
 800f450:	24005f98 	.word	0x24005f98

0800f454 <__malloc_lock>:
 800f454:	4801      	ldr	r0, [pc, #4]	@ (800f45c <__malloc_lock+0x8>)
 800f456:	f000 be06 	b.w	8010066 <__retarget_lock_acquire_recursive>
 800f45a:	bf00      	nop
 800f45c:	240060dc 	.word	0x240060dc

0800f460 <__malloc_unlock>:
 800f460:	4801      	ldr	r0, [pc, #4]	@ (800f468 <__malloc_unlock+0x8>)
 800f462:	f000 be01 	b.w	8010068 <__retarget_lock_release_recursive>
 800f466:	bf00      	nop
 800f468:	240060dc 	.word	0x240060dc

0800f46c <__cvt>:
 800f46c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f46e:	ed2d 8b02 	vpush	{d8}
 800f472:	eeb0 8b40 	vmov.f64	d8, d0
 800f476:	b085      	sub	sp, #20
 800f478:	4617      	mov	r7, r2
 800f47a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800f47c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f47e:	ee18 2a90 	vmov	r2, s17
 800f482:	f025 0520 	bic.w	r5, r5, #32
 800f486:	2a00      	cmp	r2, #0
 800f488:	bfb6      	itet	lt
 800f48a:	222d      	movlt	r2, #45	@ 0x2d
 800f48c:	2200      	movge	r2, #0
 800f48e:	eeb1 8b40 	vneglt.f64	d8, d0
 800f492:	2d46      	cmp	r5, #70	@ 0x46
 800f494:	460c      	mov	r4, r1
 800f496:	701a      	strb	r2, [r3, #0]
 800f498:	d004      	beq.n	800f4a4 <__cvt+0x38>
 800f49a:	2d45      	cmp	r5, #69	@ 0x45
 800f49c:	d100      	bne.n	800f4a0 <__cvt+0x34>
 800f49e:	3401      	adds	r4, #1
 800f4a0:	2102      	movs	r1, #2
 800f4a2:	e000      	b.n	800f4a6 <__cvt+0x3a>
 800f4a4:	2103      	movs	r1, #3
 800f4a6:	ab03      	add	r3, sp, #12
 800f4a8:	9301      	str	r3, [sp, #4]
 800f4aa:	ab02      	add	r3, sp, #8
 800f4ac:	9300      	str	r3, [sp, #0]
 800f4ae:	4622      	mov	r2, r4
 800f4b0:	4633      	mov	r3, r6
 800f4b2:	eeb0 0b48 	vmov.f64	d0, d8
 800f4b6:	f000 fe6f 	bl	8010198 <_dtoa_r>
 800f4ba:	2d47      	cmp	r5, #71	@ 0x47
 800f4bc:	d114      	bne.n	800f4e8 <__cvt+0x7c>
 800f4be:	07fb      	lsls	r3, r7, #31
 800f4c0:	d50a      	bpl.n	800f4d8 <__cvt+0x6c>
 800f4c2:	1902      	adds	r2, r0, r4
 800f4c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4cc:	bf08      	it	eq
 800f4ce:	9203      	streq	r2, [sp, #12]
 800f4d0:	2130      	movs	r1, #48	@ 0x30
 800f4d2:	9b03      	ldr	r3, [sp, #12]
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	d319      	bcc.n	800f50c <__cvt+0xa0>
 800f4d8:	9b03      	ldr	r3, [sp, #12]
 800f4da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4dc:	1a1b      	subs	r3, r3, r0
 800f4de:	6013      	str	r3, [r2, #0]
 800f4e0:	b005      	add	sp, #20
 800f4e2:	ecbd 8b02 	vpop	{d8}
 800f4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4e8:	2d46      	cmp	r5, #70	@ 0x46
 800f4ea:	eb00 0204 	add.w	r2, r0, r4
 800f4ee:	d1e9      	bne.n	800f4c4 <__cvt+0x58>
 800f4f0:	7803      	ldrb	r3, [r0, #0]
 800f4f2:	2b30      	cmp	r3, #48	@ 0x30
 800f4f4:	d107      	bne.n	800f506 <__cvt+0x9a>
 800f4f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4fe:	bf1c      	itt	ne
 800f500:	f1c4 0401 	rsbne	r4, r4, #1
 800f504:	6034      	strne	r4, [r6, #0]
 800f506:	6833      	ldr	r3, [r6, #0]
 800f508:	441a      	add	r2, r3
 800f50a:	e7db      	b.n	800f4c4 <__cvt+0x58>
 800f50c:	1c5c      	adds	r4, r3, #1
 800f50e:	9403      	str	r4, [sp, #12]
 800f510:	7019      	strb	r1, [r3, #0]
 800f512:	e7de      	b.n	800f4d2 <__cvt+0x66>

0800f514 <__exponent>:
 800f514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f516:	2900      	cmp	r1, #0
 800f518:	bfba      	itte	lt
 800f51a:	4249      	neglt	r1, r1
 800f51c:	232d      	movlt	r3, #45	@ 0x2d
 800f51e:	232b      	movge	r3, #43	@ 0x2b
 800f520:	2909      	cmp	r1, #9
 800f522:	7002      	strb	r2, [r0, #0]
 800f524:	7043      	strb	r3, [r0, #1]
 800f526:	dd29      	ble.n	800f57c <__exponent+0x68>
 800f528:	f10d 0307 	add.w	r3, sp, #7
 800f52c:	461d      	mov	r5, r3
 800f52e:	270a      	movs	r7, #10
 800f530:	461a      	mov	r2, r3
 800f532:	fbb1 f6f7 	udiv	r6, r1, r7
 800f536:	fb07 1416 	mls	r4, r7, r6, r1
 800f53a:	3430      	adds	r4, #48	@ 0x30
 800f53c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f540:	460c      	mov	r4, r1
 800f542:	2c63      	cmp	r4, #99	@ 0x63
 800f544:	f103 33ff 	add.w	r3, r3, #4294967295
 800f548:	4631      	mov	r1, r6
 800f54a:	dcf1      	bgt.n	800f530 <__exponent+0x1c>
 800f54c:	3130      	adds	r1, #48	@ 0x30
 800f54e:	1e94      	subs	r4, r2, #2
 800f550:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f554:	1c41      	adds	r1, r0, #1
 800f556:	4623      	mov	r3, r4
 800f558:	42ab      	cmp	r3, r5
 800f55a:	d30a      	bcc.n	800f572 <__exponent+0x5e>
 800f55c:	f10d 0309 	add.w	r3, sp, #9
 800f560:	1a9b      	subs	r3, r3, r2
 800f562:	42ac      	cmp	r4, r5
 800f564:	bf88      	it	hi
 800f566:	2300      	movhi	r3, #0
 800f568:	3302      	adds	r3, #2
 800f56a:	4403      	add	r3, r0
 800f56c:	1a18      	subs	r0, r3, r0
 800f56e:	b003      	add	sp, #12
 800f570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f572:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f576:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f57a:	e7ed      	b.n	800f558 <__exponent+0x44>
 800f57c:	2330      	movs	r3, #48	@ 0x30
 800f57e:	3130      	adds	r1, #48	@ 0x30
 800f580:	7083      	strb	r3, [r0, #2]
 800f582:	70c1      	strb	r1, [r0, #3]
 800f584:	1d03      	adds	r3, r0, #4
 800f586:	e7f1      	b.n	800f56c <__exponent+0x58>

0800f588 <_printf_float>:
 800f588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f58c:	b08d      	sub	sp, #52	@ 0x34
 800f58e:	460c      	mov	r4, r1
 800f590:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f594:	4616      	mov	r6, r2
 800f596:	461f      	mov	r7, r3
 800f598:	4605      	mov	r5, r0
 800f59a:	f000 fcdf 	bl	800ff5c <_localeconv_r>
 800f59e:	f8d0 b000 	ldr.w	fp, [r0]
 800f5a2:	4658      	mov	r0, fp
 800f5a4:	f7f0 feec 	bl	8000380 <strlen>
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800f5ac:	f8d8 3000 	ldr.w	r3, [r8]
 800f5b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f5b4:	6822      	ldr	r2, [r4, #0]
 800f5b6:	9005      	str	r0, [sp, #20]
 800f5b8:	3307      	adds	r3, #7
 800f5ba:	f023 0307 	bic.w	r3, r3, #7
 800f5be:	f103 0108 	add.w	r1, r3, #8
 800f5c2:	f8c8 1000 	str.w	r1, [r8]
 800f5c6:	ed93 0b00 	vldr	d0, [r3]
 800f5ca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800f828 <_printf_float+0x2a0>
 800f5ce:	eeb0 7bc0 	vabs.f64	d7, d0
 800f5d2:	eeb4 7b46 	vcmp.f64	d7, d6
 800f5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5da:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800f5de:	dd24      	ble.n	800f62a <_printf_float+0xa2>
 800f5e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5e8:	d502      	bpl.n	800f5f0 <_printf_float+0x68>
 800f5ea:	232d      	movs	r3, #45	@ 0x2d
 800f5ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f5f0:	498f      	ldr	r1, [pc, #572]	@ (800f830 <_printf_float+0x2a8>)
 800f5f2:	4b90      	ldr	r3, [pc, #576]	@ (800f834 <_printf_float+0x2ac>)
 800f5f4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800f5f8:	bf94      	ite	ls
 800f5fa:	4688      	movls	r8, r1
 800f5fc:	4698      	movhi	r8, r3
 800f5fe:	f022 0204 	bic.w	r2, r2, #4
 800f602:	2303      	movs	r3, #3
 800f604:	6123      	str	r3, [r4, #16]
 800f606:	6022      	str	r2, [r4, #0]
 800f608:	f04f 0a00 	mov.w	sl, #0
 800f60c:	9700      	str	r7, [sp, #0]
 800f60e:	4633      	mov	r3, r6
 800f610:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f612:	4621      	mov	r1, r4
 800f614:	4628      	mov	r0, r5
 800f616:	f000 f9d1 	bl	800f9bc <_printf_common>
 800f61a:	3001      	adds	r0, #1
 800f61c:	f040 8089 	bne.w	800f732 <_printf_float+0x1aa>
 800f620:	f04f 30ff 	mov.w	r0, #4294967295
 800f624:	b00d      	add	sp, #52	@ 0x34
 800f626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f62a:	eeb4 0b40 	vcmp.f64	d0, d0
 800f62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f632:	d709      	bvc.n	800f648 <_printf_float+0xc0>
 800f634:	ee10 3a90 	vmov	r3, s1
 800f638:	2b00      	cmp	r3, #0
 800f63a:	bfbc      	itt	lt
 800f63c:	232d      	movlt	r3, #45	@ 0x2d
 800f63e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f642:	497d      	ldr	r1, [pc, #500]	@ (800f838 <_printf_float+0x2b0>)
 800f644:	4b7d      	ldr	r3, [pc, #500]	@ (800f83c <_printf_float+0x2b4>)
 800f646:	e7d5      	b.n	800f5f4 <_printf_float+0x6c>
 800f648:	6863      	ldr	r3, [r4, #4]
 800f64a:	1c59      	adds	r1, r3, #1
 800f64c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800f650:	d139      	bne.n	800f6c6 <_printf_float+0x13e>
 800f652:	2306      	movs	r3, #6
 800f654:	6063      	str	r3, [r4, #4]
 800f656:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f65a:	2300      	movs	r3, #0
 800f65c:	6022      	str	r2, [r4, #0]
 800f65e:	9303      	str	r3, [sp, #12]
 800f660:	ab0a      	add	r3, sp, #40	@ 0x28
 800f662:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f666:	ab09      	add	r3, sp, #36	@ 0x24
 800f668:	9300      	str	r3, [sp, #0]
 800f66a:	6861      	ldr	r1, [r4, #4]
 800f66c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f670:	4628      	mov	r0, r5
 800f672:	f7ff fefb 	bl	800f46c <__cvt>
 800f676:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f67a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f67c:	4680      	mov	r8, r0
 800f67e:	d129      	bne.n	800f6d4 <_printf_float+0x14c>
 800f680:	1cc8      	adds	r0, r1, #3
 800f682:	db02      	blt.n	800f68a <_printf_float+0x102>
 800f684:	6863      	ldr	r3, [r4, #4]
 800f686:	4299      	cmp	r1, r3
 800f688:	dd41      	ble.n	800f70e <_printf_float+0x186>
 800f68a:	f1a9 0902 	sub.w	r9, r9, #2
 800f68e:	fa5f f989 	uxtb.w	r9, r9
 800f692:	3901      	subs	r1, #1
 800f694:	464a      	mov	r2, r9
 800f696:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f69a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f69c:	f7ff ff3a 	bl	800f514 <__exponent>
 800f6a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f6a2:	1813      	adds	r3, r2, r0
 800f6a4:	2a01      	cmp	r2, #1
 800f6a6:	4682      	mov	sl, r0
 800f6a8:	6123      	str	r3, [r4, #16]
 800f6aa:	dc02      	bgt.n	800f6b2 <_printf_float+0x12a>
 800f6ac:	6822      	ldr	r2, [r4, #0]
 800f6ae:	07d2      	lsls	r2, r2, #31
 800f6b0:	d501      	bpl.n	800f6b6 <_printf_float+0x12e>
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	6123      	str	r3, [r4, #16]
 800f6b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d0a6      	beq.n	800f60c <_printf_float+0x84>
 800f6be:	232d      	movs	r3, #45	@ 0x2d
 800f6c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6c4:	e7a2      	b.n	800f60c <_printf_float+0x84>
 800f6c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f6ca:	d1c4      	bne.n	800f656 <_printf_float+0xce>
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d1c2      	bne.n	800f656 <_printf_float+0xce>
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	e7bf      	b.n	800f654 <_printf_float+0xcc>
 800f6d4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f6d8:	d9db      	bls.n	800f692 <_printf_float+0x10a>
 800f6da:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800f6de:	d118      	bne.n	800f712 <_printf_float+0x18a>
 800f6e0:	2900      	cmp	r1, #0
 800f6e2:	6863      	ldr	r3, [r4, #4]
 800f6e4:	dd0b      	ble.n	800f6fe <_printf_float+0x176>
 800f6e6:	6121      	str	r1, [r4, #16]
 800f6e8:	b913      	cbnz	r3, 800f6f0 <_printf_float+0x168>
 800f6ea:	6822      	ldr	r2, [r4, #0]
 800f6ec:	07d0      	lsls	r0, r2, #31
 800f6ee:	d502      	bpl.n	800f6f6 <_printf_float+0x16e>
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	440b      	add	r3, r1
 800f6f4:	6123      	str	r3, [r4, #16]
 800f6f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f6f8:	f04f 0a00 	mov.w	sl, #0
 800f6fc:	e7db      	b.n	800f6b6 <_printf_float+0x12e>
 800f6fe:	b913      	cbnz	r3, 800f706 <_printf_float+0x17e>
 800f700:	6822      	ldr	r2, [r4, #0]
 800f702:	07d2      	lsls	r2, r2, #31
 800f704:	d501      	bpl.n	800f70a <_printf_float+0x182>
 800f706:	3302      	adds	r3, #2
 800f708:	e7f4      	b.n	800f6f4 <_printf_float+0x16c>
 800f70a:	2301      	movs	r3, #1
 800f70c:	e7f2      	b.n	800f6f4 <_printf_float+0x16c>
 800f70e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800f712:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f714:	4299      	cmp	r1, r3
 800f716:	db05      	blt.n	800f724 <_printf_float+0x19c>
 800f718:	6823      	ldr	r3, [r4, #0]
 800f71a:	6121      	str	r1, [r4, #16]
 800f71c:	07d8      	lsls	r0, r3, #31
 800f71e:	d5ea      	bpl.n	800f6f6 <_printf_float+0x16e>
 800f720:	1c4b      	adds	r3, r1, #1
 800f722:	e7e7      	b.n	800f6f4 <_printf_float+0x16c>
 800f724:	2900      	cmp	r1, #0
 800f726:	bfd4      	ite	le
 800f728:	f1c1 0202 	rsble	r2, r1, #2
 800f72c:	2201      	movgt	r2, #1
 800f72e:	4413      	add	r3, r2
 800f730:	e7e0      	b.n	800f6f4 <_printf_float+0x16c>
 800f732:	6823      	ldr	r3, [r4, #0]
 800f734:	055a      	lsls	r2, r3, #21
 800f736:	d407      	bmi.n	800f748 <_printf_float+0x1c0>
 800f738:	6923      	ldr	r3, [r4, #16]
 800f73a:	4642      	mov	r2, r8
 800f73c:	4631      	mov	r1, r6
 800f73e:	4628      	mov	r0, r5
 800f740:	47b8      	blx	r7
 800f742:	3001      	adds	r0, #1
 800f744:	d12a      	bne.n	800f79c <_printf_float+0x214>
 800f746:	e76b      	b.n	800f620 <_printf_float+0x98>
 800f748:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f74c:	f240 80e0 	bls.w	800f910 <_printf_float+0x388>
 800f750:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f754:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f75c:	d133      	bne.n	800f7c6 <_printf_float+0x23e>
 800f75e:	4a38      	ldr	r2, [pc, #224]	@ (800f840 <_printf_float+0x2b8>)
 800f760:	2301      	movs	r3, #1
 800f762:	4631      	mov	r1, r6
 800f764:	4628      	mov	r0, r5
 800f766:	47b8      	blx	r7
 800f768:	3001      	adds	r0, #1
 800f76a:	f43f af59 	beq.w	800f620 <_printf_float+0x98>
 800f76e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f772:	4543      	cmp	r3, r8
 800f774:	db02      	blt.n	800f77c <_printf_float+0x1f4>
 800f776:	6823      	ldr	r3, [r4, #0]
 800f778:	07d8      	lsls	r0, r3, #31
 800f77a:	d50f      	bpl.n	800f79c <_printf_float+0x214>
 800f77c:	9b05      	ldr	r3, [sp, #20]
 800f77e:	465a      	mov	r2, fp
 800f780:	4631      	mov	r1, r6
 800f782:	4628      	mov	r0, r5
 800f784:	47b8      	blx	r7
 800f786:	3001      	adds	r0, #1
 800f788:	f43f af4a 	beq.w	800f620 <_printf_float+0x98>
 800f78c:	f04f 0900 	mov.w	r9, #0
 800f790:	f108 38ff 	add.w	r8, r8, #4294967295
 800f794:	f104 0a1a 	add.w	sl, r4, #26
 800f798:	45c8      	cmp	r8, r9
 800f79a:	dc09      	bgt.n	800f7b0 <_printf_float+0x228>
 800f79c:	6823      	ldr	r3, [r4, #0]
 800f79e:	079b      	lsls	r3, r3, #30
 800f7a0:	f100 8107 	bmi.w	800f9b2 <_printf_float+0x42a>
 800f7a4:	68e0      	ldr	r0, [r4, #12]
 800f7a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7a8:	4298      	cmp	r0, r3
 800f7aa:	bfb8      	it	lt
 800f7ac:	4618      	movlt	r0, r3
 800f7ae:	e739      	b.n	800f624 <_printf_float+0x9c>
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	4652      	mov	r2, sl
 800f7b4:	4631      	mov	r1, r6
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	47b8      	blx	r7
 800f7ba:	3001      	adds	r0, #1
 800f7bc:	f43f af30 	beq.w	800f620 <_printf_float+0x98>
 800f7c0:	f109 0901 	add.w	r9, r9, #1
 800f7c4:	e7e8      	b.n	800f798 <_printf_float+0x210>
 800f7c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	dc3b      	bgt.n	800f844 <_printf_float+0x2bc>
 800f7cc:	4a1c      	ldr	r2, [pc, #112]	@ (800f840 <_printf_float+0x2b8>)
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	4631      	mov	r1, r6
 800f7d2:	4628      	mov	r0, r5
 800f7d4:	47b8      	blx	r7
 800f7d6:	3001      	adds	r0, #1
 800f7d8:	f43f af22 	beq.w	800f620 <_printf_float+0x98>
 800f7dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f7e0:	ea59 0303 	orrs.w	r3, r9, r3
 800f7e4:	d102      	bne.n	800f7ec <_printf_float+0x264>
 800f7e6:	6823      	ldr	r3, [r4, #0]
 800f7e8:	07d9      	lsls	r1, r3, #31
 800f7ea:	d5d7      	bpl.n	800f79c <_printf_float+0x214>
 800f7ec:	9b05      	ldr	r3, [sp, #20]
 800f7ee:	465a      	mov	r2, fp
 800f7f0:	4631      	mov	r1, r6
 800f7f2:	4628      	mov	r0, r5
 800f7f4:	47b8      	blx	r7
 800f7f6:	3001      	adds	r0, #1
 800f7f8:	f43f af12 	beq.w	800f620 <_printf_float+0x98>
 800f7fc:	f04f 0a00 	mov.w	sl, #0
 800f800:	f104 0b1a 	add.w	fp, r4, #26
 800f804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f806:	425b      	negs	r3, r3
 800f808:	4553      	cmp	r3, sl
 800f80a:	dc01      	bgt.n	800f810 <_printf_float+0x288>
 800f80c:	464b      	mov	r3, r9
 800f80e:	e794      	b.n	800f73a <_printf_float+0x1b2>
 800f810:	2301      	movs	r3, #1
 800f812:	465a      	mov	r2, fp
 800f814:	4631      	mov	r1, r6
 800f816:	4628      	mov	r0, r5
 800f818:	47b8      	blx	r7
 800f81a:	3001      	adds	r0, #1
 800f81c:	f43f af00 	beq.w	800f620 <_printf_float+0x98>
 800f820:	f10a 0a01 	add.w	sl, sl, #1
 800f824:	e7ee      	b.n	800f804 <_printf_float+0x27c>
 800f826:	bf00      	nop
 800f828:	ffffffff 	.word	0xffffffff
 800f82c:	7fefffff 	.word	0x7fefffff
 800f830:	08014668 	.word	0x08014668
 800f834:	0801466c 	.word	0x0801466c
 800f838:	08014670 	.word	0x08014670
 800f83c:	08014674 	.word	0x08014674
 800f840:	08014678 	.word	0x08014678
 800f844:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f846:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f84a:	4553      	cmp	r3, sl
 800f84c:	bfa8      	it	ge
 800f84e:	4653      	movge	r3, sl
 800f850:	2b00      	cmp	r3, #0
 800f852:	4699      	mov	r9, r3
 800f854:	dc37      	bgt.n	800f8c6 <_printf_float+0x33e>
 800f856:	2300      	movs	r3, #0
 800f858:	9307      	str	r3, [sp, #28]
 800f85a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f85e:	f104 021a 	add.w	r2, r4, #26
 800f862:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f864:	9907      	ldr	r1, [sp, #28]
 800f866:	9306      	str	r3, [sp, #24]
 800f868:	eba3 0309 	sub.w	r3, r3, r9
 800f86c:	428b      	cmp	r3, r1
 800f86e:	dc31      	bgt.n	800f8d4 <_printf_float+0x34c>
 800f870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f872:	459a      	cmp	sl, r3
 800f874:	dc3b      	bgt.n	800f8ee <_printf_float+0x366>
 800f876:	6823      	ldr	r3, [r4, #0]
 800f878:	07da      	lsls	r2, r3, #31
 800f87a:	d438      	bmi.n	800f8ee <_printf_float+0x366>
 800f87c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f87e:	ebaa 0903 	sub.w	r9, sl, r3
 800f882:	9b06      	ldr	r3, [sp, #24]
 800f884:	ebaa 0303 	sub.w	r3, sl, r3
 800f888:	4599      	cmp	r9, r3
 800f88a:	bfa8      	it	ge
 800f88c:	4699      	movge	r9, r3
 800f88e:	f1b9 0f00 	cmp.w	r9, #0
 800f892:	dc34      	bgt.n	800f8fe <_printf_float+0x376>
 800f894:	f04f 0800 	mov.w	r8, #0
 800f898:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f89c:	f104 0b1a 	add.w	fp, r4, #26
 800f8a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8a2:	ebaa 0303 	sub.w	r3, sl, r3
 800f8a6:	eba3 0309 	sub.w	r3, r3, r9
 800f8aa:	4543      	cmp	r3, r8
 800f8ac:	f77f af76 	ble.w	800f79c <_printf_float+0x214>
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	465a      	mov	r2, fp
 800f8b4:	4631      	mov	r1, r6
 800f8b6:	4628      	mov	r0, r5
 800f8b8:	47b8      	blx	r7
 800f8ba:	3001      	adds	r0, #1
 800f8bc:	f43f aeb0 	beq.w	800f620 <_printf_float+0x98>
 800f8c0:	f108 0801 	add.w	r8, r8, #1
 800f8c4:	e7ec      	b.n	800f8a0 <_printf_float+0x318>
 800f8c6:	4642      	mov	r2, r8
 800f8c8:	4631      	mov	r1, r6
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	47b8      	blx	r7
 800f8ce:	3001      	adds	r0, #1
 800f8d0:	d1c1      	bne.n	800f856 <_printf_float+0x2ce>
 800f8d2:	e6a5      	b.n	800f620 <_printf_float+0x98>
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	4631      	mov	r1, r6
 800f8d8:	4628      	mov	r0, r5
 800f8da:	9206      	str	r2, [sp, #24]
 800f8dc:	47b8      	blx	r7
 800f8de:	3001      	adds	r0, #1
 800f8e0:	f43f ae9e 	beq.w	800f620 <_printf_float+0x98>
 800f8e4:	9b07      	ldr	r3, [sp, #28]
 800f8e6:	9a06      	ldr	r2, [sp, #24]
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	9307      	str	r3, [sp, #28]
 800f8ec:	e7b9      	b.n	800f862 <_printf_float+0x2da>
 800f8ee:	9b05      	ldr	r3, [sp, #20]
 800f8f0:	465a      	mov	r2, fp
 800f8f2:	4631      	mov	r1, r6
 800f8f4:	4628      	mov	r0, r5
 800f8f6:	47b8      	blx	r7
 800f8f8:	3001      	adds	r0, #1
 800f8fa:	d1bf      	bne.n	800f87c <_printf_float+0x2f4>
 800f8fc:	e690      	b.n	800f620 <_printf_float+0x98>
 800f8fe:	9a06      	ldr	r2, [sp, #24]
 800f900:	464b      	mov	r3, r9
 800f902:	4442      	add	r2, r8
 800f904:	4631      	mov	r1, r6
 800f906:	4628      	mov	r0, r5
 800f908:	47b8      	blx	r7
 800f90a:	3001      	adds	r0, #1
 800f90c:	d1c2      	bne.n	800f894 <_printf_float+0x30c>
 800f90e:	e687      	b.n	800f620 <_printf_float+0x98>
 800f910:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f914:	f1b9 0f01 	cmp.w	r9, #1
 800f918:	dc01      	bgt.n	800f91e <_printf_float+0x396>
 800f91a:	07db      	lsls	r3, r3, #31
 800f91c:	d536      	bpl.n	800f98c <_printf_float+0x404>
 800f91e:	2301      	movs	r3, #1
 800f920:	4642      	mov	r2, r8
 800f922:	4631      	mov	r1, r6
 800f924:	4628      	mov	r0, r5
 800f926:	47b8      	blx	r7
 800f928:	3001      	adds	r0, #1
 800f92a:	f43f ae79 	beq.w	800f620 <_printf_float+0x98>
 800f92e:	9b05      	ldr	r3, [sp, #20]
 800f930:	465a      	mov	r2, fp
 800f932:	4631      	mov	r1, r6
 800f934:	4628      	mov	r0, r5
 800f936:	47b8      	blx	r7
 800f938:	3001      	adds	r0, #1
 800f93a:	f43f ae71 	beq.w	800f620 <_printf_float+0x98>
 800f93e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f942:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f94a:	f109 39ff 	add.w	r9, r9, #4294967295
 800f94e:	d018      	beq.n	800f982 <_printf_float+0x3fa>
 800f950:	464b      	mov	r3, r9
 800f952:	f108 0201 	add.w	r2, r8, #1
 800f956:	4631      	mov	r1, r6
 800f958:	4628      	mov	r0, r5
 800f95a:	47b8      	blx	r7
 800f95c:	3001      	adds	r0, #1
 800f95e:	d10c      	bne.n	800f97a <_printf_float+0x3f2>
 800f960:	e65e      	b.n	800f620 <_printf_float+0x98>
 800f962:	2301      	movs	r3, #1
 800f964:	465a      	mov	r2, fp
 800f966:	4631      	mov	r1, r6
 800f968:	4628      	mov	r0, r5
 800f96a:	47b8      	blx	r7
 800f96c:	3001      	adds	r0, #1
 800f96e:	f43f ae57 	beq.w	800f620 <_printf_float+0x98>
 800f972:	f108 0801 	add.w	r8, r8, #1
 800f976:	45c8      	cmp	r8, r9
 800f978:	dbf3      	blt.n	800f962 <_printf_float+0x3da>
 800f97a:	4653      	mov	r3, sl
 800f97c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f980:	e6dc      	b.n	800f73c <_printf_float+0x1b4>
 800f982:	f04f 0800 	mov.w	r8, #0
 800f986:	f104 0b1a 	add.w	fp, r4, #26
 800f98a:	e7f4      	b.n	800f976 <_printf_float+0x3ee>
 800f98c:	2301      	movs	r3, #1
 800f98e:	4642      	mov	r2, r8
 800f990:	e7e1      	b.n	800f956 <_printf_float+0x3ce>
 800f992:	2301      	movs	r3, #1
 800f994:	464a      	mov	r2, r9
 800f996:	4631      	mov	r1, r6
 800f998:	4628      	mov	r0, r5
 800f99a:	47b8      	blx	r7
 800f99c:	3001      	adds	r0, #1
 800f99e:	f43f ae3f 	beq.w	800f620 <_printf_float+0x98>
 800f9a2:	f108 0801 	add.w	r8, r8, #1
 800f9a6:	68e3      	ldr	r3, [r4, #12]
 800f9a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f9aa:	1a5b      	subs	r3, r3, r1
 800f9ac:	4543      	cmp	r3, r8
 800f9ae:	dcf0      	bgt.n	800f992 <_printf_float+0x40a>
 800f9b0:	e6f8      	b.n	800f7a4 <_printf_float+0x21c>
 800f9b2:	f04f 0800 	mov.w	r8, #0
 800f9b6:	f104 0919 	add.w	r9, r4, #25
 800f9ba:	e7f4      	b.n	800f9a6 <_printf_float+0x41e>

0800f9bc <_printf_common>:
 800f9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9c0:	4616      	mov	r6, r2
 800f9c2:	4698      	mov	r8, r3
 800f9c4:	688a      	ldr	r2, [r1, #8]
 800f9c6:	690b      	ldr	r3, [r1, #16]
 800f9c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	bfb8      	it	lt
 800f9d0:	4613      	movlt	r3, r2
 800f9d2:	6033      	str	r3, [r6, #0]
 800f9d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f9d8:	4607      	mov	r7, r0
 800f9da:	460c      	mov	r4, r1
 800f9dc:	b10a      	cbz	r2, 800f9e2 <_printf_common+0x26>
 800f9de:	3301      	adds	r3, #1
 800f9e0:	6033      	str	r3, [r6, #0]
 800f9e2:	6823      	ldr	r3, [r4, #0]
 800f9e4:	0699      	lsls	r1, r3, #26
 800f9e6:	bf42      	ittt	mi
 800f9e8:	6833      	ldrmi	r3, [r6, #0]
 800f9ea:	3302      	addmi	r3, #2
 800f9ec:	6033      	strmi	r3, [r6, #0]
 800f9ee:	6825      	ldr	r5, [r4, #0]
 800f9f0:	f015 0506 	ands.w	r5, r5, #6
 800f9f4:	d106      	bne.n	800fa04 <_printf_common+0x48>
 800f9f6:	f104 0a19 	add.w	sl, r4, #25
 800f9fa:	68e3      	ldr	r3, [r4, #12]
 800f9fc:	6832      	ldr	r2, [r6, #0]
 800f9fe:	1a9b      	subs	r3, r3, r2
 800fa00:	42ab      	cmp	r3, r5
 800fa02:	dc26      	bgt.n	800fa52 <_printf_common+0x96>
 800fa04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fa08:	6822      	ldr	r2, [r4, #0]
 800fa0a:	3b00      	subs	r3, #0
 800fa0c:	bf18      	it	ne
 800fa0e:	2301      	movne	r3, #1
 800fa10:	0692      	lsls	r2, r2, #26
 800fa12:	d42b      	bmi.n	800fa6c <_printf_common+0xb0>
 800fa14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fa18:	4641      	mov	r1, r8
 800fa1a:	4638      	mov	r0, r7
 800fa1c:	47c8      	blx	r9
 800fa1e:	3001      	adds	r0, #1
 800fa20:	d01e      	beq.n	800fa60 <_printf_common+0xa4>
 800fa22:	6823      	ldr	r3, [r4, #0]
 800fa24:	6922      	ldr	r2, [r4, #16]
 800fa26:	f003 0306 	and.w	r3, r3, #6
 800fa2a:	2b04      	cmp	r3, #4
 800fa2c:	bf02      	ittt	eq
 800fa2e:	68e5      	ldreq	r5, [r4, #12]
 800fa30:	6833      	ldreq	r3, [r6, #0]
 800fa32:	1aed      	subeq	r5, r5, r3
 800fa34:	68a3      	ldr	r3, [r4, #8]
 800fa36:	bf0c      	ite	eq
 800fa38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa3c:	2500      	movne	r5, #0
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	bfc4      	itt	gt
 800fa42:	1a9b      	subgt	r3, r3, r2
 800fa44:	18ed      	addgt	r5, r5, r3
 800fa46:	2600      	movs	r6, #0
 800fa48:	341a      	adds	r4, #26
 800fa4a:	42b5      	cmp	r5, r6
 800fa4c:	d11a      	bne.n	800fa84 <_printf_common+0xc8>
 800fa4e:	2000      	movs	r0, #0
 800fa50:	e008      	b.n	800fa64 <_printf_common+0xa8>
 800fa52:	2301      	movs	r3, #1
 800fa54:	4652      	mov	r2, sl
 800fa56:	4641      	mov	r1, r8
 800fa58:	4638      	mov	r0, r7
 800fa5a:	47c8      	blx	r9
 800fa5c:	3001      	adds	r0, #1
 800fa5e:	d103      	bne.n	800fa68 <_printf_common+0xac>
 800fa60:	f04f 30ff 	mov.w	r0, #4294967295
 800fa64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa68:	3501      	adds	r5, #1
 800fa6a:	e7c6      	b.n	800f9fa <_printf_common+0x3e>
 800fa6c:	18e1      	adds	r1, r4, r3
 800fa6e:	1c5a      	adds	r2, r3, #1
 800fa70:	2030      	movs	r0, #48	@ 0x30
 800fa72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fa76:	4422      	add	r2, r4
 800fa78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fa7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fa80:	3302      	adds	r3, #2
 800fa82:	e7c7      	b.n	800fa14 <_printf_common+0x58>
 800fa84:	2301      	movs	r3, #1
 800fa86:	4622      	mov	r2, r4
 800fa88:	4641      	mov	r1, r8
 800fa8a:	4638      	mov	r0, r7
 800fa8c:	47c8      	blx	r9
 800fa8e:	3001      	adds	r0, #1
 800fa90:	d0e6      	beq.n	800fa60 <_printf_common+0xa4>
 800fa92:	3601      	adds	r6, #1
 800fa94:	e7d9      	b.n	800fa4a <_printf_common+0x8e>
	...

0800fa98 <_printf_i>:
 800fa98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa9c:	7e0f      	ldrb	r7, [r1, #24]
 800fa9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800faa0:	2f78      	cmp	r7, #120	@ 0x78
 800faa2:	4691      	mov	r9, r2
 800faa4:	4680      	mov	r8, r0
 800faa6:	460c      	mov	r4, r1
 800faa8:	469a      	mov	sl, r3
 800faaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800faae:	d807      	bhi.n	800fac0 <_printf_i+0x28>
 800fab0:	2f62      	cmp	r7, #98	@ 0x62
 800fab2:	d80a      	bhi.n	800faca <_printf_i+0x32>
 800fab4:	2f00      	cmp	r7, #0
 800fab6:	f000 80d2 	beq.w	800fc5e <_printf_i+0x1c6>
 800faba:	2f58      	cmp	r7, #88	@ 0x58
 800fabc:	f000 80b9 	beq.w	800fc32 <_printf_i+0x19a>
 800fac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fac4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fac8:	e03a      	b.n	800fb40 <_printf_i+0xa8>
 800faca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800face:	2b15      	cmp	r3, #21
 800fad0:	d8f6      	bhi.n	800fac0 <_printf_i+0x28>
 800fad2:	a101      	add	r1, pc, #4	@ (adr r1, 800fad8 <_printf_i+0x40>)
 800fad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fad8:	0800fb31 	.word	0x0800fb31
 800fadc:	0800fb45 	.word	0x0800fb45
 800fae0:	0800fac1 	.word	0x0800fac1
 800fae4:	0800fac1 	.word	0x0800fac1
 800fae8:	0800fac1 	.word	0x0800fac1
 800faec:	0800fac1 	.word	0x0800fac1
 800faf0:	0800fb45 	.word	0x0800fb45
 800faf4:	0800fac1 	.word	0x0800fac1
 800faf8:	0800fac1 	.word	0x0800fac1
 800fafc:	0800fac1 	.word	0x0800fac1
 800fb00:	0800fac1 	.word	0x0800fac1
 800fb04:	0800fc45 	.word	0x0800fc45
 800fb08:	0800fb6f 	.word	0x0800fb6f
 800fb0c:	0800fbff 	.word	0x0800fbff
 800fb10:	0800fac1 	.word	0x0800fac1
 800fb14:	0800fac1 	.word	0x0800fac1
 800fb18:	0800fc67 	.word	0x0800fc67
 800fb1c:	0800fac1 	.word	0x0800fac1
 800fb20:	0800fb6f 	.word	0x0800fb6f
 800fb24:	0800fac1 	.word	0x0800fac1
 800fb28:	0800fac1 	.word	0x0800fac1
 800fb2c:	0800fc07 	.word	0x0800fc07
 800fb30:	6833      	ldr	r3, [r6, #0]
 800fb32:	1d1a      	adds	r2, r3, #4
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	6032      	str	r2, [r6, #0]
 800fb38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fb40:	2301      	movs	r3, #1
 800fb42:	e09d      	b.n	800fc80 <_printf_i+0x1e8>
 800fb44:	6833      	ldr	r3, [r6, #0]
 800fb46:	6820      	ldr	r0, [r4, #0]
 800fb48:	1d19      	adds	r1, r3, #4
 800fb4a:	6031      	str	r1, [r6, #0]
 800fb4c:	0606      	lsls	r6, r0, #24
 800fb4e:	d501      	bpl.n	800fb54 <_printf_i+0xbc>
 800fb50:	681d      	ldr	r5, [r3, #0]
 800fb52:	e003      	b.n	800fb5c <_printf_i+0xc4>
 800fb54:	0645      	lsls	r5, r0, #25
 800fb56:	d5fb      	bpl.n	800fb50 <_printf_i+0xb8>
 800fb58:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fb5c:	2d00      	cmp	r5, #0
 800fb5e:	da03      	bge.n	800fb68 <_printf_i+0xd0>
 800fb60:	232d      	movs	r3, #45	@ 0x2d
 800fb62:	426d      	negs	r5, r5
 800fb64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb68:	4859      	ldr	r0, [pc, #356]	@ (800fcd0 <_printf_i+0x238>)
 800fb6a:	230a      	movs	r3, #10
 800fb6c:	e011      	b.n	800fb92 <_printf_i+0xfa>
 800fb6e:	6821      	ldr	r1, [r4, #0]
 800fb70:	6833      	ldr	r3, [r6, #0]
 800fb72:	0608      	lsls	r0, r1, #24
 800fb74:	f853 5b04 	ldr.w	r5, [r3], #4
 800fb78:	d402      	bmi.n	800fb80 <_printf_i+0xe8>
 800fb7a:	0649      	lsls	r1, r1, #25
 800fb7c:	bf48      	it	mi
 800fb7e:	b2ad      	uxthmi	r5, r5
 800fb80:	2f6f      	cmp	r7, #111	@ 0x6f
 800fb82:	4853      	ldr	r0, [pc, #332]	@ (800fcd0 <_printf_i+0x238>)
 800fb84:	6033      	str	r3, [r6, #0]
 800fb86:	bf14      	ite	ne
 800fb88:	230a      	movne	r3, #10
 800fb8a:	2308      	moveq	r3, #8
 800fb8c:	2100      	movs	r1, #0
 800fb8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fb92:	6866      	ldr	r6, [r4, #4]
 800fb94:	60a6      	str	r6, [r4, #8]
 800fb96:	2e00      	cmp	r6, #0
 800fb98:	bfa2      	ittt	ge
 800fb9a:	6821      	ldrge	r1, [r4, #0]
 800fb9c:	f021 0104 	bicge.w	r1, r1, #4
 800fba0:	6021      	strge	r1, [r4, #0]
 800fba2:	b90d      	cbnz	r5, 800fba8 <_printf_i+0x110>
 800fba4:	2e00      	cmp	r6, #0
 800fba6:	d04b      	beq.n	800fc40 <_printf_i+0x1a8>
 800fba8:	4616      	mov	r6, r2
 800fbaa:	fbb5 f1f3 	udiv	r1, r5, r3
 800fbae:	fb03 5711 	mls	r7, r3, r1, r5
 800fbb2:	5dc7      	ldrb	r7, [r0, r7]
 800fbb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fbb8:	462f      	mov	r7, r5
 800fbba:	42bb      	cmp	r3, r7
 800fbbc:	460d      	mov	r5, r1
 800fbbe:	d9f4      	bls.n	800fbaa <_printf_i+0x112>
 800fbc0:	2b08      	cmp	r3, #8
 800fbc2:	d10b      	bne.n	800fbdc <_printf_i+0x144>
 800fbc4:	6823      	ldr	r3, [r4, #0]
 800fbc6:	07df      	lsls	r7, r3, #31
 800fbc8:	d508      	bpl.n	800fbdc <_printf_i+0x144>
 800fbca:	6923      	ldr	r3, [r4, #16]
 800fbcc:	6861      	ldr	r1, [r4, #4]
 800fbce:	4299      	cmp	r1, r3
 800fbd0:	bfde      	ittt	le
 800fbd2:	2330      	movle	r3, #48	@ 0x30
 800fbd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fbd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fbdc:	1b92      	subs	r2, r2, r6
 800fbde:	6122      	str	r2, [r4, #16]
 800fbe0:	f8cd a000 	str.w	sl, [sp]
 800fbe4:	464b      	mov	r3, r9
 800fbe6:	aa03      	add	r2, sp, #12
 800fbe8:	4621      	mov	r1, r4
 800fbea:	4640      	mov	r0, r8
 800fbec:	f7ff fee6 	bl	800f9bc <_printf_common>
 800fbf0:	3001      	adds	r0, #1
 800fbf2:	d14a      	bne.n	800fc8a <_printf_i+0x1f2>
 800fbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800fbf8:	b004      	add	sp, #16
 800fbfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbfe:	6823      	ldr	r3, [r4, #0]
 800fc00:	f043 0320 	orr.w	r3, r3, #32
 800fc04:	6023      	str	r3, [r4, #0]
 800fc06:	4833      	ldr	r0, [pc, #204]	@ (800fcd4 <_printf_i+0x23c>)
 800fc08:	2778      	movs	r7, #120	@ 0x78
 800fc0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fc0e:	6823      	ldr	r3, [r4, #0]
 800fc10:	6831      	ldr	r1, [r6, #0]
 800fc12:	061f      	lsls	r7, r3, #24
 800fc14:	f851 5b04 	ldr.w	r5, [r1], #4
 800fc18:	d402      	bmi.n	800fc20 <_printf_i+0x188>
 800fc1a:	065f      	lsls	r7, r3, #25
 800fc1c:	bf48      	it	mi
 800fc1e:	b2ad      	uxthmi	r5, r5
 800fc20:	6031      	str	r1, [r6, #0]
 800fc22:	07d9      	lsls	r1, r3, #31
 800fc24:	bf44      	itt	mi
 800fc26:	f043 0320 	orrmi.w	r3, r3, #32
 800fc2a:	6023      	strmi	r3, [r4, #0]
 800fc2c:	b11d      	cbz	r5, 800fc36 <_printf_i+0x19e>
 800fc2e:	2310      	movs	r3, #16
 800fc30:	e7ac      	b.n	800fb8c <_printf_i+0xf4>
 800fc32:	4827      	ldr	r0, [pc, #156]	@ (800fcd0 <_printf_i+0x238>)
 800fc34:	e7e9      	b.n	800fc0a <_printf_i+0x172>
 800fc36:	6823      	ldr	r3, [r4, #0]
 800fc38:	f023 0320 	bic.w	r3, r3, #32
 800fc3c:	6023      	str	r3, [r4, #0]
 800fc3e:	e7f6      	b.n	800fc2e <_printf_i+0x196>
 800fc40:	4616      	mov	r6, r2
 800fc42:	e7bd      	b.n	800fbc0 <_printf_i+0x128>
 800fc44:	6833      	ldr	r3, [r6, #0]
 800fc46:	6825      	ldr	r5, [r4, #0]
 800fc48:	6961      	ldr	r1, [r4, #20]
 800fc4a:	1d18      	adds	r0, r3, #4
 800fc4c:	6030      	str	r0, [r6, #0]
 800fc4e:	062e      	lsls	r6, r5, #24
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	d501      	bpl.n	800fc58 <_printf_i+0x1c0>
 800fc54:	6019      	str	r1, [r3, #0]
 800fc56:	e002      	b.n	800fc5e <_printf_i+0x1c6>
 800fc58:	0668      	lsls	r0, r5, #25
 800fc5a:	d5fb      	bpl.n	800fc54 <_printf_i+0x1bc>
 800fc5c:	8019      	strh	r1, [r3, #0]
 800fc5e:	2300      	movs	r3, #0
 800fc60:	6123      	str	r3, [r4, #16]
 800fc62:	4616      	mov	r6, r2
 800fc64:	e7bc      	b.n	800fbe0 <_printf_i+0x148>
 800fc66:	6833      	ldr	r3, [r6, #0]
 800fc68:	1d1a      	adds	r2, r3, #4
 800fc6a:	6032      	str	r2, [r6, #0]
 800fc6c:	681e      	ldr	r6, [r3, #0]
 800fc6e:	6862      	ldr	r2, [r4, #4]
 800fc70:	2100      	movs	r1, #0
 800fc72:	4630      	mov	r0, r6
 800fc74:	f7f0 fb34 	bl	80002e0 <memchr>
 800fc78:	b108      	cbz	r0, 800fc7e <_printf_i+0x1e6>
 800fc7a:	1b80      	subs	r0, r0, r6
 800fc7c:	6060      	str	r0, [r4, #4]
 800fc7e:	6863      	ldr	r3, [r4, #4]
 800fc80:	6123      	str	r3, [r4, #16]
 800fc82:	2300      	movs	r3, #0
 800fc84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc88:	e7aa      	b.n	800fbe0 <_printf_i+0x148>
 800fc8a:	6923      	ldr	r3, [r4, #16]
 800fc8c:	4632      	mov	r2, r6
 800fc8e:	4649      	mov	r1, r9
 800fc90:	4640      	mov	r0, r8
 800fc92:	47d0      	blx	sl
 800fc94:	3001      	adds	r0, #1
 800fc96:	d0ad      	beq.n	800fbf4 <_printf_i+0x15c>
 800fc98:	6823      	ldr	r3, [r4, #0]
 800fc9a:	079b      	lsls	r3, r3, #30
 800fc9c:	d413      	bmi.n	800fcc6 <_printf_i+0x22e>
 800fc9e:	68e0      	ldr	r0, [r4, #12]
 800fca0:	9b03      	ldr	r3, [sp, #12]
 800fca2:	4298      	cmp	r0, r3
 800fca4:	bfb8      	it	lt
 800fca6:	4618      	movlt	r0, r3
 800fca8:	e7a6      	b.n	800fbf8 <_printf_i+0x160>
 800fcaa:	2301      	movs	r3, #1
 800fcac:	4632      	mov	r2, r6
 800fcae:	4649      	mov	r1, r9
 800fcb0:	4640      	mov	r0, r8
 800fcb2:	47d0      	blx	sl
 800fcb4:	3001      	adds	r0, #1
 800fcb6:	d09d      	beq.n	800fbf4 <_printf_i+0x15c>
 800fcb8:	3501      	adds	r5, #1
 800fcba:	68e3      	ldr	r3, [r4, #12]
 800fcbc:	9903      	ldr	r1, [sp, #12]
 800fcbe:	1a5b      	subs	r3, r3, r1
 800fcc0:	42ab      	cmp	r3, r5
 800fcc2:	dcf2      	bgt.n	800fcaa <_printf_i+0x212>
 800fcc4:	e7eb      	b.n	800fc9e <_printf_i+0x206>
 800fcc6:	2500      	movs	r5, #0
 800fcc8:	f104 0619 	add.w	r6, r4, #25
 800fccc:	e7f5      	b.n	800fcba <_printf_i+0x222>
 800fcce:	bf00      	nop
 800fcd0:	0801467a 	.word	0x0801467a
 800fcd4:	0801468b 	.word	0x0801468b

0800fcd8 <std>:
 800fcd8:	2300      	movs	r3, #0
 800fcda:	b510      	push	{r4, lr}
 800fcdc:	4604      	mov	r4, r0
 800fcde:	e9c0 3300 	strd	r3, r3, [r0]
 800fce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fce6:	6083      	str	r3, [r0, #8]
 800fce8:	8181      	strh	r1, [r0, #12]
 800fcea:	6643      	str	r3, [r0, #100]	@ 0x64
 800fcec:	81c2      	strh	r2, [r0, #14]
 800fcee:	6183      	str	r3, [r0, #24]
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	2208      	movs	r2, #8
 800fcf4:	305c      	adds	r0, #92	@ 0x5c
 800fcf6:	f000 f928 	bl	800ff4a <memset>
 800fcfa:	4b0d      	ldr	r3, [pc, #52]	@ (800fd30 <std+0x58>)
 800fcfc:	6263      	str	r3, [r4, #36]	@ 0x24
 800fcfe:	4b0d      	ldr	r3, [pc, #52]	@ (800fd34 <std+0x5c>)
 800fd00:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fd02:	4b0d      	ldr	r3, [pc, #52]	@ (800fd38 <std+0x60>)
 800fd04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fd06:	4b0d      	ldr	r3, [pc, #52]	@ (800fd3c <std+0x64>)
 800fd08:	6323      	str	r3, [r4, #48]	@ 0x30
 800fd0a:	4b0d      	ldr	r3, [pc, #52]	@ (800fd40 <std+0x68>)
 800fd0c:	6224      	str	r4, [r4, #32]
 800fd0e:	429c      	cmp	r4, r3
 800fd10:	d006      	beq.n	800fd20 <std+0x48>
 800fd12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fd16:	4294      	cmp	r4, r2
 800fd18:	d002      	beq.n	800fd20 <std+0x48>
 800fd1a:	33d0      	adds	r3, #208	@ 0xd0
 800fd1c:	429c      	cmp	r4, r3
 800fd1e:	d105      	bne.n	800fd2c <std+0x54>
 800fd20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fd24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd28:	f000 b99c 	b.w	8010064 <__retarget_lock_init_recursive>
 800fd2c:	bd10      	pop	{r4, pc}
 800fd2e:	bf00      	nop
 800fd30:	0800fec5 	.word	0x0800fec5
 800fd34:	0800fee7 	.word	0x0800fee7
 800fd38:	0800ff1f 	.word	0x0800ff1f
 800fd3c:	0800ff43 	.word	0x0800ff43
 800fd40:	24005f9c 	.word	0x24005f9c

0800fd44 <stdio_exit_handler>:
 800fd44:	4a02      	ldr	r2, [pc, #8]	@ (800fd50 <stdio_exit_handler+0xc>)
 800fd46:	4903      	ldr	r1, [pc, #12]	@ (800fd54 <stdio_exit_handler+0x10>)
 800fd48:	4803      	ldr	r0, [pc, #12]	@ (800fd58 <stdio_exit_handler+0x14>)
 800fd4a:	f000 b869 	b.w	800fe20 <_fwalk_sglue>
 800fd4e:	bf00      	nop
 800fd50:	24000040 	.word	0x24000040
 800fd54:	08011795 	.word	0x08011795
 800fd58:	24000050 	.word	0x24000050

0800fd5c <cleanup_stdio>:
 800fd5c:	6841      	ldr	r1, [r0, #4]
 800fd5e:	4b0c      	ldr	r3, [pc, #48]	@ (800fd90 <cleanup_stdio+0x34>)
 800fd60:	4299      	cmp	r1, r3
 800fd62:	b510      	push	{r4, lr}
 800fd64:	4604      	mov	r4, r0
 800fd66:	d001      	beq.n	800fd6c <cleanup_stdio+0x10>
 800fd68:	f001 fd14 	bl	8011794 <_fflush_r>
 800fd6c:	68a1      	ldr	r1, [r4, #8]
 800fd6e:	4b09      	ldr	r3, [pc, #36]	@ (800fd94 <cleanup_stdio+0x38>)
 800fd70:	4299      	cmp	r1, r3
 800fd72:	d002      	beq.n	800fd7a <cleanup_stdio+0x1e>
 800fd74:	4620      	mov	r0, r4
 800fd76:	f001 fd0d 	bl	8011794 <_fflush_r>
 800fd7a:	68e1      	ldr	r1, [r4, #12]
 800fd7c:	4b06      	ldr	r3, [pc, #24]	@ (800fd98 <cleanup_stdio+0x3c>)
 800fd7e:	4299      	cmp	r1, r3
 800fd80:	d004      	beq.n	800fd8c <cleanup_stdio+0x30>
 800fd82:	4620      	mov	r0, r4
 800fd84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd88:	f001 bd04 	b.w	8011794 <_fflush_r>
 800fd8c:	bd10      	pop	{r4, pc}
 800fd8e:	bf00      	nop
 800fd90:	24005f9c 	.word	0x24005f9c
 800fd94:	24006004 	.word	0x24006004
 800fd98:	2400606c 	.word	0x2400606c

0800fd9c <global_stdio_init.part.0>:
 800fd9c:	b510      	push	{r4, lr}
 800fd9e:	4b0b      	ldr	r3, [pc, #44]	@ (800fdcc <global_stdio_init.part.0+0x30>)
 800fda0:	4c0b      	ldr	r4, [pc, #44]	@ (800fdd0 <global_stdio_init.part.0+0x34>)
 800fda2:	4a0c      	ldr	r2, [pc, #48]	@ (800fdd4 <global_stdio_init.part.0+0x38>)
 800fda4:	601a      	str	r2, [r3, #0]
 800fda6:	4620      	mov	r0, r4
 800fda8:	2200      	movs	r2, #0
 800fdaa:	2104      	movs	r1, #4
 800fdac:	f7ff ff94 	bl	800fcd8 <std>
 800fdb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fdb4:	2201      	movs	r2, #1
 800fdb6:	2109      	movs	r1, #9
 800fdb8:	f7ff ff8e 	bl	800fcd8 <std>
 800fdbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fdc0:	2202      	movs	r2, #2
 800fdc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdc6:	2112      	movs	r1, #18
 800fdc8:	f7ff bf86 	b.w	800fcd8 <std>
 800fdcc:	240060d4 	.word	0x240060d4
 800fdd0:	24005f9c 	.word	0x24005f9c
 800fdd4:	0800fd45 	.word	0x0800fd45

0800fdd8 <__sfp_lock_acquire>:
 800fdd8:	4801      	ldr	r0, [pc, #4]	@ (800fde0 <__sfp_lock_acquire+0x8>)
 800fdda:	f000 b944 	b.w	8010066 <__retarget_lock_acquire_recursive>
 800fdde:	bf00      	nop
 800fde0:	240060dd 	.word	0x240060dd

0800fde4 <__sfp_lock_release>:
 800fde4:	4801      	ldr	r0, [pc, #4]	@ (800fdec <__sfp_lock_release+0x8>)
 800fde6:	f000 b93f 	b.w	8010068 <__retarget_lock_release_recursive>
 800fdea:	bf00      	nop
 800fdec:	240060dd 	.word	0x240060dd

0800fdf0 <__sinit>:
 800fdf0:	b510      	push	{r4, lr}
 800fdf2:	4604      	mov	r4, r0
 800fdf4:	f7ff fff0 	bl	800fdd8 <__sfp_lock_acquire>
 800fdf8:	6a23      	ldr	r3, [r4, #32]
 800fdfa:	b11b      	cbz	r3, 800fe04 <__sinit+0x14>
 800fdfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe00:	f7ff bff0 	b.w	800fde4 <__sfp_lock_release>
 800fe04:	4b04      	ldr	r3, [pc, #16]	@ (800fe18 <__sinit+0x28>)
 800fe06:	6223      	str	r3, [r4, #32]
 800fe08:	4b04      	ldr	r3, [pc, #16]	@ (800fe1c <__sinit+0x2c>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d1f5      	bne.n	800fdfc <__sinit+0xc>
 800fe10:	f7ff ffc4 	bl	800fd9c <global_stdio_init.part.0>
 800fe14:	e7f2      	b.n	800fdfc <__sinit+0xc>
 800fe16:	bf00      	nop
 800fe18:	0800fd5d 	.word	0x0800fd5d
 800fe1c:	240060d4 	.word	0x240060d4

0800fe20 <_fwalk_sglue>:
 800fe20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe24:	4607      	mov	r7, r0
 800fe26:	4688      	mov	r8, r1
 800fe28:	4614      	mov	r4, r2
 800fe2a:	2600      	movs	r6, #0
 800fe2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe30:	f1b9 0901 	subs.w	r9, r9, #1
 800fe34:	d505      	bpl.n	800fe42 <_fwalk_sglue+0x22>
 800fe36:	6824      	ldr	r4, [r4, #0]
 800fe38:	2c00      	cmp	r4, #0
 800fe3a:	d1f7      	bne.n	800fe2c <_fwalk_sglue+0xc>
 800fe3c:	4630      	mov	r0, r6
 800fe3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe42:	89ab      	ldrh	r3, [r5, #12]
 800fe44:	2b01      	cmp	r3, #1
 800fe46:	d907      	bls.n	800fe58 <_fwalk_sglue+0x38>
 800fe48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	d003      	beq.n	800fe58 <_fwalk_sglue+0x38>
 800fe50:	4629      	mov	r1, r5
 800fe52:	4638      	mov	r0, r7
 800fe54:	47c0      	blx	r8
 800fe56:	4306      	orrs	r6, r0
 800fe58:	3568      	adds	r5, #104	@ 0x68
 800fe5a:	e7e9      	b.n	800fe30 <_fwalk_sglue+0x10>

0800fe5c <sniprintf>:
 800fe5c:	b40c      	push	{r2, r3}
 800fe5e:	b530      	push	{r4, r5, lr}
 800fe60:	4b17      	ldr	r3, [pc, #92]	@ (800fec0 <sniprintf+0x64>)
 800fe62:	1e0c      	subs	r4, r1, #0
 800fe64:	681d      	ldr	r5, [r3, #0]
 800fe66:	b09d      	sub	sp, #116	@ 0x74
 800fe68:	da08      	bge.n	800fe7c <sniprintf+0x20>
 800fe6a:	238b      	movs	r3, #139	@ 0x8b
 800fe6c:	602b      	str	r3, [r5, #0]
 800fe6e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe72:	b01d      	add	sp, #116	@ 0x74
 800fe74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe78:	b002      	add	sp, #8
 800fe7a:	4770      	bx	lr
 800fe7c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fe80:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fe84:	bf14      	ite	ne
 800fe86:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fe8a:	4623      	moveq	r3, r4
 800fe8c:	9304      	str	r3, [sp, #16]
 800fe8e:	9307      	str	r3, [sp, #28]
 800fe90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fe94:	9002      	str	r0, [sp, #8]
 800fe96:	9006      	str	r0, [sp, #24]
 800fe98:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fe9c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fe9e:	ab21      	add	r3, sp, #132	@ 0x84
 800fea0:	a902      	add	r1, sp, #8
 800fea2:	4628      	mov	r0, r5
 800fea4:	9301      	str	r3, [sp, #4]
 800fea6:	f001 faf5 	bl	8011494 <_svfiprintf_r>
 800feaa:	1c43      	adds	r3, r0, #1
 800feac:	bfbc      	itt	lt
 800feae:	238b      	movlt	r3, #139	@ 0x8b
 800feb0:	602b      	strlt	r3, [r5, #0]
 800feb2:	2c00      	cmp	r4, #0
 800feb4:	d0dd      	beq.n	800fe72 <sniprintf+0x16>
 800feb6:	9b02      	ldr	r3, [sp, #8]
 800feb8:	2200      	movs	r2, #0
 800feba:	701a      	strb	r2, [r3, #0]
 800febc:	e7d9      	b.n	800fe72 <sniprintf+0x16>
 800febe:	bf00      	nop
 800fec0:	2400004c 	.word	0x2400004c

0800fec4 <__sread>:
 800fec4:	b510      	push	{r4, lr}
 800fec6:	460c      	mov	r4, r1
 800fec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fecc:	f000 f86c 	bl	800ffa8 <_read_r>
 800fed0:	2800      	cmp	r0, #0
 800fed2:	bfab      	itete	ge
 800fed4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fed6:	89a3      	ldrhlt	r3, [r4, #12]
 800fed8:	181b      	addge	r3, r3, r0
 800feda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fede:	bfac      	ite	ge
 800fee0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fee2:	81a3      	strhlt	r3, [r4, #12]
 800fee4:	bd10      	pop	{r4, pc}

0800fee6 <__swrite>:
 800fee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feea:	461f      	mov	r7, r3
 800feec:	898b      	ldrh	r3, [r1, #12]
 800feee:	05db      	lsls	r3, r3, #23
 800fef0:	4605      	mov	r5, r0
 800fef2:	460c      	mov	r4, r1
 800fef4:	4616      	mov	r6, r2
 800fef6:	d505      	bpl.n	800ff04 <__swrite+0x1e>
 800fef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fefc:	2302      	movs	r3, #2
 800fefe:	2200      	movs	r2, #0
 800ff00:	f000 f840 	bl	800ff84 <_lseek_r>
 800ff04:	89a3      	ldrh	r3, [r4, #12]
 800ff06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ff0e:	81a3      	strh	r3, [r4, #12]
 800ff10:	4632      	mov	r2, r6
 800ff12:	463b      	mov	r3, r7
 800ff14:	4628      	mov	r0, r5
 800ff16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff1a:	f000 b867 	b.w	800ffec <_write_r>

0800ff1e <__sseek>:
 800ff1e:	b510      	push	{r4, lr}
 800ff20:	460c      	mov	r4, r1
 800ff22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff26:	f000 f82d 	bl	800ff84 <_lseek_r>
 800ff2a:	1c43      	adds	r3, r0, #1
 800ff2c:	89a3      	ldrh	r3, [r4, #12]
 800ff2e:	bf15      	itete	ne
 800ff30:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ff32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ff36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ff3a:	81a3      	strheq	r3, [r4, #12]
 800ff3c:	bf18      	it	ne
 800ff3e:	81a3      	strhne	r3, [r4, #12]
 800ff40:	bd10      	pop	{r4, pc}

0800ff42 <__sclose>:
 800ff42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff46:	f000 b80d 	b.w	800ff64 <_close_r>

0800ff4a <memset>:
 800ff4a:	4402      	add	r2, r0
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d100      	bne.n	800ff54 <memset+0xa>
 800ff52:	4770      	bx	lr
 800ff54:	f803 1b01 	strb.w	r1, [r3], #1
 800ff58:	e7f9      	b.n	800ff4e <memset+0x4>
	...

0800ff5c <_localeconv_r>:
 800ff5c:	4800      	ldr	r0, [pc, #0]	@ (800ff60 <_localeconv_r+0x4>)
 800ff5e:	4770      	bx	lr
 800ff60:	2400018c 	.word	0x2400018c

0800ff64 <_close_r>:
 800ff64:	b538      	push	{r3, r4, r5, lr}
 800ff66:	4d06      	ldr	r5, [pc, #24]	@ (800ff80 <_close_r+0x1c>)
 800ff68:	2300      	movs	r3, #0
 800ff6a:	4604      	mov	r4, r0
 800ff6c:	4608      	mov	r0, r1
 800ff6e:	602b      	str	r3, [r5, #0]
 800ff70:	f7f1 fa5a 	bl	8001428 <_close>
 800ff74:	1c43      	adds	r3, r0, #1
 800ff76:	d102      	bne.n	800ff7e <_close_r+0x1a>
 800ff78:	682b      	ldr	r3, [r5, #0]
 800ff7a:	b103      	cbz	r3, 800ff7e <_close_r+0x1a>
 800ff7c:	6023      	str	r3, [r4, #0]
 800ff7e:	bd38      	pop	{r3, r4, r5, pc}
 800ff80:	240060d8 	.word	0x240060d8

0800ff84 <_lseek_r>:
 800ff84:	b538      	push	{r3, r4, r5, lr}
 800ff86:	4d07      	ldr	r5, [pc, #28]	@ (800ffa4 <_lseek_r+0x20>)
 800ff88:	4604      	mov	r4, r0
 800ff8a:	4608      	mov	r0, r1
 800ff8c:	4611      	mov	r1, r2
 800ff8e:	2200      	movs	r2, #0
 800ff90:	602a      	str	r2, [r5, #0]
 800ff92:	461a      	mov	r2, r3
 800ff94:	f7f1 fa6f 	bl	8001476 <_lseek>
 800ff98:	1c43      	adds	r3, r0, #1
 800ff9a:	d102      	bne.n	800ffa2 <_lseek_r+0x1e>
 800ff9c:	682b      	ldr	r3, [r5, #0]
 800ff9e:	b103      	cbz	r3, 800ffa2 <_lseek_r+0x1e>
 800ffa0:	6023      	str	r3, [r4, #0]
 800ffa2:	bd38      	pop	{r3, r4, r5, pc}
 800ffa4:	240060d8 	.word	0x240060d8

0800ffa8 <_read_r>:
 800ffa8:	b538      	push	{r3, r4, r5, lr}
 800ffaa:	4d07      	ldr	r5, [pc, #28]	@ (800ffc8 <_read_r+0x20>)
 800ffac:	4604      	mov	r4, r0
 800ffae:	4608      	mov	r0, r1
 800ffb0:	4611      	mov	r1, r2
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	602a      	str	r2, [r5, #0]
 800ffb6:	461a      	mov	r2, r3
 800ffb8:	f7f1 f9fd 	bl	80013b6 <_read>
 800ffbc:	1c43      	adds	r3, r0, #1
 800ffbe:	d102      	bne.n	800ffc6 <_read_r+0x1e>
 800ffc0:	682b      	ldr	r3, [r5, #0]
 800ffc2:	b103      	cbz	r3, 800ffc6 <_read_r+0x1e>
 800ffc4:	6023      	str	r3, [r4, #0]
 800ffc6:	bd38      	pop	{r3, r4, r5, pc}
 800ffc8:	240060d8 	.word	0x240060d8

0800ffcc <_sbrk_r>:
 800ffcc:	b538      	push	{r3, r4, r5, lr}
 800ffce:	4d06      	ldr	r5, [pc, #24]	@ (800ffe8 <_sbrk_r+0x1c>)
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	4604      	mov	r4, r0
 800ffd4:	4608      	mov	r0, r1
 800ffd6:	602b      	str	r3, [r5, #0]
 800ffd8:	f7f1 fa5a 	bl	8001490 <_sbrk>
 800ffdc:	1c43      	adds	r3, r0, #1
 800ffde:	d102      	bne.n	800ffe6 <_sbrk_r+0x1a>
 800ffe0:	682b      	ldr	r3, [r5, #0]
 800ffe2:	b103      	cbz	r3, 800ffe6 <_sbrk_r+0x1a>
 800ffe4:	6023      	str	r3, [r4, #0]
 800ffe6:	bd38      	pop	{r3, r4, r5, pc}
 800ffe8:	240060d8 	.word	0x240060d8

0800ffec <_write_r>:
 800ffec:	b538      	push	{r3, r4, r5, lr}
 800ffee:	4d07      	ldr	r5, [pc, #28]	@ (801000c <_write_r+0x20>)
 800fff0:	4604      	mov	r4, r0
 800fff2:	4608      	mov	r0, r1
 800fff4:	4611      	mov	r1, r2
 800fff6:	2200      	movs	r2, #0
 800fff8:	602a      	str	r2, [r5, #0]
 800fffa:	461a      	mov	r2, r3
 800fffc:	f7f1 f9f8 	bl	80013f0 <_write>
 8010000:	1c43      	adds	r3, r0, #1
 8010002:	d102      	bne.n	801000a <_write_r+0x1e>
 8010004:	682b      	ldr	r3, [r5, #0]
 8010006:	b103      	cbz	r3, 801000a <_write_r+0x1e>
 8010008:	6023      	str	r3, [r4, #0]
 801000a:	bd38      	pop	{r3, r4, r5, pc}
 801000c:	240060d8 	.word	0x240060d8

08010010 <__errno>:
 8010010:	4b01      	ldr	r3, [pc, #4]	@ (8010018 <__errno+0x8>)
 8010012:	6818      	ldr	r0, [r3, #0]
 8010014:	4770      	bx	lr
 8010016:	bf00      	nop
 8010018:	2400004c 	.word	0x2400004c

0801001c <__libc_init_array>:
 801001c:	b570      	push	{r4, r5, r6, lr}
 801001e:	4d0d      	ldr	r5, [pc, #52]	@ (8010054 <__libc_init_array+0x38>)
 8010020:	4c0d      	ldr	r4, [pc, #52]	@ (8010058 <__libc_init_array+0x3c>)
 8010022:	1b64      	subs	r4, r4, r5
 8010024:	10a4      	asrs	r4, r4, #2
 8010026:	2600      	movs	r6, #0
 8010028:	42a6      	cmp	r6, r4
 801002a:	d109      	bne.n	8010040 <__libc_init_array+0x24>
 801002c:	4d0b      	ldr	r5, [pc, #44]	@ (801005c <__libc_init_array+0x40>)
 801002e:	4c0c      	ldr	r4, [pc, #48]	@ (8010060 <__libc_init_array+0x44>)
 8010030:	f002 fa1c 	bl	801246c <_init>
 8010034:	1b64      	subs	r4, r4, r5
 8010036:	10a4      	asrs	r4, r4, #2
 8010038:	2600      	movs	r6, #0
 801003a:	42a6      	cmp	r6, r4
 801003c:	d105      	bne.n	801004a <__libc_init_array+0x2e>
 801003e:	bd70      	pop	{r4, r5, r6, pc}
 8010040:	f855 3b04 	ldr.w	r3, [r5], #4
 8010044:	4798      	blx	r3
 8010046:	3601      	adds	r6, #1
 8010048:	e7ee      	b.n	8010028 <__libc_init_array+0xc>
 801004a:	f855 3b04 	ldr.w	r3, [r5], #4
 801004e:	4798      	blx	r3
 8010050:	3601      	adds	r6, #1
 8010052:	e7f2      	b.n	801003a <__libc_init_array+0x1e>
 8010054:	080149f0 	.word	0x080149f0
 8010058:	080149f0 	.word	0x080149f0
 801005c:	080149f0 	.word	0x080149f0
 8010060:	080149f4 	.word	0x080149f4

08010064 <__retarget_lock_init_recursive>:
 8010064:	4770      	bx	lr

08010066 <__retarget_lock_acquire_recursive>:
 8010066:	4770      	bx	lr

08010068 <__retarget_lock_release_recursive>:
 8010068:	4770      	bx	lr

0801006a <memcpy>:
 801006a:	440a      	add	r2, r1
 801006c:	4291      	cmp	r1, r2
 801006e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010072:	d100      	bne.n	8010076 <memcpy+0xc>
 8010074:	4770      	bx	lr
 8010076:	b510      	push	{r4, lr}
 8010078:	f811 4b01 	ldrb.w	r4, [r1], #1
 801007c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010080:	4291      	cmp	r1, r2
 8010082:	d1f9      	bne.n	8010078 <memcpy+0xe>
 8010084:	bd10      	pop	{r4, pc}

08010086 <quorem>:
 8010086:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801008a:	6903      	ldr	r3, [r0, #16]
 801008c:	690c      	ldr	r4, [r1, #16]
 801008e:	42a3      	cmp	r3, r4
 8010090:	4607      	mov	r7, r0
 8010092:	db7e      	blt.n	8010192 <quorem+0x10c>
 8010094:	3c01      	subs	r4, #1
 8010096:	f101 0814 	add.w	r8, r1, #20
 801009a:	00a3      	lsls	r3, r4, #2
 801009c:	f100 0514 	add.w	r5, r0, #20
 80100a0:	9300      	str	r3, [sp, #0]
 80100a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100a6:	9301      	str	r3, [sp, #4]
 80100a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80100ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100b0:	3301      	adds	r3, #1
 80100b2:	429a      	cmp	r2, r3
 80100b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80100b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80100bc:	d32e      	bcc.n	801011c <quorem+0x96>
 80100be:	f04f 0a00 	mov.w	sl, #0
 80100c2:	46c4      	mov	ip, r8
 80100c4:	46ae      	mov	lr, r5
 80100c6:	46d3      	mov	fp, sl
 80100c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80100cc:	b298      	uxth	r0, r3
 80100ce:	fb06 a000 	mla	r0, r6, r0, sl
 80100d2:	0c02      	lsrs	r2, r0, #16
 80100d4:	0c1b      	lsrs	r3, r3, #16
 80100d6:	fb06 2303 	mla	r3, r6, r3, r2
 80100da:	f8de 2000 	ldr.w	r2, [lr]
 80100de:	b280      	uxth	r0, r0
 80100e0:	b292      	uxth	r2, r2
 80100e2:	1a12      	subs	r2, r2, r0
 80100e4:	445a      	add	r2, fp
 80100e6:	f8de 0000 	ldr.w	r0, [lr]
 80100ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80100f4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80100f8:	b292      	uxth	r2, r2
 80100fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80100fe:	45e1      	cmp	r9, ip
 8010100:	f84e 2b04 	str.w	r2, [lr], #4
 8010104:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010108:	d2de      	bcs.n	80100c8 <quorem+0x42>
 801010a:	9b00      	ldr	r3, [sp, #0]
 801010c:	58eb      	ldr	r3, [r5, r3]
 801010e:	b92b      	cbnz	r3, 801011c <quorem+0x96>
 8010110:	9b01      	ldr	r3, [sp, #4]
 8010112:	3b04      	subs	r3, #4
 8010114:	429d      	cmp	r5, r3
 8010116:	461a      	mov	r2, r3
 8010118:	d32f      	bcc.n	801017a <quorem+0xf4>
 801011a:	613c      	str	r4, [r7, #16]
 801011c:	4638      	mov	r0, r7
 801011e:	f001 f855 	bl	80111cc <__mcmp>
 8010122:	2800      	cmp	r0, #0
 8010124:	db25      	blt.n	8010172 <quorem+0xec>
 8010126:	4629      	mov	r1, r5
 8010128:	2000      	movs	r0, #0
 801012a:	f858 2b04 	ldr.w	r2, [r8], #4
 801012e:	f8d1 c000 	ldr.w	ip, [r1]
 8010132:	fa1f fe82 	uxth.w	lr, r2
 8010136:	fa1f f38c 	uxth.w	r3, ip
 801013a:	eba3 030e 	sub.w	r3, r3, lr
 801013e:	4403      	add	r3, r0
 8010140:	0c12      	lsrs	r2, r2, #16
 8010142:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010146:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801014a:	b29b      	uxth	r3, r3
 801014c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010150:	45c1      	cmp	r9, r8
 8010152:	f841 3b04 	str.w	r3, [r1], #4
 8010156:	ea4f 4022 	mov.w	r0, r2, asr #16
 801015a:	d2e6      	bcs.n	801012a <quorem+0xa4>
 801015c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010160:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010164:	b922      	cbnz	r2, 8010170 <quorem+0xea>
 8010166:	3b04      	subs	r3, #4
 8010168:	429d      	cmp	r5, r3
 801016a:	461a      	mov	r2, r3
 801016c:	d30b      	bcc.n	8010186 <quorem+0x100>
 801016e:	613c      	str	r4, [r7, #16]
 8010170:	3601      	adds	r6, #1
 8010172:	4630      	mov	r0, r6
 8010174:	b003      	add	sp, #12
 8010176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801017a:	6812      	ldr	r2, [r2, #0]
 801017c:	3b04      	subs	r3, #4
 801017e:	2a00      	cmp	r2, #0
 8010180:	d1cb      	bne.n	801011a <quorem+0x94>
 8010182:	3c01      	subs	r4, #1
 8010184:	e7c6      	b.n	8010114 <quorem+0x8e>
 8010186:	6812      	ldr	r2, [r2, #0]
 8010188:	3b04      	subs	r3, #4
 801018a:	2a00      	cmp	r2, #0
 801018c:	d1ef      	bne.n	801016e <quorem+0xe8>
 801018e:	3c01      	subs	r4, #1
 8010190:	e7ea      	b.n	8010168 <quorem+0xe2>
 8010192:	2000      	movs	r0, #0
 8010194:	e7ee      	b.n	8010174 <quorem+0xee>
	...

08010198 <_dtoa_r>:
 8010198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801019c:	ed2d 8b02 	vpush	{d8}
 80101a0:	69c7      	ldr	r7, [r0, #28]
 80101a2:	b091      	sub	sp, #68	@ 0x44
 80101a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80101a8:	ec55 4b10 	vmov	r4, r5, d0
 80101ac:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80101ae:	9107      	str	r1, [sp, #28]
 80101b0:	4681      	mov	r9, r0
 80101b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80101b4:	930d      	str	r3, [sp, #52]	@ 0x34
 80101b6:	b97f      	cbnz	r7, 80101d8 <_dtoa_r+0x40>
 80101b8:	2010      	movs	r0, #16
 80101ba:	f7ff f8a1 	bl	800f300 <malloc>
 80101be:	4602      	mov	r2, r0
 80101c0:	f8c9 001c 	str.w	r0, [r9, #28]
 80101c4:	b920      	cbnz	r0, 80101d0 <_dtoa_r+0x38>
 80101c6:	4ba0      	ldr	r3, [pc, #640]	@ (8010448 <_dtoa_r+0x2b0>)
 80101c8:	21ef      	movs	r1, #239	@ 0xef
 80101ca:	48a0      	ldr	r0, [pc, #640]	@ (801044c <_dtoa_r+0x2b4>)
 80101cc:	f001 fb24 	bl	8011818 <__assert_func>
 80101d0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80101d4:	6007      	str	r7, [r0, #0]
 80101d6:	60c7      	str	r7, [r0, #12]
 80101d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80101dc:	6819      	ldr	r1, [r3, #0]
 80101de:	b159      	cbz	r1, 80101f8 <_dtoa_r+0x60>
 80101e0:	685a      	ldr	r2, [r3, #4]
 80101e2:	604a      	str	r2, [r1, #4]
 80101e4:	2301      	movs	r3, #1
 80101e6:	4093      	lsls	r3, r2
 80101e8:	608b      	str	r3, [r1, #8]
 80101ea:	4648      	mov	r0, r9
 80101ec:	f000 fdb4 	bl	8010d58 <_Bfree>
 80101f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80101f4:	2200      	movs	r2, #0
 80101f6:	601a      	str	r2, [r3, #0]
 80101f8:	1e2b      	subs	r3, r5, #0
 80101fa:	bfbb      	ittet	lt
 80101fc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010200:	9303      	strlt	r3, [sp, #12]
 8010202:	2300      	movge	r3, #0
 8010204:	2201      	movlt	r2, #1
 8010206:	bfac      	ite	ge
 8010208:	6033      	strge	r3, [r6, #0]
 801020a:	6032      	strlt	r2, [r6, #0]
 801020c:	4b90      	ldr	r3, [pc, #576]	@ (8010450 <_dtoa_r+0x2b8>)
 801020e:	9e03      	ldr	r6, [sp, #12]
 8010210:	43b3      	bics	r3, r6
 8010212:	d110      	bne.n	8010236 <_dtoa_r+0x9e>
 8010214:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010216:	f242 730f 	movw	r3, #9999	@ 0x270f
 801021a:	6013      	str	r3, [r2, #0]
 801021c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010220:	4323      	orrs	r3, r4
 8010222:	f000 84de 	beq.w	8010be2 <_dtoa_r+0xa4a>
 8010226:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010228:	4f8a      	ldr	r7, [pc, #552]	@ (8010454 <_dtoa_r+0x2bc>)
 801022a:	2b00      	cmp	r3, #0
 801022c:	f000 84e0 	beq.w	8010bf0 <_dtoa_r+0xa58>
 8010230:	1cfb      	adds	r3, r7, #3
 8010232:	f000 bcdb 	b.w	8010bec <_dtoa_r+0xa54>
 8010236:	ed9d 8b02 	vldr	d8, [sp, #8]
 801023a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801023e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010242:	d10a      	bne.n	801025a <_dtoa_r+0xc2>
 8010244:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010246:	2301      	movs	r3, #1
 8010248:	6013      	str	r3, [r2, #0]
 801024a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801024c:	b113      	cbz	r3, 8010254 <_dtoa_r+0xbc>
 801024e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010250:	4b81      	ldr	r3, [pc, #516]	@ (8010458 <_dtoa_r+0x2c0>)
 8010252:	6013      	str	r3, [r2, #0]
 8010254:	4f81      	ldr	r7, [pc, #516]	@ (801045c <_dtoa_r+0x2c4>)
 8010256:	f000 bccb 	b.w	8010bf0 <_dtoa_r+0xa58>
 801025a:	aa0e      	add	r2, sp, #56	@ 0x38
 801025c:	a90f      	add	r1, sp, #60	@ 0x3c
 801025e:	4648      	mov	r0, r9
 8010260:	eeb0 0b48 	vmov.f64	d0, d8
 8010264:	f001 f862 	bl	801132c <__d2b>
 8010268:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801026c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801026e:	9001      	str	r0, [sp, #4]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d045      	beq.n	8010300 <_dtoa_r+0x168>
 8010274:	eeb0 7b48 	vmov.f64	d7, d8
 8010278:	ee18 1a90 	vmov	r1, s17
 801027c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010280:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8010284:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010288:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801028c:	2500      	movs	r5, #0
 801028e:	ee07 1a90 	vmov	s15, r1
 8010292:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8010296:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010430 <_dtoa_r+0x298>
 801029a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801029e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010438 <_dtoa_r+0x2a0>
 80102a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80102a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010440 <_dtoa_r+0x2a8>
 80102aa:	ee07 3a90 	vmov	s15, r3
 80102ae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80102b2:	eeb0 7b46 	vmov.f64	d7, d6
 80102b6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80102ba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80102be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80102c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102c6:	ee16 8a90 	vmov	r8, s13
 80102ca:	d508      	bpl.n	80102de <_dtoa_r+0x146>
 80102cc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80102d0:	eeb4 6b47 	vcmp.f64	d6, d7
 80102d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102d8:	bf18      	it	ne
 80102da:	f108 38ff 	addne.w	r8, r8, #4294967295
 80102de:	f1b8 0f16 	cmp.w	r8, #22
 80102e2:	d82b      	bhi.n	801033c <_dtoa_r+0x1a4>
 80102e4:	495e      	ldr	r1, [pc, #376]	@ (8010460 <_dtoa_r+0x2c8>)
 80102e6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80102ea:	ed91 7b00 	vldr	d7, [r1]
 80102ee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80102f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f6:	d501      	bpl.n	80102fc <_dtoa_r+0x164>
 80102f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80102fc:	2100      	movs	r1, #0
 80102fe:	e01e      	b.n	801033e <_dtoa_r+0x1a6>
 8010300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010302:	4413      	add	r3, r2
 8010304:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010308:	2920      	cmp	r1, #32
 801030a:	bfc1      	itttt	gt
 801030c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010310:	408e      	lslgt	r6, r1
 8010312:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8010316:	fa24 f101 	lsrgt.w	r1, r4, r1
 801031a:	bfd6      	itet	le
 801031c:	f1c1 0120 	rsble	r1, r1, #32
 8010320:	4331      	orrgt	r1, r6
 8010322:	fa04 f101 	lslle.w	r1, r4, r1
 8010326:	ee07 1a90 	vmov	s15, r1
 801032a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801032e:	3b01      	subs	r3, #1
 8010330:	ee17 1a90 	vmov	r1, s15
 8010334:	2501      	movs	r5, #1
 8010336:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801033a:	e7a8      	b.n	801028e <_dtoa_r+0xf6>
 801033c:	2101      	movs	r1, #1
 801033e:	1ad2      	subs	r2, r2, r3
 8010340:	1e53      	subs	r3, r2, #1
 8010342:	9306      	str	r3, [sp, #24]
 8010344:	bf45      	ittet	mi
 8010346:	f1c2 0301 	rsbmi	r3, r2, #1
 801034a:	9305      	strmi	r3, [sp, #20]
 801034c:	2300      	movpl	r3, #0
 801034e:	2300      	movmi	r3, #0
 8010350:	bf4c      	ite	mi
 8010352:	9306      	strmi	r3, [sp, #24]
 8010354:	9305      	strpl	r3, [sp, #20]
 8010356:	f1b8 0f00 	cmp.w	r8, #0
 801035a:	910c      	str	r1, [sp, #48]	@ 0x30
 801035c:	db18      	blt.n	8010390 <_dtoa_r+0x1f8>
 801035e:	9b06      	ldr	r3, [sp, #24]
 8010360:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8010364:	4443      	add	r3, r8
 8010366:	9306      	str	r3, [sp, #24]
 8010368:	2300      	movs	r3, #0
 801036a:	9a07      	ldr	r2, [sp, #28]
 801036c:	2a09      	cmp	r2, #9
 801036e:	d849      	bhi.n	8010404 <_dtoa_r+0x26c>
 8010370:	2a05      	cmp	r2, #5
 8010372:	bfc4      	itt	gt
 8010374:	3a04      	subgt	r2, #4
 8010376:	9207      	strgt	r2, [sp, #28]
 8010378:	9a07      	ldr	r2, [sp, #28]
 801037a:	f1a2 0202 	sub.w	r2, r2, #2
 801037e:	bfcc      	ite	gt
 8010380:	2400      	movgt	r4, #0
 8010382:	2401      	movle	r4, #1
 8010384:	2a03      	cmp	r2, #3
 8010386:	d848      	bhi.n	801041a <_dtoa_r+0x282>
 8010388:	e8df f002 	tbb	[pc, r2]
 801038c:	3a2c2e0b 	.word	0x3a2c2e0b
 8010390:	9b05      	ldr	r3, [sp, #20]
 8010392:	2200      	movs	r2, #0
 8010394:	eba3 0308 	sub.w	r3, r3, r8
 8010398:	9305      	str	r3, [sp, #20]
 801039a:	920a      	str	r2, [sp, #40]	@ 0x28
 801039c:	f1c8 0300 	rsb	r3, r8, #0
 80103a0:	e7e3      	b.n	801036a <_dtoa_r+0x1d2>
 80103a2:	2200      	movs	r2, #0
 80103a4:	9208      	str	r2, [sp, #32]
 80103a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103a8:	2a00      	cmp	r2, #0
 80103aa:	dc39      	bgt.n	8010420 <_dtoa_r+0x288>
 80103ac:	f04f 0b01 	mov.w	fp, #1
 80103b0:	46da      	mov	sl, fp
 80103b2:	465a      	mov	r2, fp
 80103b4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80103b8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80103bc:	2100      	movs	r1, #0
 80103be:	2004      	movs	r0, #4
 80103c0:	f100 0614 	add.w	r6, r0, #20
 80103c4:	4296      	cmp	r6, r2
 80103c6:	d930      	bls.n	801042a <_dtoa_r+0x292>
 80103c8:	6079      	str	r1, [r7, #4]
 80103ca:	4648      	mov	r0, r9
 80103cc:	9304      	str	r3, [sp, #16]
 80103ce:	f000 fc83 	bl	8010cd8 <_Balloc>
 80103d2:	9b04      	ldr	r3, [sp, #16]
 80103d4:	4607      	mov	r7, r0
 80103d6:	2800      	cmp	r0, #0
 80103d8:	d146      	bne.n	8010468 <_dtoa_r+0x2d0>
 80103da:	4b22      	ldr	r3, [pc, #136]	@ (8010464 <_dtoa_r+0x2cc>)
 80103dc:	4602      	mov	r2, r0
 80103de:	f240 11af 	movw	r1, #431	@ 0x1af
 80103e2:	e6f2      	b.n	80101ca <_dtoa_r+0x32>
 80103e4:	2201      	movs	r2, #1
 80103e6:	e7dd      	b.n	80103a4 <_dtoa_r+0x20c>
 80103e8:	2200      	movs	r2, #0
 80103ea:	9208      	str	r2, [sp, #32]
 80103ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103ee:	eb08 0b02 	add.w	fp, r8, r2
 80103f2:	f10b 0a01 	add.w	sl, fp, #1
 80103f6:	4652      	mov	r2, sl
 80103f8:	2a01      	cmp	r2, #1
 80103fa:	bfb8      	it	lt
 80103fc:	2201      	movlt	r2, #1
 80103fe:	e7db      	b.n	80103b8 <_dtoa_r+0x220>
 8010400:	2201      	movs	r2, #1
 8010402:	e7f2      	b.n	80103ea <_dtoa_r+0x252>
 8010404:	2401      	movs	r4, #1
 8010406:	2200      	movs	r2, #0
 8010408:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801040c:	f04f 3bff 	mov.w	fp, #4294967295
 8010410:	2100      	movs	r1, #0
 8010412:	46da      	mov	sl, fp
 8010414:	2212      	movs	r2, #18
 8010416:	9109      	str	r1, [sp, #36]	@ 0x24
 8010418:	e7ce      	b.n	80103b8 <_dtoa_r+0x220>
 801041a:	2201      	movs	r2, #1
 801041c:	9208      	str	r2, [sp, #32]
 801041e:	e7f5      	b.n	801040c <_dtoa_r+0x274>
 8010420:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8010424:	46da      	mov	sl, fp
 8010426:	465a      	mov	r2, fp
 8010428:	e7c6      	b.n	80103b8 <_dtoa_r+0x220>
 801042a:	3101      	adds	r1, #1
 801042c:	0040      	lsls	r0, r0, #1
 801042e:	e7c7      	b.n	80103c0 <_dtoa_r+0x228>
 8010430:	636f4361 	.word	0x636f4361
 8010434:	3fd287a7 	.word	0x3fd287a7
 8010438:	8b60c8b3 	.word	0x8b60c8b3
 801043c:	3fc68a28 	.word	0x3fc68a28
 8010440:	509f79fb 	.word	0x509f79fb
 8010444:	3fd34413 	.word	0x3fd34413
 8010448:	080146a9 	.word	0x080146a9
 801044c:	080146c0 	.word	0x080146c0
 8010450:	7ff00000 	.word	0x7ff00000
 8010454:	080146a5 	.word	0x080146a5
 8010458:	08014679 	.word	0x08014679
 801045c:	08014678 	.word	0x08014678
 8010460:	080147b8 	.word	0x080147b8
 8010464:	08014718 	.word	0x08014718
 8010468:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801046c:	f1ba 0f0e 	cmp.w	sl, #14
 8010470:	6010      	str	r0, [r2, #0]
 8010472:	d86f      	bhi.n	8010554 <_dtoa_r+0x3bc>
 8010474:	2c00      	cmp	r4, #0
 8010476:	d06d      	beq.n	8010554 <_dtoa_r+0x3bc>
 8010478:	f1b8 0f00 	cmp.w	r8, #0
 801047c:	f340 80c2 	ble.w	8010604 <_dtoa_r+0x46c>
 8010480:	4aca      	ldr	r2, [pc, #808]	@ (80107ac <_dtoa_r+0x614>)
 8010482:	f008 010f 	and.w	r1, r8, #15
 8010486:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801048a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801048e:	ed92 7b00 	vldr	d7, [r2]
 8010492:	ea4f 1128 	mov.w	r1, r8, asr #4
 8010496:	f000 80a9 	beq.w	80105ec <_dtoa_r+0x454>
 801049a:	4ac5      	ldr	r2, [pc, #788]	@ (80107b0 <_dtoa_r+0x618>)
 801049c:	ed92 6b08 	vldr	d6, [r2, #32]
 80104a0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80104a4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80104a8:	f001 010f 	and.w	r1, r1, #15
 80104ac:	2203      	movs	r2, #3
 80104ae:	48c0      	ldr	r0, [pc, #768]	@ (80107b0 <_dtoa_r+0x618>)
 80104b0:	2900      	cmp	r1, #0
 80104b2:	f040 809d 	bne.w	80105f0 <_dtoa_r+0x458>
 80104b6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80104ba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80104be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80104c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80104c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80104c8:	2900      	cmp	r1, #0
 80104ca:	f000 80c1 	beq.w	8010650 <_dtoa_r+0x4b8>
 80104ce:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80104d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80104d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104da:	f140 80b9 	bpl.w	8010650 <_dtoa_r+0x4b8>
 80104de:	f1ba 0f00 	cmp.w	sl, #0
 80104e2:	f000 80b5 	beq.w	8010650 <_dtoa_r+0x4b8>
 80104e6:	f1bb 0f00 	cmp.w	fp, #0
 80104ea:	dd31      	ble.n	8010550 <_dtoa_r+0x3b8>
 80104ec:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80104f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80104f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80104f8:	f108 31ff 	add.w	r1, r8, #4294967295
 80104fc:	9104      	str	r1, [sp, #16]
 80104fe:	3201      	adds	r2, #1
 8010500:	465c      	mov	r4, fp
 8010502:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010506:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801050a:	ee07 2a90 	vmov	s15, r2
 801050e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010512:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010516:	ee15 2a90 	vmov	r2, s11
 801051a:	ec51 0b15 	vmov	r0, r1, d5
 801051e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8010522:	2c00      	cmp	r4, #0
 8010524:	f040 8098 	bne.w	8010658 <_dtoa_r+0x4c0>
 8010528:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801052c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010530:	ec41 0b17 	vmov	d7, r0, r1
 8010534:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801053c:	f300 8261 	bgt.w	8010a02 <_dtoa_r+0x86a>
 8010540:	eeb1 7b47 	vneg.f64	d7, d7
 8010544:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801054c:	f100 80f5 	bmi.w	801073a <_dtoa_r+0x5a2>
 8010550:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010554:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010556:	2a00      	cmp	r2, #0
 8010558:	f2c0 812c 	blt.w	80107b4 <_dtoa_r+0x61c>
 801055c:	f1b8 0f0e 	cmp.w	r8, #14
 8010560:	f300 8128 	bgt.w	80107b4 <_dtoa_r+0x61c>
 8010564:	4b91      	ldr	r3, [pc, #580]	@ (80107ac <_dtoa_r+0x614>)
 8010566:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801056a:	ed93 6b00 	vldr	d6, [r3]
 801056e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010570:	2b00      	cmp	r3, #0
 8010572:	da03      	bge.n	801057c <_dtoa_r+0x3e4>
 8010574:	f1ba 0f00 	cmp.w	sl, #0
 8010578:	f340 80d2 	ble.w	8010720 <_dtoa_r+0x588>
 801057c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8010580:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010584:	463e      	mov	r6, r7
 8010586:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801058a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801058e:	ee15 3a10 	vmov	r3, s10
 8010592:	3330      	adds	r3, #48	@ 0x30
 8010594:	f806 3b01 	strb.w	r3, [r6], #1
 8010598:	1bf3      	subs	r3, r6, r7
 801059a:	459a      	cmp	sl, r3
 801059c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80105a0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80105a4:	f040 80f8 	bne.w	8010798 <_dtoa_r+0x600>
 80105a8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80105ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80105b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105b4:	f300 80dd 	bgt.w	8010772 <_dtoa_r+0x5da>
 80105b8:	eeb4 7b46 	vcmp.f64	d7, d6
 80105bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105c0:	d104      	bne.n	80105cc <_dtoa_r+0x434>
 80105c2:	ee15 3a10 	vmov	r3, s10
 80105c6:	07db      	lsls	r3, r3, #31
 80105c8:	f100 80d3 	bmi.w	8010772 <_dtoa_r+0x5da>
 80105cc:	9901      	ldr	r1, [sp, #4]
 80105ce:	4648      	mov	r0, r9
 80105d0:	f000 fbc2 	bl	8010d58 <_Bfree>
 80105d4:	2300      	movs	r3, #0
 80105d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80105d8:	7033      	strb	r3, [r6, #0]
 80105da:	f108 0301 	add.w	r3, r8, #1
 80105de:	6013      	str	r3, [r2, #0]
 80105e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	f000 8304 	beq.w	8010bf0 <_dtoa_r+0xa58>
 80105e8:	601e      	str	r6, [r3, #0]
 80105ea:	e301      	b.n	8010bf0 <_dtoa_r+0xa58>
 80105ec:	2202      	movs	r2, #2
 80105ee:	e75e      	b.n	80104ae <_dtoa_r+0x316>
 80105f0:	07cc      	lsls	r4, r1, #31
 80105f2:	d504      	bpl.n	80105fe <_dtoa_r+0x466>
 80105f4:	ed90 6b00 	vldr	d6, [r0]
 80105f8:	3201      	adds	r2, #1
 80105fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80105fe:	1049      	asrs	r1, r1, #1
 8010600:	3008      	adds	r0, #8
 8010602:	e755      	b.n	80104b0 <_dtoa_r+0x318>
 8010604:	d022      	beq.n	801064c <_dtoa_r+0x4b4>
 8010606:	f1c8 0100 	rsb	r1, r8, #0
 801060a:	4a68      	ldr	r2, [pc, #416]	@ (80107ac <_dtoa_r+0x614>)
 801060c:	f001 000f 	and.w	r0, r1, #15
 8010610:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010614:	ed92 7b00 	vldr	d7, [r2]
 8010618:	ee28 7b07 	vmul.f64	d7, d8, d7
 801061c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010620:	4863      	ldr	r0, [pc, #396]	@ (80107b0 <_dtoa_r+0x618>)
 8010622:	1109      	asrs	r1, r1, #4
 8010624:	2400      	movs	r4, #0
 8010626:	2202      	movs	r2, #2
 8010628:	b929      	cbnz	r1, 8010636 <_dtoa_r+0x49e>
 801062a:	2c00      	cmp	r4, #0
 801062c:	f43f af49 	beq.w	80104c2 <_dtoa_r+0x32a>
 8010630:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010634:	e745      	b.n	80104c2 <_dtoa_r+0x32a>
 8010636:	07ce      	lsls	r6, r1, #31
 8010638:	d505      	bpl.n	8010646 <_dtoa_r+0x4ae>
 801063a:	ed90 6b00 	vldr	d6, [r0]
 801063e:	3201      	adds	r2, #1
 8010640:	2401      	movs	r4, #1
 8010642:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010646:	1049      	asrs	r1, r1, #1
 8010648:	3008      	adds	r0, #8
 801064a:	e7ed      	b.n	8010628 <_dtoa_r+0x490>
 801064c:	2202      	movs	r2, #2
 801064e:	e738      	b.n	80104c2 <_dtoa_r+0x32a>
 8010650:	f8cd 8010 	str.w	r8, [sp, #16]
 8010654:	4654      	mov	r4, sl
 8010656:	e754      	b.n	8010502 <_dtoa_r+0x36a>
 8010658:	4a54      	ldr	r2, [pc, #336]	@ (80107ac <_dtoa_r+0x614>)
 801065a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801065e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010662:	9a08      	ldr	r2, [sp, #32]
 8010664:	ec41 0b17 	vmov	d7, r0, r1
 8010668:	443c      	add	r4, r7
 801066a:	b34a      	cbz	r2, 80106c0 <_dtoa_r+0x528>
 801066c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010670:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8010674:	463e      	mov	r6, r7
 8010676:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801067a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801067e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010682:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010686:	ee14 2a90 	vmov	r2, s9
 801068a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801068e:	3230      	adds	r2, #48	@ 0x30
 8010690:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010694:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801069c:	f806 2b01 	strb.w	r2, [r6], #1
 80106a0:	d438      	bmi.n	8010714 <_dtoa_r+0x57c>
 80106a2:	ee32 5b46 	vsub.f64	d5, d2, d6
 80106a6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80106aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ae:	d462      	bmi.n	8010776 <_dtoa_r+0x5de>
 80106b0:	42a6      	cmp	r6, r4
 80106b2:	f43f af4d 	beq.w	8010550 <_dtoa_r+0x3b8>
 80106b6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80106ba:	ee26 6b03 	vmul.f64	d6, d6, d3
 80106be:	e7e0      	b.n	8010682 <_dtoa_r+0x4ea>
 80106c0:	4621      	mov	r1, r4
 80106c2:	463e      	mov	r6, r7
 80106c4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80106c8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80106cc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80106d0:	ee14 2a90 	vmov	r2, s9
 80106d4:	3230      	adds	r2, #48	@ 0x30
 80106d6:	f806 2b01 	strb.w	r2, [r6], #1
 80106da:	42a6      	cmp	r6, r4
 80106dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80106e0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80106e4:	d119      	bne.n	801071a <_dtoa_r+0x582>
 80106e6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80106ea:	ee37 4b05 	vadd.f64	d4, d7, d5
 80106ee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80106f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106f6:	dc3e      	bgt.n	8010776 <_dtoa_r+0x5de>
 80106f8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80106fc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010704:	f57f af24 	bpl.w	8010550 <_dtoa_r+0x3b8>
 8010708:	460e      	mov	r6, r1
 801070a:	3901      	subs	r1, #1
 801070c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010710:	2b30      	cmp	r3, #48	@ 0x30
 8010712:	d0f9      	beq.n	8010708 <_dtoa_r+0x570>
 8010714:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010718:	e758      	b.n	80105cc <_dtoa_r+0x434>
 801071a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801071e:	e7d5      	b.n	80106cc <_dtoa_r+0x534>
 8010720:	d10b      	bne.n	801073a <_dtoa_r+0x5a2>
 8010722:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010726:	ee26 6b07 	vmul.f64	d6, d6, d7
 801072a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801072e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010736:	f2c0 8161 	blt.w	80109fc <_dtoa_r+0x864>
 801073a:	2400      	movs	r4, #0
 801073c:	4625      	mov	r5, r4
 801073e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010740:	43db      	mvns	r3, r3
 8010742:	9304      	str	r3, [sp, #16]
 8010744:	463e      	mov	r6, r7
 8010746:	f04f 0800 	mov.w	r8, #0
 801074a:	4621      	mov	r1, r4
 801074c:	4648      	mov	r0, r9
 801074e:	f000 fb03 	bl	8010d58 <_Bfree>
 8010752:	2d00      	cmp	r5, #0
 8010754:	d0de      	beq.n	8010714 <_dtoa_r+0x57c>
 8010756:	f1b8 0f00 	cmp.w	r8, #0
 801075a:	d005      	beq.n	8010768 <_dtoa_r+0x5d0>
 801075c:	45a8      	cmp	r8, r5
 801075e:	d003      	beq.n	8010768 <_dtoa_r+0x5d0>
 8010760:	4641      	mov	r1, r8
 8010762:	4648      	mov	r0, r9
 8010764:	f000 faf8 	bl	8010d58 <_Bfree>
 8010768:	4629      	mov	r1, r5
 801076a:	4648      	mov	r0, r9
 801076c:	f000 faf4 	bl	8010d58 <_Bfree>
 8010770:	e7d0      	b.n	8010714 <_dtoa_r+0x57c>
 8010772:	f8cd 8010 	str.w	r8, [sp, #16]
 8010776:	4633      	mov	r3, r6
 8010778:	461e      	mov	r6, r3
 801077a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801077e:	2a39      	cmp	r2, #57	@ 0x39
 8010780:	d106      	bne.n	8010790 <_dtoa_r+0x5f8>
 8010782:	429f      	cmp	r7, r3
 8010784:	d1f8      	bne.n	8010778 <_dtoa_r+0x5e0>
 8010786:	9a04      	ldr	r2, [sp, #16]
 8010788:	3201      	adds	r2, #1
 801078a:	9204      	str	r2, [sp, #16]
 801078c:	2230      	movs	r2, #48	@ 0x30
 801078e:	703a      	strb	r2, [r7, #0]
 8010790:	781a      	ldrb	r2, [r3, #0]
 8010792:	3201      	adds	r2, #1
 8010794:	701a      	strb	r2, [r3, #0]
 8010796:	e7bd      	b.n	8010714 <_dtoa_r+0x57c>
 8010798:	ee27 7b04 	vmul.f64	d7, d7, d4
 801079c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80107a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107a4:	f47f aeef 	bne.w	8010586 <_dtoa_r+0x3ee>
 80107a8:	e710      	b.n	80105cc <_dtoa_r+0x434>
 80107aa:	bf00      	nop
 80107ac:	080147b8 	.word	0x080147b8
 80107b0:	08014790 	.word	0x08014790
 80107b4:	9908      	ldr	r1, [sp, #32]
 80107b6:	2900      	cmp	r1, #0
 80107b8:	f000 80e3 	beq.w	8010982 <_dtoa_r+0x7ea>
 80107bc:	9907      	ldr	r1, [sp, #28]
 80107be:	2901      	cmp	r1, #1
 80107c0:	f300 80c8 	bgt.w	8010954 <_dtoa_r+0x7bc>
 80107c4:	2d00      	cmp	r5, #0
 80107c6:	f000 80c1 	beq.w	801094c <_dtoa_r+0x7b4>
 80107ca:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80107ce:	9e05      	ldr	r6, [sp, #20]
 80107d0:	461c      	mov	r4, r3
 80107d2:	9304      	str	r3, [sp, #16]
 80107d4:	9b05      	ldr	r3, [sp, #20]
 80107d6:	4413      	add	r3, r2
 80107d8:	9305      	str	r3, [sp, #20]
 80107da:	9b06      	ldr	r3, [sp, #24]
 80107dc:	2101      	movs	r1, #1
 80107de:	4413      	add	r3, r2
 80107e0:	4648      	mov	r0, r9
 80107e2:	9306      	str	r3, [sp, #24]
 80107e4:	f000 fb6c 	bl	8010ec0 <__i2b>
 80107e8:	9b04      	ldr	r3, [sp, #16]
 80107ea:	4605      	mov	r5, r0
 80107ec:	b166      	cbz	r6, 8010808 <_dtoa_r+0x670>
 80107ee:	9a06      	ldr	r2, [sp, #24]
 80107f0:	2a00      	cmp	r2, #0
 80107f2:	dd09      	ble.n	8010808 <_dtoa_r+0x670>
 80107f4:	42b2      	cmp	r2, r6
 80107f6:	9905      	ldr	r1, [sp, #20]
 80107f8:	bfa8      	it	ge
 80107fa:	4632      	movge	r2, r6
 80107fc:	1a89      	subs	r1, r1, r2
 80107fe:	9105      	str	r1, [sp, #20]
 8010800:	9906      	ldr	r1, [sp, #24]
 8010802:	1ab6      	subs	r6, r6, r2
 8010804:	1a8a      	subs	r2, r1, r2
 8010806:	9206      	str	r2, [sp, #24]
 8010808:	b1fb      	cbz	r3, 801084a <_dtoa_r+0x6b2>
 801080a:	9a08      	ldr	r2, [sp, #32]
 801080c:	2a00      	cmp	r2, #0
 801080e:	f000 80bc 	beq.w	801098a <_dtoa_r+0x7f2>
 8010812:	b19c      	cbz	r4, 801083c <_dtoa_r+0x6a4>
 8010814:	4629      	mov	r1, r5
 8010816:	4622      	mov	r2, r4
 8010818:	4648      	mov	r0, r9
 801081a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801081c:	f000 fc10 	bl	8011040 <__pow5mult>
 8010820:	9a01      	ldr	r2, [sp, #4]
 8010822:	4601      	mov	r1, r0
 8010824:	4605      	mov	r5, r0
 8010826:	4648      	mov	r0, r9
 8010828:	f000 fb60 	bl	8010eec <__multiply>
 801082c:	9901      	ldr	r1, [sp, #4]
 801082e:	9004      	str	r0, [sp, #16]
 8010830:	4648      	mov	r0, r9
 8010832:	f000 fa91 	bl	8010d58 <_Bfree>
 8010836:	9a04      	ldr	r2, [sp, #16]
 8010838:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801083a:	9201      	str	r2, [sp, #4]
 801083c:	1b1a      	subs	r2, r3, r4
 801083e:	d004      	beq.n	801084a <_dtoa_r+0x6b2>
 8010840:	9901      	ldr	r1, [sp, #4]
 8010842:	4648      	mov	r0, r9
 8010844:	f000 fbfc 	bl	8011040 <__pow5mult>
 8010848:	9001      	str	r0, [sp, #4]
 801084a:	2101      	movs	r1, #1
 801084c:	4648      	mov	r0, r9
 801084e:	f000 fb37 	bl	8010ec0 <__i2b>
 8010852:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010854:	4604      	mov	r4, r0
 8010856:	2b00      	cmp	r3, #0
 8010858:	f000 81d0 	beq.w	8010bfc <_dtoa_r+0xa64>
 801085c:	461a      	mov	r2, r3
 801085e:	4601      	mov	r1, r0
 8010860:	4648      	mov	r0, r9
 8010862:	f000 fbed 	bl	8011040 <__pow5mult>
 8010866:	9b07      	ldr	r3, [sp, #28]
 8010868:	2b01      	cmp	r3, #1
 801086a:	4604      	mov	r4, r0
 801086c:	f300 8095 	bgt.w	801099a <_dtoa_r+0x802>
 8010870:	9b02      	ldr	r3, [sp, #8]
 8010872:	2b00      	cmp	r3, #0
 8010874:	f040 808b 	bne.w	801098e <_dtoa_r+0x7f6>
 8010878:	9b03      	ldr	r3, [sp, #12]
 801087a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801087e:	2a00      	cmp	r2, #0
 8010880:	f040 8087 	bne.w	8010992 <_dtoa_r+0x7fa>
 8010884:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010888:	0d12      	lsrs	r2, r2, #20
 801088a:	0512      	lsls	r2, r2, #20
 801088c:	2a00      	cmp	r2, #0
 801088e:	f000 8082 	beq.w	8010996 <_dtoa_r+0x7fe>
 8010892:	9b05      	ldr	r3, [sp, #20]
 8010894:	3301      	adds	r3, #1
 8010896:	9305      	str	r3, [sp, #20]
 8010898:	9b06      	ldr	r3, [sp, #24]
 801089a:	3301      	adds	r3, #1
 801089c:	9306      	str	r3, [sp, #24]
 801089e:	2301      	movs	r3, #1
 80108a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80108a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	f000 81af 	beq.w	8010c08 <_dtoa_r+0xa70>
 80108aa:	6922      	ldr	r2, [r4, #16]
 80108ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80108b0:	6910      	ldr	r0, [r2, #16]
 80108b2:	f000 fab9 	bl	8010e28 <__hi0bits>
 80108b6:	f1c0 0020 	rsb	r0, r0, #32
 80108ba:	9b06      	ldr	r3, [sp, #24]
 80108bc:	4418      	add	r0, r3
 80108be:	f010 001f 	ands.w	r0, r0, #31
 80108c2:	d076      	beq.n	80109b2 <_dtoa_r+0x81a>
 80108c4:	f1c0 0220 	rsb	r2, r0, #32
 80108c8:	2a04      	cmp	r2, #4
 80108ca:	dd69      	ble.n	80109a0 <_dtoa_r+0x808>
 80108cc:	9b05      	ldr	r3, [sp, #20]
 80108ce:	f1c0 001c 	rsb	r0, r0, #28
 80108d2:	4403      	add	r3, r0
 80108d4:	9305      	str	r3, [sp, #20]
 80108d6:	9b06      	ldr	r3, [sp, #24]
 80108d8:	4406      	add	r6, r0
 80108da:	4403      	add	r3, r0
 80108dc:	9306      	str	r3, [sp, #24]
 80108de:	9b05      	ldr	r3, [sp, #20]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	dd05      	ble.n	80108f0 <_dtoa_r+0x758>
 80108e4:	9901      	ldr	r1, [sp, #4]
 80108e6:	461a      	mov	r2, r3
 80108e8:	4648      	mov	r0, r9
 80108ea:	f000 fc03 	bl	80110f4 <__lshift>
 80108ee:	9001      	str	r0, [sp, #4]
 80108f0:	9b06      	ldr	r3, [sp, #24]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	dd05      	ble.n	8010902 <_dtoa_r+0x76a>
 80108f6:	4621      	mov	r1, r4
 80108f8:	461a      	mov	r2, r3
 80108fa:	4648      	mov	r0, r9
 80108fc:	f000 fbfa 	bl	80110f4 <__lshift>
 8010900:	4604      	mov	r4, r0
 8010902:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010904:	2b00      	cmp	r3, #0
 8010906:	d056      	beq.n	80109b6 <_dtoa_r+0x81e>
 8010908:	9801      	ldr	r0, [sp, #4]
 801090a:	4621      	mov	r1, r4
 801090c:	f000 fc5e 	bl	80111cc <__mcmp>
 8010910:	2800      	cmp	r0, #0
 8010912:	da50      	bge.n	80109b6 <_dtoa_r+0x81e>
 8010914:	f108 33ff 	add.w	r3, r8, #4294967295
 8010918:	9304      	str	r3, [sp, #16]
 801091a:	9901      	ldr	r1, [sp, #4]
 801091c:	2300      	movs	r3, #0
 801091e:	220a      	movs	r2, #10
 8010920:	4648      	mov	r0, r9
 8010922:	f000 fa3b 	bl	8010d9c <__multadd>
 8010926:	9b08      	ldr	r3, [sp, #32]
 8010928:	9001      	str	r0, [sp, #4]
 801092a:	2b00      	cmp	r3, #0
 801092c:	f000 816e 	beq.w	8010c0c <_dtoa_r+0xa74>
 8010930:	4629      	mov	r1, r5
 8010932:	2300      	movs	r3, #0
 8010934:	220a      	movs	r2, #10
 8010936:	4648      	mov	r0, r9
 8010938:	f000 fa30 	bl	8010d9c <__multadd>
 801093c:	f1bb 0f00 	cmp.w	fp, #0
 8010940:	4605      	mov	r5, r0
 8010942:	dc64      	bgt.n	8010a0e <_dtoa_r+0x876>
 8010944:	9b07      	ldr	r3, [sp, #28]
 8010946:	2b02      	cmp	r3, #2
 8010948:	dc3e      	bgt.n	80109c8 <_dtoa_r+0x830>
 801094a:	e060      	b.n	8010a0e <_dtoa_r+0x876>
 801094c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801094e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010952:	e73c      	b.n	80107ce <_dtoa_r+0x636>
 8010954:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010958:	42a3      	cmp	r3, r4
 801095a:	bfbf      	itttt	lt
 801095c:	1ae2      	sublt	r2, r4, r3
 801095e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010960:	189b      	addlt	r3, r3, r2
 8010962:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8010964:	bfae      	itee	ge
 8010966:	1b1c      	subge	r4, r3, r4
 8010968:	4623      	movlt	r3, r4
 801096a:	2400      	movlt	r4, #0
 801096c:	f1ba 0f00 	cmp.w	sl, #0
 8010970:	bfb5      	itete	lt
 8010972:	9a05      	ldrlt	r2, [sp, #20]
 8010974:	9e05      	ldrge	r6, [sp, #20]
 8010976:	eba2 060a 	sublt.w	r6, r2, sl
 801097a:	4652      	movge	r2, sl
 801097c:	bfb8      	it	lt
 801097e:	2200      	movlt	r2, #0
 8010980:	e727      	b.n	80107d2 <_dtoa_r+0x63a>
 8010982:	9e05      	ldr	r6, [sp, #20]
 8010984:	9d08      	ldr	r5, [sp, #32]
 8010986:	461c      	mov	r4, r3
 8010988:	e730      	b.n	80107ec <_dtoa_r+0x654>
 801098a:	461a      	mov	r2, r3
 801098c:	e758      	b.n	8010840 <_dtoa_r+0x6a8>
 801098e:	2300      	movs	r3, #0
 8010990:	e786      	b.n	80108a0 <_dtoa_r+0x708>
 8010992:	9b02      	ldr	r3, [sp, #8]
 8010994:	e784      	b.n	80108a0 <_dtoa_r+0x708>
 8010996:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010998:	e783      	b.n	80108a2 <_dtoa_r+0x70a>
 801099a:	2300      	movs	r3, #0
 801099c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801099e:	e784      	b.n	80108aa <_dtoa_r+0x712>
 80109a0:	d09d      	beq.n	80108de <_dtoa_r+0x746>
 80109a2:	9b05      	ldr	r3, [sp, #20]
 80109a4:	321c      	adds	r2, #28
 80109a6:	4413      	add	r3, r2
 80109a8:	9305      	str	r3, [sp, #20]
 80109aa:	9b06      	ldr	r3, [sp, #24]
 80109ac:	4416      	add	r6, r2
 80109ae:	4413      	add	r3, r2
 80109b0:	e794      	b.n	80108dc <_dtoa_r+0x744>
 80109b2:	4602      	mov	r2, r0
 80109b4:	e7f5      	b.n	80109a2 <_dtoa_r+0x80a>
 80109b6:	f1ba 0f00 	cmp.w	sl, #0
 80109ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80109be:	46d3      	mov	fp, sl
 80109c0:	dc21      	bgt.n	8010a06 <_dtoa_r+0x86e>
 80109c2:	9b07      	ldr	r3, [sp, #28]
 80109c4:	2b02      	cmp	r3, #2
 80109c6:	dd1e      	ble.n	8010a06 <_dtoa_r+0x86e>
 80109c8:	f1bb 0f00 	cmp.w	fp, #0
 80109cc:	f47f aeb7 	bne.w	801073e <_dtoa_r+0x5a6>
 80109d0:	4621      	mov	r1, r4
 80109d2:	465b      	mov	r3, fp
 80109d4:	2205      	movs	r2, #5
 80109d6:	4648      	mov	r0, r9
 80109d8:	f000 f9e0 	bl	8010d9c <__multadd>
 80109dc:	4601      	mov	r1, r0
 80109de:	4604      	mov	r4, r0
 80109e0:	9801      	ldr	r0, [sp, #4]
 80109e2:	f000 fbf3 	bl	80111cc <__mcmp>
 80109e6:	2800      	cmp	r0, #0
 80109e8:	f77f aea9 	ble.w	801073e <_dtoa_r+0x5a6>
 80109ec:	463e      	mov	r6, r7
 80109ee:	2331      	movs	r3, #49	@ 0x31
 80109f0:	f806 3b01 	strb.w	r3, [r6], #1
 80109f4:	9b04      	ldr	r3, [sp, #16]
 80109f6:	3301      	adds	r3, #1
 80109f8:	9304      	str	r3, [sp, #16]
 80109fa:	e6a4      	b.n	8010746 <_dtoa_r+0x5ae>
 80109fc:	f8cd 8010 	str.w	r8, [sp, #16]
 8010a00:	4654      	mov	r4, sl
 8010a02:	4625      	mov	r5, r4
 8010a04:	e7f2      	b.n	80109ec <_dtoa_r+0x854>
 8010a06:	9b08      	ldr	r3, [sp, #32]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	f000 8103 	beq.w	8010c14 <_dtoa_r+0xa7c>
 8010a0e:	2e00      	cmp	r6, #0
 8010a10:	dd05      	ble.n	8010a1e <_dtoa_r+0x886>
 8010a12:	4629      	mov	r1, r5
 8010a14:	4632      	mov	r2, r6
 8010a16:	4648      	mov	r0, r9
 8010a18:	f000 fb6c 	bl	80110f4 <__lshift>
 8010a1c:	4605      	mov	r5, r0
 8010a1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d058      	beq.n	8010ad6 <_dtoa_r+0x93e>
 8010a24:	6869      	ldr	r1, [r5, #4]
 8010a26:	4648      	mov	r0, r9
 8010a28:	f000 f956 	bl	8010cd8 <_Balloc>
 8010a2c:	4606      	mov	r6, r0
 8010a2e:	b928      	cbnz	r0, 8010a3c <_dtoa_r+0x8a4>
 8010a30:	4b82      	ldr	r3, [pc, #520]	@ (8010c3c <_dtoa_r+0xaa4>)
 8010a32:	4602      	mov	r2, r0
 8010a34:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010a38:	f7ff bbc7 	b.w	80101ca <_dtoa_r+0x32>
 8010a3c:	692a      	ldr	r2, [r5, #16]
 8010a3e:	3202      	adds	r2, #2
 8010a40:	0092      	lsls	r2, r2, #2
 8010a42:	f105 010c 	add.w	r1, r5, #12
 8010a46:	300c      	adds	r0, #12
 8010a48:	f7ff fb0f 	bl	801006a <memcpy>
 8010a4c:	2201      	movs	r2, #1
 8010a4e:	4631      	mov	r1, r6
 8010a50:	4648      	mov	r0, r9
 8010a52:	f000 fb4f 	bl	80110f4 <__lshift>
 8010a56:	1c7b      	adds	r3, r7, #1
 8010a58:	9305      	str	r3, [sp, #20]
 8010a5a:	eb07 030b 	add.w	r3, r7, fp
 8010a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a60:	9b02      	ldr	r3, [sp, #8]
 8010a62:	f003 0301 	and.w	r3, r3, #1
 8010a66:	46a8      	mov	r8, r5
 8010a68:	9308      	str	r3, [sp, #32]
 8010a6a:	4605      	mov	r5, r0
 8010a6c:	9b05      	ldr	r3, [sp, #20]
 8010a6e:	9801      	ldr	r0, [sp, #4]
 8010a70:	4621      	mov	r1, r4
 8010a72:	f103 3bff 	add.w	fp, r3, #4294967295
 8010a76:	f7ff fb06 	bl	8010086 <quorem>
 8010a7a:	4641      	mov	r1, r8
 8010a7c:	9002      	str	r0, [sp, #8]
 8010a7e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010a82:	9801      	ldr	r0, [sp, #4]
 8010a84:	f000 fba2 	bl	80111cc <__mcmp>
 8010a88:	462a      	mov	r2, r5
 8010a8a:	9006      	str	r0, [sp, #24]
 8010a8c:	4621      	mov	r1, r4
 8010a8e:	4648      	mov	r0, r9
 8010a90:	f000 fbb8 	bl	8011204 <__mdiff>
 8010a94:	68c2      	ldr	r2, [r0, #12]
 8010a96:	4606      	mov	r6, r0
 8010a98:	b9fa      	cbnz	r2, 8010ada <_dtoa_r+0x942>
 8010a9a:	4601      	mov	r1, r0
 8010a9c:	9801      	ldr	r0, [sp, #4]
 8010a9e:	f000 fb95 	bl	80111cc <__mcmp>
 8010aa2:	4602      	mov	r2, r0
 8010aa4:	4631      	mov	r1, r6
 8010aa6:	4648      	mov	r0, r9
 8010aa8:	920a      	str	r2, [sp, #40]	@ 0x28
 8010aaa:	f000 f955 	bl	8010d58 <_Bfree>
 8010aae:	9b07      	ldr	r3, [sp, #28]
 8010ab0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010ab2:	9e05      	ldr	r6, [sp, #20]
 8010ab4:	ea43 0102 	orr.w	r1, r3, r2
 8010ab8:	9b08      	ldr	r3, [sp, #32]
 8010aba:	4319      	orrs	r1, r3
 8010abc:	d10f      	bne.n	8010ade <_dtoa_r+0x946>
 8010abe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010ac2:	d028      	beq.n	8010b16 <_dtoa_r+0x97e>
 8010ac4:	9b06      	ldr	r3, [sp, #24]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	dd02      	ble.n	8010ad0 <_dtoa_r+0x938>
 8010aca:	9b02      	ldr	r3, [sp, #8]
 8010acc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010ad0:	f88b a000 	strb.w	sl, [fp]
 8010ad4:	e639      	b.n	801074a <_dtoa_r+0x5b2>
 8010ad6:	4628      	mov	r0, r5
 8010ad8:	e7bd      	b.n	8010a56 <_dtoa_r+0x8be>
 8010ada:	2201      	movs	r2, #1
 8010adc:	e7e2      	b.n	8010aa4 <_dtoa_r+0x90c>
 8010ade:	9b06      	ldr	r3, [sp, #24]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	db04      	blt.n	8010aee <_dtoa_r+0x956>
 8010ae4:	9907      	ldr	r1, [sp, #28]
 8010ae6:	430b      	orrs	r3, r1
 8010ae8:	9908      	ldr	r1, [sp, #32]
 8010aea:	430b      	orrs	r3, r1
 8010aec:	d120      	bne.n	8010b30 <_dtoa_r+0x998>
 8010aee:	2a00      	cmp	r2, #0
 8010af0:	ddee      	ble.n	8010ad0 <_dtoa_r+0x938>
 8010af2:	9901      	ldr	r1, [sp, #4]
 8010af4:	2201      	movs	r2, #1
 8010af6:	4648      	mov	r0, r9
 8010af8:	f000 fafc 	bl	80110f4 <__lshift>
 8010afc:	4621      	mov	r1, r4
 8010afe:	9001      	str	r0, [sp, #4]
 8010b00:	f000 fb64 	bl	80111cc <__mcmp>
 8010b04:	2800      	cmp	r0, #0
 8010b06:	dc03      	bgt.n	8010b10 <_dtoa_r+0x978>
 8010b08:	d1e2      	bne.n	8010ad0 <_dtoa_r+0x938>
 8010b0a:	f01a 0f01 	tst.w	sl, #1
 8010b0e:	d0df      	beq.n	8010ad0 <_dtoa_r+0x938>
 8010b10:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010b14:	d1d9      	bne.n	8010aca <_dtoa_r+0x932>
 8010b16:	2339      	movs	r3, #57	@ 0x39
 8010b18:	f88b 3000 	strb.w	r3, [fp]
 8010b1c:	4633      	mov	r3, r6
 8010b1e:	461e      	mov	r6, r3
 8010b20:	3b01      	subs	r3, #1
 8010b22:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010b26:	2a39      	cmp	r2, #57	@ 0x39
 8010b28:	d053      	beq.n	8010bd2 <_dtoa_r+0xa3a>
 8010b2a:	3201      	adds	r2, #1
 8010b2c:	701a      	strb	r2, [r3, #0]
 8010b2e:	e60c      	b.n	801074a <_dtoa_r+0x5b2>
 8010b30:	2a00      	cmp	r2, #0
 8010b32:	dd07      	ble.n	8010b44 <_dtoa_r+0x9ac>
 8010b34:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010b38:	d0ed      	beq.n	8010b16 <_dtoa_r+0x97e>
 8010b3a:	f10a 0301 	add.w	r3, sl, #1
 8010b3e:	f88b 3000 	strb.w	r3, [fp]
 8010b42:	e602      	b.n	801074a <_dtoa_r+0x5b2>
 8010b44:	9b05      	ldr	r3, [sp, #20]
 8010b46:	9a05      	ldr	r2, [sp, #20]
 8010b48:	f803 ac01 	strb.w	sl, [r3, #-1]
 8010b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b4e:	4293      	cmp	r3, r2
 8010b50:	d029      	beq.n	8010ba6 <_dtoa_r+0xa0e>
 8010b52:	9901      	ldr	r1, [sp, #4]
 8010b54:	2300      	movs	r3, #0
 8010b56:	220a      	movs	r2, #10
 8010b58:	4648      	mov	r0, r9
 8010b5a:	f000 f91f 	bl	8010d9c <__multadd>
 8010b5e:	45a8      	cmp	r8, r5
 8010b60:	9001      	str	r0, [sp, #4]
 8010b62:	f04f 0300 	mov.w	r3, #0
 8010b66:	f04f 020a 	mov.w	r2, #10
 8010b6a:	4641      	mov	r1, r8
 8010b6c:	4648      	mov	r0, r9
 8010b6e:	d107      	bne.n	8010b80 <_dtoa_r+0x9e8>
 8010b70:	f000 f914 	bl	8010d9c <__multadd>
 8010b74:	4680      	mov	r8, r0
 8010b76:	4605      	mov	r5, r0
 8010b78:	9b05      	ldr	r3, [sp, #20]
 8010b7a:	3301      	adds	r3, #1
 8010b7c:	9305      	str	r3, [sp, #20]
 8010b7e:	e775      	b.n	8010a6c <_dtoa_r+0x8d4>
 8010b80:	f000 f90c 	bl	8010d9c <__multadd>
 8010b84:	4629      	mov	r1, r5
 8010b86:	4680      	mov	r8, r0
 8010b88:	2300      	movs	r3, #0
 8010b8a:	220a      	movs	r2, #10
 8010b8c:	4648      	mov	r0, r9
 8010b8e:	f000 f905 	bl	8010d9c <__multadd>
 8010b92:	4605      	mov	r5, r0
 8010b94:	e7f0      	b.n	8010b78 <_dtoa_r+0x9e0>
 8010b96:	f1bb 0f00 	cmp.w	fp, #0
 8010b9a:	bfcc      	ite	gt
 8010b9c:	465e      	movgt	r6, fp
 8010b9e:	2601      	movle	r6, #1
 8010ba0:	443e      	add	r6, r7
 8010ba2:	f04f 0800 	mov.w	r8, #0
 8010ba6:	9901      	ldr	r1, [sp, #4]
 8010ba8:	2201      	movs	r2, #1
 8010baa:	4648      	mov	r0, r9
 8010bac:	f000 faa2 	bl	80110f4 <__lshift>
 8010bb0:	4621      	mov	r1, r4
 8010bb2:	9001      	str	r0, [sp, #4]
 8010bb4:	f000 fb0a 	bl	80111cc <__mcmp>
 8010bb8:	2800      	cmp	r0, #0
 8010bba:	dcaf      	bgt.n	8010b1c <_dtoa_r+0x984>
 8010bbc:	d102      	bne.n	8010bc4 <_dtoa_r+0xa2c>
 8010bbe:	f01a 0f01 	tst.w	sl, #1
 8010bc2:	d1ab      	bne.n	8010b1c <_dtoa_r+0x984>
 8010bc4:	4633      	mov	r3, r6
 8010bc6:	461e      	mov	r6, r3
 8010bc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010bcc:	2a30      	cmp	r2, #48	@ 0x30
 8010bce:	d0fa      	beq.n	8010bc6 <_dtoa_r+0xa2e>
 8010bd0:	e5bb      	b.n	801074a <_dtoa_r+0x5b2>
 8010bd2:	429f      	cmp	r7, r3
 8010bd4:	d1a3      	bne.n	8010b1e <_dtoa_r+0x986>
 8010bd6:	9b04      	ldr	r3, [sp, #16]
 8010bd8:	3301      	adds	r3, #1
 8010bda:	9304      	str	r3, [sp, #16]
 8010bdc:	2331      	movs	r3, #49	@ 0x31
 8010bde:	703b      	strb	r3, [r7, #0]
 8010be0:	e5b3      	b.n	801074a <_dtoa_r+0x5b2>
 8010be2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010be4:	4f16      	ldr	r7, [pc, #88]	@ (8010c40 <_dtoa_r+0xaa8>)
 8010be6:	b11b      	cbz	r3, 8010bf0 <_dtoa_r+0xa58>
 8010be8:	f107 0308 	add.w	r3, r7, #8
 8010bec:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010bee:	6013      	str	r3, [r2, #0]
 8010bf0:	4638      	mov	r0, r7
 8010bf2:	b011      	add	sp, #68	@ 0x44
 8010bf4:	ecbd 8b02 	vpop	{d8}
 8010bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bfc:	9b07      	ldr	r3, [sp, #28]
 8010bfe:	2b01      	cmp	r3, #1
 8010c00:	f77f ae36 	ble.w	8010870 <_dtoa_r+0x6d8>
 8010c04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010c08:	2001      	movs	r0, #1
 8010c0a:	e656      	b.n	80108ba <_dtoa_r+0x722>
 8010c0c:	f1bb 0f00 	cmp.w	fp, #0
 8010c10:	f77f aed7 	ble.w	80109c2 <_dtoa_r+0x82a>
 8010c14:	463e      	mov	r6, r7
 8010c16:	9801      	ldr	r0, [sp, #4]
 8010c18:	4621      	mov	r1, r4
 8010c1a:	f7ff fa34 	bl	8010086 <quorem>
 8010c1e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010c22:	f806 ab01 	strb.w	sl, [r6], #1
 8010c26:	1bf2      	subs	r2, r6, r7
 8010c28:	4593      	cmp	fp, r2
 8010c2a:	ddb4      	ble.n	8010b96 <_dtoa_r+0x9fe>
 8010c2c:	9901      	ldr	r1, [sp, #4]
 8010c2e:	2300      	movs	r3, #0
 8010c30:	220a      	movs	r2, #10
 8010c32:	4648      	mov	r0, r9
 8010c34:	f000 f8b2 	bl	8010d9c <__multadd>
 8010c38:	9001      	str	r0, [sp, #4]
 8010c3a:	e7ec      	b.n	8010c16 <_dtoa_r+0xa7e>
 8010c3c:	08014718 	.word	0x08014718
 8010c40:	0801469c 	.word	0x0801469c

08010c44 <_free_r>:
 8010c44:	b538      	push	{r3, r4, r5, lr}
 8010c46:	4605      	mov	r5, r0
 8010c48:	2900      	cmp	r1, #0
 8010c4a:	d041      	beq.n	8010cd0 <_free_r+0x8c>
 8010c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c50:	1f0c      	subs	r4, r1, #4
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	bfb8      	it	lt
 8010c56:	18e4      	addlt	r4, r4, r3
 8010c58:	f7fe fbfc 	bl	800f454 <__malloc_lock>
 8010c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8010cd4 <_free_r+0x90>)
 8010c5e:	6813      	ldr	r3, [r2, #0]
 8010c60:	b933      	cbnz	r3, 8010c70 <_free_r+0x2c>
 8010c62:	6063      	str	r3, [r4, #4]
 8010c64:	6014      	str	r4, [r2, #0]
 8010c66:	4628      	mov	r0, r5
 8010c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c6c:	f7fe bbf8 	b.w	800f460 <__malloc_unlock>
 8010c70:	42a3      	cmp	r3, r4
 8010c72:	d908      	bls.n	8010c86 <_free_r+0x42>
 8010c74:	6820      	ldr	r0, [r4, #0]
 8010c76:	1821      	adds	r1, r4, r0
 8010c78:	428b      	cmp	r3, r1
 8010c7a:	bf01      	itttt	eq
 8010c7c:	6819      	ldreq	r1, [r3, #0]
 8010c7e:	685b      	ldreq	r3, [r3, #4]
 8010c80:	1809      	addeq	r1, r1, r0
 8010c82:	6021      	streq	r1, [r4, #0]
 8010c84:	e7ed      	b.n	8010c62 <_free_r+0x1e>
 8010c86:	461a      	mov	r2, r3
 8010c88:	685b      	ldr	r3, [r3, #4]
 8010c8a:	b10b      	cbz	r3, 8010c90 <_free_r+0x4c>
 8010c8c:	42a3      	cmp	r3, r4
 8010c8e:	d9fa      	bls.n	8010c86 <_free_r+0x42>
 8010c90:	6811      	ldr	r1, [r2, #0]
 8010c92:	1850      	adds	r0, r2, r1
 8010c94:	42a0      	cmp	r0, r4
 8010c96:	d10b      	bne.n	8010cb0 <_free_r+0x6c>
 8010c98:	6820      	ldr	r0, [r4, #0]
 8010c9a:	4401      	add	r1, r0
 8010c9c:	1850      	adds	r0, r2, r1
 8010c9e:	4283      	cmp	r3, r0
 8010ca0:	6011      	str	r1, [r2, #0]
 8010ca2:	d1e0      	bne.n	8010c66 <_free_r+0x22>
 8010ca4:	6818      	ldr	r0, [r3, #0]
 8010ca6:	685b      	ldr	r3, [r3, #4]
 8010ca8:	6053      	str	r3, [r2, #4]
 8010caa:	4408      	add	r0, r1
 8010cac:	6010      	str	r0, [r2, #0]
 8010cae:	e7da      	b.n	8010c66 <_free_r+0x22>
 8010cb0:	d902      	bls.n	8010cb8 <_free_r+0x74>
 8010cb2:	230c      	movs	r3, #12
 8010cb4:	602b      	str	r3, [r5, #0]
 8010cb6:	e7d6      	b.n	8010c66 <_free_r+0x22>
 8010cb8:	6820      	ldr	r0, [r4, #0]
 8010cba:	1821      	adds	r1, r4, r0
 8010cbc:	428b      	cmp	r3, r1
 8010cbe:	bf04      	itt	eq
 8010cc0:	6819      	ldreq	r1, [r3, #0]
 8010cc2:	685b      	ldreq	r3, [r3, #4]
 8010cc4:	6063      	str	r3, [r4, #4]
 8010cc6:	bf04      	itt	eq
 8010cc8:	1809      	addeq	r1, r1, r0
 8010cca:	6021      	streq	r1, [r4, #0]
 8010ccc:	6054      	str	r4, [r2, #4]
 8010cce:	e7ca      	b.n	8010c66 <_free_r+0x22>
 8010cd0:	bd38      	pop	{r3, r4, r5, pc}
 8010cd2:	bf00      	nop
 8010cd4:	24005f98 	.word	0x24005f98

08010cd8 <_Balloc>:
 8010cd8:	b570      	push	{r4, r5, r6, lr}
 8010cda:	69c6      	ldr	r6, [r0, #28]
 8010cdc:	4604      	mov	r4, r0
 8010cde:	460d      	mov	r5, r1
 8010ce0:	b976      	cbnz	r6, 8010d00 <_Balloc+0x28>
 8010ce2:	2010      	movs	r0, #16
 8010ce4:	f7fe fb0c 	bl	800f300 <malloc>
 8010ce8:	4602      	mov	r2, r0
 8010cea:	61e0      	str	r0, [r4, #28]
 8010cec:	b920      	cbnz	r0, 8010cf8 <_Balloc+0x20>
 8010cee:	4b18      	ldr	r3, [pc, #96]	@ (8010d50 <_Balloc+0x78>)
 8010cf0:	4818      	ldr	r0, [pc, #96]	@ (8010d54 <_Balloc+0x7c>)
 8010cf2:	216b      	movs	r1, #107	@ 0x6b
 8010cf4:	f000 fd90 	bl	8011818 <__assert_func>
 8010cf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010cfc:	6006      	str	r6, [r0, #0]
 8010cfe:	60c6      	str	r6, [r0, #12]
 8010d00:	69e6      	ldr	r6, [r4, #28]
 8010d02:	68f3      	ldr	r3, [r6, #12]
 8010d04:	b183      	cbz	r3, 8010d28 <_Balloc+0x50>
 8010d06:	69e3      	ldr	r3, [r4, #28]
 8010d08:	68db      	ldr	r3, [r3, #12]
 8010d0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010d0e:	b9b8      	cbnz	r0, 8010d40 <_Balloc+0x68>
 8010d10:	2101      	movs	r1, #1
 8010d12:	fa01 f605 	lsl.w	r6, r1, r5
 8010d16:	1d72      	adds	r2, r6, #5
 8010d18:	0092      	lsls	r2, r2, #2
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	f000 fd9a 	bl	8011854 <_calloc_r>
 8010d20:	b160      	cbz	r0, 8010d3c <_Balloc+0x64>
 8010d22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010d26:	e00e      	b.n	8010d46 <_Balloc+0x6e>
 8010d28:	2221      	movs	r2, #33	@ 0x21
 8010d2a:	2104      	movs	r1, #4
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f000 fd91 	bl	8011854 <_calloc_r>
 8010d32:	69e3      	ldr	r3, [r4, #28]
 8010d34:	60f0      	str	r0, [r6, #12]
 8010d36:	68db      	ldr	r3, [r3, #12]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d1e4      	bne.n	8010d06 <_Balloc+0x2e>
 8010d3c:	2000      	movs	r0, #0
 8010d3e:	bd70      	pop	{r4, r5, r6, pc}
 8010d40:	6802      	ldr	r2, [r0, #0]
 8010d42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d46:	2300      	movs	r3, #0
 8010d48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010d4c:	e7f7      	b.n	8010d3e <_Balloc+0x66>
 8010d4e:	bf00      	nop
 8010d50:	080146a9 	.word	0x080146a9
 8010d54:	08014729 	.word	0x08014729

08010d58 <_Bfree>:
 8010d58:	b570      	push	{r4, r5, r6, lr}
 8010d5a:	69c6      	ldr	r6, [r0, #28]
 8010d5c:	4605      	mov	r5, r0
 8010d5e:	460c      	mov	r4, r1
 8010d60:	b976      	cbnz	r6, 8010d80 <_Bfree+0x28>
 8010d62:	2010      	movs	r0, #16
 8010d64:	f7fe facc 	bl	800f300 <malloc>
 8010d68:	4602      	mov	r2, r0
 8010d6a:	61e8      	str	r0, [r5, #28]
 8010d6c:	b920      	cbnz	r0, 8010d78 <_Bfree+0x20>
 8010d6e:	4b09      	ldr	r3, [pc, #36]	@ (8010d94 <_Bfree+0x3c>)
 8010d70:	4809      	ldr	r0, [pc, #36]	@ (8010d98 <_Bfree+0x40>)
 8010d72:	218f      	movs	r1, #143	@ 0x8f
 8010d74:	f000 fd50 	bl	8011818 <__assert_func>
 8010d78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d7c:	6006      	str	r6, [r0, #0]
 8010d7e:	60c6      	str	r6, [r0, #12]
 8010d80:	b13c      	cbz	r4, 8010d92 <_Bfree+0x3a>
 8010d82:	69eb      	ldr	r3, [r5, #28]
 8010d84:	6862      	ldr	r2, [r4, #4]
 8010d86:	68db      	ldr	r3, [r3, #12]
 8010d88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010d8c:	6021      	str	r1, [r4, #0]
 8010d8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010d92:	bd70      	pop	{r4, r5, r6, pc}
 8010d94:	080146a9 	.word	0x080146a9
 8010d98:	08014729 	.word	0x08014729

08010d9c <__multadd>:
 8010d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010da0:	690d      	ldr	r5, [r1, #16]
 8010da2:	4607      	mov	r7, r0
 8010da4:	460c      	mov	r4, r1
 8010da6:	461e      	mov	r6, r3
 8010da8:	f101 0c14 	add.w	ip, r1, #20
 8010dac:	2000      	movs	r0, #0
 8010dae:	f8dc 3000 	ldr.w	r3, [ip]
 8010db2:	b299      	uxth	r1, r3
 8010db4:	fb02 6101 	mla	r1, r2, r1, r6
 8010db8:	0c1e      	lsrs	r6, r3, #16
 8010dba:	0c0b      	lsrs	r3, r1, #16
 8010dbc:	fb02 3306 	mla	r3, r2, r6, r3
 8010dc0:	b289      	uxth	r1, r1
 8010dc2:	3001      	adds	r0, #1
 8010dc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010dc8:	4285      	cmp	r5, r0
 8010dca:	f84c 1b04 	str.w	r1, [ip], #4
 8010dce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010dd2:	dcec      	bgt.n	8010dae <__multadd+0x12>
 8010dd4:	b30e      	cbz	r6, 8010e1a <__multadd+0x7e>
 8010dd6:	68a3      	ldr	r3, [r4, #8]
 8010dd8:	42ab      	cmp	r3, r5
 8010dda:	dc19      	bgt.n	8010e10 <__multadd+0x74>
 8010ddc:	6861      	ldr	r1, [r4, #4]
 8010dde:	4638      	mov	r0, r7
 8010de0:	3101      	adds	r1, #1
 8010de2:	f7ff ff79 	bl	8010cd8 <_Balloc>
 8010de6:	4680      	mov	r8, r0
 8010de8:	b928      	cbnz	r0, 8010df6 <__multadd+0x5a>
 8010dea:	4602      	mov	r2, r0
 8010dec:	4b0c      	ldr	r3, [pc, #48]	@ (8010e20 <__multadd+0x84>)
 8010dee:	480d      	ldr	r0, [pc, #52]	@ (8010e24 <__multadd+0x88>)
 8010df0:	21ba      	movs	r1, #186	@ 0xba
 8010df2:	f000 fd11 	bl	8011818 <__assert_func>
 8010df6:	6922      	ldr	r2, [r4, #16]
 8010df8:	3202      	adds	r2, #2
 8010dfa:	f104 010c 	add.w	r1, r4, #12
 8010dfe:	0092      	lsls	r2, r2, #2
 8010e00:	300c      	adds	r0, #12
 8010e02:	f7ff f932 	bl	801006a <memcpy>
 8010e06:	4621      	mov	r1, r4
 8010e08:	4638      	mov	r0, r7
 8010e0a:	f7ff ffa5 	bl	8010d58 <_Bfree>
 8010e0e:	4644      	mov	r4, r8
 8010e10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010e14:	3501      	adds	r5, #1
 8010e16:	615e      	str	r6, [r3, #20]
 8010e18:	6125      	str	r5, [r4, #16]
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e20:	08014718 	.word	0x08014718
 8010e24:	08014729 	.word	0x08014729

08010e28 <__hi0bits>:
 8010e28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	bf36      	itet	cc
 8010e30:	0403      	lslcc	r3, r0, #16
 8010e32:	2000      	movcs	r0, #0
 8010e34:	2010      	movcc	r0, #16
 8010e36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010e3a:	bf3c      	itt	cc
 8010e3c:	021b      	lslcc	r3, r3, #8
 8010e3e:	3008      	addcc	r0, #8
 8010e40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010e44:	bf3c      	itt	cc
 8010e46:	011b      	lslcc	r3, r3, #4
 8010e48:	3004      	addcc	r0, #4
 8010e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010e4e:	bf3c      	itt	cc
 8010e50:	009b      	lslcc	r3, r3, #2
 8010e52:	3002      	addcc	r0, #2
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	db05      	blt.n	8010e64 <__hi0bits+0x3c>
 8010e58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010e5c:	f100 0001 	add.w	r0, r0, #1
 8010e60:	bf08      	it	eq
 8010e62:	2020      	moveq	r0, #32
 8010e64:	4770      	bx	lr

08010e66 <__lo0bits>:
 8010e66:	6803      	ldr	r3, [r0, #0]
 8010e68:	4602      	mov	r2, r0
 8010e6a:	f013 0007 	ands.w	r0, r3, #7
 8010e6e:	d00b      	beq.n	8010e88 <__lo0bits+0x22>
 8010e70:	07d9      	lsls	r1, r3, #31
 8010e72:	d421      	bmi.n	8010eb8 <__lo0bits+0x52>
 8010e74:	0798      	lsls	r0, r3, #30
 8010e76:	bf49      	itett	mi
 8010e78:	085b      	lsrmi	r3, r3, #1
 8010e7a:	089b      	lsrpl	r3, r3, #2
 8010e7c:	2001      	movmi	r0, #1
 8010e7e:	6013      	strmi	r3, [r2, #0]
 8010e80:	bf5c      	itt	pl
 8010e82:	6013      	strpl	r3, [r2, #0]
 8010e84:	2002      	movpl	r0, #2
 8010e86:	4770      	bx	lr
 8010e88:	b299      	uxth	r1, r3
 8010e8a:	b909      	cbnz	r1, 8010e90 <__lo0bits+0x2a>
 8010e8c:	0c1b      	lsrs	r3, r3, #16
 8010e8e:	2010      	movs	r0, #16
 8010e90:	b2d9      	uxtb	r1, r3
 8010e92:	b909      	cbnz	r1, 8010e98 <__lo0bits+0x32>
 8010e94:	3008      	adds	r0, #8
 8010e96:	0a1b      	lsrs	r3, r3, #8
 8010e98:	0719      	lsls	r1, r3, #28
 8010e9a:	bf04      	itt	eq
 8010e9c:	091b      	lsreq	r3, r3, #4
 8010e9e:	3004      	addeq	r0, #4
 8010ea0:	0799      	lsls	r1, r3, #30
 8010ea2:	bf04      	itt	eq
 8010ea4:	089b      	lsreq	r3, r3, #2
 8010ea6:	3002      	addeq	r0, #2
 8010ea8:	07d9      	lsls	r1, r3, #31
 8010eaa:	d403      	bmi.n	8010eb4 <__lo0bits+0x4e>
 8010eac:	085b      	lsrs	r3, r3, #1
 8010eae:	f100 0001 	add.w	r0, r0, #1
 8010eb2:	d003      	beq.n	8010ebc <__lo0bits+0x56>
 8010eb4:	6013      	str	r3, [r2, #0]
 8010eb6:	4770      	bx	lr
 8010eb8:	2000      	movs	r0, #0
 8010eba:	4770      	bx	lr
 8010ebc:	2020      	movs	r0, #32
 8010ebe:	4770      	bx	lr

08010ec0 <__i2b>:
 8010ec0:	b510      	push	{r4, lr}
 8010ec2:	460c      	mov	r4, r1
 8010ec4:	2101      	movs	r1, #1
 8010ec6:	f7ff ff07 	bl	8010cd8 <_Balloc>
 8010eca:	4602      	mov	r2, r0
 8010ecc:	b928      	cbnz	r0, 8010eda <__i2b+0x1a>
 8010ece:	4b05      	ldr	r3, [pc, #20]	@ (8010ee4 <__i2b+0x24>)
 8010ed0:	4805      	ldr	r0, [pc, #20]	@ (8010ee8 <__i2b+0x28>)
 8010ed2:	f240 1145 	movw	r1, #325	@ 0x145
 8010ed6:	f000 fc9f 	bl	8011818 <__assert_func>
 8010eda:	2301      	movs	r3, #1
 8010edc:	6144      	str	r4, [r0, #20]
 8010ede:	6103      	str	r3, [r0, #16]
 8010ee0:	bd10      	pop	{r4, pc}
 8010ee2:	bf00      	nop
 8010ee4:	08014718 	.word	0x08014718
 8010ee8:	08014729 	.word	0x08014729

08010eec <__multiply>:
 8010eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ef0:	4614      	mov	r4, r2
 8010ef2:	690a      	ldr	r2, [r1, #16]
 8010ef4:	6923      	ldr	r3, [r4, #16]
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	bfa8      	it	ge
 8010efa:	4623      	movge	r3, r4
 8010efc:	460f      	mov	r7, r1
 8010efe:	bfa4      	itt	ge
 8010f00:	460c      	movge	r4, r1
 8010f02:	461f      	movge	r7, r3
 8010f04:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010f08:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010f0c:	68a3      	ldr	r3, [r4, #8]
 8010f0e:	6861      	ldr	r1, [r4, #4]
 8010f10:	eb0a 0609 	add.w	r6, sl, r9
 8010f14:	42b3      	cmp	r3, r6
 8010f16:	b085      	sub	sp, #20
 8010f18:	bfb8      	it	lt
 8010f1a:	3101      	addlt	r1, #1
 8010f1c:	f7ff fedc 	bl	8010cd8 <_Balloc>
 8010f20:	b930      	cbnz	r0, 8010f30 <__multiply+0x44>
 8010f22:	4602      	mov	r2, r0
 8010f24:	4b44      	ldr	r3, [pc, #272]	@ (8011038 <__multiply+0x14c>)
 8010f26:	4845      	ldr	r0, [pc, #276]	@ (801103c <__multiply+0x150>)
 8010f28:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010f2c:	f000 fc74 	bl	8011818 <__assert_func>
 8010f30:	f100 0514 	add.w	r5, r0, #20
 8010f34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010f38:	462b      	mov	r3, r5
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	4543      	cmp	r3, r8
 8010f3e:	d321      	bcc.n	8010f84 <__multiply+0x98>
 8010f40:	f107 0114 	add.w	r1, r7, #20
 8010f44:	f104 0214 	add.w	r2, r4, #20
 8010f48:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010f4c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010f50:	9302      	str	r3, [sp, #8]
 8010f52:	1b13      	subs	r3, r2, r4
 8010f54:	3b15      	subs	r3, #21
 8010f56:	f023 0303 	bic.w	r3, r3, #3
 8010f5a:	3304      	adds	r3, #4
 8010f5c:	f104 0715 	add.w	r7, r4, #21
 8010f60:	42ba      	cmp	r2, r7
 8010f62:	bf38      	it	cc
 8010f64:	2304      	movcc	r3, #4
 8010f66:	9301      	str	r3, [sp, #4]
 8010f68:	9b02      	ldr	r3, [sp, #8]
 8010f6a:	9103      	str	r1, [sp, #12]
 8010f6c:	428b      	cmp	r3, r1
 8010f6e:	d80c      	bhi.n	8010f8a <__multiply+0x9e>
 8010f70:	2e00      	cmp	r6, #0
 8010f72:	dd03      	ble.n	8010f7c <__multiply+0x90>
 8010f74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d05b      	beq.n	8011034 <__multiply+0x148>
 8010f7c:	6106      	str	r6, [r0, #16]
 8010f7e:	b005      	add	sp, #20
 8010f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f84:	f843 2b04 	str.w	r2, [r3], #4
 8010f88:	e7d8      	b.n	8010f3c <__multiply+0x50>
 8010f8a:	f8b1 a000 	ldrh.w	sl, [r1]
 8010f8e:	f1ba 0f00 	cmp.w	sl, #0
 8010f92:	d024      	beq.n	8010fde <__multiply+0xf2>
 8010f94:	f104 0e14 	add.w	lr, r4, #20
 8010f98:	46a9      	mov	r9, r5
 8010f9a:	f04f 0c00 	mov.w	ip, #0
 8010f9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010fa2:	f8d9 3000 	ldr.w	r3, [r9]
 8010fa6:	fa1f fb87 	uxth.w	fp, r7
 8010faa:	b29b      	uxth	r3, r3
 8010fac:	fb0a 330b 	mla	r3, sl, fp, r3
 8010fb0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010fb4:	f8d9 7000 	ldr.w	r7, [r9]
 8010fb8:	4463      	add	r3, ip
 8010fba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010fbe:	fb0a c70b 	mla	r7, sl, fp, ip
 8010fc2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010fc6:	b29b      	uxth	r3, r3
 8010fc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010fcc:	4572      	cmp	r2, lr
 8010fce:	f849 3b04 	str.w	r3, [r9], #4
 8010fd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010fd6:	d8e2      	bhi.n	8010f9e <__multiply+0xb2>
 8010fd8:	9b01      	ldr	r3, [sp, #4]
 8010fda:	f845 c003 	str.w	ip, [r5, r3]
 8010fde:	9b03      	ldr	r3, [sp, #12]
 8010fe0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010fe4:	3104      	adds	r1, #4
 8010fe6:	f1b9 0f00 	cmp.w	r9, #0
 8010fea:	d021      	beq.n	8011030 <__multiply+0x144>
 8010fec:	682b      	ldr	r3, [r5, #0]
 8010fee:	f104 0c14 	add.w	ip, r4, #20
 8010ff2:	46ae      	mov	lr, r5
 8010ff4:	f04f 0a00 	mov.w	sl, #0
 8010ff8:	f8bc b000 	ldrh.w	fp, [ip]
 8010ffc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011000:	fb09 770b 	mla	r7, r9, fp, r7
 8011004:	4457      	add	r7, sl
 8011006:	b29b      	uxth	r3, r3
 8011008:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801100c:	f84e 3b04 	str.w	r3, [lr], #4
 8011010:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011014:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011018:	f8be 3000 	ldrh.w	r3, [lr]
 801101c:	fb09 330a 	mla	r3, r9, sl, r3
 8011020:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011024:	4562      	cmp	r2, ip
 8011026:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801102a:	d8e5      	bhi.n	8010ff8 <__multiply+0x10c>
 801102c:	9f01      	ldr	r7, [sp, #4]
 801102e:	51eb      	str	r3, [r5, r7]
 8011030:	3504      	adds	r5, #4
 8011032:	e799      	b.n	8010f68 <__multiply+0x7c>
 8011034:	3e01      	subs	r6, #1
 8011036:	e79b      	b.n	8010f70 <__multiply+0x84>
 8011038:	08014718 	.word	0x08014718
 801103c:	08014729 	.word	0x08014729

08011040 <__pow5mult>:
 8011040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011044:	4615      	mov	r5, r2
 8011046:	f012 0203 	ands.w	r2, r2, #3
 801104a:	4607      	mov	r7, r0
 801104c:	460e      	mov	r6, r1
 801104e:	d007      	beq.n	8011060 <__pow5mult+0x20>
 8011050:	4c25      	ldr	r4, [pc, #148]	@ (80110e8 <__pow5mult+0xa8>)
 8011052:	3a01      	subs	r2, #1
 8011054:	2300      	movs	r3, #0
 8011056:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801105a:	f7ff fe9f 	bl	8010d9c <__multadd>
 801105e:	4606      	mov	r6, r0
 8011060:	10ad      	asrs	r5, r5, #2
 8011062:	d03d      	beq.n	80110e0 <__pow5mult+0xa0>
 8011064:	69fc      	ldr	r4, [r7, #28]
 8011066:	b97c      	cbnz	r4, 8011088 <__pow5mult+0x48>
 8011068:	2010      	movs	r0, #16
 801106a:	f7fe f949 	bl	800f300 <malloc>
 801106e:	4602      	mov	r2, r0
 8011070:	61f8      	str	r0, [r7, #28]
 8011072:	b928      	cbnz	r0, 8011080 <__pow5mult+0x40>
 8011074:	4b1d      	ldr	r3, [pc, #116]	@ (80110ec <__pow5mult+0xac>)
 8011076:	481e      	ldr	r0, [pc, #120]	@ (80110f0 <__pow5mult+0xb0>)
 8011078:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801107c:	f000 fbcc 	bl	8011818 <__assert_func>
 8011080:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011084:	6004      	str	r4, [r0, #0]
 8011086:	60c4      	str	r4, [r0, #12]
 8011088:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801108c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011090:	b94c      	cbnz	r4, 80110a6 <__pow5mult+0x66>
 8011092:	f240 2171 	movw	r1, #625	@ 0x271
 8011096:	4638      	mov	r0, r7
 8011098:	f7ff ff12 	bl	8010ec0 <__i2b>
 801109c:	2300      	movs	r3, #0
 801109e:	f8c8 0008 	str.w	r0, [r8, #8]
 80110a2:	4604      	mov	r4, r0
 80110a4:	6003      	str	r3, [r0, #0]
 80110a6:	f04f 0900 	mov.w	r9, #0
 80110aa:	07eb      	lsls	r3, r5, #31
 80110ac:	d50a      	bpl.n	80110c4 <__pow5mult+0x84>
 80110ae:	4631      	mov	r1, r6
 80110b0:	4622      	mov	r2, r4
 80110b2:	4638      	mov	r0, r7
 80110b4:	f7ff ff1a 	bl	8010eec <__multiply>
 80110b8:	4631      	mov	r1, r6
 80110ba:	4680      	mov	r8, r0
 80110bc:	4638      	mov	r0, r7
 80110be:	f7ff fe4b 	bl	8010d58 <_Bfree>
 80110c2:	4646      	mov	r6, r8
 80110c4:	106d      	asrs	r5, r5, #1
 80110c6:	d00b      	beq.n	80110e0 <__pow5mult+0xa0>
 80110c8:	6820      	ldr	r0, [r4, #0]
 80110ca:	b938      	cbnz	r0, 80110dc <__pow5mult+0x9c>
 80110cc:	4622      	mov	r2, r4
 80110ce:	4621      	mov	r1, r4
 80110d0:	4638      	mov	r0, r7
 80110d2:	f7ff ff0b 	bl	8010eec <__multiply>
 80110d6:	6020      	str	r0, [r4, #0]
 80110d8:	f8c0 9000 	str.w	r9, [r0]
 80110dc:	4604      	mov	r4, r0
 80110de:	e7e4      	b.n	80110aa <__pow5mult+0x6a>
 80110e0:	4630      	mov	r0, r6
 80110e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110e6:	bf00      	nop
 80110e8:	08014784 	.word	0x08014784
 80110ec:	080146a9 	.word	0x080146a9
 80110f0:	08014729 	.word	0x08014729

080110f4 <__lshift>:
 80110f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110f8:	460c      	mov	r4, r1
 80110fa:	6849      	ldr	r1, [r1, #4]
 80110fc:	6923      	ldr	r3, [r4, #16]
 80110fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011102:	68a3      	ldr	r3, [r4, #8]
 8011104:	4607      	mov	r7, r0
 8011106:	4691      	mov	r9, r2
 8011108:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801110c:	f108 0601 	add.w	r6, r8, #1
 8011110:	42b3      	cmp	r3, r6
 8011112:	db0b      	blt.n	801112c <__lshift+0x38>
 8011114:	4638      	mov	r0, r7
 8011116:	f7ff fddf 	bl	8010cd8 <_Balloc>
 801111a:	4605      	mov	r5, r0
 801111c:	b948      	cbnz	r0, 8011132 <__lshift+0x3e>
 801111e:	4602      	mov	r2, r0
 8011120:	4b28      	ldr	r3, [pc, #160]	@ (80111c4 <__lshift+0xd0>)
 8011122:	4829      	ldr	r0, [pc, #164]	@ (80111c8 <__lshift+0xd4>)
 8011124:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011128:	f000 fb76 	bl	8011818 <__assert_func>
 801112c:	3101      	adds	r1, #1
 801112e:	005b      	lsls	r3, r3, #1
 8011130:	e7ee      	b.n	8011110 <__lshift+0x1c>
 8011132:	2300      	movs	r3, #0
 8011134:	f100 0114 	add.w	r1, r0, #20
 8011138:	f100 0210 	add.w	r2, r0, #16
 801113c:	4618      	mov	r0, r3
 801113e:	4553      	cmp	r3, sl
 8011140:	db33      	blt.n	80111aa <__lshift+0xb6>
 8011142:	6920      	ldr	r0, [r4, #16]
 8011144:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011148:	f104 0314 	add.w	r3, r4, #20
 801114c:	f019 091f 	ands.w	r9, r9, #31
 8011150:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011154:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011158:	d02b      	beq.n	80111b2 <__lshift+0xbe>
 801115a:	f1c9 0e20 	rsb	lr, r9, #32
 801115e:	468a      	mov	sl, r1
 8011160:	2200      	movs	r2, #0
 8011162:	6818      	ldr	r0, [r3, #0]
 8011164:	fa00 f009 	lsl.w	r0, r0, r9
 8011168:	4310      	orrs	r0, r2
 801116a:	f84a 0b04 	str.w	r0, [sl], #4
 801116e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011172:	459c      	cmp	ip, r3
 8011174:	fa22 f20e 	lsr.w	r2, r2, lr
 8011178:	d8f3      	bhi.n	8011162 <__lshift+0x6e>
 801117a:	ebac 0304 	sub.w	r3, ip, r4
 801117e:	3b15      	subs	r3, #21
 8011180:	f023 0303 	bic.w	r3, r3, #3
 8011184:	3304      	adds	r3, #4
 8011186:	f104 0015 	add.w	r0, r4, #21
 801118a:	4584      	cmp	ip, r0
 801118c:	bf38      	it	cc
 801118e:	2304      	movcc	r3, #4
 8011190:	50ca      	str	r2, [r1, r3]
 8011192:	b10a      	cbz	r2, 8011198 <__lshift+0xa4>
 8011194:	f108 0602 	add.w	r6, r8, #2
 8011198:	3e01      	subs	r6, #1
 801119a:	4638      	mov	r0, r7
 801119c:	612e      	str	r6, [r5, #16]
 801119e:	4621      	mov	r1, r4
 80111a0:	f7ff fdda 	bl	8010d58 <_Bfree>
 80111a4:	4628      	mov	r0, r5
 80111a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80111ae:	3301      	adds	r3, #1
 80111b0:	e7c5      	b.n	801113e <__lshift+0x4a>
 80111b2:	3904      	subs	r1, #4
 80111b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80111b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80111bc:	459c      	cmp	ip, r3
 80111be:	d8f9      	bhi.n	80111b4 <__lshift+0xc0>
 80111c0:	e7ea      	b.n	8011198 <__lshift+0xa4>
 80111c2:	bf00      	nop
 80111c4:	08014718 	.word	0x08014718
 80111c8:	08014729 	.word	0x08014729

080111cc <__mcmp>:
 80111cc:	690a      	ldr	r2, [r1, #16]
 80111ce:	4603      	mov	r3, r0
 80111d0:	6900      	ldr	r0, [r0, #16]
 80111d2:	1a80      	subs	r0, r0, r2
 80111d4:	b530      	push	{r4, r5, lr}
 80111d6:	d10e      	bne.n	80111f6 <__mcmp+0x2a>
 80111d8:	3314      	adds	r3, #20
 80111da:	3114      	adds	r1, #20
 80111dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80111e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80111e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80111e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80111ec:	4295      	cmp	r5, r2
 80111ee:	d003      	beq.n	80111f8 <__mcmp+0x2c>
 80111f0:	d205      	bcs.n	80111fe <__mcmp+0x32>
 80111f2:	f04f 30ff 	mov.w	r0, #4294967295
 80111f6:	bd30      	pop	{r4, r5, pc}
 80111f8:	42a3      	cmp	r3, r4
 80111fa:	d3f3      	bcc.n	80111e4 <__mcmp+0x18>
 80111fc:	e7fb      	b.n	80111f6 <__mcmp+0x2a>
 80111fe:	2001      	movs	r0, #1
 8011200:	e7f9      	b.n	80111f6 <__mcmp+0x2a>
	...

08011204 <__mdiff>:
 8011204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011208:	4689      	mov	r9, r1
 801120a:	4606      	mov	r6, r0
 801120c:	4611      	mov	r1, r2
 801120e:	4648      	mov	r0, r9
 8011210:	4614      	mov	r4, r2
 8011212:	f7ff ffdb 	bl	80111cc <__mcmp>
 8011216:	1e05      	subs	r5, r0, #0
 8011218:	d112      	bne.n	8011240 <__mdiff+0x3c>
 801121a:	4629      	mov	r1, r5
 801121c:	4630      	mov	r0, r6
 801121e:	f7ff fd5b 	bl	8010cd8 <_Balloc>
 8011222:	4602      	mov	r2, r0
 8011224:	b928      	cbnz	r0, 8011232 <__mdiff+0x2e>
 8011226:	4b3f      	ldr	r3, [pc, #252]	@ (8011324 <__mdiff+0x120>)
 8011228:	f240 2137 	movw	r1, #567	@ 0x237
 801122c:	483e      	ldr	r0, [pc, #248]	@ (8011328 <__mdiff+0x124>)
 801122e:	f000 faf3 	bl	8011818 <__assert_func>
 8011232:	2301      	movs	r3, #1
 8011234:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011238:	4610      	mov	r0, r2
 801123a:	b003      	add	sp, #12
 801123c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011240:	bfbc      	itt	lt
 8011242:	464b      	movlt	r3, r9
 8011244:	46a1      	movlt	r9, r4
 8011246:	4630      	mov	r0, r6
 8011248:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801124c:	bfba      	itte	lt
 801124e:	461c      	movlt	r4, r3
 8011250:	2501      	movlt	r5, #1
 8011252:	2500      	movge	r5, #0
 8011254:	f7ff fd40 	bl	8010cd8 <_Balloc>
 8011258:	4602      	mov	r2, r0
 801125a:	b918      	cbnz	r0, 8011264 <__mdiff+0x60>
 801125c:	4b31      	ldr	r3, [pc, #196]	@ (8011324 <__mdiff+0x120>)
 801125e:	f240 2145 	movw	r1, #581	@ 0x245
 8011262:	e7e3      	b.n	801122c <__mdiff+0x28>
 8011264:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011268:	6926      	ldr	r6, [r4, #16]
 801126a:	60c5      	str	r5, [r0, #12]
 801126c:	f109 0310 	add.w	r3, r9, #16
 8011270:	f109 0514 	add.w	r5, r9, #20
 8011274:	f104 0e14 	add.w	lr, r4, #20
 8011278:	f100 0b14 	add.w	fp, r0, #20
 801127c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011280:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011284:	9301      	str	r3, [sp, #4]
 8011286:	46d9      	mov	r9, fp
 8011288:	f04f 0c00 	mov.w	ip, #0
 801128c:	9b01      	ldr	r3, [sp, #4]
 801128e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011292:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011296:	9301      	str	r3, [sp, #4]
 8011298:	fa1f f38a 	uxth.w	r3, sl
 801129c:	4619      	mov	r1, r3
 801129e:	b283      	uxth	r3, r0
 80112a0:	1acb      	subs	r3, r1, r3
 80112a2:	0c00      	lsrs	r0, r0, #16
 80112a4:	4463      	add	r3, ip
 80112a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80112aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80112ae:	b29b      	uxth	r3, r3
 80112b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80112b4:	4576      	cmp	r6, lr
 80112b6:	f849 3b04 	str.w	r3, [r9], #4
 80112ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80112be:	d8e5      	bhi.n	801128c <__mdiff+0x88>
 80112c0:	1b33      	subs	r3, r6, r4
 80112c2:	3b15      	subs	r3, #21
 80112c4:	f023 0303 	bic.w	r3, r3, #3
 80112c8:	3415      	adds	r4, #21
 80112ca:	3304      	adds	r3, #4
 80112cc:	42a6      	cmp	r6, r4
 80112ce:	bf38      	it	cc
 80112d0:	2304      	movcc	r3, #4
 80112d2:	441d      	add	r5, r3
 80112d4:	445b      	add	r3, fp
 80112d6:	461e      	mov	r6, r3
 80112d8:	462c      	mov	r4, r5
 80112da:	4544      	cmp	r4, r8
 80112dc:	d30e      	bcc.n	80112fc <__mdiff+0xf8>
 80112de:	f108 0103 	add.w	r1, r8, #3
 80112e2:	1b49      	subs	r1, r1, r5
 80112e4:	f021 0103 	bic.w	r1, r1, #3
 80112e8:	3d03      	subs	r5, #3
 80112ea:	45a8      	cmp	r8, r5
 80112ec:	bf38      	it	cc
 80112ee:	2100      	movcc	r1, #0
 80112f0:	440b      	add	r3, r1
 80112f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80112f6:	b191      	cbz	r1, 801131e <__mdiff+0x11a>
 80112f8:	6117      	str	r7, [r2, #16]
 80112fa:	e79d      	b.n	8011238 <__mdiff+0x34>
 80112fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8011300:	46e6      	mov	lr, ip
 8011302:	0c08      	lsrs	r0, r1, #16
 8011304:	fa1c fc81 	uxtah	ip, ip, r1
 8011308:	4471      	add	r1, lr
 801130a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801130e:	b289      	uxth	r1, r1
 8011310:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011314:	f846 1b04 	str.w	r1, [r6], #4
 8011318:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801131c:	e7dd      	b.n	80112da <__mdiff+0xd6>
 801131e:	3f01      	subs	r7, #1
 8011320:	e7e7      	b.n	80112f2 <__mdiff+0xee>
 8011322:	bf00      	nop
 8011324:	08014718 	.word	0x08014718
 8011328:	08014729 	.word	0x08014729

0801132c <__d2b>:
 801132c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011330:	460f      	mov	r7, r1
 8011332:	2101      	movs	r1, #1
 8011334:	ec59 8b10 	vmov	r8, r9, d0
 8011338:	4616      	mov	r6, r2
 801133a:	f7ff fccd 	bl	8010cd8 <_Balloc>
 801133e:	4604      	mov	r4, r0
 8011340:	b930      	cbnz	r0, 8011350 <__d2b+0x24>
 8011342:	4602      	mov	r2, r0
 8011344:	4b23      	ldr	r3, [pc, #140]	@ (80113d4 <__d2b+0xa8>)
 8011346:	4824      	ldr	r0, [pc, #144]	@ (80113d8 <__d2b+0xac>)
 8011348:	f240 310f 	movw	r1, #783	@ 0x30f
 801134c:	f000 fa64 	bl	8011818 <__assert_func>
 8011350:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011354:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011358:	b10d      	cbz	r5, 801135e <__d2b+0x32>
 801135a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801135e:	9301      	str	r3, [sp, #4]
 8011360:	f1b8 0300 	subs.w	r3, r8, #0
 8011364:	d023      	beq.n	80113ae <__d2b+0x82>
 8011366:	4668      	mov	r0, sp
 8011368:	9300      	str	r3, [sp, #0]
 801136a:	f7ff fd7c 	bl	8010e66 <__lo0bits>
 801136e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011372:	b1d0      	cbz	r0, 80113aa <__d2b+0x7e>
 8011374:	f1c0 0320 	rsb	r3, r0, #32
 8011378:	fa02 f303 	lsl.w	r3, r2, r3
 801137c:	430b      	orrs	r3, r1
 801137e:	40c2      	lsrs	r2, r0
 8011380:	6163      	str	r3, [r4, #20]
 8011382:	9201      	str	r2, [sp, #4]
 8011384:	9b01      	ldr	r3, [sp, #4]
 8011386:	61a3      	str	r3, [r4, #24]
 8011388:	2b00      	cmp	r3, #0
 801138a:	bf0c      	ite	eq
 801138c:	2201      	moveq	r2, #1
 801138e:	2202      	movne	r2, #2
 8011390:	6122      	str	r2, [r4, #16]
 8011392:	b1a5      	cbz	r5, 80113be <__d2b+0x92>
 8011394:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011398:	4405      	add	r5, r0
 801139a:	603d      	str	r5, [r7, #0]
 801139c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80113a0:	6030      	str	r0, [r6, #0]
 80113a2:	4620      	mov	r0, r4
 80113a4:	b003      	add	sp, #12
 80113a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113aa:	6161      	str	r1, [r4, #20]
 80113ac:	e7ea      	b.n	8011384 <__d2b+0x58>
 80113ae:	a801      	add	r0, sp, #4
 80113b0:	f7ff fd59 	bl	8010e66 <__lo0bits>
 80113b4:	9b01      	ldr	r3, [sp, #4]
 80113b6:	6163      	str	r3, [r4, #20]
 80113b8:	3020      	adds	r0, #32
 80113ba:	2201      	movs	r2, #1
 80113bc:	e7e8      	b.n	8011390 <__d2b+0x64>
 80113be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80113c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80113c6:	6038      	str	r0, [r7, #0]
 80113c8:	6918      	ldr	r0, [r3, #16]
 80113ca:	f7ff fd2d 	bl	8010e28 <__hi0bits>
 80113ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80113d2:	e7e5      	b.n	80113a0 <__d2b+0x74>
 80113d4:	08014718 	.word	0x08014718
 80113d8:	08014729 	.word	0x08014729

080113dc <__ssputs_r>:
 80113dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113e0:	688e      	ldr	r6, [r1, #8]
 80113e2:	461f      	mov	r7, r3
 80113e4:	42be      	cmp	r6, r7
 80113e6:	680b      	ldr	r3, [r1, #0]
 80113e8:	4682      	mov	sl, r0
 80113ea:	460c      	mov	r4, r1
 80113ec:	4690      	mov	r8, r2
 80113ee:	d82d      	bhi.n	801144c <__ssputs_r+0x70>
 80113f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80113f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80113f8:	d026      	beq.n	8011448 <__ssputs_r+0x6c>
 80113fa:	6965      	ldr	r5, [r4, #20]
 80113fc:	6909      	ldr	r1, [r1, #16]
 80113fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011402:	eba3 0901 	sub.w	r9, r3, r1
 8011406:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801140a:	1c7b      	adds	r3, r7, #1
 801140c:	444b      	add	r3, r9
 801140e:	106d      	asrs	r5, r5, #1
 8011410:	429d      	cmp	r5, r3
 8011412:	bf38      	it	cc
 8011414:	461d      	movcc	r5, r3
 8011416:	0553      	lsls	r3, r2, #21
 8011418:	d527      	bpl.n	801146a <__ssputs_r+0x8e>
 801141a:	4629      	mov	r1, r5
 801141c:	f7fd ff9a 	bl	800f354 <_malloc_r>
 8011420:	4606      	mov	r6, r0
 8011422:	b360      	cbz	r0, 801147e <__ssputs_r+0xa2>
 8011424:	6921      	ldr	r1, [r4, #16]
 8011426:	464a      	mov	r2, r9
 8011428:	f7fe fe1f 	bl	801006a <memcpy>
 801142c:	89a3      	ldrh	r3, [r4, #12]
 801142e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011436:	81a3      	strh	r3, [r4, #12]
 8011438:	6126      	str	r6, [r4, #16]
 801143a:	6165      	str	r5, [r4, #20]
 801143c:	444e      	add	r6, r9
 801143e:	eba5 0509 	sub.w	r5, r5, r9
 8011442:	6026      	str	r6, [r4, #0]
 8011444:	60a5      	str	r5, [r4, #8]
 8011446:	463e      	mov	r6, r7
 8011448:	42be      	cmp	r6, r7
 801144a:	d900      	bls.n	801144e <__ssputs_r+0x72>
 801144c:	463e      	mov	r6, r7
 801144e:	6820      	ldr	r0, [r4, #0]
 8011450:	4632      	mov	r2, r6
 8011452:	4641      	mov	r1, r8
 8011454:	f000 f9c6 	bl	80117e4 <memmove>
 8011458:	68a3      	ldr	r3, [r4, #8]
 801145a:	1b9b      	subs	r3, r3, r6
 801145c:	60a3      	str	r3, [r4, #8]
 801145e:	6823      	ldr	r3, [r4, #0]
 8011460:	4433      	add	r3, r6
 8011462:	6023      	str	r3, [r4, #0]
 8011464:	2000      	movs	r0, #0
 8011466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801146a:	462a      	mov	r2, r5
 801146c:	f000 fa18 	bl	80118a0 <_realloc_r>
 8011470:	4606      	mov	r6, r0
 8011472:	2800      	cmp	r0, #0
 8011474:	d1e0      	bne.n	8011438 <__ssputs_r+0x5c>
 8011476:	6921      	ldr	r1, [r4, #16]
 8011478:	4650      	mov	r0, sl
 801147a:	f7ff fbe3 	bl	8010c44 <_free_r>
 801147e:	230c      	movs	r3, #12
 8011480:	f8ca 3000 	str.w	r3, [sl]
 8011484:	89a3      	ldrh	r3, [r4, #12]
 8011486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801148a:	81a3      	strh	r3, [r4, #12]
 801148c:	f04f 30ff 	mov.w	r0, #4294967295
 8011490:	e7e9      	b.n	8011466 <__ssputs_r+0x8a>
	...

08011494 <_svfiprintf_r>:
 8011494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011498:	4698      	mov	r8, r3
 801149a:	898b      	ldrh	r3, [r1, #12]
 801149c:	061b      	lsls	r3, r3, #24
 801149e:	b09d      	sub	sp, #116	@ 0x74
 80114a0:	4607      	mov	r7, r0
 80114a2:	460d      	mov	r5, r1
 80114a4:	4614      	mov	r4, r2
 80114a6:	d510      	bpl.n	80114ca <_svfiprintf_r+0x36>
 80114a8:	690b      	ldr	r3, [r1, #16]
 80114aa:	b973      	cbnz	r3, 80114ca <_svfiprintf_r+0x36>
 80114ac:	2140      	movs	r1, #64	@ 0x40
 80114ae:	f7fd ff51 	bl	800f354 <_malloc_r>
 80114b2:	6028      	str	r0, [r5, #0]
 80114b4:	6128      	str	r0, [r5, #16]
 80114b6:	b930      	cbnz	r0, 80114c6 <_svfiprintf_r+0x32>
 80114b8:	230c      	movs	r3, #12
 80114ba:	603b      	str	r3, [r7, #0]
 80114bc:	f04f 30ff 	mov.w	r0, #4294967295
 80114c0:	b01d      	add	sp, #116	@ 0x74
 80114c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114c6:	2340      	movs	r3, #64	@ 0x40
 80114c8:	616b      	str	r3, [r5, #20]
 80114ca:	2300      	movs	r3, #0
 80114cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80114ce:	2320      	movs	r3, #32
 80114d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80114d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80114d8:	2330      	movs	r3, #48	@ 0x30
 80114da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011678 <_svfiprintf_r+0x1e4>
 80114de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80114e2:	f04f 0901 	mov.w	r9, #1
 80114e6:	4623      	mov	r3, r4
 80114e8:	469a      	mov	sl, r3
 80114ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114ee:	b10a      	cbz	r2, 80114f4 <_svfiprintf_r+0x60>
 80114f0:	2a25      	cmp	r2, #37	@ 0x25
 80114f2:	d1f9      	bne.n	80114e8 <_svfiprintf_r+0x54>
 80114f4:	ebba 0b04 	subs.w	fp, sl, r4
 80114f8:	d00b      	beq.n	8011512 <_svfiprintf_r+0x7e>
 80114fa:	465b      	mov	r3, fp
 80114fc:	4622      	mov	r2, r4
 80114fe:	4629      	mov	r1, r5
 8011500:	4638      	mov	r0, r7
 8011502:	f7ff ff6b 	bl	80113dc <__ssputs_r>
 8011506:	3001      	adds	r0, #1
 8011508:	f000 80a7 	beq.w	801165a <_svfiprintf_r+0x1c6>
 801150c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801150e:	445a      	add	r2, fp
 8011510:	9209      	str	r2, [sp, #36]	@ 0x24
 8011512:	f89a 3000 	ldrb.w	r3, [sl]
 8011516:	2b00      	cmp	r3, #0
 8011518:	f000 809f 	beq.w	801165a <_svfiprintf_r+0x1c6>
 801151c:	2300      	movs	r3, #0
 801151e:	f04f 32ff 	mov.w	r2, #4294967295
 8011522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011526:	f10a 0a01 	add.w	sl, sl, #1
 801152a:	9304      	str	r3, [sp, #16]
 801152c:	9307      	str	r3, [sp, #28]
 801152e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011532:	931a      	str	r3, [sp, #104]	@ 0x68
 8011534:	4654      	mov	r4, sl
 8011536:	2205      	movs	r2, #5
 8011538:	f814 1b01 	ldrb.w	r1, [r4], #1
 801153c:	484e      	ldr	r0, [pc, #312]	@ (8011678 <_svfiprintf_r+0x1e4>)
 801153e:	f7ee fecf 	bl	80002e0 <memchr>
 8011542:	9a04      	ldr	r2, [sp, #16]
 8011544:	b9d8      	cbnz	r0, 801157e <_svfiprintf_r+0xea>
 8011546:	06d0      	lsls	r0, r2, #27
 8011548:	bf44      	itt	mi
 801154a:	2320      	movmi	r3, #32
 801154c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011550:	0711      	lsls	r1, r2, #28
 8011552:	bf44      	itt	mi
 8011554:	232b      	movmi	r3, #43	@ 0x2b
 8011556:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801155a:	f89a 3000 	ldrb.w	r3, [sl]
 801155e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011560:	d015      	beq.n	801158e <_svfiprintf_r+0xfa>
 8011562:	9a07      	ldr	r2, [sp, #28]
 8011564:	4654      	mov	r4, sl
 8011566:	2000      	movs	r0, #0
 8011568:	f04f 0c0a 	mov.w	ip, #10
 801156c:	4621      	mov	r1, r4
 801156e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011572:	3b30      	subs	r3, #48	@ 0x30
 8011574:	2b09      	cmp	r3, #9
 8011576:	d94b      	bls.n	8011610 <_svfiprintf_r+0x17c>
 8011578:	b1b0      	cbz	r0, 80115a8 <_svfiprintf_r+0x114>
 801157a:	9207      	str	r2, [sp, #28]
 801157c:	e014      	b.n	80115a8 <_svfiprintf_r+0x114>
 801157e:	eba0 0308 	sub.w	r3, r0, r8
 8011582:	fa09 f303 	lsl.w	r3, r9, r3
 8011586:	4313      	orrs	r3, r2
 8011588:	9304      	str	r3, [sp, #16]
 801158a:	46a2      	mov	sl, r4
 801158c:	e7d2      	b.n	8011534 <_svfiprintf_r+0xa0>
 801158e:	9b03      	ldr	r3, [sp, #12]
 8011590:	1d19      	adds	r1, r3, #4
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	9103      	str	r1, [sp, #12]
 8011596:	2b00      	cmp	r3, #0
 8011598:	bfbb      	ittet	lt
 801159a:	425b      	neglt	r3, r3
 801159c:	f042 0202 	orrlt.w	r2, r2, #2
 80115a0:	9307      	strge	r3, [sp, #28]
 80115a2:	9307      	strlt	r3, [sp, #28]
 80115a4:	bfb8      	it	lt
 80115a6:	9204      	strlt	r2, [sp, #16]
 80115a8:	7823      	ldrb	r3, [r4, #0]
 80115aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80115ac:	d10a      	bne.n	80115c4 <_svfiprintf_r+0x130>
 80115ae:	7863      	ldrb	r3, [r4, #1]
 80115b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80115b2:	d132      	bne.n	801161a <_svfiprintf_r+0x186>
 80115b4:	9b03      	ldr	r3, [sp, #12]
 80115b6:	1d1a      	adds	r2, r3, #4
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	9203      	str	r2, [sp, #12]
 80115bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80115c0:	3402      	adds	r4, #2
 80115c2:	9305      	str	r3, [sp, #20]
 80115c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011688 <_svfiprintf_r+0x1f4>
 80115c8:	7821      	ldrb	r1, [r4, #0]
 80115ca:	2203      	movs	r2, #3
 80115cc:	4650      	mov	r0, sl
 80115ce:	f7ee fe87 	bl	80002e0 <memchr>
 80115d2:	b138      	cbz	r0, 80115e4 <_svfiprintf_r+0x150>
 80115d4:	9b04      	ldr	r3, [sp, #16]
 80115d6:	eba0 000a 	sub.w	r0, r0, sl
 80115da:	2240      	movs	r2, #64	@ 0x40
 80115dc:	4082      	lsls	r2, r0
 80115de:	4313      	orrs	r3, r2
 80115e0:	3401      	adds	r4, #1
 80115e2:	9304      	str	r3, [sp, #16]
 80115e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115e8:	4824      	ldr	r0, [pc, #144]	@ (801167c <_svfiprintf_r+0x1e8>)
 80115ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80115ee:	2206      	movs	r2, #6
 80115f0:	f7ee fe76 	bl	80002e0 <memchr>
 80115f4:	2800      	cmp	r0, #0
 80115f6:	d036      	beq.n	8011666 <_svfiprintf_r+0x1d2>
 80115f8:	4b21      	ldr	r3, [pc, #132]	@ (8011680 <_svfiprintf_r+0x1ec>)
 80115fa:	bb1b      	cbnz	r3, 8011644 <_svfiprintf_r+0x1b0>
 80115fc:	9b03      	ldr	r3, [sp, #12]
 80115fe:	3307      	adds	r3, #7
 8011600:	f023 0307 	bic.w	r3, r3, #7
 8011604:	3308      	adds	r3, #8
 8011606:	9303      	str	r3, [sp, #12]
 8011608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801160a:	4433      	add	r3, r6
 801160c:	9309      	str	r3, [sp, #36]	@ 0x24
 801160e:	e76a      	b.n	80114e6 <_svfiprintf_r+0x52>
 8011610:	fb0c 3202 	mla	r2, ip, r2, r3
 8011614:	460c      	mov	r4, r1
 8011616:	2001      	movs	r0, #1
 8011618:	e7a8      	b.n	801156c <_svfiprintf_r+0xd8>
 801161a:	2300      	movs	r3, #0
 801161c:	3401      	adds	r4, #1
 801161e:	9305      	str	r3, [sp, #20]
 8011620:	4619      	mov	r1, r3
 8011622:	f04f 0c0a 	mov.w	ip, #10
 8011626:	4620      	mov	r0, r4
 8011628:	f810 2b01 	ldrb.w	r2, [r0], #1
 801162c:	3a30      	subs	r2, #48	@ 0x30
 801162e:	2a09      	cmp	r2, #9
 8011630:	d903      	bls.n	801163a <_svfiprintf_r+0x1a6>
 8011632:	2b00      	cmp	r3, #0
 8011634:	d0c6      	beq.n	80115c4 <_svfiprintf_r+0x130>
 8011636:	9105      	str	r1, [sp, #20]
 8011638:	e7c4      	b.n	80115c4 <_svfiprintf_r+0x130>
 801163a:	fb0c 2101 	mla	r1, ip, r1, r2
 801163e:	4604      	mov	r4, r0
 8011640:	2301      	movs	r3, #1
 8011642:	e7f0      	b.n	8011626 <_svfiprintf_r+0x192>
 8011644:	ab03      	add	r3, sp, #12
 8011646:	9300      	str	r3, [sp, #0]
 8011648:	462a      	mov	r2, r5
 801164a:	4b0e      	ldr	r3, [pc, #56]	@ (8011684 <_svfiprintf_r+0x1f0>)
 801164c:	a904      	add	r1, sp, #16
 801164e:	4638      	mov	r0, r7
 8011650:	f7fd ff9a 	bl	800f588 <_printf_float>
 8011654:	1c42      	adds	r2, r0, #1
 8011656:	4606      	mov	r6, r0
 8011658:	d1d6      	bne.n	8011608 <_svfiprintf_r+0x174>
 801165a:	89ab      	ldrh	r3, [r5, #12]
 801165c:	065b      	lsls	r3, r3, #25
 801165e:	f53f af2d 	bmi.w	80114bc <_svfiprintf_r+0x28>
 8011662:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011664:	e72c      	b.n	80114c0 <_svfiprintf_r+0x2c>
 8011666:	ab03      	add	r3, sp, #12
 8011668:	9300      	str	r3, [sp, #0]
 801166a:	462a      	mov	r2, r5
 801166c:	4b05      	ldr	r3, [pc, #20]	@ (8011684 <_svfiprintf_r+0x1f0>)
 801166e:	a904      	add	r1, sp, #16
 8011670:	4638      	mov	r0, r7
 8011672:	f7fe fa11 	bl	800fa98 <_printf_i>
 8011676:	e7ed      	b.n	8011654 <_svfiprintf_r+0x1c0>
 8011678:	08014880 	.word	0x08014880
 801167c:	0801488a 	.word	0x0801488a
 8011680:	0800f589 	.word	0x0800f589
 8011684:	080113dd 	.word	0x080113dd
 8011688:	08014886 	.word	0x08014886

0801168c <__sflush_r>:
 801168c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011694:	0716      	lsls	r6, r2, #28
 8011696:	4605      	mov	r5, r0
 8011698:	460c      	mov	r4, r1
 801169a:	d454      	bmi.n	8011746 <__sflush_r+0xba>
 801169c:	684b      	ldr	r3, [r1, #4]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	dc02      	bgt.n	80116a8 <__sflush_r+0x1c>
 80116a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	dd48      	ble.n	801173a <__sflush_r+0xae>
 80116a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80116aa:	2e00      	cmp	r6, #0
 80116ac:	d045      	beq.n	801173a <__sflush_r+0xae>
 80116ae:	2300      	movs	r3, #0
 80116b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80116b4:	682f      	ldr	r7, [r5, #0]
 80116b6:	6a21      	ldr	r1, [r4, #32]
 80116b8:	602b      	str	r3, [r5, #0]
 80116ba:	d030      	beq.n	801171e <__sflush_r+0x92>
 80116bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80116be:	89a3      	ldrh	r3, [r4, #12]
 80116c0:	0759      	lsls	r1, r3, #29
 80116c2:	d505      	bpl.n	80116d0 <__sflush_r+0x44>
 80116c4:	6863      	ldr	r3, [r4, #4]
 80116c6:	1ad2      	subs	r2, r2, r3
 80116c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80116ca:	b10b      	cbz	r3, 80116d0 <__sflush_r+0x44>
 80116cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80116ce:	1ad2      	subs	r2, r2, r3
 80116d0:	2300      	movs	r3, #0
 80116d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80116d4:	6a21      	ldr	r1, [r4, #32]
 80116d6:	4628      	mov	r0, r5
 80116d8:	47b0      	blx	r6
 80116da:	1c43      	adds	r3, r0, #1
 80116dc:	89a3      	ldrh	r3, [r4, #12]
 80116de:	d106      	bne.n	80116ee <__sflush_r+0x62>
 80116e0:	6829      	ldr	r1, [r5, #0]
 80116e2:	291d      	cmp	r1, #29
 80116e4:	d82b      	bhi.n	801173e <__sflush_r+0xb2>
 80116e6:	4a2a      	ldr	r2, [pc, #168]	@ (8011790 <__sflush_r+0x104>)
 80116e8:	410a      	asrs	r2, r1
 80116ea:	07d6      	lsls	r6, r2, #31
 80116ec:	d427      	bmi.n	801173e <__sflush_r+0xb2>
 80116ee:	2200      	movs	r2, #0
 80116f0:	6062      	str	r2, [r4, #4]
 80116f2:	04d9      	lsls	r1, r3, #19
 80116f4:	6922      	ldr	r2, [r4, #16]
 80116f6:	6022      	str	r2, [r4, #0]
 80116f8:	d504      	bpl.n	8011704 <__sflush_r+0x78>
 80116fa:	1c42      	adds	r2, r0, #1
 80116fc:	d101      	bne.n	8011702 <__sflush_r+0x76>
 80116fe:	682b      	ldr	r3, [r5, #0]
 8011700:	b903      	cbnz	r3, 8011704 <__sflush_r+0x78>
 8011702:	6560      	str	r0, [r4, #84]	@ 0x54
 8011704:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011706:	602f      	str	r7, [r5, #0]
 8011708:	b1b9      	cbz	r1, 801173a <__sflush_r+0xae>
 801170a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801170e:	4299      	cmp	r1, r3
 8011710:	d002      	beq.n	8011718 <__sflush_r+0x8c>
 8011712:	4628      	mov	r0, r5
 8011714:	f7ff fa96 	bl	8010c44 <_free_r>
 8011718:	2300      	movs	r3, #0
 801171a:	6363      	str	r3, [r4, #52]	@ 0x34
 801171c:	e00d      	b.n	801173a <__sflush_r+0xae>
 801171e:	2301      	movs	r3, #1
 8011720:	4628      	mov	r0, r5
 8011722:	47b0      	blx	r6
 8011724:	4602      	mov	r2, r0
 8011726:	1c50      	adds	r0, r2, #1
 8011728:	d1c9      	bne.n	80116be <__sflush_r+0x32>
 801172a:	682b      	ldr	r3, [r5, #0]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d0c6      	beq.n	80116be <__sflush_r+0x32>
 8011730:	2b1d      	cmp	r3, #29
 8011732:	d001      	beq.n	8011738 <__sflush_r+0xac>
 8011734:	2b16      	cmp	r3, #22
 8011736:	d11e      	bne.n	8011776 <__sflush_r+0xea>
 8011738:	602f      	str	r7, [r5, #0]
 801173a:	2000      	movs	r0, #0
 801173c:	e022      	b.n	8011784 <__sflush_r+0xf8>
 801173e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011742:	b21b      	sxth	r3, r3
 8011744:	e01b      	b.n	801177e <__sflush_r+0xf2>
 8011746:	690f      	ldr	r7, [r1, #16]
 8011748:	2f00      	cmp	r7, #0
 801174a:	d0f6      	beq.n	801173a <__sflush_r+0xae>
 801174c:	0793      	lsls	r3, r2, #30
 801174e:	680e      	ldr	r6, [r1, #0]
 8011750:	bf08      	it	eq
 8011752:	694b      	ldreq	r3, [r1, #20]
 8011754:	600f      	str	r7, [r1, #0]
 8011756:	bf18      	it	ne
 8011758:	2300      	movne	r3, #0
 801175a:	eba6 0807 	sub.w	r8, r6, r7
 801175e:	608b      	str	r3, [r1, #8]
 8011760:	f1b8 0f00 	cmp.w	r8, #0
 8011764:	dde9      	ble.n	801173a <__sflush_r+0xae>
 8011766:	6a21      	ldr	r1, [r4, #32]
 8011768:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801176a:	4643      	mov	r3, r8
 801176c:	463a      	mov	r2, r7
 801176e:	4628      	mov	r0, r5
 8011770:	47b0      	blx	r6
 8011772:	2800      	cmp	r0, #0
 8011774:	dc08      	bgt.n	8011788 <__sflush_r+0xfc>
 8011776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801177a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801177e:	81a3      	strh	r3, [r4, #12]
 8011780:	f04f 30ff 	mov.w	r0, #4294967295
 8011784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011788:	4407      	add	r7, r0
 801178a:	eba8 0800 	sub.w	r8, r8, r0
 801178e:	e7e7      	b.n	8011760 <__sflush_r+0xd4>
 8011790:	dfbffffe 	.word	0xdfbffffe

08011794 <_fflush_r>:
 8011794:	b538      	push	{r3, r4, r5, lr}
 8011796:	690b      	ldr	r3, [r1, #16]
 8011798:	4605      	mov	r5, r0
 801179a:	460c      	mov	r4, r1
 801179c:	b913      	cbnz	r3, 80117a4 <_fflush_r+0x10>
 801179e:	2500      	movs	r5, #0
 80117a0:	4628      	mov	r0, r5
 80117a2:	bd38      	pop	{r3, r4, r5, pc}
 80117a4:	b118      	cbz	r0, 80117ae <_fflush_r+0x1a>
 80117a6:	6a03      	ldr	r3, [r0, #32]
 80117a8:	b90b      	cbnz	r3, 80117ae <_fflush_r+0x1a>
 80117aa:	f7fe fb21 	bl	800fdf0 <__sinit>
 80117ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d0f3      	beq.n	801179e <_fflush_r+0xa>
 80117b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80117b8:	07d0      	lsls	r0, r2, #31
 80117ba:	d404      	bmi.n	80117c6 <_fflush_r+0x32>
 80117bc:	0599      	lsls	r1, r3, #22
 80117be:	d402      	bmi.n	80117c6 <_fflush_r+0x32>
 80117c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80117c2:	f7fe fc50 	bl	8010066 <__retarget_lock_acquire_recursive>
 80117c6:	4628      	mov	r0, r5
 80117c8:	4621      	mov	r1, r4
 80117ca:	f7ff ff5f 	bl	801168c <__sflush_r>
 80117ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80117d0:	07da      	lsls	r2, r3, #31
 80117d2:	4605      	mov	r5, r0
 80117d4:	d4e4      	bmi.n	80117a0 <_fflush_r+0xc>
 80117d6:	89a3      	ldrh	r3, [r4, #12]
 80117d8:	059b      	lsls	r3, r3, #22
 80117da:	d4e1      	bmi.n	80117a0 <_fflush_r+0xc>
 80117dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80117de:	f7fe fc43 	bl	8010068 <__retarget_lock_release_recursive>
 80117e2:	e7dd      	b.n	80117a0 <_fflush_r+0xc>

080117e4 <memmove>:
 80117e4:	4288      	cmp	r0, r1
 80117e6:	b510      	push	{r4, lr}
 80117e8:	eb01 0402 	add.w	r4, r1, r2
 80117ec:	d902      	bls.n	80117f4 <memmove+0x10>
 80117ee:	4284      	cmp	r4, r0
 80117f0:	4623      	mov	r3, r4
 80117f2:	d807      	bhi.n	8011804 <memmove+0x20>
 80117f4:	1e43      	subs	r3, r0, #1
 80117f6:	42a1      	cmp	r1, r4
 80117f8:	d008      	beq.n	801180c <memmove+0x28>
 80117fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80117fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011802:	e7f8      	b.n	80117f6 <memmove+0x12>
 8011804:	4402      	add	r2, r0
 8011806:	4601      	mov	r1, r0
 8011808:	428a      	cmp	r2, r1
 801180a:	d100      	bne.n	801180e <memmove+0x2a>
 801180c:	bd10      	pop	{r4, pc}
 801180e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011812:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011816:	e7f7      	b.n	8011808 <memmove+0x24>

08011818 <__assert_func>:
 8011818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801181a:	4614      	mov	r4, r2
 801181c:	461a      	mov	r2, r3
 801181e:	4b09      	ldr	r3, [pc, #36]	@ (8011844 <__assert_func+0x2c>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	4605      	mov	r5, r0
 8011824:	68d8      	ldr	r0, [r3, #12]
 8011826:	b954      	cbnz	r4, 801183e <__assert_func+0x26>
 8011828:	4b07      	ldr	r3, [pc, #28]	@ (8011848 <__assert_func+0x30>)
 801182a:	461c      	mov	r4, r3
 801182c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011830:	9100      	str	r1, [sp, #0]
 8011832:	462b      	mov	r3, r5
 8011834:	4905      	ldr	r1, [pc, #20]	@ (801184c <__assert_func+0x34>)
 8011836:	f000 f86f 	bl	8011918 <fiprintf>
 801183a:	f000 f87f 	bl	801193c <abort>
 801183e:	4b04      	ldr	r3, [pc, #16]	@ (8011850 <__assert_func+0x38>)
 8011840:	e7f4      	b.n	801182c <__assert_func+0x14>
 8011842:	bf00      	nop
 8011844:	2400004c 	.word	0x2400004c
 8011848:	080148d6 	.word	0x080148d6
 801184c:	080148a8 	.word	0x080148a8
 8011850:	0801489b 	.word	0x0801489b

08011854 <_calloc_r>:
 8011854:	b570      	push	{r4, r5, r6, lr}
 8011856:	fba1 5402 	umull	r5, r4, r1, r2
 801185a:	b93c      	cbnz	r4, 801186c <_calloc_r+0x18>
 801185c:	4629      	mov	r1, r5
 801185e:	f7fd fd79 	bl	800f354 <_malloc_r>
 8011862:	4606      	mov	r6, r0
 8011864:	b928      	cbnz	r0, 8011872 <_calloc_r+0x1e>
 8011866:	2600      	movs	r6, #0
 8011868:	4630      	mov	r0, r6
 801186a:	bd70      	pop	{r4, r5, r6, pc}
 801186c:	220c      	movs	r2, #12
 801186e:	6002      	str	r2, [r0, #0]
 8011870:	e7f9      	b.n	8011866 <_calloc_r+0x12>
 8011872:	462a      	mov	r2, r5
 8011874:	4621      	mov	r1, r4
 8011876:	f7fe fb68 	bl	800ff4a <memset>
 801187a:	e7f5      	b.n	8011868 <_calloc_r+0x14>

0801187c <__ascii_mbtowc>:
 801187c:	b082      	sub	sp, #8
 801187e:	b901      	cbnz	r1, 8011882 <__ascii_mbtowc+0x6>
 8011880:	a901      	add	r1, sp, #4
 8011882:	b142      	cbz	r2, 8011896 <__ascii_mbtowc+0x1a>
 8011884:	b14b      	cbz	r3, 801189a <__ascii_mbtowc+0x1e>
 8011886:	7813      	ldrb	r3, [r2, #0]
 8011888:	600b      	str	r3, [r1, #0]
 801188a:	7812      	ldrb	r2, [r2, #0]
 801188c:	1e10      	subs	r0, r2, #0
 801188e:	bf18      	it	ne
 8011890:	2001      	movne	r0, #1
 8011892:	b002      	add	sp, #8
 8011894:	4770      	bx	lr
 8011896:	4610      	mov	r0, r2
 8011898:	e7fb      	b.n	8011892 <__ascii_mbtowc+0x16>
 801189a:	f06f 0001 	mvn.w	r0, #1
 801189e:	e7f8      	b.n	8011892 <__ascii_mbtowc+0x16>

080118a0 <_realloc_r>:
 80118a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118a4:	4680      	mov	r8, r0
 80118a6:	4615      	mov	r5, r2
 80118a8:	460c      	mov	r4, r1
 80118aa:	b921      	cbnz	r1, 80118b6 <_realloc_r+0x16>
 80118ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118b0:	4611      	mov	r1, r2
 80118b2:	f7fd bd4f 	b.w	800f354 <_malloc_r>
 80118b6:	b92a      	cbnz	r2, 80118c4 <_realloc_r+0x24>
 80118b8:	f7ff f9c4 	bl	8010c44 <_free_r>
 80118bc:	2400      	movs	r4, #0
 80118be:	4620      	mov	r0, r4
 80118c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118c4:	f000 f841 	bl	801194a <_malloc_usable_size_r>
 80118c8:	4285      	cmp	r5, r0
 80118ca:	4606      	mov	r6, r0
 80118cc:	d802      	bhi.n	80118d4 <_realloc_r+0x34>
 80118ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80118d2:	d8f4      	bhi.n	80118be <_realloc_r+0x1e>
 80118d4:	4629      	mov	r1, r5
 80118d6:	4640      	mov	r0, r8
 80118d8:	f7fd fd3c 	bl	800f354 <_malloc_r>
 80118dc:	4607      	mov	r7, r0
 80118de:	2800      	cmp	r0, #0
 80118e0:	d0ec      	beq.n	80118bc <_realloc_r+0x1c>
 80118e2:	42b5      	cmp	r5, r6
 80118e4:	462a      	mov	r2, r5
 80118e6:	4621      	mov	r1, r4
 80118e8:	bf28      	it	cs
 80118ea:	4632      	movcs	r2, r6
 80118ec:	f7fe fbbd 	bl	801006a <memcpy>
 80118f0:	4621      	mov	r1, r4
 80118f2:	4640      	mov	r0, r8
 80118f4:	f7ff f9a6 	bl	8010c44 <_free_r>
 80118f8:	463c      	mov	r4, r7
 80118fa:	e7e0      	b.n	80118be <_realloc_r+0x1e>

080118fc <__ascii_wctomb>:
 80118fc:	4603      	mov	r3, r0
 80118fe:	4608      	mov	r0, r1
 8011900:	b141      	cbz	r1, 8011914 <__ascii_wctomb+0x18>
 8011902:	2aff      	cmp	r2, #255	@ 0xff
 8011904:	d904      	bls.n	8011910 <__ascii_wctomb+0x14>
 8011906:	228a      	movs	r2, #138	@ 0x8a
 8011908:	601a      	str	r2, [r3, #0]
 801190a:	f04f 30ff 	mov.w	r0, #4294967295
 801190e:	4770      	bx	lr
 8011910:	700a      	strb	r2, [r1, #0]
 8011912:	2001      	movs	r0, #1
 8011914:	4770      	bx	lr
	...

08011918 <fiprintf>:
 8011918:	b40e      	push	{r1, r2, r3}
 801191a:	b503      	push	{r0, r1, lr}
 801191c:	4601      	mov	r1, r0
 801191e:	ab03      	add	r3, sp, #12
 8011920:	4805      	ldr	r0, [pc, #20]	@ (8011938 <fiprintf+0x20>)
 8011922:	f853 2b04 	ldr.w	r2, [r3], #4
 8011926:	6800      	ldr	r0, [r0, #0]
 8011928:	9301      	str	r3, [sp, #4]
 801192a:	f000 f83f 	bl	80119ac <_vfiprintf_r>
 801192e:	b002      	add	sp, #8
 8011930:	f85d eb04 	ldr.w	lr, [sp], #4
 8011934:	b003      	add	sp, #12
 8011936:	4770      	bx	lr
 8011938:	2400004c 	.word	0x2400004c

0801193c <abort>:
 801193c:	b508      	push	{r3, lr}
 801193e:	2006      	movs	r0, #6
 8011940:	f000 fa08 	bl	8011d54 <raise>
 8011944:	2001      	movs	r0, #1
 8011946:	f7ef fd2b 	bl	80013a0 <_exit>

0801194a <_malloc_usable_size_r>:
 801194a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801194e:	1f18      	subs	r0, r3, #4
 8011950:	2b00      	cmp	r3, #0
 8011952:	bfbc      	itt	lt
 8011954:	580b      	ldrlt	r3, [r1, r0]
 8011956:	18c0      	addlt	r0, r0, r3
 8011958:	4770      	bx	lr

0801195a <__sfputc_r>:
 801195a:	6893      	ldr	r3, [r2, #8]
 801195c:	3b01      	subs	r3, #1
 801195e:	2b00      	cmp	r3, #0
 8011960:	b410      	push	{r4}
 8011962:	6093      	str	r3, [r2, #8]
 8011964:	da08      	bge.n	8011978 <__sfputc_r+0x1e>
 8011966:	6994      	ldr	r4, [r2, #24]
 8011968:	42a3      	cmp	r3, r4
 801196a:	db01      	blt.n	8011970 <__sfputc_r+0x16>
 801196c:	290a      	cmp	r1, #10
 801196e:	d103      	bne.n	8011978 <__sfputc_r+0x1e>
 8011970:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011974:	f000 b932 	b.w	8011bdc <__swbuf_r>
 8011978:	6813      	ldr	r3, [r2, #0]
 801197a:	1c58      	adds	r0, r3, #1
 801197c:	6010      	str	r0, [r2, #0]
 801197e:	7019      	strb	r1, [r3, #0]
 8011980:	4608      	mov	r0, r1
 8011982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011986:	4770      	bx	lr

08011988 <__sfputs_r>:
 8011988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801198a:	4606      	mov	r6, r0
 801198c:	460f      	mov	r7, r1
 801198e:	4614      	mov	r4, r2
 8011990:	18d5      	adds	r5, r2, r3
 8011992:	42ac      	cmp	r4, r5
 8011994:	d101      	bne.n	801199a <__sfputs_r+0x12>
 8011996:	2000      	movs	r0, #0
 8011998:	e007      	b.n	80119aa <__sfputs_r+0x22>
 801199a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801199e:	463a      	mov	r2, r7
 80119a0:	4630      	mov	r0, r6
 80119a2:	f7ff ffda 	bl	801195a <__sfputc_r>
 80119a6:	1c43      	adds	r3, r0, #1
 80119a8:	d1f3      	bne.n	8011992 <__sfputs_r+0xa>
 80119aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080119ac <_vfiprintf_r>:
 80119ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119b0:	460d      	mov	r5, r1
 80119b2:	b09d      	sub	sp, #116	@ 0x74
 80119b4:	4614      	mov	r4, r2
 80119b6:	4698      	mov	r8, r3
 80119b8:	4606      	mov	r6, r0
 80119ba:	b118      	cbz	r0, 80119c4 <_vfiprintf_r+0x18>
 80119bc:	6a03      	ldr	r3, [r0, #32]
 80119be:	b90b      	cbnz	r3, 80119c4 <_vfiprintf_r+0x18>
 80119c0:	f7fe fa16 	bl	800fdf0 <__sinit>
 80119c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80119c6:	07d9      	lsls	r1, r3, #31
 80119c8:	d405      	bmi.n	80119d6 <_vfiprintf_r+0x2a>
 80119ca:	89ab      	ldrh	r3, [r5, #12]
 80119cc:	059a      	lsls	r2, r3, #22
 80119ce:	d402      	bmi.n	80119d6 <_vfiprintf_r+0x2a>
 80119d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80119d2:	f7fe fb48 	bl	8010066 <__retarget_lock_acquire_recursive>
 80119d6:	89ab      	ldrh	r3, [r5, #12]
 80119d8:	071b      	lsls	r3, r3, #28
 80119da:	d501      	bpl.n	80119e0 <_vfiprintf_r+0x34>
 80119dc:	692b      	ldr	r3, [r5, #16]
 80119de:	b99b      	cbnz	r3, 8011a08 <_vfiprintf_r+0x5c>
 80119e0:	4629      	mov	r1, r5
 80119e2:	4630      	mov	r0, r6
 80119e4:	f000 f938 	bl	8011c58 <__swsetup_r>
 80119e8:	b170      	cbz	r0, 8011a08 <_vfiprintf_r+0x5c>
 80119ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80119ec:	07dc      	lsls	r4, r3, #31
 80119ee:	d504      	bpl.n	80119fa <_vfiprintf_r+0x4e>
 80119f0:	f04f 30ff 	mov.w	r0, #4294967295
 80119f4:	b01d      	add	sp, #116	@ 0x74
 80119f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119fa:	89ab      	ldrh	r3, [r5, #12]
 80119fc:	0598      	lsls	r0, r3, #22
 80119fe:	d4f7      	bmi.n	80119f0 <_vfiprintf_r+0x44>
 8011a00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a02:	f7fe fb31 	bl	8010068 <__retarget_lock_release_recursive>
 8011a06:	e7f3      	b.n	80119f0 <_vfiprintf_r+0x44>
 8011a08:	2300      	movs	r3, #0
 8011a0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a0c:	2320      	movs	r3, #32
 8011a0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a16:	2330      	movs	r3, #48	@ 0x30
 8011a18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011bc8 <_vfiprintf_r+0x21c>
 8011a1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a20:	f04f 0901 	mov.w	r9, #1
 8011a24:	4623      	mov	r3, r4
 8011a26:	469a      	mov	sl, r3
 8011a28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a2c:	b10a      	cbz	r2, 8011a32 <_vfiprintf_r+0x86>
 8011a2e:	2a25      	cmp	r2, #37	@ 0x25
 8011a30:	d1f9      	bne.n	8011a26 <_vfiprintf_r+0x7a>
 8011a32:	ebba 0b04 	subs.w	fp, sl, r4
 8011a36:	d00b      	beq.n	8011a50 <_vfiprintf_r+0xa4>
 8011a38:	465b      	mov	r3, fp
 8011a3a:	4622      	mov	r2, r4
 8011a3c:	4629      	mov	r1, r5
 8011a3e:	4630      	mov	r0, r6
 8011a40:	f7ff ffa2 	bl	8011988 <__sfputs_r>
 8011a44:	3001      	adds	r0, #1
 8011a46:	f000 80a7 	beq.w	8011b98 <_vfiprintf_r+0x1ec>
 8011a4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a4c:	445a      	add	r2, fp
 8011a4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a50:	f89a 3000 	ldrb.w	r3, [sl]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	f000 809f 	beq.w	8011b98 <_vfiprintf_r+0x1ec>
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8011a60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a64:	f10a 0a01 	add.w	sl, sl, #1
 8011a68:	9304      	str	r3, [sp, #16]
 8011a6a:	9307      	str	r3, [sp, #28]
 8011a6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011a70:	931a      	str	r3, [sp, #104]	@ 0x68
 8011a72:	4654      	mov	r4, sl
 8011a74:	2205      	movs	r2, #5
 8011a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a7a:	4853      	ldr	r0, [pc, #332]	@ (8011bc8 <_vfiprintf_r+0x21c>)
 8011a7c:	f7ee fc30 	bl	80002e0 <memchr>
 8011a80:	9a04      	ldr	r2, [sp, #16]
 8011a82:	b9d8      	cbnz	r0, 8011abc <_vfiprintf_r+0x110>
 8011a84:	06d1      	lsls	r1, r2, #27
 8011a86:	bf44      	itt	mi
 8011a88:	2320      	movmi	r3, #32
 8011a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a8e:	0713      	lsls	r3, r2, #28
 8011a90:	bf44      	itt	mi
 8011a92:	232b      	movmi	r3, #43	@ 0x2b
 8011a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a98:	f89a 3000 	ldrb.w	r3, [sl]
 8011a9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a9e:	d015      	beq.n	8011acc <_vfiprintf_r+0x120>
 8011aa0:	9a07      	ldr	r2, [sp, #28]
 8011aa2:	4654      	mov	r4, sl
 8011aa4:	2000      	movs	r0, #0
 8011aa6:	f04f 0c0a 	mov.w	ip, #10
 8011aaa:	4621      	mov	r1, r4
 8011aac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ab0:	3b30      	subs	r3, #48	@ 0x30
 8011ab2:	2b09      	cmp	r3, #9
 8011ab4:	d94b      	bls.n	8011b4e <_vfiprintf_r+0x1a2>
 8011ab6:	b1b0      	cbz	r0, 8011ae6 <_vfiprintf_r+0x13a>
 8011ab8:	9207      	str	r2, [sp, #28]
 8011aba:	e014      	b.n	8011ae6 <_vfiprintf_r+0x13a>
 8011abc:	eba0 0308 	sub.w	r3, r0, r8
 8011ac0:	fa09 f303 	lsl.w	r3, r9, r3
 8011ac4:	4313      	orrs	r3, r2
 8011ac6:	9304      	str	r3, [sp, #16]
 8011ac8:	46a2      	mov	sl, r4
 8011aca:	e7d2      	b.n	8011a72 <_vfiprintf_r+0xc6>
 8011acc:	9b03      	ldr	r3, [sp, #12]
 8011ace:	1d19      	adds	r1, r3, #4
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	9103      	str	r1, [sp, #12]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	bfbb      	ittet	lt
 8011ad8:	425b      	neglt	r3, r3
 8011ada:	f042 0202 	orrlt.w	r2, r2, #2
 8011ade:	9307      	strge	r3, [sp, #28]
 8011ae0:	9307      	strlt	r3, [sp, #28]
 8011ae2:	bfb8      	it	lt
 8011ae4:	9204      	strlt	r2, [sp, #16]
 8011ae6:	7823      	ldrb	r3, [r4, #0]
 8011ae8:	2b2e      	cmp	r3, #46	@ 0x2e
 8011aea:	d10a      	bne.n	8011b02 <_vfiprintf_r+0x156>
 8011aec:	7863      	ldrb	r3, [r4, #1]
 8011aee:	2b2a      	cmp	r3, #42	@ 0x2a
 8011af0:	d132      	bne.n	8011b58 <_vfiprintf_r+0x1ac>
 8011af2:	9b03      	ldr	r3, [sp, #12]
 8011af4:	1d1a      	adds	r2, r3, #4
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	9203      	str	r2, [sp, #12]
 8011afa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011afe:	3402      	adds	r4, #2
 8011b00:	9305      	str	r3, [sp, #20]
 8011b02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011bd8 <_vfiprintf_r+0x22c>
 8011b06:	7821      	ldrb	r1, [r4, #0]
 8011b08:	2203      	movs	r2, #3
 8011b0a:	4650      	mov	r0, sl
 8011b0c:	f7ee fbe8 	bl	80002e0 <memchr>
 8011b10:	b138      	cbz	r0, 8011b22 <_vfiprintf_r+0x176>
 8011b12:	9b04      	ldr	r3, [sp, #16]
 8011b14:	eba0 000a 	sub.w	r0, r0, sl
 8011b18:	2240      	movs	r2, #64	@ 0x40
 8011b1a:	4082      	lsls	r2, r0
 8011b1c:	4313      	orrs	r3, r2
 8011b1e:	3401      	adds	r4, #1
 8011b20:	9304      	str	r3, [sp, #16]
 8011b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b26:	4829      	ldr	r0, [pc, #164]	@ (8011bcc <_vfiprintf_r+0x220>)
 8011b28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b2c:	2206      	movs	r2, #6
 8011b2e:	f7ee fbd7 	bl	80002e0 <memchr>
 8011b32:	2800      	cmp	r0, #0
 8011b34:	d03f      	beq.n	8011bb6 <_vfiprintf_r+0x20a>
 8011b36:	4b26      	ldr	r3, [pc, #152]	@ (8011bd0 <_vfiprintf_r+0x224>)
 8011b38:	bb1b      	cbnz	r3, 8011b82 <_vfiprintf_r+0x1d6>
 8011b3a:	9b03      	ldr	r3, [sp, #12]
 8011b3c:	3307      	adds	r3, #7
 8011b3e:	f023 0307 	bic.w	r3, r3, #7
 8011b42:	3308      	adds	r3, #8
 8011b44:	9303      	str	r3, [sp, #12]
 8011b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b48:	443b      	add	r3, r7
 8011b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b4c:	e76a      	b.n	8011a24 <_vfiprintf_r+0x78>
 8011b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b52:	460c      	mov	r4, r1
 8011b54:	2001      	movs	r0, #1
 8011b56:	e7a8      	b.n	8011aaa <_vfiprintf_r+0xfe>
 8011b58:	2300      	movs	r3, #0
 8011b5a:	3401      	adds	r4, #1
 8011b5c:	9305      	str	r3, [sp, #20]
 8011b5e:	4619      	mov	r1, r3
 8011b60:	f04f 0c0a 	mov.w	ip, #10
 8011b64:	4620      	mov	r0, r4
 8011b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b6a:	3a30      	subs	r2, #48	@ 0x30
 8011b6c:	2a09      	cmp	r2, #9
 8011b6e:	d903      	bls.n	8011b78 <_vfiprintf_r+0x1cc>
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d0c6      	beq.n	8011b02 <_vfiprintf_r+0x156>
 8011b74:	9105      	str	r1, [sp, #20]
 8011b76:	e7c4      	b.n	8011b02 <_vfiprintf_r+0x156>
 8011b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b7c:	4604      	mov	r4, r0
 8011b7e:	2301      	movs	r3, #1
 8011b80:	e7f0      	b.n	8011b64 <_vfiprintf_r+0x1b8>
 8011b82:	ab03      	add	r3, sp, #12
 8011b84:	9300      	str	r3, [sp, #0]
 8011b86:	462a      	mov	r2, r5
 8011b88:	4b12      	ldr	r3, [pc, #72]	@ (8011bd4 <_vfiprintf_r+0x228>)
 8011b8a:	a904      	add	r1, sp, #16
 8011b8c:	4630      	mov	r0, r6
 8011b8e:	f7fd fcfb 	bl	800f588 <_printf_float>
 8011b92:	4607      	mov	r7, r0
 8011b94:	1c78      	adds	r0, r7, #1
 8011b96:	d1d6      	bne.n	8011b46 <_vfiprintf_r+0x19a>
 8011b98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011b9a:	07d9      	lsls	r1, r3, #31
 8011b9c:	d405      	bmi.n	8011baa <_vfiprintf_r+0x1fe>
 8011b9e:	89ab      	ldrh	r3, [r5, #12]
 8011ba0:	059a      	lsls	r2, r3, #22
 8011ba2:	d402      	bmi.n	8011baa <_vfiprintf_r+0x1fe>
 8011ba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011ba6:	f7fe fa5f 	bl	8010068 <__retarget_lock_release_recursive>
 8011baa:	89ab      	ldrh	r3, [r5, #12]
 8011bac:	065b      	lsls	r3, r3, #25
 8011bae:	f53f af1f 	bmi.w	80119f0 <_vfiprintf_r+0x44>
 8011bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011bb4:	e71e      	b.n	80119f4 <_vfiprintf_r+0x48>
 8011bb6:	ab03      	add	r3, sp, #12
 8011bb8:	9300      	str	r3, [sp, #0]
 8011bba:	462a      	mov	r2, r5
 8011bbc:	4b05      	ldr	r3, [pc, #20]	@ (8011bd4 <_vfiprintf_r+0x228>)
 8011bbe:	a904      	add	r1, sp, #16
 8011bc0:	4630      	mov	r0, r6
 8011bc2:	f7fd ff69 	bl	800fa98 <_printf_i>
 8011bc6:	e7e4      	b.n	8011b92 <_vfiprintf_r+0x1e6>
 8011bc8:	08014880 	.word	0x08014880
 8011bcc:	0801488a 	.word	0x0801488a
 8011bd0:	0800f589 	.word	0x0800f589
 8011bd4:	08011989 	.word	0x08011989
 8011bd8:	08014886 	.word	0x08014886

08011bdc <__swbuf_r>:
 8011bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bde:	460e      	mov	r6, r1
 8011be0:	4614      	mov	r4, r2
 8011be2:	4605      	mov	r5, r0
 8011be4:	b118      	cbz	r0, 8011bee <__swbuf_r+0x12>
 8011be6:	6a03      	ldr	r3, [r0, #32]
 8011be8:	b90b      	cbnz	r3, 8011bee <__swbuf_r+0x12>
 8011bea:	f7fe f901 	bl	800fdf0 <__sinit>
 8011bee:	69a3      	ldr	r3, [r4, #24]
 8011bf0:	60a3      	str	r3, [r4, #8]
 8011bf2:	89a3      	ldrh	r3, [r4, #12]
 8011bf4:	071a      	lsls	r2, r3, #28
 8011bf6:	d501      	bpl.n	8011bfc <__swbuf_r+0x20>
 8011bf8:	6923      	ldr	r3, [r4, #16]
 8011bfa:	b943      	cbnz	r3, 8011c0e <__swbuf_r+0x32>
 8011bfc:	4621      	mov	r1, r4
 8011bfe:	4628      	mov	r0, r5
 8011c00:	f000 f82a 	bl	8011c58 <__swsetup_r>
 8011c04:	b118      	cbz	r0, 8011c0e <__swbuf_r+0x32>
 8011c06:	f04f 37ff 	mov.w	r7, #4294967295
 8011c0a:	4638      	mov	r0, r7
 8011c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c0e:	6823      	ldr	r3, [r4, #0]
 8011c10:	6922      	ldr	r2, [r4, #16]
 8011c12:	1a98      	subs	r0, r3, r2
 8011c14:	6963      	ldr	r3, [r4, #20]
 8011c16:	b2f6      	uxtb	r6, r6
 8011c18:	4283      	cmp	r3, r0
 8011c1a:	4637      	mov	r7, r6
 8011c1c:	dc05      	bgt.n	8011c2a <__swbuf_r+0x4e>
 8011c1e:	4621      	mov	r1, r4
 8011c20:	4628      	mov	r0, r5
 8011c22:	f7ff fdb7 	bl	8011794 <_fflush_r>
 8011c26:	2800      	cmp	r0, #0
 8011c28:	d1ed      	bne.n	8011c06 <__swbuf_r+0x2a>
 8011c2a:	68a3      	ldr	r3, [r4, #8]
 8011c2c:	3b01      	subs	r3, #1
 8011c2e:	60a3      	str	r3, [r4, #8]
 8011c30:	6823      	ldr	r3, [r4, #0]
 8011c32:	1c5a      	adds	r2, r3, #1
 8011c34:	6022      	str	r2, [r4, #0]
 8011c36:	701e      	strb	r6, [r3, #0]
 8011c38:	6962      	ldr	r2, [r4, #20]
 8011c3a:	1c43      	adds	r3, r0, #1
 8011c3c:	429a      	cmp	r2, r3
 8011c3e:	d004      	beq.n	8011c4a <__swbuf_r+0x6e>
 8011c40:	89a3      	ldrh	r3, [r4, #12]
 8011c42:	07db      	lsls	r3, r3, #31
 8011c44:	d5e1      	bpl.n	8011c0a <__swbuf_r+0x2e>
 8011c46:	2e0a      	cmp	r6, #10
 8011c48:	d1df      	bne.n	8011c0a <__swbuf_r+0x2e>
 8011c4a:	4621      	mov	r1, r4
 8011c4c:	4628      	mov	r0, r5
 8011c4e:	f7ff fda1 	bl	8011794 <_fflush_r>
 8011c52:	2800      	cmp	r0, #0
 8011c54:	d0d9      	beq.n	8011c0a <__swbuf_r+0x2e>
 8011c56:	e7d6      	b.n	8011c06 <__swbuf_r+0x2a>

08011c58 <__swsetup_r>:
 8011c58:	b538      	push	{r3, r4, r5, lr}
 8011c5a:	4b29      	ldr	r3, [pc, #164]	@ (8011d00 <__swsetup_r+0xa8>)
 8011c5c:	4605      	mov	r5, r0
 8011c5e:	6818      	ldr	r0, [r3, #0]
 8011c60:	460c      	mov	r4, r1
 8011c62:	b118      	cbz	r0, 8011c6c <__swsetup_r+0x14>
 8011c64:	6a03      	ldr	r3, [r0, #32]
 8011c66:	b90b      	cbnz	r3, 8011c6c <__swsetup_r+0x14>
 8011c68:	f7fe f8c2 	bl	800fdf0 <__sinit>
 8011c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c70:	0719      	lsls	r1, r3, #28
 8011c72:	d422      	bmi.n	8011cba <__swsetup_r+0x62>
 8011c74:	06da      	lsls	r2, r3, #27
 8011c76:	d407      	bmi.n	8011c88 <__swsetup_r+0x30>
 8011c78:	2209      	movs	r2, #9
 8011c7a:	602a      	str	r2, [r5, #0]
 8011c7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c80:	81a3      	strh	r3, [r4, #12]
 8011c82:	f04f 30ff 	mov.w	r0, #4294967295
 8011c86:	e033      	b.n	8011cf0 <__swsetup_r+0x98>
 8011c88:	0758      	lsls	r0, r3, #29
 8011c8a:	d512      	bpl.n	8011cb2 <__swsetup_r+0x5a>
 8011c8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011c8e:	b141      	cbz	r1, 8011ca2 <__swsetup_r+0x4a>
 8011c90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c94:	4299      	cmp	r1, r3
 8011c96:	d002      	beq.n	8011c9e <__swsetup_r+0x46>
 8011c98:	4628      	mov	r0, r5
 8011c9a:	f7fe ffd3 	bl	8010c44 <_free_r>
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ca2:	89a3      	ldrh	r3, [r4, #12]
 8011ca4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011ca8:	81a3      	strh	r3, [r4, #12]
 8011caa:	2300      	movs	r3, #0
 8011cac:	6063      	str	r3, [r4, #4]
 8011cae:	6923      	ldr	r3, [r4, #16]
 8011cb0:	6023      	str	r3, [r4, #0]
 8011cb2:	89a3      	ldrh	r3, [r4, #12]
 8011cb4:	f043 0308 	orr.w	r3, r3, #8
 8011cb8:	81a3      	strh	r3, [r4, #12]
 8011cba:	6923      	ldr	r3, [r4, #16]
 8011cbc:	b94b      	cbnz	r3, 8011cd2 <__swsetup_r+0x7a>
 8011cbe:	89a3      	ldrh	r3, [r4, #12]
 8011cc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011cc8:	d003      	beq.n	8011cd2 <__swsetup_r+0x7a>
 8011cca:	4621      	mov	r1, r4
 8011ccc:	4628      	mov	r0, r5
 8011cce:	f000 f883 	bl	8011dd8 <__smakebuf_r>
 8011cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cd6:	f013 0201 	ands.w	r2, r3, #1
 8011cda:	d00a      	beq.n	8011cf2 <__swsetup_r+0x9a>
 8011cdc:	2200      	movs	r2, #0
 8011cde:	60a2      	str	r2, [r4, #8]
 8011ce0:	6962      	ldr	r2, [r4, #20]
 8011ce2:	4252      	negs	r2, r2
 8011ce4:	61a2      	str	r2, [r4, #24]
 8011ce6:	6922      	ldr	r2, [r4, #16]
 8011ce8:	b942      	cbnz	r2, 8011cfc <__swsetup_r+0xa4>
 8011cea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011cee:	d1c5      	bne.n	8011c7c <__swsetup_r+0x24>
 8011cf0:	bd38      	pop	{r3, r4, r5, pc}
 8011cf2:	0799      	lsls	r1, r3, #30
 8011cf4:	bf58      	it	pl
 8011cf6:	6962      	ldrpl	r2, [r4, #20]
 8011cf8:	60a2      	str	r2, [r4, #8]
 8011cfa:	e7f4      	b.n	8011ce6 <__swsetup_r+0x8e>
 8011cfc:	2000      	movs	r0, #0
 8011cfe:	e7f7      	b.n	8011cf0 <__swsetup_r+0x98>
 8011d00:	2400004c 	.word	0x2400004c

08011d04 <_raise_r>:
 8011d04:	291f      	cmp	r1, #31
 8011d06:	b538      	push	{r3, r4, r5, lr}
 8011d08:	4605      	mov	r5, r0
 8011d0a:	460c      	mov	r4, r1
 8011d0c:	d904      	bls.n	8011d18 <_raise_r+0x14>
 8011d0e:	2316      	movs	r3, #22
 8011d10:	6003      	str	r3, [r0, #0]
 8011d12:	f04f 30ff 	mov.w	r0, #4294967295
 8011d16:	bd38      	pop	{r3, r4, r5, pc}
 8011d18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011d1a:	b112      	cbz	r2, 8011d22 <_raise_r+0x1e>
 8011d1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011d20:	b94b      	cbnz	r3, 8011d36 <_raise_r+0x32>
 8011d22:	4628      	mov	r0, r5
 8011d24:	f000 f830 	bl	8011d88 <_getpid_r>
 8011d28:	4622      	mov	r2, r4
 8011d2a:	4601      	mov	r1, r0
 8011d2c:	4628      	mov	r0, r5
 8011d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d32:	f000 b817 	b.w	8011d64 <_kill_r>
 8011d36:	2b01      	cmp	r3, #1
 8011d38:	d00a      	beq.n	8011d50 <_raise_r+0x4c>
 8011d3a:	1c59      	adds	r1, r3, #1
 8011d3c:	d103      	bne.n	8011d46 <_raise_r+0x42>
 8011d3e:	2316      	movs	r3, #22
 8011d40:	6003      	str	r3, [r0, #0]
 8011d42:	2001      	movs	r0, #1
 8011d44:	e7e7      	b.n	8011d16 <_raise_r+0x12>
 8011d46:	2100      	movs	r1, #0
 8011d48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	4798      	blx	r3
 8011d50:	2000      	movs	r0, #0
 8011d52:	e7e0      	b.n	8011d16 <_raise_r+0x12>

08011d54 <raise>:
 8011d54:	4b02      	ldr	r3, [pc, #8]	@ (8011d60 <raise+0xc>)
 8011d56:	4601      	mov	r1, r0
 8011d58:	6818      	ldr	r0, [r3, #0]
 8011d5a:	f7ff bfd3 	b.w	8011d04 <_raise_r>
 8011d5e:	bf00      	nop
 8011d60:	2400004c 	.word	0x2400004c

08011d64 <_kill_r>:
 8011d64:	b538      	push	{r3, r4, r5, lr}
 8011d66:	4d07      	ldr	r5, [pc, #28]	@ (8011d84 <_kill_r+0x20>)
 8011d68:	2300      	movs	r3, #0
 8011d6a:	4604      	mov	r4, r0
 8011d6c:	4608      	mov	r0, r1
 8011d6e:	4611      	mov	r1, r2
 8011d70:	602b      	str	r3, [r5, #0]
 8011d72:	f7ef fb05 	bl	8001380 <_kill>
 8011d76:	1c43      	adds	r3, r0, #1
 8011d78:	d102      	bne.n	8011d80 <_kill_r+0x1c>
 8011d7a:	682b      	ldr	r3, [r5, #0]
 8011d7c:	b103      	cbz	r3, 8011d80 <_kill_r+0x1c>
 8011d7e:	6023      	str	r3, [r4, #0]
 8011d80:	bd38      	pop	{r3, r4, r5, pc}
 8011d82:	bf00      	nop
 8011d84:	240060d8 	.word	0x240060d8

08011d88 <_getpid_r>:
 8011d88:	f7ef baf2 	b.w	8001370 <_getpid>

08011d8c <__swhatbuf_r>:
 8011d8c:	b570      	push	{r4, r5, r6, lr}
 8011d8e:	460c      	mov	r4, r1
 8011d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d94:	2900      	cmp	r1, #0
 8011d96:	b096      	sub	sp, #88	@ 0x58
 8011d98:	4615      	mov	r5, r2
 8011d9a:	461e      	mov	r6, r3
 8011d9c:	da0d      	bge.n	8011dba <__swhatbuf_r+0x2e>
 8011d9e:	89a3      	ldrh	r3, [r4, #12]
 8011da0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011da4:	f04f 0100 	mov.w	r1, #0
 8011da8:	bf14      	ite	ne
 8011daa:	2340      	movne	r3, #64	@ 0x40
 8011dac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011db0:	2000      	movs	r0, #0
 8011db2:	6031      	str	r1, [r6, #0]
 8011db4:	602b      	str	r3, [r5, #0]
 8011db6:	b016      	add	sp, #88	@ 0x58
 8011db8:	bd70      	pop	{r4, r5, r6, pc}
 8011dba:	466a      	mov	r2, sp
 8011dbc:	f000 f848 	bl	8011e50 <_fstat_r>
 8011dc0:	2800      	cmp	r0, #0
 8011dc2:	dbec      	blt.n	8011d9e <__swhatbuf_r+0x12>
 8011dc4:	9901      	ldr	r1, [sp, #4]
 8011dc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011dca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011dce:	4259      	negs	r1, r3
 8011dd0:	4159      	adcs	r1, r3
 8011dd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011dd6:	e7eb      	b.n	8011db0 <__swhatbuf_r+0x24>

08011dd8 <__smakebuf_r>:
 8011dd8:	898b      	ldrh	r3, [r1, #12]
 8011dda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ddc:	079d      	lsls	r5, r3, #30
 8011dde:	4606      	mov	r6, r0
 8011de0:	460c      	mov	r4, r1
 8011de2:	d507      	bpl.n	8011df4 <__smakebuf_r+0x1c>
 8011de4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011de8:	6023      	str	r3, [r4, #0]
 8011dea:	6123      	str	r3, [r4, #16]
 8011dec:	2301      	movs	r3, #1
 8011dee:	6163      	str	r3, [r4, #20]
 8011df0:	b003      	add	sp, #12
 8011df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011df4:	ab01      	add	r3, sp, #4
 8011df6:	466a      	mov	r2, sp
 8011df8:	f7ff ffc8 	bl	8011d8c <__swhatbuf_r>
 8011dfc:	9f00      	ldr	r7, [sp, #0]
 8011dfe:	4605      	mov	r5, r0
 8011e00:	4639      	mov	r1, r7
 8011e02:	4630      	mov	r0, r6
 8011e04:	f7fd faa6 	bl	800f354 <_malloc_r>
 8011e08:	b948      	cbnz	r0, 8011e1e <__smakebuf_r+0x46>
 8011e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e0e:	059a      	lsls	r2, r3, #22
 8011e10:	d4ee      	bmi.n	8011df0 <__smakebuf_r+0x18>
 8011e12:	f023 0303 	bic.w	r3, r3, #3
 8011e16:	f043 0302 	orr.w	r3, r3, #2
 8011e1a:	81a3      	strh	r3, [r4, #12]
 8011e1c:	e7e2      	b.n	8011de4 <__smakebuf_r+0xc>
 8011e1e:	89a3      	ldrh	r3, [r4, #12]
 8011e20:	6020      	str	r0, [r4, #0]
 8011e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e26:	81a3      	strh	r3, [r4, #12]
 8011e28:	9b01      	ldr	r3, [sp, #4]
 8011e2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011e2e:	b15b      	cbz	r3, 8011e48 <__smakebuf_r+0x70>
 8011e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e34:	4630      	mov	r0, r6
 8011e36:	f000 f81d 	bl	8011e74 <_isatty_r>
 8011e3a:	b128      	cbz	r0, 8011e48 <__smakebuf_r+0x70>
 8011e3c:	89a3      	ldrh	r3, [r4, #12]
 8011e3e:	f023 0303 	bic.w	r3, r3, #3
 8011e42:	f043 0301 	orr.w	r3, r3, #1
 8011e46:	81a3      	strh	r3, [r4, #12]
 8011e48:	89a3      	ldrh	r3, [r4, #12]
 8011e4a:	431d      	orrs	r5, r3
 8011e4c:	81a5      	strh	r5, [r4, #12]
 8011e4e:	e7cf      	b.n	8011df0 <__smakebuf_r+0x18>

08011e50 <_fstat_r>:
 8011e50:	b538      	push	{r3, r4, r5, lr}
 8011e52:	4d07      	ldr	r5, [pc, #28]	@ (8011e70 <_fstat_r+0x20>)
 8011e54:	2300      	movs	r3, #0
 8011e56:	4604      	mov	r4, r0
 8011e58:	4608      	mov	r0, r1
 8011e5a:	4611      	mov	r1, r2
 8011e5c:	602b      	str	r3, [r5, #0]
 8011e5e:	f7ef faef 	bl	8001440 <_fstat>
 8011e62:	1c43      	adds	r3, r0, #1
 8011e64:	d102      	bne.n	8011e6c <_fstat_r+0x1c>
 8011e66:	682b      	ldr	r3, [r5, #0]
 8011e68:	b103      	cbz	r3, 8011e6c <_fstat_r+0x1c>
 8011e6a:	6023      	str	r3, [r4, #0]
 8011e6c:	bd38      	pop	{r3, r4, r5, pc}
 8011e6e:	bf00      	nop
 8011e70:	240060d8 	.word	0x240060d8

08011e74 <_isatty_r>:
 8011e74:	b538      	push	{r3, r4, r5, lr}
 8011e76:	4d06      	ldr	r5, [pc, #24]	@ (8011e90 <_isatty_r+0x1c>)
 8011e78:	2300      	movs	r3, #0
 8011e7a:	4604      	mov	r4, r0
 8011e7c:	4608      	mov	r0, r1
 8011e7e:	602b      	str	r3, [r5, #0]
 8011e80:	f7ef faee 	bl	8001460 <_isatty>
 8011e84:	1c43      	adds	r3, r0, #1
 8011e86:	d102      	bne.n	8011e8e <_isatty_r+0x1a>
 8011e88:	682b      	ldr	r3, [r5, #0]
 8011e8a:	b103      	cbz	r3, 8011e8e <_isatty_r+0x1a>
 8011e8c:	6023      	str	r3, [r4, #0]
 8011e8e:	bd38      	pop	{r3, r4, r5, pc}
 8011e90:	240060d8 	.word	0x240060d8
 8011e94:	00000000 	.word	0x00000000

08011e98 <fmod>:
 8011e98:	b508      	push	{r3, lr}
 8011e9a:	ed2d 8b04 	vpush	{d8-d9}
 8011e9e:	eeb0 9b40 	vmov.f64	d9, d0
 8011ea2:	eeb0 8b41 	vmov.f64	d8, d1
 8011ea6:	f000 f8ef 	bl	8012088 <__ieee754_fmod>
 8011eaa:	eeb4 9b48 	vcmp.f64	d9, d8
 8011eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb2:	d60c      	bvs.n	8011ece <fmod+0x36>
 8011eb4:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8011ed8 <fmod+0x40>
 8011eb8:	eeb4 8b49 	vcmp.f64	d8, d9
 8011ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ec0:	d105      	bne.n	8011ece <fmod+0x36>
 8011ec2:	f7fe f8a5 	bl	8010010 <__errno>
 8011ec6:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8011eca:	2321      	movs	r3, #33	@ 0x21
 8011ecc:	6003      	str	r3, [r0, #0]
 8011ece:	ecbd 8b04 	vpop	{d8-d9}
 8011ed2:	bd08      	pop	{r3, pc}
 8011ed4:	f3af 8000 	nop.w
	...

08011ee0 <sqrt>:
 8011ee0:	b508      	push	{r3, lr}
 8011ee2:	ed2d 8b04 	vpush	{d8-d9}
 8011ee6:	eeb0 8b40 	vmov.f64	d8, d0
 8011eea:	f000 f8c7 	bl	801207c <__ieee754_sqrt>
 8011eee:	eeb4 8b48 	vcmp.f64	d8, d8
 8011ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef6:	d60c      	bvs.n	8011f12 <sqrt+0x32>
 8011ef8:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8011f18 <sqrt+0x38>
 8011efc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f04:	d505      	bpl.n	8011f12 <sqrt+0x32>
 8011f06:	f7fe f883 	bl	8010010 <__errno>
 8011f0a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8011f0e:	2321      	movs	r3, #33	@ 0x21
 8011f10:	6003      	str	r3, [r0, #0]
 8011f12:	ecbd 8b04 	vpop	{d8-d9}
 8011f16:	bd08      	pop	{r3, pc}
	...

08011f20 <asinf>:
 8011f20:	b508      	push	{r3, lr}
 8011f22:	ed2d 8b02 	vpush	{d8}
 8011f26:	eeb0 8a40 	vmov.f32	s16, s0
 8011f2a:	f000 f9b9 	bl	80122a0 <__ieee754_asinf>
 8011f2e:	eeb4 8a48 	vcmp.f32	s16, s16
 8011f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f36:	eef0 8a40 	vmov.f32	s17, s0
 8011f3a:	d615      	bvs.n	8011f68 <asinf+0x48>
 8011f3c:	eeb0 0a48 	vmov.f32	s0, s16
 8011f40:	f000 f838 	bl	8011fb4 <fabsf>
 8011f44:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011f48:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f50:	dd0a      	ble.n	8011f68 <asinf+0x48>
 8011f52:	f7fe f85d 	bl	8010010 <__errno>
 8011f56:	ecbd 8b02 	vpop	{d8}
 8011f5a:	2321      	movs	r3, #33	@ 0x21
 8011f5c:	6003      	str	r3, [r0, #0]
 8011f5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011f62:	4804      	ldr	r0, [pc, #16]	@ (8011f74 <asinf+0x54>)
 8011f64:	f000 b82e 	b.w	8011fc4 <nanf>
 8011f68:	eeb0 0a68 	vmov.f32	s0, s17
 8011f6c:	ecbd 8b02 	vpop	{d8}
 8011f70:	bd08      	pop	{r3, pc}
 8011f72:	bf00      	nop
 8011f74:	080148d6 	.word	0x080148d6

08011f78 <sqrtf>:
 8011f78:	b508      	push	{r3, lr}
 8011f7a:	ed2d 8b02 	vpush	{d8}
 8011f7e:	eeb0 8a40 	vmov.f32	s16, s0
 8011f82:	f000 f87e 	bl	8012082 <__ieee754_sqrtf>
 8011f86:	eeb4 8a48 	vcmp.f32	s16, s16
 8011f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f8e:	d60c      	bvs.n	8011faa <sqrtf+0x32>
 8011f90:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8011fb0 <sqrtf+0x38>
 8011f94:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f9c:	d505      	bpl.n	8011faa <sqrtf+0x32>
 8011f9e:	f7fe f837 	bl	8010010 <__errno>
 8011fa2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011fa6:	2321      	movs	r3, #33	@ 0x21
 8011fa8:	6003      	str	r3, [r0, #0]
 8011faa:	ecbd 8b02 	vpop	{d8}
 8011fae:	bd08      	pop	{r3, pc}
 8011fb0:	00000000 	.word	0x00000000

08011fb4 <fabsf>:
 8011fb4:	ee10 3a10 	vmov	r3, s0
 8011fb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011fbc:	ee00 3a10 	vmov	s0, r3
 8011fc0:	4770      	bx	lr
	...

08011fc4 <nanf>:
 8011fc4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011fcc <nanf+0x8>
 8011fc8:	4770      	bx	lr
 8011fca:	bf00      	nop
 8011fcc:	7fc00000 	.word	0x7fc00000

08011fd0 <fmaxf>:
 8011fd0:	b508      	push	{r3, lr}
 8011fd2:	ed2d 8b02 	vpush	{d8}
 8011fd6:	eeb0 8a40 	vmov.f32	s16, s0
 8011fda:	eef0 8a60 	vmov.f32	s17, s1
 8011fde:	f000 f831 	bl	8012044 <__fpclassifyf>
 8011fe2:	b930      	cbnz	r0, 8011ff2 <fmaxf+0x22>
 8011fe4:	eeb0 8a68 	vmov.f32	s16, s17
 8011fe8:	eeb0 0a48 	vmov.f32	s0, s16
 8011fec:	ecbd 8b02 	vpop	{d8}
 8011ff0:	bd08      	pop	{r3, pc}
 8011ff2:	eeb0 0a68 	vmov.f32	s0, s17
 8011ff6:	f000 f825 	bl	8012044 <__fpclassifyf>
 8011ffa:	2800      	cmp	r0, #0
 8011ffc:	d0f4      	beq.n	8011fe8 <fmaxf+0x18>
 8011ffe:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012006:	dded      	ble.n	8011fe4 <fmaxf+0x14>
 8012008:	e7ee      	b.n	8011fe8 <fmaxf+0x18>

0801200a <fminf>:
 801200a:	b508      	push	{r3, lr}
 801200c:	ed2d 8b02 	vpush	{d8}
 8012010:	eeb0 8a40 	vmov.f32	s16, s0
 8012014:	eef0 8a60 	vmov.f32	s17, s1
 8012018:	f000 f814 	bl	8012044 <__fpclassifyf>
 801201c:	b930      	cbnz	r0, 801202c <fminf+0x22>
 801201e:	eeb0 8a68 	vmov.f32	s16, s17
 8012022:	eeb0 0a48 	vmov.f32	s0, s16
 8012026:	ecbd 8b02 	vpop	{d8}
 801202a:	bd08      	pop	{r3, pc}
 801202c:	eeb0 0a68 	vmov.f32	s0, s17
 8012030:	f000 f808 	bl	8012044 <__fpclassifyf>
 8012034:	2800      	cmp	r0, #0
 8012036:	d0f4      	beq.n	8012022 <fminf+0x18>
 8012038:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801203c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012040:	d5ed      	bpl.n	801201e <fminf+0x14>
 8012042:	e7ee      	b.n	8012022 <fminf+0x18>

08012044 <__fpclassifyf>:
 8012044:	ee10 3a10 	vmov	r3, s0
 8012048:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 801204c:	d00d      	beq.n	801206a <__fpclassifyf+0x26>
 801204e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8012052:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8012056:	d30a      	bcc.n	801206e <__fpclassifyf+0x2a>
 8012058:	4b07      	ldr	r3, [pc, #28]	@ (8012078 <__fpclassifyf+0x34>)
 801205a:	1e42      	subs	r2, r0, #1
 801205c:	429a      	cmp	r2, r3
 801205e:	d908      	bls.n	8012072 <__fpclassifyf+0x2e>
 8012060:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8012064:	4258      	negs	r0, r3
 8012066:	4158      	adcs	r0, r3
 8012068:	4770      	bx	lr
 801206a:	2002      	movs	r0, #2
 801206c:	4770      	bx	lr
 801206e:	2004      	movs	r0, #4
 8012070:	4770      	bx	lr
 8012072:	2003      	movs	r0, #3
 8012074:	4770      	bx	lr
 8012076:	bf00      	nop
 8012078:	007ffffe 	.word	0x007ffffe

0801207c <__ieee754_sqrt>:
 801207c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8012080:	4770      	bx	lr

08012082 <__ieee754_sqrtf>:
 8012082:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012086:	4770      	bx	lr

08012088 <__ieee754_fmod>:
 8012088:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801208c:	ed8d 1b00 	vstr	d1, [sp]
 8012090:	e9dd 6500 	ldrd	r6, r5, [sp]
 8012094:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8012098:	ea56 0307 	orrs.w	r3, r6, r7
 801209c:	46b6      	mov	lr, r6
 801209e:	d00d      	beq.n	80120bc <__ieee754_fmod+0x34>
 80120a0:	ee10 ca90 	vmov	ip, s1
 80120a4:	4b78      	ldr	r3, [pc, #480]	@ (8012288 <__ieee754_fmod+0x200>)
 80120a6:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 80120aa:	4598      	cmp	r8, r3
 80120ac:	d806      	bhi.n	80120bc <__ieee754_fmod+0x34>
 80120ae:	4273      	negs	r3, r6
 80120b0:	4a76      	ldr	r2, [pc, #472]	@ (801228c <__ieee754_fmod+0x204>)
 80120b2:	4333      	orrs	r3, r6
 80120b4:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 80120b8:	4293      	cmp	r3, r2
 80120ba:	d908      	bls.n	80120ce <__ieee754_fmod+0x46>
 80120bc:	ed9d 7b00 	vldr	d7, [sp]
 80120c0:	ee20 7b07 	vmul.f64	d7, d0, d7
 80120c4:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80120c8:	b003      	add	sp, #12
 80120ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120ce:	ee10 9a10 	vmov	r9, s0
 80120d2:	45b8      	cmp	r8, r7
 80120d4:	4649      	mov	r1, r9
 80120d6:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 80120da:	dc09      	bgt.n	80120f0 <__ieee754_fmod+0x68>
 80120dc:	dbf4      	blt.n	80120c8 <__ieee754_fmod+0x40>
 80120de:	454e      	cmp	r6, r9
 80120e0:	d8f2      	bhi.n	80120c8 <__ieee754_fmod+0x40>
 80120e2:	d105      	bne.n	80120f0 <__ieee754_fmod+0x68>
 80120e4:	4b6a      	ldr	r3, [pc, #424]	@ (8012290 <__ieee754_fmod+0x208>)
 80120e6:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 80120ea:	ed93 0b00 	vldr	d0, [r3]
 80120ee:	e7eb      	b.n	80120c8 <__ieee754_fmod+0x40>
 80120f0:	4a66      	ldr	r2, [pc, #408]	@ (801228c <__ieee754_fmod+0x204>)
 80120f2:	ea1c 0f02 	tst.w	ip, r2
 80120f6:	d14a      	bne.n	801218e <__ieee754_fmod+0x106>
 80120f8:	f1b8 0f00 	cmp.w	r8, #0
 80120fc:	d13f      	bne.n	801217e <__ieee754_fmod+0xf6>
 80120fe:	4865      	ldr	r0, [pc, #404]	@ (8012294 <__ieee754_fmod+0x20c>)
 8012100:	464b      	mov	r3, r9
 8012102:	2b00      	cmp	r3, #0
 8012104:	dc38      	bgt.n	8012178 <__ieee754_fmod+0xf0>
 8012106:	4215      	tst	r5, r2
 8012108:	d150      	bne.n	80121ac <__ieee754_fmod+0x124>
 801210a:	2f00      	cmp	r7, #0
 801210c:	d147      	bne.n	801219e <__ieee754_fmod+0x116>
 801210e:	4a61      	ldr	r2, [pc, #388]	@ (8012294 <__ieee754_fmod+0x20c>)
 8012110:	4633      	mov	r3, r6
 8012112:	2b00      	cmp	r3, #0
 8012114:	dc40      	bgt.n	8012198 <__ieee754_fmod+0x110>
 8012116:	4b60      	ldr	r3, [pc, #384]	@ (8012298 <__ieee754_fmod+0x210>)
 8012118:	4298      	cmp	r0, r3
 801211a:	db4b      	blt.n	80121b4 <__ieee754_fmod+0x12c>
 801211c:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8012120:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012124:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8012298 <__ieee754_fmod+0x210>
 8012128:	4562      	cmp	r2, ip
 801212a:	db58      	blt.n	80121de <__ieee754_fmod+0x156>
 801212c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012130:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 8012134:	1a80      	subs	r0, r0, r2
 8012136:	1b5e      	subs	r6, r3, r5
 8012138:	eba1 070e 	sub.w	r7, r1, lr
 801213c:	2800      	cmp	r0, #0
 801213e:	d164      	bne.n	801220a <__ieee754_fmod+0x182>
 8012140:	4571      	cmp	r1, lr
 8012142:	bf38      	it	cc
 8012144:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8012148:	2e00      	cmp	r6, #0
 801214a:	bfa4      	itt	ge
 801214c:	4639      	movge	r1, r7
 801214e:	4633      	movge	r3, r6
 8012150:	ea53 0001 	orrs.w	r0, r3, r1
 8012154:	d0c6      	beq.n	80120e4 <__ieee754_fmod+0x5c>
 8012156:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801215a:	db6b      	blt.n	8012234 <__ieee754_fmod+0x1ac>
 801215c:	484e      	ldr	r0, [pc, #312]	@ (8012298 <__ieee754_fmod+0x210>)
 801215e:	4282      	cmp	r2, r0
 8012160:	db6e      	blt.n	8012240 <__ieee754_fmod+0x1b8>
 8012162:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012166:	4323      	orrs	r3, r4
 8012168:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 801216c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012170:	460c      	mov	r4, r1
 8012172:	ec45 4b10 	vmov	d0, r4, r5
 8012176:	e7a7      	b.n	80120c8 <__ieee754_fmod+0x40>
 8012178:	3801      	subs	r0, #1
 801217a:	005b      	lsls	r3, r3, #1
 801217c:	e7c1      	b.n	8012102 <__ieee754_fmod+0x7a>
 801217e:	4846      	ldr	r0, [pc, #280]	@ (8012298 <__ieee754_fmod+0x210>)
 8012180:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8012184:	2b00      	cmp	r3, #0
 8012186:	ddbe      	ble.n	8012106 <__ieee754_fmod+0x7e>
 8012188:	3801      	subs	r0, #1
 801218a:	005b      	lsls	r3, r3, #1
 801218c:	e7fa      	b.n	8012184 <__ieee754_fmod+0xfc>
 801218e:	ea4f 5028 	mov.w	r0, r8, asr #20
 8012192:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8012196:	e7b6      	b.n	8012106 <__ieee754_fmod+0x7e>
 8012198:	3a01      	subs	r2, #1
 801219a:	005b      	lsls	r3, r3, #1
 801219c:	e7b9      	b.n	8012112 <__ieee754_fmod+0x8a>
 801219e:	4a3e      	ldr	r2, [pc, #248]	@ (8012298 <__ieee754_fmod+0x210>)
 80121a0:	02fb      	lsls	r3, r7, #11
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	ddb7      	ble.n	8012116 <__ieee754_fmod+0x8e>
 80121a6:	3a01      	subs	r2, #1
 80121a8:	005b      	lsls	r3, r3, #1
 80121aa:	e7fa      	b.n	80121a2 <__ieee754_fmod+0x11a>
 80121ac:	153a      	asrs	r2, r7, #20
 80121ae:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80121b2:	e7b0      	b.n	8012116 <__ieee754_fmod+0x8e>
 80121b4:	eba3 0c00 	sub.w	ip, r3, r0
 80121b8:	f1bc 0f1f 	cmp.w	ip, #31
 80121bc:	dc09      	bgt.n	80121d2 <__ieee754_fmod+0x14a>
 80121be:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 80121c2:	fa08 f10c 	lsl.w	r1, r8, ip
 80121c6:	fa29 f303 	lsr.w	r3, r9, r3
 80121ca:	430b      	orrs	r3, r1
 80121cc:	fa09 f10c 	lsl.w	r1, r9, ip
 80121d0:	e7a8      	b.n	8012124 <__ieee754_fmod+0x9c>
 80121d2:	4b32      	ldr	r3, [pc, #200]	@ (801229c <__ieee754_fmod+0x214>)
 80121d4:	1a1b      	subs	r3, r3, r0
 80121d6:	fa09 f303 	lsl.w	r3, r9, r3
 80121da:	2100      	movs	r1, #0
 80121dc:	e7a2      	b.n	8012124 <__ieee754_fmod+0x9c>
 80121de:	ebac 0c02 	sub.w	ip, ip, r2
 80121e2:	f1bc 0f1f 	cmp.w	ip, #31
 80121e6:	dc09      	bgt.n	80121fc <__ieee754_fmod+0x174>
 80121e8:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 80121ec:	fa07 f70c 	lsl.w	r7, r7, ip
 80121f0:	fa26 f505 	lsr.w	r5, r6, r5
 80121f4:	433d      	orrs	r5, r7
 80121f6:	fa06 fe0c 	lsl.w	lr, r6, ip
 80121fa:	e79b      	b.n	8012134 <__ieee754_fmod+0xac>
 80121fc:	4d27      	ldr	r5, [pc, #156]	@ (801229c <__ieee754_fmod+0x214>)
 80121fe:	1aad      	subs	r5, r5, r2
 8012200:	fa06 f505 	lsl.w	r5, r6, r5
 8012204:	f04f 0e00 	mov.w	lr, #0
 8012208:	e794      	b.n	8012134 <__ieee754_fmod+0xac>
 801220a:	4571      	cmp	r1, lr
 801220c:	bf38      	it	cc
 801220e:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8012212:	2e00      	cmp	r6, #0
 8012214:	da05      	bge.n	8012222 <__ieee754_fmod+0x19a>
 8012216:	0fce      	lsrs	r6, r1, #31
 8012218:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 801221c:	0049      	lsls	r1, r1, #1
 801221e:	3801      	subs	r0, #1
 8012220:	e789      	b.n	8012136 <__ieee754_fmod+0xae>
 8012222:	ea56 0307 	orrs.w	r3, r6, r7
 8012226:	f43f af5d 	beq.w	80120e4 <__ieee754_fmod+0x5c>
 801222a:	0ffb      	lsrs	r3, r7, #31
 801222c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8012230:	0079      	lsls	r1, r7, #1
 8012232:	e7f4      	b.n	801221e <__ieee754_fmod+0x196>
 8012234:	0fc8      	lsrs	r0, r1, #31
 8012236:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801223a:	0049      	lsls	r1, r1, #1
 801223c:	3a01      	subs	r2, #1
 801223e:	e78a      	b.n	8012156 <__ieee754_fmod+0xce>
 8012240:	1a80      	subs	r0, r0, r2
 8012242:	2814      	cmp	r0, #20
 8012244:	dc0c      	bgt.n	8012260 <__ieee754_fmod+0x1d8>
 8012246:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 801224a:	fa03 f202 	lsl.w	r2, r3, r2
 801224e:	40c1      	lsrs	r1, r0
 8012250:	430a      	orrs	r2, r1
 8012252:	4103      	asrs	r3, r0
 8012254:	ea43 0104 	orr.w	r1, r3, r4
 8012258:	4610      	mov	r0, r2
 801225a:	ec41 0b10 	vmov	d0, r0, r1
 801225e:	e733      	b.n	80120c8 <__ieee754_fmod+0x40>
 8012260:	281f      	cmp	r0, #31
 8012262:	dc07      	bgt.n	8012274 <__ieee754_fmod+0x1ec>
 8012264:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8012268:	40c1      	lsrs	r1, r0
 801226a:	fa03 f202 	lsl.w	r2, r3, r2
 801226e:	430a      	orrs	r2, r1
 8012270:	4623      	mov	r3, r4
 8012272:	e7ef      	b.n	8012254 <__ieee754_fmod+0x1cc>
 8012274:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8012278:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 801227c:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8012280:	32e2      	adds	r2, #226	@ 0xe2
 8012282:	fa43 f202 	asr.w	r2, r3, r2
 8012286:	e7f3      	b.n	8012270 <__ieee754_fmod+0x1e8>
 8012288:	7fefffff 	.word	0x7fefffff
 801228c:	7ff00000 	.word	0x7ff00000
 8012290:	080149d8 	.word	0x080149d8
 8012294:	fffffbed 	.word	0xfffffbed
 8012298:	fffffc02 	.word	0xfffffc02
 801229c:	fffffbe2 	.word	0xfffffbe2

080122a0 <__ieee754_asinf>:
 80122a0:	b538      	push	{r3, r4, r5, lr}
 80122a2:	ee10 5a10 	vmov	r5, s0
 80122a6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80122aa:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 80122ae:	ed2d 8b04 	vpush	{d8-d9}
 80122b2:	d10c      	bne.n	80122ce <__ieee754_asinf+0x2e>
 80122b4:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 801242c <__ieee754_asinf+0x18c>
 80122b8:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8012430 <__ieee754_asinf+0x190>
 80122bc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80122c0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80122c4:	eeb0 0a67 	vmov.f32	s0, s15
 80122c8:	ecbd 8b04 	vpop	{d8-d9}
 80122cc:	bd38      	pop	{r3, r4, r5, pc}
 80122ce:	d904      	bls.n	80122da <__ieee754_asinf+0x3a>
 80122d0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80122d4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80122d8:	e7f6      	b.n	80122c8 <__ieee754_asinf+0x28>
 80122da:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80122de:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80122e2:	d20b      	bcs.n	80122fc <__ieee754_asinf+0x5c>
 80122e4:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 80122e8:	d252      	bcs.n	8012390 <__ieee754_asinf+0xf0>
 80122ea:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8012434 <__ieee754_asinf+0x194>
 80122ee:	ee70 7a27 	vadd.f32	s15, s0, s15
 80122f2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80122f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122fa:	dce5      	bgt.n	80122c8 <__ieee754_asinf+0x28>
 80122fc:	f7ff fe5a 	bl	8011fb4 <fabsf>
 8012300:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8012304:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012308:	ee28 8a27 	vmul.f32	s16, s16, s15
 801230c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8012438 <__ieee754_asinf+0x198>
 8012310:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 801243c <__ieee754_asinf+0x19c>
 8012314:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8012440 <__ieee754_asinf+0x1a0>
 8012318:	eea8 7a27 	vfma.f32	s14, s16, s15
 801231c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8012444 <__ieee754_asinf+0x1a4>
 8012320:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012324:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8012448 <__ieee754_asinf+0x1a8>
 8012328:	eea7 7a88 	vfma.f32	s14, s15, s16
 801232c:	eddf 7a47 	vldr	s15, [pc, #284]	@ 801244c <__ieee754_asinf+0x1ac>
 8012330:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012334:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8012450 <__ieee754_asinf+0x1b0>
 8012338:	eea7 9a88 	vfma.f32	s18, s15, s16
 801233c:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8012454 <__ieee754_asinf+0x1b4>
 8012340:	eee8 7a07 	vfma.f32	s15, s16, s14
 8012344:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8012458 <__ieee754_asinf+0x1b8>
 8012348:	eea7 7a88 	vfma.f32	s14, s15, s16
 801234c:	eddf 7a43 	vldr	s15, [pc, #268]	@ 801245c <__ieee754_asinf+0x1bc>
 8012350:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012354:	eeb0 0a48 	vmov.f32	s0, s16
 8012358:	eee7 8a88 	vfma.f32	s17, s15, s16
 801235c:	f7ff fe91 	bl	8012082 <__ieee754_sqrtf>
 8012360:	4b3f      	ldr	r3, [pc, #252]	@ (8012460 <__ieee754_asinf+0x1c0>)
 8012362:	ee29 9a08 	vmul.f32	s18, s18, s16
 8012366:	429c      	cmp	r4, r3
 8012368:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801236c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8012370:	d93d      	bls.n	80123ee <__ieee754_asinf+0x14e>
 8012372:	eea0 0a06 	vfma.f32	s0, s0, s12
 8012376:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8012464 <__ieee754_asinf+0x1c4>
 801237a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801237e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8012430 <__ieee754_asinf+0x190>
 8012382:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012386:	2d00      	cmp	r5, #0
 8012388:	bfd8      	it	le
 801238a:	eeb1 0a40 	vnegle.f32	s0, s0
 801238e:	e79b      	b.n	80122c8 <__ieee754_asinf+0x28>
 8012390:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012394:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801243c <__ieee754_asinf+0x19c>
 8012398:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8012438 <__ieee754_asinf+0x198>
 801239c:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8012450 <__ieee754_asinf+0x1b0>
 80123a0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80123a4:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8012444 <__ieee754_asinf+0x1a4>
 80123a8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80123ac:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8012448 <__ieee754_asinf+0x1a8>
 80123b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123b4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 801244c <__ieee754_asinf+0x1ac>
 80123b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80123bc:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8012440 <__ieee754_asinf+0x1a0>
 80123c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123c4:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8012454 <__ieee754_asinf+0x1b4>
 80123c8:	eee7 6a86 	vfma.f32	s13, s15, s12
 80123cc:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8012458 <__ieee754_asinf+0x1b8>
 80123d0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80123d4:	eddf 6a21 	vldr	s13, [pc, #132]	@ 801245c <__ieee754_asinf+0x1bc>
 80123d8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80123dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80123e0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80123e4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80123e8:	eea0 0a27 	vfma.f32	s0, s0, s15
 80123ec:	e76c      	b.n	80122c8 <__ieee754_asinf+0x28>
 80123ee:	ee10 3a10 	vmov	r3, s0
 80123f2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80123f6:	f023 030f 	bic.w	r3, r3, #15
 80123fa:	ee07 3a10 	vmov	s14, r3
 80123fe:	eea7 8a47 	vfms.f32	s16, s14, s14
 8012402:	ee70 5a00 	vadd.f32	s11, s0, s0
 8012406:	ee30 0a07 	vadd.f32	s0, s0, s14
 801240a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801242c <__ieee754_asinf+0x18c>
 801240e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8012412:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8012468 <__ieee754_asinf+0x1c8>
 8012416:	eee5 7a66 	vfms.f32	s15, s10, s13
 801241a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801241e:	eeb0 6a40 	vmov.f32	s12, s0
 8012422:	eea7 6a66 	vfms.f32	s12, s14, s13
 8012426:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801242a:	e7aa      	b.n	8012382 <__ieee754_asinf+0xe2>
 801242c:	b33bbd2e 	.word	0xb33bbd2e
 8012430:	3fc90fdb 	.word	0x3fc90fdb
 8012434:	7149f2ca 	.word	0x7149f2ca
 8012438:	3a4f7f04 	.word	0x3a4f7f04
 801243c:	3811ef08 	.word	0x3811ef08
 8012440:	3e2aaaab 	.word	0x3e2aaaab
 8012444:	bd241146 	.word	0xbd241146
 8012448:	3e4e0aa8 	.word	0x3e4e0aa8
 801244c:	bea6b090 	.word	0xbea6b090
 8012450:	3d9dc62e 	.word	0x3d9dc62e
 8012454:	bf303361 	.word	0xbf303361
 8012458:	4001572d 	.word	0x4001572d
 801245c:	c019d139 	.word	0xc019d139
 8012460:	3f799999 	.word	0x3f799999
 8012464:	333bbd2e 	.word	0x333bbd2e
 8012468:	3f490fdb 	.word	0x3f490fdb

0801246c <_init>:
 801246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801246e:	bf00      	nop
 8012470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012472:	bc08      	pop	{r3}
 8012474:	469e      	mov	lr, r3
 8012476:	4770      	bx	lr

08012478 <_fini>:
 8012478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801247a:	bf00      	nop
 801247c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801247e:	bc08      	pop	{r3}
 8012480:	469e      	mov	lr, r3
 8012482:	4770      	bx	lr
