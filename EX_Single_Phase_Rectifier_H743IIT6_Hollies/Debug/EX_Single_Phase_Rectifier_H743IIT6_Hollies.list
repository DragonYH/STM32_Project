
EX_Single_Phase_Rectifier_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001198c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002530  08011c30  08011c30  00012c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014160  08014160  00015160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014168  08014168  00015168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801416c  0801416c  0001516c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000204  24000000  08014170  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005edc  24000204  08014374  00016204  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  240060e0  08014374  000170e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00016204  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033b72  00000000  00000000  00016232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006c0a  00000000  00000000  00049da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002420  00000000  00000000  000509b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001b56  00000000  00000000  00052dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000400b3  00000000  00000000  00054926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030f20  00000000  00000000  000949d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001875d0  00000000  00000000  000c58f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  0024cec9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a810  00000000  00000000  0024cf84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  00257794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000005c1  00000000  00000000  0025780c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000058  00000000  00000000  00257dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000204 	.word	0x24000204
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011c14 	.word	0x08011c14

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000208 	.word	0x24000208
 80002dc:	08011c14 	.word	0x08011c14

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	@ 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
 80005c0:	615a      	str	r2, [r3, #20]
 80005c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80005c4:	4b33      	ldr	r3, [pc, #204]	@ (8000694 <MX_ADC3_Init+0xe8>)
 80005c6:	4a34      	ldr	r2, [pc, #208]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005c8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005ca:	4b32      	ldr	r3, [pc, #200]	@ (8000694 <MX_ADC3_Init+0xe8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005d0:	4b30      	ldr	r3, [pc, #192]	@ (8000694 <MX_ADC3_Init+0xe8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000694 <MX_ADC3_Init+0xe8>)
 80005d8:	2204      	movs	r2, #4
 80005da:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80005dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000694 <MX_ADC3_Init+0xe8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000694 <MX_ADC3_Init+0xe8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80005e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000694 <MX_ADC3_Init+0xe8>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005ee:	4b29      	ldr	r3, [pc, #164]	@ (8000694 <MX_ADC3_Init+0xe8>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b27      	ldr	r3, [pc, #156]	@ (8000694 <MX_ADC3_Init+0xe8>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fa:	4b26      	ldr	r3, [pc, #152]	@ (8000694 <MX_ADC3_Init+0xe8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000600:	4b24      	ldr	r3, [pc, #144]	@ (8000694 <MX_ADC3_Init+0xe8>)
 8000602:	2200      	movs	r2, #0
 8000604:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000606:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <MX_ADC3_Init+0xe8>)
 8000608:	2200      	movs	r2, #0
 800060a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <MX_ADC3_Init+0xe8>)
 800060e:	2200      	movs	r2, #0
 8000610:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = ENABLE;
 8000612:	4b20      	ldr	r3, [pc, #128]	@ (8000694 <MX_ADC3_Init+0xe8>)
 8000614:	2201      	movs	r2, #1
 8000616:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 15;
 800061a:	4b1e      	ldr	r3, [pc, #120]	@ (8000694 <MX_ADC3_Init+0xe8>)
 800061c:	220f      	movs	r2, #15
 800061e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000620:	4b1c      	ldr	r3, [pc, #112]	@ (8000694 <MX_ADC3_Init+0xe8>)
 8000622:	2280      	movs	r2, #128	@ 0x80
 8000624:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000626:	4b1b      	ldr	r3, [pc, #108]	@ (8000694 <MX_ADC3_Init+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800062c:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <MX_ADC3_Init+0xe8>)
 800062e:	2201      	movs	r2, #1
 8000630:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000632:	4818      	ldr	r0, [pc, #96]	@ (8000694 <MX_ADC3_Init+0xe8>)
 8000634:	f001 fc06 	bl	8001e44 <HAL_ADC_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800063e:	f000 fc35 	bl	8000eac <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <MX_ADC3_Init+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000648:	4812      	ldr	r0, [pc, #72]	@ (8000694 <MX_ADC3_Init+0xe8>)
 800064a:	f001 fbfb 	bl	8001e44 <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000654:	f000 fc2a 	bl	8000eac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000658:	4b10      	ldr	r3, [pc, #64]	@ (800069c <MX_ADC3_Init+0xf0>)
 800065a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065c:	2306      	movs	r3, #6
 800065e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000660:	2307      	movs	r3, #7
 8000662:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000664:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000668:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800066a:	2304      	movs	r3, #4
 800066c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000672:	2300      	movs	r3, #0
 8000674:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	4619      	mov	r1, r3
 800067a:	4806      	ldr	r0, [pc, #24]	@ (8000694 <MX_ADC3_Init+0xe8>)
 800067c:	f001 ff50 	bl	8002520 <HAL_ADC_ConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC3_Init+0xde>
  {
    Error_Handler();
 8000686:	f000 fc11 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	3720      	adds	r7, #32
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	24000220 	.word	0x24000220
 8000698:	58026000 	.word	0x58026000
 800069c:	cb840000 	.word	0xcb840000

080006a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b0b4      	sub	sp, #208	@ 0xd0
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	22c0      	movs	r2, #192	@ 0xc0
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f00f f81e 	bl	800f6f2 <memset>
  if(adcHandle->Instance==ADC3)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a1d      	ldr	r2, [pc, #116]	@ (8000730 <HAL_ADC_MspInit+0x90>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d132      	bne.n	8000726 <HAL_ADC_MspInit+0x86>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006c0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80006c4:	f04f 0300 	mov.w	r3, #0
 80006c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80006cc:	2319      	movs	r3, #25
 80006ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 504;
 80006d0:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 80006d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 7;
 80006d6:	2307      	movs	r3, #7
 80006d8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4618      	mov	r0, r3
 80006fa:	f004 ffa7 	bl	800564c <HAL_RCCEx_PeriphCLKConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 8000704:	f000 fbd2 	bl	8000eac <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000708:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <HAL_ADC_MspInit+0x94>)
 800070a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070e:	4a09      	ldr	r2, [pc, #36]	@ (8000734 <HAL_ADC_MspInit+0x94>)
 8000710:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000714:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <HAL_ADC_MspInit+0x94>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000726:	bf00      	nop
 8000728:	37d0      	adds	r7, #208	@ 0xd0
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58026000 	.word	0x58026000
 8000734:	58024400 	.word	0x58024400

08000738 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	@ 0x28
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2224      	movs	r2, #36	@ 0x24
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f00e ffd4 	bl	800f6f2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800074a:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_DAC1_Init+0x5c>)
 800074c:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <MX_DAC1_Init+0x60>)
 800074e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000750:	4810      	ldr	r0, [pc, #64]	@ (8000794 <MX_DAC1_Init+0x5c>)
 8000752:	f002 fe25 	bl	80033a0 <HAL_DAC_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800075c:	f000 fba6 	bl	8000eac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800076c:	2301      	movs	r3, #1
 800076e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2200      	movs	r2, #0
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	@ (8000794 <MX_DAC1_Init+0x5c>)
 800077c:	f002 ff14 	bl	80035a8 <HAL_DAC_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000786:	f000 fb91 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	@ 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	24000284 	.word	0x24000284
 8000798:	40007400 	.word	0x40007400

0800079c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a1c      	ldr	r2, [pc, #112]	@ (800082c <HAL_DAC_MspInit+0x90>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d131      	bne.n	8000822 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80007be:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <HAL_DAC_MspInit+0x94>)
 80007c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000830 <HAL_DAC_MspInit+0x94>)
 80007c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80007ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80007ce:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <HAL_DAC_MspInit+0x94>)
 80007d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <HAL_DAC_MspInit+0x94>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e2:	4a13      	ldr	r2, [pc, #76]	@ (8000830 <HAL_DAC_MspInit+0x94>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ec:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <HAL_DAC_MspInit+0x94>)
 80007ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007fa:	2310      	movs	r3, #16
 80007fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fe:	2303      	movs	r3, #3
 8000800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	4809      	ldr	r0, [pc, #36]	@ (8000834 <HAL_DAC_MspInit+0x98>)
 800080e:	f003 f817 	bl	8003840 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2105      	movs	r1, #5
 8000816:	2036      	movs	r0, #54	@ 0x36
 8000818:	f002 fd22 	bl	8003260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800081c:	2036      	movs	r0, #54	@ 0x36
 800081e:	f002 fd39 	bl	8003294 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	@ 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40007400 	.word	0x40007400
 8000830:	58024400 	.word	0x58024400
 8000834:	58020000 	.word	0x58020000

08000838 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  UserInit();
 800083c:	f00d fdd2 	bl	800e3e4 <UserInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateLED */
  stateLEDHandle = osThreadNew(StartStateLED, NULL, &stateLED_attributes);
 8000840:	4a18      	ldr	r2, [pc, #96]	@ (80008a4 <MX_FREERTOS_Init+0x6c>)
 8000842:	2100      	movs	r1, #0
 8000844:	4818      	ldr	r0, [pc, #96]	@ (80008a8 <MX_FREERTOS_Init+0x70>)
 8000846:	f009 fddf 	bl	800a408 <osThreadNew>
 800084a:	4603      	mov	r3, r0
 800084c:	4a17      	ldr	r2, [pc, #92]	@ (80008ac <MX_FREERTOS_Init+0x74>)
 800084e:	6013      	str	r3, [r2, #0]

  /* creation of mcuTemperature */
  mcuTemperatureHandle = osThreadNew(StartMcuTemperature, NULL, &mcuTemperature_attributes);
 8000850:	4a17      	ldr	r2, [pc, #92]	@ (80008b0 <MX_FREERTOS_Init+0x78>)
 8000852:	2100      	movs	r1, #0
 8000854:	4817      	ldr	r0, [pc, #92]	@ (80008b4 <MX_FREERTOS_Init+0x7c>)
 8000856:	f009 fdd7 	bl	800a408 <osThreadNew>
 800085a:	4603      	mov	r3, r0
 800085c:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <MX_FREERTOS_Init+0x80>)
 800085e:	6013      	str	r3, [r2, #0]

  /* creation of oledDisplay */
  oledDisplayHandle = osThreadNew(StartOledDisplay, NULL, &oledDisplay_attributes);
 8000860:	4a16      	ldr	r2, [pc, #88]	@ (80008bc <MX_FREERTOS_Init+0x84>)
 8000862:	2100      	movs	r1, #0
 8000864:	4816      	ldr	r0, [pc, #88]	@ (80008c0 <MX_FREERTOS_Init+0x88>)
 8000866:	f009 fdcf 	bl	800a408 <osThreadNew>
 800086a:	4603      	mov	r3, r0
 800086c:	4a15      	ldr	r2, [pc, #84]	@ (80008c4 <MX_FREERTOS_Init+0x8c>)
 800086e:	6013      	str	r3, [r2, #0]

  /* creation of dcSampling */
  dcSamplingHandle = osThreadNew(StartDCSampling, NULL, &dcSampling_attributes);
 8000870:	4a15      	ldr	r2, [pc, #84]	@ (80008c8 <MX_FREERTOS_Init+0x90>)
 8000872:	2100      	movs	r1, #0
 8000874:	4815      	ldr	r0, [pc, #84]	@ (80008cc <MX_FREERTOS_Init+0x94>)
 8000876:	f009 fdc7 	bl	800a408 <osThreadNew>
 800087a:	4603      	mov	r3, r0
 800087c:	4a14      	ldr	r2, [pc, #80]	@ (80008d0 <MX_FREERTOS_Init+0x98>)
 800087e:	6013      	str	r3, [r2, #0]

  /* creation of circuitProtecti */
  circuitProtectiHandle = osThreadNew(StartCircuitProtection, NULL, &circuitProtecti_attributes);
 8000880:	4a14      	ldr	r2, [pc, #80]	@ (80008d4 <MX_FREERTOS_Init+0x9c>)
 8000882:	2100      	movs	r1, #0
 8000884:	4814      	ldr	r0, [pc, #80]	@ (80008d8 <MX_FREERTOS_Init+0xa0>)
 8000886:	f009 fdbf 	bl	800a408 <osThreadNew>
 800088a:	4603      	mov	r3, r0
 800088c:	4a13      	ldr	r2, [pc, #76]	@ (80008dc <MX_FREERTOS_Init+0xa4>)
 800088e:	6013      	str	r3, [r2, #0]

  /* creation of dcControl */
  dcControlHandle = osThreadNew(StartDCControl, NULL, &dcControl_attributes);
 8000890:	4a13      	ldr	r2, [pc, #76]	@ (80008e0 <MX_FREERTOS_Init+0xa8>)
 8000892:	2100      	movs	r1, #0
 8000894:	4813      	ldr	r0, [pc, #76]	@ (80008e4 <MX_FREERTOS_Init+0xac>)
 8000896:	f009 fdb7 	bl	800a408 <osThreadNew>
 800089a:	4603      	mov	r3, r0
 800089c:	4a12      	ldr	r2, [pc, #72]	@ (80008e8 <MX_FREERTOS_Init+0xb0>)
 800089e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	08011cf0 	.word	0x08011cf0
 80008a8:	0800e43d 	.word	0x0800e43d
 80008ac:	24000298 	.word	0x24000298
 80008b0:	08011d14 	.word	0x08011d14
 80008b4:	0800e4d1 	.word	0x0800e4d1
 80008b8:	2400029c 	.word	0x2400029c
 80008bc:	08011d38 	.word	0x08011d38
 80008c0:	0800e579 	.word	0x0800e579
 80008c4:	240002a0 	.word	0x240002a0
 80008c8:	08011d5c 	.word	0x08011d5c
 80008cc:	0800e6ad 	.word	0x0800e6ad
 80008d0:	240002a4 	.word	0x240002a4
 80008d4:	08011d80 	.word	0x08011d80
 80008d8:	0800e6f5 	.word	0x0800e6f5
 80008dc:	240002a8 	.word	0x240002a8
 80008e0:	08011da4 	.word	0x08011da4
 80008e4:	0800e849 	.word	0x0800e849
 80008e8:	240002ac 	.word	0x240002ac

080008ec <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	@ 0x30
 80008f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	4b71      	ldr	r3, [pc, #452]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000908:	4a6f      	ldr	r2, [pc, #444]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 800090a:	f043 0304 	orr.w	r3, r3, #4
 800090e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000912:	4b6d      	ldr	r3, [pc, #436]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000918:	f003 0304 	and.w	r3, r3, #4
 800091c:	61bb      	str	r3, [r7, #24]
 800091e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000920:	4b69      	ldr	r3, [pc, #420]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000926:	4a68      	ldr	r2, [pc, #416]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800092c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000930:	4b65      	ldr	r3, [pc, #404]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 8000932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b62      	ldr	r3, [pc, #392]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000944:	4a60      	ldr	r2, [pc, #384]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800094e:	4b5e      	ldr	r3, [pc, #376]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000962:	4a59      	ldr	r2, [pc, #356]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096c:	4b56      	ldr	r3, [pc, #344]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800097a:	4b53      	ldr	r3, [pc, #332]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000980:	4a51      	ldr	r2, [pc, #324]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 8000982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000986:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098a:	4b4f      	ldr	r3, [pc, #316]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000998:	4b4b      	ldr	r3, [pc, #300]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099e:	4a4a      	ldr	r2, [pc, #296]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 80009a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a8:	4b47      	ldr	r3, [pc, #284]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2120      	movs	r1, #32
 80009ba:	4844      	ldr	r0, [pc, #272]	@ (8000acc <MX_GPIO_Init+0x1e0>)
 80009bc:	f003 f8f0 	bl	8003ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2102      	movs	r1, #2
 80009c4:	4842      	ldr	r0, [pc, #264]	@ (8000ad0 <MX_GPIO_Init+0x1e4>)
 80009c6:	f003 f8eb 	bl	8003ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2188      	movs	r1, #136	@ 0x88
 80009ce:	4841      	ldr	r0, [pc, #260]	@ (8000ad4 <MX_GPIO_Init+0x1e8>)
 80009d0:	f003 f8e6 	bl	8003ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009da:	483f      	ldr	r0, [pc, #252]	@ (8000ad8 <MX_GPIO_Init+0x1ec>)
 80009dc:	f003 f8e0 	bl	8003ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0|OLED_RST_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2141      	movs	r1, #65	@ 0x41
 80009e4:	483d      	ldr	r0, [pc, #244]	@ (8000adc <MX_GPIO_Init+0x1f0>)
 80009e6:	f003 f8db 	bl	8003ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80009ea:	2320      	movs	r3, #32
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009f6:	2301      	movs	r3, #1
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4832      	ldr	r0, [pc, #200]	@ (8000acc <MX_GPIO_Init+0x1e0>)
 8000a02:	f002 ff1d 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a12:	2301      	movs	r3, #1
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	482c      	ldr	r0, [pc, #176]	@ (8000ad0 <MX_GPIO_Init+0x1e4>)
 8000a1e:	f002 ff0f 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 8000a22:	2388      	movs	r3, #136	@ 0x88
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4826      	ldr	r0, [pc, #152]	@ (8000ad4 <MX_GPIO_Init+0x1e8>)
 8000a3a:	f002 ff01 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 8000a3e:	2340      	movs	r3, #64	@ 0x40
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a42:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4820      	ldr	r0, [pc, #128]	@ (8000ad4 <MX_GPIO_Init+0x1e8>)
 8000a54:	f002 fef4 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR2104_SD_Pin;
 8000a58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a62:	2302      	movs	r3, #2
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IR2104_SD_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4819      	ldr	r0, [pc, #100]	@ (8000ad8 <MX_GPIO_Init+0x1ec>)
 8000a72:	f002 fee5 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4813      	ldr	r0, [pc, #76]	@ (8000adc <MX_GPIO_Init+0x1f0>)
 8000a8e:	f002 fed7 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000a92:	2340      	movs	r3, #64	@ 0x40
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480c      	ldr	r0, [pc, #48]	@ (8000adc <MX_GPIO_Init+0x1f0>)
 8000aaa:	f002 fec9 	bl	8003840 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	2017      	movs	r0, #23
 8000ab4:	f002 fbd4 	bl	8003260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ab8:	2017      	movs	r0, #23
 8000aba:	f002 fbeb 	bl	8003294 <HAL_NVIC_EnableIRQ>

}
 8000abe:	bf00      	nop
 8000ac0:	3730      	adds	r7, #48	@ 0x30
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	58024400 	.word	0x58024400
 8000acc:	58020800 	.word	0x58020800
 8000ad0:	58020400 	.word	0x58020400
 8000ad4:	58021800 	.word	0x58021800
 8000ad8:	58020000 	.word	0x58020000
 8000adc:	58022000 	.word	0x58022000

08000ae0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <MX_I2C1_Init+0x74>)
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b58 <MX_I2C1_Init+0x78>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <MX_I2C1_Init+0x74>)
 8000aec:	4a1b      	ldr	r2, [pc, #108]	@ (8000b5c <MX_I2C1_Init+0x7c>)
 8000aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000af0:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <MX_I2C1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af6:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <MX_I2C1_Init+0x74>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000afc:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <MX_I2C1_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b02:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <MX_I2C1_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <MX_I2C1_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <MX_I2C1_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <MX_I2C1_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b1a:	480e      	ldr	r0, [pc, #56]	@ (8000b54 <MX_I2C1_Init+0x74>)
 8000b1c:	f003 f88e 	bl	8003c3c <HAL_I2C_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b26:	f000 f9c1 	bl	8000eac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4809      	ldr	r0, [pc, #36]	@ (8000b54 <MX_I2C1_Init+0x74>)
 8000b2e:	f003 fca9 	bl	8004484 <HAL_I2CEx_ConfigAnalogFilter>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b38:	f000 f9b8 	bl	8000eac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_I2C1_Init+0x74>)
 8000b40:	f003 fceb 	bl	800451a <HAL_I2CEx_ConfigDigitalFilter>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b4a:	f000 f9af 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	240002b0 	.word	0x240002b0
 8000b58:	40005400 	.word	0x40005400
 8000b5c:	307075b1 	.word	0x307075b1

08000b60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0ba      	sub	sp, #232	@ 0xe8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	22c0      	movs	r2, #192	@ 0xc0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f00e fdb6 	bl	800f6f2 <memset>
  if(i2cHandle->Instance==I2C1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a26      	ldr	r2, [pc, #152]	@ (8000c24 <HAL_I2C_MspInit+0xc4>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d145      	bne.n	8000c1c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b90:	f04f 0208 	mov.w	r2, #8
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f004 fd50 	bl	800564c <HAL_RCCEx_PeriphCLKConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000bb2:	f000 f97b 	bl	8000eac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <HAL_I2C_MspInit+0xc8>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbc:	4a1a      	ldr	r2, [pc, #104]	@ (8000c28 <HAL_I2C_MspInit+0xc8>)
 8000bbe:	f043 0302 	orr.w	r3, r3, #2
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc6:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <HAL_I2C_MspInit+0xc8>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bd4:	23c0      	movs	r3, #192	@ 0xc0
 8000bd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bda:	2312      	movs	r3, #18
 8000bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000be6:	2301      	movs	r3, #1
 8000be8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bec:	2304      	movs	r3, #4
 8000bee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480c      	ldr	r0, [pc, #48]	@ (8000c2c <HAL_I2C_MspInit+0xcc>)
 8000bfa:	f002 fe21 	bl	8003840 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <HAL_I2C_MspInit+0xc8>)
 8000c00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c04:	4a08      	ldr	r2, [pc, #32]	@ (8000c28 <HAL_I2C_MspInit+0xc8>)
 8000c06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <HAL_I2C_MspInit+0xc8>)
 8000c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	37e8      	adds	r7, #232	@ 0xe8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40005400 	.word	0x40005400
 8000c28:	58024400 	.word	0x58024400
 8000c2c:	58020400 	.word	0x58020400

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c34:	f000 f8fc 	bl	8000e30 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c38:	f000 fe70 	bl	800191c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3c:	f000 f81a 	bl	8000c74 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c40:	f000 f8c6 	bl	8000dd0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c44:	f7ff fe52 	bl	80008ec <MX_GPIO_Init>
  MX_ADC3_Init();
 8000c48:	f7ff fcb0 	bl	80005ac <MX_ADC3_Init>
  MX_SPI1_Init();
 8000c4c:	f000 f934 	bl	8000eb8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000c50:	f000 f988 	bl	8000f64 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000c54:	f7ff ff44 	bl	8000ae0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000c58:	f000 fc6c 	bl	8001534 <MX_TIM2_Init>
  MX_DAC1_Init();
 8000c5c:	f7ff fd6c 	bl	8000738 <MX_DAC1_Init>
  MX_TIM8_Init();
 8000c60:	f000 fce0 	bl	8001624 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c64:	f009 fb86 	bl	800a374 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c68:	f7ff fde6 	bl	8000838 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c6c:	f009 fba6 	bl	800a3bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <main+0x40>

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b09e      	sub	sp, #120	@ 0x78
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c7e:	224c      	movs	r2, #76	@ 0x4c
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f00e fd35 	bl	800f6f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2220      	movs	r2, #32
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f00e fd2e 	bl	800f6f2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c96:	2002      	movs	r0, #2
 8000c98:	f003 fc8c 	bl	80045b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	4b48      	ldr	r3, [pc, #288]	@ (8000dc4 <SystemClock_Config+0x150>)
 8000ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ca4:	4a47      	ldr	r2, [pc, #284]	@ (8000dc4 <SystemClock_Config+0x150>)
 8000ca6:	f023 0301 	bic.w	r3, r3, #1
 8000caa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cac:	4b45      	ldr	r3, [pc, #276]	@ (8000dc4 <SystemClock_Config+0x150>)
 8000cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	4b44      	ldr	r3, [pc, #272]	@ (8000dc8 <SystemClock_Config+0x154>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	4a43      	ldr	r2, [pc, #268]	@ (8000dc8 <SystemClock_Config+0x154>)
 8000cbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cc0:	6193      	str	r3, [r2, #24]
 8000cc2:	4b41      	ldr	r3, [pc, #260]	@ (8000dc8 <SystemClock_Config+0x154>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cce:	bf00      	nop
 8000cd0:	4b3d      	ldr	r3, [pc, #244]	@ (8000dc8 <SystemClock_Config+0x154>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cdc:	d1f8      	bne.n	8000cd0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	4b3b      	ldr	r3, [pc, #236]	@ (8000dcc <SystemClock_Config+0x158>)
 8000ce0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ce4:	4a39      	ldr	r2, [pc, #228]	@ (8000dcc <SystemClock_Config+0x158>)
 8000ce6:	f043 0302 	orr.w	r3, r3, #2
 8000cea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cee:	4b37      	ldr	r3, [pc, #220]	@ (8000dcc <SystemClock_Config+0x158>)
 8000cf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	4b31      	ldr	r3, [pc, #196]	@ (8000dc8 <SystemClock_Config+0x154>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a30      	ldr	r2, [pc, #192]	@ (8000dc8 <SystemClock_Config+0x154>)
 8000d06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc8 <SystemClock_Config+0x154>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc4 <SystemClock_Config+0x150>)
 8000d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d1a:	4a2a      	ldr	r2, [pc, #168]	@ (8000dc4 <SystemClock_Config+0x150>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d22:	4b28      	ldr	r3, [pc, #160]	@ (8000dc4 <SystemClock_Config+0x150>)
 8000d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d2e:	bf00      	nop
 8000d30:	4b25      	ldr	r3, [pc, #148]	@ (8000dc8 <SystemClock_Config+0x154>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d3c:	d1f8      	bne.n	8000d30 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d46:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000d50:	2305      	movs	r3, #5
 8000d52:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d54:	23c0      	movs	r3, #192	@ 0xc0
 8000d56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d64:	2308      	movs	r3, #8
 8000d66:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 fc57 	bl	8004628 <HAL_RCC_OscConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000d80:	f000 f894 	bl	8000eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d84:	233f      	movs	r3, #63	@ 0x3f
 8000d86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d90:	2308      	movs	r3, #8
 8000d92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d94:	2340      	movs	r3, #64	@ 0x40
 8000d96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d98:	2340      	movs	r3, #64	@ 0x40
 8000d9a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000da2:	2340      	movs	r3, #64	@ 0x40
 8000da4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	2104      	movs	r1, #4
 8000dac:	4618      	mov	r0, r3
 8000dae:	f004 f895 	bl	8004edc <HAL_RCC_ClockConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000db8:	f000 f878 	bl	8000eac <Error_Handler>
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	3778      	adds	r7, #120	@ 0x78
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	58000400 	.word	0x58000400
 8000dc8:	58024800 	.word	0x58024800
 8000dcc:	58024400 	.word	0x58024400

08000dd0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b0b0      	sub	sp, #192	@ 0xc0
 8000dd4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	22c0      	movs	r2, #192	@ 0xc0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f00e fc88 	bl	800f6f2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
 8000de2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000dee:	2319      	movs	r3, #25
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 8000df2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000e00:	2302      	movs	r3, #2
 8000e02:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000e10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e14:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e16:	463b      	mov	r3, r7
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f004 fc17 	bl	800564c <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000e24:	f000 f842 	bl	8000eac <Error_Handler>
  }
}
 8000e28:	bf00      	nop
 8000e2a:	37c0      	adds	r7, #192	@ 0xc0
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e36:	463b      	mov	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e42:	f002 fa35 	bl	80032b0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e46:	2301      	movs	r3, #1
 8000e48:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e52:	231f      	movs	r3, #31
 8000e54:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e56:	2387      	movs	r3, #135	@ 0x87
 8000e58:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e62:	2301      	movs	r3, #1
 8000e64:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e66:	2301      	movs	r3, #1
 8000e68:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e72:	463b      	mov	r3, r7
 8000e74:	4618      	mov	r0, r3
 8000e76:	f002 fa53 	bl	8003320 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e7a:	2004      	movs	r0, #4
 8000e7c:	f002 fa30 	bl	80032e0 <HAL_MPU_Enable>

}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d101      	bne.n	8000e9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e9a:	f000 fd7b 	bl	8001994 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40001000 	.word	0x40001000

08000eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
}
 8000eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <Error_Handler+0x8>

08000eb8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ebc:	4b27      	ldr	r3, [pc, #156]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000ebe:	4a28      	ldr	r2, [pc, #160]	@ (8000f60 <MX_SPI1_Init+0xa8>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ec2:	4b26      	ldr	r3, [pc, #152]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000ec4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ec8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000eca:	4b24      	ldr	r3, [pc, #144]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000ecc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ed0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ed2:	4b22      	ldr	r3, [pc, #136]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ed8:	4b20      	ldr	r3, [pc, #128]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ede:	4b1f      	ldr	r3, [pc, #124]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000ee6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000eea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000efe:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f04:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f10:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f12:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f18:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f36:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f4a:	f007 f87d 	bl	8008048 <HAL_SPI_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f54:	f7ff ffaa 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	24000304 	.word	0x24000304
 8000f60:	40013000 	.word	0x40013000

08000f64 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000f68:	4b28      	ldr	r3, [pc, #160]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000f6a:	4a29      	ldr	r2, [pc, #164]	@ (8001010 <MX_SPI2_Init+0xac>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f6e:	4b27      	ldr	r3, [pc, #156]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000f70:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000f76:	4b25      	ldr	r3, [pc, #148]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000f78:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f7c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000f7e:	4b23      	ldr	r3, [pc, #140]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000f80:	220f      	movs	r2, #15
 8000f82:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f84:	4b21      	ldr	r3, [pc, #132]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000f86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000f94:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000f9c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000fa0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fae:	4b17      	ldr	r3, [pc, #92]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fba:	4b14      	ldr	r3, [pc, #80]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000fbc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fc0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fc2:	4b12      	ldr	r3, [pc, #72]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fda:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	@ (800100c <MX_SPI2_Init+0xa8>)
 8000ffa:	f007 f825 	bl	8008048 <HAL_SPI_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8001004:	f7ff ff52 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2400038c 	.word	0x2400038c
 8001010:	40003800 	.word	0x40003800

08001014 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08c      	sub	sp, #48	@ 0x30
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a34      	ldr	r2, [pc, #208]	@ (8001104 <HAL_SPI_MspInit+0xf0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d12e      	bne.n	8001094 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001036:	4b34      	ldr	r3, [pc, #208]	@ (8001108 <HAL_SPI_MspInit+0xf4>)
 8001038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800103c:	4a32      	ldr	r2, [pc, #200]	@ (8001108 <HAL_SPI_MspInit+0xf4>)
 800103e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001042:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001046:	4b30      	ldr	r3, [pc, #192]	@ (8001108 <HAL_SPI_MspInit+0xf4>)
 8001048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800104c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001050:	61bb      	str	r3, [r7, #24]
 8001052:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b2c      	ldr	r3, [pc, #176]	@ (8001108 <HAL_SPI_MspInit+0xf4>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	4a2b      	ldr	r2, [pc, #172]	@ (8001108 <HAL_SPI_MspInit+0xf4>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001064:	4b28      	ldr	r3, [pc, #160]	@ (8001108 <HAL_SPI_MspInit+0xf4>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 8001072:	23a0      	movs	r3, #160	@ 0xa0
 8001074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800107e:	2301      	movs	r3, #1
 8001080:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001082:	2305      	movs	r3, #5
 8001084:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	481f      	ldr	r0, [pc, #124]	@ (800110c <HAL_SPI_MspInit+0xf8>)
 800108e:	f002 fbd7 	bl	8003840 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001092:	e032      	b.n	80010fa <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a1d      	ldr	r2, [pc, #116]	@ (8001110 <HAL_SPI_MspInit+0xfc>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d12d      	bne.n	80010fa <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800109e:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <HAL_SPI_MspInit+0xf4>)
 80010a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010a4:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <HAL_SPI_MspInit+0xf4>)
 80010a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010ae:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <HAL_SPI_MspInit+0xf4>)
 80010b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80010bc:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <HAL_SPI_MspInit+0xf4>)
 80010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c2:	4a11      	ldr	r2, [pc, #68]	@ (8001108 <HAL_SPI_MspInit+0xf4>)
 80010c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <HAL_SPI_MspInit+0xf4>)
 80010ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80010da:	2306      	movs	r3, #6
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010e6:	2301      	movs	r3, #1
 80010e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ea:	2305      	movs	r3, #5
 80010ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4619      	mov	r1, r3
 80010f4:	4807      	ldr	r0, [pc, #28]	@ (8001114 <HAL_SPI_MspInit+0x100>)
 80010f6:	f002 fba3 	bl	8003840 <HAL_GPIO_Init>
}
 80010fa:	bf00      	nop
 80010fc:	3730      	adds	r7, #48	@ 0x30
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40013000 	.word	0x40013000
 8001108:	58024400 	.word	0x58024400
 800110c:	58020000 	.word	0x58020000
 8001110:	40003800 	.word	0x40003800
 8001114:	58022000 	.word	0x58022000

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <HAL_MspInit+0x38>)
 8001120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001124:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <HAL_MspInit+0x38>)
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800112e:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <HAL_MspInit+0x38>)
 8001130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	210f      	movs	r1, #15
 8001140:	f06f 0001 	mvn.w	r0, #1
 8001144:	f002 f88c 	bl	8003260 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	58024400 	.word	0x58024400

08001154 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b090      	sub	sp, #64	@ 0x40
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b0f      	cmp	r3, #15
 8001160:	d827      	bhi.n	80011b2 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001162:	2200      	movs	r2, #0
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	2036      	movs	r0, #54	@ 0x36
 8001168:	f002 f87a 	bl	8003260 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800116c:	2036      	movs	r0, #54	@ 0x36
 800116e:	f002 f891 	bl	8003294 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001172:	4a29      	ldr	r2, [pc, #164]	@ (8001218 <HAL_InitTick+0xc4>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001178:	4b28      	ldr	r3, [pc, #160]	@ (800121c <HAL_InitTick+0xc8>)
 800117a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800117e:	4a27      	ldr	r2, [pc, #156]	@ (800121c <HAL_InitTick+0xc8>)
 8001180:	f043 0310 	orr.w	r3, r3, #16
 8001184:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001188:	4b24      	ldr	r3, [pc, #144]	@ (800121c <HAL_InitTick+0xc8>)
 800118a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001196:	f107 0210 	add.w	r2, r7, #16
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 fa11 	bl	80055c8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d106      	bne.n	80011be <HAL_InitTick+0x6a>
 80011b0:	e001      	b.n	80011b6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e02b      	b.n	800120e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011b6:	f004 f9f1 	bl	800559c <HAL_RCC_GetPCLK1Freq>
 80011ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80011bc:	e004      	b.n	80011c8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011be:	f004 f9ed 	bl	800559c <HAL_RCC_GetPCLK1Freq>
 80011c2:	4603      	mov	r3, r0
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011ca:	4a15      	ldr	r2, [pc, #84]	@ (8001220 <HAL_InitTick+0xcc>)
 80011cc:	fba2 2303 	umull	r2, r3, r2, r3
 80011d0:	0c9b      	lsrs	r3, r3, #18
 80011d2:	3b01      	subs	r3, #1
 80011d4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011d6:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <HAL_InitTick+0xd0>)
 80011d8:	4a13      	ldr	r2, [pc, #76]	@ (8001228 <HAL_InitTick+0xd4>)
 80011da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <HAL_InitTick+0xd0>)
 80011de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001224 <HAL_InitTick+0xd0>)
 80011e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <HAL_InitTick+0xd0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <HAL_InitTick+0xd0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80011f6:	480b      	ldr	r0, [pc, #44]	@ (8001224 <HAL_InitTick+0xd0>)
 80011f8:	f007 fd93 	bl	8008d22 <HAL_TIM_Base_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d104      	bne.n	800120c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001202:	4808      	ldr	r0, [pc, #32]	@ (8001224 <HAL_InitTick+0xd0>)
 8001204:	f007 fde4 	bl	8008dd0 <HAL_TIM_Base_Start_IT>
 8001208:	4603      	mov	r3, r0
 800120a:	e000      	b.n	800120e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
}
 800120e:	4618      	mov	r0, r3
 8001210:	3740      	adds	r7, #64	@ 0x40
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	24000008 	.word	0x24000008
 800121c:	58024400 	.word	0x58024400
 8001220:	431bde83 	.word	0x431bde83
 8001224:	24000414 	.word	0x24000414
 8001228:	40001000 	.word	0x40001000

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <NMI_Handler+0x4>

08001234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <MemManage_Handler+0x4>

08001244 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <UsageFault_Handler+0x4>

08001254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 8001266:	2040      	movs	r0, #64	@ 0x40
 8001268:	f002 fccd 	bl	8003c06 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <TIM6_DAC_IRQHandler+0x20>)
 8001276:	791b      	ldrb	r3, [r3, #4]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800127e:	4804      	ldr	r0, [pc, #16]	@ (8001290 <TIM6_DAC_IRQHandler+0x20>)
 8001280:	f002 f907 	bl	8003492 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001284:	4803      	ldr	r0, [pc, #12]	@ (8001294 <TIM6_DAC_IRQHandler+0x24>)
 8001286:	f007 ff8b 	bl	80091a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	24000284 	.word	0x24000284
 8001294:	24000414 	.word	0x24000414

08001298 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return 1;
 800129c:	2301      	movs	r3, #1
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_kill>:

int _kill(int pid, int sig)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012b2:	f00e fa81 	bl	800f7b8 <__errno>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2216      	movs	r2, #22
 80012ba:	601a      	str	r2, [r3, #0]
  return -1;
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_exit>:

void _exit (int status)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ffe7 	bl	80012a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012da:	bf00      	nop
 80012dc:	e7fd      	b.n	80012da <_exit+0x12>

080012de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	e00a      	b.n	8001306 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012f0:	f3af 8000 	nop.w
 80012f4:	4601      	mov	r1, r0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	60ba      	str	r2, [r7, #8]
 80012fc:	b2ca      	uxtb	r2, r1
 80012fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	dbf0      	blt.n	80012f0 <_read+0x12>
  }

  return len;
 800130e:	687b      	ldr	r3, [r7, #4]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	e009      	b.n	800133e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1c5a      	adds	r2, r3, #1
 800132e:	60ba      	str	r2, [r7, #8]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	3301      	adds	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	429a      	cmp	r2, r3
 8001344:	dbf1      	blt.n	800132a <_write+0x12>
  }
  return len;
 8001346:	687b      	ldr	r3, [r7, #4]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <_close>:

int _close(int file)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001358:	f04f 33ff 	mov.w	r3, #4294967295
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001378:	605a      	str	r2, [r3, #4]
  return 0;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_isatty>:

int _isatty(int file)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001390:	2301      	movs	r3, #1
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800139e:	b480      	push	{r7}
 80013a0:	b085      	sub	sp, #20
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c0:	4a14      	ldr	r2, [pc, #80]	@ (8001414 <_sbrk+0x5c>)
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <_sbrk+0x60>)
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <_sbrk+0x64>)
 80013d6:	4a12      	ldr	r2, [pc, #72]	@ (8001420 <_sbrk+0x68>)
 80013d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013da:	4b10      	ldr	r3, [pc, #64]	@ (800141c <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d207      	bcs.n	80013f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e8:	f00e f9e6 	bl	800f7b8 <__errno>
 80013ec:	4603      	mov	r3, r0
 80013ee:	220c      	movs	r2, #12
 80013f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	e009      	b.n	800140c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f8:	4b08      	ldr	r3, [pc, #32]	@ (800141c <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fe:	4b07      	ldr	r3, [pc, #28]	@ (800141c <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <_sbrk+0x64>)
 8001408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	24080000 	.word	0x24080000
 8001418:	00004000 	.word	0x00004000
 800141c:	24000460 	.word	0x24000460
 8001420:	240060e0 	.word	0x240060e0

08001424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001428:	4b37      	ldr	r3, [pc, #220]	@ (8001508 <SystemInit+0xe4>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800142e:	4a36      	ldr	r2, [pc, #216]	@ (8001508 <SystemInit+0xe4>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001438:	4b34      	ldr	r3, [pc, #208]	@ (800150c <SystemInit+0xe8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 030f 	and.w	r3, r3, #15
 8001440:	2b06      	cmp	r3, #6
 8001442:	d807      	bhi.n	8001454 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001444:	4b31      	ldr	r3, [pc, #196]	@ (800150c <SystemInit+0xe8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 030f 	bic.w	r3, r3, #15
 800144c:	4a2f      	ldr	r2, [pc, #188]	@ (800150c <SystemInit+0xe8>)
 800144e:	f043 0307 	orr.w	r3, r3, #7
 8001452:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001454:	4b2e      	ldr	r3, [pc, #184]	@ (8001510 <SystemInit+0xec>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a2d      	ldr	r2, [pc, #180]	@ (8001510 <SystemInit+0xec>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001460:	4b2b      	ldr	r3, [pc, #172]	@ (8001510 <SystemInit+0xec>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001466:	4b2a      	ldr	r3, [pc, #168]	@ (8001510 <SystemInit+0xec>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4929      	ldr	r1, [pc, #164]	@ (8001510 <SystemInit+0xec>)
 800146c:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <SystemInit+0xf0>)
 800146e:	4013      	ands	r3, r2
 8001470:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001472:	4b26      	ldr	r3, [pc, #152]	@ (800150c <SystemInit+0xe8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	d007      	beq.n	800148e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800147e:	4b23      	ldr	r3, [pc, #140]	@ (800150c <SystemInit+0xe8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 030f 	bic.w	r3, r3, #15
 8001486:	4a21      	ldr	r2, [pc, #132]	@ (800150c <SystemInit+0xe8>)
 8001488:	f043 0307 	orr.w	r3, r3, #7
 800148c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800148e:	4b20      	ldr	r3, [pc, #128]	@ (8001510 <SystemInit+0xec>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001494:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <SystemInit+0xec>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800149a:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <SystemInit+0xec>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <SystemInit+0xec>)
 80014a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001518 <SystemInit+0xf4>)
 80014a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <SystemInit+0xec>)
 80014a8:	4a1c      	ldr	r2, [pc, #112]	@ (800151c <SystemInit+0xf8>)
 80014aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014ac:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <SystemInit+0xec>)
 80014ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001520 <SystemInit+0xfc>)
 80014b0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014b2:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <SystemInit+0xec>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014b8:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <SystemInit+0xec>)
 80014ba:	4a19      	ldr	r2, [pc, #100]	@ (8001520 <SystemInit+0xfc>)
 80014bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014be:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <SystemInit+0xec>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <SystemInit+0xec>)
 80014c6:	4a16      	ldr	r2, [pc, #88]	@ (8001520 <SystemInit+0xfc>)
 80014c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <SystemInit+0xec>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <SystemInit+0xec>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001510 <SystemInit+0xec>)
 80014d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <SystemInit+0xec>)
 80014de:	2200      	movs	r2, #0
 80014e0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014e2:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <SystemInit+0x100>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <SystemInit+0x104>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014ee:	d202      	bcs.n	80014f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014f0:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <SystemInit+0x108>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <SystemInit+0x10c>)
 80014f8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00
 800150c:	52002000 	.word	0x52002000
 8001510:	58024400 	.word	0x58024400
 8001514:	eaf6ed7f 	.word	0xeaf6ed7f
 8001518:	02020200 	.word	0x02020200
 800151c:	01ff0000 	.word	0x01ff0000
 8001520:	01010280 	.word	0x01010280
 8001524:	5c001000 	.word	0x5c001000
 8001528:	ffff0000 	.word	0xffff0000
 800152c:	51008108 	.word	0x51008108
 8001530:	52004000 	.word	0x52004000

08001534 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	@ 0x38
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001554:	463b      	mov	r3, r7
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]
 8001562:	615a      	str	r2, [r3, #20]
 8001564:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001566:	4b2e      	ldr	r3, [pc, #184]	@ (8001620 <MX_TIM2_Init+0xec>)
 8001568:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800156c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800156e:	4b2c      	ldr	r3, [pc, #176]	@ (8001620 <MX_TIM2_Init+0xec>)
 8001570:	2200      	movs	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <MX_TIM2_Init+0xec>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 800157a:	4b29      	ldr	r3, [pc, #164]	@ (8001620 <MX_TIM2_Init+0xec>)
 800157c:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001580:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b27      	ldr	r3, [pc, #156]	@ (8001620 <MX_TIM2_Init+0xec>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b25      	ldr	r3, [pc, #148]	@ (8001620 <MX_TIM2_Init+0xec>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800158e:	4824      	ldr	r0, [pc, #144]	@ (8001620 <MX_TIM2_Init+0xec>)
 8001590:	f007 fbc7 	bl	8008d22 <HAL_TIM_Base_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800159a:	f7ff fc87 	bl	8000eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015a8:	4619      	mov	r1, r3
 80015aa:	481d      	ldr	r0, [pc, #116]	@ (8001620 <MX_TIM2_Init+0xec>)
 80015ac:	f008 f814 	bl	80095d8 <HAL_TIM_ConfigClockSource>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80015b6:	f7ff fc79 	bl	8000eac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015ba:	4819      	ldr	r0, [pc, #100]	@ (8001620 <MX_TIM2_Init+0xec>)
 80015bc:	f007 fc80 	bl	8008ec0 <HAL_TIM_PWM_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80015c6:	f7ff fc71 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4619      	mov	r1, r3
 80015d8:	4811      	ldr	r0, [pc, #68]	@ (8001620 <MX_TIM2_Init+0xec>)
 80015da:	f008 fd5d 	bl	800a098 <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80015e4:	f7ff fc62 	bl	8000eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e8:	2360      	movs	r3, #96	@ 0x60
 80015ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 80015ec:	f242 3327 	movw	r3, #8999	@ 0x2327
 80015f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80015f6:	2304      	movs	r3, #4
 80015f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015fa:	463b      	mov	r3, r7
 80015fc:	2200      	movs	r2, #0
 80015fe:	4619      	mov	r1, r3
 8001600:	4807      	ldr	r0, [pc, #28]	@ (8001620 <MX_TIM2_Init+0xec>)
 8001602:	f007 fed5 	bl	80093b0 <HAL_TIM_PWM_ConfigChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800160c:	f7ff fc4e 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001610:	4803      	ldr	r0, [pc, #12]	@ (8001620 <MX_TIM2_Init+0xec>)
 8001612:	f000 f8f7 	bl	8001804 <HAL_TIM_MspPostInit>

}
 8001616:	bf00      	nop
 8001618:	3738      	adds	r7, #56	@ 0x38
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	24000464 	.word	0x24000464

08001624 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b09a      	sub	sp, #104	@ 0x68
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001644:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
 8001654:	615a      	str	r2, [r3, #20]
 8001656:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	222c      	movs	r2, #44	@ 0x2c
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f00e f847 	bl	800f6f2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001664:	4b49      	ldr	r3, [pc, #292]	@ (800178c <MX_TIM8_Init+0x168>)
 8001666:	4a4a      	ldr	r2, [pc, #296]	@ (8001790 <MX_TIM8_Init+0x16c>)
 8001668:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800166a:	4b48      	ldr	r3, [pc, #288]	@ (800178c <MX_TIM8_Init+0x168>)
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	4b46      	ldr	r3, [pc, #280]	@ (800178c <MX_TIM8_Init+0x168>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000-1;
 8001676:	4b45      	ldr	r3, [pc, #276]	@ (800178c <MX_TIM8_Init+0x168>)
 8001678:	f642 62df 	movw	r2, #11999	@ 0x2edf
 800167c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167e:	4b43      	ldr	r3, [pc, #268]	@ (800178c <MX_TIM8_Init+0x168>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001684:	4b41      	ldr	r3, [pc, #260]	@ (800178c <MX_TIM8_Init+0x168>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168a:	4b40      	ldr	r3, [pc, #256]	@ (800178c <MX_TIM8_Init+0x168>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001690:	483e      	ldr	r0, [pc, #248]	@ (800178c <MX_TIM8_Init+0x168>)
 8001692:	f007 fb46 	bl	8008d22 <HAL_TIM_Base_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800169c:	f7ff fc06 	bl	8000eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016aa:	4619      	mov	r1, r3
 80016ac:	4837      	ldr	r0, [pc, #220]	@ (800178c <MX_TIM8_Init+0x168>)
 80016ae:	f007 ff93 	bl	80095d8 <HAL_TIM_ConfigClockSource>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80016b8:	f7ff fbf8 	bl	8000eac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016bc:	4833      	ldr	r0, [pc, #204]	@ (800178c <MX_TIM8_Init+0x168>)
 80016be:	f007 fbff 	bl	8008ec0 <HAL_TIM_PWM_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80016c8:	f7ff fbf0 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016d8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016dc:	4619      	mov	r1, r3
 80016de:	482b      	ldr	r0, [pc, #172]	@ (800178c <MX_TIM8_Init+0x168>)
 80016e0:	f008 fcda 	bl	800a098 <HAL_TIMEx_MasterConfigSynchronization>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80016ea:	f7ff fbdf 	bl	8000eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ee:	2360      	movs	r3, #96	@ 0x60
 80016f0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f6:	2300      	movs	r3, #0
 80016f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016fa:	2300      	movs	r3, #0
 80016fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80016fe:	2304      	movs	r3, #4
 8001700:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800170e:	2200      	movs	r2, #0
 8001710:	4619      	mov	r1, r3
 8001712:	481e      	ldr	r0, [pc, #120]	@ (800178c <MX_TIM8_Init+0x168>)
 8001714:	f007 fe4c 	bl	80093b0 <HAL_TIM_PWM_ConfigChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800171e:	f7ff fbc5 	bl	8000eac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001722:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001726:	2204      	movs	r2, #4
 8001728:	4619      	mov	r1, r3
 800172a:	4818      	ldr	r0, [pc, #96]	@ (800178c <MX_TIM8_Init+0x168>)
 800172c:	f007 fe40 	bl	80093b0 <HAL_TIM_PWM_ConfigChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8001736:	f7ff fbb9 	bl	8000eac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800174e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001752:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800175c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	4619      	mov	r1, r3
 800176e:	4807      	ldr	r0, [pc, #28]	@ (800178c <MX_TIM8_Init+0x168>)
 8001770:	f008 fd20 	bl	800a1b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 800177a:	f7ff fb97 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800177e:	4803      	ldr	r0, [pc, #12]	@ (800178c <MX_TIM8_Init+0x168>)
 8001780:	f000 f840 	bl	8001804 <HAL_TIM_MspPostInit>

}
 8001784:	bf00      	nop
 8001786:	3768      	adds	r7, #104	@ 0x68
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	240004b0 	.word	0x240004b0
 8001790:	40010400 	.word	0x40010400

08001794 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017a4:	d10f      	bne.n	80017c6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_TIM_Base_MspInit+0x68>)
 80017a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017ac:	4a13      	ldr	r2, [pc, #76]	@ (80017fc <HAL_TIM_Base_MspInit+0x68>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017b6:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <HAL_TIM_Base_MspInit+0x68>)
 80017b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80017c4:	e013      	b.n	80017ee <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM8)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001800 <HAL_TIM_Base_MspInit+0x6c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d10e      	bne.n	80017ee <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <HAL_TIM_Base_MspInit+0x68>)
 80017d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017d6:	4a09      	ldr	r2, [pc, #36]	@ (80017fc <HAL_TIM_Base_MspInit+0x68>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_TIM_Base_MspInit+0x68>)
 80017e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	58024400 	.word	0x58024400
 8001800:	40010400 	.word	0x40010400

08001804 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	@ 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001824:	d11f      	bne.n	8001866 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <HAL_TIM_MspPostInit+0xb4>)
 8001828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800182c:	4a22      	ldr	r2, [pc, #136]	@ (80018b8 <HAL_TIM_MspPostInit+0xb4>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001836:	4b20      	ldr	r3, [pc, #128]	@ (80018b8 <HAL_TIM_MspPostInit+0xb4>)
 8001838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001844:	2301      	movs	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001850:	2302      	movs	r3, #2
 8001852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001854:	2301      	movs	r3, #1
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	4817      	ldr	r0, [pc, #92]	@ (80018bc <HAL_TIM_MspPostInit+0xb8>)
 8001860:	f001 ffee 	bl	8003840 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001864:	e023      	b.n	80018ae <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a15      	ldr	r2, [pc, #84]	@ (80018c0 <HAL_TIM_MspPostInit+0xbc>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d11e      	bne.n	80018ae <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <HAL_TIM_MspPostInit+0xb4>)
 8001872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001876:	4a10      	ldr	r2, [pc, #64]	@ (80018b8 <HAL_TIM_MspPostInit+0xb4>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001880:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <HAL_TIM_MspPostInit+0xb4>)
 8001882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800188e:	23c0      	movs	r3, #192	@ 0xc0
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800189a:	2302      	movs	r3, #2
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800189e:	2303      	movs	r3, #3
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	4806      	ldr	r0, [pc, #24]	@ (80018c4 <HAL_TIM_MspPostInit+0xc0>)
 80018aa:	f001 ffc9 	bl	8003840 <HAL_GPIO_Init>
}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	@ 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	58024400 	.word	0x58024400
 80018bc:	58020000 	.word	0x58020000
 80018c0:	40010400 	.word	0x40010400
 80018c4:	58020800 	.word	0x58020800

080018c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001900 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018cc:	f7ff fdaa 	bl	8001424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d0:	480c      	ldr	r0, [pc, #48]	@ (8001904 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018d2:	490d      	ldr	r1, [pc, #52]	@ (8001908 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d4:	4a0d      	ldr	r2, [pc, #52]	@ (800190c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d8:	e002      	b.n	80018e0 <LoopCopyDataInit>

080018da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018de:	3304      	adds	r3, #4

080018e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e4:	d3f9      	bcc.n	80018da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001910 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001914 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ec:	e001      	b.n	80018f2 <LoopFillZerobss>

080018ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f0:	3204      	adds	r2, #4

080018f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f4:	d3fb      	bcc.n	80018ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f6:	f00d ff65 	bl	800f7c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fa:	f7ff f999 	bl	8000c30 <main>
  bx  lr
 80018fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001900:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001904:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001908:	24000204 	.word	0x24000204
  ldr r2, =_sidata
 800190c:	08014170 	.word	0x08014170
  ldr r2, =_sbss
 8001910:	24000204 	.word	0x24000204
  ldr r4, =_ebss
 8001914:	240060e0 	.word	0x240060e0

08001918 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC3_IRQHandler>
	...

0800191c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001922:	2003      	movs	r0, #3
 8001924:	f001 fc91 	bl	800324a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001928:	f003 fc8e 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 800192c:	4602      	mov	r2, r0
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <HAL_Init+0x68>)
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	0a1b      	lsrs	r3, r3, #8
 8001934:	f003 030f 	and.w	r3, r3, #15
 8001938:	4913      	ldr	r1, [pc, #76]	@ (8001988 <HAL_Init+0x6c>)
 800193a:	5ccb      	ldrb	r3, [r1, r3]
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
 8001944:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001946:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <HAL_Init+0x68>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	4a0e      	ldr	r2, [pc, #56]	@ (8001988 <HAL_Init+0x6c>)
 8001950:	5cd3      	ldrb	r3, [r2, r3]
 8001952:	f003 031f 	and.w	r3, r3, #31
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
 800195c:	4a0b      	ldr	r2, [pc, #44]	@ (800198c <HAL_Init+0x70>)
 800195e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001960:	4a0b      	ldr	r2, [pc, #44]	@ (8001990 <HAL_Init+0x74>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001966:	2005      	movs	r0, #5
 8001968:	f7ff fbf4 	bl	8001154 <HAL_InitTick>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e002      	b.n	800197c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001976:	f7ff fbcf 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	58024400 	.word	0x58024400
 8001988:	08011dc8 	.word	0x08011dc8
 800198c:	24000004 	.word	0x24000004
 8001990:	24000000 	.word	0x24000000

08001994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_IncTick+0x20>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_IncTick+0x24>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <HAL_IncTick+0x24>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	2400000c 	.word	0x2400000c
 80019b8:	240004fc 	.word	0x240004fc

080019bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return uwTick;
 80019c0:	4b03      	ldr	r3, [pc, #12]	@ (80019d0 <HAL_GetTick+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	240004fc 	.word	0x240004fc

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff ffee 	bl	80019bc <HAL_GetTick>
 80019e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d005      	beq.n	80019fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <HAL_Delay+0x44>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019fa:	bf00      	nop
 80019fc:	f7ff ffde 	bl	80019bc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d8f7      	bhi.n	80019fc <HAL_Delay+0x28>
  {
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2400000c 	.word	0x2400000c

08001a1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a20:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <HAL_GetREVID+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	0c1b      	lsrs	r3, r3, #16
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	5c001000 	.word	0x5c001000

08001a34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	609a      	str	r2, [r3, #8]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3360      	adds	r3, #96	@ 0x60
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	431a      	orrs	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f003 031f 	and.w	r3, r3, #31
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	431a      	orrs	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	611a      	str	r2, [r3, #16]
}
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b087      	sub	sp, #28
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3360      	adds	r3, #96	@ 0x60
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	601a      	str	r2, [r3, #0]
  }
}
 8001b38:	bf00      	nop
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b087      	sub	sp, #28
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3330      	adds	r3, #48	@ 0x30
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	4413      	add	r3, r2
 8001b88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	211f      	movs	r1, #31
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	0e9b      	lsrs	r3, r3, #26
 8001ba2:	f003 011f 	and.w	r1, r3, #31
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bb6:	bf00      	nop
 8001bb8:	371c      	adds	r7, #28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b087      	sub	sp, #28
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3314      	adds	r3, #20
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	0e5b      	lsrs	r3, r3, #25
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	4413      	add	r3, r2
 8001be0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	0d1b      	lsrs	r3, r3, #20
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	2107      	movs	r1, #7
 8001bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	0d1b      	lsrs	r3, r3, #20
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	431a      	orrs	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c0c:	bf00      	nop
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c30:	43db      	mvns	r3, r3
 8001c32:	401a      	ands	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f003 0318 	and.w	r3, r3, #24
 8001c3a:	4908      	ldr	r1, [pc, #32]	@ (8001c5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c3c:	40d9      	lsrs	r1, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	400b      	ands	r3, r1
 8001c42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c46:	431a      	orrs	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	000fffff 	.word	0x000fffff

08001c60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 031f 	and.w	r3, r3, #31
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	4b04      	ldr	r3, [pc, #16]	@ (8001cb8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6093      	str	r3, [r2, #8]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	5fffffc0 	.word	0x5fffffc0

08001cbc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001cd0:	d101      	bne.n	8001cd6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <LL_ADC_EnableInternalRegulator+0x24>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	6fffffc0 	.word	0x6fffffc0

08001d0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d20:	d101      	bne.n	8001d26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <LL_ADC_Enable+0x24>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	f043 0201 	orr.w	r2, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	7fffffc0 	.word	0x7fffffc0

08001d5c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <LL_ADC_Disable+0x24>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	f043 0202 	orr.w	r2, r3, #2
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	7fffffc0 	.word	0x7fffffc0

08001d84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <LL_ADC_IsEnabled+0x18>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <LL_ADC_IsEnabled+0x1a>
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d101      	bne.n	8001dc2 <LL_ADC_IsDisableOngoing+0x18>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <LL_ADC_IsDisableOngoing+0x1a>
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <LL_ADC_REG_StartConversion+0x24>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	f043 0204 	orr.w	r2, r3, #4
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	7fffffc0 	.word	0x7fffffc0

08001df8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d101      	bne.n	8001e10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d101      	bne.n	8001e36 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e44:	b590      	push	{r4, r7, lr}
 8001e46:	b089      	sub	sp, #36	@ 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e18f      	b.n	800217e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d109      	bne.n	8001e80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7fe fc17 	bl	80006a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff19 	bl	8001cbc <LL_ADC_IsDeepPowerDownEnabled>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d004      	beq.n	8001e9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff feff 	bl	8001c98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff ff34 	bl	8001d0c <LL_ADC_IsInternalRegulatorEnabled>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d114      	bne.n	8001ed4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ff18 	bl	8001ce4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eb4:	4b87      	ldr	r3, [pc, #540]	@ (80020d4 <HAL_ADC_Init+0x290>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	099b      	lsrs	r3, r3, #6
 8001eba:	4a87      	ldr	r2, [pc, #540]	@ (80020d8 <HAL_ADC_Init+0x294>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	099b      	lsrs	r3, r3, #6
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ec6:	e002      	b.n	8001ece <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f9      	bne.n	8001ec8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff17 	bl	8001d0c <LL_ADC_IsInternalRegulatorEnabled>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10d      	bne.n	8001f00 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee8:	f043 0210 	orr.w	r2, r3, #16
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef4:	f043 0201 	orr.w	r2, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff77 	bl	8001df8 <LL_ADC_REG_IsConversionOngoing>
 8001f0a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f040 8129 	bne.w	800216c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f040 8125 	bne.w	800216c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f26:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f2a:	f043 0202 	orr.w	r2, r3, #2
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff24 	bl	8001d84 <LL_ADC_IsEnabled>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d136      	bne.n	8001fb0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a65      	ldr	r2, [pc, #404]	@ (80020dc <HAL_ADC_Init+0x298>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d004      	beq.n	8001f56 <HAL_ADC_Init+0x112>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a63      	ldr	r2, [pc, #396]	@ (80020e0 <HAL_ADC_Init+0x29c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d10e      	bne.n	8001f74 <HAL_ADC_Init+0x130>
 8001f56:	4861      	ldr	r0, [pc, #388]	@ (80020dc <HAL_ADC_Init+0x298>)
 8001f58:	f7ff ff14 	bl	8001d84 <LL_ADC_IsEnabled>
 8001f5c:	4604      	mov	r4, r0
 8001f5e:	4860      	ldr	r0, [pc, #384]	@ (80020e0 <HAL_ADC_Init+0x29c>)
 8001f60:	f7ff ff10 	bl	8001d84 <LL_ADC_IsEnabled>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4323      	orrs	r3, r4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bf0c      	ite	eq
 8001f6c:	2301      	moveq	r3, #1
 8001f6e:	2300      	movne	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	e008      	b.n	8001f86 <HAL_ADC_Init+0x142>
 8001f74:	485b      	ldr	r0, [pc, #364]	@ (80020e4 <HAL_ADC_Init+0x2a0>)
 8001f76:	f7ff ff05 	bl	8001d84 <LL_ADC_IsEnabled>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bf0c      	ite	eq
 8001f80:	2301      	moveq	r3, #1
 8001f82:	2300      	movne	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d012      	beq.n	8001fb0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a53      	ldr	r2, [pc, #332]	@ (80020dc <HAL_ADC_Init+0x298>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d004      	beq.n	8001f9e <HAL_ADC_Init+0x15a>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a51      	ldr	r2, [pc, #324]	@ (80020e0 <HAL_ADC_Init+0x29c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d101      	bne.n	8001fa2 <HAL_ADC_Init+0x15e>
 8001f9e:	4a52      	ldr	r2, [pc, #328]	@ (80020e8 <HAL_ADC_Init+0x2a4>)
 8001fa0:	e000      	b.n	8001fa4 <HAL_ADC_Init+0x160>
 8001fa2:	4a52      	ldr	r2, [pc, #328]	@ (80020ec <HAL_ADC_Init+0x2a8>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4610      	mov	r0, r2
 8001fac:	f7ff fd42 	bl	8001a34 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001fb0:	f7ff fd34 	bl	8001a1c <HAL_GetREVID>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d914      	bls.n	8001fe8 <HAL_ADC_Init+0x1a4>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b10      	cmp	r3, #16
 8001fc4:	d110      	bne.n	8001fe8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	7d5b      	ldrb	r3, [r3, #21]
 8001fca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fd0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001fd6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7f1b      	ldrb	r3, [r3, #28]
 8001fdc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001fde:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fe0:	f043 030c 	orr.w	r3, r3, #12
 8001fe4:	61bb      	str	r3, [r7, #24]
 8001fe6:	e00d      	b.n	8002004 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7d5b      	ldrb	r3, [r3, #21]
 8001fec:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ff2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ff8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	7f1b      	ldrb	r3, [r3, #28]
 8001ffe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7f1b      	ldrb	r3, [r3, #28]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d106      	bne.n	800201a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	3b01      	subs	r3, #1
 8002012:	045b      	lsls	r3, r3, #17
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201e:	2b00      	cmp	r3, #0
 8002020:	d009      	beq.n	8002036 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002026:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	4b2c      	ldr	r3, [pc, #176]	@ (80020f0 <HAL_ADC_Init+0x2ac>)
 800203e:	4013      	ands	r3, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	69b9      	ldr	r1, [r7, #24]
 8002046:	430b      	orrs	r3, r1
 8002048:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fed2 	bl	8001df8 <LL_ADC_REG_IsConversionOngoing>
 8002054:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fedf 	bl	8001e1e <LL_ADC_INJ_IsConversionOngoing>
 8002060:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d15f      	bne.n	8002128 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d15c      	bne.n	8002128 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	7d1b      	ldrb	r3, [r3, #20]
 8002072:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	4b1c      	ldr	r3, [pc, #112]	@ (80020f4 <HAL_ADC_Init+0x2b0>)
 8002084:	4013      	ands	r3, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	69b9      	ldr	r1, [r7, #24]
 800208c:	430b      	orrs	r3, r1
 800208e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002096:	2b01      	cmp	r3, #1
 8002098:	d130      	bne.n	80020fc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691a      	ldr	r2, [r3, #16]
 80020a6:	4b14      	ldr	r3, [pc, #80]	@ (80020f8 <HAL_ADC_Init+0x2b4>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020ae:	3a01      	subs	r2, #1
 80020b0:	0411      	lsls	r1, r2, #16
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020b6:	4311      	orrs	r1, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80020bc:	4311      	orrs	r1, r2
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020c2:	430a      	orrs	r2, r1
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	611a      	str	r2, [r3, #16]
 80020d0:	e01c      	b.n	800210c <HAL_ADC_Init+0x2c8>
 80020d2:	bf00      	nop
 80020d4:	24000000 	.word	0x24000000
 80020d8:	053e2d63 	.word	0x053e2d63
 80020dc:	40022000 	.word	0x40022000
 80020e0:	40022100 	.word	0x40022100
 80020e4:	58026000 	.word	0x58026000
 80020e8:	40022300 	.word	0x40022300
 80020ec:	58026300 	.word	0x58026300
 80020f0:	fff0c003 	.word	0xfff0c003
 80020f4:	ffffbffc 	.word	0xffffbffc
 80020f8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0201 	bic.w	r2, r2, #1
 800210a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fe42 	bl	8002dac <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d10c      	bne.n	800214a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	f023 010f 	bic.w	r1, r3, #15
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	1e5a      	subs	r2, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	631a      	str	r2, [r3, #48]	@ 0x30
 8002148:	e007      	b.n	800215a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 020f 	bic.w	r2, r2, #15
 8002158:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800215e:	f023 0303 	bic.w	r3, r3, #3
 8002162:	f043 0201 	orr.w	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	655a      	str	r2, [r3, #84]	@ 0x54
 800216a:	e007      	b.n	800217c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002170:	f043 0210 	orr.w	r2, r3, #16
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800217c:	7ffb      	ldrb	r3, [r7, #31]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3724      	adds	r7, #36	@ 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd90      	pop	{r4, r7, pc}
 8002186:	bf00      	nop

08002188 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a5c      	ldr	r2, [pc, #368]	@ (8002308 <HAL_ADC_Start+0x180>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d004      	beq.n	80021a4 <HAL_ADC_Start+0x1c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a5b      	ldr	r2, [pc, #364]	@ (800230c <HAL_ADC_Start+0x184>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d101      	bne.n	80021a8 <HAL_ADC_Start+0x20>
 80021a4:	4b5a      	ldr	r3, [pc, #360]	@ (8002310 <HAL_ADC_Start+0x188>)
 80021a6:	e000      	b.n	80021aa <HAL_ADC_Start+0x22>
 80021a8:	4b5a      	ldr	r3, [pc, #360]	@ (8002314 <HAL_ADC_Start+0x18c>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fd58 	bl	8001c60 <LL_ADC_GetMultimode>
 80021b0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fe1e 	bl	8001df8 <LL_ADC_REG_IsConversionOngoing>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 809a 	bne.w	80022f8 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_Start+0x4a>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e095      	b.n	80022fe <HAL_ADC_Start+0x176>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fcfc 	bl	8002bd8 <ADC_Enable>
 80021e0:	4603      	mov	r3, r0
 80021e2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 8081 	bne.w	80022ee <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80021f0:	4b49      	ldr	r3, [pc, #292]	@ (8002318 <HAL_ADC_Start+0x190>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a42      	ldr	r2, [pc, #264]	@ (800230c <HAL_ADC_Start+0x184>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d002      	beq.n	800220c <HAL_ADC_Start+0x84>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	e000      	b.n	800220e <HAL_ADC_Start+0x86>
 800220c:	4b3e      	ldr	r3, [pc, #248]	@ (8002308 <HAL_ADC_Start+0x180>)
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	4293      	cmp	r3, r2
 8002214:	d002      	beq.n	800221c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d105      	bne.n	8002228 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002220:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002230:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002234:	d106      	bne.n	8002244 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	f023 0206 	bic.w	r2, r3, #6
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	659a      	str	r2, [r3, #88]	@ 0x58
 8002242:	e002      	b.n	800224a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	221c      	movs	r2, #28
 8002250:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a2b      	ldr	r2, [pc, #172]	@ (800230c <HAL_ADC_Start+0x184>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d002      	beq.n	800226a <HAL_ADC_Start+0xe2>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	e000      	b.n	800226c <HAL_ADC_Start+0xe4>
 800226a:	4b27      	ldr	r3, [pc, #156]	@ (8002308 <HAL_ADC_Start+0x180>)
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	4293      	cmp	r3, r2
 8002272:	d008      	beq.n	8002286 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b05      	cmp	r3, #5
 800227e:	d002      	beq.n	8002286 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b09      	cmp	r3, #9
 8002284:	d114      	bne.n	80022b0 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d007      	beq.n	80022a4 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002298:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800229c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fd91 	bl	8001dd0 <LL_ADC_REG_StartConversion>
 80022ae:	e025      	b.n	80022fc <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a12      	ldr	r2, [pc, #72]	@ (800230c <HAL_ADC_Start+0x184>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d002      	beq.n	80022cc <HAL_ADC_Start+0x144>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	e000      	b.n	80022ce <HAL_ADC_Start+0x146>
 80022cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002308 <HAL_ADC_Start+0x180>)
 80022ce:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00f      	beq.n	80022fc <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80022ec:	e006      	b.n	80022fc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80022f6:	e001      	b.n	80022fc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022f8:	2302      	movs	r3, #2
 80022fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80022fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40022000 	.word	0x40022000
 800230c:	40022100 	.word	0x40022100
 8002310:	40022300 	.word	0x40022300
 8002314:	58026300 	.word	0x58026300
 8002318:	fffff0fe 	.word	0xfffff0fe

0800231c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a72      	ldr	r2, [pc, #456]	@ (80024f4 <HAL_ADC_PollForConversion+0x1d8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d004      	beq.n	800233a <HAL_ADC_PollForConversion+0x1e>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a70      	ldr	r2, [pc, #448]	@ (80024f8 <HAL_ADC_PollForConversion+0x1dc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d101      	bne.n	800233e <HAL_ADC_PollForConversion+0x22>
 800233a:	4b70      	ldr	r3, [pc, #448]	@ (80024fc <HAL_ADC_PollForConversion+0x1e0>)
 800233c:	e000      	b.n	8002340 <HAL_ADC_PollForConversion+0x24>
 800233e:	4b70      	ldr	r3, [pc, #448]	@ (8002500 <HAL_ADC_PollForConversion+0x1e4>)
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fc8d 	bl	8001c60 <LL_ADC_GetMultimode>
 8002346:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b08      	cmp	r3, #8
 800234e:	d102      	bne.n	8002356 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002350:	2308      	movs	r3, #8
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	e037      	b.n	80023c6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2b05      	cmp	r3, #5
 8002360:	d002      	beq.n	8002368 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b09      	cmp	r3, #9
 8002366:	d111      	bne.n	800238c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d007      	beq.n	8002386 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237a:	f043 0220 	orr.w	r2, r3, #32
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e0b1      	b.n	80024ea <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002386:	2304      	movs	r3, #4
 8002388:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800238a:	e01c      	b.n	80023c6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a58      	ldr	r2, [pc, #352]	@ (80024f4 <HAL_ADC_PollForConversion+0x1d8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d004      	beq.n	80023a0 <HAL_ADC_PollForConversion+0x84>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a57      	ldr	r2, [pc, #348]	@ (80024f8 <HAL_ADC_PollForConversion+0x1dc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_PollForConversion+0x88>
 80023a0:	4b56      	ldr	r3, [pc, #344]	@ (80024fc <HAL_ADC_PollForConversion+0x1e0>)
 80023a2:	e000      	b.n	80023a6 <HAL_ADC_PollForConversion+0x8a>
 80023a4:	4b56      	ldr	r3, [pc, #344]	@ (8002500 <HAL_ADC_PollForConversion+0x1e4>)
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fc68 	bl	8001c7c <LL_ADC_GetMultiDMATransfer>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d007      	beq.n	80023c2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b6:	f043 0220 	orr.w	r2, r3, #32
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e093      	b.n	80024ea <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80023c2:	2304      	movs	r3, #4
 80023c4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80023c6:	f7ff faf9 	bl	80019bc <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80023cc:	e021      	b.n	8002412 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d01d      	beq.n	8002412 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80023d6:	f7ff faf1 	bl	80019bc <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d302      	bcc.n	80023ec <HAL_ADC_PollForConversion+0xd0>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d112      	bne.n	8002412 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10b      	bne.n	8002412 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fe:	f043 0204 	orr.w	r2, r3, #4
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e06b      	b.n	80024ea <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0d6      	beq.n	80023ce <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002424:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fb87 	bl	8001b44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01c      	beq.n	8002476 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7d5b      	ldrb	r3, [r3, #21]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d118      	bne.n	8002476 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b08      	cmp	r3, #8
 8002450:	d111      	bne.n	8002476 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002456:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002462:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d105      	bne.n	8002476 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800246e:	f043 0201 	orr.w	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a1f      	ldr	r2, [pc, #124]	@ (80024f8 <HAL_ADC_PollForConversion+0x1dc>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d002      	beq.n	8002486 <HAL_ADC_PollForConversion+0x16a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	e000      	b.n	8002488 <HAL_ADC_PollForConversion+0x16c>
 8002486:	4b1b      	ldr	r3, [pc, #108]	@ (80024f4 <HAL_ADC_PollForConversion+0x1d8>)
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	4293      	cmp	r3, r2
 800248e:	d008      	beq.n	80024a2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b05      	cmp	r3, #5
 800249a:	d002      	beq.n	80024a2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b09      	cmp	r3, #9
 80024a0:	d104      	bne.n	80024ac <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	e00c      	b.n	80024c6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a11      	ldr	r2, [pc, #68]	@ (80024f8 <HAL_ADC_PollForConversion+0x1dc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d002      	beq.n	80024bc <HAL_ADC_PollForConversion+0x1a0>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	e000      	b.n	80024be <HAL_ADC_PollForConversion+0x1a2>
 80024bc:	4b0d      	ldr	r3, [pc, #52]	@ (80024f4 <HAL_ADC_PollForConversion+0x1d8>)
 80024be:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d104      	bne.n	80024d6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2208      	movs	r2, #8
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e008      	b.n	80024e8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d103      	bne.n	80024e8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	220c      	movs	r2, #12
 80024e6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3720      	adds	r7, #32
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40022000 	.word	0x40022000
 80024f8:	40022100 	.word	0x40022100
 80024fc:	40022300 	.word	0x40022300
 8002500:	58026300 	.word	0x58026300

08002504 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b0a1      	sub	sp, #132	@ 0x84
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4a65      	ldr	r2, [pc, #404]	@ (80026d0 <HAL_ADC_ConfigChannel+0x1b0>)
 800253a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_ADC_ConfigChannel+0x2a>
 8002546:	2302      	movs	r3, #2
 8002548:	e32e      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x688>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fc4e 	bl	8001df8 <LL_ADC_REG_IsConversionOngoing>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 8313 	bne.w	8002b8a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	db2c      	blt.n	80025c6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002574:	2b00      	cmp	r3, #0
 8002576:	d108      	bne.n	800258a <HAL_ADC_ConfigChannel+0x6a>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0e9b      	lsrs	r3, r3, #26
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	2201      	movs	r2, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	e016      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x98>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002598:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800259a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800259c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80025a2:	2320      	movs	r3, #32
 80025a4:	e003      	b.n	80025ae <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80025a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	2201      	movs	r2, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	69d1      	ldr	r1, [r2, #28]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	430b      	orrs	r3, r1
 80025c4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6859      	ldr	r1, [r3, #4]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	f7ff fac9 	bl	8001b6a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fc0b 	bl	8001df8 <LL_ADC_REG_IsConversionOngoing>
 80025e2:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fc18 	bl	8001e1e <LL_ADC_INJ_IsConversionOngoing>
 80025ee:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f040 80b8 	bne.w	8002768 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 80b4 	bne.w	8002768 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6819      	ldr	r1, [r3, #0]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	461a      	mov	r2, r3
 800260e:	f7ff fad8 	bl	8001bc2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002612:	4b30      	ldr	r3, [pc, #192]	@ (80026d4 <HAL_ADC_ConfigChannel+0x1b4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800261a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800261e:	d10b      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x118>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	695a      	ldr	r2, [r3, #20]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	e01d      	b.n	8002674 <HAL_ADC_ConfigChannel+0x154>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10b      	bne.n	800265e <HAL_ADC_ConfigChannel+0x13e>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	089b      	lsrs	r3, r3, #2
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	e00a      	b.n	8002674 <HAL_ADC_ConfigChannel+0x154>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	089b      	lsrs	r3, r3, #2
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b04      	cmp	r3, #4
 800267c:	d02c      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6919      	ldr	r1, [r3, #16]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800268c:	f7ff fa06 	bl	8001a9c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6919      	ldr	r1, [r3, #16]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	7e5b      	ldrb	r3, [r3, #25]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d102      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x186>
 80026a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80026a4:	e000      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x188>
 80026a6:	2300      	movs	r3, #0
 80026a8:	461a      	mov	r2, r3
 80026aa:	f7ff fa30 	bl	8001b0e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6919      	ldr	r1, [r3, #16]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	7e1b      	ldrb	r3, [r3, #24]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d102      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x1a4>
 80026be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026c2:	e000      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x1a6>
 80026c4:	2300      	movs	r3, #0
 80026c6:	461a      	mov	r2, r3
 80026c8:	f7ff fa08 	bl	8001adc <LL_ADC_SetDataRightShift>
 80026cc:	e04c      	b.n	8002768 <HAL_ADC_ConfigChannel+0x248>
 80026ce:	bf00      	nop
 80026d0:	47ff0000 	.word	0x47ff0000
 80026d4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	069b      	lsls	r3, r3, #26
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d107      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80026fa:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002702:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	069b      	lsls	r3, r3, #26
 800270c:	429a      	cmp	r2, r3
 800270e:	d107      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800271e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002726:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	069b      	lsls	r3, r3, #26
 8002730:	429a      	cmp	r2, r3
 8002732:	d107      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002742:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800274a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	069b      	lsls	r3, r3, #26
 8002754:	429a      	cmp	r2, r3
 8002756:	d107      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002766:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fb09 	bl	8001d84 <LL_ADC_IsEnabled>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	f040 8211 	bne.w	8002b9c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6819      	ldr	r1, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	461a      	mov	r2, r3
 8002788:	f7ff fa46 	bl	8001c18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4aa1      	ldr	r2, [pc, #644]	@ (8002a18 <HAL_ADC_ConfigChannel+0x4f8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	f040 812e 	bne.w	80029f4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10b      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x2a0>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	0e9b      	lsrs	r3, r3, #26
 80027ae:	3301      	adds	r3, #1
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	2b09      	cmp	r3, #9
 80027b6:	bf94      	ite	ls
 80027b8:	2301      	movls	r3, #1
 80027ba:	2300      	movhi	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	e019      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x2d4>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027c8:	fa93 f3a3 	rbit	r3, r3
 80027cc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80027ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80027d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80027d8:	2320      	movs	r3, #32
 80027da:	e003      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80027dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	3301      	adds	r3, #1
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	2b09      	cmp	r3, #9
 80027ec:	bf94      	ite	ls
 80027ee:	2301      	movls	r3, #1
 80027f0:	2300      	movhi	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d079      	beq.n	80028ec <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002800:	2b00      	cmp	r3, #0
 8002802:	d107      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x2f4>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	0e9b      	lsrs	r3, r3, #26
 800280a:	3301      	adds	r3, #1
 800280c:	069b      	lsls	r3, r3, #26
 800280e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002812:	e015      	b.n	8002840 <HAL_ADC_ConfigChannel+0x320>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800281c:	fa93 f3a3 	rbit	r3, r3
 8002820:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002824:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002826:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800282c:	2320      	movs	r3, #32
 800282e:	e003      	b.n	8002838 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002830:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	3301      	adds	r3, #1
 800283a:	069b      	lsls	r3, r3, #26
 800283c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x340>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	0e9b      	lsrs	r3, r3, #26
 8002852:	3301      	adds	r3, #1
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	2101      	movs	r1, #1
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	e017      	b.n	8002890 <HAL_ADC_ConfigChannel+0x370>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800286e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002870:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002872:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002878:	2320      	movs	r3, #32
 800287a:	e003      	b.n	8002884 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800287c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	3301      	adds	r3, #1
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	2101      	movs	r1, #1
 800288c:	fa01 f303 	lsl.w	r3, r1, r3
 8002890:	ea42 0103 	orr.w	r1, r2, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x396>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	0e9b      	lsrs	r3, r3, #26
 80028a6:	3301      	adds	r3, #1
 80028a8:	f003 021f 	and.w	r2, r3, #31
 80028ac:	4613      	mov	r3, r2
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	4413      	add	r3, r2
 80028b2:	051b      	lsls	r3, r3, #20
 80028b4:	e018      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x3c8>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80028c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80028c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80028ce:	2320      	movs	r3, #32
 80028d0:	e003      	b.n	80028da <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80028d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f003 021f 	and.w	r2, r3, #31
 80028e0:	4613      	mov	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028e8:	430b      	orrs	r3, r1
 80028ea:	e07e      	b.n	80029ea <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d107      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x3e8>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	0e9b      	lsrs	r3, r3, #26
 80028fe:	3301      	adds	r3, #1
 8002900:	069b      	lsls	r3, r3, #26
 8002902:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002906:	e015      	b.n	8002934 <HAL_ADC_ConfigChannel+0x414>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800291a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002920:	2320      	movs	r3, #32
 8002922:	e003      	b.n	800292c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	3301      	adds	r3, #1
 800292e:	069b      	lsls	r3, r3, #26
 8002930:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800293c:	2b00      	cmp	r3, #0
 800293e:	d109      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x434>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	0e9b      	lsrs	r3, r3, #26
 8002946:	3301      	adds	r3, #1
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	2101      	movs	r1, #1
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	e017      	b.n	8002984 <HAL_ADC_ConfigChannel+0x464>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	61bb      	str	r3, [r7, #24]
  return result;
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800296c:	2320      	movs	r3, #32
 800296e:	e003      	b.n	8002978 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	3301      	adds	r3, #1
 800297a:	f003 031f 	and.w	r3, r3, #31
 800297e:	2101      	movs	r1, #1
 8002980:	fa01 f303 	lsl.w	r3, r1, r3
 8002984:	ea42 0103 	orr.w	r1, r2, r3
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10d      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x490>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	0e9b      	lsrs	r3, r3, #26
 800299a:	3301      	adds	r3, #1
 800299c:	f003 021f 	and.w	r2, r3, #31
 80029a0:	4613      	mov	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4413      	add	r3, r2
 80029a6:	3b1e      	subs	r3, #30
 80029a8:	051b      	lsls	r3, r3, #20
 80029aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029ae:	e01b      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x4c8>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	60fb      	str	r3, [r7, #12]
  return result;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80029c8:	2320      	movs	r3, #32
 80029ca:	e003      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	f003 021f 	and.w	r2, r3, #31
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	3b1e      	subs	r3, #30
 80029e2:	051b      	lsls	r3, r3, #20
 80029e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e8:	430b      	orrs	r3, r1
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	6892      	ldr	r2, [r2, #8]
 80029ee:	4619      	mov	r1, r3
 80029f0:	f7ff f8e7 	bl	8001bc2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f280 80cf 	bge.w	8002b9c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a06      	ldr	r2, [pc, #24]	@ (8002a1c <HAL_ADC_ConfigChannel+0x4fc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d004      	beq.n	8002a12 <HAL_ADC_ConfigChannel+0x4f2>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a04      	ldr	r2, [pc, #16]	@ (8002a20 <HAL_ADC_ConfigChannel+0x500>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d10a      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x508>
 8002a12:	4b04      	ldr	r3, [pc, #16]	@ (8002a24 <HAL_ADC_ConfigChannel+0x504>)
 8002a14:	e009      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x50a>
 8002a16:	bf00      	nop
 8002a18:	47ff0000 	.word	0x47ff0000
 8002a1c:	40022000 	.word	0x40022000
 8002a20:	40022100 	.word	0x40022100
 8002a24:	40022300 	.word	0x40022300
 8002a28:	4b61      	ldr	r3, [pc, #388]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x690>)
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff f828 	bl	8001a80 <LL_ADC_GetCommonPathInternalCh>
 8002a30:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a5f      	ldr	r2, [pc, #380]	@ (8002bb4 <HAL_ADC_ConfigChannel+0x694>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d004      	beq.n	8002a46 <HAL_ADC_ConfigChannel+0x526>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a5d      	ldr	r2, [pc, #372]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x698>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d10e      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x544>
 8002a46:	485b      	ldr	r0, [pc, #364]	@ (8002bb4 <HAL_ADC_ConfigChannel+0x694>)
 8002a48:	f7ff f99c 	bl	8001d84 <LL_ADC_IsEnabled>
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	485a      	ldr	r0, [pc, #360]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x698>)
 8002a50:	f7ff f998 	bl	8001d84 <LL_ADC_IsEnabled>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4323      	orrs	r3, r4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	e008      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x556>
 8002a64:	4855      	ldr	r0, [pc, #340]	@ (8002bbc <HAL_ADC_ConfigChannel+0x69c>)
 8002a66:	f7ff f98d 	bl	8001d84 <LL_ADC_IsEnabled>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf0c      	ite	eq
 8002a70:	2301      	moveq	r3, #1
 8002a72:	2300      	movne	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d07d      	beq.n	8002b76 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a50      	ldr	r2, [pc, #320]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x6a0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d130      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x5c6>
 8002a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d12b      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a4a      	ldr	r2, [pc, #296]	@ (8002bbc <HAL_ADC_ConfigChannel+0x69c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	f040 8081 	bne.w	8002b9c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a45      	ldr	r2, [pc, #276]	@ (8002bb4 <HAL_ADC_ConfigChannel+0x694>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d004      	beq.n	8002aae <HAL_ADC_ConfigChannel+0x58e>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a43      	ldr	r2, [pc, #268]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x698>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x592>
 8002aae:	4a45      	ldr	r2, [pc, #276]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x6a4>)
 8002ab0:	e000      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x594>
 8002ab2:	4a3f      	ldr	r2, [pc, #252]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x690>)
 8002ab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ab6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002aba:	4619      	mov	r1, r3
 8002abc:	4610      	mov	r0, r2
 8002abe:	f7fe ffcc 	bl	8001a5a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ac2:	4b41      	ldr	r3, [pc, #260]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x6a8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	099b      	lsrs	r3, r3, #6
 8002ac8:	4a40      	ldr	r2, [pc, #256]	@ (8002bcc <HAL_ADC_ConfigChannel+0x6ac>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	099b      	lsrs	r3, r3, #6
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ad6:	e002      	b.n	8002ade <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f9      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ae4:	e05a      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a39      	ldr	r2, [pc, #228]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x6b0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d11e      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x60e>
 8002af0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002af2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d119      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2f      	ldr	r2, [pc, #188]	@ (8002bbc <HAL_ADC_ConfigChannel+0x69c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d14b      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a2a      	ldr	r2, [pc, #168]	@ (8002bb4 <HAL_ADC_ConfigChannel+0x694>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_ADC_ConfigChannel+0x5f8>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a29      	ldr	r2, [pc, #164]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x698>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d101      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x5fc>
 8002b18:	4a2a      	ldr	r2, [pc, #168]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x6a4>)
 8002b1a:	e000      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x5fe>
 8002b1c:	4a24      	ldr	r2, [pc, #144]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x690>)
 8002b1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f7fe ff97 	bl	8001a5a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b2c:	e036      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a28      	ldr	r2, [pc, #160]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x6b4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d131      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x67c>
 8002b38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d12c      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1d      	ldr	r2, [pc, #116]	@ (8002bbc <HAL_ADC_ConfigChannel+0x69c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d127      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a18      	ldr	r2, [pc, #96]	@ (8002bb4 <HAL_ADC_ConfigChannel+0x694>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d004      	beq.n	8002b60 <HAL_ADC_ConfigChannel+0x640>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a17      	ldr	r2, [pc, #92]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x698>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d101      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x644>
 8002b60:	4a18      	ldr	r2, [pc, #96]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x6a4>)
 8002b62:	e000      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x646>
 8002b64:	4a12      	ldr	r2, [pc, #72]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x690>)
 8002b66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f7fe ff73 	bl	8001a5a <LL_ADC_SetCommonPathInternalCh>
 8002b74:	e012      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7a:	f043 0220 	orr.w	r2, r3, #32
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002b88:	e008      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8e:	f043 0220 	orr.w	r2, r3, #32
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ba4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3784      	adds	r7, #132	@ 0x84
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd90      	pop	{r4, r7, pc}
 8002bb0:	58026300 	.word	0x58026300
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40022100 	.word	0x40022100
 8002bbc:	58026000 	.word	0x58026000
 8002bc0:	cb840000 	.word	0xcb840000
 8002bc4:	40022300 	.word	0x40022300
 8002bc8:	24000000 	.word	0x24000000
 8002bcc:	053e2d63 	.word	0x053e2d63
 8002bd0:	c7520000 	.word	0xc7520000
 8002bd4:	cfb80000 	.word	0xcfb80000

08002bd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff f8cd 	bl	8001d84 <LL_ADC_IsEnabled>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d16e      	bne.n	8002cce <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	4b38      	ldr	r3, [pc, #224]	@ (8002cd8 <ADC_Enable+0x100>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00d      	beq.n	8002c1a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c02:	f043 0210 	orr.w	r2, r3, #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0e:	f043 0201 	orr.w	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e05a      	b.n	8002cd0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff f888 	bl	8001d34 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c24:	f7fe feca 	bl	80019bc <HAL_GetTick>
 8002c28:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a2b      	ldr	r2, [pc, #172]	@ (8002cdc <ADC_Enable+0x104>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d004      	beq.n	8002c3e <ADC_Enable+0x66>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a29      	ldr	r2, [pc, #164]	@ (8002ce0 <ADC_Enable+0x108>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d101      	bne.n	8002c42 <ADC_Enable+0x6a>
 8002c3e:	4b29      	ldr	r3, [pc, #164]	@ (8002ce4 <ADC_Enable+0x10c>)
 8002c40:	e000      	b.n	8002c44 <ADC_Enable+0x6c>
 8002c42:	4b29      	ldr	r3, [pc, #164]	@ (8002ce8 <ADC_Enable+0x110>)
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff f80b 	bl	8001c60 <LL_ADC_GetMultimode>
 8002c4a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a23      	ldr	r2, [pc, #140]	@ (8002ce0 <ADC_Enable+0x108>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d002      	beq.n	8002c5c <ADC_Enable+0x84>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	e000      	b.n	8002c5e <ADC_Enable+0x86>
 8002c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cdc <ADC_Enable+0x104>)
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d02c      	beq.n	8002cc0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d130      	bne.n	8002cce <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c6c:	e028      	b.n	8002cc0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff f886 	bl	8001d84 <LL_ADC_IsEnabled>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d104      	bne.n	8002c88 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff f856 	bl	8001d34 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c88:	f7fe fe98 	bl	80019bc <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d914      	bls.n	8002cc0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d00d      	beq.n	8002cc0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca8:	f043 0210 	orr.w	r2, r3, #16
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb4:	f043 0201 	orr.w	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e007      	b.n	8002cd0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d1cf      	bne.n	8002c6e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	8000003f 	.word	0x8000003f
 8002cdc:	40022000 	.word	0x40022000
 8002ce0:	40022100 	.word	0x40022100
 8002ce4:	40022300 	.word	0x40022300
 8002ce8:	58026300 	.word	0x58026300

08002cec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff f856 	bl	8001daa <LL_ADC_IsDisableOngoing>
 8002cfe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff f83d 	bl	8001d84 <LL_ADC_IsEnabled>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d047      	beq.n	8002da0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d144      	bne.n	8002da0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 030d 	and.w	r3, r3, #13
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d10c      	bne.n	8002d3e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff f817 	bl	8001d5c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2203      	movs	r2, #3
 8002d34:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d36:	f7fe fe41 	bl	80019bc <HAL_GetTick>
 8002d3a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d3c:	e029      	b.n	8002d92 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d42:	f043 0210 	orr.w	r2, r3, #16
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4e:	f043 0201 	orr.w	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e023      	b.n	8002da2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d5a:	f7fe fe2f 	bl	80019bc <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d914      	bls.n	8002d92 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00d      	beq.n	8002d92 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7a:	f043 0210 	orr.w	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d86:	f043 0201 	orr.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e007      	b.n	8002da2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1dc      	bne.n	8002d5a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a7a      	ldr	r2, [pc, #488]	@ (8002fa4 <ADC_ConfigureBoostMode+0x1f8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d004      	beq.n	8002dc8 <ADC_ConfigureBoostMode+0x1c>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a79      	ldr	r2, [pc, #484]	@ (8002fa8 <ADC_ConfigureBoostMode+0x1fc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d109      	bne.n	8002ddc <ADC_ConfigureBoostMode+0x30>
 8002dc8:	4b78      	ldr	r3, [pc, #480]	@ (8002fac <ADC_ConfigureBoostMode+0x200>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	bf14      	ite	ne
 8002dd4:	2301      	movne	r3, #1
 8002dd6:	2300      	moveq	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	e008      	b.n	8002dee <ADC_ConfigureBoostMode+0x42>
 8002ddc:	4b74      	ldr	r3, [pc, #464]	@ (8002fb0 <ADC_ConfigureBoostMode+0x204>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf14      	ite	ne
 8002de8:	2301      	movne	r3, #1
 8002dea:	2300      	moveq	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01c      	beq.n	8002e2c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002df2:	f002 fba3 	bl	800553c <HAL_RCC_GetHCLKFreq>
 8002df6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e00:	d010      	beq.n	8002e24 <ADC_ConfigureBoostMode+0x78>
 8002e02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e06:	d873      	bhi.n	8002ef0 <ADC_ConfigureBoostMode+0x144>
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e0c:	d002      	beq.n	8002e14 <ADC_ConfigureBoostMode+0x68>
 8002e0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e12:	d16d      	bne.n	8002ef0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	0c1b      	lsrs	r3, r3, #16
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e20:	60fb      	str	r3, [r7, #12]
        break;
 8002e22:	e068      	b.n	8002ef6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	60fb      	str	r3, [r7, #12]
        break;
 8002e2a:	e064      	b.n	8002ef6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e2c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002e30:	f04f 0100 	mov.w	r1, #0
 8002e34:	f003 fe14 	bl	8006a60 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e38:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002e42:	d051      	beq.n	8002ee8 <ADC_ConfigureBoostMode+0x13c>
 8002e44:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002e48:	d854      	bhi.n	8002ef4 <ADC_ConfigureBoostMode+0x148>
 8002e4a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002e4e:	d047      	beq.n	8002ee0 <ADC_ConfigureBoostMode+0x134>
 8002e50:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002e54:	d84e      	bhi.n	8002ef4 <ADC_ConfigureBoostMode+0x148>
 8002e56:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002e5a:	d03d      	beq.n	8002ed8 <ADC_ConfigureBoostMode+0x12c>
 8002e5c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002e60:	d848      	bhi.n	8002ef4 <ADC_ConfigureBoostMode+0x148>
 8002e62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e66:	d033      	beq.n	8002ed0 <ADC_ConfigureBoostMode+0x124>
 8002e68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e6c:	d842      	bhi.n	8002ef4 <ADC_ConfigureBoostMode+0x148>
 8002e6e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002e72:	d029      	beq.n	8002ec8 <ADC_ConfigureBoostMode+0x11c>
 8002e74:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002e78:	d83c      	bhi.n	8002ef4 <ADC_ConfigureBoostMode+0x148>
 8002e7a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002e7e:	d01a      	beq.n	8002eb6 <ADC_ConfigureBoostMode+0x10a>
 8002e80:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002e84:	d836      	bhi.n	8002ef4 <ADC_ConfigureBoostMode+0x148>
 8002e86:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002e8a:	d014      	beq.n	8002eb6 <ADC_ConfigureBoostMode+0x10a>
 8002e8c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002e90:	d830      	bhi.n	8002ef4 <ADC_ConfigureBoostMode+0x148>
 8002e92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e96:	d00e      	beq.n	8002eb6 <ADC_ConfigureBoostMode+0x10a>
 8002e98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e9c:	d82a      	bhi.n	8002ef4 <ADC_ConfigureBoostMode+0x148>
 8002e9e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ea2:	d008      	beq.n	8002eb6 <ADC_ConfigureBoostMode+0x10a>
 8002ea4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ea8:	d824      	bhi.n	8002ef4 <ADC_ConfigureBoostMode+0x148>
 8002eaa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002eae:	d002      	beq.n	8002eb6 <ADC_ConfigureBoostMode+0x10a>
 8002eb0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002eb4:	d11e      	bne.n	8002ef4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	0c9b      	lsrs	r3, r3, #18
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	60fb      	str	r3, [r7, #12]
        break;
 8002ec6:	e016      	b.n	8002ef6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	60fb      	str	r3, [r7, #12]
        break;
 8002ece:	e012      	b.n	8002ef6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	60fb      	str	r3, [r7, #12]
        break;
 8002ed6:	e00e      	b.n	8002ef6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	099b      	lsrs	r3, r3, #6
 8002edc:	60fb      	str	r3, [r7, #12]
        break;
 8002ede:	e00a      	b.n	8002ef6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	09db      	lsrs	r3, r3, #7
 8002ee4:	60fb      	str	r3, [r7, #12]
        break;
 8002ee6:	e006      	b.n	8002ef6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	0a1b      	lsrs	r3, r3, #8
 8002eec:	60fb      	str	r3, [r7, #12]
        break;
 8002eee:	e002      	b.n	8002ef6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002ef0:	bf00      	nop
 8002ef2:	e000      	b.n	8002ef6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002ef4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002ef6:	f7fe fd91 	bl	8001a1c <HAL_GetREVID>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d815      	bhi.n	8002f30 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4a2b      	ldr	r2, [pc, #172]	@ (8002fb4 <ADC_ConfigureBoostMode+0x208>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d908      	bls.n	8002f1e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f1a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002f1c:	e03e      	b.n	8002f9c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f2c:	609a      	str	r2, [r3, #8]
}
 8002f2e:	e035      	b.n	8002f9c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	085b      	lsrs	r3, r3, #1
 8002f34:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb8 <ADC_ConfigureBoostMode+0x20c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d808      	bhi.n	8002f50 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002f4c:	609a      	str	r2, [r3, #8]
}
 8002f4e:	e025      	b.n	8002f9c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4a1a      	ldr	r2, [pc, #104]	@ (8002fbc <ADC_ConfigureBoostMode+0x210>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d80a      	bhi.n	8002f6e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f6a:	609a      	str	r2, [r3, #8]
}
 8002f6c:	e016      	b.n	8002f9c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4a13      	ldr	r2, [pc, #76]	@ (8002fc0 <ADC_ConfigureBoostMode+0x214>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d80a      	bhi.n	8002f8c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f88:	609a      	str	r2, [r3, #8]
}
 8002f8a:	e007      	b.n	8002f9c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002f9a:	609a      	str	r2, [r3, #8]
}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40022000 	.word	0x40022000
 8002fa8:	40022100 	.word	0x40022100
 8002fac:	40022300 	.word	0x40022300
 8002fb0:	58026300 	.word	0x58026300
 8002fb4:	01312d00 	.word	0x01312d00
 8002fb8:	005f5e10 	.word	0x005f5e10
 8002fbc:	00bebc20 	.word	0x00bebc20
 8002fc0:	017d7840 	.word	0x017d7840

08002fc4 <LL_ADC_StartCalibration>:
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	4b09      	ldr	r3, [pc, #36]	@ (8002ffc <LL_ADC_StartCalibration+0x38>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	609a      	str	r2, [r3, #8]
}
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	3ffeffc0 	.word	0x3ffeffc0

08003000 <LL_ADC_IsCalibrationOnGoing>:
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003010:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003014:	d101      	bne.n	800301a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003034:	2300      	movs	r3, #0
 8003036:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_ADCEx_Calibration_Start+0x1e>
 8003042:	2302      	movs	r3, #2
 8003044:	e04c      	b.n	80030e0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f7ff fe4c 	bl	8002cec <ADC_Disable>
 8003054:	4603      	mov	r3, r0
 8003056:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003058:	7dfb      	ldrb	r3, [r7, #23]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d135      	bne.n	80030ca <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003062:	4b21      	ldr	r3, [pc, #132]	@ (80030e8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003064:	4013      	ands	r3, r2
 8003066:	f043 0202 	orr.w	r2, r3, #2
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff ffa4 	bl	8002fc4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800307c:	e014      	b.n	80030a8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	3301      	adds	r3, #1
 8003082:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4a19      	ldr	r2, [pc, #100]	@ (80030ec <HAL_ADCEx_Calibration_Start+0xc4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d30d      	bcc.n	80030a8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003090:	f023 0312 	bic.w	r3, r3, #18
 8003094:	f043 0210 	orr.w	r2, r3, #16
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e01b      	b.n	80030e0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff ffa7 	bl	8003000 <LL_ADC_IsCalibrationOnGoing>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e2      	bne.n	800307e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030bc:	f023 0303 	bic.w	r3, r3, #3
 80030c0:	f043 0201 	orr.w	r2, r3, #1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80030c8:	e005      	b.n	80030d6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ce:	f043 0210 	orr.w	r2, r3, #16
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80030de:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	ffffeefd 	.word	0xffffeefd
 80030ec:	25c3f800 	.word	0x25c3f800

080030f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003100:	4b0b      	ldr	r3, [pc, #44]	@ (8003130 <__NVIC_SetPriorityGrouping+0x40>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800310c:	4013      	ands	r3, r2
 800310e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003118:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <__NVIC_SetPriorityGrouping+0x44>)
 800311a:	4313      	orrs	r3, r2
 800311c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800311e:	4a04      	ldr	r2, [pc, #16]	@ (8003130 <__NVIC_SetPriorityGrouping+0x40>)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	60d3      	str	r3, [r2, #12]
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000ed00 	.word	0xe000ed00
 8003134:	05fa0000 	.word	0x05fa0000

08003138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800313c:	4b04      	ldr	r3, [pc, #16]	@ (8003150 <__NVIC_GetPriorityGrouping+0x18>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	0a1b      	lsrs	r3, r3, #8
 8003142:	f003 0307 	and.w	r3, r3, #7
}
 8003146:	4618      	mov	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800315e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003162:	2b00      	cmp	r3, #0
 8003164:	db0b      	blt.n	800317e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	f003 021f 	and.w	r2, r3, #31
 800316c:	4907      	ldr	r1, [pc, #28]	@ (800318c <__NVIC_EnableIRQ+0x38>)
 800316e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	2001      	movs	r0, #1
 8003176:	fa00 f202 	lsl.w	r2, r0, r2
 800317a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000e100 	.word	0xe000e100

08003190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	6039      	str	r1, [r7, #0]
 800319a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800319c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	db0a      	blt.n	80031ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	490c      	ldr	r1, [pc, #48]	@ (80031dc <__NVIC_SetPriority+0x4c>)
 80031aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031ae:	0112      	lsls	r2, r2, #4
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	440b      	add	r3, r1
 80031b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b8:	e00a      	b.n	80031d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	4908      	ldr	r1, [pc, #32]	@ (80031e0 <__NVIC_SetPriority+0x50>)
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	3b04      	subs	r3, #4
 80031c8:	0112      	lsls	r2, r2, #4
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	440b      	add	r3, r1
 80031ce:	761a      	strb	r2, [r3, #24]
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000e100 	.word	0xe000e100
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	@ 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f1c3 0307 	rsb	r3, r3, #7
 80031fe:	2b04      	cmp	r3, #4
 8003200:	bf28      	it	cs
 8003202:	2304      	movcs	r3, #4
 8003204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3304      	adds	r3, #4
 800320a:	2b06      	cmp	r3, #6
 800320c:	d902      	bls.n	8003214 <NVIC_EncodePriority+0x30>
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3b03      	subs	r3, #3
 8003212:	e000      	b.n	8003216 <NVIC_EncodePriority+0x32>
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003218:	f04f 32ff 	mov.w	r2, #4294967295
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43da      	mvns	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	401a      	ands	r2, r3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800322c:	f04f 31ff 	mov.w	r1, #4294967295
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	fa01 f303 	lsl.w	r3, r1, r3
 8003236:	43d9      	mvns	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	4313      	orrs	r3, r2
         );
}
 800323e:	4618      	mov	r0, r3
 8003240:	3724      	adds	r7, #36	@ 0x24
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff ff4c 	bl	80030f0 <__NVIC_SetPriorityGrouping>
}
 8003258:	bf00      	nop
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800326e:	f7ff ff63 	bl	8003138 <__NVIC_GetPriorityGrouping>
 8003272:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	6978      	ldr	r0, [r7, #20]
 800327a:	f7ff ffb3 	bl	80031e4 <NVIC_EncodePriority>
 800327e:	4602      	mov	r2, r0
 8003280:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003284:	4611      	mov	r1, r2
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff ff82 	bl	8003190 <__NVIC_SetPriority>
}
 800328c:	bf00      	nop
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800329e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff ff56 	bl	8003154 <__NVIC_EnableIRQ>
}
 80032a8:	bf00      	nop
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80032b4:	f3bf 8f5f 	dmb	sy
}
 80032b8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80032ba:	4b07      	ldr	r3, [pc, #28]	@ (80032d8 <HAL_MPU_Disable+0x28>)
 80032bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032be:	4a06      	ldr	r2, [pc, #24]	@ (80032d8 <HAL_MPU_Disable+0x28>)
 80032c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032c4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80032c6:	4b05      	ldr	r3, [pc, #20]	@ (80032dc <HAL_MPU_Disable+0x2c>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	605a      	str	r2, [r3, #4]
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	e000ed00 	.word	0xe000ed00
 80032dc:	e000ed90 	.word	0xe000ed90

080032e0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80032e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003318 <HAL_MPU_Enable+0x38>)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80032f2:	4b0a      	ldr	r3, [pc, #40]	@ (800331c <HAL_MPU_Enable+0x3c>)
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	4a09      	ldr	r2, [pc, #36]	@ (800331c <HAL_MPU_Enable+0x3c>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032fc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80032fe:	f3bf 8f4f 	dsb	sy
}
 8003302:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003304:	f3bf 8f6f 	isb	sy
}
 8003308:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	e000ed90 	.word	0xe000ed90
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	785a      	ldrb	r2, [r3, #1]
 800332c:	4b1b      	ldr	r3, [pc, #108]	@ (800339c <HAL_MPU_ConfigRegion+0x7c>)
 800332e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003330:	4b1a      	ldr	r3, [pc, #104]	@ (800339c <HAL_MPU_ConfigRegion+0x7c>)
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	4a19      	ldr	r2, [pc, #100]	@ (800339c <HAL_MPU_ConfigRegion+0x7c>)
 8003336:	f023 0301 	bic.w	r3, r3, #1
 800333a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800333c:	4a17      	ldr	r2, [pc, #92]	@ (800339c <HAL_MPU_ConfigRegion+0x7c>)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	7b1b      	ldrb	r3, [r3, #12]
 8003348:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7adb      	ldrb	r3, [r3, #11]
 800334e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003350:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	7a9b      	ldrb	r3, [r3, #10]
 8003356:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003358:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	7b5b      	ldrb	r3, [r3, #13]
 800335e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003360:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7b9b      	ldrb	r3, [r3, #14]
 8003366:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003368:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	7bdb      	ldrb	r3, [r3, #15]
 800336e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003370:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	7a5b      	ldrb	r3, [r3, #9]
 8003376:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003378:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	7a1b      	ldrb	r3, [r3, #8]
 800337e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003380:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	7812      	ldrb	r2, [r2, #0]
 8003386:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003388:	4a04      	ldr	r2, [pc, #16]	@ (800339c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800338a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800338c:	6113      	str	r3, [r2, #16]
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	e000ed90 	.word	0xe000ed90

080033a0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e014      	b.n	80033dc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	791b      	ldrb	r3, [r3, #4]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d105      	bne.n	80033c8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fd f9ea 	bl	800079c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e046      	b.n	8003486 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	795b      	ldrb	r3, [r3, #5]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_DAC_Start+0x20>
 8003400:	2302      	movs	r3, #2
 8003402:	e040      	b.n	8003486 <HAL_DAC_Start+0xa2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2202      	movs	r2, #2
 800340e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6819      	ldr	r1, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2201      	movs	r2, #1
 800341e:	409a      	lsls	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10f      	bne.n	800344e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8003438:	2b02      	cmp	r3, #2
 800343a:	d11d      	bne.n	8003478 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	605a      	str	r2, [r3, #4]
 800344c:	e014      	b.n	8003478 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2102      	movs	r1, #2
 8003460:	fa01 f303 	lsl.w	r3, r1, r3
 8003464:	429a      	cmp	r2, r3
 8003466:	d107      	bne.n	8003478 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0202 	orr.w	r2, r2, #2
 8003476:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034a8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01d      	beq.n	80034f0 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d018      	beq.n	80034f0 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2204      	movs	r2, #4
 80034c2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	f043 0201 	orr.w	r2, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034e8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f851 	bl	8003592 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d01d      	beq.n	8003536 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d018      	beq.n	8003536 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2204      	movs	r2, #4
 8003508:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f043 0202 	orr.w	r2, r3, #2
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800351e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800352e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f97b 	bl	800382c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800353e:	b480      	push	{r7}
 8003540:	b087      	sub	sp, #28
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e015      	b.n	8003586 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d105      	bne.n	8003572 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4413      	add	r3, r2
 800356c:	3308      	adds	r3, #8
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	e004      	b.n	800357c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4413      	add	r3, r2
 8003578:	3314      	adds	r3, #20
 800357a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	461a      	mov	r2, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	@ 0x28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_DAC_ConfigChannel+0x1e>
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e12a      	b.n	8003820 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	795b      	ldrb	r3, [r3, #5]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_DAC_ConfigChannel+0x2e>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e124      	b.n	8003820 <HAL_DAC_ConfigChannel+0x278>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2202      	movs	r2, #2
 80035e0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d17a      	bne.n	80036e0 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80035ea:	f7fe f9e7 	bl	80019bc <HAL_GetTick>
 80035ee:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d13d      	bne.n	8003672 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80035f6:	e018      	b.n	800362a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80035f8:	f7fe f9e0 	bl	80019bc <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b01      	cmp	r3, #1
 8003604:	d911      	bls.n	800362a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800360c:	4b86      	ldr	r3, [pc, #536]	@ (8003828 <HAL_DAC_ConfigChannel+0x280>)
 800360e:	4013      	ands	r3, r2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f043 0208 	orr.w	r2, r3, #8
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2203      	movs	r2, #3
 8003624:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e0fa      	b.n	8003820 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003630:	4b7d      	ldr	r3, [pc, #500]	@ (8003828 <HAL_DAC_ConfigChannel+0x280>)
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1df      	bne.n	80035f8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	6992      	ldr	r2, [r2, #24]
 8003640:	641a      	str	r2, [r3, #64]	@ 0x40
 8003642:	e020      	b.n	8003686 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003644:	f7fe f9ba 	bl	80019bc <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b01      	cmp	r3, #1
 8003650:	d90f      	bls.n	8003672 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003658:	2b00      	cmp	r3, #0
 800365a:	da0a      	bge.n	8003672 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f043 0208 	orr.w	r2, r3, #8
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2203      	movs	r2, #3
 800366c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e0d6      	b.n	8003820 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003678:	2b00      	cmp	r3, #0
 800367a:	dbe3      	blt.n	8003644 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	6992      	ldr	r2, [r2, #24]
 8003684:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003696:	fa01 f303 	lsl.w	r3, r1, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	ea02 0103 	and.w	r1, r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	69da      	ldr	r2, [r3, #28]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	409a      	lsls	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	21ff      	movs	r1, #255	@ 0xff
 80036c2:	fa01 f303 	lsl.w	r3, r1, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	ea02 0103 	and.w	r1, r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6a1a      	ldr	r2, [r3, #32]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	409a      	lsls	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d11d      	bne.n	8003724 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ee:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	221f      	movs	r2, #31
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f003 0310 	and.w	r3, r3, #16
 8003732:	2207      	movs	r2, #7
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d102      	bne.n	800374e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8003748:	2300      	movs	r3, #0
 800374a:	627b      	str	r3, [r7, #36]	@ 0x24
 800374c:	e00f      	b.n	800376e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d102      	bne.n	800375c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003756:	2301      	movs	r3, #1
 8003758:	627b      	str	r3, [r7, #36]	@ 0x24
 800375a:	e008      	b.n	800376e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003764:	2301      	movs	r3, #1
 8003766:	627b      	str	r3, [r7, #36]	@ 0x24
 8003768:	e001      	b.n	800376e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	4313      	orrs	r3, r2
 8003778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f003 0310 	and.w	r3, r3, #16
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4313      	orrs	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6819      	ldr	r1, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43da      	mvns	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	400a      	ands	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	43db      	mvns	r3, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4013      	ands	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6819      	ldr	r1, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	22c0      	movs	r2, #192	@ 0xc0
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43da      	mvns	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	400a      	ands	r2, r1
 800380e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800381c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003820:	4618      	mov	r0, r3
 8003822:	3728      	adds	r7, #40	@ 0x28
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	20008000 	.word	0x20008000

0800382c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	@ 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800384e:	4b89      	ldr	r3, [pc, #548]	@ (8003a74 <HAL_GPIO_Init+0x234>)
 8003850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003852:	e194      	b.n	8003b7e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	2101      	movs	r1, #1
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	fa01 f303 	lsl.w	r3, r1, r3
 8003860:	4013      	ands	r3, r2
 8003862:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 8186 	beq.w	8003b78 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d005      	beq.n	8003884 <HAL_GPIO_Init+0x44>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d130      	bne.n	80038e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	2203      	movs	r2, #3
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038ba:	2201      	movs	r2, #1
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	f003 0201 	and.w	r2, r3, #1
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d017      	beq.n	8003922 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	2203      	movs	r2, #3
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d123      	bne.n	8003976 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	08da      	lsrs	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3208      	adds	r2, #8
 8003936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800393a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	220f      	movs	r2, #15
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4013      	ands	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	08da      	lsrs	r2, r3, #3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3208      	adds	r2, #8
 8003970:	69b9      	ldr	r1, [r7, #24]
 8003972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	2203      	movs	r2, #3
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4013      	ands	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f003 0203 	and.w	r2, r3, #3
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 80e0 	beq.w	8003b78 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003a78 <HAL_GPIO_Init+0x238>)
 80039ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039be:	4a2e      	ldr	r2, [pc, #184]	@ (8003a78 <HAL_GPIO_Init+0x238>)
 80039c0:	f043 0302 	orr.w	r3, r3, #2
 80039c4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80039c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a78 <HAL_GPIO_Init+0x238>)
 80039ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039d6:	4a29      	ldr	r2, [pc, #164]	@ (8003a7c <HAL_GPIO_Init+0x23c>)
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	089b      	lsrs	r3, r3, #2
 80039dc:	3302      	adds	r3, #2
 80039de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	220f      	movs	r2, #15
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4013      	ands	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a20      	ldr	r2, [pc, #128]	@ (8003a80 <HAL_GPIO_Init+0x240>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d052      	beq.n	8003aa8 <HAL_GPIO_Init+0x268>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a1f      	ldr	r2, [pc, #124]	@ (8003a84 <HAL_GPIO_Init+0x244>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d031      	beq.n	8003a6e <HAL_GPIO_Init+0x22e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a1e      	ldr	r2, [pc, #120]	@ (8003a88 <HAL_GPIO_Init+0x248>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d02b      	beq.n	8003a6a <HAL_GPIO_Init+0x22a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a1d      	ldr	r2, [pc, #116]	@ (8003a8c <HAL_GPIO_Init+0x24c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d025      	beq.n	8003a66 <HAL_GPIO_Init+0x226>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8003a90 <HAL_GPIO_Init+0x250>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01f      	beq.n	8003a62 <HAL_GPIO_Init+0x222>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a1b      	ldr	r2, [pc, #108]	@ (8003a94 <HAL_GPIO_Init+0x254>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d019      	beq.n	8003a5e <HAL_GPIO_Init+0x21e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8003a98 <HAL_GPIO_Init+0x258>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <HAL_GPIO_Init+0x21a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a19      	ldr	r2, [pc, #100]	@ (8003a9c <HAL_GPIO_Init+0x25c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00d      	beq.n	8003a56 <HAL_GPIO_Init+0x216>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a18      	ldr	r2, [pc, #96]	@ (8003aa0 <HAL_GPIO_Init+0x260>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d007      	beq.n	8003a52 <HAL_GPIO_Init+0x212>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a17      	ldr	r2, [pc, #92]	@ (8003aa4 <HAL_GPIO_Init+0x264>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <HAL_GPIO_Init+0x20e>
 8003a4a:	2309      	movs	r3, #9
 8003a4c:	e02d      	b.n	8003aaa <HAL_GPIO_Init+0x26a>
 8003a4e:	230a      	movs	r3, #10
 8003a50:	e02b      	b.n	8003aaa <HAL_GPIO_Init+0x26a>
 8003a52:	2308      	movs	r3, #8
 8003a54:	e029      	b.n	8003aaa <HAL_GPIO_Init+0x26a>
 8003a56:	2307      	movs	r3, #7
 8003a58:	e027      	b.n	8003aaa <HAL_GPIO_Init+0x26a>
 8003a5a:	2306      	movs	r3, #6
 8003a5c:	e025      	b.n	8003aaa <HAL_GPIO_Init+0x26a>
 8003a5e:	2305      	movs	r3, #5
 8003a60:	e023      	b.n	8003aaa <HAL_GPIO_Init+0x26a>
 8003a62:	2304      	movs	r3, #4
 8003a64:	e021      	b.n	8003aaa <HAL_GPIO_Init+0x26a>
 8003a66:	2303      	movs	r3, #3
 8003a68:	e01f      	b.n	8003aaa <HAL_GPIO_Init+0x26a>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e01d      	b.n	8003aaa <HAL_GPIO_Init+0x26a>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e01b      	b.n	8003aaa <HAL_GPIO_Init+0x26a>
 8003a72:	bf00      	nop
 8003a74:	58000080 	.word	0x58000080
 8003a78:	58024400 	.word	0x58024400
 8003a7c:	58000400 	.word	0x58000400
 8003a80:	58020000 	.word	0x58020000
 8003a84:	58020400 	.word	0x58020400
 8003a88:	58020800 	.word	0x58020800
 8003a8c:	58020c00 	.word	0x58020c00
 8003a90:	58021000 	.word	0x58021000
 8003a94:	58021400 	.word	0x58021400
 8003a98:	58021800 	.word	0x58021800
 8003a9c:	58021c00 	.word	0x58021c00
 8003aa0:	58022000 	.word	0x58022000
 8003aa4:	58022400 	.word	0x58022400
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	f002 0203 	and.w	r2, r2, #3
 8003ab0:	0092      	lsls	r2, r2, #2
 8003ab2:	4093      	lsls	r3, r2
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aba:	4938      	ldr	r1, [pc, #224]	@ (8003b9c <HAL_GPIO_Init+0x35c>)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	089b      	lsrs	r3, r3, #2
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003aee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f47f ae63 	bne.w	8003854 <HAL_GPIO_Init+0x14>
  }
}
 8003b8e:	bf00      	nop
 8003b90:	bf00      	nop
 8003b92:	3724      	adds	r7, #36	@ 0x24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	58000400 	.word	0x58000400

08003ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	807b      	strh	r3, [r7, #2]
 8003bac:	4613      	mov	r3, r2
 8003bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bb0:	787b      	ldrb	r3, [r7, #1]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bb6:	887a      	ldrh	r2, [r7, #2]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003bbc:	e003      	b.n	8003bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003bbe:	887b      	ldrh	r3, [r7, #2]
 8003bc0:	041a      	lsls	r2, r3, #16
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	619a      	str	r2, [r3, #24]
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003be4:	887a      	ldrh	r2, [r7, #2]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4013      	ands	r3, r2
 8003bea:	041a      	lsls	r2, r3, #16
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	43d9      	mvns	r1, r3
 8003bf0:	887b      	ldrh	r3, [r7, #2]
 8003bf2:	400b      	ands	r3, r1
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	619a      	str	r2, [r3, #24]
}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c14:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c24:	88fb      	ldrh	r3, [r7, #6]
 8003c26:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f00a faaf 	bl	800e190 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e08b      	b.n	8003d66 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fc ff7c 	bl	8000b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2224      	movs	r2, #36	@ 0x24
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0201 	bic.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d107      	bne.n	8003cb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	e006      	b.n	8003cc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003cc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d108      	bne.n	8003cde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cda:	605a      	str	r2, [r3, #4]
 8003cdc:	e007      	b.n	8003cee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d70 <HAL_I2C_Init+0x134>)
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1a      	ldr	r2, [r3, #32]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	02008000 	.word	0x02008000

08003d74 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	4608      	mov	r0, r1
 8003d7e:	4611      	mov	r1, r2
 8003d80:	461a      	mov	r2, r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	817b      	strh	r3, [r7, #10]
 8003d86:	460b      	mov	r3, r1
 8003d88:	813b      	strh	r3, [r7, #8]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	f040 80fd 	bne.w	8003f96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_I2C_Mem_Read+0x34>
 8003da2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d105      	bne.n	8003db4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e0f1      	b.n	8003f98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_I2C_Mem_Read+0x4e>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e0ea      	b.n	8003f98 <HAL_I2C_Mem_Read+0x224>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dca:	f7fd fdf7 	bl	80019bc <HAL_GetTick>
 8003dce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2319      	movs	r3, #25
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f95b 	bl	8004098 <I2C_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0d5      	b.n	8003f98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2222      	movs	r2, #34	@ 0x22
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2240      	movs	r2, #64	@ 0x40
 8003df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a3a      	ldr	r2, [r7, #32]
 8003e06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e14:	88f8      	ldrh	r0, [r7, #6]
 8003e16:	893a      	ldrh	r2, [r7, #8]
 8003e18:	8979      	ldrh	r1, [r7, #10]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	4603      	mov	r3, r0
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f8bf 	bl	8003fa8 <I2C_RequestMemoryRead>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0ad      	b.n	8003f98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2bff      	cmp	r3, #255	@ 0xff
 8003e44:	d90e      	bls.n	8003e64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	22ff      	movs	r2, #255	@ 0xff
 8003e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	8979      	ldrh	r1, [r7, #10]
 8003e54:	4b52      	ldr	r3, [pc, #328]	@ (8003fa0 <HAL_I2C_Mem_Read+0x22c>)
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fadf 	bl	8004420 <I2C_TransferConfig>
 8003e62:	e00f      	b.n	8003e84 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	8979      	ldrh	r1, [r7, #10]
 8003e76:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa0 <HAL_I2C_Mem_Read+0x22c>)
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 face 	bl	8004420 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	2104      	movs	r1, #4
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f902 	bl	8004098 <I2C_WaitOnFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e07c      	b.n	8003f98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d034      	beq.n	8003f44 <HAL_I2C_Mem_Read+0x1d0>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d130      	bne.n	8003f44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2180      	movs	r1, #128	@ 0x80
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f8d3 	bl	8004098 <I2C_WaitOnFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e04d      	b.n	8003f98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2bff      	cmp	r3, #255	@ 0xff
 8003f04:	d90e      	bls.n	8003f24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	22ff      	movs	r2, #255	@ 0xff
 8003f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	8979      	ldrh	r1, [r7, #10]
 8003f14:	2300      	movs	r3, #0
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 fa7f 	bl	8004420 <I2C_TransferConfig>
 8003f22:	e00f      	b.n	8003f44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	8979      	ldrh	r1, [r7, #10]
 8003f36:	2300      	movs	r3, #0
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 fa6e 	bl	8004420 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d19a      	bne.n	8003e84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f940 	bl	80041d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e01a      	b.n	8003f98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2220      	movs	r2, #32
 8003f68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6859      	ldr	r1, [r3, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa4 <HAL_I2C_Mem_Read+0x230>)
 8003f76:	400b      	ands	r3, r1
 8003f78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	e000      	b.n	8003f98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003f96:	2302      	movs	r3, #2
  }
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	80002400 	.word	0x80002400
 8003fa4:	fe00e800 	.word	0xfe00e800

08003fa8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	817b      	strh	r3, [r7, #10]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	813b      	strh	r3, [r7, #8]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	8979      	ldrh	r1, [r7, #10]
 8003fc8:	4b20      	ldr	r3, [pc, #128]	@ (800404c <I2C_RequestMemoryRead+0xa4>)
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fa26 	bl	8004420 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	69b9      	ldr	r1, [r7, #24]
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f8b6 	bl	800414a <I2C_WaitOnTXISFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e02c      	b.n	8004042 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d105      	bne.n	8003ffa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fee:	893b      	ldrh	r3, [r7, #8]
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ff8:	e015      	b.n	8004026 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ffa:	893b      	ldrh	r3, [r7, #8]
 8003ffc:	0a1b      	lsrs	r3, r3, #8
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	b2da      	uxtb	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	69b9      	ldr	r1, [r7, #24]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f89c 	bl	800414a <I2C_WaitOnTXISFlagUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e012      	b.n	8004042 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800401c:	893b      	ldrh	r3, [r7, #8]
 800401e:	b2da      	uxtb	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	2200      	movs	r2, #0
 800402e:	2140      	movs	r1, #64	@ 0x40
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f831 	bl	8004098 <I2C_WaitOnFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	80002000 	.word	0x80002000

08004050 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b02      	cmp	r3, #2
 8004064:	d103      	bne.n	800406e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2200      	movs	r2, #0
 800406c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b01      	cmp	r3, #1
 800407a:	d007      	beq.n	800408c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	619a      	str	r2, [r3, #24]
  }
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a8:	e03b      	b.n	8004122 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	6839      	ldr	r1, [r7, #0]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f8d6 	bl	8004260 <I2C_IsErrorOccurred>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e041      	b.n	8004142 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d02d      	beq.n	8004122 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c6:	f7fd fc79 	bl	80019bc <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d302      	bcc.n	80040dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d122      	bne.n	8004122 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699a      	ldr	r2, [r3, #24]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	4013      	ands	r3, r2
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	bf0c      	ite	eq
 80040ec:	2301      	moveq	r3, #1
 80040ee:	2300      	movne	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d113      	bne.n	8004122 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	f043 0220 	orr.w	r2, r3, #32
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e00f      	b.n	8004142 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699a      	ldr	r2, [r3, #24]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4013      	ands	r3, r2
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	429a      	cmp	r2, r3
 8004130:	bf0c      	ite	eq
 8004132:	2301      	moveq	r3, #1
 8004134:	2300      	movne	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	461a      	mov	r2, r3
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	429a      	cmp	r2, r3
 800413e:	d0b4      	beq.n	80040aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004156:	e033      	b.n	80041c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f87f 	bl	8004260 <I2C_IsErrorOccurred>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e031      	b.n	80041d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004172:	d025      	beq.n	80041c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004174:	f7fd fc22 	bl	80019bc <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	d302      	bcc.n	800418a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d11a      	bne.n	80041c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b02      	cmp	r3, #2
 8004196:	d013      	beq.n	80041c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419c:	f043 0220 	orr.w	r2, r3, #32
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e007      	b.n	80041d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d1c4      	bne.n	8004158 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041e4:	e02f      	b.n	8004246 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f838 	bl	8004260 <I2C_IsErrorOccurred>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e02d      	b.n	8004256 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	f7fd fbdf 	bl	80019bc <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	429a      	cmp	r2, r3
 8004208:	d302      	bcc.n	8004210 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d11a      	bne.n	8004246 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b20      	cmp	r3, #32
 800421c:	d013      	beq.n	8004246 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004222:	f043 0220 	orr.w	r2, r3, #32
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e007      	b.n	8004256 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b20      	cmp	r3, #32
 8004252:	d1c8      	bne.n	80041e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08a      	sub	sp, #40	@ 0x28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b00      	cmp	r3, #0
 800428a:	d068      	beq.n	800435e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2210      	movs	r2, #16
 8004292:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004294:	e049      	b.n	800432a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d045      	beq.n	800432a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800429e:	f7fd fb8d 	bl	80019bc <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d302      	bcc.n	80042b4 <I2C_IsErrorOccurred+0x54>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d13a      	bne.n	800432a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042d6:	d121      	bne.n	800431c <I2C_IsErrorOccurred+0xbc>
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042de:	d01d      	beq.n	800431c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d01a      	beq.n	800431c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80042f6:	f7fd fb61 	bl	80019bc <HAL_GetTick>
 80042fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042fc:	e00e      	b.n	800431c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80042fe:	f7fd fb5d 	bl	80019bc <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b19      	cmp	r3, #25
 800430a:	d907      	bls.n	800431c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	f043 0320 	orr.w	r3, r3, #32
 8004312:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800431a:	e006      	b.n	800432a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b20      	cmp	r3, #32
 8004328:	d1e9      	bne.n	80042fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b20      	cmp	r3, #32
 8004336:	d003      	beq.n	8004340 <I2C_IsErrorOccurred+0xe0>
 8004338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0aa      	beq.n	8004296 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004344:	2b00      	cmp	r3, #0
 8004346:	d103      	bne.n	8004350 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2220      	movs	r2, #32
 800434e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	f043 0304 	orr.w	r3, r3, #4
 8004356:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00b      	beq.n	8004388 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004380:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00b      	beq.n	80043aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	f043 0308 	orr.w	r3, r3, #8
 8004398:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00b      	beq.n	80043cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	f043 0302 	orr.w	r3, r3, #2
 80043ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80043cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01c      	beq.n	800440e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7ff fe3b 	bl	8004050 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6859      	ldr	r1, [r3, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	4b0d      	ldr	r3, [pc, #52]	@ (800441c <I2C_IsErrorOccurred+0x1bc>)
 80043e6:	400b      	ands	r3, r1
 80043e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	431a      	orrs	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800440e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004412:	4618      	mov	r0, r3
 8004414:	3728      	adds	r7, #40	@ 0x28
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	fe00e800 	.word	0xfe00e800

08004420 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	607b      	str	r3, [r7, #4]
 800442a:	460b      	mov	r3, r1
 800442c:	817b      	strh	r3, [r7, #10]
 800442e:	4613      	mov	r3, r2
 8004430:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004432:	897b      	ldrh	r3, [r7, #10]
 8004434:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004438:	7a7b      	ldrb	r3, [r7, #9]
 800443a:	041b      	lsls	r3, r3, #16
 800443c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004440:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	4313      	orrs	r3, r2
 800444a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800444e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	0d5b      	lsrs	r3, r3, #21
 800445a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800445e:	4b08      	ldr	r3, [pc, #32]	@ (8004480 <I2C_TransferConfig+0x60>)
 8004460:	430b      	orrs	r3, r1
 8004462:	43db      	mvns	r3, r3
 8004464:	ea02 0103 	and.w	r1, r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004472:	bf00      	nop
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	03ff63ff 	.word	0x03ff63ff

08004484 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b20      	cmp	r3, #32
 8004498:	d138      	bne.n	800450c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e032      	b.n	800450e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2224      	movs	r2, #36	@ 0x24
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0201 	bic.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80044d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6819      	ldr	r1, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e000      	b.n	800450e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800450c:	2302      	movs	r3, #2
  }
}
 800450e:	4618      	mov	r0, r3
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800451a:	b480      	push	{r7}
 800451c:	b085      	sub	sp, #20
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b20      	cmp	r3, #32
 800452e:	d139      	bne.n	80045a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800453a:	2302      	movs	r3, #2
 800453c:	e033      	b.n	80045a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2224      	movs	r2, #36	@ 0x24
 800454a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0201 	bic.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800456c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e000      	b.n	80045a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045a4:	2302      	movs	r3, #2
  }
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
	...

080045b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80045bc:	4b19      	ldr	r3, [pc, #100]	@ (8004624 <HAL_PWREx_ConfigSupply+0x70>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d00a      	beq.n	80045de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80045c8:	4b16      	ldr	r3, [pc, #88]	@ (8004624 <HAL_PWREx_ConfigSupply+0x70>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d001      	beq.n	80045da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e01f      	b.n	800461a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e01d      	b.n	800461a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80045de:	4b11      	ldr	r3, [pc, #68]	@ (8004624 <HAL_PWREx_ConfigSupply+0x70>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f023 0207 	bic.w	r2, r3, #7
 80045e6:	490f      	ldr	r1, [pc, #60]	@ (8004624 <HAL_PWREx_ConfigSupply+0x70>)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80045ee:	f7fd f9e5 	bl	80019bc <HAL_GetTick>
 80045f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045f4:	e009      	b.n	800460a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045f6:	f7fd f9e1 	bl	80019bc <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004604:	d901      	bls.n	800460a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e007      	b.n	800461a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800460a:	4b06      	ldr	r3, [pc, #24]	@ (8004624 <HAL_PWREx_ConfigSupply+0x70>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004616:	d1ee      	bne.n	80045f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	58024800 	.word	0x58024800

08004628 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08c      	sub	sp, #48	@ 0x30
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	f000 bc48 	b.w	8004ecc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8088 	beq.w	800475a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800464a:	4b99      	ldr	r3, [pc, #612]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004652:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004654:	4b96      	ldr	r3, [pc, #600]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004658:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800465a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465c:	2b10      	cmp	r3, #16
 800465e:	d007      	beq.n	8004670 <HAL_RCC_OscConfig+0x48>
 8004660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004662:	2b18      	cmp	r3, #24
 8004664:	d111      	bne.n	800468a <HAL_RCC_OscConfig+0x62>
 8004666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d10c      	bne.n	800468a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004670:	4b8f      	ldr	r3, [pc, #572]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d06d      	beq.n	8004758 <HAL_RCC_OscConfig+0x130>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d169      	bne.n	8004758 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	f000 bc21 	b.w	8004ecc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004692:	d106      	bne.n	80046a2 <HAL_RCC_OscConfig+0x7a>
 8004694:	4b86      	ldr	r3, [pc, #536]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a85      	ldr	r2, [pc, #532]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 800469a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	e02e      	b.n	8004700 <HAL_RCC_OscConfig+0xd8>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x9c>
 80046aa:	4b81      	ldr	r3, [pc, #516]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a80      	ldr	r2, [pc, #512]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	4b7e      	ldr	r3, [pc, #504]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a7d      	ldr	r2, [pc, #500]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e01d      	b.n	8004700 <HAL_RCC_OscConfig+0xd8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046cc:	d10c      	bne.n	80046e8 <HAL_RCC_OscConfig+0xc0>
 80046ce:	4b78      	ldr	r3, [pc, #480]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a77      	ldr	r2, [pc, #476]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	4b75      	ldr	r3, [pc, #468]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a74      	ldr	r2, [pc, #464]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	e00b      	b.n	8004700 <HAL_RCC_OscConfig+0xd8>
 80046e8:	4b71      	ldr	r3, [pc, #452]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a70      	ldr	r2, [pc, #448]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	4b6e      	ldr	r3, [pc, #440]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a6d      	ldr	r2, [pc, #436]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d013      	beq.n	8004730 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fd f958 	bl	80019bc <HAL_GetTick>
 800470c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004710:	f7fd f954 	bl	80019bc <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b64      	cmp	r3, #100	@ 0x64
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e3d4      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004722:	4b63      	ldr	r3, [pc, #396]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0f0      	beq.n	8004710 <HAL_RCC_OscConfig+0xe8>
 800472e:	e014      	b.n	800475a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004730:	f7fd f944 	bl	80019bc <HAL_GetTick>
 8004734:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004738:	f7fd f940 	bl	80019bc <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b64      	cmp	r3, #100	@ 0x64
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e3c0      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800474a:	4b59      	ldr	r3, [pc, #356]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f0      	bne.n	8004738 <HAL_RCC_OscConfig+0x110>
 8004756:	e000      	b.n	800475a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 80ca 	beq.w	80048fc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004768:	4b51      	ldr	r3, [pc, #324]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004770:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004772:	4b4f      	ldr	r3, [pc, #316]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004776:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <HAL_RCC_OscConfig+0x166>
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	2b18      	cmp	r3, #24
 8004782:	d156      	bne.n	8004832 <HAL_RCC_OscConfig+0x20a>
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d151      	bne.n	8004832 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800478e:	4b48      	ldr	r3, [pc, #288]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0304 	and.w	r3, r3, #4
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <HAL_RCC_OscConfig+0x17e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e392      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047a6:	4b42      	ldr	r3, [pc, #264]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f023 0219 	bic.w	r2, r3, #25
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	493f      	ldr	r1, [pc, #252]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fd f900 	bl	80019bc <HAL_GetTick>
 80047bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047c0:	f7fd f8fc 	bl	80019bc <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e37c      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047d2:	4b37      	ldr	r3, [pc, #220]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047de:	f7fd f91d 	bl	8001a1c <HAL_GetREVID>
 80047e2:	4603      	mov	r3, r0
 80047e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d817      	bhi.n	800481c <HAL_RCC_OscConfig+0x1f4>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b40      	cmp	r3, #64	@ 0x40
 80047f2:	d108      	bne.n	8004806 <HAL_RCC_OscConfig+0x1de>
 80047f4:	4b2e      	ldr	r3, [pc, #184]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80047fc:	4a2c      	ldr	r2, [pc, #176]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80047fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004802:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004804:	e07a      	b.n	80048fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004806:	4b2a      	ldr	r3, [pc, #168]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	031b      	lsls	r3, r3, #12
 8004814:	4926      	ldr	r1, [pc, #152]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004816:	4313      	orrs	r3, r2
 8004818:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800481a:	e06f      	b.n	80048fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481c:	4b24      	ldr	r3, [pc, #144]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	061b      	lsls	r3, r3, #24
 800482a:	4921      	ldr	r1, [pc, #132]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 800482c:	4313      	orrs	r3, r2
 800482e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004830:	e064      	b.n	80048fc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d047      	beq.n	80048ca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800483a:	4b1d      	ldr	r3, [pc, #116]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f023 0219 	bic.w	r2, r3, #25
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	491a      	ldr	r1, [pc, #104]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004848:	4313      	orrs	r3, r2
 800484a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fd f8b6 	bl	80019bc <HAL_GetTick>
 8004850:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004854:	f7fd f8b2 	bl	80019bc <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e332      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004866:	4b12      	ldr	r3, [pc, #72]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004872:	f7fd f8d3 	bl	8001a1c <HAL_GetREVID>
 8004876:	4603      	mov	r3, r0
 8004878:	f241 0203 	movw	r2, #4099	@ 0x1003
 800487c:	4293      	cmp	r3, r2
 800487e:	d819      	bhi.n	80048b4 <HAL_RCC_OscConfig+0x28c>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b40      	cmp	r3, #64	@ 0x40
 8004886:	d108      	bne.n	800489a <HAL_RCC_OscConfig+0x272>
 8004888:	4b09      	ldr	r3, [pc, #36]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004890:	4a07      	ldr	r2, [pc, #28]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004896:	6053      	str	r3, [r2, #4]
 8004898:	e030      	b.n	80048fc <HAL_RCC_OscConfig+0x2d4>
 800489a:	4b05      	ldr	r3, [pc, #20]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	031b      	lsls	r3, r3, #12
 80048a8:	4901      	ldr	r1, [pc, #4]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	604b      	str	r3, [r1, #4]
 80048ae:	e025      	b.n	80048fc <HAL_RCC_OscConfig+0x2d4>
 80048b0:	58024400 	.word	0x58024400
 80048b4:	4b9a      	ldr	r3, [pc, #616]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	061b      	lsls	r3, r3, #24
 80048c2:	4997      	ldr	r1, [pc, #604]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]
 80048c8:	e018      	b.n	80048fc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ca:	4b95      	ldr	r3, [pc, #596]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a94      	ldr	r2, [pc, #592]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d6:	f7fd f871 	bl	80019bc <HAL_GetTick>
 80048da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048de:	f7fd f86d 	bl	80019bc <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e2ed      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048f0:	4b8b      	ldr	r3, [pc, #556]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1f0      	bne.n	80048de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 80a9 	beq.w	8004a5c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800490a:	4b85      	ldr	r3, [pc, #532]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004912:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004914:	4b82      	ldr	r3, [pc, #520]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004918:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	2b08      	cmp	r3, #8
 800491e:	d007      	beq.n	8004930 <HAL_RCC_OscConfig+0x308>
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	2b18      	cmp	r3, #24
 8004924:	d13a      	bne.n	800499c <HAL_RCC_OscConfig+0x374>
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	2b01      	cmp	r3, #1
 800492e:	d135      	bne.n	800499c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004930:	4b7b      	ldr	r3, [pc, #492]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <HAL_RCC_OscConfig+0x320>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	2b80      	cmp	r3, #128	@ 0x80
 8004942:	d001      	beq.n	8004948 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e2c1      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004948:	f7fd f868 	bl	8001a1c <HAL_GetREVID>
 800494c:	4603      	mov	r3, r0
 800494e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004952:	4293      	cmp	r3, r2
 8004954:	d817      	bhi.n	8004986 <HAL_RCC_OscConfig+0x35e>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	2b20      	cmp	r3, #32
 800495c:	d108      	bne.n	8004970 <HAL_RCC_OscConfig+0x348>
 800495e:	4b70      	ldr	r3, [pc, #448]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004966:	4a6e      	ldr	r2, [pc, #440]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004968:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800496c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800496e:	e075      	b.n	8004a5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004970:	4b6b      	ldr	r3, [pc, #428]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	069b      	lsls	r3, r3, #26
 800497e:	4968      	ldr	r1, [pc, #416]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004980:	4313      	orrs	r3, r2
 8004982:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004984:	e06a      	b.n	8004a5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004986:	4b66      	ldr	r3, [pc, #408]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	061b      	lsls	r3, r3, #24
 8004994:	4962      	ldr	r1, [pc, #392]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004996:	4313      	orrs	r3, r2
 8004998:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800499a:	e05f      	b.n	8004a5c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d042      	beq.n	8004a2a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80049a4:	4b5e      	ldr	r3, [pc, #376]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a5d      	ldr	r2, [pc, #372]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80049aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b0:	f7fd f804 	bl	80019bc <HAL_GetTick>
 80049b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049b8:	f7fd f800 	bl	80019bc <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e280      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049ca:	4b55      	ldr	r3, [pc, #340]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f0      	beq.n	80049b8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049d6:	f7fd f821 	bl	8001a1c <HAL_GetREVID>
 80049da:	4603      	mov	r3, r0
 80049dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d817      	bhi.n	8004a14 <HAL_RCC_OscConfig+0x3ec>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d108      	bne.n	80049fe <HAL_RCC_OscConfig+0x3d6>
 80049ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80049f4:	4a4a      	ldr	r2, [pc, #296]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80049f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049fa:	6053      	str	r3, [r2, #4]
 80049fc:	e02e      	b.n	8004a5c <HAL_RCC_OscConfig+0x434>
 80049fe:	4b48      	ldr	r3, [pc, #288]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	069b      	lsls	r3, r3, #26
 8004a0c:	4944      	ldr	r1, [pc, #272]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	604b      	str	r3, [r1, #4]
 8004a12:	e023      	b.n	8004a5c <HAL_RCC_OscConfig+0x434>
 8004a14:	4b42      	ldr	r3, [pc, #264]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	061b      	lsls	r3, r3, #24
 8004a22:	493f      	ldr	r1, [pc, #252]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60cb      	str	r3, [r1, #12]
 8004a28:	e018      	b.n	8004a5c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a3c      	ldr	r2, [pc, #240]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a36:	f7fc ffc1 	bl	80019bc <HAL_GetTick>
 8004a3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a3e:	f7fc ffbd 	bl	80019bc <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e23d      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a50:	4b33      	ldr	r3, [pc, #204]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f0      	bne.n	8004a3e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d036      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d019      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a70:	4b2b      	ldr	r3, [pc, #172]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a74:	4a2a      	ldr	r2, [pc, #168]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7c:	f7fc ff9e 	bl	80019bc <HAL_GetTick>
 8004a80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a84:	f7fc ff9a 	bl	80019bc <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e21a      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a96:	4b22      	ldr	r3, [pc, #136]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0f0      	beq.n	8004a84 <HAL_RCC_OscConfig+0x45c>
 8004aa2:	e018      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab0:	f7fc ff84 	bl	80019bc <HAL_GetTick>
 8004ab4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab8:	f7fc ff80 	bl	80019bc <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e200      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004aca:	4b15      	ldr	r3, [pc, #84]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1f0      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d039      	beq.n	8004b56 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01c      	beq.n	8004b24 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004aea:	4b0d      	ldr	r3, [pc, #52]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a0c      	ldr	r2, [pc, #48]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004af0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004af4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004af6:	f7fc ff61 	bl	80019bc <HAL_GetTick>
 8004afa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004afe:	f7fc ff5d 	bl	80019bc <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e1dd      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b10:	4b03      	ldr	r3, [pc, #12]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <HAL_RCC_OscConfig+0x4d6>
 8004b1c:	e01b      	b.n	8004b56 <HAL_RCC_OscConfig+0x52e>
 8004b1e:	bf00      	nop
 8004b20:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b24:	4b9b      	ldr	r3, [pc, #620]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a9a      	ldr	r2, [pc, #616]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004b2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b30:	f7fc ff44 	bl	80019bc <HAL_GetTick>
 8004b34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b38:	f7fc ff40 	bl	80019bc <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e1c0      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b4a:	4b92      	ldr	r3, [pc, #584]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8081 	beq.w	8004c66 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b64:	4b8c      	ldr	r3, [pc, #560]	@ (8004d98 <HAL_RCC_OscConfig+0x770>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a8b      	ldr	r2, [pc, #556]	@ (8004d98 <HAL_RCC_OscConfig+0x770>)
 8004b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b70:	f7fc ff24 	bl	80019bc <HAL_GetTick>
 8004b74:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b78:	f7fc ff20 	bl	80019bc <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b64      	cmp	r3, #100	@ 0x64
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e1a0      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b8a:	4b83      	ldr	r3, [pc, #524]	@ (8004d98 <HAL_RCC_OscConfig+0x770>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d106      	bne.n	8004bac <HAL_RCC_OscConfig+0x584>
 8004b9e:	4b7d      	ldr	r3, [pc, #500]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba2:	4a7c      	ldr	r2, [pc, #496]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004baa:	e02d      	b.n	8004c08 <HAL_RCC_OscConfig+0x5e0>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10c      	bne.n	8004bce <HAL_RCC_OscConfig+0x5a6>
 8004bb4:	4b77      	ldr	r3, [pc, #476]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb8:	4a76      	ldr	r2, [pc, #472]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc0:	4b74      	ldr	r3, [pc, #464]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc4:	4a73      	ldr	r2, [pc, #460]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004bc6:	f023 0304 	bic.w	r3, r3, #4
 8004bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bcc:	e01c      	b.n	8004c08 <HAL_RCC_OscConfig+0x5e0>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b05      	cmp	r3, #5
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x5c8>
 8004bd6:	4b6f      	ldr	r3, [pc, #444]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bda:	4a6e      	ldr	r2, [pc, #440]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004bdc:	f043 0304 	orr.w	r3, r3, #4
 8004be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004be2:	4b6c      	ldr	r3, [pc, #432]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be6:	4a6b      	ldr	r2, [pc, #428]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004be8:	f043 0301 	orr.w	r3, r3, #1
 8004bec:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bee:	e00b      	b.n	8004c08 <HAL_RCC_OscConfig+0x5e0>
 8004bf0:	4b68      	ldr	r3, [pc, #416]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf4:	4a67      	ldr	r2, [pc, #412]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004bf6:	f023 0301 	bic.w	r3, r3, #1
 8004bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bfc:	4b65      	ldr	r3, [pc, #404]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c00:	4a64      	ldr	r2, [pc, #400]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004c02:	f023 0304 	bic.w	r3, r3, #4
 8004c06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d015      	beq.n	8004c3c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c10:	f7fc fed4 	bl	80019bc <HAL_GetTick>
 8004c14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c16:	e00a      	b.n	8004c2e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c18:	f7fc fed0 	bl	80019bc <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e14e      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c2e:	4b59      	ldr	r3, [pc, #356]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0ee      	beq.n	8004c18 <HAL_RCC_OscConfig+0x5f0>
 8004c3a:	e014      	b.n	8004c66 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3c:	f7fc febe 	bl	80019bc <HAL_GetTick>
 8004c40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c42:	e00a      	b.n	8004c5a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c44:	f7fc feba 	bl	80019bc <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e138      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c5a:	4b4e      	ldr	r3, [pc, #312]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1ee      	bne.n	8004c44 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 812d 	beq.w	8004eca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c70:	4b48      	ldr	r3, [pc, #288]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c78:	2b18      	cmp	r3, #24
 8004c7a:	f000 80bd 	beq.w	8004df8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	f040 809e 	bne.w	8004dc4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c88:	4b42      	ldr	r3, [pc, #264]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a41      	ldr	r2, [pc, #260]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004c8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fc fe92 	bl	80019bc <HAL_GetTick>
 8004c98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c9c:	f7fc fe8e 	bl	80019bc <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e10e      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cae:	4b39      	ldr	r3, [pc, #228]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1f0      	bne.n	8004c9c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cba:	4b36      	ldr	r3, [pc, #216]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004cbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cbe:	4b37      	ldr	r3, [pc, #220]	@ (8004d9c <HAL_RCC_OscConfig+0x774>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004cca:	0112      	lsls	r2, r2, #4
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	4931      	ldr	r1, [pc, #196]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	025b      	lsls	r3, r3, #9
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	041b      	lsls	r3, r3, #16
 8004cf2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	061b      	lsls	r3, r3, #24
 8004d00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d04:	4923      	ldr	r1, [pc, #140]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004d0a:	4b22      	ldr	r3, [pc, #136]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0e:	4a21      	ldr	r2, [pc, #132]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d16:	4b1f      	ldr	r3, [pc, #124]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d1a:	4b21      	ldr	r3, [pc, #132]	@ (8004da0 <HAL_RCC_OscConfig+0x778>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d22:	00d2      	lsls	r2, r2, #3
 8004d24:	491b      	ldr	r1, [pc, #108]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2e:	f023 020c 	bic.w	r2, r3, #12
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	4917      	ldr	r1, [pc, #92]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d3c:	4b15      	ldr	r3, [pc, #84]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d40:	f023 0202 	bic.w	r2, r3, #2
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d48:	4912      	ldr	r1, [pc, #72]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d4e:	4b11      	ldr	r3, [pc, #68]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d52:	4a10      	ldr	r2, [pc, #64]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5e:	4a0d      	ldr	r2, [pc, #52]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d66:	4b0b      	ldr	r3, [pc, #44]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d72:	4b08      	ldr	r3, [pc, #32]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	4a07      	ldr	r2, [pc, #28]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d78:	f043 0301 	orr.w	r3, r3, #1
 8004d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d7e:	4b05      	ldr	r3, [pc, #20]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a04      	ldr	r2, [pc, #16]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d84:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8a:	f7fc fe17 	bl	80019bc <HAL_GetTick>
 8004d8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d90:	e011      	b.n	8004db6 <HAL_RCC_OscConfig+0x78e>
 8004d92:	bf00      	nop
 8004d94:	58024400 	.word	0x58024400
 8004d98:	58024800 	.word	0x58024800
 8004d9c:	fffffc0c 	.word	0xfffffc0c
 8004da0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da4:	f7fc fe0a 	bl	80019bc <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e08a      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004db6:	4b47      	ldr	r3, [pc, #284]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x77c>
 8004dc2:	e082      	b.n	8004eca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc4:	4b43      	ldr	r3, [pc, #268]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a42      	ldr	r2, [pc, #264]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004dca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd0:	f7fc fdf4 	bl	80019bc <HAL_GetTick>
 8004dd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd8:	f7fc fdf0 	bl	80019bc <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e070      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dea:	4b3a      	ldr	r3, [pc, #232]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f0      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x7b0>
 8004df6:	e068      	b.n	8004eca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004df8:	4b36      	ldr	r3, [pc, #216]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004dfe:	4b35      	ldr	r3, [pc, #212]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e02:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d031      	beq.n	8004e70 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f003 0203 	and.w	r2, r3, #3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d12a      	bne.n	8004e70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	091b      	lsrs	r3, r3, #4
 8004e1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d122      	bne.n	8004e70 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e34:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d11a      	bne.n	8004e70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	0a5b      	lsrs	r3, r3, #9
 8004e3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e46:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d111      	bne.n	8004e70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	0c1b      	lsrs	r3, r3, #16
 8004e50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e58:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d108      	bne.n	8004e70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	0e1b      	lsrs	r3, r3, #24
 8004e62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d001      	beq.n	8004e74 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e02b      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004e74:	4b17      	ldr	r3, [pc, #92]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e78:	08db      	lsrs	r3, r3, #3
 8004e7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e7e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d01f      	beq.n	8004eca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004e8a:	4b12      	ldr	r3, [pc, #72]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8e:	4a11      	ldr	r2, [pc, #68]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e96:	f7fc fd91 	bl	80019bc <HAL_GetTick>
 8004e9a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004e9c:	bf00      	nop
 8004e9e:	f7fc fd8d 	bl	80019bc <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d0f9      	beq.n	8004e9e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eae:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed8 <HAL_RCC_OscConfig+0x8b0>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004eb6:	00d2      	lsls	r2, r2, #3
 8004eb8:	4906      	ldr	r1, [pc, #24]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004ebe:	4b05      	ldr	r3, [pc, #20]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	4a04      	ldr	r2, [pc, #16]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3730      	adds	r7, #48	@ 0x30
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	58024400 	.word	0x58024400
 8004ed8:	ffff0007 	.word	0xffff0007

08004edc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e19c      	b.n	800522a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ef0:	4b8a      	ldr	r3, [pc, #552]	@ (800511c <HAL_RCC_ClockConfig+0x240>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d910      	bls.n	8004f20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efe:	4b87      	ldr	r3, [pc, #540]	@ (800511c <HAL_RCC_ClockConfig+0x240>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f023 020f 	bic.w	r2, r3, #15
 8004f06:	4985      	ldr	r1, [pc, #532]	@ (800511c <HAL_RCC_ClockConfig+0x240>)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0e:	4b83      	ldr	r3, [pc, #524]	@ (800511c <HAL_RCC_ClockConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d001      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e184      	b.n	800522a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d010      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	4b7b      	ldr	r3, [pc, #492]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d908      	bls.n	8004f4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f3c:	4b78      	ldr	r3, [pc, #480]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	4975      	ldr	r1, [pc, #468]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d010      	beq.n	8004f7c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695a      	ldr	r2, [r3, #20]
 8004f5e:	4b70      	ldr	r3, [pc, #448]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d908      	bls.n	8004f7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f6a:	4b6d      	ldr	r3, [pc, #436]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	496a      	ldr	r1, [pc, #424]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d010      	beq.n	8004faa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699a      	ldr	r2, [r3, #24]
 8004f8c:	4b64      	ldr	r3, [pc, #400]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d908      	bls.n	8004faa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f98:	4b61      	ldr	r3, [pc, #388]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	495e      	ldr	r1, [pc, #376]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d010      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69da      	ldr	r2, [r3, #28]
 8004fba:	4b59      	ldr	r3, [pc, #356]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d908      	bls.n	8004fd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fc6:	4b56      	ldr	r3, [pc, #344]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	4953      	ldr	r1, [pc, #332]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d010      	beq.n	8005006 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	4b4d      	ldr	r3, [pc, #308]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d908      	bls.n	8005006 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ff4:	4b4a      	ldr	r3, [pc, #296]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f023 020f 	bic.w	r2, r3, #15
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	4947      	ldr	r1, [pc, #284]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8005002:	4313      	orrs	r3, r2
 8005004:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d055      	beq.n	80050be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005012:	4b43      	ldr	r3, [pc, #268]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	4940      	ldr	r1, [pc, #256]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8005020:	4313      	orrs	r3, r2
 8005022:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d107      	bne.n	800503c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800502c:	4b3c      	ldr	r3, [pc, #240]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d121      	bne.n	800507c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e0f6      	b.n	800522a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b03      	cmp	r3, #3
 8005042:	d107      	bne.n	8005054 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005044:	4b36      	ldr	r3, [pc, #216]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d115      	bne.n	800507c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0ea      	b.n	800522a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d107      	bne.n	800506c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800505c:	4b30      	ldr	r3, [pc, #192]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d109      	bne.n	800507c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0de      	b.n	800522a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800506c:	4b2c      	ldr	r3, [pc, #176]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e0d6      	b.n	800522a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800507c:	4b28      	ldr	r3, [pc, #160]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f023 0207 	bic.w	r2, r3, #7
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	4925      	ldr	r1, [pc, #148]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 800508a:	4313      	orrs	r3, r2
 800508c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800508e:	f7fc fc95 	bl	80019bc <HAL_GetTick>
 8005092:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005094:	e00a      	b.n	80050ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005096:	f7fc fc91 	bl	80019bc <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e0be      	b.n	800522a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d1eb      	bne.n	8005096 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d010      	beq.n	80050ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	4b14      	ldr	r3, [pc, #80]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d208      	bcs.n	80050ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050da:	4b11      	ldr	r3, [pc, #68]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	f023 020f 	bic.w	r2, r3, #15
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	490e      	ldr	r1, [pc, #56]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050ec:	4b0b      	ldr	r3, [pc, #44]	@ (800511c <HAL_RCC_ClockConfig+0x240>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d214      	bcs.n	8005124 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fa:	4b08      	ldr	r3, [pc, #32]	@ (800511c <HAL_RCC_ClockConfig+0x240>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f023 020f 	bic.w	r2, r3, #15
 8005102:	4906      	ldr	r1, [pc, #24]	@ (800511c <HAL_RCC_ClockConfig+0x240>)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	4313      	orrs	r3, r2
 8005108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510a:	4b04      	ldr	r3, [pc, #16]	@ (800511c <HAL_RCC_ClockConfig+0x240>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d005      	beq.n	8005124 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e086      	b.n	800522a <HAL_RCC_ClockConfig+0x34e>
 800511c:	52002000 	.word	0x52002000
 8005120:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d010      	beq.n	8005152 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	4b3f      	ldr	r3, [pc, #252]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800513c:	429a      	cmp	r2, r3
 800513e:	d208      	bcs.n	8005152 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005140:	4b3c      	ldr	r3, [pc, #240]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	4939      	ldr	r1, [pc, #228]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 800514e:	4313      	orrs	r3, r2
 8005150:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d010      	beq.n	8005180 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695a      	ldr	r2, [r3, #20]
 8005162:	4b34      	ldr	r3, [pc, #208]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800516a:	429a      	cmp	r2, r3
 800516c:	d208      	bcs.n	8005180 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800516e:	4b31      	ldr	r3, [pc, #196]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	492e      	ldr	r1, [pc, #184]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 800517c:	4313      	orrs	r3, r2
 800517e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b00      	cmp	r3, #0
 800518a:	d010      	beq.n	80051ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699a      	ldr	r2, [r3, #24]
 8005190:	4b28      	ldr	r3, [pc, #160]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005198:	429a      	cmp	r2, r3
 800519a:	d208      	bcs.n	80051ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800519c:	4b25      	ldr	r3, [pc, #148]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	4922      	ldr	r1, [pc, #136]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d010      	beq.n	80051dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69da      	ldr	r2, [r3, #28]
 80051be:	4b1d      	ldr	r3, [pc, #116]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d208      	bcs.n	80051dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80051ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	4917      	ldr	r1, [pc, #92]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80051dc:	f000 f834 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 80051e0:	4602      	mov	r2, r0
 80051e2:	4b14      	ldr	r3, [pc, #80]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	0a1b      	lsrs	r3, r3, #8
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	4912      	ldr	r1, [pc, #72]	@ (8005238 <HAL_RCC_ClockConfig+0x35c>)
 80051ee:	5ccb      	ldrb	r3, [r1, r3]
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
 80051f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	4a0d      	ldr	r2, [pc, #52]	@ (8005238 <HAL_RCC_ClockConfig+0x35c>)
 8005204:	5cd3      	ldrb	r3, [r2, r3]
 8005206:	f003 031f 	and.w	r3, r3, #31
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	fa22 f303 	lsr.w	r3, r2, r3
 8005210:	4a0a      	ldr	r2, [pc, #40]	@ (800523c <HAL_RCC_ClockConfig+0x360>)
 8005212:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005214:	4a0a      	ldr	r2, [pc, #40]	@ (8005240 <HAL_RCC_ClockConfig+0x364>)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800521a:	4b0a      	ldr	r3, [pc, #40]	@ (8005244 <HAL_RCC_ClockConfig+0x368>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f7fb ff98 	bl	8001154 <HAL_InitTick>
 8005224:	4603      	mov	r3, r0
 8005226:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005228:	7bfb      	ldrb	r3, [r7, #15]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	58024400 	.word	0x58024400
 8005238:	08011dc8 	.word	0x08011dc8
 800523c:	24000004 	.word	0x24000004
 8005240:	24000000 	.word	0x24000000
 8005244:	24000008 	.word	0x24000008

08005248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005248:	b480      	push	{r7}
 800524a:	b089      	sub	sp, #36	@ 0x24
 800524c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800524e:	4bb3      	ldr	r3, [pc, #716]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005256:	2b18      	cmp	r3, #24
 8005258:	f200 8155 	bhi.w	8005506 <HAL_RCC_GetSysClockFreq+0x2be>
 800525c:	a201      	add	r2, pc, #4	@ (adr r2, 8005264 <HAL_RCC_GetSysClockFreq+0x1c>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	080052c9 	.word	0x080052c9
 8005268:	08005507 	.word	0x08005507
 800526c:	08005507 	.word	0x08005507
 8005270:	08005507 	.word	0x08005507
 8005274:	08005507 	.word	0x08005507
 8005278:	08005507 	.word	0x08005507
 800527c:	08005507 	.word	0x08005507
 8005280:	08005507 	.word	0x08005507
 8005284:	080052ef 	.word	0x080052ef
 8005288:	08005507 	.word	0x08005507
 800528c:	08005507 	.word	0x08005507
 8005290:	08005507 	.word	0x08005507
 8005294:	08005507 	.word	0x08005507
 8005298:	08005507 	.word	0x08005507
 800529c:	08005507 	.word	0x08005507
 80052a0:	08005507 	.word	0x08005507
 80052a4:	080052f5 	.word	0x080052f5
 80052a8:	08005507 	.word	0x08005507
 80052ac:	08005507 	.word	0x08005507
 80052b0:	08005507 	.word	0x08005507
 80052b4:	08005507 	.word	0x08005507
 80052b8:	08005507 	.word	0x08005507
 80052bc:	08005507 	.word	0x08005507
 80052c0:	08005507 	.word	0x08005507
 80052c4:	080052fb 	.word	0x080052fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052c8:	4b94      	ldr	r3, [pc, #592]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d009      	beq.n	80052e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052d4:	4b91      	ldr	r3, [pc, #580]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	08db      	lsrs	r3, r3, #3
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	4a90      	ldr	r2, [pc, #576]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052e0:	fa22 f303 	lsr.w	r3, r2, r3
 80052e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80052e6:	e111      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80052e8:	4b8d      	ldr	r3, [pc, #564]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052ea:	61bb      	str	r3, [r7, #24]
      break;
 80052ec:	e10e      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80052ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052f0:	61bb      	str	r3, [r7, #24]
      break;
 80052f2:	e10b      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80052f4:	4b8c      	ldr	r3, [pc, #560]	@ (8005528 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80052f6:	61bb      	str	r3, [r7, #24]
      break;
 80052f8:	e108      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052fa:	4b88      	ldr	r3, [pc, #544]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005304:	4b85      	ldr	r3, [pc, #532]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005308:	091b      	lsrs	r3, r3, #4
 800530a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800530e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005310:	4b82      	ldr	r3, [pc, #520]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800531a:	4b80      	ldr	r3, [pc, #512]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800531c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800531e:	08db      	lsrs	r3, r3, #3
 8005320:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	fb02 f303 	mul.w	r3, r2, r3
 800532a:	ee07 3a90 	vmov	s15, r3
 800532e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005332:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 80e1 	beq.w	8005500 <HAL_RCC_GetSysClockFreq+0x2b8>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b02      	cmp	r3, #2
 8005342:	f000 8083 	beq.w	800544c <HAL_RCC_GetSysClockFreq+0x204>
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b02      	cmp	r3, #2
 800534a:	f200 80a1 	bhi.w	8005490 <HAL_RCC_GetSysClockFreq+0x248>
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <HAL_RCC_GetSysClockFreq+0x114>
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d056      	beq.n	8005408 <HAL_RCC_GetSysClockFreq+0x1c0>
 800535a:	e099      	b.n	8005490 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800535c:	4b6f      	ldr	r3, [pc, #444]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b00      	cmp	r3, #0
 8005366:	d02d      	beq.n	80053c4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005368:	4b6c      	ldr	r3, [pc, #432]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	08db      	lsrs	r3, r3, #3
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	4a6b      	ldr	r2, [pc, #428]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005374:	fa22 f303 	lsr.w	r3, r2, r3
 8005378:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	ee07 3a90 	vmov	s15, r3
 8005380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005392:	4b62      	ldr	r3, [pc, #392]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80053a6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800552c <HAL_RCC_GetSysClockFreq+0x2e4>
 80053aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053be:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80053c2:	e087      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ce:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005530 <HAL_RCC_GetSysClockFreq+0x2e8>
 80053d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d6:	4b51      	ldr	r3, [pc, #324]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ea:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800552c <HAL_RCC_GetSysClockFreq+0x2e4>
 80053ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005402:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005406:	e065      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005412:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005534 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800541a:	4b40      	ldr	r3, [pc, #256]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800541c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005422:	ee07 3a90 	vmov	s15, r3
 8005426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800542a:	ed97 6a02 	vldr	s12, [r7, #8]
 800542e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800552c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800543a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800543e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005446:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800544a:	e043      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005456:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005538 <HAL_RCC_GetSysClockFreq+0x2f0>
 800545a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800545e:	4b2f      	ldr	r3, [pc, #188]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005466:	ee07 3a90 	vmov	s15, r3
 800546a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005472:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800552c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800547a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800547e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800548e:	e021      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	ee07 3a90 	vmov	s15, r3
 8005496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005534 <HAL_RCC_GetSysClockFreq+0x2ec>
 800549e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a2:	4b1e      	ldr	r3, [pc, #120]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054aa:	ee07 3a90 	vmov	s15, r3
 80054ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80054b6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800552c <HAL_RCC_GetSysClockFreq+0x2e4>
 80054ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80054d4:	4b11      	ldr	r3, [pc, #68]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d8:	0a5b      	lsrs	r3, r3, #9
 80054da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054de:	3301      	adds	r3, #1
 80054e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	ee07 3a90 	vmov	s15, r3
 80054e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80054f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054f8:	ee17 3a90 	vmov	r3, s15
 80054fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80054fe:	e005      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	61bb      	str	r3, [r7, #24]
      break;
 8005504:	e002      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005506:	4b07      	ldr	r3, [pc, #28]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005508:	61bb      	str	r3, [r7, #24]
      break;
 800550a:	bf00      	nop
  }

  return sysclockfreq;
 800550c:	69bb      	ldr	r3, [r7, #24]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3724      	adds	r7, #36	@ 0x24
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	58024400 	.word	0x58024400
 8005520:	03d09000 	.word	0x03d09000
 8005524:	003d0900 	.word	0x003d0900
 8005528:	017d7840 	.word	0x017d7840
 800552c:	46000000 	.word	0x46000000
 8005530:	4c742400 	.word	0x4c742400
 8005534:	4a742400 	.word	0x4a742400
 8005538:	4bbebc20 	.word	0x4bbebc20

0800553c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005542:	f7ff fe81 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 8005546:	4602      	mov	r2, r0
 8005548:	4b10      	ldr	r3, [pc, #64]	@ (800558c <HAL_RCC_GetHCLKFreq+0x50>)
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	0a1b      	lsrs	r3, r3, #8
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	490f      	ldr	r1, [pc, #60]	@ (8005590 <HAL_RCC_GetHCLKFreq+0x54>)
 8005554:	5ccb      	ldrb	r3, [r1, r3]
 8005556:	f003 031f 	and.w	r3, r3, #31
 800555a:	fa22 f303 	lsr.w	r3, r2, r3
 800555e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005560:	4b0a      	ldr	r3, [pc, #40]	@ (800558c <HAL_RCC_GetHCLKFreq+0x50>)
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	4a09      	ldr	r2, [pc, #36]	@ (8005590 <HAL_RCC_GetHCLKFreq+0x54>)
 800556a:	5cd3      	ldrb	r3, [r2, r3]
 800556c:	f003 031f 	and.w	r3, r3, #31
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	fa22 f303 	lsr.w	r3, r2, r3
 8005576:	4a07      	ldr	r2, [pc, #28]	@ (8005594 <HAL_RCC_GetHCLKFreq+0x58>)
 8005578:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800557a:	4a07      	ldr	r2, [pc, #28]	@ (8005598 <HAL_RCC_GetHCLKFreq+0x5c>)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005580:	4b04      	ldr	r3, [pc, #16]	@ (8005594 <HAL_RCC_GetHCLKFreq+0x58>)
 8005582:	681b      	ldr	r3, [r3, #0]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	58024400 	.word	0x58024400
 8005590:	08011dc8 	.word	0x08011dc8
 8005594:	24000004 	.word	0x24000004
 8005598:	24000000 	.word	0x24000000

0800559c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80055a0:	f7ff ffcc 	bl	800553c <HAL_RCC_GetHCLKFreq>
 80055a4:	4602      	mov	r2, r0
 80055a6:	4b06      	ldr	r3, [pc, #24]	@ (80055c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	091b      	lsrs	r3, r3, #4
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	4904      	ldr	r1, [pc, #16]	@ (80055c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055b2:	5ccb      	ldrb	r3, [r1, r3]
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80055bc:	4618      	mov	r0, r3
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	58024400 	.word	0x58024400
 80055c4:	08011dc8 	.word	0x08011dc8

080055c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	223f      	movs	r2, #63	@ 0x3f
 80055d6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005644 <HAL_RCC_GetClockConfig+0x7c>)
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f003 0207 	and.w	r2, r3, #7
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80055e4:	4b17      	ldr	r3, [pc, #92]	@ (8005644 <HAL_RCC_GetClockConfig+0x7c>)
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80055f0:	4b14      	ldr	r3, [pc, #80]	@ (8005644 <HAL_RCC_GetClockConfig+0x7c>)
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	f003 020f 	and.w	r2, r3, #15
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80055fc:	4b11      	ldr	r3, [pc, #68]	@ (8005644 <HAL_RCC_GetClockConfig+0x7c>)
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005608:	4b0e      	ldr	r3, [pc, #56]	@ (8005644 <HAL_RCC_GetClockConfig+0x7c>)
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005614:	4b0b      	ldr	r3, [pc, #44]	@ (8005644 <HAL_RCC_GetClockConfig+0x7c>)
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005620:	4b08      	ldr	r3, [pc, #32]	@ (8005644 <HAL_RCC_GetClockConfig+0x7c>)
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800562c:	4b06      	ldr	r3, [pc, #24]	@ (8005648 <HAL_RCC_GetClockConfig+0x80>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 020f 	and.w	r2, r3, #15
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	601a      	str	r2, [r3, #0]
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	58024400 	.word	0x58024400
 8005648:	52002000 	.word	0x52002000

0800564c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800564c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005650:	b0ca      	sub	sp, #296	@ 0x128
 8005652:	af00      	add	r7, sp, #0
 8005654:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005658:	2300      	movs	r3, #0
 800565a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800565e:	2300      	movs	r3, #0
 8005660:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005670:	2500      	movs	r5, #0
 8005672:	ea54 0305 	orrs.w	r3, r4, r5
 8005676:	d049      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800567c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800567e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005682:	d02f      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005684:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005688:	d828      	bhi.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800568a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800568e:	d01a      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005690:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005694:	d822      	bhi.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800569a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800569e:	d007      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80056a0:	e01c      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a2:	4bb8      	ldr	r3, [pc, #736]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a6:	4ab7      	ldr	r2, [pc, #732]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056ae:	e01a      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b4:	3308      	adds	r3, #8
 80056b6:	2102      	movs	r1, #2
 80056b8:	4618      	mov	r0, r3
 80056ba:	f002 fb61 	bl	8007d80 <RCCEx_PLL2_Config>
 80056be:	4603      	mov	r3, r0
 80056c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056c4:	e00f      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ca:	3328      	adds	r3, #40	@ 0x28
 80056cc:	2102      	movs	r1, #2
 80056ce:	4618      	mov	r0, r3
 80056d0:	f002 fc08 	bl	8007ee4 <RCCEx_PLL3_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056da:	e004      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056e2:	e000      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80056e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10a      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80056ee:	4ba5      	ldr	r3, [pc, #660]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80056f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056fc:	4aa1      	ldr	r2, [pc, #644]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056fe:	430b      	orrs	r3, r1
 8005700:	6513      	str	r3, [r2, #80]	@ 0x50
 8005702:	e003      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005704:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005708:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800570c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005718:	f04f 0900 	mov.w	r9, #0
 800571c:	ea58 0309 	orrs.w	r3, r8, r9
 8005720:	d047      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005728:	2b04      	cmp	r3, #4
 800572a:	d82a      	bhi.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800572c:	a201      	add	r2, pc, #4	@ (adr r2, 8005734 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	08005749 	.word	0x08005749
 8005738:	08005757 	.word	0x08005757
 800573c:	0800576d 	.word	0x0800576d
 8005740:	0800578b 	.word	0x0800578b
 8005744:	0800578b 	.word	0x0800578b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005748:	4b8e      	ldr	r3, [pc, #568]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800574a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574c:	4a8d      	ldr	r2, [pc, #564]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800574e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005754:	e01a      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575a:	3308      	adds	r3, #8
 800575c:	2100      	movs	r1, #0
 800575e:	4618      	mov	r0, r3
 8005760:	f002 fb0e 	bl	8007d80 <RCCEx_PLL2_Config>
 8005764:	4603      	mov	r3, r0
 8005766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800576a:	e00f      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800576c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005770:	3328      	adds	r3, #40	@ 0x28
 8005772:	2100      	movs	r1, #0
 8005774:	4618      	mov	r0, r3
 8005776:	f002 fbb5 	bl	8007ee4 <RCCEx_PLL3_Config>
 800577a:	4603      	mov	r3, r0
 800577c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005780:	e004      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005788:	e000      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800578a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800578c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10a      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005794:	4b7b      	ldr	r3, [pc, #492]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005798:	f023 0107 	bic.w	r1, r3, #7
 800579c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057a2:	4a78      	ldr	r2, [pc, #480]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057a4:	430b      	orrs	r3, r1
 80057a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80057a8:	e003      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80057b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80057be:	f04f 0b00 	mov.w	fp, #0
 80057c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80057c6:	d04c      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80057c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057d2:	d030      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80057d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057d8:	d829      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057da:	2bc0      	cmp	r3, #192	@ 0xc0
 80057dc:	d02d      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80057de:	2bc0      	cmp	r3, #192	@ 0xc0
 80057e0:	d825      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057e2:	2b80      	cmp	r3, #128	@ 0x80
 80057e4:	d018      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80057e6:	2b80      	cmp	r3, #128	@ 0x80
 80057e8:	d821      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80057ee:	2b40      	cmp	r3, #64	@ 0x40
 80057f0:	d007      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80057f2:	e01c      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f4:	4b63      	ldr	r3, [pc, #396]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f8:	4a62      	ldr	r2, [pc, #392]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005800:	e01c      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005806:	3308      	adds	r3, #8
 8005808:	2100      	movs	r1, #0
 800580a:	4618      	mov	r0, r3
 800580c:	f002 fab8 	bl	8007d80 <RCCEx_PLL2_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005816:	e011      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581c:	3328      	adds	r3, #40	@ 0x28
 800581e:	2100      	movs	r1, #0
 8005820:	4618      	mov	r0, r3
 8005822:	f002 fb5f 	bl	8007ee4 <RCCEx_PLL3_Config>
 8005826:	4603      	mov	r3, r0
 8005828:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800582c:	e006      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005834:	e002      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005836:	bf00      	nop
 8005838:	e000      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800583a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800583c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10a      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005844:	4b4f      	ldr	r3, [pc, #316]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005848:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800584c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005852:	4a4c      	ldr	r2, [pc, #304]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005854:	430b      	orrs	r3, r1
 8005856:	6513      	str	r3, [r2, #80]	@ 0x50
 8005858:	e003      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800585a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800585e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800586e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005872:	2300      	movs	r3, #0
 8005874:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005878:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800587c:	460b      	mov	r3, r1
 800587e:	4313      	orrs	r3, r2
 8005880:	d053      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005886:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800588a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800588e:	d035      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005890:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005894:	d82e      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005896:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800589a:	d031      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800589c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80058a0:	d828      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80058a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058a6:	d01a      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x292>
 80058a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058ac:	d822      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80058b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058b6:	d007      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80058b8:	e01c      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ba:	4b32      	ldr	r3, [pc, #200]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058be:	4a31      	ldr	r2, [pc, #196]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058c6:	e01c      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058cc:	3308      	adds	r3, #8
 80058ce:	2100      	movs	r1, #0
 80058d0:	4618      	mov	r0, r3
 80058d2:	f002 fa55 	bl	8007d80 <RCCEx_PLL2_Config>
 80058d6:	4603      	mov	r3, r0
 80058d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80058dc:	e011      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e2:	3328      	adds	r3, #40	@ 0x28
 80058e4:	2100      	movs	r1, #0
 80058e6:	4618      	mov	r0, r3
 80058e8:	f002 fafc 	bl	8007ee4 <RCCEx_PLL3_Config>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058f2:	e006      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058fa:	e002      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80058fc:	bf00      	nop
 80058fe:	e000      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10b      	bne.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800590a:	4b1e      	ldr	r3, [pc, #120]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800590c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800590e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005916:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800591a:	4a1a      	ldr	r2, [pc, #104]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800591c:	430b      	orrs	r3, r1
 800591e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005920:	e003      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005926:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800592a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005936:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800593a:	2300      	movs	r3, #0
 800593c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005940:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005944:	460b      	mov	r3, r1
 8005946:	4313      	orrs	r3, r2
 8005948:	d056      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800594a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005952:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005956:	d038      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005958:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800595c:	d831      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800595e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005962:	d034      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005964:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005968:	d82b      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800596a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800596e:	d01d      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005970:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005974:	d825      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d006      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800597a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800597e:	d00a      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005980:	e01f      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005982:	bf00      	nop
 8005984:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005988:	4ba2      	ldr	r3, [pc, #648]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598c:	4aa1      	ldr	r2, [pc, #644]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800598e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005994:	e01c      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599a:	3308      	adds	r3, #8
 800599c:	2100      	movs	r1, #0
 800599e:	4618      	mov	r0, r3
 80059a0:	f002 f9ee 	bl	8007d80 <RCCEx_PLL2_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80059aa:	e011      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b0:	3328      	adds	r3, #40	@ 0x28
 80059b2:	2100      	movs	r1, #0
 80059b4:	4618      	mov	r0, r3
 80059b6:	f002 fa95 	bl	8007ee4 <RCCEx_PLL3_Config>
 80059ba:	4603      	mov	r3, r0
 80059bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059c0:	e006      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059c8:	e002      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80059ca:	bf00      	nop
 80059cc:	e000      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80059ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10b      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80059d8:	4b8e      	ldr	r3, [pc, #568]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059dc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80059e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80059e8:	4a8a      	ldr	r2, [pc, #552]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059ea:	430b      	orrs	r3, r1
 80059ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80059ee:	e003      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80059f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a00:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005a04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005a0e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005a12:	460b      	mov	r3, r1
 8005a14:	4313      	orrs	r3, r2
 8005a16:	d03a      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a1e:	2b30      	cmp	r3, #48	@ 0x30
 8005a20:	d01f      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005a22:	2b30      	cmp	r3, #48	@ 0x30
 8005a24:	d819      	bhi.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d00c      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d815      	bhi.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d019      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005a32:	2b10      	cmp	r3, #16
 8005a34:	d111      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a36:	4b77      	ldr	r3, [pc, #476]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a3a:	4a76      	ldr	r2, [pc, #472]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005a42:	e011      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a48:	3308      	adds	r3, #8
 8005a4a:	2102      	movs	r1, #2
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f002 f997 	bl	8007d80 <RCCEx_PLL2_Config>
 8005a52:	4603      	mov	r3, r0
 8005a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005a58:	e006      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a60:	e002      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a62:	bf00      	nop
 8005a64:	e000      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10a      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a70:	4b68      	ldr	r3, [pc, #416]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a74:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a7e:	4a65      	ldr	r2, [pc, #404]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a80:	430b      	orrs	r3, r1
 8005a82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a84:	e003      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a96:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005a9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005aa4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	d051      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ab8:	d035      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005aba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005abe:	d82e      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ac0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ac4:	d031      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005ac6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005aca:	d828      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005acc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ad0:	d01a      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ad6:	d822      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae0:	d007      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005ae2:	e01c      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae4:	4b4b      	ldr	r3, [pc, #300]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae8:	4a4a      	ldr	r2, [pc, #296]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005af0:	e01c      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af6:	3308      	adds	r3, #8
 8005af8:	2100      	movs	r1, #0
 8005afa:	4618      	mov	r0, r3
 8005afc:	f002 f940 	bl	8007d80 <RCCEx_PLL2_Config>
 8005b00:	4603      	mov	r3, r0
 8005b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005b06:	e011      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0c:	3328      	adds	r3, #40	@ 0x28
 8005b0e:	2100      	movs	r1, #0
 8005b10:	4618      	mov	r0, r3
 8005b12:	f002 f9e7 	bl	8007ee4 <RCCEx_PLL3_Config>
 8005b16:	4603      	mov	r3, r0
 8005b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005b1c:	e006      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b24:	e002      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005b26:	bf00      	nop
 8005b28:	e000      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10a      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005b34:	4b37      	ldr	r3, [pc, #220]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b38:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b42:	4a34      	ldr	r2, [pc, #208]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b44:	430b      	orrs	r3, r1
 8005b46:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b48:	e003      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005b5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b62:	2300      	movs	r3, #0
 8005b64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b68:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	d056      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b7c:	d033      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005b7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b82:	d82c      	bhi.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b88:	d02f      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005b8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b8e:	d826      	bhi.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b94:	d02b      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005b96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b9a:	d820      	bhi.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ba0:	d012      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005ba2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ba6:	d81a      	bhi.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d022      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bb0:	d115      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb6:	3308      	adds	r3, #8
 8005bb8:	2101      	movs	r1, #1
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f002 f8e0 	bl	8007d80 <RCCEx_PLL2_Config>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005bc6:	e015      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bcc:	3328      	adds	r3, #40	@ 0x28
 8005bce:	2101      	movs	r1, #1
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f002 f987 	bl	8007ee4 <RCCEx_PLL3_Config>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005bdc:	e00a      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005be4:	e006      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005be6:	bf00      	nop
 8005be8:	e004      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bea:	bf00      	nop
 8005bec:	e002      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bee:	bf00      	nop
 8005bf0:	e000      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10d      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005bfc:	4b05      	ldr	r3, [pc, #20]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c00:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c0a:	4a02      	ldr	r2, [pc, #8]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c10:	e006      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005c12:	bf00      	nop
 8005c14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c28:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c30:	2300      	movs	r3, #0
 8005c32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c36:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	d055      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c4c:	d033      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005c4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c52:	d82c      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c58:	d02f      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c5e:	d826      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c64:	d02b      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005c66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c6a:	d820      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c70:	d012      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005c72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c76:	d81a      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d022      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005c7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c80:	d115      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c86:	3308      	adds	r3, #8
 8005c88:	2101      	movs	r1, #1
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f002 f878 	bl	8007d80 <RCCEx_PLL2_Config>
 8005c90:	4603      	mov	r3, r0
 8005c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c96:	e015      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9c:	3328      	adds	r3, #40	@ 0x28
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f002 f91f 	bl	8007ee4 <RCCEx_PLL3_Config>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005cac:	e00a      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cb4:	e006      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005cb6:	bf00      	nop
 8005cb8:	e004      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005cba:	bf00      	nop
 8005cbc:	e002      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005cbe:	bf00      	nop
 8005cc0:	e000      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005cc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10b      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ccc:	4ba3      	ldr	r3, [pc, #652]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005cdc:	4a9f      	ldr	r2, [pc, #636]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cde:	430b      	orrs	r3, r1
 8005ce0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ce2:	e003      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005d02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d06:	460b      	mov	r3, r1
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	d037      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d16:	d00e      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005d18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d1c:	d816      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d018      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005d22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d26:	d111      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d28:	4b8c      	ldr	r3, [pc, #560]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2c:	4a8b      	ldr	r2, [pc, #556]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d34:	e00f      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f002 f81e 	bl	8007d80 <RCCEx_PLL2_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d4a:	e004      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d52:	e000      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10a      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d62:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d6c:	4a7b      	ldr	r2, [pc, #492]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d72:	e003      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005d88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	d039      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d81c      	bhi.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005da6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dac:	08005de9 	.word	0x08005de9
 8005db0:	08005dbd 	.word	0x08005dbd
 8005db4:	08005dcb 	.word	0x08005dcb
 8005db8:	08005de9 	.word	0x08005de9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dbc:	4b67      	ldr	r3, [pc, #412]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc0:	4a66      	ldr	r2, [pc, #408]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005dc8:	e00f      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dce:	3308      	adds	r3, #8
 8005dd0:	2102      	movs	r1, #2
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f001 ffd4 	bl	8007d80 <RCCEx_PLL2_Config>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005dde:	e004      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005de6:	e000      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005df2:	4b5a      	ldr	r3, [pc, #360]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005df6:	f023 0103 	bic.w	r1, r3, #3
 8005dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e00:	4a56      	ldr	r2, [pc, #344]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e02:	430b      	orrs	r3, r1
 8005e04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e06:	e003      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005e1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e20:	2300      	movs	r3, #0
 8005e22:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f000 809f 	beq.w	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e32:	4b4b      	ldr	r3, [pc, #300]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a4a      	ldr	r2, [pc, #296]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e3e:	f7fb fdbd 	bl	80019bc <HAL_GetTick>
 8005e42:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e46:	e00b      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e48:	f7fb fdb8 	bl	80019bc <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b64      	cmp	r3, #100	@ 0x64
 8005e56:	d903      	bls.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e5e:	e005      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e60:	4b3f      	ldr	r3, [pc, #252]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0ed      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d179      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e74:	4b39      	ldr	r3, [pc, #228]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e80:	4053      	eors	r3, r2
 8005e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d015      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e8a:	4b34      	ldr	r3, [pc, #208]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e96:	4b31      	ldr	r3, [pc, #196]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e9a:	4a30      	ldr	r2, [pc, #192]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ea0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ea2:	4b2e      	ldr	r3, [pc, #184]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005eae:	4a2b      	ldr	r2, [pc, #172]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eb4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ec2:	d118      	bne.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec4:	f7fb fd7a 	bl	80019bc <HAL_GetTick>
 8005ec8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ecc:	e00d      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ece:	f7fb fd75 	bl	80019bc <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005ed8:	1ad2      	subs	r2, r2, r3
 8005eda:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d903      	bls.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005ee8:	e005      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005eea:	4b1c      	ldr	r3, [pc, #112]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0eb      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d129      	bne.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f0e:	d10e      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005f10:	4b12      	ldr	r3, [pc, #72]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f20:	091a      	lsrs	r2, r3, #4
 8005f22:	4b10      	ldr	r3, [pc, #64]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	4a0d      	ldr	r2, [pc, #52]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	6113      	str	r3, [r2, #16]
 8005f2c:	e005      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	4a0a      	ldr	r2, [pc, #40]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f38:	6113      	str	r3, [r2, #16]
 8005f3a:	4b08      	ldr	r3, [pc, #32]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f3c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f4a:	4a04      	ldr	r2, [pc, #16]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f4c:	430b      	orrs	r3, r1
 8005f4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f50:	e00e      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005f5a:	e009      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005f5c:	58024400 	.word	0x58024400
 8005f60:	58024800 	.word	0x58024800
 8005f64:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f002 0301 	and.w	r3, r2, #1
 8005f7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f80:	2300      	movs	r3, #0
 8005f82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	f000 8089 	beq.w	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f98:	2b28      	cmp	r3, #40	@ 0x28
 8005f9a:	d86b      	bhi.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa2:	bf00      	nop
 8005fa4:	0800607d 	.word	0x0800607d
 8005fa8:	08006075 	.word	0x08006075
 8005fac:	08006075 	.word	0x08006075
 8005fb0:	08006075 	.word	0x08006075
 8005fb4:	08006075 	.word	0x08006075
 8005fb8:	08006075 	.word	0x08006075
 8005fbc:	08006075 	.word	0x08006075
 8005fc0:	08006075 	.word	0x08006075
 8005fc4:	08006049 	.word	0x08006049
 8005fc8:	08006075 	.word	0x08006075
 8005fcc:	08006075 	.word	0x08006075
 8005fd0:	08006075 	.word	0x08006075
 8005fd4:	08006075 	.word	0x08006075
 8005fd8:	08006075 	.word	0x08006075
 8005fdc:	08006075 	.word	0x08006075
 8005fe0:	08006075 	.word	0x08006075
 8005fe4:	0800605f 	.word	0x0800605f
 8005fe8:	08006075 	.word	0x08006075
 8005fec:	08006075 	.word	0x08006075
 8005ff0:	08006075 	.word	0x08006075
 8005ff4:	08006075 	.word	0x08006075
 8005ff8:	08006075 	.word	0x08006075
 8005ffc:	08006075 	.word	0x08006075
 8006000:	08006075 	.word	0x08006075
 8006004:	0800607d 	.word	0x0800607d
 8006008:	08006075 	.word	0x08006075
 800600c:	08006075 	.word	0x08006075
 8006010:	08006075 	.word	0x08006075
 8006014:	08006075 	.word	0x08006075
 8006018:	08006075 	.word	0x08006075
 800601c:	08006075 	.word	0x08006075
 8006020:	08006075 	.word	0x08006075
 8006024:	0800607d 	.word	0x0800607d
 8006028:	08006075 	.word	0x08006075
 800602c:	08006075 	.word	0x08006075
 8006030:	08006075 	.word	0x08006075
 8006034:	08006075 	.word	0x08006075
 8006038:	08006075 	.word	0x08006075
 800603c:	08006075 	.word	0x08006075
 8006040:	08006075 	.word	0x08006075
 8006044:	0800607d 	.word	0x0800607d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604c:	3308      	adds	r3, #8
 800604e:	2101      	movs	r1, #1
 8006050:	4618      	mov	r0, r3
 8006052:	f001 fe95 	bl	8007d80 <RCCEx_PLL2_Config>
 8006056:	4603      	mov	r3, r0
 8006058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800605c:	e00f      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800605e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006062:	3328      	adds	r3, #40	@ 0x28
 8006064:	2101      	movs	r1, #1
 8006066:	4618      	mov	r0, r3
 8006068:	f001 ff3c 	bl	8007ee4 <RCCEx_PLL3_Config>
 800606c:	4603      	mov	r3, r0
 800606e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006072:	e004      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800607a:	e000      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800607c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800607e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10a      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006086:	4bbf      	ldr	r3, [pc, #764]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800608a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800608e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006092:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006094:	4abb      	ldr	r2, [pc, #748]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006096:	430b      	orrs	r3, r1
 8006098:	6553      	str	r3, [r2, #84]	@ 0x54
 800609a:	e003      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80060a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ac:	f002 0302 	and.w	r3, r2, #2
 80060b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060b4:	2300      	movs	r3, #0
 80060b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80060ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80060be:	460b      	mov	r3, r1
 80060c0:	4313      	orrs	r3, r2
 80060c2:	d041      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80060c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060ca:	2b05      	cmp	r3, #5
 80060cc:	d824      	bhi.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80060ce:	a201      	add	r2, pc, #4	@ (adr r2, 80060d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80060d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d4:	08006121 	.word	0x08006121
 80060d8:	080060ed 	.word	0x080060ed
 80060dc:	08006103 	.word	0x08006103
 80060e0:	08006121 	.word	0x08006121
 80060e4:	08006121 	.word	0x08006121
 80060e8:	08006121 	.word	0x08006121
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f0:	3308      	adds	r3, #8
 80060f2:	2101      	movs	r1, #1
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 fe43 	bl	8007d80 <RCCEx_PLL2_Config>
 80060fa:	4603      	mov	r3, r0
 80060fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006100:	e00f      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006106:	3328      	adds	r3, #40	@ 0x28
 8006108:	2101      	movs	r1, #1
 800610a:	4618      	mov	r0, r3
 800610c:	f001 feea 	bl	8007ee4 <RCCEx_PLL3_Config>
 8006110:	4603      	mov	r3, r0
 8006112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006116:	e004      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800611e:	e000      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10a      	bne.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800612a:	4b96      	ldr	r3, [pc, #600]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800612c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800612e:	f023 0107 	bic.w	r1, r3, #7
 8006132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006136:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006138:	4a92      	ldr	r2, [pc, #584]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800613a:	430b      	orrs	r3, r1
 800613c:	6553      	str	r3, [r2, #84]	@ 0x54
 800613e:	e003      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006140:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006144:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	f002 0304 	and.w	r3, r2, #4
 8006154:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006158:	2300      	movs	r3, #0
 800615a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800615e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006162:	460b      	mov	r3, r1
 8006164:	4313      	orrs	r3, r2
 8006166:	d044      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006170:	2b05      	cmp	r3, #5
 8006172:	d825      	bhi.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006174:	a201      	add	r2, pc, #4	@ (adr r2, 800617c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617a:	bf00      	nop
 800617c:	080061c9 	.word	0x080061c9
 8006180:	08006195 	.word	0x08006195
 8006184:	080061ab 	.word	0x080061ab
 8006188:	080061c9 	.word	0x080061c9
 800618c:	080061c9 	.word	0x080061c9
 8006190:	080061c9 	.word	0x080061c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006198:	3308      	adds	r3, #8
 800619a:	2101      	movs	r1, #1
 800619c:	4618      	mov	r0, r3
 800619e:	f001 fdef 	bl	8007d80 <RCCEx_PLL2_Config>
 80061a2:	4603      	mov	r3, r0
 80061a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80061a8:	e00f      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ae:	3328      	adds	r3, #40	@ 0x28
 80061b0:	2101      	movs	r1, #1
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 fe96 	bl	8007ee4 <RCCEx_PLL3_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80061be:	e004      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061c6:	e000      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80061c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10b      	bne.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061d2:	4b6c      	ldr	r3, [pc, #432]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d6:	f023 0107 	bic.w	r1, r3, #7
 80061da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061e2:	4a68      	ldr	r2, [pc, #416]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061e4:	430b      	orrs	r3, r1
 80061e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80061e8:	e003      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	f002 0320 	and.w	r3, r2, #32
 80061fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006202:	2300      	movs	r3, #0
 8006204:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006208:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800620c:	460b      	mov	r3, r1
 800620e:	4313      	orrs	r3, r2
 8006210:	d055      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800621a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800621e:	d033      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006220:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006224:	d82c      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800622a:	d02f      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800622c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006230:	d826      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006232:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006236:	d02b      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006238:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800623c:	d820      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800623e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006242:	d012      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006244:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006248:	d81a      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800624a:	2b00      	cmp	r3, #0
 800624c:	d022      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800624e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006252:	d115      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006258:	3308      	adds	r3, #8
 800625a:	2100      	movs	r1, #0
 800625c:	4618      	mov	r0, r3
 800625e:	f001 fd8f 	bl	8007d80 <RCCEx_PLL2_Config>
 8006262:	4603      	mov	r3, r0
 8006264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006268:	e015      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626e:	3328      	adds	r3, #40	@ 0x28
 8006270:	2102      	movs	r1, #2
 8006272:	4618      	mov	r0, r3
 8006274:	f001 fe36 	bl	8007ee4 <RCCEx_PLL3_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800627e:	e00a      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006286:	e006      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006288:	bf00      	nop
 800628a:	e004      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800628c:	bf00      	nop
 800628e:	e002      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006290:	bf00      	nop
 8006292:	e000      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10b      	bne.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800629e:	4b39      	ldr	r3, [pc, #228]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80062a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ae:	4a35      	ldr	r2, [pc, #212]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062b0:	430b      	orrs	r3, r1
 80062b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80062b4:	e003      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80062be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80062ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062ce:	2300      	movs	r3, #0
 80062d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80062d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80062d8:	460b      	mov	r3, r1
 80062da:	4313      	orrs	r3, r2
 80062dc:	d058      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80062de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062e6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80062ea:	d033      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80062ec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80062f0:	d82c      	bhi.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f6:	d02f      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80062f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062fc:	d826      	bhi.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006302:	d02b      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006304:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006308:	d820      	bhi.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800630a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800630e:	d012      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006314:	d81a      	bhi.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006316:	2b00      	cmp	r3, #0
 8006318:	d022      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800631a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800631e:	d115      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006324:	3308      	adds	r3, #8
 8006326:	2100      	movs	r1, #0
 8006328:	4618      	mov	r0, r3
 800632a:	f001 fd29 	bl	8007d80 <RCCEx_PLL2_Config>
 800632e:	4603      	mov	r3, r0
 8006330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006334:	e015      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633a:	3328      	adds	r3, #40	@ 0x28
 800633c:	2102      	movs	r1, #2
 800633e:	4618      	mov	r0, r3
 8006340:	f001 fdd0 	bl	8007ee4 <RCCEx_PLL3_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800634a:	e00a      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006352:	e006      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006354:	bf00      	nop
 8006356:	e004      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006358:	bf00      	nop
 800635a:	e002      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800635c:	bf00      	nop
 800635e:	e000      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006362:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10e      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800636a:	4b06      	ldr	r3, [pc, #24]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800636c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006376:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800637a:	4a02      	ldr	r2, [pc, #8]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800637c:	430b      	orrs	r3, r1
 800637e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006380:	e006      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006382:	bf00      	nop
 8006384:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800638c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800639c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063a0:	2300      	movs	r3, #0
 80063a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80063aa:	460b      	mov	r3, r1
 80063ac:	4313      	orrs	r3, r2
 80063ae:	d055      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80063b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063b8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80063bc:	d033      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80063be:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80063c2:	d82c      	bhi.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063c8:	d02f      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80063ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ce:	d826      	bhi.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063d0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80063d4:	d02b      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80063d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80063da:	d820      	bhi.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063e0:	d012      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80063e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063e6:	d81a      	bhi.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d022      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80063ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f0:	d115      	bne.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f6:	3308      	adds	r3, #8
 80063f8:	2100      	movs	r1, #0
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 fcc0 	bl	8007d80 <RCCEx_PLL2_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006406:	e015      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800640c:	3328      	adds	r3, #40	@ 0x28
 800640e:	2102      	movs	r1, #2
 8006410:	4618      	mov	r0, r3
 8006412:	f001 fd67 	bl	8007ee4 <RCCEx_PLL3_Config>
 8006416:	4603      	mov	r3, r0
 8006418:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800641c:	e00a      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006424:	e006      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006426:	bf00      	nop
 8006428:	e004      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800642a:	bf00      	nop
 800642c:	e002      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800642e:	bf00      	nop
 8006430:	e000      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006432:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10b      	bne.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800643c:	4ba1      	ldr	r3, [pc, #644]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800643e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006440:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006448:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800644c:	4a9d      	ldr	r2, [pc, #628]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800644e:	430b      	orrs	r3, r1
 8006450:	6593      	str	r3, [r2, #88]	@ 0x58
 8006452:	e003      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006458:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800645c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006464:	f002 0308 	and.w	r3, r2, #8
 8006468:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800646c:	2300      	movs	r3, #0
 800646e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006472:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006476:	460b      	mov	r3, r1
 8006478:	4313      	orrs	r3, r2
 800647a:	d01e      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800647c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006480:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006484:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006488:	d10c      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648e:	3328      	adds	r3, #40	@ 0x28
 8006490:	2102      	movs	r1, #2
 8006492:	4618      	mov	r0, r3
 8006494:	f001 fd26 	bl	8007ee4 <RCCEx_PLL3_Config>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80064a4:	4b87      	ldr	r3, [pc, #540]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064b4:	4a83      	ldr	r2, [pc, #524]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064b6:	430b      	orrs	r3, r1
 80064b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c2:	f002 0310 	and.w	r3, r2, #16
 80064c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064ca:	2300      	movs	r3, #0
 80064cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80064d4:	460b      	mov	r3, r1
 80064d6:	4313      	orrs	r3, r2
 80064d8:	d01e      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80064da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064e6:	d10c      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ec:	3328      	adds	r3, #40	@ 0x28
 80064ee:	2102      	movs	r1, #2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f001 fcf7 	bl	8007ee4 <RCCEx_PLL3_Config>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006502:	4b70      	ldr	r3, [pc, #448]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006506:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800650a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006512:	4a6c      	ldr	r2, [pc, #432]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006514:	430b      	orrs	r3, r1
 8006516:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006520:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006524:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006528:	2300      	movs	r3, #0
 800652a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800652e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006532:	460b      	mov	r3, r1
 8006534:	4313      	orrs	r3, r2
 8006536:	d03e      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006540:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006544:	d022      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006546:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800654a:	d81b      	bhi.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006554:	d00b      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006556:	e015      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655c:	3308      	adds	r3, #8
 800655e:	2100      	movs	r1, #0
 8006560:	4618      	mov	r0, r3
 8006562:	f001 fc0d 	bl	8007d80 <RCCEx_PLL2_Config>
 8006566:	4603      	mov	r3, r0
 8006568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800656c:	e00f      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800656e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006572:	3328      	adds	r3, #40	@ 0x28
 8006574:	2102      	movs	r1, #2
 8006576:	4618      	mov	r0, r3
 8006578:	f001 fcb4 	bl	8007ee4 <RCCEx_PLL3_Config>
 800657c:	4603      	mov	r3, r0
 800657e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006582:	e004      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800658a:	e000      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800658c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800658e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10b      	bne.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006596:	4b4b      	ldr	r3, [pc, #300]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800659a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800659e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80065a6:	4a47      	ldr	r2, [pc, #284]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065a8:	430b      	orrs	r3, r1
 80065aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80065ac:	e003      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80065b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80065c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065c4:	2300      	movs	r3, #0
 80065c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80065c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80065cc:	460b      	mov	r3, r1
 80065ce:	4313      	orrs	r3, r2
 80065d0:	d03b      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065de:	d01f      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80065e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065e4:	d818      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80065e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065ea:	d003      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80065ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065f0:	d007      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80065f2:	e011      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f4:	4b33      	ldr	r3, [pc, #204]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f8:	4a32      	ldr	r2, [pc, #200]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006600:	e00f      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006606:	3328      	adds	r3, #40	@ 0x28
 8006608:	2101      	movs	r1, #1
 800660a:	4618      	mov	r0, r3
 800660c:	f001 fc6a 	bl	8007ee4 <RCCEx_PLL3_Config>
 8006610:	4603      	mov	r3, r0
 8006612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006616:	e004      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800661e:	e000      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10b      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800662a:	4b26      	ldr	r3, [pc, #152]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800662c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800663a:	4a22      	ldr	r2, [pc, #136]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800663c:	430b      	orrs	r3, r1
 800663e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006640:	e003      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800664a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006656:	673b      	str	r3, [r7, #112]	@ 0x70
 8006658:	2300      	movs	r3, #0
 800665a:	677b      	str	r3, [r7, #116]	@ 0x74
 800665c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006660:	460b      	mov	r3, r1
 8006662:	4313      	orrs	r3, r2
 8006664:	d034      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006674:	d007      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006676:	e011      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006678:	4b12      	ldr	r3, [pc, #72]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800667a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667c:	4a11      	ldr	r2, [pc, #68]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800667e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006682:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006684:	e00e      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668a:	3308      	adds	r3, #8
 800668c:	2102      	movs	r1, #2
 800668e:	4618      	mov	r0, r3
 8006690:	f001 fb76 	bl	8007d80 <RCCEx_PLL2_Config>
 8006694:	4603      	mov	r3, r0
 8006696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800669a:	e003      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10d      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80066ac:	4b05      	ldr	r3, [pc, #20]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80066b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ba:	4a02      	ldr	r2, [pc, #8]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066bc:	430b      	orrs	r3, r1
 80066be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80066c0:	e006      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80066c2:	bf00      	nop
 80066c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80066dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066de:	2300      	movs	r3, #0
 80066e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80066e6:	460b      	mov	r3, r1
 80066e8:	4313      	orrs	r3, r2
 80066ea:	d00c      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f0:	3328      	adds	r3, #40	@ 0x28
 80066f2:	2102      	movs	r1, #2
 80066f4:	4618      	mov	r0, r3
 80066f6:	f001 fbf5 	bl	8007ee4 <RCCEx_PLL3_Config>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006712:	663b      	str	r3, [r7, #96]	@ 0x60
 8006714:	2300      	movs	r3, #0
 8006716:	667b      	str	r3, [r7, #100]	@ 0x64
 8006718:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800671c:	460b      	mov	r3, r1
 800671e:	4313      	orrs	r3, r2
 8006720:	d038      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800672a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800672e:	d018      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006730:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006734:	d811      	bhi.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006736:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800673a:	d014      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800673c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006740:	d80b      	bhi.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006742:	2b00      	cmp	r3, #0
 8006744:	d011      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006746:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800674a:	d106      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800674c:	4bc3      	ldr	r3, [pc, #780]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800674e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006750:	4ac2      	ldr	r2, [pc, #776]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006756:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006758:	e008      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006760:	e004      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006762:	bf00      	nop
 8006764:	e002      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006766:	bf00      	nop
 8006768:	e000      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800676a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800676c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10b      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006774:	4bb9      	ldr	r3, [pc, #740]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006778:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800677c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006784:	4ab5      	ldr	r2, [pc, #724]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006786:	430b      	orrs	r3, r1
 8006788:	6553      	str	r3, [r2, #84]	@ 0x54
 800678a:	e003      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006790:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80067a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067a2:	2300      	movs	r3, #0
 80067a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80067aa:	460b      	mov	r3, r1
 80067ac:	4313      	orrs	r3, r2
 80067ae:	d009      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80067b0:	4baa      	ldr	r3, [pc, #680]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80067b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067be:	4aa7      	ldr	r2, [pc, #668]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067c0:	430b      	orrs	r3, r1
 80067c2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80067c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80067d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80067d2:	2300      	movs	r3, #0
 80067d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80067d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80067da:	460b      	mov	r3, r1
 80067dc:	4313      	orrs	r3, r2
 80067de:	d00a      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80067e0:	4b9e      	ldr	r3, [pc, #632]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80067e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80067f0:	4a9a      	ldr	r2, [pc, #616]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067f2:	430b      	orrs	r3, r1
 80067f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006802:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006804:	2300      	movs	r3, #0
 8006806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006808:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800680c:	460b      	mov	r3, r1
 800680e:	4313      	orrs	r3, r2
 8006810:	d009      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006812:	4b92      	ldr	r3, [pc, #584]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006816:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800681a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006820:	4a8e      	ldr	r2, [pc, #568]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006822:	430b      	orrs	r3, r1
 8006824:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006832:	643b      	str	r3, [r7, #64]	@ 0x40
 8006834:	2300      	movs	r3, #0
 8006836:	647b      	str	r3, [r7, #68]	@ 0x44
 8006838:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800683c:	460b      	mov	r3, r1
 800683e:	4313      	orrs	r3, r2
 8006840:	d00e      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006842:	4b86      	ldr	r3, [pc, #536]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	4a85      	ldr	r2, [pc, #532]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006848:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800684c:	6113      	str	r3, [r2, #16]
 800684e:	4b83      	ldr	r3, [pc, #524]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006850:	6919      	ldr	r1, [r3, #16]
 8006852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006856:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800685a:	4a80      	ldr	r2, [pc, #512]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800685c:	430b      	orrs	r3, r1
 800685e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800686c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800686e:	2300      	movs	r3, #0
 8006870:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006872:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006876:	460b      	mov	r3, r1
 8006878:	4313      	orrs	r3, r2
 800687a:	d009      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800687c:	4b77      	ldr	r3, [pc, #476]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800687e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006880:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800688a:	4a74      	ldr	r2, [pc, #464]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800688c:	430b      	orrs	r3, r1
 800688e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800689c:	633b      	str	r3, [r7, #48]	@ 0x30
 800689e:	2300      	movs	r3, #0
 80068a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80068a6:	460b      	mov	r3, r1
 80068a8:	4313      	orrs	r3, r2
 80068aa:	d00a      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068ac:	4b6b      	ldr	r3, [pc, #428]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80068b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068bc:	4a67      	ldr	r2, [pc, #412]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068be:	430b      	orrs	r3, r1
 80068c0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	2100      	movs	r1, #0
 80068cc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80068d8:	460b      	mov	r3, r1
 80068da:	4313      	orrs	r3, r2
 80068dc:	d011      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e2:	3308      	adds	r3, #8
 80068e4:	2100      	movs	r1, #0
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 fa4a 	bl	8007d80 <RCCEx_PLL2_Config>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690a:	2100      	movs	r1, #0
 800690c:	6239      	str	r1, [r7, #32]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	627b      	str	r3, [r7, #36]	@ 0x24
 8006914:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006918:	460b      	mov	r3, r1
 800691a:	4313      	orrs	r3, r2
 800691c:	d011      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800691e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006922:	3308      	adds	r3, #8
 8006924:	2101      	movs	r1, #1
 8006926:	4618      	mov	r0, r3
 8006928:	f001 fa2a 	bl	8007d80 <RCCEx_PLL2_Config>
 800692c:	4603      	mov	r3, r0
 800692e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800693e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	2100      	movs	r1, #0
 800694c:	61b9      	str	r1, [r7, #24]
 800694e:	f003 0304 	and.w	r3, r3, #4
 8006952:	61fb      	str	r3, [r7, #28]
 8006954:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006958:	460b      	mov	r3, r1
 800695a:	4313      	orrs	r3, r2
 800695c:	d011      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800695e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006962:	3308      	adds	r3, #8
 8006964:	2102      	movs	r1, #2
 8006966:	4618      	mov	r0, r3
 8006968:	f001 fa0a 	bl	8007d80 <RCCEx_PLL2_Config>
 800696c:	4603      	mov	r3, r0
 800696e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800697e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698a:	2100      	movs	r1, #0
 800698c:	6139      	str	r1, [r7, #16]
 800698e:	f003 0308 	and.w	r3, r3, #8
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006998:	460b      	mov	r3, r1
 800699a:	4313      	orrs	r3, r2
 800699c:	d011      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800699e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a2:	3328      	adds	r3, #40	@ 0x28
 80069a4:	2100      	movs	r1, #0
 80069a6:	4618      	mov	r0, r3
 80069a8:	f001 fa9c 	bl	8007ee4 <RCCEx_PLL3_Config>
 80069ac:	4603      	mov	r3, r0
 80069ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80069b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80069c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	2100      	movs	r1, #0
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	f003 0310 	and.w	r3, r3, #16
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80069d8:	460b      	mov	r3, r1
 80069da:	4313      	orrs	r3, r2
 80069dc:	d011      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e2:	3328      	adds	r3, #40	@ 0x28
 80069e4:	2101      	movs	r1, #1
 80069e6:	4618      	mov	r0, r3
 80069e8:	f001 fa7c 	bl	8007ee4 <RCCEx_PLL3_Config>
 80069ec:	4603      	mov	r3, r0
 80069ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	6039      	str	r1, [r7, #0]
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	607b      	str	r3, [r7, #4]
 8006a14:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	d011      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a22:	3328      	adds	r3, #40	@ 0x28
 8006a24:	2102      	movs	r1, #2
 8006a26:	4618      	mov	r0, r3
 8006a28:	f001 fa5c 	bl	8007ee4 <RCCEx_PLL3_Config>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006a42:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e000      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006a56:	46bd      	mov	sp, r7
 8006a58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a5c:	58024400 	.word	0x58024400

08006a60 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b090      	sub	sp, #64	@ 0x40
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a6e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006a72:	430b      	orrs	r3, r1
 8006a74:	f040 8094 	bne.w	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006a78:	4b9e      	ldr	r3, [pc, #632]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a7c:	f003 0307 	and.w	r3, r3, #7
 8006a80:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	f200 8087 	bhi.w	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a90:	08006aa5 	.word	0x08006aa5
 8006a94:	08006acd 	.word	0x08006acd
 8006a98:	08006af5 	.word	0x08006af5
 8006a9c:	08006b91 	.word	0x08006b91
 8006aa0:	08006b1d 	.word	0x08006b1d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006aa4:	4b93      	ldr	r3, [pc, #588]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ab0:	d108      	bne.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 f810 	bl	8007adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ac0:	f000 bd45 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ac8:	f000 bd41 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006acc:	4b89      	ldr	r3, [pc, #548]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ad4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ad8:	d108      	bne.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ada:	f107 0318 	add.w	r3, r7, #24
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 fd54 	bl	800758c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ae8:	f000 bd31 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006af0:	f000 bd2d 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006af4:	4b7f      	ldr	r3, [pc, #508]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006afc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b00:	d108      	bne.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b02:	f107 030c 	add.w	r3, r7, #12
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fe94 	bl	8007834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b10:	f000 bd1d 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b18:	f000 bd19 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b1c:	4b75      	ldr	r3, [pc, #468]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006b24:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b26:	4b73      	ldr	r3, [pc, #460]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0304 	and.w	r3, r3, #4
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d10c      	bne.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d109      	bne.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b38:	4b6e      	ldr	r3, [pc, #440]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	08db      	lsrs	r3, r3, #3
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	4a6d      	ldr	r2, [pc, #436]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006b44:	fa22 f303 	lsr.w	r3, r2, r3
 8006b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b4a:	e01f      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b4c:	4b69      	ldr	r3, [pc, #420]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b58:	d106      	bne.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b60:	d102      	bne.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b62:	4b66      	ldr	r3, [pc, #408]	@ (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b66:	e011      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b68:	4b62      	ldr	r3, [pc, #392]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b74:	d106      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b7c:	d102      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b7e:	4b60      	ldr	r3, [pc, #384]	@ (8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b82:	e003      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006b88:	f000 bce1 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b8c:	f000 bcdf 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b90:	4b5c      	ldr	r3, [pc, #368]	@ (8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b94:	f000 bcdb 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b9c:	f000 bcd7 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ba4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	f040 80ad 	bne.w	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006bae:	4b51      	ldr	r3, [pc, #324]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bb2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006bb6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bbe:	d056      	beq.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bc6:	f200 8090 	bhi.w	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bce:	f000 8088 	beq.w	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd4:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bd6:	f200 8088 	bhi.w	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bdc:	2b80      	cmp	r3, #128	@ 0x80
 8006bde:	d032      	beq.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be2:	2b80      	cmp	r3, #128	@ 0x80
 8006be4:	f200 8081 	bhi.w	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf0:	2b40      	cmp	r3, #64	@ 0x40
 8006bf2:	d014      	beq.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006bf4:	e079      	b.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bf6:	4b3f      	ldr	r3, [pc, #252]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c02:	d108      	bne.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 ff67 	bl	8007adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c12:	f000 bc9c 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c1a:	f000 bc98 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c1e:	4b35      	ldr	r3, [pc, #212]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c2a:	d108      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c2c:	f107 0318 	add.w	r3, r7, #24
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 fcab 	bl	800758c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c3a:	f000 bc88 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c42:	f000 bc84 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c46:	4b2b      	ldr	r3, [pc, #172]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c52:	d108      	bne.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c54:	f107 030c 	add.w	r3, r7, #12
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 fdeb 	bl	8007834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c62:	f000 bc74 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c66:	2300      	movs	r3, #0
 8006c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c6a:	f000 bc70 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c6e:	4b21      	ldr	r3, [pc, #132]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c76:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c78:	4b1e      	ldr	r3, [pc, #120]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d10c      	bne.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d109      	bne.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	08db      	lsrs	r3, r3, #3
 8006c90:	f003 0303 	and.w	r3, r3, #3
 8006c94:	4a18      	ldr	r2, [pc, #96]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006c96:	fa22 f303 	lsr.w	r3, r2, r3
 8006c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c9c:	e01f      	b.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c9e:	4b15      	ldr	r3, [pc, #84]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006caa:	d106      	bne.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cb2:	d102      	bne.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006cb4:	4b11      	ldr	r3, [pc, #68]	@ (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cb8:	e011      	b.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cba:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cc6:	d106      	bne.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cce:	d102      	bne.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cd4:	e003      	b.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006cda:	f000 bc38 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006cde:	f000 bc36 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ce2:	4b08      	ldr	r3, [pc, #32]	@ (8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ce6:	f000 bc32 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cee:	f000 bc2e 	b.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006cf2:	bf00      	nop
 8006cf4:	58024400 	.word	0x58024400
 8006cf8:	03d09000 	.word	0x03d09000
 8006cfc:	003d0900 	.word	0x003d0900
 8006d00:	017d7840 	.word	0x017d7840
 8006d04:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d0c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006d10:	430b      	orrs	r3, r1
 8006d12:	f040 809c 	bne.w	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006d16:	4b9e      	ldr	r3, [pc, #632]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d1a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006d1e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d26:	d054      	beq.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d2e:	f200 808b 	bhi.w	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d34:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006d38:	f000 8083 	beq.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006d42:	f200 8081 	bhi.w	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d4c:	d02f      	beq.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d54:	d878      	bhi.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d004      	beq.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d62:	d012      	beq.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006d64:	e070      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d66:	4b8a      	ldr	r3, [pc, #552]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d72:	d107      	bne.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 feaf 	bl	8007adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d82:	e3e4      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d84:	2300      	movs	r3, #0
 8006d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d88:	e3e1      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d8a:	4b81      	ldr	r3, [pc, #516]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d96:	d107      	bne.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d98:	f107 0318 	add.w	r3, r7, #24
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 fbf5 	bl	800758c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006da6:	e3d2      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006da8:	2300      	movs	r3, #0
 8006daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dac:	e3cf      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dae:	4b78      	ldr	r3, [pc, #480]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006db6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dba:	d107      	bne.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dbc:	f107 030c 	add.w	r3, r7, #12
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 fd37 	bl	8007834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dca:	e3c0      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dd0:	e3bd      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006dd2:	4b6f      	ldr	r3, [pc, #444]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006dda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b04      	cmp	r3, #4
 8006de6:	d10c      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d109      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dee:	4b68      	ldr	r3, [pc, #416]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	08db      	lsrs	r3, r3, #3
 8006df4:	f003 0303 	and.w	r3, r3, #3
 8006df8:	4a66      	ldr	r2, [pc, #408]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8006dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e00:	e01e      	b.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e02:	4b63      	ldr	r3, [pc, #396]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e0e:	d106      	bne.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e16:	d102      	bne.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e18:	4b5f      	ldr	r3, [pc, #380]	@ (8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e1c:	e010      	b.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e1e:	4b5c      	ldr	r3, [pc, #368]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e2a:	d106      	bne.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e32:	d102      	bne.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e34:	4b59      	ldr	r3, [pc, #356]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e38:	e002      	b.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006e3e:	e386      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e40:	e385      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e42:	4b57      	ldr	r3, [pc, #348]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e46:	e382      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e4c:	e37f      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e52:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006e56:	430b      	orrs	r3, r1
 8006e58:	f040 80a7 	bne.w	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006e5c:	4b4c      	ldr	r3, [pc, #304]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e60:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006e64:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e6c:	d055      	beq.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e74:	f200 8096 	bhi.w	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e7e:	f000 8084 	beq.w	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e88:	f200 808c 	bhi.w	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e92:	d030      	beq.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e9a:	f200 8083 	bhi.w	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d004      	beq.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006eaa:	d012      	beq.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006eac:	e07a      	b.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006eae:	4b38      	ldr	r3, [pc, #224]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006eba:	d107      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ebc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 fe0b 	bl	8007adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eca:	e340      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ed0:	e33d      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ede:	d107      	bne.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ee0:	f107 0318 	add.w	r3, r7, #24
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 fb51 	bl	800758c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eee:	e32e      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ef4:	e32b      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ef6:	4b26      	ldr	r3, [pc, #152]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006efe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f02:	d107      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f04:	f107 030c 	add.w	r3, r7, #12
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 fc93 	bl	8007834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f12:	e31c      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f18:	e319      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006f22:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f24:	4b1a      	ldr	r3, [pc, #104]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0304 	and.w	r3, r3, #4
 8006f2c:	2b04      	cmp	r3, #4
 8006f2e:	d10c      	bne.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d109      	bne.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f36:	4b16      	ldr	r3, [pc, #88]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	08db      	lsrs	r3, r3, #3
 8006f3c:	f003 0303 	and.w	r3, r3, #3
 8006f40:	4a14      	ldr	r2, [pc, #80]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006f42:	fa22 f303 	lsr.w	r3, r2, r3
 8006f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f48:	e01e      	b.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f4a:	4b11      	ldr	r3, [pc, #68]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f56:	d106      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f5e:	d102      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f60:	4b0d      	ldr	r3, [pc, #52]	@ (8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f64:	e010      	b.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f66:	4b0a      	ldr	r3, [pc, #40]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f72:	d106      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f7a:	d102      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f7c:	4b07      	ldr	r3, [pc, #28]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f80:	e002      	b.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f86:	e2e2      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f88:	e2e1      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f8a:	4b05      	ldr	r3, [pc, #20]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f8e:	e2de      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f90:	58024400 	.word	0x58024400
 8006f94:	03d09000 	.word	0x03d09000
 8006f98:	003d0900 	.word	0x003d0900
 8006f9c:	017d7840 	.word	0x017d7840
 8006fa0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fa8:	e2d1      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fae:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006fb2:	430b      	orrs	r3, r1
 8006fb4:	f040 809c 	bne.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006fb8:	4b93      	ldr	r3, [pc, #588]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fbc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006fc0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fc8:	d054      	beq.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fd0:	f200 808b 	bhi.w	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fda:	f000 8083 	beq.w	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fe4:	f200 8081 	bhi.w	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fee:	d02f      	beq.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ff6:	d878      	bhi.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d004      	beq.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007000:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007004:	d012      	beq.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007006:	e070      	b.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007008:	4b7f      	ldr	r3, [pc, #508]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007010:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007014:	d107      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fd5e 	bl	8007adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007024:	e293      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800702a:	e290      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800702c:	4b76      	ldr	r3, [pc, #472]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007034:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007038:	d107      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800703a:	f107 0318 	add.w	r3, r7, #24
 800703e:	4618      	mov	r0, r3
 8007040:	f000 faa4 	bl	800758c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007048:	e281      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800704e:	e27e      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007050:	4b6d      	ldr	r3, [pc, #436]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800705c:	d107      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800705e:	f107 030c 	add.w	r3, r7, #12
 8007062:	4618      	mov	r0, r3
 8007064:	f000 fbe6 	bl	8007834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800706c:	e26f      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800706e:	2300      	movs	r3, #0
 8007070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007072:	e26c      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007074:	4b64      	ldr	r3, [pc, #400]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007078:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800707c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800707e:	4b62      	ldr	r3, [pc, #392]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0304 	and.w	r3, r3, #4
 8007086:	2b04      	cmp	r3, #4
 8007088:	d10c      	bne.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800708a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800708c:	2b00      	cmp	r3, #0
 800708e:	d109      	bne.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007090:	4b5d      	ldr	r3, [pc, #372]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	08db      	lsrs	r3, r3, #3
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	4a5c      	ldr	r2, [pc, #368]	@ (800720c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800709c:	fa22 f303 	lsr.w	r3, r2, r3
 80070a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070a2:	e01e      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070a4:	4b58      	ldr	r3, [pc, #352]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070b0:	d106      	bne.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80070b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070b8:	d102      	bne.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80070ba:	4b55      	ldr	r3, [pc, #340]	@ (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80070bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070be:	e010      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070c0:	4b51      	ldr	r3, [pc, #324]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070cc:	d106      	bne.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80070ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070d4:	d102      	bne.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80070d6:	4b4f      	ldr	r3, [pc, #316]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80070d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070da:	e002      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80070e0:	e235      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070e2:	e234      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80070e4:	4b4c      	ldr	r3, [pc, #304]	@ (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80070e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070e8:	e231      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80070ea:	2300      	movs	r3, #0
 80070ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070ee:	e22e      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80070f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80070f8:	430b      	orrs	r3, r1
 80070fa:	f040 808f 	bne.w	800721c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80070fe:	4b42      	ldr	r3, [pc, #264]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007102:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007106:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800710e:	d06b      	beq.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007112:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007116:	d874      	bhi.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800711e:	d056      	beq.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007122:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007126:	d86c      	bhi.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800712e:	d03b      	beq.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007132:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007136:	d864      	bhi.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800713e:	d021      	beq.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007142:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007146:	d85c      	bhi.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714a:	2b00      	cmp	r3, #0
 800714c:	d004      	beq.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800714e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007154:	d004      	beq.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007156:	e054      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007158:	f7fe fa20 	bl	800559c <HAL_RCC_GetPCLK1Freq>
 800715c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800715e:	e1f6      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007160:	4b29      	ldr	r3, [pc, #164]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007168:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800716c:	d107      	bne.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800716e:	f107 0318 	add.w	r3, r7, #24
 8007172:	4618      	mov	r0, r3
 8007174:	f000 fa0a 	bl	800758c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800717c:	e1e7      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800717e:	2300      	movs	r3, #0
 8007180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007182:	e1e4      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007184:	4b20      	ldr	r3, [pc, #128]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800718c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007190:	d107      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007192:	f107 030c 	add.w	r3, r7, #12
 8007196:	4618      	mov	r0, r3
 8007198:	f000 fb4c 	bl	8007834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071a0:	e1d5      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071a6:	e1d2      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071a8:	4b17      	ldr	r3, [pc, #92]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b04      	cmp	r3, #4
 80071b2:	d109      	bne.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071b4:	4b14      	ldr	r3, [pc, #80]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	08db      	lsrs	r3, r3, #3
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	4a13      	ldr	r2, [pc, #76]	@ (800720c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80071c0:	fa22 f303 	lsr.w	r3, r2, r3
 80071c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071c6:	e1c2      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071c8:	2300      	movs	r3, #0
 80071ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071cc:	e1bf      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80071ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071da:	d102      	bne.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80071dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80071de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071e0:	e1b5      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071e2:	2300      	movs	r3, #0
 80071e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071e6:	e1b2      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80071e8:	4b07      	ldr	r3, [pc, #28]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071f4:	d102      	bne.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80071f6:	4b07      	ldr	r3, [pc, #28]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80071f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071fa:	e1a8      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007200:	e1a5      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007202:	2300      	movs	r3, #0
 8007204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007206:	e1a2      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007208:	58024400 	.word	0x58024400
 800720c:	03d09000 	.word	0x03d09000
 8007210:	003d0900 	.word	0x003d0900
 8007214:	017d7840 	.word	0x017d7840
 8007218:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800721c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007220:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007224:	430b      	orrs	r3, r1
 8007226:	d173      	bne.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007228:	4b9c      	ldr	r3, [pc, #624]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800722a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800722c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007230:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007234:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007238:	d02f      	beq.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800723a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007240:	d863      	bhi.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007244:	2b00      	cmp	r3, #0
 8007246:	d004      	beq.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800724e:	d012      	beq.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007250:	e05b      	b.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007252:	4b92      	ldr	r3, [pc, #584]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800725a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800725e:	d107      	bne.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007260:	f107 0318 	add.w	r3, r7, #24
 8007264:	4618      	mov	r0, r3
 8007266:	f000 f991 	bl	800758c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800726e:	e16e      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007270:	2300      	movs	r3, #0
 8007272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007274:	e16b      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007276:	4b89      	ldr	r3, [pc, #548]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800727e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007282:	d107      	bne.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007284:	f107 030c 	add.w	r3, r7, #12
 8007288:	4618      	mov	r0, r3
 800728a:	f000 fad3 	bl	8007834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007292:	e15c      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007298:	e159      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800729a:	4b80      	ldr	r3, [pc, #512]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800729c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800729e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80072a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072a4:	4b7d      	ldr	r3, [pc, #500]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d10c      	bne.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80072b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d109      	bne.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072b6:	4b79      	ldr	r3, [pc, #484]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	08db      	lsrs	r3, r3, #3
 80072bc:	f003 0303 	and.w	r3, r3, #3
 80072c0:	4a77      	ldr	r2, [pc, #476]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80072c2:	fa22 f303 	lsr.w	r3, r2, r3
 80072c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072c8:	e01e      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072ca:	4b74      	ldr	r3, [pc, #464]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072d6:	d106      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80072d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072de:	d102      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80072e0:	4b70      	ldr	r3, [pc, #448]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80072e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072e4:	e010      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072e6:	4b6d      	ldr	r3, [pc, #436]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072f2:	d106      	bne.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80072f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072fa:	d102      	bne.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80072fc:	4b6a      	ldr	r3, [pc, #424]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80072fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007300:	e002      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007306:	e122      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007308:	e121      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800730a:	2300      	movs	r3, #0
 800730c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800730e:	e11e      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007314:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007318:	430b      	orrs	r3, r1
 800731a:	d133      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800731c:	4b5f      	ldr	r3, [pc, #380]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800731e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007324:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800732c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007332:	d012      	beq.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007334:	e023      	b.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007336:	4b59      	ldr	r3, [pc, #356]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800733e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007342:	d107      	bne.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007344:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007348:	4618      	mov	r0, r3
 800734a:	f000 fbc7 	bl	8007adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800734e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007352:	e0fc      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007358:	e0f9      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800735a:	4b50      	ldr	r3, [pc, #320]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007362:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007366:	d107      	bne.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007368:	f107 0318 	add.w	r3, r7, #24
 800736c:	4618      	mov	r0, r3
 800736e:	f000 f90d 	bl	800758c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007376:	e0ea      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007378:	2300      	movs	r3, #0
 800737a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800737c:	e0e7      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007382:	e0e4      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007388:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800738c:	430b      	orrs	r3, r1
 800738e:	f040 808d 	bne.w	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007392:	4b42      	ldr	r3, [pc, #264]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007396:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800739a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800739c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800739e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073a2:	d06b      	beq.n	800747c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80073a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073aa:	d874      	bhi.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80073ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073b2:	d056      	beq.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ba:	d86c      	bhi.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80073bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073c2:	d03b      	beq.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80073c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073ca:	d864      	bhi.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80073cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073d2:	d021      	beq.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80073d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073da:	d85c      	bhi.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80073dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d004      	beq.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80073e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073e8:	d004      	beq.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80073ea:	e054      	b.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80073ec:	f000 f8b8 	bl	8007560 <HAL_RCCEx_GetD3PCLK1Freq>
 80073f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80073f2:	e0ac      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073f4:	4b29      	ldr	r3, [pc, #164]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007400:	d107      	bne.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007402:	f107 0318 	add.w	r3, r7, #24
 8007406:	4618      	mov	r0, r3
 8007408:	f000 f8c0 	bl	800758c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007410:	e09d      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007412:	2300      	movs	r3, #0
 8007414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007416:	e09a      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007418:	4b20      	ldr	r3, [pc, #128]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007420:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007424:	d107      	bne.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007426:	f107 030c 	add.w	r3, r7, #12
 800742a:	4618      	mov	r0, r3
 800742c:	f000 fa02 	bl	8007834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007434:	e08b      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007436:	2300      	movs	r3, #0
 8007438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800743a:	e088      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800743c:	4b17      	ldr	r3, [pc, #92]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b04      	cmp	r3, #4
 8007446:	d109      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007448:	4b14      	ldr	r3, [pc, #80]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	08db      	lsrs	r3, r3, #3
 800744e:	f003 0303 	and.w	r3, r3, #3
 8007452:	4a13      	ldr	r2, [pc, #76]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007454:	fa22 f303 	lsr.w	r3, r2, r3
 8007458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800745a:	e078      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800745c:	2300      	movs	r3, #0
 800745e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007460:	e075      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007462:	4b0e      	ldr	r3, [pc, #56]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800746a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800746e:	d102      	bne.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007470:	4b0c      	ldr	r3, [pc, #48]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007474:	e06b      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007476:	2300      	movs	r3, #0
 8007478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800747a:	e068      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800747c:	4b07      	ldr	r3, [pc, #28]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007484:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007488:	d102      	bne.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800748a:	4b07      	ldr	r3, [pc, #28]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800748c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800748e:	e05e      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007494:	e05b      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800749a:	e058      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800749c:	58024400 	.word	0x58024400
 80074a0:	03d09000 	.word	0x03d09000
 80074a4:	003d0900 	.word	0x003d0900
 80074a8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80074ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074b0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80074b4:	430b      	orrs	r3, r1
 80074b6:	d148      	bne.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80074b8:	4b27      	ldr	r3, [pc, #156]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80074ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80074c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80074c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074c8:	d02a      	beq.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80074ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074d0:	d838      	bhi.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80074d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d004      	beq.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80074d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074de:	d00d      	beq.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80074e0:	e030      	b.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80074e2:	4b1d      	ldr	r3, [pc, #116]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074ee:	d102      	bne.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80074f0:	4b1a      	ldr	r3, [pc, #104]	@ (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80074f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074f4:	e02b      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074f6:	2300      	movs	r3, #0
 80074f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074fa:	e028      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80074fc:	4b16      	ldr	r3, [pc, #88]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007504:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007508:	d107      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800750a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800750e:	4618      	mov	r0, r3
 8007510:	f000 fae4 	bl	8007adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007518:	e019      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800751e:	e016      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007520:	4b0d      	ldr	r3, [pc, #52]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007528:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800752c:	d107      	bne.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800752e:	f107 0318 	add.w	r3, r7, #24
 8007532:	4618      	mov	r0, r3
 8007534:	f000 f82a 	bl	800758c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800753c:	e007      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800753e:	2300      	movs	r3, #0
 8007540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007542:	e004      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007544:	2300      	movs	r3, #0
 8007546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007548:	e001      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800754a:	2300      	movs	r3, #0
 800754c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800754e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007550:	4618      	mov	r0, r3
 8007552:	3740      	adds	r7, #64	@ 0x40
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	58024400 	.word	0x58024400
 800755c:	017d7840 	.word	0x017d7840

08007560 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007564:	f7fd ffea 	bl	800553c <HAL_RCC_GetHCLKFreq>
 8007568:	4602      	mov	r2, r0
 800756a:	4b06      	ldr	r3, [pc, #24]	@ (8007584 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	091b      	lsrs	r3, r3, #4
 8007570:	f003 0307 	and.w	r3, r3, #7
 8007574:	4904      	ldr	r1, [pc, #16]	@ (8007588 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007576:	5ccb      	ldrb	r3, [r1, r3]
 8007578:	f003 031f 	and.w	r3, r3, #31
 800757c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007580:	4618      	mov	r0, r3
 8007582:	bd80      	pop	{r7, pc}
 8007584:	58024400 	.word	0x58024400
 8007588:	08011dc8 	.word	0x08011dc8

0800758c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800758c:	b480      	push	{r7}
 800758e:	b089      	sub	sp, #36	@ 0x24
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007594:	4ba1      	ldr	r3, [pc, #644]	@ (800781c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007598:	f003 0303 	and.w	r3, r3, #3
 800759c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800759e:	4b9f      	ldr	r3, [pc, #636]	@ (800781c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a2:	0b1b      	lsrs	r3, r3, #12
 80075a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80075aa:	4b9c      	ldr	r3, [pc, #624]	@ (800781c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ae:	091b      	lsrs	r3, r3, #4
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80075b6:	4b99      	ldr	r3, [pc, #612]	@ (800781c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ba:	08db      	lsrs	r3, r3, #3
 80075bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	fb02 f303 	mul.w	r3, r2, r3
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 8111 	beq.w	80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b02      	cmp	r3, #2
 80075de:	f000 8083 	beq.w	80076e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	f200 80a1 	bhi.w	800772c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d003      	beq.n	80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d056      	beq.n	80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80075f6:	e099      	b.n	800772c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075f8:	4b88      	ldr	r3, [pc, #544]	@ (800781c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0320 	and.w	r3, r3, #32
 8007600:	2b00      	cmp	r3, #0
 8007602:	d02d      	beq.n	8007660 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007604:	4b85      	ldr	r3, [pc, #532]	@ (800781c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	08db      	lsrs	r3, r3, #3
 800760a:	f003 0303 	and.w	r3, r3, #3
 800760e:	4a84      	ldr	r2, [pc, #528]	@ (8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007610:	fa22 f303 	lsr.w	r3, r2, r3
 8007614:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	ee07 3a90 	vmov	s15, r3
 800761c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	ee07 3a90 	vmov	s15, r3
 8007626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800762e:	4b7b      	ldr	r3, [pc, #492]	@ (800781c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800763e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007642:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007824 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800764a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800764e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800765e:	e087      	b.n	8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007828 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800766e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007672:	4b6a      	ldr	r3, [pc, #424]	@ (800781c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007682:	ed97 6a03 	vldr	s12, [r7, #12]
 8007686:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007824 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800768a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076a2:	e065      	b.n	8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800782c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80076b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b6:	4b59      	ldr	r3, [pc, #356]	@ (800781c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007824 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076e6:	e043      	b.n	8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	ee07 3a90 	vmov	s15, r3
 80076ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007830 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80076f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076fa:	4b48      	ldr	r3, [pc, #288]	@ (800781c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770a:	ed97 6a03 	vldr	s12, [r7, #12]
 800770e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007824 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800771a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800771e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800772a:	e021      	b.n	8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	ee07 3a90 	vmov	s15, r3
 8007732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007736:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800782c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800773a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800773e:	4b37      	ldr	r3, [pc, #220]	@ (800781c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007752:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007824 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800775e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800776e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007770:	4b2a      	ldr	r3, [pc, #168]	@ (800781c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007774:	0a5b      	lsrs	r3, r3, #9
 8007776:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007782:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007786:	ee37 7a87 	vadd.f32	s14, s15, s14
 800778a:	edd7 6a07 	vldr	s13, [r7, #28]
 800778e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007796:	ee17 2a90 	vmov	r2, s15
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800779e:	4b1f      	ldr	r3, [pc, #124]	@ (800781c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a2:	0c1b      	lsrs	r3, r3, #16
 80077a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077a8:	ee07 3a90 	vmov	s15, r3
 80077ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80077bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077c4:	ee17 2a90 	vmov	r2, s15
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80077cc:	4b13      	ldr	r3, [pc, #76]	@ (800781c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d0:	0e1b      	lsrs	r3, r3, #24
 80077d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077d6:	ee07 3a90 	vmov	s15, r3
 80077da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077f2:	ee17 2a90 	vmov	r2, s15
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80077fa:	e008      	b.n	800780e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	609a      	str	r2, [r3, #8]
}
 800780e:	bf00      	nop
 8007810:	3724      	adds	r7, #36	@ 0x24
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	58024400 	.word	0x58024400
 8007820:	03d09000 	.word	0x03d09000
 8007824:	46000000 	.word	0x46000000
 8007828:	4c742400 	.word	0x4c742400
 800782c:	4a742400 	.word	0x4a742400
 8007830:	4bbebc20 	.word	0x4bbebc20

08007834 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007834:	b480      	push	{r7}
 8007836:	b089      	sub	sp, #36	@ 0x24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800783c:	4ba1      	ldr	r3, [pc, #644]	@ (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800783e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007840:	f003 0303 	and.w	r3, r3, #3
 8007844:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007846:	4b9f      	ldr	r3, [pc, #636]	@ (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800784a:	0d1b      	lsrs	r3, r3, #20
 800784c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007850:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007852:	4b9c      	ldr	r3, [pc, #624]	@ (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007856:	0a1b      	lsrs	r3, r3, #8
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800785e:	4b99      	ldr	r3, [pc, #612]	@ (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007862:	08db      	lsrs	r3, r3, #3
 8007864:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	fb02 f303 	mul.w	r3, r2, r3
 800786e:	ee07 3a90 	vmov	s15, r3
 8007872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007876:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 8111 	beq.w	8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	2b02      	cmp	r3, #2
 8007886:	f000 8083 	beq.w	8007990 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	2b02      	cmp	r3, #2
 800788e:	f200 80a1 	bhi.w	80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d056      	beq.n	800794c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800789e:	e099      	b.n	80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078a0:	4b88      	ldr	r3, [pc, #544]	@ (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d02d      	beq.n	8007908 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078ac:	4b85      	ldr	r3, [pc, #532]	@ (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	08db      	lsrs	r3, r3, #3
 80078b2:	f003 0303 	and.w	r3, r3, #3
 80078b6:	4a84      	ldr	r2, [pc, #528]	@ (8007ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80078b8:	fa22 f303 	lsr.w	r3, r2, r3
 80078bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	ee07 3a90 	vmov	s15, r3
 80078c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	ee07 3a90 	vmov	s15, r3
 80078ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d6:	4b7b      	ldr	r3, [pc, #492]	@ (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078de:	ee07 3a90 	vmov	s15, r3
 80078e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007acc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007902:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007906:	e087      	b.n	8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007912:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800791a:	4b6a      	ldr	r3, [pc, #424]	@ (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800791c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800791e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800792a:	ed97 6a03 	vldr	s12, [r7, #12]
 800792e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007acc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800793a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800793e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800794a:	e065      	b.n	8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007956:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800795a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795e:	4b59      	ldr	r3, [pc, #356]	@ (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007972:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007acc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800797a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800797e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800798e:	e043      	b.n	8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	ee07 3a90 	vmov	s15, r3
 8007996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800799e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a2:	4b48      	ldr	r3, [pc, #288]	@ (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079aa:	ee07 3a90 	vmov	s15, r3
 80079ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80079b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007acc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079d2:	e021      	b.n	8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	ee07 3a90 	vmov	s15, r3
 80079da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e6:	4b37      	ldr	r3, [pc, #220]	@ (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ee:	ee07 3a90 	vmov	s15, r3
 80079f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007acc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007a18:	4b2a      	ldr	r3, [pc, #168]	@ (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a1c:	0a5b      	lsrs	r3, r3, #9
 8007a1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a22:	ee07 3a90 	vmov	s15, r3
 8007a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a32:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a3e:	ee17 2a90 	vmov	r2, s15
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007a46:	4b1f      	ldr	r3, [pc, #124]	@ (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4a:	0c1b      	lsrs	r3, r3, #16
 8007a4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a50:	ee07 3a90 	vmov	s15, r3
 8007a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a60:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a6c:	ee17 2a90 	vmov	r2, s15
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007a74:	4b13      	ldr	r3, [pc, #76]	@ (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a78:	0e1b      	lsrs	r3, r3, #24
 8007a7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a7e:	ee07 3a90 	vmov	s15, r3
 8007a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a9a:	ee17 2a90 	vmov	r2, s15
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007aa2:	e008      	b.n	8007ab6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	609a      	str	r2, [r3, #8]
}
 8007ab6:	bf00      	nop
 8007ab8:	3724      	adds	r7, #36	@ 0x24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	58024400 	.word	0x58024400
 8007ac8:	03d09000 	.word	0x03d09000
 8007acc:	46000000 	.word	0x46000000
 8007ad0:	4c742400 	.word	0x4c742400
 8007ad4:	4a742400 	.word	0x4a742400
 8007ad8:	4bbebc20 	.word	0x4bbebc20

08007adc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b089      	sub	sp, #36	@ 0x24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ae4:	4ba0      	ldr	r3, [pc, #640]	@ (8007d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae8:	f003 0303 	and.w	r3, r3, #3
 8007aec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007aee:	4b9e      	ldr	r3, [pc, #632]	@ (8007d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af2:	091b      	lsrs	r3, r3, #4
 8007af4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007af8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007afa:	4b9b      	ldr	r3, [pc, #620]	@ (8007d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007b04:	4b98      	ldr	r3, [pc, #608]	@ (8007d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b08:	08db      	lsrs	r3, r3, #3
 8007b0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	fb02 f303 	mul.w	r3, r2, r3
 8007b14:	ee07 3a90 	vmov	s15, r3
 8007b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b1c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 8111 	beq.w	8007d4a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	f000 8083 	beq.w	8007c36 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	f200 80a1 	bhi.w	8007c7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d056      	beq.n	8007bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007b44:	e099      	b.n	8007c7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b46:	4b88      	ldr	r3, [pc, #544]	@ (8007d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0320 	and.w	r3, r3, #32
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d02d      	beq.n	8007bae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b52:	4b85      	ldr	r3, [pc, #532]	@ (8007d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	08db      	lsrs	r3, r3, #3
 8007b58:	f003 0303 	and.w	r3, r3, #3
 8007b5c:	4a83      	ldr	r2, [pc, #524]	@ (8007d6c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b62:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	ee07 3a90 	vmov	s15, r3
 8007b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	ee07 3a90 	vmov	s15, r3
 8007b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b7c:	4b7a      	ldr	r3, [pc, #488]	@ (8007d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b84:	ee07 3a90 	vmov	s15, r3
 8007b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b90:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007bac:	e087      	b.n	8007cbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	ee07 3a90 	vmov	s15, r3
 8007bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007d74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bc0:	4b69      	ldr	r3, [pc, #420]	@ (8007d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc8:	ee07 3a90 	vmov	s15, r3
 8007bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bd4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007bd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007be0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007be4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bf0:	e065      	b.n	8007cbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	ee07 3a90 	vmov	s15, r3
 8007bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007d78 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c04:	4b58      	ldr	r3, [pc, #352]	@ (8007d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c0c:	ee07 3a90 	vmov	s15, r3
 8007c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c14:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c18:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c34:	e043      	b.n	8007cbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	ee07 3a90 	vmov	s15, r3
 8007c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c40:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007d7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007c44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c48:	4b47      	ldr	r3, [pc, #284]	@ (8007d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c50:	ee07 3a90 	vmov	s15, r3
 8007c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c58:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c5c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c78:	e021      	b.n	8007cbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	ee07 3a90 	vmov	s15, r3
 8007c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c84:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007d74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007c88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c8c:	4b36      	ldr	r3, [pc, #216]	@ (8007d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c94:	ee07 3a90 	vmov	s15, r3
 8007c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ca0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cbc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8007d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cc2:	0a5b      	lsrs	r3, r3, #9
 8007cc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cc8:	ee07 3a90 	vmov	s15, r3
 8007ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ce4:	ee17 2a90 	vmov	r2, s15
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007cec:	4b1e      	ldr	r3, [pc, #120]	@ (8007d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf0:	0c1b      	lsrs	r3, r3, #16
 8007cf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cf6:	ee07 3a90 	vmov	s15, r3
 8007cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d12:	ee17 2a90 	vmov	r2, s15
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007d1a:	4b13      	ldr	r3, [pc, #76]	@ (8007d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1e:	0e1b      	lsrs	r3, r3, #24
 8007d20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d24:	ee07 3a90 	vmov	s15, r3
 8007d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d34:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d40:	ee17 2a90 	vmov	r2, s15
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007d48:	e008      	b.n	8007d5c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	609a      	str	r2, [r3, #8]
}
 8007d5c:	bf00      	nop
 8007d5e:	3724      	adds	r7, #36	@ 0x24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	58024400 	.word	0x58024400
 8007d6c:	03d09000 	.word	0x03d09000
 8007d70:	46000000 	.word	0x46000000
 8007d74:	4c742400 	.word	0x4c742400
 8007d78:	4a742400 	.word	0x4a742400
 8007d7c:	4bbebc20 	.word	0x4bbebc20

08007d80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d8e:	4b53      	ldr	r3, [pc, #332]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d92:	f003 0303 	and.w	r3, r3, #3
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d101      	bne.n	8007d9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e099      	b.n	8007ed2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007d9e:	4b4f      	ldr	r3, [pc, #316]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a4e      	ldr	r2, [pc, #312]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007da4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007daa:	f7f9 fe07 	bl	80019bc <HAL_GetTick>
 8007dae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007db0:	e008      	b.n	8007dc4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007db2:	f7f9 fe03 	bl	80019bc <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d901      	bls.n	8007dc4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e086      	b.n	8007ed2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007dc4:	4b45      	ldr	r3, [pc, #276]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1f0      	bne.n	8007db2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007dd0:	4b42      	ldr	r3, [pc, #264]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	031b      	lsls	r3, r3, #12
 8007dde:	493f      	ldr	r1, [pc, #252]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	628b      	str	r3, [r1, #40]	@ 0x28
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	3b01      	subs	r3, #1
 8007df4:	025b      	lsls	r3, r3, #9
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	041b      	lsls	r3, r3, #16
 8007e02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007e06:	431a      	orrs	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	061b      	lsls	r3, r3, #24
 8007e10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007e14:	4931      	ldr	r1, [pc, #196]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007e1a:	4b30      	ldr	r3, [pc, #192]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	492d      	ldr	r1, [pc, #180]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e30:	f023 0220 	bic.w	r2, r3, #32
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	4928      	ldr	r1, [pc, #160]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007e3e:	4b27      	ldr	r3, [pc, #156]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e42:	4a26      	ldr	r2, [pc, #152]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007e44:	f023 0310 	bic.w	r3, r3, #16
 8007e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e4a:	4b24      	ldr	r3, [pc, #144]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007e4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e4e:	4b24      	ldr	r3, [pc, #144]	@ (8007ee0 <RCCEx_PLL2_Config+0x160>)
 8007e50:	4013      	ands	r3, r2
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	69d2      	ldr	r2, [r2, #28]
 8007e56:	00d2      	lsls	r2, r2, #3
 8007e58:	4920      	ldr	r1, [pc, #128]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e62:	4a1e      	ldr	r2, [pc, #120]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007e64:	f043 0310 	orr.w	r3, r3, #16
 8007e68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d106      	bne.n	8007e7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007e70:	4b1a      	ldr	r3, [pc, #104]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e74:	4a19      	ldr	r2, [pc, #100]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007e76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e7c:	e00f      	b.n	8007e9e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d106      	bne.n	8007e92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007e84:	4b15      	ldr	r3, [pc, #84]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e88:	4a14      	ldr	r2, [pc, #80]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007e8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e90:	e005      	b.n	8007e9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007e92:	4b12      	ldr	r3, [pc, #72]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e96:	4a11      	ldr	r2, [pc, #68]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007e98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007e9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007ea4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ea8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eaa:	f7f9 fd87 	bl	80019bc <HAL_GetTick>
 8007eae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007eb0:	e008      	b.n	8007ec4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007eb2:	f7f9 fd83 	bl	80019bc <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d901      	bls.n	8007ec4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e006      	b.n	8007ed2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ec4:	4b05      	ldr	r3, [pc, #20]	@ (8007edc <RCCEx_PLL2_Config+0x15c>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d0f0      	beq.n	8007eb2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	58024400 	.word	0x58024400
 8007ee0:	ffff0007 	.word	0xffff0007

08007ee4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ef2:	4b53      	ldr	r3, [pc, #332]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef6:	f003 0303 	and.w	r3, r3, #3
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d101      	bne.n	8007f02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e099      	b.n	8008036 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007f02:	4b4f      	ldr	r3, [pc, #316]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a4e      	ldr	r2, [pc, #312]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007f08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f0e:	f7f9 fd55 	bl	80019bc <HAL_GetTick>
 8007f12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f14:	e008      	b.n	8007f28 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f16:	f7f9 fd51 	bl	80019bc <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d901      	bls.n	8007f28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e086      	b.n	8008036 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f28:	4b45      	ldr	r3, [pc, #276]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1f0      	bne.n	8007f16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007f34:	4b42      	ldr	r3, [pc, #264]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f38:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	051b      	lsls	r3, r3, #20
 8007f42:	493f      	ldr	r1, [pc, #252]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007f44:	4313      	orrs	r3, r2
 8007f46:	628b      	str	r3, [r1, #40]	@ 0x28
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	025b      	lsls	r3, r3, #9
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	431a      	orrs	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	3b01      	subs	r3, #1
 8007f64:	041b      	lsls	r3, r3, #16
 8007f66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	061b      	lsls	r3, r3, #24
 8007f74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007f78:	4931      	ldr	r1, [pc, #196]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007f7e:	4b30      	ldr	r3, [pc, #192]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	492d      	ldr	r1, [pc, #180]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007f90:	4b2b      	ldr	r3, [pc, #172]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f94:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	4928      	ldr	r1, [pc, #160]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007fa2:	4b27      	ldr	r3, [pc, #156]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa6:	4a26      	ldr	r2, [pc, #152]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007fa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007fae:	4b24      	ldr	r3, [pc, #144]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007fb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fb2:	4b24      	ldr	r3, [pc, #144]	@ (8008044 <RCCEx_PLL3_Config+0x160>)
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	69d2      	ldr	r2, [r2, #28]
 8007fba:	00d2      	lsls	r2, r2, #3
 8007fbc:	4920      	ldr	r1, [pc, #128]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d106      	bne.n	8007fe2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd8:	4a19      	ldr	r2, [pc, #100]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007fda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007fde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007fe0:	e00f      	b.n	8008002 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d106      	bne.n	8007ff6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007fe8:	4b15      	ldr	r3, [pc, #84]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fec:	4a14      	ldr	r2, [pc, #80]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007fee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ff4:	e005      	b.n	8008002 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007ff6:	4b12      	ldr	r3, [pc, #72]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffa:	4a11      	ldr	r2, [pc, #68]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8007ffc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008000:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008002:	4b0f      	ldr	r3, [pc, #60]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a0e      	ldr	r2, [pc, #56]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 8008008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800800c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800800e:	f7f9 fcd5 	bl	80019bc <HAL_GetTick>
 8008012:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008014:	e008      	b.n	8008028 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008016:	f7f9 fcd1 	bl	80019bc <HAL_GetTick>
 800801a:	4602      	mov	r2, r0
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	2b02      	cmp	r3, #2
 8008022:	d901      	bls.n	8008028 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e006      	b.n	8008036 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008028:	4b05      	ldr	r3, [pc, #20]	@ (8008040 <RCCEx_PLL3_Config+0x15c>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d0f0      	beq.n	8008016 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008034:	7bfb      	ldrb	r3, [r7, #15]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	58024400 	.word	0x58024400
 8008044:	ffff0007 	.word	0xffff0007

08008048 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e10f      	b.n	800827a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a87      	ldr	r2, [pc, #540]	@ (8008284 <HAL_SPI_Init+0x23c>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d00f      	beq.n	800808a <HAL_SPI_Init+0x42>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a86      	ldr	r2, [pc, #536]	@ (8008288 <HAL_SPI_Init+0x240>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d00a      	beq.n	800808a <HAL_SPI_Init+0x42>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a84      	ldr	r2, [pc, #528]	@ (800828c <HAL_SPI_Init+0x244>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d005      	beq.n	800808a <HAL_SPI_Init+0x42>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	2b0f      	cmp	r3, #15
 8008084:	d901      	bls.n	800808a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e0f7      	b.n	800827a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fe2e 	bl	8008cec <SPI_GetPacketSize>
 8008090:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a7b      	ldr	r2, [pc, #492]	@ (8008284 <HAL_SPI_Init+0x23c>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d00c      	beq.n	80080b6 <HAL_SPI_Init+0x6e>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a79      	ldr	r2, [pc, #484]	@ (8008288 <HAL_SPI_Init+0x240>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d007      	beq.n	80080b6 <HAL_SPI_Init+0x6e>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a78      	ldr	r2, [pc, #480]	@ (800828c <HAL_SPI_Init+0x244>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d002      	beq.n	80080b6 <HAL_SPI_Init+0x6e>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2b08      	cmp	r3, #8
 80080b4:	d811      	bhi.n	80080da <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80080ba:	4a72      	ldr	r2, [pc, #456]	@ (8008284 <HAL_SPI_Init+0x23c>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d009      	beq.n	80080d4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a70      	ldr	r2, [pc, #448]	@ (8008288 <HAL_SPI_Init+0x240>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d004      	beq.n	80080d4 <HAL_SPI_Init+0x8c>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a6f      	ldr	r2, [pc, #444]	@ (800828c <HAL_SPI_Init+0x244>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d104      	bne.n	80080de <HAL_SPI_Init+0x96>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2b10      	cmp	r3, #16
 80080d8:	d901      	bls.n	80080de <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e0cd      	b.n	800827a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d106      	bne.n	80080f8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7f8 ff8e 	bl	8001014 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2202      	movs	r2, #2
 80080fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f022 0201 	bic.w	r2, r2, #1
 800810e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800811a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008124:	d119      	bne.n	800815a <HAL_SPI_Init+0x112>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800812e:	d103      	bne.n	8008138 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008134:	2b00      	cmp	r3, #0
 8008136:	d008      	beq.n	800814a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10c      	bne.n	800815a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008144:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008148:	d107      	bne.n	800815a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008158:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00f      	beq.n	8008186 <HAL_SPI_Init+0x13e>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	2b06      	cmp	r3, #6
 800816c:	d90b      	bls.n	8008186 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	430a      	orrs	r2, r1
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	e007      	b.n	8008196 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008194:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	69da      	ldr	r2, [r3, #28]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800819e:	431a      	orrs	r2, r3
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	431a      	orrs	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a8:	ea42 0103 	orr.w	r1, r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68da      	ldr	r2, [r3, #12]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c0:	431a      	orrs	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c6:	431a      	orrs	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	431a      	orrs	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	431a      	orrs	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	431a      	orrs	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	431a      	orrs	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	431a      	orrs	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081ea:	431a      	orrs	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	431a      	orrs	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081f6:	ea42 0103 	orr.w	r1, r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	430a      	orrs	r2, r1
 8008204:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d113      	bne.n	8008236 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008220:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008234:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f022 0201 	bic.w	r2, r2, #1
 8008244:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00a      	beq.n	8008268 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	40013000 	.word	0x40013000
 8008288:	40003800 	.word	0x40003800
 800828c:	40003c00 	.word	0x40003c00

08008290 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b088      	sub	sp, #32
 8008294:	af02      	add	r7, sp, #8
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	603b      	str	r3, [r7, #0]
 800829c:	4613      	mov	r3, r2
 800829e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3320      	adds	r3, #32
 80082a6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082a8:	f7f9 fb88 	bl	80019bc <HAL_GetTick>
 80082ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d001      	beq.n	80082be <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80082ba:	2302      	movs	r3, #2
 80082bc:	e1d1      	b.n	8008662 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <HAL_SPI_Transmit+0x3a>
 80082c4:	88fb      	ldrh	r3, [r7, #6]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e1c9      	b.n	8008662 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d101      	bne.n	80082dc <HAL_SPI_Transmit+0x4c>
 80082d8:	2302      	movs	r3, #2
 80082da:	e1c2      	b.n	8008662 <HAL_SPI_Transmit+0x3d2>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2203      	movs	r2, #3
 80082e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	88fa      	ldrh	r2, [r7, #6]
 80082fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	88fa      	ldrh	r2, [r7, #6]
 8008306:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008334:	d108      	bne.n	8008348 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	e009      	b.n	800835c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800835a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	685a      	ldr	r2, [r3, #4]
 8008362:	4b96      	ldr	r3, [pc, #600]	@ (80085bc <HAL_SPI_Transmit+0x32c>)
 8008364:	4013      	ands	r3, r2
 8008366:	88f9      	ldrh	r1, [r7, #6]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	6812      	ldr	r2, [r2, #0]
 800836c:	430b      	orrs	r3, r1
 800836e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f042 0201 	orr.w	r2, r2, #1
 800837e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008388:	d107      	bne.n	800839a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008398:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	2b0f      	cmp	r3, #15
 80083a0:	d947      	bls.n	8008432 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80083a2:	e03f      	b.n	8008424 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d114      	bne.n	80083dc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6812      	ldr	r2, [r2, #0]
 80083bc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083c2:	1d1a      	adds	r2, r3, #4
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	3b01      	subs	r3, #1
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80083da:	e023      	b.n	8008424 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083dc:	f7f9 faee 	bl	80019bc <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d803      	bhi.n	80083f4 <HAL_SPI_Transmit+0x164>
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f2:	d102      	bne.n	80083fa <HAL_SPI_Transmit+0x16a>
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d114      	bne.n	8008424 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f000 fba8 	bl	8008b50 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008406:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e11e      	b.n	8008662 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800842a:	b29b      	uxth	r3, r3
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1b9      	bne.n	80083a4 <HAL_SPI_Transmit+0x114>
 8008430:	e0f1      	b.n	8008616 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	2b07      	cmp	r3, #7
 8008438:	f240 80e6 	bls.w	8008608 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800843c:	e05d      	b.n	80084fa <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	f003 0302 	and.w	r3, r3, #2
 8008448:	2b02      	cmp	r3, #2
 800844a:	d132      	bne.n	80084b2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008452:	b29b      	uxth	r3, r3
 8008454:	2b01      	cmp	r3, #1
 8008456:	d918      	bls.n	800848a <HAL_SPI_Transmit+0x1fa>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800845c:	2b00      	cmp	r3, #0
 800845e:	d014      	beq.n	800848a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6812      	ldr	r2, [r2, #0]
 800846a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008470:	1d1a      	adds	r2, r3, #4
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800847c:	b29b      	uxth	r3, r3
 800847e:	3b02      	subs	r3, #2
 8008480:	b29a      	uxth	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008488:	e037      	b.n	80084fa <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800848e:	881a      	ldrh	r2, [r3, #0]
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008498:	1c9a      	adds	r2, r3, #2
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	3b01      	subs	r3, #1
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80084b0:	e023      	b.n	80084fa <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084b2:	f7f9 fa83 	bl	80019bc <HAL_GetTick>
 80084b6:	4602      	mov	r2, r0
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d803      	bhi.n	80084ca <HAL_SPI_Transmit+0x23a>
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c8:	d102      	bne.n	80084d0 <HAL_SPI_Transmit+0x240>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d114      	bne.n	80084fa <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 fb3d 	bl	8008b50 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2201      	movs	r2, #1
 80084ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e0b3      	b.n	8008662 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008500:	b29b      	uxth	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d19b      	bne.n	800843e <HAL_SPI_Transmit+0x1ae>
 8008506:	e086      	b.n	8008616 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	f003 0302 	and.w	r3, r3, #2
 8008512:	2b02      	cmp	r3, #2
 8008514:	d154      	bne.n	80085c0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800851c:	b29b      	uxth	r3, r3
 800851e:	2b03      	cmp	r3, #3
 8008520:	d918      	bls.n	8008554 <HAL_SPI_Transmit+0x2c4>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008526:	2b40      	cmp	r3, #64	@ 0x40
 8008528:	d914      	bls.n	8008554 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	6812      	ldr	r2, [r2, #0]
 8008534:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800853a:	1d1a      	adds	r2, r3, #4
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008546:	b29b      	uxth	r3, r3
 8008548:	3b04      	subs	r3, #4
 800854a:	b29a      	uxth	r2, r3
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008552:	e059      	b.n	8008608 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800855a:	b29b      	uxth	r3, r3
 800855c:	2b01      	cmp	r3, #1
 800855e:	d917      	bls.n	8008590 <HAL_SPI_Transmit+0x300>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008564:	2b00      	cmp	r3, #0
 8008566:	d013      	beq.n	8008590 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800856c:	881a      	ldrh	r2, [r3, #0]
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008576:	1c9a      	adds	r2, r3, #2
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008582:	b29b      	uxth	r3, r3
 8008584:	3b02      	subs	r3, #2
 8008586:	b29a      	uxth	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800858e:	e03b      	b.n	8008608 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3320      	adds	r3, #32
 800859a:	7812      	ldrb	r2, [r2, #0]
 800859c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	3b01      	subs	r3, #1
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80085ba:	e025      	b.n	8008608 <HAL_SPI_Transmit+0x378>
 80085bc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085c0:	f7f9 f9fc 	bl	80019bc <HAL_GetTick>
 80085c4:	4602      	mov	r2, r0
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d803      	bhi.n	80085d8 <HAL_SPI_Transmit+0x348>
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d6:	d102      	bne.n	80085de <HAL_SPI_Transmit+0x34e>
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d114      	bne.n	8008608 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f000 fab6 	bl	8008b50 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e02c      	b.n	8008662 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800860e:	b29b      	uxth	r3, r3
 8008610:	2b00      	cmp	r3, #0
 8008612:	f47f af79 	bne.w	8008508 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	2200      	movs	r2, #0
 800861e:	2108      	movs	r1, #8
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 fb35 	bl	8008c90 <SPI_WaitOnFlagUntilTimeout>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d007      	beq.n	800863c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008632:	f043 0220 	orr.w	r2, r3, #32
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 fa87 	bl	8008b50 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e000      	b.n	8008662 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008660:	2300      	movs	r3, #0
  }
}
 8008662:	4618      	mov	r0, r3
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop

0800866c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b088      	sub	sp, #32
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	603b      	str	r3, [r7, #0]
 8008678:	4613      	mov	r3, r2
 800867a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008680:	095b      	lsrs	r3, r3, #5
 8008682:	b29b      	uxth	r3, r3
 8008684:	3301      	adds	r3, #1
 8008686:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	3330      	adds	r3, #48	@ 0x30
 800868e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008690:	f7f9 f994 	bl	80019bc <HAL_GetTick>
 8008694:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d001      	beq.n	80086a6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80086a2:	2302      	movs	r3, #2
 80086a4:	e250      	b.n	8008b48 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <HAL_SPI_Receive+0x46>
 80086ac:	88fb      	ldrh	r3, [r7, #6]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e248      	b.n	8008b48 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d101      	bne.n	80086c4 <HAL_SPI_Receive+0x58>
 80086c0:	2302      	movs	r3, #2
 80086c2:	e241      	b.n	8008b48 <HAL_SPI_Receive+0x4dc>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2204      	movs	r2, #4
 80086d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	88fa      	ldrh	r2, [r7, #6]
 80086e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	88fa      	ldrh	r2, [r7, #6]
 80086ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800871c:	d108      	bne.n	8008730 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	e009      	b.n	8008744 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008742:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	4b95      	ldr	r3, [pc, #596]	@ (80089a0 <HAL_SPI_Receive+0x334>)
 800874c:	4013      	ands	r3, r2
 800874e:	88f9      	ldrh	r1, [r7, #6]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	6812      	ldr	r2, [r2, #0]
 8008754:	430b      	orrs	r3, r1
 8008756:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f042 0201 	orr.w	r2, r2, #1
 8008766:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008770:	d107      	bne.n	8008782 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008780:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	2b0f      	cmp	r3, #15
 8008788:	d96c      	bls.n	8008864 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800878a:	e064      	b.n	8008856 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d114      	bne.n	80087cc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087aa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80087ac:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087b2:	1d1a      	adds	r2, r3, #4
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80087be:	b29b      	uxth	r3, r3
 80087c0:	3b01      	subs	r3, #1
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80087ca:	e044      	b.n	8008856 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	8bfa      	ldrh	r2, [r7, #30]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d919      	bls.n	800880e <HAL_SPI_Receive+0x1a2>
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d014      	beq.n	800880e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80087ee:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087f4:	1d1a      	adds	r2, r3, #4
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008800:	b29b      	uxth	r3, r3
 8008802:	3b01      	subs	r3, #1
 8008804:	b29a      	uxth	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800880c:	e023      	b.n	8008856 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800880e:	f7f9 f8d5 	bl	80019bc <HAL_GetTick>
 8008812:	4602      	mov	r2, r0
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	683a      	ldr	r2, [r7, #0]
 800881a:	429a      	cmp	r2, r3
 800881c:	d803      	bhi.n	8008826 <HAL_SPI_Receive+0x1ba>
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008824:	d102      	bne.n	800882c <HAL_SPI_Receive+0x1c0>
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d114      	bne.n	8008856 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 f98f 	bl	8008b50 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008838:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e178      	b.n	8008b48 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800885c:	b29b      	uxth	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d194      	bne.n	800878c <HAL_SPI_Receive+0x120>
 8008862:	e15e      	b.n	8008b22 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	2b07      	cmp	r3, #7
 800886a:	f240 8153 	bls.w	8008b14 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800886e:	e08f      	b.n	8008990 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b01      	cmp	r3, #1
 8008884:	d114      	bne.n	80088b0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800888a:	69ba      	ldr	r2, [r7, #24]
 800888c:	8812      	ldrh	r2, [r2, #0]
 800888e:	b292      	uxth	r2, r2
 8008890:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008896:	1c9a      	adds	r2, r3, #2
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	3b01      	subs	r3, #1
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80088ae:	e06f      	b.n	8008990 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	8bfa      	ldrh	r2, [r7, #30]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d924      	bls.n	8008908 <HAL_SPI_Receive+0x29c>
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d01f      	beq.n	8008908 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088cc:	69ba      	ldr	r2, [r7, #24]
 80088ce:	8812      	ldrh	r2, [r2, #0]
 80088d0:	b292      	uxth	r2, r2
 80088d2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088d8:	1c9a      	adds	r2, r3, #2
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	8812      	ldrh	r2, [r2, #0]
 80088e6:	b292      	uxth	r2, r2
 80088e8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088ee:	1c9a      	adds	r2, r3, #2
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	3b02      	subs	r3, #2
 80088fe:	b29a      	uxth	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008906:	e043      	b.n	8008990 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800890e:	b29b      	uxth	r3, r3
 8008910:	2b01      	cmp	r3, #1
 8008912:	d119      	bne.n	8008948 <HAL_SPI_Receive+0x2dc>
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d014      	beq.n	8008948 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008922:	69ba      	ldr	r2, [r7, #24]
 8008924:	8812      	ldrh	r2, [r2, #0]
 8008926:	b292      	uxth	r2, r2
 8008928:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800892e:	1c9a      	adds	r2, r3, #2
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800893a:	b29b      	uxth	r3, r3
 800893c:	3b01      	subs	r3, #1
 800893e:	b29a      	uxth	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008946:	e023      	b.n	8008990 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008948:	f7f9 f838 	bl	80019bc <HAL_GetTick>
 800894c:	4602      	mov	r2, r0
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	429a      	cmp	r2, r3
 8008956:	d803      	bhi.n	8008960 <HAL_SPI_Receive+0x2f4>
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895e:	d102      	bne.n	8008966 <HAL_SPI_Receive+0x2fa>
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d114      	bne.n	8008990 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f000 f8f2 	bl	8008b50 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008972:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e0db      	b.n	8008b48 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008996:	b29b      	uxth	r3, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	f47f af69 	bne.w	8008870 <HAL_SPI_Receive+0x204>
 800899e:	e0c0      	b.n	8008b22 <HAL_SPI_Receive+0x4b6>
 80089a0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d117      	bne.n	80089ea <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089c6:	7812      	ldrb	r2, [r2, #0]
 80089c8:	b2d2      	uxtb	r2, r2
 80089ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089d0:	1c5a      	adds	r2, r3, #1
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80089dc:	b29b      	uxth	r3, r3
 80089de:	3b01      	subs	r3, #1
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80089e8:	e094      	b.n	8008b14 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	8bfa      	ldrh	r2, [r7, #30]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d946      	bls.n	8008a86 <HAL_SPI_Receive+0x41a>
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d041      	beq.n	8008a86 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a0e:	7812      	ldrb	r2, [r2, #0]
 8008a10:	b2d2      	uxtb	r2, r2
 8008a12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a18:	1c5a      	adds	r2, r3, #1
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a2a:	7812      	ldrb	r2, [r2, #0]
 8008a2c:	b2d2      	uxtb	r2, r2
 8008a2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a34:	1c5a      	adds	r2, r3, #1
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a46:	7812      	ldrb	r2, [r2, #0]
 8008a48:	b2d2      	uxtb	r2, r2
 8008a4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a62:	7812      	ldrb	r2, [r2, #0]
 8008a64:	b2d2      	uxtb	r2, r2
 8008a66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a6c:	1c5a      	adds	r2, r3, #1
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	3b04      	subs	r3, #4
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008a84:	e046      	b.n	8008b14 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d81c      	bhi.n	8008acc <HAL_SPI_Receive+0x460>
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d017      	beq.n	8008acc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008aa8:	7812      	ldrb	r2, [r2, #0]
 8008aaa:	b2d2      	uxtb	r2, r2
 8008aac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008aca:	e023      	b.n	8008b14 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008acc:	f7f8 ff76 	bl	80019bc <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d803      	bhi.n	8008ae4 <HAL_SPI_Receive+0x478>
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae2:	d102      	bne.n	8008aea <HAL_SPI_Receive+0x47e>
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d114      	bne.n	8008b14 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f000 f830 	bl	8008b50 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008af6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e019      	b.n	8008b48 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f47f af41 	bne.w	80089a4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 f814 	bl	8008b50 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e000      	b.n	8008b48 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8008b46:	2300      	movs	r3, #0
  }
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3720      	adds	r7, #32
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	699a      	ldr	r2, [r3, #24]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f042 0208 	orr.w	r2, r2, #8
 8008b6e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	699a      	ldr	r2, [r3, #24]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f042 0210 	orr.w	r2, r2, #16
 8008b7e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f022 0201 	bic.w	r2, r2, #1
 8008b8e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6919      	ldr	r1, [r3, #16]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8008c8c <SPI_CloseTransfer+0x13c>)
 8008b9c:	400b      	ands	r3, r1
 8008b9e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689a      	ldr	r2, [r3, #8]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008bae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b04      	cmp	r3, #4
 8008bba:	d014      	beq.n	8008be6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f003 0320 	and.w	r3, r3, #32
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00f      	beq.n	8008be6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bcc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	699a      	ldr	r2, [r3, #24]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f042 0220 	orr.w	r2, r2, #32
 8008be4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	d014      	beq.n	8008c1c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00f      	beq.n	8008c1c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c02:	f043 0204 	orr.w	r2, r3, #4
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	699a      	ldr	r2, [r3, #24]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c1a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00f      	beq.n	8008c46 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c2c:	f043 0201 	orr.w	r2, r3, #1
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	699a      	ldr	r2, [r3, #24]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c44:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00f      	beq.n	8008c70 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c56:	f043 0208 	orr.w	r2, r3, #8
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	699a      	ldr	r2, [r3, #24]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c6e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008c80:	bf00      	nop
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	fffffc90 	.word	0xfffffc90

08008c90 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	603b      	str	r3, [r7, #0]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008ca0:	e010      	b.n	8008cc4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ca2:	f7f8 fe8b 	bl	80019bc <HAL_GetTick>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d803      	bhi.n	8008cba <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb8:	d102      	bne.n	8008cc0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e00f      	b.n	8008ce4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	695a      	ldr	r2, [r3, #20]
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	4013      	ands	r3, r2
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	bf0c      	ite	eq
 8008cd4:	2301      	moveq	r3, #1
 8008cd6:	2300      	movne	r3, #0
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	461a      	mov	r2, r3
 8008cdc:	79fb      	ldrb	r3, [r7, #7]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d0df      	beq.n	8008ca2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cf8:	095b      	lsrs	r3, r3, #5
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	3301      	adds	r3, #1
 8008d04:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	3307      	adds	r3, #7
 8008d0a:	08db      	lsrs	r3, r3, #3
 8008d0c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	fb02 f303 	mul.w	r3, r2, r3
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b082      	sub	sp, #8
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d101      	bne.n	8008d34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e049      	b.n	8008dc8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d106      	bne.n	8008d4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7f8 fd23 	bl	8001794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2202      	movs	r2, #2
 8008d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	4619      	mov	r1, r3
 8008d60:	4610      	mov	r0, r2
 8008d62:	f000 fd59 	bl	8009818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2201      	movs	r2, #1
 8008d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d001      	beq.n	8008de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e054      	b.n	8008e92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2202      	movs	r2, #2
 8008dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f042 0201 	orr.w	r2, r2, #1
 8008dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a26      	ldr	r2, [pc, #152]	@ (8008ea0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d022      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x80>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e12:	d01d      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x80>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a22      	ldr	r2, [pc, #136]	@ (8008ea4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d018      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x80>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a21      	ldr	r2, [pc, #132]	@ (8008ea8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d013      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x80>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8008eac <HAL_TIM_Base_Start_IT+0xdc>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d00e      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x80>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a1e      	ldr	r2, [pc, #120]	@ (8008eb0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d009      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x80>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a1c      	ldr	r2, [pc, #112]	@ (8008eb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d004      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x80>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8008eb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d115      	bne.n	8008e7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689a      	ldr	r2, [r3, #8]
 8008e56:	4b19      	ldr	r3, [pc, #100]	@ (8008ebc <HAL_TIM_Base_Start_IT+0xec>)
 8008e58:	4013      	ands	r3, r2
 8008e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2b06      	cmp	r3, #6
 8008e60:	d015      	beq.n	8008e8e <HAL_TIM_Base_Start_IT+0xbe>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e68:	d011      	beq.n	8008e8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f042 0201 	orr.w	r2, r2, #1
 8008e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e7a:	e008      	b.n	8008e8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f042 0201 	orr.w	r2, r2, #1
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	e000      	b.n	8008e90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	40010000 	.word	0x40010000
 8008ea4:	40000400 	.word	0x40000400
 8008ea8:	40000800 	.word	0x40000800
 8008eac:	40000c00 	.word	0x40000c00
 8008eb0:	40010400 	.word	0x40010400
 8008eb4:	40001800 	.word	0x40001800
 8008eb8:	40014000 	.word	0x40014000
 8008ebc:	00010007 	.word	0x00010007

08008ec0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d101      	bne.n	8008ed2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e049      	b.n	8008f66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d106      	bne.n	8008eec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f841 	bl	8008f6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	3304      	adds	r3, #4
 8008efc:	4619      	mov	r1, r3
 8008efe:	4610      	mov	r0, r2
 8008f00:	f000 fc8a 	bl	8009818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b083      	sub	sp, #12
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008f76:	bf00      	nop
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
	...

08008f84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d109      	bne.n	8008fa8 <HAL_TIM_PWM_Start+0x24>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	bf14      	ite	ne
 8008fa0:	2301      	movne	r3, #1
 8008fa2:	2300      	moveq	r3, #0
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	e03c      	b.n	8009022 <HAL_TIM_PWM_Start+0x9e>
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	2b04      	cmp	r3, #4
 8008fac:	d109      	bne.n	8008fc2 <HAL_TIM_PWM_Start+0x3e>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	bf14      	ite	ne
 8008fba:	2301      	movne	r3, #1
 8008fbc:	2300      	moveq	r3, #0
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	e02f      	b.n	8009022 <HAL_TIM_PWM_Start+0x9e>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b08      	cmp	r3, #8
 8008fc6:	d109      	bne.n	8008fdc <HAL_TIM_PWM_Start+0x58>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	bf14      	ite	ne
 8008fd4:	2301      	movne	r3, #1
 8008fd6:	2300      	moveq	r3, #0
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	e022      	b.n	8009022 <HAL_TIM_PWM_Start+0x9e>
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	2b0c      	cmp	r3, #12
 8008fe0:	d109      	bne.n	8008ff6 <HAL_TIM_PWM_Start+0x72>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	bf14      	ite	ne
 8008fee:	2301      	movne	r3, #1
 8008ff0:	2300      	moveq	r3, #0
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	e015      	b.n	8009022 <HAL_TIM_PWM_Start+0x9e>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	2b10      	cmp	r3, #16
 8008ffa:	d109      	bne.n	8009010 <HAL_TIM_PWM_Start+0x8c>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b01      	cmp	r3, #1
 8009006:	bf14      	ite	ne
 8009008:	2301      	movne	r3, #1
 800900a:	2300      	moveq	r3, #0
 800900c:	b2db      	uxtb	r3, r3
 800900e:	e008      	b.n	8009022 <HAL_TIM_PWM_Start+0x9e>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b01      	cmp	r3, #1
 800901a:	bf14      	ite	ne
 800901c:	2301      	movne	r3, #1
 800901e:	2300      	moveq	r3, #0
 8009020:	b2db      	uxtb	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d001      	beq.n	800902a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	e0a1      	b.n	800916e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d104      	bne.n	800903a <HAL_TIM_PWM_Start+0xb6>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2202      	movs	r2, #2
 8009034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009038:	e023      	b.n	8009082 <HAL_TIM_PWM_Start+0xfe>
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	2b04      	cmp	r3, #4
 800903e:	d104      	bne.n	800904a <HAL_TIM_PWM_Start+0xc6>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2202      	movs	r2, #2
 8009044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009048:	e01b      	b.n	8009082 <HAL_TIM_PWM_Start+0xfe>
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2b08      	cmp	r3, #8
 800904e:	d104      	bne.n	800905a <HAL_TIM_PWM_Start+0xd6>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2202      	movs	r2, #2
 8009054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009058:	e013      	b.n	8009082 <HAL_TIM_PWM_Start+0xfe>
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	2b0c      	cmp	r3, #12
 800905e:	d104      	bne.n	800906a <HAL_TIM_PWM_Start+0xe6>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2202      	movs	r2, #2
 8009064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009068:	e00b      	b.n	8009082 <HAL_TIM_PWM_Start+0xfe>
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b10      	cmp	r3, #16
 800906e:	d104      	bne.n	800907a <HAL_TIM_PWM_Start+0xf6>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2202      	movs	r2, #2
 8009074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009078:	e003      	b.n	8009082 <HAL_TIM_PWM_Start+0xfe>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2202      	movs	r2, #2
 800907e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2201      	movs	r2, #1
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	4618      	mov	r0, r3
 800908c:	f000 ffde 	bl	800a04c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a38      	ldr	r2, [pc, #224]	@ (8009178 <HAL_TIM_PWM_Start+0x1f4>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d013      	beq.n	80090c2 <HAL_TIM_PWM_Start+0x13e>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a37      	ldr	r2, [pc, #220]	@ (800917c <HAL_TIM_PWM_Start+0x1f8>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d00e      	beq.n	80090c2 <HAL_TIM_PWM_Start+0x13e>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a35      	ldr	r2, [pc, #212]	@ (8009180 <HAL_TIM_PWM_Start+0x1fc>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d009      	beq.n	80090c2 <HAL_TIM_PWM_Start+0x13e>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a34      	ldr	r2, [pc, #208]	@ (8009184 <HAL_TIM_PWM_Start+0x200>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d004      	beq.n	80090c2 <HAL_TIM_PWM_Start+0x13e>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a32      	ldr	r2, [pc, #200]	@ (8009188 <HAL_TIM_PWM_Start+0x204>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d101      	bne.n	80090c6 <HAL_TIM_PWM_Start+0x142>
 80090c2:	2301      	movs	r3, #1
 80090c4:	e000      	b.n	80090c8 <HAL_TIM_PWM_Start+0x144>
 80090c6:	2300      	movs	r3, #0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d007      	beq.n	80090dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80090da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a25      	ldr	r2, [pc, #148]	@ (8009178 <HAL_TIM_PWM_Start+0x1f4>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d022      	beq.n	800912c <HAL_TIM_PWM_Start+0x1a8>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ee:	d01d      	beq.n	800912c <HAL_TIM_PWM_Start+0x1a8>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a25      	ldr	r2, [pc, #148]	@ (800918c <HAL_TIM_PWM_Start+0x208>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d018      	beq.n	800912c <HAL_TIM_PWM_Start+0x1a8>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a24      	ldr	r2, [pc, #144]	@ (8009190 <HAL_TIM_PWM_Start+0x20c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d013      	beq.n	800912c <HAL_TIM_PWM_Start+0x1a8>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a22      	ldr	r2, [pc, #136]	@ (8009194 <HAL_TIM_PWM_Start+0x210>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d00e      	beq.n	800912c <HAL_TIM_PWM_Start+0x1a8>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a1a      	ldr	r2, [pc, #104]	@ (800917c <HAL_TIM_PWM_Start+0x1f8>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d009      	beq.n	800912c <HAL_TIM_PWM_Start+0x1a8>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a1e      	ldr	r2, [pc, #120]	@ (8009198 <HAL_TIM_PWM_Start+0x214>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d004      	beq.n	800912c <HAL_TIM_PWM_Start+0x1a8>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a16      	ldr	r2, [pc, #88]	@ (8009180 <HAL_TIM_PWM_Start+0x1fc>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d115      	bne.n	8009158 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689a      	ldr	r2, [r3, #8]
 8009132:	4b1a      	ldr	r3, [pc, #104]	@ (800919c <HAL_TIM_PWM_Start+0x218>)
 8009134:	4013      	ands	r3, r2
 8009136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2b06      	cmp	r3, #6
 800913c:	d015      	beq.n	800916a <HAL_TIM_PWM_Start+0x1e6>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009144:	d011      	beq.n	800916a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f042 0201 	orr.w	r2, r2, #1
 8009154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009156:	e008      	b.n	800916a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f042 0201 	orr.w	r2, r2, #1
 8009166:	601a      	str	r2, [r3, #0]
 8009168:	e000      	b.n	800916c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800916a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	40010000 	.word	0x40010000
 800917c:	40010400 	.word	0x40010400
 8009180:	40014000 	.word	0x40014000
 8009184:	40014400 	.word	0x40014400
 8009188:	40014800 	.word	0x40014800
 800918c:	40000400 	.word	0x40000400
 8009190:	40000800 	.word	0x40000800
 8009194:	40000c00 	.word	0x40000c00
 8009198:	40001800 	.word	0x40001800
 800919c:	00010007 	.word	0x00010007

080091a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f003 0302 	and.w	r3, r3, #2
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d020      	beq.n	8009204 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f003 0302 	and.w	r3, r3, #2
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d01b      	beq.n	8009204 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f06f 0202 	mvn.w	r2, #2
 80091d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	f003 0303 	and.w	r3, r3, #3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d003      	beq.n	80091f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 faf6 	bl	80097dc <HAL_TIM_IC_CaptureCallback>
 80091f0:	e005      	b.n	80091fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fae8 	bl	80097c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 faf9 	bl	80097f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	f003 0304 	and.w	r3, r3, #4
 800920a:	2b00      	cmp	r3, #0
 800920c:	d020      	beq.n	8009250 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f003 0304 	and.w	r3, r3, #4
 8009214:	2b00      	cmp	r3, #0
 8009216:	d01b      	beq.n	8009250 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f06f 0204 	mvn.w	r2, #4
 8009220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2202      	movs	r2, #2
 8009226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fad0 	bl	80097dc <HAL_TIM_IC_CaptureCallback>
 800923c:	e005      	b.n	800924a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fac2 	bl	80097c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fad3 	bl	80097f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f003 0308 	and.w	r3, r3, #8
 8009256:	2b00      	cmp	r3, #0
 8009258:	d020      	beq.n	800929c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f003 0308 	and.w	r3, r3, #8
 8009260:	2b00      	cmp	r3, #0
 8009262:	d01b      	beq.n	800929c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f06f 0208 	mvn.w	r2, #8
 800926c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2204      	movs	r2, #4
 8009272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	f003 0303 	and.w	r3, r3, #3
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 faaa 	bl	80097dc <HAL_TIM_IC_CaptureCallback>
 8009288:	e005      	b.n	8009296 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 fa9c 	bl	80097c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 faad 	bl	80097f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	f003 0310 	and.w	r3, r3, #16
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d020      	beq.n	80092e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f003 0310 	and.w	r3, r3, #16
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d01b      	beq.n	80092e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f06f 0210 	mvn.w	r2, #16
 80092b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2208      	movs	r2, #8
 80092be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	69db      	ldr	r3, [r3, #28]
 80092c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d003      	beq.n	80092d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fa84 	bl	80097dc <HAL_TIM_IC_CaptureCallback>
 80092d4:	e005      	b.n	80092e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fa76 	bl	80097c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fa87 	bl	80097f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00c      	beq.n	800930c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d007      	beq.n	800930c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f06f 0201 	mvn.w	r2, #1
 8009304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7f7 fdbe 	bl	8000e88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009312:	2b00      	cmp	r3, #0
 8009314:	d104      	bne.n	8009320 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00c      	beq.n	800933a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009326:	2b00      	cmp	r3, #0
 8009328:	d007      	beq.n	800933a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 ffc5 	bl	800a2c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00c      	beq.n	800935e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800934a:	2b00      	cmp	r3, #0
 800934c:	d007      	beq.n	800935e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 ffbd 	bl	800a2d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00c      	beq.n	8009382 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800936e:	2b00      	cmp	r3, #0
 8009370:	d007      	beq.n	8009382 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800937a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fa41 	bl	8009804 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f003 0320 	and.w	r3, r3, #32
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00c      	beq.n	80093a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f003 0320 	and.w	r3, r3, #32
 8009392:	2b00      	cmp	r3, #0
 8009394:	d007      	beq.n	80093a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f06f 0220 	mvn.w	r2, #32
 800939e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 ff85 	bl	800a2b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093a6:	bf00      	nop
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
	...

080093b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d101      	bne.n	80093ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80093ca:	2302      	movs	r3, #2
 80093cc:	e0ff      	b.n	80095ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2201      	movs	r2, #1
 80093d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b14      	cmp	r3, #20
 80093da:	f200 80f0 	bhi.w	80095be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80093de:	a201      	add	r2, pc, #4	@ (adr r2, 80093e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80093e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e4:	08009439 	.word	0x08009439
 80093e8:	080095bf 	.word	0x080095bf
 80093ec:	080095bf 	.word	0x080095bf
 80093f0:	080095bf 	.word	0x080095bf
 80093f4:	08009479 	.word	0x08009479
 80093f8:	080095bf 	.word	0x080095bf
 80093fc:	080095bf 	.word	0x080095bf
 8009400:	080095bf 	.word	0x080095bf
 8009404:	080094bb 	.word	0x080094bb
 8009408:	080095bf 	.word	0x080095bf
 800940c:	080095bf 	.word	0x080095bf
 8009410:	080095bf 	.word	0x080095bf
 8009414:	080094fb 	.word	0x080094fb
 8009418:	080095bf 	.word	0x080095bf
 800941c:	080095bf 	.word	0x080095bf
 8009420:	080095bf 	.word	0x080095bf
 8009424:	0800953d 	.word	0x0800953d
 8009428:	080095bf 	.word	0x080095bf
 800942c:	080095bf 	.word	0x080095bf
 8009430:	080095bf 	.word	0x080095bf
 8009434:	0800957d 	.word	0x0800957d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	68b9      	ldr	r1, [r7, #8]
 800943e:	4618      	mov	r0, r3
 8009440:	f000 fa90 	bl	8009964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	699a      	ldr	r2, [r3, #24]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f042 0208 	orr.w	r2, r2, #8
 8009452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	699a      	ldr	r2, [r3, #24]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f022 0204 	bic.w	r2, r2, #4
 8009462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	6999      	ldr	r1, [r3, #24]
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	691a      	ldr	r2, [r3, #16]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	430a      	orrs	r2, r1
 8009474:	619a      	str	r2, [r3, #24]
      break;
 8009476:	e0a5      	b.n	80095c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	68b9      	ldr	r1, [r7, #8]
 800947e:	4618      	mov	r0, r3
 8009480:	f000 fb00 	bl	8009a84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	699a      	ldr	r2, [r3, #24]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	699a      	ldr	r2, [r3, #24]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6999      	ldr	r1, [r3, #24]
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	021a      	lsls	r2, r3, #8
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	430a      	orrs	r2, r1
 80094b6:	619a      	str	r2, [r3, #24]
      break;
 80094b8:	e084      	b.n	80095c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68b9      	ldr	r1, [r7, #8]
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 fb69 	bl	8009b98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	69da      	ldr	r2, [r3, #28]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f042 0208 	orr.w	r2, r2, #8
 80094d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	69da      	ldr	r2, [r3, #28]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f022 0204 	bic.w	r2, r2, #4
 80094e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	69d9      	ldr	r1, [r3, #28]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	691a      	ldr	r2, [r3, #16]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	430a      	orrs	r2, r1
 80094f6:	61da      	str	r2, [r3, #28]
      break;
 80094f8:	e064      	b.n	80095c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68b9      	ldr	r1, [r7, #8]
 8009500:	4618      	mov	r0, r3
 8009502:	f000 fbd1 	bl	8009ca8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	69da      	ldr	r2, [r3, #28]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	69da      	ldr	r2, [r3, #28]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	69d9      	ldr	r1, [r3, #28]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	021a      	lsls	r2, r3, #8
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	430a      	orrs	r2, r1
 8009538:	61da      	str	r2, [r3, #28]
      break;
 800953a:	e043      	b.n	80095c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68b9      	ldr	r1, [r7, #8]
 8009542:	4618      	mov	r0, r3
 8009544:	f000 fc1a 	bl	8009d7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f042 0208 	orr.w	r2, r2, #8
 8009556:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f022 0204 	bic.w	r2, r2, #4
 8009566:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	691a      	ldr	r2, [r3, #16]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	430a      	orrs	r2, r1
 8009578:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800957a:	e023      	b.n	80095c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68b9      	ldr	r1, [r7, #8]
 8009582:	4618      	mov	r0, r3
 8009584:	f000 fc5e 	bl	8009e44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009596:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	021a      	lsls	r2, r3, #8
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	430a      	orrs	r2, r1
 80095ba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80095bc:	e002      	b.n	80095c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	75fb      	strb	r3, [r7, #23]
      break;
 80095c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80095cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3718      	adds	r7, #24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop

080095d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d101      	bne.n	80095f4 <HAL_TIM_ConfigClockSource+0x1c>
 80095f0:	2302      	movs	r3, #2
 80095f2:	e0dc      	b.n	80097ae <HAL_TIM_ConfigClockSource+0x1d6>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2202      	movs	r2, #2
 8009600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	4b6a      	ldr	r3, [pc, #424]	@ (80097b8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009610:	4013      	ands	r3, r2
 8009612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800961a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a64      	ldr	r2, [pc, #400]	@ (80097bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800962a:	4293      	cmp	r3, r2
 800962c:	f000 80a9 	beq.w	8009782 <HAL_TIM_ConfigClockSource+0x1aa>
 8009630:	4a62      	ldr	r2, [pc, #392]	@ (80097bc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009632:	4293      	cmp	r3, r2
 8009634:	f200 80ae 	bhi.w	8009794 <HAL_TIM_ConfigClockSource+0x1bc>
 8009638:	4a61      	ldr	r2, [pc, #388]	@ (80097c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800963a:	4293      	cmp	r3, r2
 800963c:	f000 80a1 	beq.w	8009782 <HAL_TIM_ConfigClockSource+0x1aa>
 8009640:	4a5f      	ldr	r2, [pc, #380]	@ (80097c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009642:	4293      	cmp	r3, r2
 8009644:	f200 80a6 	bhi.w	8009794 <HAL_TIM_ConfigClockSource+0x1bc>
 8009648:	4a5e      	ldr	r2, [pc, #376]	@ (80097c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800964a:	4293      	cmp	r3, r2
 800964c:	f000 8099 	beq.w	8009782 <HAL_TIM_ConfigClockSource+0x1aa>
 8009650:	4a5c      	ldr	r2, [pc, #368]	@ (80097c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009652:	4293      	cmp	r3, r2
 8009654:	f200 809e 	bhi.w	8009794 <HAL_TIM_ConfigClockSource+0x1bc>
 8009658:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800965c:	f000 8091 	beq.w	8009782 <HAL_TIM_ConfigClockSource+0x1aa>
 8009660:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009664:	f200 8096 	bhi.w	8009794 <HAL_TIM_ConfigClockSource+0x1bc>
 8009668:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800966c:	f000 8089 	beq.w	8009782 <HAL_TIM_ConfigClockSource+0x1aa>
 8009670:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009674:	f200 808e 	bhi.w	8009794 <HAL_TIM_ConfigClockSource+0x1bc>
 8009678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800967c:	d03e      	beq.n	80096fc <HAL_TIM_ConfigClockSource+0x124>
 800967e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009682:	f200 8087 	bhi.w	8009794 <HAL_TIM_ConfigClockSource+0x1bc>
 8009686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800968a:	f000 8086 	beq.w	800979a <HAL_TIM_ConfigClockSource+0x1c2>
 800968e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009692:	d87f      	bhi.n	8009794 <HAL_TIM_ConfigClockSource+0x1bc>
 8009694:	2b70      	cmp	r3, #112	@ 0x70
 8009696:	d01a      	beq.n	80096ce <HAL_TIM_ConfigClockSource+0xf6>
 8009698:	2b70      	cmp	r3, #112	@ 0x70
 800969a:	d87b      	bhi.n	8009794 <HAL_TIM_ConfigClockSource+0x1bc>
 800969c:	2b60      	cmp	r3, #96	@ 0x60
 800969e:	d050      	beq.n	8009742 <HAL_TIM_ConfigClockSource+0x16a>
 80096a0:	2b60      	cmp	r3, #96	@ 0x60
 80096a2:	d877      	bhi.n	8009794 <HAL_TIM_ConfigClockSource+0x1bc>
 80096a4:	2b50      	cmp	r3, #80	@ 0x50
 80096a6:	d03c      	beq.n	8009722 <HAL_TIM_ConfigClockSource+0x14a>
 80096a8:	2b50      	cmp	r3, #80	@ 0x50
 80096aa:	d873      	bhi.n	8009794 <HAL_TIM_ConfigClockSource+0x1bc>
 80096ac:	2b40      	cmp	r3, #64	@ 0x40
 80096ae:	d058      	beq.n	8009762 <HAL_TIM_ConfigClockSource+0x18a>
 80096b0:	2b40      	cmp	r3, #64	@ 0x40
 80096b2:	d86f      	bhi.n	8009794 <HAL_TIM_ConfigClockSource+0x1bc>
 80096b4:	2b30      	cmp	r3, #48	@ 0x30
 80096b6:	d064      	beq.n	8009782 <HAL_TIM_ConfigClockSource+0x1aa>
 80096b8:	2b30      	cmp	r3, #48	@ 0x30
 80096ba:	d86b      	bhi.n	8009794 <HAL_TIM_ConfigClockSource+0x1bc>
 80096bc:	2b20      	cmp	r3, #32
 80096be:	d060      	beq.n	8009782 <HAL_TIM_ConfigClockSource+0x1aa>
 80096c0:	2b20      	cmp	r3, #32
 80096c2:	d867      	bhi.n	8009794 <HAL_TIM_ConfigClockSource+0x1bc>
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d05c      	beq.n	8009782 <HAL_TIM_ConfigClockSource+0x1aa>
 80096c8:	2b10      	cmp	r3, #16
 80096ca:	d05a      	beq.n	8009782 <HAL_TIM_ConfigClockSource+0x1aa>
 80096cc:	e062      	b.n	8009794 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80096de:	f000 fc95 	bl	800a00c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80096f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	609a      	str	r2, [r3, #8]
      break;
 80096fa:	e04f      	b.n	800979c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800970c:	f000 fc7e 	bl	800a00c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	689a      	ldr	r2, [r3, #8]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800971e:	609a      	str	r2, [r3, #8]
      break;
 8009720:	e03c      	b.n	800979c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800972e:	461a      	mov	r2, r3
 8009730:	f000 fbee 	bl	8009f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2150      	movs	r1, #80	@ 0x50
 800973a:	4618      	mov	r0, r3
 800973c:	f000 fc48 	bl	8009fd0 <TIM_ITRx_SetConfig>
      break;
 8009740:	e02c      	b.n	800979c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800974e:	461a      	mov	r2, r3
 8009750:	f000 fc0d 	bl	8009f6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2160      	movs	r1, #96	@ 0x60
 800975a:	4618      	mov	r0, r3
 800975c:	f000 fc38 	bl	8009fd0 <TIM_ITRx_SetConfig>
      break;
 8009760:	e01c      	b.n	800979c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800976e:	461a      	mov	r2, r3
 8009770:	f000 fbce 	bl	8009f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2140      	movs	r1, #64	@ 0x40
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fc28 	bl	8009fd0 <TIM_ITRx_SetConfig>
      break;
 8009780:	e00c      	b.n	800979c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4619      	mov	r1, r3
 800978c:	4610      	mov	r0, r2
 800978e:	f000 fc1f 	bl	8009fd0 <TIM_ITRx_SetConfig>
      break;
 8009792:	e003      	b.n	800979c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	73fb      	strb	r3, [r7, #15]
      break;
 8009798:	e000      	b.n	800979c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800979a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	ffceff88 	.word	0xffceff88
 80097bc:	00100040 	.word	0x00100040
 80097c0:	00100030 	.word	0x00100030
 80097c4:	00100020 	.word	0x00100020

080097c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a46      	ldr	r2, [pc, #280]	@ (8009944 <TIM_Base_SetConfig+0x12c>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d013      	beq.n	8009858 <TIM_Base_SetConfig+0x40>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009836:	d00f      	beq.n	8009858 <TIM_Base_SetConfig+0x40>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a43      	ldr	r2, [pc, #268]	@ (8009948 <TIM_Base_SetConfig+0x130>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d00b      	beq.n	8009858 <TIM_Base_SetConfig+0x40>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a42      	ldr	r2, [pc, #264]	@ (800994c <TIM_Base_SetConfig+0x134>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d007      	beq.n	8009858 <TIM_Base_SetConfig+0x40>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a41      	ldr	r2, [pc, #260]	@ (8009950 <TIM_Base_SetConfig+0x138>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d003      	beq.n	8009858 <TIM_Base_SetConfig+0x40>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a40      	ldr	r2, [pc, #256]	@ (8009954 <TIM_Base_SetConfig+0x13c>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d108      	bne.n	800986a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800985e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	4313      	orrs	r3, r2
 8009868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a35      	ldr	r2, [pc, #212]	@ (8009944 <TIM_Base_SetConfig+0x12c>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d01f      	beq.n	80098b2 <TIM_Base_SetConfig+0x9a>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009878:	d01b      	beq.n	80098b2 <TIM_Base_SetConfig+0x9a>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a32      	ldr	r2, [pc, #200]	@ (8009948 <TIM_Base_SetConfig+0x130>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d017      	beq.n	80098b2 <TIM_Base_SetConfig+0x9a>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a31      	ldr	r2, [pc, #196]	@ (800994c <TIM_Base_SetConfig+0x134>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d013      	beq.n	80098b2 <TIM_Base_SetConfig+0x9a>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a30      	ldr	r2, [pc, #192]	@ (8009950 <TIM_Base_SetConfig+0x138>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d00f      	beq.n	80098b2 <TIM_Base_SetConfig+0x9a>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a2f      	ldr	r2, [pc, #188]	@ (8009954 <TIM_Base_SetConfig+0x13c>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d00b      	beq.n	80098b2 <TIM_Base_SetConfig+0x9a>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a2e      	ldr	r2, [pc, #184]	@ (8009958 <TIM_Base_SetConfig+0x140>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d007      	beq.n	80098b2 <TIM_Base_SetConfig+0x9a>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a2d      	ldr	r2, [pc, #180]	@ (800995c <TIM_Base_SetConfig+0x144>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d003      	beq.n	80098b2 <TIM_Base_SetConfig+0x9a>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a2c      	ldr	r2, [pc, #176]	@ (8009960 <TIM_Base_SetConfig+0x148>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d108      	bne.n	80098c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	695b      	ldr	r3, [r3, #20]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	689a      	ldr	r2, [r3, #8]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a16      	ldr	r2, [pc, #88]	@ (8009944 <TIM_Base_SetConfig+0x12c>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d00f      	beq.n	8009910 <TIM_Base_SetConfig+0xf8>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a18      	ldr	r2, [pc, #96]	@ (8009954 <TIM_Base_SetConfig+0x13c>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d00b      	beq.n	8009910 <TIM_Base_SetConfig+0xf8>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a17      	ldr	r2, [pc, #92]	@ (8009958 <TIM_Base_SetConfig+0x140>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d007      	beq.n	8009910 <TIM_Base_SetConfig+0xf8>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a16      	ldr	r2, [pc, #88]	@ (800995c <TIM_Base_SetConfig+0x144>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d003      	beq.n	8009910 <TIM_Base_SetConfig+0xf8>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a15      	ldr	r2, [pc, #84]	@ (8009960 <TIM_Base_SetConfig+0x148>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d103      	bne.n	8009918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	691a      	ldr	r2, [r3, #16]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	2b01      	cmp	r3, #1
 8009928:	d105      	bne.n	8009936 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	f023 0201 	bic.w	r2, r3, #1
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	611a      	str	r2, [r3, #16]
  }
}
 8009936:	bf00      	nop
 8009938:	3714      	adds	r7, #20
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	40010000 	.word	0x40010000
 8009948:	40000400 	.word	0x40000400
 800994c:	40000800 	.word	0x40000800
 8009950:	40000c00 	.word	0x40000c00
 8009954:	40010400 	.word	0x40010400
 8009958:	40014000 	.word	0x40014000
 800995c:	40014400 	.word	0x40014400
 8009960:	40014800 	.word	0x40014800

08009964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009964:	b480      	push	{r7}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6a1b      	ldr	r3, [r3, #32]
 8009978:	f023 0201 	bic.w	r2, r3, #1
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	4b37      	ldr	r3, [pc, #220]	@ (8009a6c <TIM_OC1_SetConfig+0x108>)
 8009990:	4013      	ands	r3, r2
 8009992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f023 0303 	bic.w	r3, r3, #3
 800999a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f023 0302 	bic.w	r3, r3, #2
 80099ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a2d      	ldr	r2, [pc, #180]	@ (8009a70 <TIM_OC1_SetConfig+0x10c>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d00f      	beq.n	80099e0 <TIM_OC1_SetConfig+0x7c>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a2c      	ldr	r2, [pc, #176]	@ (8009a74 <TIM_OC1_SetConfig+0x110>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d00b      	beq.n	80099e0 <TIM_OC1_SetConfig+0x7c>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a2b      	ldr	r2, [pc, #172]	@ (8009a78 <TIM_OC1_SetConfig+0x114>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d007      	beq.n	80099e0 <TIM_OC1_SetConfig+0x7c>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a2a      	ldr	r2, [pc, #168]	@ (8009a7c <TIM_OC1_SetConfig+0x118>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d003      	beq.n	80099e0 <TIM_OC1_SetConfig+0x7c>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a29      	ldr	r2, [pc, #164]	@ (8009a80 <TIM_OC1_SetConfig+0x11c>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d10c      	bne.n	80099fa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	f023 0308 	bic.w	r3, r3, #8
 80099e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	697a      	ldr	r2, [r7, #20]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	f023 0304 	bic.w	r3, r3, #4
 80099f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a1c      	ldr	r2, [pc, #112]	@ (8009a70 <TIM_OC1_SetConfig+0x10c>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d00f      	beq.n	8009a22 <TIM_OC1_SetConfig+0xbe>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a1b      	ldr	r2, [pc, #108]	@ (8009a74 <TIM_OC1_SetConfig+0x110>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d00b      	beq.n	8009a22 <TIM_OC1_SetConfig+0xbe>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8009a78 <TIM_OC1_SetConfig+0x114>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d007      	beq.n	8009a22 <TIM_OC1_SetConfig+0xbe>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a19      	ldr	r2, [pc, #100]	@ (8009a7c <TIM_OC1_SetConfig+0x118>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d003      	beq.n	8009a22 <TIM_OC1_SetConfig+0xbe>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a18      	ldr	r2, [pc, #96]	@ (8009a80 <TIM_OC1_SetConfig+0x11c>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d111      	bne.n	8009a46 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	693a      	ldr	r2, [r7, #16]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	693a      	ldr	r2, [r7, #16]
 8009a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	685a      	ldr	r2, [r3, #4]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	621a      	str	r2, [r3, #32]
}
 8009a60:	bf00      	nop
 8009a62:	371c      	adds	r7, #28
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr
 8009a6c:	fffeff8f 	.word	0xfffeff8f
 8009a70:	40010000 	.word	0x40010000
 8009a74:	40010400 	.word	0x40010400
 8009a78:	40014000 	.word	0x40014000
 8009a7c:	40014400 	.word	0x40014400
 8009a80:	40014800 	.word	0x40014800

08009a84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b087      	sub	sp, #28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	f023 0210 	bic.w	r2, r3, #16
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	699b      	ldr	r3, [r3, #24]
 8009aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	4b34      	ldr	r3, [pc, #208]	@ (8009b80 <TIM_OC2_SetConfig+0xfc>)
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	021b      	lsls	r3, r3, #8
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	f023 0320 	bic.w	r3, r3, #32
 8009ace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	011b      	lsls	r3, r3, #4
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a29      	ldr	r2, [pc, #164]	@ (8009b84 <TIM_OC2_SetConfig+0x100>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d003      	beq.n	8009aec <TIM_OC2_SetConfig+0x68>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a28      	ldr	r2, [pc, #160]	@ (8009b88 <TIM_OC2_SetConfig+0x104>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d10d      	bne.n	8009b08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	011b      	lsls	r3, r3, #4
 8009afa:	697a      	ldr	r2, [r7, #20]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8009b84 <TIM_OC2_SetConfig+0x100>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d00f      	beq.n	8009b30 <TIM_OC2_SetConfig+0xac>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a1d      	ldr	r2, [pc, #116]	@ (8009b88 <TIM_OC2_SetConfig+0x104>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d00b      	beq.n	8009b30 <TIM_OC2_SetConfig+0xac>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8009b8c <TIM_OC2_SetConfig+0x108>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d007      	beq.n	8009b30 <TIM_OC2_SetConfig+0xac>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4a1b      	ldr	r2, [pc, #108]	@ (8009b90 <TIM_OC2_SetConfig+0x10c>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d003      	beq.n	8009b30 <TIM_OC2_SetConfig+0xac>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8009b94 <TIM_OC2_SetConfig+0x110>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d113      	bne.n	8009b58 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009b36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	695b      	ldr	r3, [r3, #20]
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	693a      	ldr	r2, [r7, #16]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	699b      	ldr	r3, [r3, #24]
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	693a      	ldr	r2, [r7, #16]
 8009b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	697a      	ldr	r2, [r7, #20]
 8009b70:	621a      	str	r2, [r3, #32]
}
 8009b72:	bf00      	nop
 8009b74:	371c      	adds	r7, #28
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	feff8fff 	.word	0xfeff8fff
 8009b84:	40010000 	.word	0x40010000
 8009b88:	40010400 	.word	0x40010400
 8009b8c:	40014000 	.word	0x40014000
 8009b90:	40014400 	.word	0x40014400
 8009b94:	40014800 	.word	0x40014800

08009b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a1b      	ldr	r3, [r3, #32]
 8009bac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	4b33      	ldr	r3, [pc, #204]	@ (8009c90 <TIM_OC3_SetConfig+0xf8>)
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f023 0303 	bic.w	r3, r3, #3
 8009bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	021b      	lsls	r3, r3, #8
 8009be8:	697a      	ldr	r2, [r7, #20]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a28      	ldr	r2, [pc, #160]	@ (8009c94 <TIM_OC3_SetConfig+0xfc>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d003      	beq.n	8009bfe <TIM_OC3_SetConfig+0x66>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a27      	ldr	r2, [pc, #156]	@ (8009c98 <TIM_OC3_SetConfig+0x100>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d10d      	bne.n	8009c1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	021b      	lsls	r3, r3, #8
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8009c94 <TIM_OC3_SetConfig+0xfc>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d00f      	beq.n	8009c42 <TIM_OC3_SetConfig+0xaa>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a1c      	ldr	r2, [pc, #112]	@ (8009c98 <TIM_OC3_SetConfig+0x100>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d00b      	beq.n	8009c42 <TIM_OC3_SetConfig+0xaa>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8009c9c <TIM_OC3_SetConfig+0x104>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d007      	beq.n	8009c42 <TIM_OC3_SetConfig+0xaa>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a1a      	ldr	r2, [pc, #104]	@ (8009ca0 <TIM_OC3_SetConfig+0x108>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d003      	beq.n	8009c42 <TIM_OC3_SetConfig+0xaa>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a19      	ldr	r2, [pc, #100]	@ (8009ca4 <TIM_OC3_SetConfig+0x10c>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d113      	bne.n	8009c6a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	011b      	lsls	r3, r3, #4
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	011b      	lsls	r3, r3, #4
 8009c64:	693a      	ldr	r2, [r7, #16]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	697a      	ldr	r2, [r7, #20]
 8009c82:	621a      	str	r2, [r3, #32]
}
 8009c84:	bf00      	nop
 8009c86:	371c      	adds	r7, #28
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr
 8009c90:	fffeff8f 	.word	0xfffeff8f
 8009c94:	40010000 	.word	0x40010000
 8009c98:	40010400 	.word	0x40010400
 8009c9c:	40014000 	.word	0x40014000
 8009ca0:	40014400 	.word	0x40014400
 8009ca4:	40014800 	.word	0x40014800

08009ca8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b087      	sub	sp, #28
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a1b      	ldr	r3, [r3, #32]
 8009cb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a1b      	ldr	r3, [r3, #32]
 8009cbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	69db      	ldr	r3, [r3, #28]
 8009cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	4b24      	ldr	r3, [pc, #144]	@ (8009d64 <TIM_OC4_SetConfig+0xbc>)
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	021b      	lsls	r3, r3, #8
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	031b      	lsls	r3, r3, #12
 8009cfa:	693a      	ldr	r2, [r7, #16]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a19      	ldr	r2, [pc, #100]	@ (8009d68 <TIM_OC4_SetConfig+0xc0>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d00f      	beq.n	8009d28 <TIM_OC4_SetConfig+0x80>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a18      	ldr	r2, [pc, #96]	@ (8009d6c <TIM_OC4_SetConfig+0xc4>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d00b      	beq.n	8009d28 <TIM_OC4_SetConfig+0x80>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a17      	ldr	r2, [pc, #92]	@ (8009d70 <TIM_OC4_SetConfig+0xc8>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d007      	beq.n	8009d28 <TIM_OC4_SetConfig+0x80>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a16      	ldr	r2, [pc, #88]	@ (8009d74 <TIM_OC4_SetConfig+0xcc>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d003      	beq.n	8009d28 <TIM_OC4_SetConfig+0x80>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a15      	ldr	r2, [pc, #84]	@ (8009d78 <TIM_OC4_SetConfig+0xd0>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d109      	bne.n	8009d3c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	019b      	lsls	r3, r3, #6
 8009d36:	697a      	ldr	r2, [r7, #20]
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	621a      	str	r2, [r3, #32]
}
 8009d56:	bf00      	nop
 8009d58:	371c      	adds	r7, #28
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	feff8fff 	.word	0xfeff8fff
 8009d68:	40010000 	.word	0x40010000
 8009d6c:	40010400 	.word	0x40010400
 8009d70:	40014000 	.word	0x40014000
 8009d74:	40014400 	.word	0x40014400
 8009d78:	40014800 	.word	0x40014800

08009d7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b087      	sub	sp, #28
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6a1b      	ldr	r3, [r3, #32]
 8009d8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a1b      	ldr	r3, [r3, #32]
 8009d90:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	4b21      	ldr	r3, [pc, #132]	@ (8009e2c <TIM_OC5_SetConfig+0xb0>)
 8009da8:	4013      	ands	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009dbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	041b      	lsls	r3, r3, #16
 8009dc4:	693a      	ldr	r2, [r7, #16]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a18      	ldr	r2, [pc, #96]	@ (8009e30 <TIM_OC5_SetConfig+0xb4>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d00f      	beq.n	8009df2 <TIM_OC5_SetConfig+0x76>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a17      	ldr	r2, [pc, #92]	@ (8009e34 <TIM_OC5_SetConfig+0xb8>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d00b      	beq.n	8009df2 <TIM_OC5_SetConfig+0x76>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a16      	ldr	r2, [pc, #88]	@ (8009e38 <TIM_OC5_SetConfig+0xbc>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d007      	beq.n	8009df2 <TIM_OC5_SetConfig+0x76>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a15      	ldr	r2, [pc, #84]	@ (8009e3c <TIM_OC5_SetConfig+0xc0>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d003      	beq.n	8009df2 <TIM_OC5_SetConfig+0x76>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a14      	ldr	r2, [pc, #80]	@ (8009e40 <TIM_OC5_SetConfig+0xc4>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d109      	bne.n	8009e06 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009df8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	021b      	lsls	r3, r3, #8
 8009e00:	697a      	ldr	r2, [r7, #20]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	697a      	ldr	r2, [r7, #20]
 8009e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	685a      	ldr	r2, [r3, #4]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	621a      	str	r2, [r3, #32]
}
 8009e20:	bf00      	nop
 8009e22:	371c      	adds	r7, #28
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	fffeff8f 	.word	0xfffeff8f
 8009e30:	40010000 	.word	0x40010000
 8009e34:	40010400 	.word	0x40010400
 8009e38:	40014000 	.word	0x40014000
 8009e3c:	40014400 	.word	0x40014400
 8009e40:	40014800 	.word	0x40014800

08009e44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b087      	sub	sp, #28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6a1b      	ldr	r3, [r3, #32]
 8009e58:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	4b22      	ldr	r3, [pc, #136]	@ (8009ef8 <TIM_OC6_SetConfig+0xb4>)
 8009e70:	4013      	ands	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	021b      	lsls	r3, r3, #8
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	051b      	lsls	r3, r3, #20
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a19      	ldr	r2, [pc, #100]	@ (8009efc <TIM_OC6_SetConfig+0xb8>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d00f      	beq.n	8009ebc <TIM_OC6_SetConfig+0x78>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a18      	ldr	r2, [pc, #96]	@ (8009f00 <TIM_OC6_SetConfig+0xbc>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d00b      	beq.n	8009ebc <TIM_OC6_SetConfig+0x78>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a17      	ldr	r2, [pc, #92]	@ (8009f04 <TIM_OC6_SetConfig+0xc0>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d007      	beq.n	8009ebc <TIM_OC6_SetConfig+0x78>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a16      	ldr	r2, [pc, #88]	@ (8009f08 <TIM_OC6_SetConfig+0xc4>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d003      	beq.n	8009ebc <TIM_OC6_SetConfig+0x78>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a15      	ldr	r2, [pc, #84]	@ (8009f0c <TIM_OC6_SetConfig+0xc8>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d109      	bne.n	8009ed0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	695b      	ldr	r3, [r3, #20]
 8009ec8:	029b      	lsls	r3, r3, #10
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	697a      	ldr	r2, [r7, #20]
 8009ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	621a      	str	r2, [r3, #32]
}
 8009eea:	bf00      	nop
 8009eec:	371c      	adds	r7, #28
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	feff8fff 	.word	0xfeff8fff
 8009efc:	40010000 	.word	0x40010000
 8009f00:	40010400 	.word	0x40010400
 8009f04:	40014000 	.word	0x40014000
 8009f08:	40014400 	.word	0x40014400
 8009f0c:	40014800 	.word	0x40014800

08009f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b087      	sub	sp, #28
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6a1b      	ldr	r3, [r3, #32]
 8009f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6a1b      	ldr	r3, [r3, #32]
 8009f26:	f023 0201 	bic.w	r2, r3, #1
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	011b      	lsls	r3, r3, #4
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	f023 030a 	bic.w	r3, r3, #10
 8009f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f4e:	697a      	ldr	r2, [r7, #20]
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	693a      	ldr	r2, [r7, #16]
 8009f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	621a      	str	r2, [r3, #32]
}
 8009f62:	bf00      	nop
 8009f64:	371c      	adds	r7, #28
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr

08009f6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f6e:	b480      	push	{r7}
 8009f70:	b087      	sub	sp, #28
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	60f8      	str	r0, [r7, #12]
 8009f76:	60b9      	str	r1, [r7, #8]
 8009f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6a1b      	ldr	r3, [r3, #32]
 8009f84:	f023 0210 	bic.w	r2, r3, #16
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009f98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	031b      	lsls	r3, r3, #12
 8009f9e:	693a      	ldr	r2, [r7, #16]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009faa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	011b      	lsls	r3, r3, #4
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	621a      	str	r2, [r3, #32]
}
 8009fc2:	bf00      	nop
 8009fc4:	371c      	adds	r7, #28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
	...

08009fd0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	4b09      	ldr	r3, [pc, #36]	@ (800a008 <TIM_ITRx_SetConfig+0x38>)
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	f043 0307 	orr.w	r3, r3, #7
 8009ff2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	609a      	str	r2, [r3, #8]
}
 8009ffa:	bf00      	nop
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	ffcfff8f 	.word	0xffcfff8f

0800a00c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
 800a018:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a026:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	021a      	lsls	r2, r3, #8
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	431a      	orrs	r2, r3
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	4313      	orrs	r3, r2
 800a034:	697a      	ldr	r2, [r7, #20]
 800a036:	4313      	orrs	r3, r2
 800a038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	609a      	str	r2, [r3, #8]
}
 800a040:	bf00      	nop
 800a042:	371c      	adds	r7, #28
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b087      	sub	sp, #28
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	f003 031f 	and.w	r3, r3, #31
 800a05e:	2201      	movs	r2, #1
 800a060:	fa02 f303 	lsl.w	r3, r2, r3
 800a064:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6a1a      	ldr	r2, [r3, #32]
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	43db      	mvns	r3, r3
 800a06e:	401a      	ands	r2, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6a1a      	ldr	r2, [r3, #32]
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	f003 031f 	and.w	r3, r3, #31
 800a07e:	6879      	ldr	r1, [r7, #4]
 800a080:	fa01 f303 	lsl.w	r3, r1, r3
 800a084:	431a      	orrs	r2, r3
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	621a      	str	r2, [r3, #32]
}
 800a08a:	bf00      	nop
 800a08c:	371c      	adds	r7, #28
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
	...

0800a098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d101      	bne.n	800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0ac:	2302      	movs	r3, #2
 800a0ae:	e06d      	b.n	800a18c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2202      	movs	r2, #2
 800a0bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a30      	ldr	r2, [pc, #192]	@ (800a198 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d004      	beq.n	800a0e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a2f      	ldr	r2, [pc, #188]	@ (800a19c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d108      	bne.n	800a0f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a0ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	4313      	orrs	r3, r2
 800a106:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a20      	ldr	r2, [pc, #128]	@ (800a198 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d022      	beq.n	800a160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a122:	d01d      	beq.n	800a160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a1d      	ldr	r2, [pc, #116]	@ (800a1a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d018      	beq.n	800a160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a1c      	ldr	r2, [pc, #112]	@ (800a1a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d013      	beq.n	800a160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a1a      	ldr	r2, [pc, #104]	@ (800a1a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d00e      	beq.n	800a160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a15      	ldr	r2, [pc, #84]	@ (800a19c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d009      	beq.n	800a160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a16      	ldr	r2, [pc, #88]	@ (800a1ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d004      	beq.n	800a160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a15      	ldr	r2, [pc, #84]	@ (800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d10c      	bne.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a166:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	4313      	orrs	r3, r2
 800a170:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	40010000 	.word	0x40010000
 800a19c:	40010400 	.word	0x40010400
 800a1a0:	40000400 	.word	0x40000400
 800a1a4:	40000800 	.word	0x40000800
 800a1a8:	40000c00 	.word	0x40000c00
 800a1ac:	40001800 	.word	0x40001800
 800a1b0:	40014000 	.word	0x40014000

0800a1b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d101      	bne.n	800a1d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	e065      	b.n	800a29c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	695b      	ldr	r3, [r3, #20]
 800a228:	4313      	orrs	r3, r2
 800a22a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a236:	4313      	orrs	r3, r2
 800a238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	041b      	lsls	r3, r3, #16
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a16      	ldr	r2, [pc, #88]	@ (800a2a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d004      	beq.n	800a25e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a14      	ldr	r2, [pc, #80]	@ (800a2ac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d115      	bne.n	800a28a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a268:	051b      	lsls	r3, r3, #20
 800a26a:	4313      	orrs	r3, r2
 800a26c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	69db      	ldr	r3, [r3, #28]
 800a278:	4313      	orrs	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	4313      	orrs	r3, r2
 800a288:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr
 800a2a8:	40010000 	.word	0x40010000
 800a2ac:	40010400 	.word	0x40010400

0800a2b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2b8:	bf00      	nop
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <__NVIC_SetPriority>:
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	6039      	str	r1, [r7, #0]
 800a2f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a2f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	db0a      	blt.n	800a316 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	b2da      	uxtb	r2, r3
 800a304:	490c      	ldr	r1, [pc, #48]	@ (800a338 <__NVIC_SetPriority+0x4c>)
 800a306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a30a:	0112      	lsls	r2, r2, #4
 800a30c:	b2d2      	uxtb	r2, r2
 800a30e:	440b      	add	r3, r1
 800a310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a314:	e00a      	b.n	800a32c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	4908      	ldr	r1, [pc, #32]	@ (800a33c <__NVIC_SetPriority+0x50>)
 800a31c:	88fb      	ldrh	r3, [r7, #6]
 800a31e:	f003 030f 	and.w	r3, r3, #15
 800a322:	3b04      	subs	r3, #4
 800a324:	0112      	lsls	r2, r2, #4
 800a326:	b2d2      	uxtb	r2, r2
 800a328:	440b      	add	r3, r1
 800a32a:	761a      	strb	r2, [r3, #24]
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr
 800a338:	e000e100 	.word	0xe000e100
 800a33c:	e000ed00 	.word	0xe000ed00

0800a340 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a340:	b580      	push	{r7, lr}
 800a342:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a344:	4b05      	ldr	r3, [pc, #20]	@ (800a35c <SysTick_Handler+0x1c>)
 800a346:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a348:	f001 fd18 	bl	800bd7c <xTaskGetSchedulerState>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d001      	beq.n	800a356 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a352:	f002 fb11 	bl	800c978 <xPortSysTickHandler>
  }
}
 800a356:	bf00      	nop
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	e000e010 	.word	0xe000e010

0800a360 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a360:	b580      	push	{r7, lr}
 800a362:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a364:	2100      	movs	r1, #0
 800a366:	f06f 0004 	mvn.w	r0, #4
 800a36a:	f7ff ffbf 	bl	800a2ec <__NVIC_SetPriority>
#endif
}
 800a36e:	bf00      	nop
 800a370:	bd80      	pop	{r7, pc}
	...

0800a374 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a37a:	f3ef 8305 	mrs	r3, IPSR
 800a37e:	603b      	str	r3, [r7, #0]
  return(result);
 800a380:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a382:	2b00      	cmp	r3, #0
 800a384:	d003      	beq.n	800a38e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a386:	f06f 0305 	mvn.w	r3, #5
 800a38a:	607b      	str	r3, [r7, #4]
 800a38c:	e00c      	b.n	800a3a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a38e:	4b0a      	ldr	r3, [pc, #40]	@ (800a3b8 <osKernelInitialize+0x44>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d105      	bne.n	800a3a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a396:	4b08      	ldr	r3, [pc, #32]	@ (800a3b8 <osKernelInitialize+0x44>)
 800a398:	2201      	movs	r2, #1
 800a39a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	607b      	str	r3, [r7, #4]
 800a3a0:	e002      	b.n	800a3a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a3a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a3a8:	687b      	ldr	r3, [r7, #4]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	24000500 	.word	0x24000500

0800a3bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3c2:	f3ef 8305 	mrs	r3, IPSR
 800a3c6:	603b      	str	r3, [r7, #0]
  return(result);
 800a3c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a3ce:	f06f 0305 	mvn.w	r3, #5
 800a3d2:	607b      	str	r3, [r7, #4]
 800a3d4:	e010      	b.n	800a3f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a3d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a404 <osKernelStart+0x48>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d109      	bne.n	800a3f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a3de:	f7ff ffbf 	bl	800a360 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a3e2:	4b08      	ldr	r3, [pc, #32]	@ (800a404 <osKernelStart+0x48>)
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a3e8:	f001 f87a 	bl	800b4e0 <vTaskStartScheduler>
      stat = osOK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	607b      	str	r3, [r7, #4]
 800a3f0:	e002      	b.n	800a3f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a3f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a3f8:	687b      	ldr	r3, [r7, #4]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	24000500 	.word	0x24000500

0800a408 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a408:	b580      	push	{r7, lr}
 800a40a:	b08e      	sub	sp, #56	@ 0x38
 800a40c:	af04      	add	r7, sp, #16
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a414:	2300      	movs	r3, #0
 800a416:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a418:	f3ef 8305 	mrs	r3, IPSR
 800a41c:	617b      	str	r3, [r7, #20]
  return(result);
 800a41e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a420:	2b00      	cmp	r3, #0
 800a422:	d17e      	bne.n	800a522 <osThreadNew+0x11a>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d07b      	beq.n	800a522 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a42a:	2380      	movs	r3, #128	@ 0x80
 800a42c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a42e:	2318      	movs	r3, #24
 800a430:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a432:	2300      	movs	r3, #0
 800a434:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a436:	f04f 33ff 	mov.w	r3, #4294967295
 800a43a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d045      	beq.n	800a4ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d002      	beq.n	800a450 <osThreadNew+0x48>
        name = attr->name;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d008      	beq.n	800a476 <osThreadNew+0x6e>
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	2b38      	cmp	r3, #56	@ 0x38
 800a468:	d805      	bhi.n	800a476 <osThreadNew+0x6e>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	f003 0301 	and.w	r3, r3, #1
 800a472:	2b00      	cmp	r3, #0
 800a474:	d001      	beq.n	800a47a <osThreadNew+0x72>
        return (NULL);
 800a476:	2300      	movs	r3, #0
 800a478:	e054      	b.n	800a524 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	695b      	ldr	r3, [r3, #20]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d003      	beq.n	800a48a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	695b      	ldr	r3, [r3, #20]
 800a486:	089b      	lsrs	r3, r3, #2
 800a488:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00e      	beq.n	800a4b0 <osThreadNew+0xa8>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	2b5b      	cmp	r3, #91	@ 0x5b
 800a498:	d90a      	bls.n	800a4b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d006      	beq.n	800a4b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	695b      	ldr	r3, [r3, #20]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d002      	beq.n	800a4b0 <osThreadNew+0xa8>
        mem = 1;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	61bb      	str	r3, [r7, #24]
 800a4ae:	e010      	b.n	800a4d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10c      	bne.n	800a4d2 <osThreadNew+0xca>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d108      	bne.n	800a4d2 <osThreadNew+0xca>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d104      	bne.n	800a4d2 <osThreadNew+0xca>
          mem = 0;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	61bb      	str	r3, [r7, #24]
 800a4cc:	e001      	b.n	800a4d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d110      	bne.n	800a4fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a4e0:	9202      	str	r2, [sp, #8]
 800a4e2:	9301      	str	r3, [sp, #4]
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	9300      	str	r3, [sp, #0]
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	6a3a      	ldr	r2, [r7, #32]
 800a4ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f000 fe1a 	bl	800b128 <xTaskCreateStatic>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	613b      	str	r3, [r7, #16]
 800a4f8:	e013      	b.n	800a522 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d110      	bne.n	800a522 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a500:	6a3b      	ldr	r3, [r7, #32]
 800a502:	b29a      	uxth	r2, r3
 800a504:	f107 0310 	add.w	r3, r7, #16
 800a508:	9301      	str	r3, [sp, #4]
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	9300      	str	r3, [sp, #0]
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f000 fe68 	bl	800b1e8 <xTaskCreate>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d001      	beq.n	800a522 <osThreadNew+0x11a>
            hTask = NULL;
 800a51e:	2300      	movs	r3, #0
 800a520:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a522:	693b      	ldr	r3, [r7, #16]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3728      	adds	r7, #40	@ 0x28
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a534:	f3ef 8305 	mrs	r3, IPSR
 800a538:	60bb      	str	r3, [r7, #8]
  return(result);
 800a53a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d003      	beq.n	800a548 <osDelay+0x1c>
    stat = osErrorISR;
 800a540:	f06f 0305 	mvn.w	r3, #5
 800a544:	60fb      	str	r3, [r7, #12]
 800a546:	e007      	b.n	800a558 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a548:	2300      	movs	r3, #0
 800a54a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d002      	beq.n	800a558 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 ff8e 	bl	800b474 <vTaskDelay>
    }
  }

  return (stat);
 800a558:	68fb      	ldr	r3, [r7, #12]
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
	...

0800a564 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	4a07      	ldr	r2, [pc, #28]	@ (800a590 <vApplicationGetIdleTaskMemory+0x2c>)
 800a574:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	4a06      	ldr	r2, [pc, #24]	@ (800a594 <vApplicationGetIdleTaskMemory+0x30>)
 800a57a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2280      	movs	r2, #128	@ 0x80
 800a580:	601a      	str	r2, [r3, #0]
}
 800a582:	bf00      	nop
 800a584:	3714      	adds	r7, #20
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	24000504 	.word	0x24000504
 800a594:	24000560 	.word	0x24000560

0800a598 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	4a07      	ldr	r2, [pc, #28]	@ (800a5c4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a5a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	4a06      	ldr	r2, [pc, #24]	@ (800a5c8 <vApplicationGetTimerTaskMemory+0x30>)
 800a5ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a5b6:	601a      	str	r2, [r3, #0]
}
 800a5b8:	bf00      	nop
 800a5ba:	3714      	adds	r7, #20
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr
 800a5c4:	24000760 	.word	0x24000760
 800a5c8:	240007bc 	.word	0x240007bc

0800a5cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f103 0208 	add.w	r2, r3, #8
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f103 0208 	add.w	r2, r3, #8
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f103 0208 	add.w	r2, r3, #8
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a61a:	bf00      	nop
 800a61c:	370c      	adds	r7, #12
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a626:	b480      	push	{r7}
 800a628:	b085      	sub	sp, #20
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	689a      	ldr	r2, [r3, #8]
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	683a      	ldr	r2, [r7, #0]
 800a64a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	683a      	ldr	r2, [r7, #0]
 800a650:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	1c5a      	adds	r2, r3, #1
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	601a      	str	r2, [r3, #0]
}
 800a662:	bf00      	nop
 800a664:	3714      	adds	r7, #20
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a66e:	b480      	push	{r7}
 800a670:	b085      	sub	sp, #20
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a684:	d103      	bne.n	800a68e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	60fb      	str	r3, [r7, #12]
 800a68c:	e00c      	b.n	800a6a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	3308      	adds	r3, #8
 800a692:	60fb      	str	r3, [r7, #12]
 800a694:	e002      	b.n	800a69c <vListInsert+0x2e>
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	60fb      	str	r3, [r7, #12]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68ba      	ldr	r2, [r7, #8]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d2f6      	bcs.n	800a696 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	1c5a      	adds	r2, r3, #1
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	601a      	str	r2, [r3, #0]
}
 800a6d4:	bf00      	nop
 800a6d6:	3714      	adds	r7, #20
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b085      	sub	sp, #20
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	691b      	ldr	r3, [r3, #16]
 800a6ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	6892      	ldr	r2, [r2, #8]
 800a6f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	6852      	ldr	r2, [r2, #4]
 800a700:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d103      	bne.n	800a714 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	689a      	ldr	r2, [r3, #8]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	1e5a      	subs	r2, r3, #1
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10b      	bne.n	800a760 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a74c:	f383 8811 	msr	BASEPRI, r3
 800a750:	f3bf 8f6f 	isb	sy
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a75a:	bf00      	nop
 800a75c:	bf00      	nop
 800a75e:	e7fd      	b.n	800a75c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a760:	f002 f87a 	bl	800c858 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a76c:	68f9      	ldr	r1, [r7, #12]
 800a76e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a770:	fb01 f303 	mul.w	r3, r1, r3
 800a774:	441a      	add	r2, r3
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a790:	3b01      	subs	r3, #1
 800a792:	68f9      	ldr	r1, [r7, #12]
 800a794:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a796:	fb01 f303 	mul.w	r3, r1, r3
 800a79a:	441a      	add	r2, r3
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	22ff      	movs	r2, #255	@ 0xff
 800a7a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	22ff      	movs	r2, #255	@ 0xff
 800a7ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d114      	bne.n	800a7e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d01a      	beq.n	800a7f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	3310      	adds	r3, #16
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f001 f91a 	bl	800b9fc <xTaskRemoveFromEventList>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d012      	beq.n	800a7f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a7ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a804 <xQueueGenericReset+0xd0>)
 800a7d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7d4:	601a      	str	r2, [r3, #0]
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	f3bf 8f6f 	isb	sy
 800a7de:	e009      	b.n	800a7f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	3310      	adds	r3, #16
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7ff fef1 	bl	800a5cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	3324      	adds	r3, #36	@ 0x24
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7ff feec 	bl	800a5cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a7f4:	f002 f862 	bl	800c8bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a7f8:	2301      	movs	r3, #1
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	e000ed04 	.word	0xe000ed04

0800a808 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b08e      	sub	sp, #56	@ 0x38
 800a80c:	af02      	add	r7, sp, #8
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	607a      	str	r2, [r7, #4]
 800a814:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d10b      	bne.n	800a834 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a820:	f383 8811 	msr	BASEPRI, r3
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a82e:	bf00      	nop
 800a830:	bf00      	nop
 800a832:	e7fd      	b.n	800a830 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10b      	bne.n	800a852 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a83a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a84c:	bf00      	nop
 800a84e:	bf00      	nop
 800a850:	e7fd      	b.n	800a84e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d002      	beq.n	800a85e <xQueueGenericCreateStatic+0x56>
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <xQueueGenericCreateStatic+0x5a>
 800a85e:	2301      	movs	r3, #1
 800a860:	e000      	b.n	800a864 <xQueueGenericCreateStatic+0x5c>
 800a862:	2300      	movs	r3, #0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10b      	bne.n	800a880 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a86c:	f383 8811 	msr	BASEPRI, r3
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	623b      	str	r3, [r7, #32]
}
 800a87a:	bf00      	nop
 800a87c:	bf00      	nop
 800a87e:	e7fd      	b.n	800a87c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d102      	bne.n	800a88c <xQueueGenericCreateStatic+0x84>
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d101      	bne.n	800a890 <xQueueGenericCreateStatic+0x88>
 800a88c:	2301      	movs	r3, #1
 800a88e:	e000      	b.n	800a892 <xQueueGenericCreateStatic+0x8a>
 800a890:	2300      	movs	r3, #0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10b      	bne.n	800a8ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89a:	f383 8811 	msr	BASEPRI, r3
 800a89e:	f3bf 8f6f 	isb	sy
 800a8a2:	f3bf 8f4f 	dsb	sy
 800a8a6:	61fb      	str	r3, [r7, #28]
}
 800a8a8:	bf00      	nop
 800a8aa:	bf00      	nop
 800a8ac:	e7fd      	b.n	800a8aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a8ae:	2350      	movs	r3, #80	@ 0x50
 800a8b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	2b50      	cmp	r3, #80	@ 0x50
 800a8b6:	d00b      	beq.n	800a8d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8bc:	f383 8811 	msr	BASEPRI, r3
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	61bb      	str	r3, [r7, #24]
}
 800a8ca:	bf00      	nop
 800a8cc:	bf00      	nop
 800a8ce:	e7fd      	b.n	800a8cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a8d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a8d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00d      	beq.n	800a8f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a8e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	68b9      	ldr	r1, [r7, #8]
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f000 f805 	bl	800a902 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3730      	adds	r7, #48	@ 0x30
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	60f8      	str	r0, [r7, #12]
 800a90a:	60b9      	str	r1, [r7, #8]
 800a90c:	607a      	str	r2, [r7, #4]
 800a90e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d103      	bne.n	800a91e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	69ba      	ldr	r2, [r7, #24]
 800a91a:	601a      	str	r2, [r3, #0]
 800a91c:	e002      	b.n	800a924 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	68ba      	ldr	r2, [r7, #8]
 800a92e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a930:	2101      	movs	r1, #1
 800a932:	69b8      	ldr	r0, [r7, #24]
 800a934:	f7ff fefe 	bl	800a734 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	78fa      	ldrb	r2, [r7, #3]
 800a93c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a940:	bf00      	nop
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b08e      	sub	sp, #56	@ 0x38
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
 800a954:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a956:	2300      	movs	r3, #0
 800a958:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10b      	bne.n	800a97c <xQueueGenericSend+0x34>
	__asm volatile
 800a964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a976:	bf00      	nop
 800a978:	bf00      	nop
 800a97a:	e7fd      	b.n	800a978 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d103      	bne.n	800a98a <xQueueGenericSend+0x42>
 800a982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a986:	2b00      	cmp	r3, #0
 800a988:	d101      	bne.n	800a98e <xQueueGenericSend+0x46>
 800a98a:	2301      	movs	r3, #1
 800a98c:	e000      	b.n	800a990 <xQueueGenericSend+0x48>
 800a98e:	2300      	movs	r3, #0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10b      	bne.n	800a9ac <xQueueGenericSend+0x64>
	__asm volatile
 800a994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a9a6:	bf00      	nop
 800a9a8:	bf00      	nop
 800a9aa:	e7fd      	b.n	800a9a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d103      	bne.n	800a9ba <xQueueGenericSend+0x72>
 800a9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d101      	bne.n	800a9be <xQueueGenericSend+0x76>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e000      	b.n	800a9c0 <xQueueGenericSend+0x78>
 800a9be:	2300      	movs	r3, #0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10b      	bne.n	800a9dc <xQueueGenericSend+0x94>
	__asm volatile
 800a9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c8:	f383 8811 	msr	BASEPRI, r3
 800a9cc:	f3bf 8f6f 	isb	sy
 800a9d0:	f3bf 8f4f 	dsb	sy
 800a9d4:	623b      	str	r3, [r7, #32]
}
 800a9d6:	bf00      	nop
 800a9d8:	bf00      	nop
 800a9da:	e7fd      	b.n	800a9d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9dc:	f001 f9ce 	bl	800bd7c <xTaskGetSchedulerState>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d102      	bne.n	800a9ec <xQueueGenericSend+0xa4>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d101      	bne.n	800a9f0 <xQueueGenericSend+0xa8>
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e000      	b.n	800a9f2 <xQueueGenericSend+0xaa>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10b      	bne.n	800aa0e <xQueueGenericSend+0xc6>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	61fb      	str	r3, [r7, #28]
}
 800aa08:	bf00      	nop
 800aa0a:	bf00      	nop
 800aa0c:	e7fd      	b.n	800aa0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa0e:	f001 ff23 	bl	800c858 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d302      	bcc.n	800aa24 <xQueueGenericSend+0xdc>
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d129      	bne.n	800aa78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa24:	683a      	ldr	r2, [r7, #0]
 800aa26:	68b9      	ldr	r1, [r7, #8]
 800aa28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa2a:	f000 fa0f 	bl	800ae4c <prvCopyDataToQueue>
 800aa2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d010      	beq.n	800aa5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3a:	3324      	adds	r3, #36	@ 0x24
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 ffdd 	bl	800b9fc <xTaskRemoveFromEventList>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d013      	beq.n	800aa70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aa48:	4b3f      	ldr	r3, [pc, #252]	@ (800ab48 <xQueueGenericSend+0x200>)
 800aa4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa4e:	601a      	str	r2, [r3, #0]
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	e00a      	b.n	800aa70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aa5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d007      	beq.n	800aa70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aa60:	4b39      	ldr	r3, [pc, #228]	@ (800ab48 <xQueueGenericSend+0x200>)
 800aa62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa66:	601a      	str	r2, [r3, #0]
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aa70:	f001 ff24 	bl	800c8bc <vPortExitCritical>
				return pdPASS;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e063      	b.n	800ab40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d103      	bne.n	800aa86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa7e:	f001 ff1d 	bl	800c8bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aa82:	2300      	movs	r3, #0
 800aa84:	e05c      	b.n	800ab40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d106      	bne.n	800aa9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa8c:	f107 0314 	add.w	r3, r7, #20
 800aa90:	4618      	mov	r0, r3
 800aa92:	f001 f817 	bl	800bac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa96:	2301      	movs	r3, #1
 800aa98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa9a:	f001 ff0f 	bl	800c8bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa9e:	f000 fd87 	bl	800b5b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aaa2:	f001 fed9 	bl	800c858 <vPortEnterCritical>
 800aaa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aaac:	b25b      	sxtb	r3, r3
 800aaae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab2:	d103      	bne.n	800aabc <xQueueGenericSend+0x174>
 800aab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aabc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aabe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aac2:	b25b      	sxtb	r3, r3
 800aac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac8:	d103      	bne.n	800aad2 <xQueueGenericSend+0x18a>
 800aaca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aad2:	f001 fef3 	bl	800c8bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aad6:	1d3a      	adds	r2, r7, #4
 800aad8:	f107 0314 	add.w	r3, r7, #20
 800aadc:	4611      	mov	r1, r2
 800aade:	4618      	mov	r0, r3
 800aae0:	f001 f806 	bl	800baf0 <xTaskCheckForTimeOut>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d124      	bne.n	800ab34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aaea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aaec:	f000 faa6 	bl	800b03c <prvIsQueueFull>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d018      	beq.n	800ab28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf8:	3310      	adds	r3, #16
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	4611      	mov	r1, r2
 800aafe:	4618      	mov	r0, r3
 800ab00:	f000 ff2a 	bl	800b958 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ab04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab06:	f000 fa31 	bl	800af6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ab0a:	f000 fd5f 	bl	800b5cc <xTaskResumeAll>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f47f af7c 	bne.w	800aa0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ab16:	4b0c      	ldr	r3, [pc, #48]	@ (800ab48 <xQueueGenericSend+0x200>)
 800ab18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab1c:	601a      	str	r2, [r3, #0]
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	e772      	b.n	800aa0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ab28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab2a:	f000 fa1f 	bl	800af6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab2e:	f000 fd4d 	bl	800b5cc <xTaskResumeAll>
 800ab32:	e76c      	b.n	800aa0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ab34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab36:	f000 fa19 	bl	800af6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab3a:	f000 fd47 	bl	800b5cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ab3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3738      	adds	r7, #56	@ 0x38
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	e000ed04 	.word	0xe000ed04

0800ab4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b090      	sub	sp, #64	@ 0x40
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
 800ab58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ab5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d10b      	bne.n	800ab7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ab64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ab76:	bf00      	nop
 800ab78:	bf00      	nop
 800ab7a:	e7fd      	b.n	800ab78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d103      	bne.n	800ab8a <xQueueGenericSendFromISR+0x3e>
 800ab82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d101      	bne.n	800ab8e <xQueueGenericSendFromISR+0x42>
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e000      	b.n	800ab90 <xQueueGenericSendFromISR+0x44>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10b      	bne.n	800abac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ab94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab98:	f383 8811 	msr	BASEPRI, r3
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aba6:	bf00      	nop
 800aba8:	bf00      	nop
 800abaa:	e7fd      	b.n	800aba8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d103      	bne.n	800abba <xQueueGenericSendFromISR+0x6e>
 800abb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d101      	bne.n	800abbe <xQueueGenericSendFromISR+0x72>
 800abba:	2301      	movs	r3, #1
 800abbc:	e000      	b.n	800abc0 <xQueueGenericSendFromISR+0x74>
 800abbe:	2300      	movs	r3, #0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10b      	bne.n	800abdc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800abc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc8:	f383 8811 	msr	BASEPRI, r3
 800abcc:	f3bf 8f6f 	isb	sy
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	623b      	str	r3, [r7, #32]
}
 800abd6:	bf00      	nop
 800abd8:	bf00      	nop
 800abda:	e7fd      	b.n	800abd8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abdc:	f001 ff1c 	bl	800ca18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800abe0:	f3ef 8211 	mrs	r2, BASEPRI
 800abe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	61fa      	str	r2, [r7, #28]
 800abf6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800abf8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abfa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800abfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d302      	bcc.n	800ac0e <xQueueGenericSendFromISR+0xc2>
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d12f      	bne.n	800ac6e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ac0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	68b9      	ldr	r1, [r7, #8]
 800ac22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ac24:	f000 f912 	bl	800ae4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac28:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ac2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac30:	d112      	bne.n	800ac58 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d016      	beq.n	800ac68 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3c:	3324      	adds	r3, #36	@ 0x24
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f000 fedc 	bl	800b9fc <xTaskRemoveFromEventList>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00e      	beq.n	800ac68 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d00b      	beq.n	800ac68 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	601a      	str	r2, [r3, #0]
 800ac56:	e007      	b.n	800ac68 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	b25a      	sxtb	r2, r3
 800ac62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ac6c:	e001      	b.n	800ac72 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac74:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3740      	adds	r7, #64	@ 0x40
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b08c      	sub	sp, #48	@ 0x30
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac94:	2300      	movs	r3, #0
 800ac96:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10b      	bne.n	800acba <xQueueReceive+0x32>
	__asm volatile
 800aca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca6:	f383 8811 	msr	BASEPRI, r3
 800acaa:	f3bf 8f6f 	isb	sy
 800acae:	f3bf 8f4f 	dsb	sy
 800acb2:	623b      	str	r3, [r7, #32]
}
 800acb4:	bf00      	nop
 800acb6:	bf00      	nop
 800acb8:	e7fd      	b.n	800acb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d103      	bne.n	800acc8 <xQueueReceive+0x40>
 800acc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d101      	bne.n	800accc <xQueueReceive+0x44>
 800acc8:	2301      	movs	r3, #1
 800acca:	e000      	b.n	800acce <xQueueReceive+0x46>
 800accc:	2300      	movs	r3, #0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d10b      	bne.n	800acea <xQueueReceive+0x62>
	__asm volatile
 800acd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd6:	f383 8811 	msr	BASEPRI, r3
 800acda:	f3bf 8f6f 	isb	sy
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	61fb      	str	r3, [r7, #28]
}
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop
 800ace8:	e7fd      	b.n	800ace6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acea:	f001 f847 	bl	800bd7c <xTaskGetSchedulerState>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d102      	bne.n	800acfa <xQueueReceive+0x72>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d101      	bne.n	800acfe <xQueueReceive+0x76>
 800acfa:	2301      	movs	r3, #1
 800acfc:	e000      	b.n	800ad00 <xQueueReceive+0x78>
 800acfe:	2300      	movs	r3, #0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10b      	bne.n	800ad1c <xQueueReceive+0x94>
	__asm volatile
 800ad04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad08:	f383 8811 	msr	BASEPRI, r3
 800ad0c:	f3bf 8f6f 	isb	sy
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	61bb      	str	r3, [r7, #24]
}
 800ad16:	bf00      	nop
 800ad18:	bf00      	nop
 800ad1a:	e7fd      	b.n	800ad18 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad1c:	f001 fd9c 	bl	800c858 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad24:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d01f      	beq.n	800ad6c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad2c:	68b9      	ldr	r1, [r7, #8]
 800ad2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad30:	f000 f8f6 	bl	800af20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad36:	1e5a      	subs	r2, r3, #1
 800ad38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad3a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00f      	beq.n	800ad64 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad46:	3310      	adds	r3, #16
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f000 fe57 	bl	800b9fc <xTaskRemoveFromEventList>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d007      	beq.n	800ad64 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad54:	4b3c      	ldr	r3, [pc, #240]	@ (800ae48 <xQueueReceive+0x1c0>)
 800ad56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad5a:	601a      	str	r2, [r3, #0]
 800ad5c:	f3bf 8f4f 	dsb	sy
 800ad60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad64:	f001 fdaa 	bl	800c8bc <vPortExitCritical>
				return pdPASS;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e069      	b.n	800ae40 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d103      	bne.n	800ad7a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad72:	f001 fda3 	bl	800c8bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad76:	2300      	movs	r3, #0
 800ad78:	e062      	b.n	800ae40 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d106      	bne.n	800ad8e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad80:	f107 0310 	add.w	r3, r7, #16
 800ad84:	4618      	mov	r0, r3
 800ad86:	f000 fe9d 	bl	800bac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad8e:	f001 fd95 	bl	800c8bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad92:	f000 fc0d 	bl	800b5b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad96:	f001 fd5f 	bl	800c858 <vPortEnterCritical>
 800ad9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ada0:	b25b      	sxtb	r3, r3
 800ada2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada6:	d103      	bne.n	800adb0 <xQueueReceive+0x128>
 800ada8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adaa:	2200      	movs	r2, #0
 800adac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800adb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adb6:	b25b      	sxtb	r3, r3
 800adb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adbc:	d103      	bne.n	800adc6 <xQueueReceive+0x13e>
 800adbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adc6:	f001 fd79 	bl	800c8bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800adca:	1d3a      	adds	r2, r7, #4
 800adcc:	f107 0310 	add.w	r3, r7, #16
 800add0:	4611      	mov	r1, r2
 800add2:	4618      	mov	r0, r3
 800add4:	f000 fe8c 	bl	800baf0 <xTaskCheckForTimeOut>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d123      	bne.n	800ae26 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ade0:	f000 f916 	bl	800b010 <prvIsQueueEmpty>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d017      	beq.n	800ae1a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800adea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adec:	3324      	adds	r3, #36	@ 0x24
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	4611      	mov	r1, r2
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 fdb0 	bl	800b958 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800adf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adfa:	f000 f8b7 	bl	800af6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800adfe:	f000 fbe5 	bl	800b5cc <xTaskResumeAll>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d189      	bne.n	800ad1c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ae08:	4b0f      	ldr	r3, [pc, #60]	@ (800ae48 <xQueueReceive+0x1c0>)
 800ae0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae0e:	601a      	str	r2, [r3, #0]
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	e780      	b.n	800ad1c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae1c:	f000 f8a6 	bl	800af6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae20:	f000 fbd4 	bl	800b5cc <xTaskResumeAll>
 800ae24:	e77a      	b.n	800ad1c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae28:	f000 f8a0 	bl	800af6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae2c:	f000 fbce 	bl	800b5cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae32:	f000 f8ed 	bl	800b010 <prvIsQueueEmpty>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f43f af6f 	beq.w	800ad1c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3730      	adds	r7, #48	@ 0x30
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	e000ed04 	.word	0xe000ed04

0800ae4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10d      	bne.n	800ae86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d14d      	bne.n	800af0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f000 ff9e 	bl	800bdb8 <xTaskPriorityDisinherit>
 800ae7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	609a      	str	r2, [r3, #8]
 800ae84:	e043      	b.n	800af0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d119      	bne.n	800aec0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6858      	ldr	r0, [r3, #4]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae94:	461a      	mov	r2, r3
 800ae96:	68b9      	ldr	r1, [r7, #8]
 800ae98:	f004 fcbb 	bl	800f812 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	685a      	ldr	r2, [r3, #4]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aea4:	441a      	add	r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	685a      	ldr	r2, [r3, #4]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d32b      	bcc.n	800af0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	605a      	str	r2, [r3, #4]
 800aebe:	e026      	b.n	800af0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	68d8      	ldr	r0, [r3, #12]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aec8:	461a      	mov	r2, r3
 800aeca:	68b9      	ldr	r1, [r7, #8]
 800aecc:	f004 fca1 	bl	800f812 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	68da      	ldr	r2, [r3, #12]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aed8:	425b      	negs	r3, r3
 800aeda:	441a      	add	r2, r3
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	68da      	ldr	r2, [r3, #12]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d207      	bcs.n	800aefc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	689a      	ldr	r2, [r3, #8]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aef4:	425b      	negs	r3, r3
 800aef6:	441a      	add	r2, r3
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d105      	bne.n	800af0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d002      	beq.n	800af0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	3b01      	subs	r3, #1
 800af0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	1c5a      	adds	r2, r3, #1
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800af16:	697b      	ldr	r3, [r7, #20]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3718      	adds	r7, #24
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d018      	beq.n	800af64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	68da      	ldr	r2, [r3, #12]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af3a:	441a      	add	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	68da      	ldr	r2, [r3, #12]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d303      	bcc.n	800af54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	68d9      	ldr	r1, [r3, #12]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af5c:	461a      	mov	r2, r3
 800af5e:	6838      	ldr	r0, [r7, #0]
 800af60:	f004 fc57 	bl	800f812 <memcpy>
	}
}
 800af64:	bf00      	nop
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af74:	f001 fc70 	bl	800c858 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af80:	e011      	b.n	800afa6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af86:	2b00      	cmp	r3, #0
 800af88:	d012      	beq.n	800afb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	3324      	adds	r3, #36	@ 0x24
 800af8e:	4618      	mov	r0, r3
 800af90:	f000 fd34 	bl	800b9fc <xTaskRemoveFromEventList>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d001      	beq.n	800af9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af9a:	f000 fe0d 	bl	800bbb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af9e:	7bfb      	ldrb	r3, [r7, #15]
 800afa0:	3b01      	subs	r3, #1
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	dce9      	bgt.n	800af82 <prvUnlockQueue+0x16>
 800afae:	e000      	b.n	800afb2 <prvUnlockQueue+0x46>
					break;
 800afb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	22ff      	movs	r2, #255	@ 0xff
 800afb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800afba:	f001 fc7f 	bl	800c8bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800afbe:	f001 fc4b 	bl	800c858 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800afc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afca:	e011      	b.n	800aff0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d012      	beq.n	800affa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	3310      	adds	r3, #16
 800afd8:	4618      	mov	r0, r3
 800afda:	f000 fd0f 	bl	800b9fc <xTaskRemoveFromEventList>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d001      	beq.n	800afe8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800afe4:	f000 fde8 	bl	800bbb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800afe8:	7bbb      	ldrb	r3, [r7, #14]
 800afea:	3b01      	subs	r3, #1
 800afec:	b2db      	uxtb	r3, r3
 800afee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	dce9      	bgt.n	800afcc <prvUnlockQueue+0x60>
 800aff8:	e000      	b.n	800affc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800affa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	22ff      	movs	r2, #255	@ 0xff
 800b000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b004:	f001 fc5a 	bl	800c8bc <vPortExitCritical>
}
 800b008:	bf00      	nop
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b018:	f001 fc1e 	bl	800c858 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b020:	2b00      	cmp	r3, #0
 800b022:	d102      	bne.n	800b02a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b024:	2301      	movs	r3, #1
 800b026:	60fb      	str	r3, [r7, #12]
 800b028:	e001      	b.n	800b02e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b02a:	2300      	movs	r3, #0
 800b02c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b02e:	f001 fc45 	bl	800c8bc <vPortExitCritical>

	return xReturn;
 800b032:	68fb      	ldr	r3, [r7, #12]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3710      	adds	r7, #16
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b044:	f001 fc08 	bl	800c858 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b050:	429a      	cmp	r2, r3
 800b052:	d102      	bne.n	800b05a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b054:	2301      	movs	r3, #1
 800b056:	60fb      	str	r3, [r7, #12]
 800b058:	e001      	b.n	800b05e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b05a:	2300      	movs	r3, #0
 800b05c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b05e:	f001 fc2d 	bl	800c8bc <vPortExitCritical>

	return xReturn;
 800b062:	68fb      	ldr	r3, [r7, #12]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b076:	2300      	movs	r3, #0
 800b078:	60fb      	str	r3, [r7, #12]
 800b07a:	e014      	b.n	800b0a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b07c:	4a0f      	ldr	r2, [pc, #60]	@ (800b0bc <vQueueAddToRegistry+0x50>)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d10b      	bne.n	800b0a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b088:	490c      	ldr	r1, [pc, #48]	@ (800b0bc <vQueueAddToRegistry+0x50>)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	683a      	ldr	r2, [r7, #0]
 800b08e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b092:	4a0a      	ldr	r2, [pc, #40]	@ (800b0bc <vQueueAddToRegistry+0x50>)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	00db      	lsls	r3, r3, #3
 800b098:	4413      	add	r3, r2
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b09e:	e006      	b.n	800b0ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	60fb      	str	r3, [r7, #12]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2b07      	cmp	r3, #7
 800b0aa:	d9e7      	bls.n	800b07c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b0ac:	bf00      	nop
 800b0ae:	bf00      	nop
 800b0b0:	3714      	adds	r7, #20
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	24000bbc 	.word	0x24000bbc

0800b0c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0d0:	f001 fbc2 	bl	800c858 <vPortEnterCritical>
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0da:	b25b      	sxtb	r3, r3
 800b0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e0:	d103      	bne.n	800b0ea <vQueueWaitForMessageRestricted+0x2a>
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0f0:	b25b      	sxtb	r3, r3
 800b0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f6:	d103      	bne.n	800b100 <vQueueWaitForMessageRestricted+0x40>
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b100:	f001 fbdc 	bl	800c8bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d106      	bne.n	800b11a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	3324      	adds	r3, #36	@ 0x24
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	68b9      	ldr	r1, [r7, #8]
 800b114:	4618      	mov	r0, r3
 800b116:	f000 fc45 	bl	800b9a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b11a:	6978      	ldr	r0, [r7, #20]
 800b11c:	f7ff ff26 	bl	800af6c <prvUnlockQueue>
	}
 800b120:	bf00      	nop
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b08e      	sub	sp, #56	@ 0x38
 800b12c:	af04      	add	r7, sp, #16
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
 800b134:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10b      	bne.n	800b154 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	623b      	str	r3, [r7, #32]
}
 800b14e:	bf00      	nop
 800b150:	bf00      	nop
 800b152:	e7fd      	b.n	800b150 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b156:	2b00      	cmp	r3, #0
 800b158:	d10b      	bne.n	800b172 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	61fb      	str	r3, [r7, #28]
}
 800b16c:	bf00      	nop
 800b16e:	bf00      	nop
 800b170:	e7fd      	b.n	800b16e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b172:	235c      	movs	r3, #92	@ 0x5c
 800b174:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	2b5c      	cmp	r3, #92	@ 0x5c
 800b17a:	d00b      	beq.n	800b194 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b180:	f383 8811 	msr	BASEPRI, r3
 800b184:	f3bf 8f6f 	isb	sy
 800b188:	f3bf 8f4f 	dsb	sy
 800b18c:	61bb      	str	r3, [r7, #24]
}
 800b18e:	bf00      	nop
 800b190:	bf00      	nop
 800b192:	e7fd      	b.n	800b190 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b194:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d01e      	beq.n	800b1da <xTaskCreateStatic+0xb2>
 800b19c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d01b      	beq.n	800b1da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ae:	2202      	movs	r2, #2
 800b1b0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	9303      	str	r3, [sp, #12]
 800b1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ba:	9302      	str	r3, [sp, #8]
 800b1bc:	f107 0314 	add.w	r3, r7, #20
 800b1c0:	9301      	str	r3, [sp, #4]
 800b1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c4:	9300      	str	r3, [sp, #0]
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	68b9      	ldr	r1, [r7, #8]
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f000 f850 	bl	800b272 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b1d4:	f000 f8de 	bl	800b394 <prvAddNewTaskToReadyList>
 800b1d8:	e001      	b.n	800b1de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b1de:	697b      	ldr	r3, [r7, #20]
	}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3728      	adds	r7, #40	@ 0x28
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b08c      	sub	sp, #48	@ 0x30
 800b1ec:	af04      	add	r7, sp, #16
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	603b      	str	r3, [r7, #0]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b1f8:	88fb      	ldrh	r3, [r7, #6]
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f001 fc4d 	bl	800ca9c <pvPortMalloc>
 800b202:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00e      	beq.n	800b228 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b20a:	205c      	movs	r0, #92	@ 0x5c
 800b20c:	f001 fc46 	bl	800ca9c <pvPortMalloc>
 800b210:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d003      	beq.n	800b220 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	697a      	ldr	r2, [r7, #20]
 800b21c:	631a      	str	r2, [r3, #48]	@ 0x30
 800b21e:	e005      	b.n	800b22c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b220:	6978      	ldr	r0, [r7, #20]
 800b222:	f001 fd09 	bl	800cc38 <vPortFree>
 800b226:	e001      	b.n	800b22c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b228:	2300      	movs	r3, #0
 800b22a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d017      	beq.n	800b262 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	2200      	movs	r2, #0
 800b236:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b23a:	88fa      	ldrh	r2, [r7, #6]
 800b23c:	2300      	movs	r3, #0
 800b23e:	9303      	str	r3, [sp, #12]
 800b240:	69fb      	ldr	r3, [r7, #28]
 800b242:	9302      	str	r3, [sp, #8]
 800b244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b246:	9301      	str	r3, [sp, #4]
 800b248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	68b9      	ldr	r1, [r7, #8]
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f000 f80e 	bl	800b272 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b256:	69f8      	ldr	r0, [r7, #28]
 800b258:	f000 f89c 	bl	800b394 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b25c:	2301      	movs	r3, #1
 800b25e:	61bb      	str	r3, [r7, #24]
 800b260:	e002      	b.n	800b268 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b262:	f04f 33ff 	mov.w	r3, #4294967295
 800b266:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b268:	69bb      	ldr	r3, [r7, #24]
	}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3720      	adds	r7, #32
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b088      	sub	sp, #32
 800b276:	af00      	add	r7, sp, #0
 800b278:	60f8      	str	r0, [r7, #12]
 800b27a:	60b9      	str	r1, [r7, #8]
 800b27c:	607a      	str	r2, [r7, #4]
 800b27e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b282:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	461a      	mov	r2, r3
 800b28a:	21a5      	movs	r1, #165	@ 0xa5
 800b28c:	f004 fa31 	bl	800f6f2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b292:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b294:	6879      	ldr	r1, [r7, #4]
 800b296:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b29a:	440b      	add	r3, r1
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	4413      	add	r3, r2
 800b2a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	f023 0307 	bic.w	r3, r3, #7
 800b2a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	f003 0307 	and.w	r3, r3, #7
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00b      	beq.n	800b2cc <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	617b      	str	r3, [r7, #20]
}
 800b2c6:	bf00      	nop
 800b2c8:	bf00      	nop
 800b2ca:	e7fd      	b.n	800b2c8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d01f      	beq.n	800b312 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	61fb      	str	r3, [r7, #28]
 800b2d6:	e012      	b.n	800b2fe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	4413      	add	r3, r2
 800b2de:	7819      	ldrb	r1, [r3, #0]
 800b2e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	3334      	adds	r3, #52	@ 0x34
 800b2e8:	460a      	mov	r2, r1
 800b2ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b2ec:	68ba      	ldr	r2, [r7, #8]
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d006      	beq.n	800b306 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	61fb      	str	r3, [r7, #28]
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	2b0f      	cmp	r3, #15
 800b302:	d9e9      	bls.n	800b2d8 <prvInitialiseNewTask+0x66>
 800b304:	e000      	b.n	800b308 <prvInitialiseNewTask+0x96>
			{
				break;
 800b306:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b30a:	2200      	movs	r2, #0
 800b30c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b310:	e003      	b.n	800b31a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b314:	2200      	movs	r2, #0
 800b316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b31c:	2b37      	cmp	r3, #55	@ 0x37
 800b31e:	d901      	bls.n	800b324 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b320:	2337      	movs	r3, #55	@ 0x37
 800b322:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b326:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b328:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b32e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b332:	2200      	movs	r2, #0
 800b334:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b338:	3304      	adds	r3, #4
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7ff f966 	bl	800a60c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b342:	3318      	adds	r3, #24
 800b344:	4618      	mov	r0, r3
 800b346:	f7ff f961 	bl	800a60c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b34e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b352:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b358:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b35c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b35e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b362:	2200      	movs	r2, #0
 800b364:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b36e:	683a      	ldr	r2, [r7, #0]
 800b370:	68f9      	ldr	r1, [r7, #12]
 800b372:	69b8      	ldr	r0, [r7, #24]
 800b374:	f001 f93e 	bl	800c5f4 <pxPortInitialiseStack>
 800b378:	4602      	mov	r2, r0
 800b37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b380:	2b00      	cmp	r3, #0
 800b382:	d002      	beq.n	800b38a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b388:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b38a:	bf00      	nop
 800b38c:	3720      	adds	r7, #32
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
	...

0800b394 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b39c:	f001 fa5c 	bl	800c858 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3a0:	4b2d      	ldr	r3, [pc, #180]	@ (800b458 <prvAddNewTaskToReadyList+0xc4>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	4a2c      	ldr	r2, [pc, #176]	@ (800b458 <prvAddNewTaskToReadyList+0xc4>)
 800b3a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b3aa:	4b2c      	ldr	r3, [pc, #176]	@ (800b45c <prvAddNewTaskToReadyList+0xc8>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d109      	bne.n	800b3c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3b2:	4a2a      	ldr	r2, [pc, #168]	@ (800b45c <prvAddNewTaskToReadyList+0xc8>)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3b8:	4b27      	ldr	r3, [pc, #156]	@ (800b458 <prvAddNewTaskToReadyList+0xc4>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d110      	bne.n	800b3e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3c0:	f000 fc1e 	bl	800bc00 <prvInitialiseTaskLists>
 800b3c4:	e00d      	b.n	800b3e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3c6:	4b26      	ldr	r3, [pc, #152]	@ (800b460 <prvAddNewTaskToReadyList+0xcc>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d109      	bne.n	800b3e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3ce:	4b23      	ldr	r3, [pc, #140]	@ (800b45c <prvAddNewTaskToReadyList+0xc8>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d802      	bhi.n	800b3e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b3dc:	4a1f      	ldr	r2, [pc, #124]	@ (800b45c <prvAddNewTaskToReadyList+0xc8>)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b3e2:	4b20      	ldr	r3, [pc, #128]	@ (800b464 <prvAddNewTaskToReadyList+0xd0>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	4a1e      	ldr	r2, [pc, #120]	@ (800b464 <prvAddNewTaskToReadyList+0xd0>)
 800b3ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b3ec:	4b1d      	ldr	r3, [pc, #116]	@ (800b464 <prvAddNewTaskToReadyList+0xd0>)
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3f8:	4b1b      	ldr	r3, [pc, #108]	@ (800b468 <prvAddNewTaskToReadyList+0xd4>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d903      	bls.n	800b408 <prvAddNewTaskToReadyList+0x74>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b404:	4a18      	ldr	r2, [pc, #96]	@ (800b468 <prvAddNewTaskToReadyList+0xd4>)
 800b406:	6013      	str	r3, [r2, #0]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b40c:	4613      	mov	r3, r2
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	4413      	add	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4a15      	ldr	r2, [pc, #84]	@ (800b46c <prvAddNewTaskToReadyList+0xd8>)
 800b416:	441a      	add	r2, r3
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	3304      	adds	r3, #4
 800b41c:	4619      	mov	r1, r3
 800b41e:	4610      	mov	r0, r2
 800b420:	f7ff f901 	bl	800a626 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b424:	f001 fa4a 	bl	800c8bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b428:	4b0d      	ldr	r3, [pc, #52]	@ (800b460 <prvAddNewTaskToReadyList+0xcc>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00e      	beq.n	800b44e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b430:	4b0a      	ldr	r3, [pc, #40]	@ (800b45c <prvAddNewTaskToReadyList+0xc8>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d207      	bcs.n	800b44e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b43e:	4b0c      	ldr	r3, [pc, #48]	@ (800b470 <prvAddNewTaskToReadyList+0xdc>)
 800b440:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b444:	601a      	str	r2, [r3, #0]
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b44e:	bf00      	nop
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	240010d0 	.word	0x240010d0
 800b45c:	24000bfc 	.word	0x24000bfc
 800b460:	240010dc 	.word	0x240010dc
 800b464:	240010ec 	.word	0x240010ec
 800b468:	240010d8 	.word	0x240010d8
 800b46c:	24000c00 	.word	0x24000c00
 800b470:	e000ed04 	.word	0xe000ed04

0800b474 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b47c:	2300      	movs	r3, #0
 800b47e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d018      	beq.n	800b4b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b486:	4b14      	ldr	r3, [pc, #80]	@ (800b4d8 <vTaskDelay+0x64>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00b      	beq.n	800b4a6 <vTaskDelay+0x32>
	__asm volatile
 800b48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b492:	f383 8811 	msr	BASEPRI, r3
 800b496:	f3bf 8f6f 	isb	sy
 800b49a:	f3bf 8f4f 	dsb	sy
 800b49e:	60bb      	str	r3, [r7, #8]
}
 800b4a0:	bf00      	nop
 800b4a2:	bf00      	nop
 800b4a4:	e7fd      	b.n	800b4a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b4a6:	f000 f883 	bl	800b5b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 fcf3 	bl	800be98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4b2:	f000 f88b 	bl	800b5cc <xTaskResumeAll>
 800b4b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d107      	bne.n	800b4ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b4be:	4b07      	ldr	r3, [pc, #28]	@ (800b4dc <vTaskDelay+0x68>)
 800b4c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4c4:	601a      	str	r2, [r3, #0]
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4ce:	bf00      	nop
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	240010f8 	.word	0x240010f8
 800b4dc:	e000ed04 	.word	0xe000ed04

0800b4e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b08a      	sub	sp, #40	@ 0x28
 800b4e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b4ee:	463a      	mov	r2, r7
 800b4f0:	1d39      	adds	r1, r7, #4
 800b4f2:	f107 0308 	add.w	r3, r7, #8
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7ff f834 	bl	800a564 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b4fc:	6839      	ldr	r1, [r7, #0]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	68ba      	ldr	r2, [r7, #8]
 800b502:	9202      	str	r2, [sp, #8]
 800b504:	9301      	str	r3, [sp, #4]
 800b506:	2300      	movs	r3, #0
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	2300      	movs	r3, #0
 800b50c:	460a      	mov	r2, r1
 800b50e:	4922      	ldr	r1, [pc, #136]	@ (800b598 <vTaskStartScheduler+0xb8>)
 800b510:	4822      	ldr	r0, [pc, #136]	@ (800b59c <vTaskStartScheduler+0xbc>)
 800b512:	f7ff fe09 	bl	800b128 <xTaskCreateStatic>
 800b516:	4603      	mov	r3, r0
 800b518:	4a21      	ldr	r2, [pc, #132]	@ (800b5a0 <vTaskStartScheduler+0xc0>)
 800b51a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b51c:	4b20      	ldr	r3, [pc, #128]	@ (800b5a0 <vTaskStartScheduler+0xc0>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d002      	beq.n	800b52a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b524:	2301      	movs	r3, #1
 800b526:	617b      	str	r3, [r7, #20]
 800b528:	e001      	b.n	800b52e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b52a:	2300      	movs	r3, #0
 800b52c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d102      	bne.n	800b53a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b534:	f000 fd04 	bl	800bf40 <xTimerCreateTimerTask>
 800b538:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d116      	bne.n	800b56e <vTaskStartScheduler+0x8e>
	__asm volatile
 800b540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b544:	f383 8811 	msr	BASEPRI, r3
 800b548:	f3bf 8f6f 	isb	sy
 800b54c:	f3bf 8f4f 	dsb	sy
 800b550:	613b      	str	r3, [r7, #16]
}
 800b552:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b554:	4b13      	ldr	r3, [pc, #76]	@ (800b5a4 <vTaskStartScheduler+0xc4>)
 800b556:	f04f 32ff 	mov.w	r2, #4294967295
 800b55a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b55c:	4b12      	ldr	r3, [pc, #72]	@ (800b5a8 <vTaskStartScheduler+0xc8>)
 800b55e:	2201      	movs	r2, #1
 800b560:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b562:	4b12      	ldr	r3, [pc, #72]	@ (800b5ac <vTaskStartScheduler+0xcc>)
 800b564:	2200      	movs	r2, #0
 800b566:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b568:	f001 f8d2 	bl	800c710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b56c:	e00f      	b.n	800b58e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b574:	d10b      	bne.n	800b58e <vTaskStartScheduler+0xae>
	__asm volatile
 800b576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	60fb      	str	r3, [r7, #12]
}
 800b588:	bf00      	nop
 800b58a:	bf00      	nop
 800b58c:	e7fd      	b.n	800b58a <vTaskStartScheduler+0xaa>
}
 800b58e:	bf00      	nop
 800b590:	3718      	adds	r7, #24
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	08011c80 	.word	0x08011c80
 800b59c:	0800bbd1 	.word	0x0800bbd1
 800b5a0:	240010f4 	.word	0x240010f4
 800b5a4:	240010f0 	.word	0x240010f0
 800b5a8:	240010dc 	.word	0x240010dc
 800b5ac:	240010d4 	.word	0x240010d4

0800b5b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b5b4:	4b04      	ldr	r3, [pc, #16]	@ (800b5c8 <vTaskSuspendAll+0x18>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	4a03      	ldr	r2, [pc, #12]	@ (800b5c8 <vTaskSuspendAll+0x18>)
 800b5bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b5be:	bf00      	nop
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr
 800b5c8:	240010f8 	.word	0x240010f8

0800b5cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5da:	4b42      	ldr	r3, [pc, #264]	@ (800b6e4 <xTaskResumeAll+0x118>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10b      	bne.n	800b5fa <xTaskResumeAll+0x2e>
	__asm volatile
 800b5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5e6:	f383 8811 	msr	BASEPRI, r3
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	603b      	str	r3, [r7, #0]
}
 800b5f4:	bf00      	nop
 800b5f6:	bf00      	nop
 800b5f8:	e7fd      	b.n	800b5f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5fa:	f001 f92d 	bl	800c858 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b5fe:	4b39      	ldr	r3, [pc, #228]	@ (800b6e4 <xTaskResumeAll+0x118>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3b01      	subs	r3, #1
 800b604:	4a37      	ldr	r2, [pc, #220]	@ (800b6e4 <xTaskResumeAll+0x118>)
 800b606:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b608:	4b36      	ldr	r3, [pc, #216]	@ (800b6e4 <xTaskResumeAll+0x118>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d162      	bne.n	800b6d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b610:	4b35      	ldr	r3, [pc, #212]	@ (800b6e8 <xTaskResumeAll+0x11c>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d05e      	beq.n	800b6d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b618:	e02f      	b.n	800b67a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b61a:	4b34      	ldr	r3, [pc, #208]	@ (800b6ec <xTaskResumeAll+0x120>)
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	3318      	adds	r3, #24
 800b626:	4618      	mov	r0, r3
 800b628:	f7ff f85a 	bl	800a6e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	3304      	adds	r3, #4
 800b630:	4618      	mov	r0, r3
 800b632:	f7ff f855 	bl	800a6e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b63a:	4b2d      	ldr	r3, [pc, #180]	@ (800b6f0 <xTaskResumeAll+0x124>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d903      	bls.n	800b64a <xTaskResumeAll+0x7e>
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b646:	4a2a      	ldr	r2, [pc, #168]	@ (800b6f0 <xTaskResumeAll+0x124>)
 800b648:	6013      	str	r3, [r2, #0]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b64e:	4613      	mov	r3, r2
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4413      	add	r3, r2
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	4a27      	ldr	r2, [pc, #156]	@ (800b6f4 <xTaskResumeAll+0x128>)
 800b658:	441a      	add	r2, r3
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	3304      	adds	r3, #4
 800b65e:	4619      	mov	r1, r3
 800b660:	4610      	mov	r0, r2
 800b662:	f7fe ffe0 	bl	800a626 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b66a:	4b23      	ldr	r3, [pc, #140]	@ (800b6f8 <xTaskResumeAll+0x12c>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b670:	429a      	cmp	r2, r3
 800b672:	d302      	bcc.n	800b67a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b674:	4b21      	ldr	r3, [pc, #132]	@ (800b6fc <xTaskResumeAll+0x130>)
 800b676:	2201      	movs	r2, #1
 800b678:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b67a:	4b1c      	ldr	r3, [pc, #112]	@ (800b6ec <xTaskResumeAll+0x120>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d1cb      	bne.n	800b61a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d001      	beq.n	800b68c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b688:	f000 fb58 	bl	800bd3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b68c:	4b1c      	ldr	r3, [pc, #112]	@ (800b700 <xTaskResumeAll+0x134>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d010      	beq.n	800b6ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b698:	f000 f846 	bl	800b728 <xTaskIncrementTick>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d002      	beq.n	800b6a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b6a2:	4b16      	ldr	r3, [pc, #88]	@ (800b6fc <xTaskResumeAll+0x130>)
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1f1      	bne.n	800b698 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b6b4:	4b12      	ldr	r3, [pc, #72]	@ (800b700 <xTaskResumeAll+0x134>)
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b6ba:	4b10      	ldr	r3, [pc, #64]	@ (800b6fc <xTaskResumeAll+0x130>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d009      	beq.n	800b6d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b6c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b704 <xTaskResumeAll+0x138>)
 800b6c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6cc:	601a      	str	r2, [r3, #0]
 800b6ce:	f3bf 8f4f 	dsb	sy
 800b6d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6d6:	f001 f8f1 	bl	800c8bc <vPortExitCritical>

	return xAlreadyYielded;
 800b6da:	68bb      	ldr	r3, [r7, #8]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	240010f8 	.word	0x240010f8
 800b6e8:	240010d0 	.word	0x240010d0
 800b6ec:	24001090 	.word	0x24001090
 800b6f0:	240010d8 	.word	0x240010d8
 800b6f4:	24000c00 	.word	0x24000c00
 800b6f8:	24000bfc 	.word	0x24000bfc
 800b6fc:	240010e4 	.word	0x240010e4
 800b700:	240010e0 	.word	0x240010e0
 800b704:	e000ed04 	.word	0xe000ed04

0800b708 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b70e:	4b05      	ldr	r3, [pc, #20]	@ (800b724 <xTaskGetTickCount+0x1c>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b714:	687b      	ldr	r3, [r7, #4]
}
 800b716:	4618      	mov	r0, r3
 800b718:	370c      	adds	r7, #12
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	240010d4 	.word	0x240010d4

0800b728 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b086      	sub	sp, #24
 800b72c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b72e:	2300      	movs	r3, #0
 800b730:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b732:	4b4f      	ldr	r3, [pc, #316]	@ (800b870 <xTaskIncrementTick+0x148>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	f040 8090 	bne.w	800b85c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b73c:	4b4d      	ldr	r3, [pc, #308]	@ (800b874 <xTaskIncrementTick+0x14c>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3301      	adds	r3, #1
 800b742:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b744:	4a4b      	ldr	r2, [pc, #300]	@ (800b874 <xTaskIncrementTick+0x14c>)
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d121      	bne.n	800b794 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b750:	4b49      	ldr	r3, [pc, #292]	@ (800b878 <xTaskIncrementTick+0x150>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d00b      	beq.n	800b772 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b75e:	f383 8811 	msr	BASEPRI, r3
 800b762:	f3bf 8f6f 	isb	sy
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	603b      	str	r3, [r7, #0]
}
 800b76c:	bf00      	nop
 800b76e:	bf00      	nop
 800b770:	e7fd      	b.n	800b76e <xTaskIncrementTick+0x46>
 800b772:	4b41      	ldr	r3, [pc, #260]	@ (800b878 <xTaskIncrementTick+0x150>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	60fb      	str	r3, [r7, #12]
 800b778:	4b40      	ldr	r3, [pc, #256]	@ (800b87c <xTaskIncrementTick+0x154>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a3e      	ldr	r2, [pc, #248]	@ (800b878 <xTaskIncrementTick+0x150>)
 800b77e:	6013      	str	r3, [r2, #0]
 800b780:	4a3e      	ldr	r2, [pc, #248]	@ (800b87c <xTaskIncrementTick+0x154>)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	6013      	str	r3, [r2, #0]
 800b786:	4b3e      	ldr	r3, [pc, #248]	@ (800b880 <xTaskIncrementTick+0x158>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	3301      	adds	r3, #1
 800b78c:	4a3c      	ldr	r2, [pc, #240]	@ (800b880 <xTaskIncrementTick+0x158>)
 800b78e:	6013      	str	r3, [r2, #0]
 800b790:	f000 fad4 	bl	800bd3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b794:	4b3b      	ldr	r3, [pc, #236]	@ (800b884 <xTaskIncrementTick+0x15c>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	693a      	ldr	r2, [r7, #16]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d349      	bcc.n	800b832 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b79e:	4b36      	ldr	r3, [pc, #216]	@ (800b878 <xTaskIncrementTick+0x150>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d104      	bne.n	800b7b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7a8:	4b36      	ldr	r3, [pc, #216]	@ (800b884 <xTaskIncrementTick+0x15c>)
 800b7aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ae:	601a      	str	r2, [r3, #0]
					break;
 800b7b0:	e03f      	b.n	800b832 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7b2:	4b31      	ldr	r3, [pc, #196]	@ (800b878 <xTaskIncrementTick+0x150>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b7c2:	693a      	ldr	r2, [r7, #16]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d203      	bcs.n	800b7d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b7ca:	4a2e      	ldr	r2, [pc, #184]	@ (800b884 <xTaskIncrementTick+0x15c>)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b7d0:	e02f      	b.n	800b832 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	3304      	adds	r3, #4
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fe ff82 	bl	800a6e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d004      	beq.n	800b7ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	3318      	adds	r3, #24
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fe ff79 	bl	800a6e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7f2:	4b25      	ldr	r3, [pc, #148]	@ (800b888 <xTaskIncrementTick+0x160>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d903      	bls.n	800b802 <xTaskIncrementTick+0xda>
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7fe:	4a22      	ldr	r2, [pc, #136]	@ (800b888 <xTaskIncrementTick+0x160>)
 800b800:	6013      	str	r3, [r2, #0]
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b806:	4613      	mov	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	4413      	add	r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	4a1f      	ldr	r2, [pc, #124]	@ (800b88c <xTaskIncrementTick+0x164>)
 800b810:	441a      	add	r2, r3
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	3304      	adds	r3, #4
 800b816:	4619      	mov	r1, r3
 800b818:	4610      	mov	r0, r2
 800b81a:	f7fe ff04 	bl	800a626 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b822:	4b1b      	ldr	r3, [pc, #108]	@ (800b890 <xTaskIncrementTick+0x168>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b828:	429a      	cmp	r2, r3
 800b82a:	d3b8      	bcc.n	800b79e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b82c:	2301      	movs	r3, #1
 800b82e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b830:	e7b5      	b.n	800b79e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b832:	4b17      	ldr	r3, [pc, #92]	@ (800b890 <xTaskIncrementTick+0x168>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b838:	4914      	ldr	r1, [pc, #80]	@ (800b88c <xTaskIncrementTick+0x164>)
 800b83a:	4613      	mov	r3, r2
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4413      	add	r3, r2
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	440b      	add	r3, r1
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b01      	cmp	r3, #1
 800b848:	d901      	bls.n	800b84e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b84a:	2301      	movs	r3, #1
 800b84c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b84e:	4b11      	ldr	r3, [pc, #68]	@ (800b894 <xTaskIncrementTick+0x16c>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d007      	beq.n	800b866 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b856:	2301      	movs	r3, #1
 800b858:	617b      	str	r3, [r7, #20]
 800b85a:	e004      	b.n	800b866 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b85c:	4b0e      	ldr	r3, [pc, #56]	@ (800b898 <xTaskIncrementTick+0x170>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	3301      	adds	r3, #1
 800b862:	4a0d      	ldr	r2, [pc, #52]	@ (800b898 <xTaskIncrementTick+0x170>)
 800b864:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b866:	697b      	ldr	r3, [r7, #20]
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3718      	adds	r7, #24
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	240010f8 	.word	0x240010f8
 800b874:	240010d4 	.word	0x240010d4
 800b878:	24001088 	.word	0x24001088
 800b87c:	2400108c 	.word	0x2400108c
 800b880:	240010e8 	.word	0x240010e8
 800b884:	240010f0 	.word	0x240010f0
 800b888:	240010d8 	.word	0x240010d8
 800b88c:	24000c00 	.word	0x24000c00
 800b890:	24000bfc 	.word	0x24000bfc
 800b894:	240010e4 	.word	0x240010e4
 800b898:	240010e0 	.word	0x240010e0

0800b89c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b8a2:	4b28      	ldr	r3, [pc, #160]	@ (800b944 <vTaskSwitchContext+0xa8>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d003      	beq.n	800b8b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b8aa:	4b27      	ldr	r3, [pc, #156]	@ (800b948 <vTaskSwitchContext+0xac>)
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8b0:	e042      	b.n	800b938 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b8b2:	4b25      	ldr	r3, [pc, #148]	@ (800b948 <vTaskSwitchContext+0xac>)
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8b8:	4b24      	ldr	r3, [pc, #144]	@ (800b94c <vTaskSwitchContext+0xb0>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	60fb      	str	r3, [r7, #12]
 800b8be:	e011      	b.n	800b8e4 <vTaskSwitchContext+0x48>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d10b      	bne.n	800b8de <vTaskSwitchContext+0x42>
	__asm volatile
 800b8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ca:	f383 8811 	msr	BASEPRI, r3
 800b8ce:	f3bf 8f6f 	isb	sy
 800b8d2:	f3bf 8f4f 	dsb	sy
 800b8d6:	607b      	str	r3, [r7, #4]
}
 800b8d8:	bf00      	nop
 800b8da:	bf00      	nop
 800b8dc:	e7fd      	b.n	800b8da <vTaskSwitchContext+0x3e>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	60fb      	str	r3, [r7, #12]
 800b8e4:	491a      	ldr	r1, [pc, #104]	@ (800b950 <vTaskSwitchContext+0xb4>)
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	4413      	add	r3, r2
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	440b      	add	r3, r1
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d0e3      	beq.n	800b8c0 <vTaskSwitchContext+0x24>
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	4413      	add	r3, r2
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4a13      	ldr	r2, [pc, #76]	@ (800b950 <vTaskSwitchContext+0xb4>)
 800b904:	4413      	add	r3, r2
 800b906:	60bb      	str	r3, [r7, #8]
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	685a      	ldr	r2, [r3, #4]
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	605a      	str	r2, [r3, #4]
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	685a      	ldr	r2, [r3, #4]
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	3308      	adds	r3, #8
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d104      	bne.n	800b928 <vTaskSwitchContext+0x8c>
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	685a      	ldr	r2, [r3, #4]
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	605a      	str	r2, [r3, #4]
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	4a09      	ldr	r2, [pc, #36]	@ (800b954 <vTaskSwitchContext+0xb8>)
 800b930:	6013      	str	r3, [r2, #0]
 800b932:	4a06      	ldr	r2, [pc, #24]	@ (800b94c <vTaskSwitchContext+0xb0>)
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6013      	str	r3, [r2, #0]
}
 800b938:	bf00      	nop
 800b93a:	3714      	adds	r7, #20
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr
 800b944:	240010f8 	.word	0x240010f8
 800b948:	240010e4 	.word	0x240010e4
 800b94c:	240010d8 	.word	0x240010d8
 800b950:	24000c00 	.word	0x24000c00
 800b954:	24000bfc 	.word	0x24000bfc

0800b958 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d10b      	bne.n	800b980 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b96c:	f383 8811 	msr	BASEPRI, r3
 800b970:	f3bf 8f6f 	isb	sy
 800b974:	f3bf 8f4f 	dsb	sy
 800b978:	60fb      	str	r3, [r7, #12]
}
 800b97a:	bf00      	nop
 800b97c:	bf00      	nop
 800b97e:	e7fd      	b.n	800b97c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b980:	4b07      	ldr	r3, [pc, #28]	@ (800b9a0 <vTaskPlaceOnEventList+0x48>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	3318      	adds	r3, #24
 800b986:	4619      	mov	r1, r3
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f7fe fe70 	bl	800a66e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b98e:	2101      	movs	r1, #1
 800b990:	6838      	ldr	r0, [r7, #0]
 800b992:	f000 fa81 	bl	800be98 <prvAddCurrentTaskToDelayedList>
}
 800b996:	bf00      	nop
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	24000bfc 	.word	0x24000bfc

0800b9a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d10b      	bne.n	800b9ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ba:	f383 8811 	msr	BASEPRI, r3
 800b9be:	f3bf 8f6f 	isb	sy
 800b9c2:	f3bf 8f4f 	dsb	sy
 800b9c6:	617b      	str	r3, [r7, #20]
}
 800b9c8:	bf00      	nop
 800b9ca:	bf00      	nop
 800b9cc:	e7fd      	b.n	800b9ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b9f8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	3318      	adds	r3, #24
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	f7fe fe25 	bl	800a626 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d002      	beq.n	800b9e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b9e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b9e8:	6879      	ldr	r1, [r7, #4]
 800b9ea:	68b8      	ldr	r0, [r7, #8]
 800b9ec:	f000 fa54 	bl	800be98 <prvAddCurrentTaskToDelayedList>
	}
 800b9f0:	bf00      	nop
 800b9f2:	3718      	adds	r7, #24
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	24000bfc 	.word	0x24000bfc

0800b9fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b086      	sub	sp, #24
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d10b      	bne.n	800ba2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ba12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba16:	f383 8811 	msr	BASEPRI, r3
 800ba1a:	f3bf 8f6f 	isb	sy
 800ba1e:	f3bf 8f4f 	dsb	sy
 800ba22:	60fb      	str	r3, [r7, #12]
}
 800ba24:	bf00      	nop
 800ba26:	bf00      	nop
 800ba28:	e7fd      	b.n	800ba26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	3318      	adds	r3, #24
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fe fe56 	bl	800a6e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba34:	4b1d      	ldr	r3, [pc, #116]	@ (800baac <xTaskRemoveFromEventList+0xb0>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d11d      	bne.n	800ba78 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	3304      	adds	r3, #4
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7fe fe4d 	bl	800a6e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba4a:	4b19      	ldr	r3, [pc, #100]	@ (800bab0 <xTaskRemoveFromEventList+0xb4>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d903      	bls.n	800ba5a <xTaskRemoveFromEventList+0x5e>
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba56:	4a16      	ldr	r2, [pc, #88]	@ (800bab0 <xTaskRemoveFromEventList+0xb4>)
 800ba58:	6013      	str	r3, [r2, #0]
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba5e:	4613      	mov	r3, r2
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	4413      	add	r3, r2
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	4a13      	ldr	r2, [pc, #76]	@ (800bab4 <xTaskRemoveFromEventList+0xb8>)
 800ba68:	441a      	add	r2, r3
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	3304      	adds	r3, #4
 800ba6e:	4619      	mov	r1, r3
 800ba70:	4610      	mov	r0, r2
 800ba72:	f7fe fdd8 	bl	800a626 <vListInsertEnd>
 800ba76:	e005      	b.n	800ba84 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	3318      	adds	r3, #24
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	480e      	ldr	r0, [pc, #56]	@ (800bab8 <xTaskRemoveFromEventList+0xbc>)
 800ba80:	f7fe fdd1 	bl	800a626 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba88:	4b0c      	ldr	r3, [pc, #48]	@ (800babc <xTaskRemoveFromEventList+0xc0>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d905      	bls.n	800ba9e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba92:	2301      	movs	r3, #1
 800ba94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba96:	4b0a      	ldr	r3, [pc, #40]	@ (800bac0 <xTaskRemoveFromEventList+0xc4>)
 800ba98:	2201      	movs	r2, #1
 800ba9a:	601a      	str	r2, [r3, #0]
 800ba9c:	e001      	b.n	800baa2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800baa2:	697b      	ldr	r3, [r7, #20]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3718      	adds	r7, #24
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	240010f8 	.word	0x240010f8
 800bab0:	240010d8 	.word	0x240010d8
 800bab4:	24000c00 	.word	0x24000c00
 800bab8:	24001090 	.word	0x24001090
 800babc:	24000bfc 	.word	0x24000bfc
 800bac0:	240010e4 	.word	0x240010e4

0800bac4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bacc:	4b06      	ldr	r3, [pc, #24]	@ (800bae8 <vTaskInternalSetTimeOutState+0x24>)
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bad4:	4b05      	ldr	r3, [pc, #20]	@ (800baec <vTaskInternalSetTimeOutState+0x28>)
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	605a      	str	r2, [r3, #4]
}
 800badc:	bf00      	nop
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr
 800bae8:	240010e8 	.word	0x240010e8
 800baec:	240010d4 	.word	0x240010d4

0800baf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b088      	sub	sp, #32
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10b      	bne.n	800bb18 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bb00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb04:	f383 8811 	msr	BASEPRI, r3
 800bb08:	f3bf 8f6f 	isb	sy
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	613b      	str	r3, [r7, #16]
}
 800bb12:	bf00      	nop
 800bb14:	bf00      	nop
 800bb16:	e7fd      	b.n	800bb14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10b      	bne.n	800bb36 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb22:	f383 8811 	msr	BASEPRI, r3
 800bb26:	f3bf 8f6f 	isb	sy
 800bb2a:	f3bf 8f4f 	dsb	sy
 800bb2e:	60fb      	str	r3, [r7, #12]
}
 800bb30:	bf00      	nop
 800bb32:	bf00      	nop
 800bb34:	e7fd      	b.n	800bb32 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bb36:	f000 fe8f 	bl	800c858 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bb3a:	4b1d      	ldr	r3, [pc, #116]	@ (800bbb0 <xTaskCheckForTimeOut+0xc0>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	69ba      	ldr	r2, [r7, #24]
 800bb46:	1ad3      	subs	r3, r2, r3
 800bb48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb52:	d102      	bne.n	800bb5a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb54:	2300      	movs	r3, #0
 800bb56:	61fb      	str	r3, [r7, #28]
 800bb58:	e023      	b.n	800bba2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	4b15      	ldr	r3, [pc, #84]	@ (800bbb4 <xTaskCheckForTimeOut+0xc4>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d007      	beq.n	800bb76 <xTaskCheckForTimeOut+0x86>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	69ba      	ldr	r2, [r7, #24]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d302      	bcc.n	800bb76 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb70:	2301      	movs	r3, #1
 800bb72:	61fb      	str	r3, [r7, #28]
 800bb74:	e015      	b.n	800bba2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	697a      	ldr	r2, [r7, #20]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d20b      	bcs.n	800bb98 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	1ad2      	subs	r2, r2, r3
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f7ff ff99 	bl	800bac4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb92:	2300      	movs	r3, #0
 800bb94:	61fb      	str	r3, [r7, #28]
 800bb96:	e004      	b.n	800bba2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bba2:	f000 fe8b 	bl	800c8bc <vPortExitCritical>

	return xReturn;
 800bba6:	69fb      	ldr	r3, [r7, #28]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3720      	adds	r7, #32
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	240010d4 	.word	0x240010d4
 800bbb4:	240010e8 	.word	0x240010e8

0800bbb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bbb8:	b480      	push	{r7}
 800bbba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bbbc:	4b03      	ldr	r3, [pc, #12]	@ (800bbcc <vTaskMissedYield+0x14>)
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	601a      	str	r2, [r3, #0]
}
 800bbc2:	bf00      	nop
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	240010e4 	.word	0x240010e4

0800bbd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bbd8:	f000 f852 	bl	800bc80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bbdc:	4b06      	ldr	r3, [pc, #24]	@ (800bbf8 <prvIdleTask+0x28>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d9f9      	bls.n	800bbd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bbe4:	4b05      	ldr	r3, [pc, #20]	@ (800bbfc <prvIdleTask+0x2c>)
 800bbe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbea:	601a      	str	r2, [r3, #0]
 800bbec:	f3bf 8f4f 	dsb	sy
 800bbf0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bbf4:	e7f0      	b.n	800bbd8 <prvIdleTask+0x8>
 800bbf6:	bf00      	nop
 800bbf8:	24000c00 	.word	0x24000c00
 800bbfc:	e000ed04 	.word	0xe000ed04

0800bc00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc06:	2300      	movs	r3, #0
 800bc08:	607b      	str	r3, [r7, #4]
 800bc0a:	e00c      	b.n	800bc26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	4613      	mov	r3, r2
 800bc10:	009b      	lsls	r3, r3, #2
 800bc12:	4413      	add	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4a12      	ldr	r2, [pc, #72]	@ (800bc60 <prvInitialiseTaskLists+0x60>)
 800bc18:	4413      	add	r3, r2
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7fe fcd6 	bl	800a5cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	3301      	adds	r3, #1
 800bc24:	607b      	str	r3, [r7, #4]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2b37      	cmp	r3, #55	@ 0x37
 800bc2a:	d9ef      	bls.n	800bc0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bc2c:	480d      	ldr	r0, [pc, #52]	@ (800bc64 <prvInitialiseTaskLists+0x64>)
 800bc2e:	f7fe fccd 	bl	800a5cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bc32:	480d      	ldr	r0, [pc, #52]	@ (800bc68 <prvInitialiseTaskLists+0x68>)
 800bc34:	f7fe fcca 	bl	800a5cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bc38:	480c      	ldr	r0, [pc, #48]	@ (800bc6c <prvInitialiseTaskLists+0x6c>)
 800bc3a:	f7fe fcc7 	bl	800a5cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc3e:	480c      	ldr	r0, [pc, #48]	@ (800bc70 <prvInitialiseTaskLists+0x70>)
 800bc40:	f7fe fcc4 	bl	800a5cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc44:	480b      	ldr	r0, [pc, #44]	@ (800bc74 <prvInitialiseTaskLists+0x74>)
 800bc46:	f7fe fcc1 	bl	800a5cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc4a:	4b0b      	ldr	r3, [pc, #44]	@ (800bc78 <prvInitialiseTaskLists+0x78>)
 800bc4c:	4a05      	ldr	r2, [pc, #20]	@ (800bc64 <prvInitialiseTaskLists+0x64>)
 800bc4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc50:	4b0a      	ldr	r3, [pc, #40]	@ (800bc7c <prvInitialiseTaskLists+0x7c>)
 800bc52:	4a05      	ldr	r2, [pc, #20]	@ (800bc68 <prvInitialiseTaskLists+0x68>)
 800bc54:	601a      	str	r2, [r3, #0]
}
 800bc56:	bf00      	nop
 800bc58:	3708      	adds	r7, #8
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	24000c00 	.word	0x24000c00
 800bc64:	24001060 	.word	0x24001060
 800bc68:	24001074 	.word	0x24001074
 800bc6c:	24001090 	.word	0x24001090
 800bc70:	240010a4 	.word	0x240010a4
 800bc74:	240010bc 	.word	0x240010bc
 800bc78:	24001088 	.word	0x24001088
 800bc7c:	2400108c 	.word	0x2400108c

0800bc80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc86:	e019      	b.n	800bcbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc88:	f000 fde6 	bl	800c858 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc8c:	4b10      	ldr	r3, [pc, #64]	@ (800bcd0 <prvCheckTasksWaitingTermination+0x50>)
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	3304      	adds	r3, #4
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7fe fd21 	bl	800a6e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc9e:	4b0d      	ldr	r3, [pc, #52]	@ (800bcd4 <prvCheckTasksWaitingTermination+0x54>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	3b01      	subs	r3, #1
 800bca4:	4a0b      	ldr	r2, [pc, #44]	@ (800bcd4 <prvCheckTasksWaitingTermination+0x54>)
 800bca6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bca8:	4b0b      	ldr	r3, [pc, #44]	@ (800bcd8 <prvCheckTasksWaitingTermination+0x58>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	3b01      	subs	r3, #1
 800bcae:	4a0a      	ldr	r2, [pc, #40]	@ (800bcd8 <prvCheckTasksWaitingTermination+0x58>)
 800bcb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bcb2:	f000 fe03 	bl	800c8bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 f810 	bl	800bcdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bcbc:	4b06      	ldr	r3, [pc, #24]	@ (800bcd8 <prvCheckTasksWaitingTermination+0x58>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d1e1      	bne.n	800bc88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bcc4:	bf00      	nop
 800bcc6:	bf00      	nop
 800bcc8:	3708      	adds	r7, #8
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	240010a4 	.word	0x240010a4
 800bcd4:	240010d0 	.word	0x240010d0
 800bcd8:	240010b8 	.word	0x240010b8

0800bcdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d108      	bne.n	800bd00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f000 ffa0 	bl	800cc38 <vPortFree>
				vPortFree( pxTCB );
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 ff9d 	bl	800cc38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bcfe:	e019      	b.n	800bd34 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bd06:	2b01      	cmp	r3, #1
 800bd08:	d103      	bne.n	800bd12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 ff94 	bl	800cc38 <vPortFree>
	}
 800bd10:	e010      	b.n	800bd34 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	d00b      	beq.n	800bd34 <prvDeleteTCB+0x58>
	__asm volatile
 800bd1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd20:	f383 8811 	msr	BASEPRI, r3
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	60fb      	str	r3, [r7, #12]
}
 800bd2e:	bf00      	nop
 800bd30:	bf00      	nop
 800bd32:	e7fd      	b.n	800bd30 <prvDeleteTCB+0x54>
	}
 800bd34:	bf00      	nop
 800bd36:	3710      	adds	r7, #16
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd42:	4b0c      	ldr	r3, [pc, #48]	@ (800bd74 <prvResetNextTaskUnblockTime+0x38>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d104      	bne.n	800bd56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd4c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd78 <prvResetNextTaskUnblockTime+0x3c>)
 800bd4e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd54:	e008      	b.n	800bd68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd56:	4b07      	ldr	r3, [pc, #28]	@ (800bd74 <prvResetNextTaskUnblockTime+0x38>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	4a04      	ldr	r2, [pc, #16]	@ (800bd78 <prvResetNextTaskUnblockTime+0x3c>)
 800bd66:	6013      	str	r3, [r2, #0]
}
 800bd68:	bf00      	nop
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr
 800bd74:	24001088 	.word	0x24001088
 800bd78:	240010f0 	.word	0x240010f0

0800bd7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd82:	4b0b      	ldr	r3, [pc, #44]	@ (800bdb0 <xTaskGetSchedulerState+0x34>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d102      	bne.n	800bd90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	607b      	str	r3, [r7, #4]
 800bd8e:	e008      	b.n	800bda2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd90:	4b08      	ldr	r3, [pc, #32]	@ (800bdb4 <xTaskGetSchedulerState+0x38>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d102      	bne.n	800bd9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd98:	2302      	movs	r3, #2
 800bd9a:	607b      	str	r3, [r7, #4]
 800bd9c:	e001      	b.n	800bda2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bda2:	687b      	ldr	r3, [r7, #4]
	}
 800bda4:	4618      	mov	r0, r3
 800bda6:	370c      	adds	r7, #12
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr
 800bdb0:	240010dc 	.word	0x240010dc
 800bdb4:	240010f8 	.word	0x240010f8

0800bdb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b086      	sub	sp, #24
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d058      	beq.n	800be80 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bdce:	4b2f      	ldr	r3, [pc, #188]	@ (800be8c <xTaskPriorityDisinherit+0xd4>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	693a      	ldr	r2, [r7, #16]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d00b      	beq.n	800bdf0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bdd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bddc:	f383 8811 	msr	BASEPRI, r3
 800bde0:	f3bf 8f6f 	isb	sy
 800bde4:	f3bf 8f4f 	dsb	sy
 800bde8:	60fb      	str	r3, [r7, #12]
}
 800bdea:	bf00      	nop
 800bdec:	bf00      	nop
 800bdee:	e7fd      	b.n	800bdec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d10b      	bne.n	800be10 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bdf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdfc:	f383 8811 	msr	BASEPRI, r3
 800be00:	f3bf 8f6f 	isb	sy
 800be04:	f3bf 8f4f 	dsb	sy
 800be08:	60bb      	str	r3, [r7, #8]
}
 800be0a:	bf00      	nop
 800be0c:	bf00      	nop
 800be0e:	e7fd      	b.n	800be0c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be14:	1e5a      	subs	r2, r3, #1
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be22:	429a      	cmp	r2, r3
 800be24:	d02c      	beq.n	800be80 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d128      	bne.n	800be80 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	3304      	adds	r3, #4
 800be32:	4618      	mov	r0, r3
 800be34:	f7fe fc54 	bl	800a6e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be50:	4b0f      	ldr	r3, [pc, #60]	@ (800be90 <xTaskPriorityDisinherit+0xd8>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	429a      	cmp	r2, r3
 800be56:	d903      	bls.n	800be60 <xTaskPriorityDisinherit+0xa8>
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be5c:	4a0c      	ldr	r2, [pc, #48]	@ (800be90 <xTaskPriorityDisinherit+0xd8>)
 800be5e:	6013      	str	r3, [r2, #0]
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be64:	4613      	mov	r3, r2
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	4413      	add	r3, r2
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	4a09      	ldr	r2, [pc, #36]	@ (800be94 <xTaskPriorityDisinherit+0xdc>)
 800be6e:	441a      	add	r2, r3
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	3304      	adds	r3, #4
 800be74:	4619      	mov	r1, r3
 800be76:	4610      	mov	r0, r2
 800be78:	f7fe fbd5 	bl	800a626 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be7c:	2301      	movs	r3, #1
 800be7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be80:	697b      	ldr	r3, [r7, #20]
	}
 800be82:	4618      	mov	r0, r3
 800be84:	3718      	adds	r7, #24
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	24000bfc 	.word	0x24000bfc
 800be90:	240010d8 	.word	0x240010d8
 800be94:	24000c00 	.word	0x24000c00

0800be98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bea2:	4b21      	ldr	r3, [pc, #132]	@ (800bf28 <prvAddCurrentTaskToDelayedList+0x90>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bea8:	4b20      	ldr	r3, [pc, #128]	@ (800bf2c <prvAddCurrentTaskToDelayedList+0x94>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	3304      	adds	r3, #4
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fe fc16 	bl	800a6e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beba:	d10a      	bne.n	800bed2 <prvAddCurrentTaskToDelayedList+0x3a>
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d007      	beq.n	800bed2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bec2:	4b1a      	ldr	r3, [pc, #104]	@ (800bf2c <prvAddCurrentTaskToDelayedList+0x94>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	3304      	adds	r3, #4
 800bec8:	4619      	mov	r1, r3
 800beca:	4819      	ldr	r0, [pc, #100]	@ (800bf30 <prvAddCurrentTaskToDelayedList+0x98>)
 800becc:	f7fe fbab 	bl	800a626 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bed0:	e026      	b.n	800bf20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	4413      	add	r3, r2
 800bed8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800beda:	4b14      	ldr	r3, [pc, #80]	@ (800bf2c <prvAddCurrentTaskToDelayedList+0x94>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68ba      	ldr	r2, [r7, #8]
 800bee0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bee2:	68ba      	ldr	r2, [r7, #8]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d209      	bcs.n	800befe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800beea:	4b12      	ldr	r3, [pc, #72]	@ (800bf34 <prvAddCurrentTaskToDelayedList+0x9c>)
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	4b0f      	ldr	r3, [pc, #60]	@ (800bf2c <prvAddCurrentTaskToDelayedList+0x94>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	3304      	adds	r3, #4
 800bef4:	4619      	mov	r1, r3
 800bef6:	4610      	mov	r0, r2
 800bef8:	f7fe fbb9 	bl	800a66e <vListInsert>
}
 800befc:	e010      	b.n	800bf20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800befe:	4b0e      	ldr	r3, [pc, #56]	@ (800bf38 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bf00:	681a      	ldr	r2, [r3, #0]
 800bf02:	4b0a      	ldr	r3, [pc, #40]	@ (800bf2c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	3304      	adds	r3, #4
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	f7fe fbaf 	bl	800a66e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf10:	4b0a      	ldr	r3, [pc, #40]	@ (800bf3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d202      	bcs.n	800bf20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bf1a:	4a08      	ldr	r2, [pc, #32]	@ (800bf3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	6013      	str	r3, [r2, #0]
}
 800bf20:	bf00      	nop
 800bf22:	3710      	adds	r7, #16
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	240010d4 	.word	0x240010d4
 800bf2c:	24000bfc 	.word	0x24000bfc
 800bf30:	240010bc 	.word	0x240010bc
 800bf34:	2400108c 	.word	0x2400108c
 800bf38:	24001088 	.word	0x24001088
 800bf3c:	240010f0 	.word	0x240010f0

0800bf40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b08a      	sub	sp, #40	@ 0x28
 800bf44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf46:	2300      	movs	r3, #0
 800bf48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf4a:	f000 fb13 	bl	800c574 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf4e:	4b1d      	ldr	r3, [pc, #116]	@ (800bfc4 <xTimerCreateTimerTask+0x84>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d021      	beq.n	800bf9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bf56:	2300      	movs	r3, #0
 800bf58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf5e:	1d3a      	adds	r2, r7, #4
 800bf60:	f107 0108 	add.w	r1, r7, #8
 800bf64:	f107 030c 	add.w	r3, r7, #12
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7fe fb15 	bl	800a598 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bf6e:	6879      	ldr	r1, [r7, #4]
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	68fa      	ldr	r2, [r7, #12]
 800bf74:	9202      	str	r2, [sp, #8]
 800bf76:	9301      	str	r3, [sp, #4]
 800bf78:	2302      	movs	r3, #2
 800bf7a:	9300      	str	r3, [sp, #0]
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	460a      	mov	r2, r1
 800bf80:	4911      	ldr	r1, [pc, #68]	@ (800bfc8 <xTimerCreateTimerTask+0x88>)
 800bf82:	4812      	ldr	r0, [pc, #72]	@ (800bfcc <xTimerCreateTimerTask+0x8c>)
 800bf84:	f7ff f8d0 	bl	800b128 <xTaskCreateStatic>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	4a11      	ldr	r2, [pc, #68]	@ (800bfd0 <xTimerCreateTimerTask+0x90>)
 800bf8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bf8e:	4b10      	ldr	r3, [pc, #64]	@ (800bfd0 <xTimerCreateTimerTask+0x90>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d001      	beq.n	800bf9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bf96:	2301      	movs	r3, #1
 800bf98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d10b      	bne.n	800bfb8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bfa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa4:	f383 8811 	msr	BASEPRI, r3
 800bfa8:	f3bf 8f6f 	isb	sy
 800bfac:	f3bf 8f4f 	dsb	sy
 800bfb0:	613b      	str	r3, [r7, #16]
}
 800bfb2:	bf00      	nop
 800bfb4:	bf00      	nop
 800bfb6:	e7fd      	b.n	800bfb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bfb8:	697b      	ldr	r3, [r7, #20]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3718      	adds	r7, #24
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	2400112c 	.word	0x2400112c
 800bfc8:	08011c88 	.word	0x08011c88
 800bfcc:	0800c10d 	.word	0x0800c10d
 800bfd0:	24001130 	.word	0x24001130

0800bfd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b08a      	sub	sp, #40	@ 0x28
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	607a      	str	r2, [r7, #4]
 800bfe0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d10b      	bne.n	800c004 <xTimerGenericCommand+0x30>
	__asm volatile
 800bfec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	623b      	str	r3, [r7, #32]
}
 800bffe:	bf00      	nop
 800c000:	bf00      	nop
 800c002:	e7fd      	b.n	800c000 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c004:	4b19      	ldr	r3, [pc, #100]	@ (800c06c <xTimerGenericCommand+0x98>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d02a      	beq.n	800c062 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	2b05      	cmp	r3, #5
 800c01c:	dc18      	bgt.n	800c050 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c01e:	f7ff fead 	bl	800bd7c <xTaskGetSchedulerState>
 800c022:	4603      	mov	r3, r0
 800c024:	2b02      	cmp	r3, #2
 800c026:	d109      	bne.n	800c03c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c028:	4b10      	ldr	r3, [pc, #64]	@ (800c06c <xTimerGenericCommand+0x98>)
 800c02a:	6818      	ldr	r0, [r3, #0]
 800c02c:	f107 0110 	add.w	r1, r7, #16
 800c030:	2300      	movs	r3, #0
 800c032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c034:	f7fe fc88 	bl	800a948 <xQueueGenericSend>
 800c038:	6278      	str	r0, [r7, #36]	@ 0x24
 800c03a:	e012      	b.n	800c062 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c03c:	4b0b      	ldr	r3, [pc, #44]	@ (800c06c <xTimerGenericCommand+0x98>)
 800c03e:	6818      	ldr	r0, [r3, #0]
 800c040:	f107 0110 	add.w	r1, r7, #16
 800c044:	2300      	movs	r3, #0
 800c046:	2200      	movs	r2, #0
 800c048:	f7fe fc7e 	bl	800a948 <xQueueGenericSend>
 800c04c:	6278      	str	r0, [r7, #36]	@ 0x24
 800c04e:	e008      	b.n	800c062 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c050:	4b06      	ldr	r3, [pc, #24]	@ (800c06c <xTimerGenericCommand+0x98>)
 800c052:	6818      	ldr	r0, [r3, #0]
 800c054:	f107 0110 	add.w	r1, r7, #16
 800c058:	2300      	movs	r3, #0
 800c05a:	683a      	ldr	r2, [r7, #0]
 800c05c:	f7fe fd76 	bl	800ab4c <xQueueGenericSendFromISR>
 800c060:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c064:	4618      	mov	r0, r3
 800c066:	3728      	adds	r7, #40	@ 0x28
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	2400112c 	.word	0x2400112c

0800c070 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b088      	sub	sp, #32
 800c074:	af02      	add	r7, sp, #8
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c07a:	4b23      	ldr	r3, [pc, #140]	@ (800c108 <prvProcessExpiredTimer+0x98>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	3304      	adds	r3, #4
 800c088:	4618      	mov	r0, r3
 800c08a:	f7fe fb29 	bl	800a6e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c094:	f003 0304 	and.w	r3, r3, #4
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d023      	beq.n	800c0e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	699a      	ldr	r2, [r3, #24]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	18d1      	adds	r1, r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	683a      	ldr	r2, [r7, #0]
 800c0a8:	6978      	ldr	r0, [r7, #20]
 800c0aa:	f000 f8d5 	bl	800c258 <prvInsertTimerInActiveList>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d020      	beq.n	800c0f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	2100      	movs	r1, #0
 800c0be:	6978      	ldr	r0, [r7, #20]
 800c0c0:	f7ff ff88 	bl	800bfd4 <xTimerGenericCommand>
 800c0c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d114      	bne.n	800c0f6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c0cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	60fb      	str	r3, [r7, #12]
}
 800c0de:	bf00      	nop
 800c0e0:	bf00      	nop
 800c0e2:	e7fd      	b.n	800c0e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0ea:	f023 0301 	bic.w	r3, r3, #1
 800c0ee:	b2da      	uxtb	r2, r3
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	6a1b      	ldr	r3, [r3, #32]
 800c0fa:	6978      	ldr	r0, [r7, #20]
 800c0fc:	4798      	blx	r3
}
 800c0fe:	bf00      	nop
 800c100:	3718      	adds	r7, #24
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	24001124 	.word	0x24001124

0800c10c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c114:	f107 0308 	add.w	r3, r7, #8
 800c118:	4618      	mov	r0, r3
 800c11a:	f000 f859 	bl	800c1d0 <prvGetNextExpireTime>
 800c11e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	4619      	mov	r1, r3
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f000 f805 	bl	800c134 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c12a:	f000 f8d7 	bl	800c2dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c12e:	bf00      	nop
 800c130:	e7f0      	b.n	800c114 <prvTimerTask+0x8>
	...

0800c134 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c13e:	f7ff fa37 	bl	800b5b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c142:	f107 0308 	add.w	r3, r7, #8
 800c146:	4618      	mov	r0, r3
 800c148:	f000 f866 	bl	800c218 <prvSampleTimeNow>
 800c14c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d130      	bne.n	800c1b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d10a      	bne.n	800c170 <prvProcessTimerOrBlockTask+0x3c>
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	429a      	cmp	r2, r3
 800c160:	d806      	bhi.n	800c170 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c162:	f7ff fa33 	bl	800b5cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c166:	68f9      	ldr	r1, [r7, #12]
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7ff ff81 	bl	800c070 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c16e:	e024      	b.n	800c1ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d008      	beq.n	800c188 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c176:	4b13      	ldr	r3, [pc, #76]	@ (800c1c4 <prvProcessTimerOrBlockTask+0x90>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d101      	bne.n	800c184 <prvProcessTimerOrBlockTask+0x50>
 800c180:	2301      	movs	r3, #1
 800c182:	e000      	b.n	800c186 <prvProcessTimerOrBlockTask+0x52>
 800c184:	2300      	movs	r3, #0
 800c186:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c188:	4b0f      	ldr	r3, [pc, #60]	@ (800c1c8 <prvProcessTimerOrBlockTask+0x94>)
 800c18a:	6818      	ldr	r0, [r3, #0]
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	1ad3      	subs	r3, r2, r3
 800c192:	683a      	ldr	r2, [r7, #0]
 800c194:	4619      	mov	r1, r3
 800c196:	f7fe ff93 	bl	800b0c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c19a:	f7ff fa17 	bl	800b5cc <xTaskResumeAll>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10a      	bne.n	800c1ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c1a4:	4b09      	ldr	r3, [pc, #36]	@ (800c1cc <prvProcessTimerOrBlockTask+0x98>)
 800c1a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	f3bf 8f6f 	isb	sy
}
 800c1b4:	e001      	b.n	800c1ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c1b6:	f7ff fa09 	bl	800b5cc <xTaskResumeAll>
}
 800c1ba:	bf00      	nop
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	24001128 	.word	0x24001128
 800c1c8:	2400112c 	.word	0x2400112c
 800c1cc:	e000ed04 	.word	0xe000ed04

0800c1d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c1d8:	4b0e      	ldr	r3, [pc, #56]	@ (800c214 <prvGetNextExpireTime+0x44>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d101      	bne.n	800c1e6 <prvGetNextExpireTime+0x16>
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	e000      	b.n	800c1e8 <prvGetNextExpireTime+0x18>
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d105      	bne.n	800c200 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1f4:	4b07      	ldr	r3, [pc, #28]	@ (800c214 <prvGetNextExpireTime+0x44>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	60fb      	str	r3, [r7, #12]
 800c1fe:	e001      	b.n	800c204 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c200:	2300      	movs	r3, #0
 800c202:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c204:	68fb      	ldr	r3, [r7, #12]
}
 800c206:	4618      	mov	r0, r3
 800c208:	3714      	adds	r7, #20
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	24001124 	.word	0x24001124

0800c218 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c220:	f7ff fa72 	bl	800b708 <xTaskGetTickCount>
 800c224:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c226:	4b0b      	ldr	r3, [pc, #44]	@ (800c254 <prvSampleTimeNow+0x3c>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d205      	bcs.n	800c23c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c230:	f000 f93a 	bl	800c4a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2201      	movs	r2, #1
 800c238:	601a      	str	r2, [r3, #0]
 800c23a:	e002      	b.n	800c242 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c242:	4a04      	ldr	r2, [pc, #16]	@ (800c254 <prvSampleTimeNow+0x3c>)
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c248:	68fb      	ldr	r3, [r7, #12]
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3710      	adds	r7, #16
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	24001134 	.word	0x24001134

0800c258 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b086      	sub	sp, #24
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
 800c264:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c266:	2300      	movs	r3, #0
 800c268:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	68fa      	ldr	r2, [r7, #12]
 800c274:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c276:	68ba      	ldr	r2, [r7, #8]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d812      	bhi.n	800c2a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	1ad2      	subs	r2, r2, r3
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	699b      	ldr	r3, [r3, #24]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d302      	bcc.n	800c292 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c28c:	2301      	movs	r3, #1
 800c28e:	617b      	str	r3, [r7, #20]
 800c290:	e01b      	b.n	800c2ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c292:	4b10      	ldr	r3, [pc, #64]	@ (800c2d4 <prvInsertTimerInActiveList+0x7c>)
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	3304      	adds	r3, #4
 800c29a:	4619      	mov	r1, r3
 800c29c:	4610      	mov	r0, r2
 800c29e:	f7fe f9e6 	bl	800a66e <vListInsert>
 800c2a2:	e012      	b.n	800c2ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d206      	bcs.n	800c2ba <prvInsertTimerInActiveList+0x62>
 800c2ac:	68ba      	ldr	r2, [r7, #8]
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d302      	bcc.n	800c2ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	617b      	str	r3, [r7, #20]
 800c2b8:	e007      	b.n	800c2ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2ba:	4b07      	ldr	r3, [pc, #28]	@ (800c2d8 <prvInsertTimerInActiveList+0x80>)
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	3304      	adds	r3, #4
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	4610      	mov	r0, r2
 800c2c6:	f7fe f9d2 	bl	800a66e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c2ca:	697b      	ldr	r3, [r7, #20]
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3718      	adds	r7, #24
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	24001128 	.word	0x24001128
 800c2d8:	24001124 	.word	0x24001124

0800c2dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b08e      	sub	sp, #56	@ 0x38
 800c2e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2e2:	e0ce      	b.n	800c482 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	da19      	bge.n	800c31e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c2ea:	1d3b      	adds	r3, r7, #4
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d10b      	bne.n	800c30e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2fa:	f383 8811 	msr	BASEPRI, r3
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	61fb      	str	r3, [r7, #28]
}
 800c308:	bf00      	nop
 800c30a:	bf00      	nop
 800c30c:	e7fd      	b.n	800c30a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c314:	6850      	ldr	r0, [r2, #4]
 800c316:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c318:	6892      	ldr	r2, [r2, #8]
 800c31a:	4611      	mov	r1, r2
 800c31c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2b00      	cmp	r3, #0
 800c322:	f2c0 80ae 	blt.w	800c482 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c32c:	695b      	ldr	r3, [r3, #20]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d004      	beq.n	800c33c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c334:	3304      	adds	r3, #4
 800c336:	4618      	mov	r0, r3
 800c338:	f7fe f9d2 	bl	800a6e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c33c:	463b      	mov	r3, r7
 800c33e:	4618      	mov	r0, r3
 800c340:	f7ff ff6a 	bl	800c218 <prvSampleTimeNow>
 800c344:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2b09      	cmp	r3, #9
 800c34a:	f200 8097 	bhi.w	800c47c <prvProcessReceivedCommands+0x1a0>
 800c34e:	a201      	add	r2, pc, #4	@ (adr r2, 800c354 <prvProcessReceivedCommands+0x78>)
 800c350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c354:	0800c37d 	.word	0x0800c37d
 800c358:	0800c37d 	.word	0x0800c37d
 800c35c:	0800c37d 	.word	0x0800c37d
 800c360:	0800c3f3 	.word	0x0800c3f3
 800c364:	0800c407 	.word	0x0800c407
 800c368:	0800c453 	.word	0x0800c453
 800c36c:	0800c37d 	.word	0x0800c37d
 800c370:	0800c37d 	.word	0x0800c37d
 800c374:	0800c3f3 	.word	0x0800c3f3
 800c378:	0800c407 	.word	0x0800c407
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c382:	f043 0301 	orr.w	r3, r3, #1
 800c386:	b2da      	uxtb	r2, r3
 800c388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c38a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c38e:	68ba      	ldr	r2, [r7, #8]
 800c390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c392:	699b      	ldr	r3, [r3, #24]
 800c394:	18d1      	adds	r1, r2, r3
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c39a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c39c:	f7ff ff5c 	bl	800c258 <prvInsertTimerInActiveList>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d06c      	beq.n	800c480 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a8:	6a1b      	ldr	r3, [r3, #32]
 800c3aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3b4:	f003 0304 	and.w	r3, r3, #4
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d061      	beq.n	800c480 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c3bc:	68ba      	ldr	r2, [r7, #8]
 800c3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c0:	699b      	ldr	r3, [r3, #24]
 800c3c2:	441a      	add	r2, r3
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	9300      	str	r3, [sp, #0]
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	2100      	movs	r1, #0
 800c3cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3ce:	f7ff fe01 	bl	800bfd4 <xTimerGenericCommand>
 800c3d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c3d4:	6a3b      	ldr	r3, [r7, #32]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d152      	bne.n	800c480 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	61bb      	str	r3, [r7, #24]
}
 800c3ec:	bf00      	nop
 800c3ee:	bf00      	nop
 800c3f0:	e7fd      	b.n	800c3ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3f8:	f023 0301 	bic.w	r3, r3, #1
 800c3fc:	b2da      	uxtb	r2, r3
 800c3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c400:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c404:	e03d      	b.n	800c482 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c408:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c40c:	f043 0301 	orr.w	r3, r3, #1
 800c410:	b2da      	uxtb	r2, r3
 800c412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c414:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c41c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c420:	699b      	ldr	r3, [r3, #24]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d10b      	bne.n	800c43e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c42a:	f383 8811 	msr	BASEPRI, r3
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	617b      	str	r3, [r7, #20]
}
 800c438:	bf00      	nop
 800c43a:	bf00      	nop
 800c43c:	e7fd      	b.n	800c43a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c440:	699a      	ldr	r2, [r3, #24]
 800c442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c444:	18d1      	adds	r1, r2, r3
 800c446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c44a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c44c:	f7ff ff04 	bl	800c258 <prvInsertTimerInActiveList>
					break;
 800c450:	e017      	b.n	800c482 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c458:	f003 0302 	and.w	r3, r3, #2
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d103      	bne.n	800c468 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c460:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c462:	f000 fbe9 	bl	800cc38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c466:	e00c      	b.n	800c482 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c46a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c46e:	f023 0301 	bic.w	r3, r3, #1
 800c472:	b2da      	uxtb	r2, r3
 800c474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c476:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c47a:	e002      	b.n	800c482 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c47c:	bf00      	nop
 800c47e:	e000      	b.n	800c482 <prvProcessReceivedCommands+0x1a6>
					break;
 800c480:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c482:	4b08      	ldr	r3, [pc, #32]	@ (800c4a4 <prvProcessReceivedCommands+0x1c8>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	1d39      	adds	r1, r7, #4
 800c488:	2200      	movs	r2, #0
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7fe fbfc 	bl	800ac88 <xQueueReceive>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	f47f af26 	bne.w	800c2e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c498:	bf00      	nop
 800c49a:	bf00      	nop
 800c49c:	3730      	adds	r7, #48	@ 0x30
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	2400112c 	.word	0x2400112c

0800c4a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b088      	sub	sp, #32
 800c4ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4ae:	e049      	b.n	800c544 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4b0:	4b2e      	ldr	r3, [pc, #184]	@ (800c56c <prvSwitchTimerLists+0xc4>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4ba:	4b2c      	ldr	r3, [pc, #176]	@ (800c56c <prvSwitchTimerLists+0xc4>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	3304      	adds	r3, #4
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7fe f909 	bl	800a6e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6a1b      	ldr	r3, [r3, #32]
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4dc:	f003 0304 	and.w	r3, r3, #4
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d02f      	beq.n	800c544 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	693a      	ldr	r2, [r7, #16]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c4ee:	68ba      	ldr	r2, [r7, #8]
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d90e      	bls.n	800c514 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	68ba      	ldr	r2, [r7, #8]
 800c4fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	68fa      	ldr	r2, [r7, #12]
 800c500:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c502:	4b1a      	ldr	r3, [pc, #104]	@ (800c56c <prvSwitchTimerLists+0xc4>)
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	3304      	adds	r3, #4
 800c50a:	4619      	mov	r1, r3
 800c50c:	4610      	mov	r0, r2
 800c50e:	f7fe f8ae 	bl	800a66e <vListInsert>
 800c512:	e017      	b.n	800c544 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c514:	2300      	movs	r3, #0
 800c516:	9300      	str	r3, [sp, #0]
 800c518:	2300      	movs	r3, #0
 800c51a:	693a      	ldr	r2, [r7, #16]
 800c51c:	2100      	movs	r1, #0
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	f7ff fd58 	bl	800bfd4 <xTimerGenericCommand>
 800c524:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d10b      	bne.n	800c544 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c530:	f383 8811 	msr	BASEPRI, r3
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	f3bf 8f4f 	dsb	sy
 800c53c:	603b      	str	r3, [r7, #0]
}
 800c53e:	bf00      	nop
 800c540:	bf00      	nop
 800c542:	e7fd      	b.n	800c540 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c544:	4b09      	ldr	r3, [pc, #36]	@ (800c56c <prvSwitchTimerLists+0xc4>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d1b0      	bne.n	800c4b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c54e:	4b07      	ldr	r3, [pc, #28]	@ (800c56c <prvSwitchTimerLists+0xc4>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c554:	4b06      	ldr	r3, [pc, #24]	@ (800c570 <prvSwitchTimerLists+0xc8>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a04      	ldr	r2, [pc, #16]	@ (800c56c <prvSwitchTimerLists+0xc4>)
 800c55a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c55c:	4a04      	ldr	r2, [pc, #16]	@ (800c570 <prvSwitchTimerLists+0xc8>)
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	6013      	str	r3, [r2, #0]
}
 800c562:	bf00      	nop
 800c564:	3718      	adds	r7, #24
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	24001124 	.word	0x24001124
 800c570:	24001128 	.word	0x24001128

0800c574 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c57a:	f000 f96d 	bl	800c858 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c57e:	4b15      	ldr	r3, [pc, #84]	@ (800c5d4 <prvCheckForValidListAndQueue+0x60>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d120      	bne.n	800c5c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c586:	4814      	ldr	r0, [pc, #80]	@ (800c5d8 <prvCheckForValidListAndQueue+0x64>)
 800c588:	f7fe f820 	bl	800a5cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c58c:	4813      	ldr	r0, [pc, #76]	@ (800c5dc <prvCheckForValidListAndQueue+0x68>)
 800c58e:	f7fe f81d 	bl	800a5cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c592:	4b13      	ldr	r3, [pc, #76]	@ (800c5e0 <prvCheckForValidListAndQueue+0x6c>)
 800c594:	4a10      	ldr	r2, [pc, #64]	@ (800c5d8 <prvCheckForValidListAndQueue+0x64>)
 800c596:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c598:	4b12      	ldr	r3, [pc, #72]	@ (800c5e4 <prvCheckForValidListAndQueue+0x70>)
 800c59a:	4a10      	ldr	r2, [pc, #64]	@ (800c5dc <prvCheckForValidListAndQueue+0x68>)
 800c59c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c59e:	2300      	movs	r3, #0
 800c5a0:	9300      	str	r3, [sp, #0]
 800c5a2:	4b11      	ldr	r3, [pc, #68]	@ (800c5e8 <prvCheckForValidListAndQueue+0x74>)
 800c5a4:	4a11      	ldr	r2, [pc, #68]	@ (800c5ec <prvCheckForValidListAndQueue+0x78>)
 800c5a6:	2110      	movs	r1, #16
 800c5a8:	200a      	movs	r0, #10
 800c5aa:	f7fe f92d 	bl	800a808 <xQueueGenericCreateStatic>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	4a08      	ldr	r2, [pc, #32]	@ (800c5d4 <prvCheckForValidListAndQueue+0x60>)
 800c5b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c5b4:	4b07      	ldr	r3, [pc, #28]	@ (800c5d4 <prvCheckForValidListAndQueue+0x60>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d005      	beq.n	800c5c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c5bc:	4b05      	ldr	r3, [pc, #20]	@ (800c5d4 <prvCheckForValidListAndQueue+0x60>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	490b      	ldr	r1, [pc, #44]	@ (800c5f0 <prvCheckForValidListAndQueue+0x7c>)
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7fe fd52 	bl	800b06c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5c8:	f000 f978 	bl	800c8bc <vPortExitCritical>
}
 800c5cc:	bf00      	nop
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	2400112c 	.word	0x2400112c
 800c5d8:	240010fc 	.word	0x240010fc
 800c5dc:	24001110 	.word	0x24001110
 800c5e0:	24001124 	.word	0x24001124
 800c5e4:	24001128 	.word	0x24001128
 800c5e8:	240011d8 	.word	0x240011d8
 800c5ec:	24001138 	.word	0x24001138
 800c5f0:	08011c90 	.word	0x08011c90

0800c5f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b085      	sub	sp, #20
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	3b04      	subs	r3, #4
 800c604:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c60c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	3b04      	subs	r3, #4
 800c612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	f023 0201 	bic.w	r2, r3, #1
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	3b04      	subs	r3, #4
 800c622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c624:	4a0c      	ldr	r2, [pc, #48]	@ (800c658 <pxPortInitialiseStack+0x64>)
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	3b14      	subs	r3, #20
 800c62e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c630:	687a      	ldr	r2, [r7, #4]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	3b04      	subs	r3, #4
 800c63a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f06f 0202 	mvn.w	r2, #2
 800c642:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	3b20      	subs	r3, #32
 800c648:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c64a:	68fb      	ldr	r3, [r7, #12]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3714      	adds	r7, #20
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr
 800c658:	0800c65d 	.word	0x0800c65d

0800c65c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c65c:	b480      	push	{r7}
 800c65e:	b085      	sub	sp, #20
 800c660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c662:	2300      	movs	r3, #0
 800c664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c666:	4b13      	ldr	r3, [pc, #76]	@ (800c6b4 <prvTaskExitError+0x58>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c66e:	d00b      	beq.n	800c688 <prvTaskExitError+0x2c>
	__asm volatile
 800c670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c674:	f383 8811 	msr	BASEPRI, r3
 800c678:	f3bf 8f6f 	isb	sy
 800c67c:	f3bf 8f4f 	dsb	sy
 800c680:	60fb      	str	r3, [r7, #12]
}
 800c682:	bf00      	nop
 800c684:	bf00      	nop
 800c686:	e7fd      	b.n	800c684 <prvTaskExitError+0x28>
	__asm volatile
 800c688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c68c:	f383 8811 	msr	BASEPRI, r3
 800c690:	f3bf 8f6f 	isb	sy
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	60bb      	str	r3, [r7, #8]
}
 800c69a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c69c:	bf00      	nop
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d0fc      	beq.n	800c69e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c6a4:	bf00      	nop
 800c6a6:	bf00      	nop
 800c6a8:	3714      	adds	r7, #20
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	24000010 	.word	0x24000010
	...

0800c6c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6c0:	4b07      	ldr	r3, [pc, #28]	@ (800c6e0 <pxCurrentTCBConst2>)
 800c6c2:	6819      	ldr	r1, [r3, #0]
 800c6c4:	6808      	ldr	r0, [r1, #0]
 800c6c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ca:	f380 8809 	msr	PSP, r0
 800c6ce:	f3bf 8f6f 	isb	sy
 800c6d2:	f04f 0000 	mov.w	r0, #0
 800c6d6:	f380 8811 	msr	BASEPRI, r0
 800c6da:	4770      	bx	lr
 800c6dc:	f3af 8000 	nop.w

0800c6e0 <pxCurrentTCBConst2>:
 800c6e0:	24000bfc 	.word	0x24000bfc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c6e4:	bf00      	nop
 800c6e6:	bf00      	nop

0800c6e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c6e8:	4808      	ldr	r0, [pc, #32]	@ (800c70c <prvPortStartFirstTask+0x24>)
 800c6ea:	6800      	ldr	r0, [r0, #0]
 800c6ec:	6800      	ldr	r0, [r0, #0]
 800c6ee:	f380 8808 	msr	MSP, r0
 800c6f2:	f04f 0000 	mov.w	r0, #0
 800c6f6:	f380 8814 	msr	CONTROL, r0
 800c6fa:	b662      	cpsie	i
 800c6fc:	b661      	cpsie	f
 800c6fe:	f3bf 8f4f 	dsb	sy
 800c702:	f3bf 8f6f 	isb	sy
 800c706:	df00      	svc	0
 800c708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c70a:	bf00      	nop
 800c70c:	e000ed08 	.word	0xe000ed08

0800c710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b086      	sub	sp, #24
 800c714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c716:	4b47      	ldr	r3, [pc, #284]	@ (800c834 <xPortStartScheduler+0x124>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a47      	ldr	r2, [pc, #284]	@ (800c838 <xPortStartScheduler+0x128>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d10b      	bne.n	800c738 <xPortStartScheduler+0x28>
	__asm volatile
 800c720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c724:	f383 8811 	msr	BASEPRI, r3
 800c728:	f3bf 8f6f 	isb	sy
 800c72c:	f3bf 8f4f 	dsb	sy
 800c730:	613b      	str	r3, [r7, #16]
}
 800c732:	bf00      	nop
 800c734:	bf00      	nop
 800c736:	e7fd      	b.n	800c734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c738:	4b3e      	ldr	r3, [pc, #248]	@ (800c834 <xPortStartScheduler+0x124>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a3f      	ldr	r2, [pc, #252]	@ (800c83c <xPortStartScheduler+0x12c>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d10b      	bne.n	800c75a <xPortStartScheduler+0x4a>
	__asm volatile
 800c742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c746:	f383 8811 	msr	BASEPRI, r3
 800c74a:	f3bf 8f6f 	isb	sy
 800c74e:	f3bf 8f4f 	dsb	sy
 800c752:	60fb      	str	r3, [r7, #12]
}
 800c754:	bf00      	nop
 800c756:	bf00      	nop
 800c758:	e7fd      	b.n	800c756 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c75a:	4b39      	ldr	r3, [pc, #228]	@ (800c840 <xPortStartScheduler+0x130>)
 800c75c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	b2db      	uxtb	r3, r3
 800c764:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	22ff      	movs	r2, #255	@ 0xff
 800c76a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	b2db      	uxtb	r3, r3
 800c772:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c774:	78fb      	ldrb	r3, [r7, #3]
 800c776:	b2db      	uxtb	r3, r3
 800c778:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c77c:	b2da      	uxtb	r2, r3
 800c77e:	4b31      	ldr	r3, [pc, #196]	@ (800c844 <xPortStartScheduler+0x134>)
 800c780:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c782:	4b31      	ldr	r3, [pc, #196]	@ (800c848 <xPortStartScheduler+0x138>)
 800c784:	2207      	movs	r2, #7
 800c786:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c788:	e009      	b.n	800c79e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c78a:	4b2f      	ldr	r3, [pc, #188]	@ (800c848 <xPortStartScheduler+0x138>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	3b01      	subs	r3, #1
 800c790:	4a2d      	ldr	r2, [pc, #180]	@ (800c848 <xPortStartScheduler+0x138>)
 800c792:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c794:	78fb      	ldrb	r3, [r7, #3]
 800c796:	b2db      	uxtb	r3, r3
 800c798:	005b      	lsls	r3, r3, #1
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c79e:	78fb      	ldrb	r3, [r7, #3]
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7a6:	2b80      	cmp	r3, #128	@ 0x80
 800c7a8:	d0ef      	beq.n	800c78a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c7aa:	4b27      	ldr	r3, [pc, #156]	@ (800c848 <xPortStartScheduler+0x138>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f1c3 0307 	rsb	r3, r3, #7
 800c7b2:	2b04      	cmp	r3, #4
 800c7b4:	d00b      	beq.n	800c7ce <xPortStartScheduler+0xbe>
	__asm volatile
 800c7b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ba:	f383 8811 	msr	BASEPRI, r3
 800c7be:	f3bf 8f6f 	isb	sy
 800c7c2:	f3bf 8f4f 	dsb	sy
 800c7c6:	60bb      	str	r3, [r7, #8]
}
 800c7c8:	bf00      	nop
 800c7ca:	bf00      	nop
 800c7cc:	e7fd      	b.n	800c7ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c7ce:	4b1e      	ldr	r3, [pc, #120]	@ (800c848 <xPortStartScheduler+0x138>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	021b      	lsls	r3, r3, #8
 800c7d4:	4a1c      	ldr	r2, [pc, #112]	@ (800c848 <xPortStartScheduler+0x138>)
 800c7d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7d8:	4b1b      	ldr	r3, [pc, #108]	@ (800c848 <xPortStartScheduler+0x138>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c7e0:	4a19      	ldr	r2, [pc, #100]	@ (800c848 <xPortStartScheduler+0x138>)
 800c7e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	b2da      	uxtb	r2, r3
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c7ec:	4b17      	ldr	r3, [pc, #92]	@ (800c84c <xPortStartScheduler+0x13c>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a16      	ldr	r2, [pc, #88]	@ (800c84c <xPortStartScheduler+0x13c>)
 800c7f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c7f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c7f8:	4b14      	ldr	r3, [pc, #80]	@ (800c84c <xPortStartScheduler+0x13c>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a13      	ldr	r2, [pc, #76]	@ (800c84c <xPortStartScheduler+0x13c>)
 800c7fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c802:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c804:	f000 f8da 	bl	800c9bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c808:	4b11      	ldr	r3, [pc, #68]	@ (800c850 <xPortStartScheduler+0x140>)
 800c80a:	2200      	movs	r2, #0
 800c80c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c80e:	f000 f8f9 	bl	800ca04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c812:	4b10      	ldr	r3, [pc, #64]	@ (800c854 <xPortStartScheduler+0x144>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a0f      	ldr	r2, [pc, #60]	@ (800c854 <xPortStartScheduler+0x144>)
 800c818:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c81c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c81e:	f7ff ff63 	bl	800c6e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c822:	f7ff f83b 	bl	800b89c <vTaskSwitchContext>
	prvTaskExitError();
 800c826:	f7ff ff19 	bl	800c65c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3718      	adds	r7, #24
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}
 800c834:	e000ed00 	.word	0xe000ed00
 800c838:	410fc271 	.word	0x410fc271
 800c83c:	410fc270 	.word	0x410fc270
 800c840:	e000e400 	.word	0xe000e400
 800c844:	24001228 	.word	0x24001228
 800c848:	2400122c 	.word	0x2400122c
 800c84c:	e000ed20 	.word	0xe000ed20
 800c850:	24000010 	.word	0x24000010
 800c854:	e000ef34 	.word	0xe000ef34

0800c858 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
	__asm volatile
 800c85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	607b      	str	r3, [r7, #4]
}
 800c870:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c872:	4b10      	ldr	r3, [pc, #64]	@ (800c8b4 <vPortEnterCritical+0x5c>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	3301      	adds	r3, #1
 800c878:	4a0e      	ldr	r2, [pc, #56]	@ (800c8b4 <vPortEnterCritical+0x5c>)
 800c87a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c87c:	4b0d      	ldr	r3, [pc, #52]	@ (800c8b4 <vPortEnterCritical+0x5c>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	2b01      	cmp	r3, #1
 800c882:	d110      	bne.n	800c8a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c884:	4b0c      	ldr	r3, [pc, #48]	@ (800c8b8 <vPortEnterCritical+0x60>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00b      	beq.n	800c8a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c892:	f383 8811 	msr	BASEPRI, r3
 800c896:	f3bf 8f6f 	isb	sy
 800c89a:	f3bf 8f4f 	dsb	sy
 800c89e:	603b      	str	r3, [r7, #0]
}
 800c8a0:	bf00      	nop
 800c8a2:	bf00      	nop
 800c8a4:	e7fd      	b.n	800c8a2 <vPortEnterCritical+0x4a>
	}
}
 800c8a6:	bf00      	nop
 800c8a8:	370c      	adds	r7, #12
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	24000010 	.word	0x24000010
 800c8b8:	e000ed04 	.word	0xe000ed04

0800c8bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b083      	sub	sp, #12
 800c8c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c8c2:	4b12      	ldr	r3, [pc, #72]	@ (800c90c <vPortExitCritical+0x50>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d10b      	bne.n	800c8e2 <vPortExitCritical+0x26>
	__asm volatile
 800c8ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	607b      	str	r3, [r7, #4]
}
 800c8dc:	bf00      	nop
 800c8de:	bf00      	nop
 800c8e0:	e7fd      	b.n	800c8de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c8e2:	4b0a      	ldr	r3, [pc, #40]	@ (800c90c <vPortExitCritical+0x50>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	3b01      	subs	r3, #1
 800c8e8:	4a08      	ldr	r2, [pc, #32]	@ (800c90c <vPortExitCritical+0x50>)
 800c8ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c8ec:	4b07      	ldr	r3, [pc, #28]	@ (800c90c <vPortExitCritical+0x50>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d105      	bne.n	800c900 <vPortExitCritical+0x44>
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	f383 8811 	msr	BASEPRI, r3
}
 800c8fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c900:	bf00      	nop
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr
 800c90c:	24000010 	.word	0x24000010

0800c910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c910:	f3ef 8009 	mrs	r0, PSP
 800c914:	f3bf 8f6f 	isb	sy
 800c918:	4b15      	ldr	r3, [pc, #84]	@ (800c970 <pxCurrentTCBConst>)
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	f01e 0f10 	tst.w	lr, #16
 800c920:	bf08      	it	eq
 800c922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92a:	6010      	str	r0, [r2, #0]
 800c92c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c930:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c934:	f380 8811 	msr	BASEPRI, r0
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	f7fe ffac 	bl	800b89c <vTaskSwitchContext>
 800c944:	f04f 0000 	mov.w	r0, #0
 800c948:	f380 8811 	msr	BASEPRI, r0
 800c94c:	bc09      	pop	{r0, r3}
 800c94e:	6819      	ldr	r1, [r3, #0]
 800c950:	6808      	ldr	r0, [r1, #0]
 800c952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c956:	f01e 0f10 	tst.w	lr, #16
 800c95a:	bf08      	it	eq
 800c95c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c960:	f380 8809 	msr	PSP, r0
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	f3af 8000 	nop.w

0800c970 <pxCurrentTCBConst>:
 800c970:	24000bfc 	.word	0x24000bfc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c974:	bf00      	nop
 800c976:	bf00      	nop

0800c978 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
	__asm volatile
 800c97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c982:	f383 8811 	msr	BASEPRI, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	607b      	str	r3, [r7, #4]
}
 800c990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c992:	f7fe fec9 	bl	800b728 <xTaskIncrementTick>
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d003      	beq.n	800c9a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c99c:	4b06      	ldr	r3, [pc, #24]	@ (800c9b8 <xPortSysTickHandler+0x40>)
 800c99e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9a2:	601a      	str	r2, [r3, #0]
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	f383 8811 	msr	BASEPRI, r3
}
 800c9ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c9b0:	bf00      	nop
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	e000ed04 	.word	0xe000ed04

0800c9bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c9bc:	b480      	push	{r7}
 800c9be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9c0:	4b0b      	ldr	r3, [pc, #44]	@ (800c9f0 <vPortSetupTimerInterrupt+0x34>)
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9c6:	4b0b      	ldr	r3, [pc, #44]	@ (800c9f4 <vPortSetupTimerInterrupt+0x38>)
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c9f8 <vPortSetupTimerInterrupt+0x3c>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a0a      	ldr	r2, [pc, #40]	@ (800c9fc <vPortSetupTimerInterrupt+0x40>)
 800c9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9d6:	099b      	lsrs	r3, r3, #6
 800c9d8:	4a09      	ldr	r2, [pc, #36]	@ (800ca00 <vPortSetupTimerInterrupt+0x44>)
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9de:	4b04      	ldr	r3, [pc, #16]	@ (800c9f0 <vPortSetupTimerInterrupt+0x34>)
 800c9e0:	2207      	movs	r2, #7
 800c9e2:	601a      	str	r2, [r3, #0]
}
 800c9e4:	bf00      	nop
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop
 800c9f0:	e000e010 	.word	0xe000e010
 800c9f4:	e000e018 	.word	0xe000e018
 800c9f8:	24000000 	.word	0x24000000
 800c9fc:	10624dd3 	.word	0x10624dd3
 800ca00:	e000e014 	.word	0xe000e014

0800ca04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ca14 <vPortEnableVFP+0x10>
 800ca08:	6801      	ldr	r1, [r0, #0]
 800ca0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ca0e:	6001      	str	r1, [r0, #0]
 800ca10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca12:	bf00      	nop
 800ca14:	e000ed88 	.word	0xe000ed88

0800ca18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca18:	b480      	push	{r7}
 800ca1a:	b085      	sub	sp, #20
 800ca1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca1e:	f3ef 8305 	mrs	r3, IPSR
 800ca22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2b0f      	cmp	r3, #15
 800ca28:	d915      	bls.n	800ca56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca2a:	4a18      	ldr	r2, [pc, #96]	@ (800ca8c <vPortValidateInterruptPriority+0x74>)
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	4413      	add	r3, r2
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca34:	4b16      	ldr	r3, [pc, #88]	@ (800ca90 <vPortValidateInterruptPriority+0x78>)
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	7afa      	ldrb	r2, [r7, #11]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d20b      	bcs.n	800ca56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ca3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca42:	f383 8811 	msr	BASEPRI, r3
 800ca46:	f3bf 8f6f 	isb	sy
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	607b      	str	r3, [r7, #4]
}
 800ca50:	bf00      	nop
 800ca52:	bf00      	nop
 800ca54:	e7fd      	b.n	800ca52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca56:	4b0f      	ldr	r3, [pc, #60]	@ (800ca94 <vPortValidateInterruptPriority+0x7c>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ca5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ca98 <vPortValidateInterruptPriority+0x80>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d90b      	bls.n	800ca7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ca66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca6a:	f383 8811 	msr	BASEPRI, r3
 800ca6e:	f3bf 8f6f 	isb	sy
 800ca72:	f3bf 8f4f 	dsb	sy
 800ca76:	603b      	str	r3, [r7, #0]
}
 800ca78:	bf00      	nop
 800ca7a:	bf00      	nop
 800ca7c:	e7fd      	b.n	800ca7a <vPortValidateInterruptPriority+0x62>
	}
 800ca7e:	bf00      	nop
 800ca80:	3714      	adds	r7, #20
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	e000e3f0 	.word	0xe000e3f0
 800ca90:	24001228 	.word	0x24001228
 800ca94:	e000ed0c 	.word	0xe000ed0c
 800ca98:	2400122c 	.word	0x2400122c

0800ca9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b08a      	sub	sp, #40	@ 0x28
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800caa4:	2300      	movs	r3, #0
 800caa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800caa8:	f7fe fd82 	bl	800b5b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800caac:	4b5c      	ldr	r3, [pc, #368]	@ (800cc20 <pvPortMalloc+0x184>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d101      	bne.n	800cab8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cab4:	f000 f924 	bl	800cd00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cab8:	4b5a      	ldr	r3, [pc, #360]	@ (800cc24 <pvPortMalloc+0x188>)
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4013      	ands	r3, r2
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f040 8095 	bne.w	800cbf0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d01e      	beq.n	800cb0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cacc:	2208      	movs	r2, #8
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4413      	add	r3, r2
 800cad2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f003 0307 	and.w	r3, r3, #7
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d015      	beq.n	800cb0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f023 0307 	bic.w	r3, r3, #7
 800cae4:	3308      	adds	r3, #8
 800cae6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f003 0307 	and.w	r3, r3, #7
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00b      	beq.n	800cb0a <pvPortMalloc+0x6e>
	__asm volatile
 800caf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf6:	f383 8811 	msr	BASEPRI, r3
 800cafa:	f3bf 8f6f 	isb	sy
 800cafe:	f3bf 8f4f 	dsb	sy
 800cb02:	617b      	str	r3, [r7, #20]
}
 800cb04:	bf00      	nop
 800cb06:	bf00      	nop
 800cb08:	e7fd      	b.n	800cb06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d06f      	beq.n	800cbf0 <pvPortMalloc+0x154>
 800cb10:	4b45      	ldr	r3, [pc, #276]	@ (800cc28 <pvPortMalloc+0x18c>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d86a      	bhi.n	800cbf0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb1a:	4b44      	ldr	r3, [pc, #272]	@ (800cc2c <pvPortMalloc+0x190>)
 800cb1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb1e:	4b43      	ldr	r3, [pc, #268]	@ (800cc2c <pvPortMalloc+0x190>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb24:	e004      	b.n	800cb30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d903      	bls.n	800cb42 <pvPortMalloc+0xa6>
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1f1      	bne.n	800cb26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb42:	4b37      	ldr	r3, [pc, #220]	@ (800cc20 <pvPortMalloc+0x184>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d051      	beq.n	800cbf0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb4c:	6a3b      	ldr	r3, [r7, #32]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2208      	movs	r2, #8
 800cb52:	4413      	add	r3, r2
 800cb54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	6a3b      	ldr	r3, [r7, #32]
 800cb5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb60:	685a      	ldr	r2, [r3, #4]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	1ad2      	subs	r2, r2, r3
 800cb66:	2308      	movs	r3, #8
 800cb68:	005b      	lsls	r3, r3, #1
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d920      	bls.n	800cbb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	4413      	add	r3, r2
 800cb74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb76:	69bb      	ldr	r3, [r7, #24]
 800cb78:	f003 0307 	and.w	r3, r3, #7
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d00b      	beq.n	800cb98 <pvPortMalloc+0xfc>
	__asm volatile
 800cb80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb84:	f383 8811 	msr	BASEPRI, r3
 800cb88:	f3bf 8f6f 	isb	sy
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	613b      	str	r3, [r7, #16]
}
 800cb92:	bf00      	nop
 800cb94:	bf00      	nop
 800cb96:	e7fd      	b.n	800cb94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9a:	685a      	ldr	r2, [r3, #4]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	1ad2      	subs	r2, r2, r3
 800cba0:	69bb      	ldr	r3, [r7, #24]
 800cba2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cbaa:	69b8      	ldr	r0, [r7, #24]
 800cbac:	f000 f90a 	bl	800cdc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cbb0:	4b1d      	ldr	r3, [pc, #116]	@ (800cc28 <pvPortMalloc+0x18c>)
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	4a1b      	ldr	r2, [pc, #108]	@ (800cc28 <pvPortMalloc+0x18c>)
 800cbbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cbbe:	4b1a      	ldr	r3, [pc, #104]	@ (800cc28 <pvPortMalloc+0x18c>)
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	4b1b      	ldr	r3, [pc, #108]	@ (800cc30 <pvPortMalloc+0x194>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d203      	bcs.n	800cbd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cbca:	4b17      	ldr	r3, [pc, #92]	@ (800cc28 <pvPortMalloc+0x18c>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a18      	ldr	r2, [pc, #96]	@ (800cc30 <pvPortMalloc+0x194>)
 800cbd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd4:	685a      	ldr	r2, [r3, #4]
 800cbd6:	4b13      	ldr	r3, [pc, #76]	@ (800cc24 <pvPortMalloc+0x188>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	431a      	orrs	r2, r3
 800cbdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cbe6:	4b13      	ldr	r3, [pc, #76]	@ (800cc34 <pvPortMalloc+0x198>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	3301      	adds	r3, #1
 800cbec:	4a11      	ldr	r2, [pc, #68]	@ (800cc34 <pvPortMalloc+0x198>)
 800cbee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cbf0:	f7fe fcec 	bl	800b5cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	f003 0307 	and.w	r3, r3, #7
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00b      	beq.n	800cc16 <pvPortMalloc+0x17a>
	__asm volatile
 800cbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc02:	f383 8811 	msr	BASEPRI, r3
 800cc06:	f3bf 8f6f 	isb	sy
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	60fb      	str	r3, [r7, #12]
}
 800cc10:	bf00      	nop
 800cc12:	bf00      	nop
 800cc14:	e7fd      	b.n	800cc12 <pvPortMalloc+0x176>
	return pvReturn;
 800cc16:	69fb      	ldr	r3, [r7, #28]
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3728      	adds	r7, #40	@ 0x28
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	24004e38 	.word	0x24004e38
 800cc24:	24004e4c 	.word	0x24004e4c
 800cc28:	24004e3c 	.word	0x24004e3c
 800cc2c:	24004e30 	.word	0x24004e30
 800cc30:	24004e40 	.word	0x24004e40
 800cc34:	24004e44 	.word	0x24004e44

0800cc38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b086      	sub	sp, #24
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d04f      	beq.n	800ccea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc4a:	2308      	movs	r3, #8
 800cc4c:	425b      	negs	r3, r3
 800cc4e:	697a      	ldr	r2, [r7, #20]
 800cc50:	4413      	add	r3, r2
 800cc52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	685a      	ldr	r2, [r3, #4]
 800cc5c:	4b25      	ldr	r3, [pc, #148]	@ (800ccf4 <vPortFree+0xbc>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4013      	ands	r3, r2
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d10b      	bne.n	800cc7e <vPortFree+0x46>
	__asm volatile
 800cc66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc6a:	f383 8811 	msr	BASEPRI, r3
 800cc6e:	f3bf 8f6f 	isb	sy
 800cc72:	f3bf 8f4f 	dsb	sy
 800cc76:	60fb      	str	r3, [r7, #12]
}
 800cc78:	bf00      	nop
 800cc7a:	bf00      	nop
 800cc7c:	e7fd      	b.n	800cc7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d00b      	beq.n	800cc9e <vPortFree+0x66>
	__asm volatile
 800cc86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc8a:	f383 8811 	msr	BASEPRI, r3
 800cc8e:	f3bf 8f6f 	isb	sy
 800cc92:	f3bf 8f4f 	dsb	sy
 800cc96:	60bb      	str	r3, [r7, #8]
}
 800cc98:	bf00      	nop
 800cc9a:	bf00      	nop
 800cc9c:	e7fd      	b.n	800cc9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	685a      	ldr	r2, [r3, #4]
 800cca2:	4b14      	ldr	r3, [pc, #80]	@ (800ccf4 <vPortFree+0xbc>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4013      	ands	r3, r2
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d01e      	beq.n	800ccea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d11a      	bne.n	800ccea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	685a      	ldr	r2, [r3, #4]
 800ccb8:	4b0e      	ldr	r3, [pc, #56]	@ (800ccf4 <vPortFree+0xbc>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	43db      	mvns	r3, r3
 800ccbe:	401a      	ands	r2, r3
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ccc4:	f7fe fc74 	bl	800b5b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	685a      	ldr	r2, [r3, #4]
 800cccc:	4b0a      	ldr	r3, [pc, #40]	@ (800ccf8 <vPortFree+0xc0>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	4a09      	ldr	r2, [pc, #36]	@ (800ccf8 <vPortFree+0xc0>)
 800ccd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ccd6:	6938      	ldr	r0, [r7, #16]
 800ccd8:	f000 f874 	bl	800cdc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ccdc:	4b07      	ldr	r3, [pc, #28]	@ (800ccfc <vPortFree+0xc4>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	3301      	adds	r3, #1
 800cce2:	4a06      	ldr	r2, [pc, #24]	@ (800ccfc <vPortFree+0xc4>)
 800cce4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cce6:	f7fe fc71 	bl	800b5cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ccea:	bf00      	nop
 800ccec:	3718      	adds	r7, #24
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	24004e4c 	.word	0x24004e4c
 800ccf8:	24004e3c 	.word	0x24004e3c
 800ccfc:	24004e48 	.word	0x24004e48

0800cd00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd00:	b480      	push	{r7}
 800cd02:	b085      	sub	sp, #20
 800cd04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cd0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd0c:	4b27      	ldr	r3, [pc, #156]	@ (800cdac <prvHeapInit+0xac>)
 800cd0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f003 0307 	and.w	r3, r3, #7
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00c      	beq.n	800cd34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	3307      	adds	r3, #7
 800cd1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f023 0307 	bic.w	r3, r3, #7
 800cd26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd28:	68ba      	ldr	r2, [r7, #8]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	1ad3      	subs	r3, r2, r3
 800cd2e:	4a1f      	ldr	r2, [pc, #124]	@ (800cdac <prvHeapInit+0xac>)
 800cd30:	4413      	add	r3, r2
 800cd32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd38:	4a1d      	ldr	r2, [pc, #116]	@ (800cdb0 <prvHeapInit+0xb0>)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd3e:	4b1c      	ldr	r3, [pc, #112]	@ (800cdb0 <prvHeapInit+0xb0>)
 800cd40:	2200      	movs	r2, #0
 800cd42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	68ba      	ldr	r2, [r7, #8]
 800cd48:	4413      	add	r3, r2
 800cd4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd4c:	2208      	movs	r2, #8
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	1a9b      	subs	r3, r3, r2
 800cd52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f023 0307 	bic.w	r3, r3, #7
 800cd5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	4a15      	ldr	r2, [pc, #84]	@ (800cdb4 <prvHeapInit+0xb4>)
 800cd60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd62:	4b14      	ldr	r3, [pc, #80]	@ (800cdb4 <prvHeapInit+0xb4>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	2200      	movs	r2, #0
 800cd68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd6a:	4b12      	ldr	r3, [pc, #72]	@ (800cdb4 <prvHeapInit+0xb4>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	68fa      	ldr	r2, [r7, #12]
 800cd7a:	1ad2      	subs	r2, r2, r3
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd80:	4b0c      	ldr	r3, [pc, #48]	@ (800cdb4 <prvHeapInit+0xb4>)
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	4a0a      	ldr	r2, [pc, #40]	@ (800cdb8 <prvHeapInit+0xb8>)
 800cd8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	4a09      	ldr	r2, [pc, #36]	@ (800cdbc <prvHeapInit+0xbc>)
 800cd96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd98:	4b09      	ldr	r3, [pc, #36]	@ (800cdc0 <prvHeapInit+0xc0>)
 800cd9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cd9e:	601a      	str	r2, [r3, #0]
}
 800cda0:	bf00      	nop
 800cda2:	3714      	adds	r7, #20
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr
 800cdac:	24001230 	.word	0x24001230
 800cdb0:	24004e30 	.word	0x24004e30
 800cdb4:	24004e38 	.word	0x24004e38
 800cdb8:	24004e40 	.word	0x24004e40
 800cdbc:	24004e3c 	.word	0x24004e3c
 800cdc0:	24004e4c 	.word	0x24004e4c

0800cdc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b085      	sub	sp, #20
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cdcc:	4b28      	ldr	r3, [pc, #160]	@ (800ce70 <prvInsertBlockIntoFreeList+0xac>)
 800cdce:	60fb      	str	r3, [r7, #12]
 800cdd0:	e002      	b.n	800cdd8 <prvInsertBlockIntoFreeList+0x14>
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	60fb      	str	r3, [r7, #12]
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d8f7      	bhi.n	800cdd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	68ba      	ldr	r2, [r7, #8]
 800cdec:	4413      	add	r3, r2
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d108      	bne.n	800ce06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	685a      	ldr	r2, [r3, #4]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	441a      	add	r2, r3
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	68ba      	ldr	r2, [r7, #8]
 800ce10:	441a      	add	r2, r3
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d118      	bne.n	800ce4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	4b15      	ldr	r3, [pc, #84]	@ (800ce74 <prvInsertBlockIntoFreeList+0xb0>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d00d      	beq.n	800ce42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	685a      	ldr	r2, [r3, #4]
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	441a      	add	r2, r3
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	601a      	str	r2, [r3, #0]
 800ce40:	e008      	b.n	800ce54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce42:	4b0c      	ldr	r3, [pc, #48]	@ (800ce74 <prvInsertBlockIntoFreeList+0xb0>)
 800ce44:	681a      	ldr	r2, [r3, #0]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	601a      	str	r2, [r3, #0]
 800ce4a:	e003      	b.n	800ce54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d002      	beq.n	800ce62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce62:	bf00      	nop
 800ce64:	3714      	adds	r7, #20
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop
 800ce70:	24004e30 	.word	0x24004e30
 800ce74:	24004e38 	.word	0x24004e38

0800ce78 <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	2108      	movs	r1, #8
 800ce80:	480a      	ldr	r0, [pc, #40]	@ (800ceac <ad7606_Init+0x34>)
 800ce82:	f7f6 fe8d 	bl	8003ba0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800ce86:	2001      	movs	r0, #1
 800ce88:	f7f4 fda4 	bl	80019d4 <HAL_Delay>
    AD7606_RST_SET();
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	2108      	movs	r1, #8
 800ce90:	4806      	ldr	r0, [pc, #24]	@ (800ceac <ad7606_Init+0x34>)
 800ce92:	f7f6 fe85 	bl	8003ba0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800ce96:	2001      	movs	r0, #1
 800ce98:	f7f4 fd9c 	bl	80019d4 <HAL_Delay>
    AD7606_RST_RESET();
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	2108      	movs	r1, #8
 800cea0:	4802      	ldr	r0, [pc, #8]	@ (800ceac <ad7606_Init+0x34>)
 800cea2:	f7f6 fe7d 	bl	8003ba0 <HAL_GPIO_WritePin>
}
 800cea6:	bf00      	nop
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	58021800 	.word	0x58021800

0800ceb0 <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	4613      	mov	r3, r2
 800cebc:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 800cebe:	2200      	movs	r2, #0
 800cec0:	2180      	movs	r1, #128	@ 0x80
 800cec2:	4809      	ldr	r0, [pc, #36]	@ (800cee8 <ad7606_Read+0x38>)
 800cec4:	f7f6 fe6c 	bl	8003ba0 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 800cec8:	88fa      	ldrh	r2, [r7, #6]
 800ceca:	2364      	movs	r3, #100	@ 0x64
 800cecc:	68b9      	ldr	r1, [r7, #8]
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f7fb fbcc 	bl	800866c <HAL_SPI_Receive>
    AD7606_CS_SET();
 800ced4:	2201      	movs	r2, #1
 800ced6:	2180      	movs	r1, #128	@ 0x80
 800ced8:	4803      	ldr	r0, [pc, #12]	@ (800cee8 <ad7606_Read+0x38>)
 800ceda:	f7f6 fe61 	bl	8003ba0 <HAL_GPIO_WritePin>
}
 800cede:	bf00      	nop
 800cee0:	3710      	adds	r7, #16
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	58021800 	.word	0x58021800

0800ceec <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 800cef6:	6839      	ldr	r1, [r7, #0]
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f7fc f843 	bl	8008f84 <HAL_TIM_PWM_Start>
}
 800cefe:	bf00      	nop
 800cf00:	3708      	adds	r7, #8
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
	...

0800cf08 <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b087      	sub	sp, #28
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	460b      	mov	r3, r1
 800cf12:	607a      	str	r2, [r7, #4]
 800cf14:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 800cf16:	2300      	movs	r3, #0
 800cf18:	617b      	str	r3, [r7, #20]
 800cf1a:	e03d      	b.n	800cf98 <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	005b      	lsls	r3, r3, #1
 800cf20:	68fa      	ldr	r2, [r7, #12]
 800cf22:	4413      	add	r3, r2
 800cf24:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	da0f      	bge.n	800cf4c <ad7606_Convert+0x44>
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	005b      	lsls	r3, r3, #1
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	4413      	add	r3, r2
 800cf34:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf38:	b29b      	uxth	r3, r3
 800cf3a:	425b      	negs	r3, r3
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800cf42:	b29b      	uxth	r3, r3
 800cf44:	425b      	negs	r3, r3
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	b21b      	sxth	r3, r3
 800cf4a:	e005      	b.n	800cf58 <ad7606_Convert+0x50>
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	005b      	lsls	r3, r3, #1
 800cf50:	68fa      	ldr	r2, [r7, #12]
 800cf52:	4413      	add	r3, r2
 800cf54:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf58:	697a      	ldr	r2, [r7, #20]
 800cf5a:	0052      	lsls	r2, r2, #1
 800cf5c:	68f9      	ldr	r1, [r7, #12]
 800cf5e:	440a      	add	r2, r1
 800cf60:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	005b      	lsls	r3, r3, #1
 800cf66:	68fa      	ldr	r2, [r7, #12]
 800cf68:	4413      	add	r3, r2
 800cf6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf6e:	ee07 3a90 	vmov	s15, r3
 800cf72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf76:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800cf7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	009b      	lsls	r3, r3, #2
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	4413      	add	r3, r2
 800cf86:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800cfb0 <ad7606_Convert+0xa8>
 800cf8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cf8e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	3301      	adds	r3, #1
 800cf96:	617b      	str	r3, [r7, #20]
 800cf98:	897b      	ldrh	r3, [r7, #10]
 800cf9a:	697a      	ldr	r2, [r7, #20]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	dbbd      	blt.n	800cf1c <ad7606_Convert+0x14>
    }
}
 800cfa0:	bf00      	nop
 800cfa2:	bf00      	nop
 800cfa4:	371c      	adds	r7, #28
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr
 800cfae:	bf00      	nop
 800cfb0:	47000000 	.word	0x47000000

0800cfb4 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 800cfb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfb8:	b087      	sub	sp, #28
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	60f8      	str	r0, [r7, #12]
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	607a      	str	r2, [r7, #4]
 800cfc2:	817b      	strh	r3, [r7, #10]
 800cfc4:	466b      	mov	r3, sp
 800cfc6:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 800cfc8:	8979      	ldrh	r1, [r7, #10]
 800cfca:	460b      	mov	r3, r1
 800cfcc:	3b01      	subs	r3, #1
 800cfce:	617b      	str	r3, [r7, #20]
 800cfd0:	b28b      	uxth	r3, r1
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	4698      	mov	r8, r3
 800cfd6:	4691      	mov	r9, r2
 800cfd8:	f04f 0200 	mov.w	r2, #0
 800cfdc:	f04f 0300 	mov.w	r3, #0
 800cfe0:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800cfe4:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800cfe8:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800cfec:	b28b      	uxth	r3, r1
 800cfee:	2200      	movs	r2, #0
 800cff0:	461c      	mov	r4, r3
 800cff2:	4615      	mov	r5, r2
 800cff4:	f04f 0200 	mov.w	r2, #0
 800cff8:	f04f 0300 	mov.w	r3, #0
 800cffc:	012b      	lsls	r3, r5, #4
 800cffe:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800d002:	0122      	lsls	r2, r4, #4
 800d004:	460b      	mov	r3, r1
 800d006:	005b      	lsls	r3, r3, #1
 800d008:	3307      	adds	r3, #7
 800d00a:	08db      	lsrs	r3, r3, #3
 800d00c:	00db      	lsls	r3, r3, #3
 800d00e:	ebad 0d03 	sub.w	sp, sp, r3
 800d012:	466b      	mov	r3, sp
 800d014:	3301      	adds	r3, #1
 800d016:	085b      	lsrs	r3, r3, #1
 800d018:	005b      	lsls	r3, r3, #1
 800d01a:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 800d01c:	897b      	ldrh	r3, [r7, #10]
 800d01e:	461a      	mov	r2, r3
 800d020:	6939      	ldr	r1, [r7, #16]
 800d022:	68f8      	ldr	r0, [r7, #12]
 800d024:	f7ff ff44 	bl	800ceb0 <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 800d028:	897b      	ldrh	r3, [r7, #10]
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	4619      	mov	r1, r3
 800d02e:	6938      	ldr	r0, [r7, #16]
 800d030:	f7ff ff6a 	bl	800cf08 <ad7606_Convert>
 800d034:	46b5      	mov	sp, r6
}
 800d036:	bf00      	nop
 800d038:	371c      	adds	r7, #28
 800d03a:	46bd      	mov	sp, r7
 800d03c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d040 <INA228_readReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要读取的寄存器地址
 * @return 寄存器中的值
 */
uint64_t INA228_readReg(INA228_Handle sensor, uint8_t regAddr)
{
 800d040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d044:	b08d      	sub	sp, #52	@ 0x34
 800d046:	af04      	add	r7, sp, #16
 800d048:	6078      	str	r0, [r7, #4]
 800d04a:	460b      	mov	r3, r1
 800d04c:	70fb      	strb	r3, [r7, #3]
	uint64_t value;
	int i;

	uint8_t rxBuf[5] = {0}; // max buffer size
 800d04e:	2300      	movs	r3, #0
 800d050:	60fb      	str	r3, [r7, #12]
 800d052:	2300      	movs	r3, #0
 800d054:	743b      	strb	r3, [r7, #16]
	// 读取寄存器值
	HAL_I2C_Mem_Read(sensor->hi2c, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, rxBuf, INA228_regSize[regAddr], 100);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	69d8      	ldr	r0, [r3, #28]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d060:	461e      	mov	r6, r3
 800d062:	78fb      	ldrb	r3, [r7, #3]
 800d064:	b29a      	uxth	r2, r3
 800d066:	78fb      	ldrb	r3, [r7, #3]
 800d068:	4920      	ldr	r1, [pc, #128]	@ (800d0ec <INA228_readReg+0xac>)
 800d06a:	5ccb      	ldrb	r3, [r1, r3]
 800d06c:	4619      	mov	r1, r3
 800d06e:	2364      	movs	r3, #100	@ 0x64
 800d070:	9302      	str	r3, [sp, #8]
 800d072:	9101      	str	r1, [sp, #4]
 800d074:	f107 030c 	add.w	r3, r7, #12
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	2301      	movs	r3, #1
 800d07c:	4631      	mov	r1, r6
 800d07e:	f7f6 fe79 	bl	8003d74 <HAL_I2C_Mem_Read>

	// 合并字节
	value = rxBuf[0];
 800d082:	7b3b      	ldrb	r3, [r7, #12]
 800d084:	b2db      	uxtb	r3, r3
 800d086:	2200      	movs	r2, #0
 800d088:	469a      	mov	sl, r3
 800d08a:	4693      	mov	fp, r2
 800d08c:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 800d090:	2301      	movs	r3, #1
 800d092:	617b      	str	r3, [r7, #20]
 800d094:	e01b      	b.n	800d0ce <INA228_readReg+0x8e>
	{
		value = (value << 8) | rxBuf[i];
 800d096:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d09a:	f04f 0200 	mov.w	r2, #0
 800d09e:	f04f 0300 	mov.w	r3, #0
 800d0a2:	020b      	lsls	r3, r1, #8
 800d0a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d0a8:	0202      	lsls	r2, r0, #8
 800d0aa:	f107 000c 	add.w	r0, r7, #12
 800d0ae:	6979      	ldr	r1, [r7, #20]
 800d0b0:	4401      	add	r1, r0
 800d0b2:	7809      	ldrb	r1, [r1, #0]
 800d0b4:	b2c9      	uxtb	r1, r1
 800d0b6:	2000      	movs	r0, #0
 800d0b8:	460c      	mov	r4, r1
 800d0ba:	4605      	mov	r5, r0
 800d0bc:	ea42 0804 	orr.w	r8, r2, r4
 800d0c0:	ea43 0905 	orr.w	r9, r3, r5
 800d0c4:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	617b      	str	r3, [r7, #20]
 800d0ce:	78fb      	ldrb	r3, [r7, #3]
 800d0d0:	4a06      	ldr	r2, [pc, #24]	@ (800d0ec <INA228_readReg+0xac>)
 800d0d2:	5cd3      	ldrb	r3, [r2, r3]
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	dbdc      	blt.n	800d096 <INA228_readReg+0x56>
	}

	return value;
 800d0dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800d0e0:	4610      	mov	r0, r2
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	3724      	adds	r7, #36	@ 0x24
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ec:	08011dd8 	.word	0x08011dd8

0800d0f0 <INA228_getVBUS_V>:
 * @brief 获取总线电压值（伏特）
 * @param sensor INA228传感器的句柄
 * @return 总线电压值（V）
 */
float INA228_getVBUS_V(INA228_Handle sensor)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b086      	sub	sp, #24
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_vbus_register);
 800d0f8:	2105      	movs	r1, #5
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7ff ffa0 	bl	800d040 <INA228_readReg>
 800d100:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 800d104:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d108:	f04f 0200 	mov.w	r2, #0
 800d10c:	f04f 0300 	mov.w	r3, #0
 800d110:	0902      	lsrs	r2, r0, #4
 800d112:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800d116:	090b      	lsrs	r3, r1, #4
 800d118:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Convert for 2's compliment and signed value (though always positive)
	if (value > 0x7FFFF)
 800d11c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d120:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800d124:	f173 0300 	sbcs.w	r3, r3, #0
 800d128:	d30c      	bcc.n	800d144 <INA228_getVBUS_V+0x54>
	{
		data = (float)value - 0x100000; // left for redundancy and error checking, should never get used
 800d12a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d12e:	f7f3 f9f7 	bl	8000520 <__aeabi_ul2f>
 800d132:	ee07 0a10 	vmov	s14, r0
 800d136:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800d178 <INA228_getVBUS_V+0x88>
 800d13a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d13e:	edc7 7a05 	vstr	s15, [r7, #20]
 800d142:	e005      	b.n	800d150 <INA228_getVBUS_V+0x60>
	}
	else
	{
		data = (float)value;
 800d144:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d148:	f7f3 f9ea 	bl	8000520 <__aeabi_ul2f>
 800d14c:	4603      	mov	r3, r0
 800d14e:	617b      	str	r3, [r7, #20]
	}

	// Convert to V
	data = (data * 195.3125f) / 1000000;
 800d150:	edd7 7a05 	vldr	s15, [r7, #20]
 800d154:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800d17c <INA228_getVBUS_V+0x8c>
 800d158:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d15c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800d180 <INA228_getVBUS_V+0x90>
 800d160:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d164:	edc7 7a05 	vstr	s15, [r7, #20]

	return data;
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	ee07 3a90 	vmov	s15, r3
}
 800d16e:	eeb0 0a67 	vmov.f32	s0, s15
 800d172:	3718      	adds	r7, #24
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}
 800d178:	49800000 	.word	0x49800000
 800d17c:	43435000 	.word	0x43435000
 800d180:	49742400 	.word	0x49742400

0800d184 <INA228_getCURRENT_signedLSB>:
 * @brief 获取电流值（最低有效位）
 * @param sensor INA228传感器的句柄
 * @return 电流值（signed LSBs）
 */
float INA228_getCURRENT_signedLSB(INA228_Handle sensor)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b086      	sub	sp, #24
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_current_register);
 800d18c:	2107      	movs	r1, #7
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f7ff ff56 	bl	800d040 <INA228_readReg>
 800d194:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 800d198:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d19c:	f04f 0200 	mov.w	r2, #0
 800d1a0:	f04f 0300 	mov.w	r3, #0
 800d1a4:	0902      	lsrs	r2, r0, #4
 800d1a6:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800d1aa:	090b      	lsrs	r3, r1, #4
 800d1ac:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// 转换为 2 的补码和有符号值
	if (value > 0x7FFFF)
 800d1b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d1b4:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800d1b8:	f173 0300 	sbcs.w	r3, r3, #0
 800d1bc:	d30c      	bcc.n	800d1d8 <INA228_getCURRENT_signedLSB+0x54>
	{
		data = (float)value - 0x100000;
 800d1be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d1c2:	f7f3 f9ad 	bl	8000520 <__aeabi_ul2f>
 800d1c6:	ee07 0a10 	vmov	s14, r0
 800d1ca:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800d1f4 <INA228_getCURRENT_signedLSB+0x70>
 800d1ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1d2:	edc7 7a05 	vstr	s15, [r7, #20]
 800d1d6:	e005      	b.n	800d1e4 <INA228_getCURRENT_signedLSB+0x60>
	}
	else
	{
		data = (float)value;
 800d1d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d1dc:	f7f3 f9a0 	bl	8000520 <__aeabi_ul2f>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	617b      	str	r3, [r7, #20]
	}

	return data;
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	ee07 3a90 	vmov	s15, r3
}
 800d1ea:	eeb0 0a67 	vmov.f32	s0, s15
 800d1ee:	3718      	adds	r7, #24
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	49800000 	.word	0x49800000

0800d1f8 <INA228_getCURRENT_A>:
 * @brief 获取电流值（安培）
 * @param sensor INA228传感器的句柄
 * @return 电流值（A）
 */
float INA228_getCURRENT_A(INA228_Handle sensor)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b084      	sub	sp, #16
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
	float data = INA228_getCURRENT_signedLSB(sensor);
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f7ff ffbf 	bl	800d184 <INA228_getCURRENT_signedLSB>
 800d206:	ed87 0a03 	vstr	s0, [r7, #12]

	data = data * sensor->currentlsb;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	edd3 7a06 	vldr	s15, [r3, #24]
 800d210:	ed97 7a03 	vldr	s14, [r7, #12]
 800d214:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d218:	edc7 7a03 	vstr	s15, [r7, #12]

	return data;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	ee07 3a90 	vmov	s15, r3
}
 800d222:	eeb0 0a67 	vmov.f32	s0, s15
 800d226:	3710      	adds	r7, #16
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <OLED_WR_Byte>:
 * @brief 写入数据
 * @param dat 要写入的数据
 * @param cmd 数据类型 0 写入命令 1 写入数据
 */
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	4603      	mov	r3, r0
 800d234:	460a      	mov	r2, r1
 800d236:	71fb      	strb	r3, [r7, #7]
 800d238:	4613      	mov	r3, r2
 800d23a:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 800d23c:	1dfb      	adds	r3, r7, #7
 800d23e:	60fb      	str	r3, [r7, #12]
	if (cmd)
 800d240:	79bb      	ldrb	r3, [r7, #6]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d005      	beq.n	800d252 <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 800d246:	2201      	movs	r2, #1
 800d248:	2120      	movs	r1, #32
 800d24a:	4811      	ldr	r0, [pc, #68]	@ (800d290 <OLED_WR_Byte+0x64>)
 800d24c:	f7f6 fca8 	bl	8003ba0 <HAL_GPIO_WritePin>
 800d250:	e004      	b.n	800d25c <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 800d252:	2200      	movs	r2, #0
 800d254:	2120      	movs	r1, #32
 800d256:	480e      	ldr	r0, [pc, #56]	@ (800d290 <OLED_WR_Byte+0x64>)
 800d258:	f7f6 fca2 	bl	8003ba0 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 800d25c:	2200      	movs	r2, #0
 800d25e:	2102      	movs	r1, #2
 800d260:	480c      	ldr	r0, [pc, #48]	@ (800d294 <OLED_WR_Byte+0x68>)
 800d262:	f7f6 fc9d 	bl	8003ba0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 800d266:	23c8      	movs	r3, #200	@ 0xc8
 800d268:	2201      	movs	r2, #1
 800d26a:	68f9      	ldr	r1, [r7, #12]
 800d26c:	480a      	ldr	r0, [pc, #40]	@ (800d298 <OLED_WR_Byte+0x6c>)
 800d26e:	f7fb f80f 	bl	8008290 <HAL_SPI_Transmit>

	OLED_CS_Set();
 800d272:	2201      	movs	r2, #1
 800d274:	2102      	movs	r1, #2
 800d276:	4807      	ldr	r0, [pc, #28]	@ (800d294 <OLED_WR_Byte+0x68>)
 800d278:	f7f6 fc92 	bl	8003ba0 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 800d27c:	2201      	movs	r2, #1
 800d27e:	2120      	movs	r1, #32
 800d280:	4803      	ldr	r0, [pc, #12]	@ (800d290 <OLED_WR_Byte+0x64>)
 800d282:	f7f6 fc8d 	bl	8003ba0 <HAL_GPIO_WritePin>
}
 800d286:	bf00      	nop
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	58020800 	.word	0x58020800
 800d294:	58020400 	.word	0x58020400
 800d298:	24000304 	.word	0x24000304

0800d29c <OLED_Refresh>:

/**
 * @brief 更新显存到OLED
 */
void OLED_Refresh(void)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	71fb      	strb	r3, [r7, #7]
 800d2a6:	e026      	b.n	800d2f6 <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 800d2a8:	79fb      	ldrb	r3, [r7, #7]
 800d2aa:	3b50      	subs	r3, #80	@ 0x50
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	2100      	movs	r1, #0
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7ff ffbb 	bl	800d22c <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 800d2b6:	2100      	movs	r1, #0
 800d2b8:	2000      	movs	r0, #0
 800d2ba:	f7ff ffb7 	bl	800d22c <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 800d2be:	2100      	movs	r1, #0
 800d2c0:	2010      	movs	r0, #16
 800d2c2:	f7ff ffb3 	bl	800d22c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	71bb      	strb	r3, [r7, #6]
 800d2ca:	e00d      	b.n	800d2e8 <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800d2cc:	79ba      	ldrb	r2, [r7, #6]
 800d2ce:	79fb      	ldrb	r3, [r7, #7]
 800d2d0:	490d      	ldr	r1, [pc, #52]	@ (800d308 <OLED_Refresh+0x6c>)
 800d2d2:	00d2      	lsls	r2, r2, #3
 800d2d4:	440a      	add	r2, r1
 800d2d6:	4413      	add	r3, r2
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	2101      	movs	r1, #1
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7ff ffa5 	bl	800d22c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800d2e2:	79bb      	ldrb	r3, [r7, #6]
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	71bb      	strb	r3, [r7, #6]
 800d2e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	daed      	bge.n	800d2cc <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 800d2f0:	79fb      	ldrb	r3, [r7, #7]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	71fb      	strb	r3, [r7, #7]
 800d2f6:	79fb      	ldrb	r3, [r7, #7]
 800d2f8:	2b07      	cmp	r3, #7
 800d2fa:	d9d5      	bls.n	800d2a8 <OLED_Refresh+0xc>
	}
}
 800d2fc:	bf00      	nop
 800d2fe:	bf00      	nop
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	24004e50 	.word	0x24004e50

0800d30c <OLED_DrawPoint>:
 * @brief 画点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b085      	sub	sp, #20
 800d310:	af00      	add	r7, sp, #0
 800d312:	4603      	mov	r3, r0
 800d314:	460a      	mov	r2, r1
 800d316:	71fb      	strb	r3, [r7, #7]
 800d318:	4613      	mov	r3, r2
 800d31a:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800d31c:	79bb      	ldrb	r3, [r7, #6]
 800d31e:	08db      	lsrs	r3, r3, #3
 800d320:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800d322:	79bb      	ldrb	r3, [r7, #6]
 800d324:	f003 0307 	and.w	r3, r3, #7
 800d328:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800d32a:	7bbb      	ldrb	r3, [r7, #14]
 800d32c:	2201      	movs	r2, #1
 800d32e:	fa02 f303 	lsl.w	r3, r2, r3
 800d332:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 800d334:	79fa      	ldrb	r2, [r7, #7]
 800d336:	7bfb      	ldrb	r3, [r7, #15]
 800d338:	490a      	ldr	r1, [pc, #40]	@ (800d364 <OLED_DrawPoint+0x58>)
 800d33a:	00d2      	lsls	r2, r2, #3
 800d33c:	440a      	add	r2, r1
 800d33e:	4413      	add	r3, r2
 800d340:	7818      	ldrb	r0, [r3, #0]
 800d342:	79fa      	ldrb	r2, [r7, #7]
 800d344:	7bfb      	ldrb	r3, [r7, #15]
 800d346:	7b79      	ldrb	r1, [r7, #13]
 800d348:	4301      	orrs	r1, r0
 800d34a:	b2c8      	uxtb	r0, r1
 800d34c:	4905      	ldr	r1, [pc, #20]	@ (800d364 <OLED_DrawPoint+0x58>)
 800d34e:	00d2      	lsls	r2, r2, #3
 800d350:	440a      	add	r2, r1
 800d352:	4413      	add	r3, r2
 800d354:	4602      	mov	r2, r0
 800d356:	701a      	strb	r2, [r3, #0]
}
 800d358:	bf00      	nop
 800d35a:	3714      	adds	r7, #20
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr
 800d364:	24004e50 	.word	0x24004e50

0800d368 <OLED_ClearPoint>:
 * @brief 清除一个点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 800d368:	b480      	push	{r7}
 800d36a:	b085      	sub	sp, #20
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	4603      	mov	r3, r0
 800d370:	460a      	mov	r2, r1
 800d372:	71fb      	strb	r3, [r7, #7]
 800d374:	4613      	mov	r3, r2
 800d376:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800d378:	79bb      	ldrb	r3, [r7, #6]
 800d37a:	08db      	lsrs	r3, r3, #3
 800d37c:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800d37e:	79bb      	ldrb	r3, [r7, #6]
 800d380:	f003 0307 	and.w	r3, r3, #7
 800d384:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800d386:	7bbb      	ldrb	r3, [r7, #14]
 800d388:	2201      	movs	r2, #1
 800d38a:	fa02 f303 	lsl.w	r3, r2, r3
 800d38e:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800d390:	79fa      	ldrb	r2, [r7, #7]
 800d392:	7bfb      	ldrb	r3, [r7, #15]
 800d394:	491b      	ldr	r1, [pc, #108]	@ (800d404 <OLED_ClearPoint+0x9c>)
 800d396:	00d2      	lsls	r2, r2, #3
 800d398:	440a      	add	r2, r1
 800d39a:	4413      	add	r3, r2
 800d39c:	7819      	ldrb	r1, [r3, #0]
 800d39e:	79fa      	ldrb	r2, [r7, #7]
 800d3a0:	7bfb      	ldrb	r3, [r7, #15]
 800d3a2:	43c9      	mvns	r1, r1
 800d3a4:	b2c8      	uxtb	r0, r1
 800d3a6:	4917      	ldr	r1, [pc, #92]	@ (800d404 <OLED_ClearPoint+0x9c>)
 800d3a8:	00d2      	lsls	r2, r2, #3
 800d3aa:	440a      	add	r2, r1
 800d3ac:	4413      	add	r3, r2
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 800d3b2:	79fa      	ldrb	r2, [r7, #7]
 800d3b4:	7bfb      	ldrb	r3, [r7, #15]
 800d3b6:	4913      	ldr	r1, [pc, #76]	@ (800d404 <OLED_ClearPoint+0x9c>)
 800d3b8:	00d2      	lsls	r2, r2, #3
 800d3ba:	440a      	add	r2, r1
 800d3bc:	4413      	add	r3, r2
 800d3be:	7818      	ldrb	r0, [r3, #0]
 800d3c0:	79fa      	ldrb	r2, [r7, #7]
 800d3c2:	7bfb      	ldrb	r3, [r7, #15]
 800d3c4:	7b79      	ldrb	r1, [r7, #13]
 800d3c6:	4301      	orrs	r1, r0
 800d3c8:	b2c8      	uxtb	r0, r1
 800d3ca:	490e      	ldr	r1, [pc, #56]	@ (800d404 <OLED_ClearPoint+0x9c>)
 800d3cc:	00d2      	lsls	r2, r2, #3
 800d3ce:	440a      	add	r2, r1
 800d3d0:	4413      	add	r3, r2
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800d3d6:	79fa      	ldrb	r2, [r7, #7]
 800d3d8:	7bfb      	ldrb	r3, [r7, #15]
 800d3da:	490a      	ldr	r1, [pc, #40]	@ (800d404 <OLED_ClearPoint+0x9c>)
 800d3dc:	00d2      	lsls	r2, r2, #3
 800d3de:	440a      	add	r2, r1
 800d3e0:	4413      	add	r3, r2
 800d3e2:	7819      	ldrb	r1, [r3, #0]
 800d3e4:	79fa      	ldrb	r2, [r7, #7]
 800d3e6:	7bfb      	ldrb	r3, [r7, #15]
 800d3e8:	43c9      	mvns	r1, r1
 800d3ea:	b2c8      	uxtb	r0, r1
 800d3ec:	4905      	ldr	r1, [pc, #20]	@ (800d404 <OLED_ClearPoint+0x9c>)
 800d3ee:	00d2      	lsls	r2, r2, #3
 800d3f0:	440a      	add	r2, r1
 800d3f2:	4413      	add	r3, r2
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	701a      	strb	r2, [r3, #0]
}
 800d3f8:	bf00      	nop
 800d3fa:	3714      	adds	r7, #20
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr
 800d404:	24004e50 	.word	0x24004e50

0800d408 <OLED_ShowChar>:
 * @param chr 要显示的字符
 * @param size1 字体大小 12/16/24
 * @note 取模方式 逐列式
 */
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 800d408:	b590      	push	{r4, r7, lr}
 800d40a:	b085      	sub	sp, #20
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	4604      	mov	r4, r0
 800d410:	4608      	mov	r0, r1
 800d412:	4611      	mov	r1, r2
 800d414:	461a      	mov	r2, r3
 800d416:	4623      	mov	r3, r4
 800d418:	71fb      	strb	r3, [r7, #7]
 800d41a:	4603      	mov	r3, r0
 800d41c:	71bb      	strb	r3, [r7, #6]
 800d41e:	460b      	mov	r3, r1
 800d420:	717b      	strb	r3, [r7, #5]
 800d422:	4613      	mov	r3, r2
 800d424:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 800d426:	79bb      	ldrb	r3, [r7, #6]
 800d428:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 800d42a:	793b      	ldrb	r3, [r7, #4]
 800d42c:	08db      	lsrs	r3, r3, #3
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	461a      	mov	r2, r3
 800d432:	793b      	ldrb	r3, [r7, #4]
 800d434:	f003 0307 	and.w	r3, r3, #7
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	bf14      	ite	ne
 800d43e:	2301      	movne	r3, #1
 800d440:	2300      	moveq	r3, #0
 800d442:	b2db      	uxtb	r3, r3
 800d444:	4413      	add	r3, r2
 800d446:	b2da      	uxtb	r2, r3
 800d448:	793b      	ldrb	r3, [r7, #4]
 800d44a:	085b      	lsrs	r3, r3, #1
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	fb12 f303 	smulbb	r3, r2, r3
 800d452:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 800d454:	797b      	ldrb	r3, [r7, #5]
 800d456:	3b20      	subs	r3, #32
 800d458:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 800d45a:	2300      	movs	r3, #0
 800d45c:	73fb      	strb	r3, [r7, #15]
 800d45e:	e057      	b.n	800d510 <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 800d460:	793b      	ldrb	r3, [r7, #4]
 800d462:	2b0c      	cmp	r3, #12
 800d464:	d10b      	bne.n	800d47e <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 800d466:	7aba      	ldrb	r2, [r7, #10]
 800d468:	7bf9      	ldrb	r1, [r7, #15]
 800d46a:	482e      	ldr	r0, [pc, #184]	@ (800d524 <OLED_ShowChar+0x11c>)
 800d46c:	4613      	mov	r3, r2
 800d46e:	005b      	lsls	r3, r3, #1
 800d470:	4413      	add	r3, r2
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	4403      	add	r3, r0
 800d476:	440b      	add	r3, r1
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	737b      	strb	r3, [r7, #13]
 800d47c:	e019      	b.n	800d4b2 <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 800d47e:	793b      	ldrb	r3, [r7, #4]
 800d480:	2b10      	cmp	r3, #16
 800d482:	d108      	bne.n	800d496 <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 800d484:	7aba      	ldrb	r2, [r7, #10]
 800d486:	7bfb      	ldrb	r3, [r7, #15]
 800d488:	4927      	ldr	r1, [pc, #156]	@ (800d528 <OLED_ShowChar+0x120>)
 800d48a:	0112      	lsls	r2, r2, #4
 800d48c:	440a      	add	r2, r1
 800d48e:	4413      	add	r3, r2
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	737b      	strb	r3, [r7, #13]
 800d494:	e00d      	b.n	800d4b2 <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 800d496:	793b      	ldrb	r3, [r7, #4]
 800d498:	2b18      	cmp	r3, #24
 800d49a:	d13e      	bne.n	800d51a <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 800d49c:	7aba      	ldrb	r2, [r7, #10]
 800d49e:	7bf9      	ldrb	r1, [r7, #15]
 800d4a0:	4822      	ldr	r0, [pc, #136]	@ (800d52c <OLED_ShowChar+0x124>)
 800d4a2:	4613      	mov	r3, r2
 800d4a4:	00db      	lsls	r3, r3, #3
 800d4a6:	4413      	add	r3, r2
 800d4a8:	009b      	lsls	r3, r3, #2
 800d4aa:	4403      	add	r3, r0
 800d4ac:	440b      	add	r3, r1
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	73bb      	strb	r3, [r7, #14]
 800d4b6:	e025      	b.n	800d504 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 800d4b8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	da06      	bge.n	800d4ce <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 800d4c0:	79ba      	ldrb	r2, [r7, #6]
 800d4c2:	79fb      	ldrb	r3, [r7, #7]
 800d4c4:	4611      	mov	r1, r2
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7ff ff20 	bl	800d30c <OLED_DrawPoint>
 800d4cc:	e005      	b.n	800d4da <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 800d4ce:	79ba      	ldrb	r2, [r7, #6]
 800d4d0:	79fb      	ldrb	r3, [r7, #7]
 800d4d2:	4611      	mov	r1, r2
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7ff ff47 	bl	800d368 <OLED_ClearPoint>
			temp <<= 1;
 800d4da:	7b7b      	ldrb	r3, [r7, #13]
 800d4dc:	005b      	lsls	r3, r3, #1
 800d4de:	737b      	strb	r3, [r7, #13]
			y++;
 800d4e0:	79bb      	ldrb	r3, [r7, #6]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 800d4e6:	79ba      	ldrb	r2, [r7, #6]
 800d4e8:	7b3b      	ldrb	r3, [r7, #12]
 800d4ea:	1ad2      	subs	r2, r2, r3
 800d4ec:	793b      	ldrb	r3, [r7, #4]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d105      	bne.n	800d4fe <OLED_ShowChar+0xf6>
			{
				y = y0;
 800d4f2:	7b3b      	ldrb	r3, [r7, #12]
 800d4f4:	71bb      	strb	r3, [r7, #6]
				x++;
 800d4f6:	79fb      	ldrb	r3, [r7, #7]
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	71fb      	strb	r3, [r7, #7]
				break;
 800d4fc:	e005      	b.n	800d50a <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 800d4fe:	7bbb      	ldrb	r3, [r7, #14]
 800d500:	3301      	adds	r3, #1
 800d502:	73bb      	strb	r3, [r7, #14]
 800d504:	7bbb      	ldrb	r3, [r7, #14]
 800d506:	2b07      	cmp	r3, #7
 800d508:	d9d6      	bls.n	800d4b8 <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 800d50a:	7bfb      	ldrb	r3, [r7, #15]
 800d50c:	3301      	adds	r3, #1
 800d50e:	73fb      	strb	r3, [r7, #15]
 800d510:	7bfa      	ldrb	r2, [r7, #15]
 800d512:	7afb      	ldrb	r3, [r7, #11]
 800d514:	429a      	cmp	r2, r3
 800d516:	d3a3      	bcc.n	800d460 <OLED_ShowChar+0x58>
 800d518:	e000      	b.n	800d51c <OLED_ShowChar+0x114>
			return;
 800d51a:	bf00      	nop
			}
		}
	}
}
 800d51c:	3714      	adds	r7, #20
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd90      	pop	{r4, r7, pc}
 800d522:	bf00      	nop
 800d524:	08011e18 	.word	0x08011e18
 800d528:	0801228c 	.word	0x0801228c
 800d52c:	0801287c 	.word	0x0801287c

0800d530 <OLED_ShowString>:
 *@param y y坐标
 *@param chr 字符串起始地址
 *@param size1 字体大小
 */
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	603a      	str	r2, [r7, #0]
 800d538:	461a      	mov	r2, r3
 800d53a:	4603      	mov	r3, r0
 800d53c:	71fb      	strb	r3, [r7, #7]
 800d53e:	460b      	mov	r3, r1
 800d540:	71bb      	strb	r3, [r7, #6]
 800d542:	4613      	mov	r3, r2
 800d544:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800d546:	e01b      	b.n	800d580 <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	781a      	ldrb	r2, [r3, #0]
 800d54c:	797b      	ldrb	r3, [r7, #5]
 800d54e:	79b9      	ldrb	r1, [r7, #6]
 800d550:	79f8      	ldrb	r0, [r7, #7]
 800d552:	f7ff ff59 	bl	800d408 <OLED_ShowChar>
		x += size1 / 2;
 800d556:	797b      	ldrb	r3, [r7, #5]
 800d558:	085b      	lsrs	r3, r3, #1
 800d55a:	b2da      	uxtb	r2, r3
 800d55c:	79fb      	ldrb	r3, [r7, #7]
 800d55e:	4413      	add	r3, r2
 800d560:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 800d562:	79fa      	ldrb	r2, [r7, #7]
 800d564:	797b      	ldrb	r3, [r7, #5]
 800d566:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800d56a:	429a      	cmp	r2, r3
 800d56c:	dd05      	ble.n	800d57a <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 800d56e:	2302      	movs	r3, #2
 800d570:	71fb      	strb	r3, [r7, #7]
			y += size1;
 800d572:	79ba      	ldrb	r2, [r7, #6]
 800d574:	797b      	ldrb	r3, [r7, #5]
 800d576:	4413      	add	r3, r2
 800d578:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	3301      	adds	r3, #1
 800d57e:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	2b1f      	cmp	r3, #31
 800d586:	d903      	bls.n	800d590 <OLED_ShowString+0x60>
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	2b7e      	cmp	r3, #126	@ 0x7e
 800d58e:	d9db      	bls.n	800d548 <OLED_ShowString+0x18>
	}
}
 800d590:	bf00      	nop
 800d592:	3708      	adds	r7, #8
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <pid_Init>:
 * @param kd 微分系数
 * @param max 输出最大值
 * @param min 输出最小值
 */
void pid_Init(PID *pid, float kp, float ki, float kd, float max, float min) // PID参数初始化
{
 800d598:	b480      	push	{r7}
 800d59a:	b087      	sub	sp, #28
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6178      	str	r0, [r7, #20]
 800d5a0:	ed87 0a04 	vstr	s0, [r7, #16]
 800d5a4:	edc7 0a03 	vstr	s1, [r7, #12]
 800d5a8:	ed87 1a02 	vstr	s2, [r7, #8]
 800d5ac:	edc7 1a01 	vstr	s3, [r7, #4]
 800d5b0:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	693a      	ldr	r2, [r7, #16]
 800d5b8:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	68fa      	ldr	r2, [r7, #12]
 800d5be:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	68ba      	ldr	r2, [r7, #8]
 800d5c4:	609a      	str	r2, [r3, #8]
	pid->Max = max;
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	61da      	str	r2, [r3, #28]
	pid->Min = min;
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	683a      	ldr	r2, [r7, #0]
 800d5d0:	621a      	str	r2, [r3, #32]
	pid->err[0] = 0.f;
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	f04f 0200 	mov.w	r2, #0
 800d5d8:	60da      	str	r2, [r3, #12]
	pid->err[1] = 0.f;
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	f04f 0200 	mov.w	r2, #0
 800d5e0:	611a      	str	r2, [r3, #16]
	pid->err[2] = 0.f;
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	f04f 0200 	mov.w	r2, #0
 800d5e8:	615a      	str	r2, [r3, #20]
	pid->out = 0.f;
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	f04f 0200 	mov.w	r2, #0
 800d5f0:	619a      	str	r2, [r3, #24]
}
 800d5f2:	bf00      	nop
 800d5f4:	371c      	adds	r7, #28
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr

0800d5fe <pid>:
 * @note e(0)代表本次偏差
 * @note e(1)代表上一次的偏差  以此类推
 * @note result代表增量输出
 */
void pid(PID *pid, float target, float sample)
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	ed2d 8b02 	vpush	{d8}
 800d604:	b084      	sub	sp, #16
 800d606:	af00      	add	r7, sp, #0
 800d608:	60f8      	str	r0, [r7, #12]
 800d60a:	ed87 0a02 	vstr	s0, [r7, #8]
 800d60e:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->err[0] = target - sample;
 800d612:	ed97 7a02 	vldr	s14, [r7, #8]
 800d616:	edd7 7a01 	vldr	s15, [r7, #4]
 800d61a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->out += pid->kp * (pid->err[0] - pid->err[1]) + pid->ki * pid->err[0] + pid->kd * (pid->err[0] - 2 * pid->err[1] + pid->err[2]);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	ed93 7a06 	vldr	s14, [r3, #24]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	edd3 6a00 	vldr	s13, [r3]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	ed93 6a03 	vldr	s12, [r3, #12]
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	edd3 7a04 	vldr	s15, [r3, #16]
 800d63c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d640:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	ed93 6a01 	vldr	s12, [r3, #4]
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	edd3 7a03 	vldr	s15, [r3, #12]
 800d650:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d654:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	ed93 6a02 	vldr	s12, [r3, #8]
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	edd3 5a03 	vldr	s11, [r3, #12]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	edd3 7a04 	vldr	s15, [r3, #16]
 800d66a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d66e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	edd3 7a05 	vldr	s15, [r3, #20]
 800d678:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800d67c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d684:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->err[2] = pid->err[1];
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	691a      	ldr	r2, [r3, #16]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	615a      	str	r2, [r3, #20]
	pid->err[1] = pid->err[0];
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	68da      	ldr	r2, [r3, #12]
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	611a      	str	r2, [r3, #16]
	// 输出限幅
	pid->out = fminf(pid->Max, fmaxf(pid->out, pid->Min));
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	ed93 8a07 	vldr	s16, [r3, #28]
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	edd3 7a06 	vldr	s15, [r3, #24]
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	ed93 7a08 	vldr	s14, [r3, #32]
 800d6b0:	eef0 0a47 	vmov.f32	s1, s14
 800d6b4:	eeb0 0a67 	vmov.f32	s0, s15
 800d6b8:	f004 f85e 	bl	8011778 <fmaxf>
 800d6bc:	eef0 7a40 	vmov.f32	s15, s0
 800d6c0:	eef0 0a67 	vmov.f32	s1, s15
 800d6c4:	eeb0 0a48 	vmov.f32	s0, s16
 800d6c8:	f004 f873 	bl	80117b2 <fminf>
 800d6cc:	eef0 7a40 	vmov.f32	s15, s0
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800d6d6:	bf00      	nop
 800d6d8:	3710      	adds	r7, #16
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	ecbd 8b02 	vpop	{d8}
 800d6e0:	bd80      	pop	{r7, pc}
 800d6e2:	0000      	movs	r0, r0
 800d6e4:	0000      	movs	r0, r0
	...

0800d6e8 <pll_Init_V>:
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 * @param Umax 交流电压峰值
 */
void pll_Init_V(pll_Signal_V **signal, float f, uint16_t F)
{
 800d6e8:	b590      	push	{r4, r7, lr}
 800d6ea:	b087      	sub	sp, #28
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	ed87 0a02 	vstr	s0, [r7, #8]
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	80fb      	strh	r3, [r7, #6]
    /* 分配内存空间 */
    (*signal) = (pll_Signal_V *)malloc(sizeof(pll_Signal_V));
 800d6f8:	200c      	movs	r0, #12
 800d6fa:	f001 f9d3 	bl	800eaa4 <malloc>
 800d6fe:	4603      	mov	r3, r0
 800d700:	461a      	mov	r2, r3
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681c      	ldr	r4, [r3, #0]
 800d70a:	2024      	movs	r0, #36	@ 0x24
 800d70c:	f001 f9ca 	bl	800eaa4 <malloc>
 800d710:	4603      	mov	r3, r0
 800d712:	6023      	str	r3, [r4, #0]
    (*signal)->pid = (PID *)malloc(sizeof(PID));
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681c      	ldr	r4, [r3, #0]
 800d718:	2024      	movs	r0, #36	@ 0x24
 800d71a:	f001 f9c3 	bl	800eaa4 <malloc>
 800d71e:	4603      	mov	r3, r0
 800d720:	60a3      	str	r3, [r4, #8]

    /* 初始化赋值 */
    (*signal)->basic->input[0] = 0.f;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f04f 0200 	mov.w	r2, #0
 800d72c:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input[1] = 0.f;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f04f 0200 	mov.w	r2, #0
 800d738:	605a      	str	r2, [r3, #4]
    (*signal)->basic->input[2] = 0.f;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f04f 0200 	mov.w	r2, #0
 800d744:	609a      	str	r2, [r3, #8]

    (*signal)->basic->rms = 0.f;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f04f 0200 	mov.w	r2, #0
 800d750:	60da      	str	r2, [r3, #12]

    (*signal)->basic->park_d = 0.f;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f04f 0200 	mov.w	r2, #0
 800d75c:	615a      	str	r2, [r3, #20]
    (*signal)->basic->park_q = 0.f;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f04f 0200 	mov.w	r2, #0
 800d768:	619a      	str	r2, [r3, #24]

    (*signal)->theta = 0.f;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f04f 0200 	mov.w	r2, #0
 800d772:	605a      	str	r2, [r3, #4]
    (*signal)->basic->omiga0 = 2 * PI * f; /* f典型值50 */
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	edd7 7a02 	vldr	s15, [r7, #8]
 800d77e:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 800d9b0 <pll_Init_V+0x2c8>
 800d782:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d786:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->Ts = 1.f / F;        /* F典型值20000 */
 800d78a:	88fb      	ldrh	r3, [r7, #6]
 800d78c:	ee07 3a90 	vmov	s15, r3
 800d790:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d79e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7a2:	edc3 7a08 	vstr	s15, [r3, #32]

    /* 初始化pid参数 */
    float ki = (*signal)->basic->omiga0 * (*signal)->basic->omiga0;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	ed93 7a07 	vldr	s14, [r3, #28]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	edd3 7a07 	vldr	s15, [r3, #28]
 800d7ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7be:	edc7 7a05 	vstr	s15, [r7, #20]
    float kp = sqrt(2) * sqrt(ki);
 800d7c2:	edd7 7a05 	vldr	s15, [r7, #20]
 800d7c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d7ca:	eeb0 0b47 	vmov.f64	d0, d7
 800d7ce:	f003 ff5b 	bl	8011688 <sqrt>
 800d7d2:	eeb0 7b40 	vmov.f64	d7, d0
 800d7d6:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 800d9a8 <pll_Init_V+0x2c0>
 800d7da:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d7de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d7e2:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_Init((*signal)->pid, kp, ki, 0, 50 * PI, -20 * PI);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	689b      	ldr	r3, [r3, #8]
 800d7ec:	ed9f 2a71 	vldr	s4, [pc, #452]	@ 800d9b4 <pll_Init_V+0x2cc>
 800d7f0:	eddf 1a71 	vldr	s3, [pc, #452]	@ 800d9b8 <pll_Init_V+0x2d0>
 800d7f4:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 800d9bc <pll_Init_V+0x2d4>
 800d7f8:	edd7 0a05 	vldr	s1, [r7, #20]
 800d7fc:	ed97 0a04 	vldr	s0, [r7, #16]
 800d800:	4618      	mov	r0, r3
 800d802:	f7ff fec9 	bl	800d598 <pid_Init>

    /* 计算sogi中间量 */
    (*signal)->basic->sogi->k = 1.414f;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	691b      	ldr	r3, [r3, #16]
 800d80e:	4a6c      	ldr	r2, [pc, #432]	@ (800d9c0 <pll_Init_V+0x2d8>)
 800d810:	619a      	str	r2, [r3, #24]
    (*signal)->basic->sogi->lamda = 0.5f * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	edd3 7a07 	vldr	s15, [r3, #28]
 800d81c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d820:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	edd3 7a08 	vldr	s15, [r3, #32]
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	691b      	ldr	r3, [r3, #16]
 800d836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d83a:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->sogi->x = 2.f * (*signal)->basic->sogi->k * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	691b      	ldr	r3, [r3, #16]
 800d846:	edd3 7a06 	vldr	s15, [r3, #24]
 800d84a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	edd3 7a07 	vldr	s15, [r3, #28]
 800d858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	edd3 7a08 	vldr	s15, [r3, #32]
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	691b      	ldr	r3, [r3, #16]
 800d86e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d872:	edc3 7a08 	vstr	s15, [r3, #32]
    (*signal)->basic->sogi->y = (*signal)->basic->omiga0 * (*signal)->basic->Ts * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	ed93 7a07 	vldr	s14, [r3, #28]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	edd3 7a08 	vldr	s15, [r3, #32]
 800d88a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	edd3 7a07 	vldr	s15, [r3, #28]
 800d898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	edd3 7a08 	vldr	s15, [r3, #32]
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	691b      	ldr	r3, [r3, #16]
 800d8ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8b2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    (*signal)->basic->sogi->b0 = (*signal)->basic->sogi->x / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	691b      	ldr	r3, [r3, #16]
 800d8be:	edd3 6a08 	vldr	s13, [r3, #32]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	691b      	ldr	r3, [r3, #16]
 800d8ca:	ed93 7a08 	vldr	s14, [r3, #32]
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	691b      	ldr	r3, [r3, #16]
 800d8d6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800d8da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8de:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800d8e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	691b      	ldr	r3, [r3, #16]
 800d8ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8f2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    (*signal)->basic->sogi->a1 = (8 - 2.f * (*signal)->basic->sogi->y) / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800d902:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d906:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800d90a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	691b      	ldr	r3, [r3, #16]
 800d916:	ed93 7a08 	vldr	s14, [r3, #32]
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	691b      	ldr	r3, [r3, #16]
 800d922:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800d926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d92a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800d92e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	691b      	ldr	r3, [r3, #16]
 800d93a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d93e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    (*signal)->basic->sogi->a2 = ((*signal)->basic->sogi->x - (*signal)->basic->sogi->y - 4) / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	691b      	ldr	r3, [r3, #16]
 800d94a:	ed93 7a08 	vldr	s14, [r3, #32]
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	691b      	ldr	r3, [r3, #16]
 800d956:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800d95a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d95e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800d962:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	691b      	ldr	r3, [r3, #16]
 800d96e:	ed93 7a08 	vldr	s14, [r3, #32]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	691b      	ldr	r3, [r3, #16]
 800d97a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800d97e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d982:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800d986:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	691b      	ldr	r3, [r3, #16]
 800d992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d996:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 800d99a:	bf00      	nop
 800d99c:	371c      	adds	r7, #28
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd90      	pop	{r4, r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	f3af 8000 	nop.w
 800d9a8:	667f3bcd 	.word	0x667f3bcd
 800d9ac:	3ff6a09e 	.word	0x3ff6a09e
 800d9b0:	40c90fdb 	.word	0x40c90fdb
 800d9b4:	c27b53d2 	.word	0xc27b53d2
 800d9b8:	431d1463 	.word	0x431d1463
 800d9bc:	00000000 	.word	0x00000000
 800d9c0:	3fb4fdf4 	.word	0x3fb4fdf4

0800d9c4 <pll_Init_I>:
 * @param F 采样频率(典型值:20000)
 * @param pi_kp PI控制器kp参数
 * @param pi_ki PI控制器ki参数
 */
void pll_Init_I(pll_Signal_I **signal, float f, uint16_t F)
{
 800d9c4:	b590      	push	{r4, r7, lr}
 800d9c6:	b085      	sub	sp, #20
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	ed87 0a02 	vstr	s0, [r7, #8]
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	80fb      	strh	r3, [r7, #6]
    (*signal) = (pll_Signal_I *)malloc(sizeof(pll_Signal_I));
 800d9d4:	201c      	movs	r0, #28
 800d9d6:	f001 f865 	bl	800eaa4 <malloc>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	461a      	mov	r2, r3
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681c      	ldr	r4, [r3, #0]
 800d9e6:	2024      	movs	r0, #36	@ 0x24
 800d9e8:	f001 f85c 	bl	800eaa4 <malloc>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	6023      	str	r3, [r4, #0]

    (*signal)->pid_d = (PID *)malloc(sizeof(PID));
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681c      	ldr	r4, [r3, #0]
 800d9f4:	2024      	movs	r0, #36	@ 0x24
 800d9f6:	f001 f855 	bl	800eaa4 <malloc>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	6163      	str	r3, [r4, #20]
    (*signal)->pid_q = (PID *)malloc(sizeof(PID));
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681c      	ldr	r4, [r3, #0]
 800da02:	2024      	movs	r0, #36	@ 0x24
 800da04:	f001 f84e 	bl	800eaa4 <malloc>
 800da08:	4603      	mov	r3, r0
 800da0a:	61a3      	str	r3, [r4, #24]
    /* 初始化赋值 */
    (*signal)->basic->input[0] = 0.f;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f04f 0200 	mov.w	r2, #0
 800da16:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input[1] = 0.f;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f04f 0200 	mov.w	r2, #0
 800da22:	605a      	str	r2, [r3, #4]
    (*signal)->basic->input[2] = 0.f;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f04f 0200 	mov.w	r2, #0
 800da2e:	609a      	str	r2, [r3, #8]

    (*signal)->basic->rms = 0.f;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f04f 0200 	mov.w	r2, #0
 800da3a:	60da      	str	r2, [r3, #12]

    (*signal)->basic->park_d = 0.f;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f04f 0200 	mov.w	r2, #0
 800da46:	615a      	str	r2, [r3, #20]
    (*signal)->basic->park_q = 0.f;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f04f 0200 	mov.w	r2, #0
 800da52:	619a      	str	r2, [r3, #24]

    (*signal)->park_inv_alpha = 0.f;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f04f 0200 	mov.w	r2, #0
 800da5c:	605a      	str	r2, [r3, #4]
    (*signal)->park_inv_beta = 0.f;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f04f 0200 	mov.w	r2, #0
 800da66:	609a      	str	r2, [r3, #8]

    (*signal)->basic->omiga0 = 2.f * PI * f; /* f典型值50 */
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	edd7 7a02 	vldr	s15, [r7, #8]
 800da72:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 800dc88 <pll_Init_I+0x2c4>
 800da76:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da7a:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->Ts = 1.f / F;          /* F典型值20000 */
 800da7e:	88fb      	ldrh	r3, [r7, #6]
 800da80:	ee07 3a90 	vmov	s15, r3
 800da84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da96:	edc3 7a08 	vstr	s15, [r3, #32]

    (*signal)->CorL = 0;   /* 0:感性 1:容性 */
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2200      	movs	r2, #0
 800daa0:	731a      	strb	r2, [r3, #12]
    (*signal)->L = 0.001f; /* 1mH */
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4a79      	ldr	r2, [pc, #484]	@ (800dc8c <pll_Init_I+0x2c8>)
 800daa8:	611a      	str	r2, [r3, #16]

    /* 在调整取值范围时看实际输出值逐渐逼近，防止上电瞬间电流过大 */
    pid_Init((*signal)->pid_d, 1.8f, 0.03f, 0, 0.2f, -0.4f);
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	695b      	ldr	r3, [r3, #20]
 800dab0:	ed9f 2a77 	vldr	s4, [pc, #476]	@ 800dc90 <pll_Init_I+0x2cc>
 800dab4:	eddf 1a77 	vldr	s3, [pc, #476]	@ 800dc94 <pll_Init_I+0x2d0>
 800dab8:	ed9f 1a77 	vldr	s2, [pc, #476]	@ 800dc98 <pll_Init_I+0x2d4>
 800dabc:	eddf 0a77 	vldr	s1, [pc, #476]	@ 800dc9c <pll_Init_I+0x2d8>
 800dac0:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 800dca0 <pll_Init_I+0x2dc>
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7ff fd67 	bl	800d598 <pid_Init>
    pid_Init((*signal)->pid_q, 1.8f, 0.03f, 0, 0.2f, -0.2f);
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	699b      	ldr	r3, [r3, #24]
 800dad0:	ed9f 2a74 	vldr	s4, [pc, #464]	@ 800dca4 <pll_Init_I+0x2e0>
 800dad4:	eddf 1a6f 	vldr	s3, [pc, #444]	@ 800dc94 <pll_Init_I+0x2d0>
 800dad8:	ed9f 1a6f 	vldr	s2, [pc, #444]	@ 800dc98 <pll_Init_I+0x2d4>
 800dadc:	eddf 0a6f 	vldr	s1, [pc, #444]	@ 800dc9c <pll_Init_I+0x2d8>
 800dae0:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 800dca0 <pll_Init_I+0x2dc>
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7ff fd57 	bl	800d598 <pid_Init>

    /* 计算sogi中间量 */
    (*signal)->basic->sogi->k = 1.414f;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	691b      	ldr	r3, [r3, #16]
 800daf2:	4a6d      	ldr	r2, [pc, #436]	@ (800dca8 <pll_Init_I+0x2e4>)
 800daf4:	619a      	str	r2, [r3, #24]
    (*signal)->basic->sogi->lamda = 0.5f * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	edd3 7a07 	vldr	s15, [r3, #28]
 800db00:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800db04:	ee27 7a87 	vmul.f32	s14, s15, s14
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	edd3 7a08 	vldr	s15, [r3, #32]
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	691b      	ldr	r3, [r3, #16]
 800db1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db1e:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->sogi->x = 2.f * (*signal)->basic->sogi->k * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	691b      	ldr	r3, [r3, #16]
 800db2a:	edd3 7a06 	vldr	s15, [r3, #24]
 800db2e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	edd3 7a07 	vldr	s15, [r3, #28]
 800db3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	edd3 7a08 	vldr	s15, [r3, #32]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	691b      	ldr	r3, [r3, #16]
 800db52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db56:	edc3 7a08 	vstr	s15, [r3, #32]
    (*signal)->basic->sogi->y = (*signal)->basic->omiga0 * (*signal)->basic->Ts * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	ed93 7a07 	vldr	s14, [r3, #28]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	edd3 7a08 	vldr	s15, [r3, #32]
 800db6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	edd3 7a07 	vldr	s15, [r3, #28]
 800db7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	edd3 7a08 	vldr	s15, [r3, #32]
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	691b      	ldr	r3, [r3, #16]
 800db92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db96:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    (*signal)->basic->sogi->b0 = (*signal)->basic->sogi->x / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	691b      	ldr	r3, [r3, #16]
 800dba2:	edd3 6a08 	vldr	s13, [r3, #32]
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	691b      	ldr	r3, [r3, #16]
 800dbae:	ed93 7a08 	vldr	s14, [r3, #32]
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	691b      	ldr	r3, [r3, #16]
 800dbba:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800dbbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbc2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800dbc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	691b      	ldr	r3, [r3, #16]
 800dbd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbd6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    (*signal)->basic->sogi->a1 = (8 - 2.f * (*signal)->basic->sogi->y) / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	691b      	ldr	r3, [r3, #16]
 800dbe2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800dbe6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dbea:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800dbee:	ee77 6a67 	vsub.f32	s13, s14, s15
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	691b      	ldr	r3, [r3, #16]
 800dbfa:	ed93 7a08 	vldr	s14, [r3, #32]
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	691b      	ldr	r3, [r3, #16]
 800dc06:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800dc0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc0e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800dc12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	691b      	ldr	r3, [r3, #16]
 800dc1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc22:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    (*signal)->basic->sogi->a2 = ((*signal)->basic->sogi->x - (*signal)->basic->sogi->y - 4) / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	691b      	ldr	r3, [r3, #16]
 800dc2e:	ed93 7a08 	vldr	s14, [r3, #32]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	691b      	ldr	r3, [r3, #16]
 800dc3a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800dc3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc42:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800dc46:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	691b      	ldr	r3, [r3, #16]
 800dc52:	ed93 7a08 	vldr	s14, [r3, #32]
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	691b      	ldr	r3, [r3, #16]
 800dc5e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800dc62:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc66:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800dc6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	691b      	ldr	r3, [r3, #16]
 800dc76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc7a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 800dc7e:	bf00      	nop
 800dc80:	3714      	adds	r7, #20
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd90      	pop	{r4, r7, pc}
 800dc86:	bf00      	nop
 800dc88:	40c90fdb 	.word	0x40c90fdb
 800dc8c:	3a83126f 	.word	0x3a83126f
 800dc90:	becccccd 	.word	0xbecccccd
 800dc94:	3e4ccccd 	.word	0x3e4ccccd
 800dc98:	00000000 	.word	0x00000000
 800dc9c:	3cf5c28f 	.word	0x3cf5c28f
 800dca0:	3fe66666 	.word	0x3fe66666
 800dca4:	be4ccccd 	.word	0xbe4ccccd
 800dca8:	3fb4fdf4 	.word	0x3fb4fdf4
 800dcac:	00000000 	.word	0x00000000

0800dcb0 <pll_Control_V>:
/**
 * @brief 电压锁相控制
 * @param signal_V 电压信号指针
 */
void pll_Control_V(pll_Signal_V *signal_V)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b08a      	sub	sp, #40	@ 0x28
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
    /* 对信号先进行sogi变换，得到两个相位相差90度的信号 */
    pll_Sogi(signal_V->basic->sogi, signal_V->basic->input);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	691a      	ldr	r2, [r3, #16]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	4610      	mov	r0, r2
 800dcc6:	f000 f9e1 	bl	800e08c <pll_Sogi>

    /* 再对信号sogi变换后的信号进行park变换 */
    float sinTheta = arm_sin_f32(signal_V->theta);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	edd3 7a01 	vldr	s15, [r3, #4]
 800dcd0:	eeb0 0a67 	vmov.f32	s0, s15
 800dcd4:	f000 fe56 	bl	800e984 <arm_sin_f32>
 800dcd8:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float cosTheta = arm_cos_f32(signal_V->theta);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	edd3 7a01 	vldr	s15, [r3, #4]
 800dce2:	eeb0 0a67 	vmov.f32	s0, s15
 800dce6:	f000 fe93 	bl	800ea10 <arm_cos_f32>
 800dcea:	ed87 0a08 	vstr	s0, [r7, #32]
    arm_park_f32(signal_V->basic->sogi->alpha[0], signal_V->basic->sogi->beta[0], &signal_V->basic->park_d, &signal_V->basic->park_q, sinTheta, cosTheta);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	691b      	ldr	r3, [r3, #16]
 800dcf4:	6818      	ldr	r0, [r3, #0]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	691b      	ldr	r3, [r3, #16]
 800dcfc:	68d9      	ldr	r1, [r3, #12]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f103 0214 	add.w	r2, r3, #20
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	3318      	adds	r3, #24
 800dd0c:	61f8      	str	r0, [r7, #28]
 800dd0e:	61b9      	str	r1, [r7, #24]
 800dd10:	617a      	str	r2, [r7, #20]
 800dd12:	613b      	str	r3, [r7, #16]
 800dd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd16:	60fb      	str	r3, [r7, #12]
 800dd18:	6a3b      	ldr	r3, [r7, #32]
 800dd1a:	60bb      	str	r3, [r7, #8]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800dd1c:	ed97 7a07 	vldr	s14, [r7, #28]
 800dd20:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd24:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd28:	edd7 6a06 	vldr	s13, [r7, #24]
 800dd2c:	edd7 7a03 	vldr	s15, [r7, #12]
 800dd30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dd34:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800dd3e:	edd7 7a07 	vldr	s15, [r7, #28]
 800dd42:	eeb1 7a67 	vneg.f32	s14, s15
 800dd46:	edd7 7a03 	vldr	s15, [r7, #12]
 800dd4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd4e:	edd7 6a06 	vldr	s13, [r7, #24]
 800dd52:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dd5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	edc3 7a00 	vstr	s15, [r3]
  }
 800dd64:	bf00      	nop

    /* 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差 */
    pid(signal_V->pid, signal_V->basic->park_q, 0); /* pid的输出值为旋转坐标系角速度 */
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	689a      	ldr	r2, [r3, #8]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	edd3 7a06 	vldr	s15, [r3, #24]
 800dd72:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800dde8 <pll_Control_V+0x138>
 800dd76:	eeb0 0a67 	vmov.f32	s0, s15
 800dd7a:	4610      	mov	r0, r2
 800dd7c:	f7ff fc3f 	bl	800d5fe <pid>

    /* 更新theta */
    signal_V->theta += (signal_V->pid->out + signal_V->basic->omiga0) * signal_V->basic->Ts;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	ed93 7a01 	vldr	s14, [r3, #4]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	689b      	ldr	r3, [r3, #8]
 800dd8a:	edd3 6a06 	vldr	s13, [r3, #24]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	edd3 7a07 	vldr	s15, [r3, #28]
 800dd96:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	edd3 7a08 	vldr	s15, [r3, #32]
 800dda2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dda6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_V->theta = (float)fmod(signal_V->theta, 2 * PI);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	edd3 7a01 	vldr	s15, [r3, #4]
 800ddb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ddba:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 800dde0 <pll_Control_V+0x130>
 800ddbe:	eeb0 0b47 	vmov.f64	d0, d7
 800ddc2:	f003 fc3d 	bl	8011640 <fmod>
 800ddc6:	eeb0 7b40 	vmov.f64	d7, d0
 800ddca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800ddd4:	bf00      	nop
 800ddd6:	3728      	adds	r7, #40	@ 0x28
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	f3af 8000 	nop.w
 800dde0:	60000000 	.word	0x60000000
 800dde4:	401921fb 	.word	0x401921fb
 800dde8:	00000000 	.word	0x00000000

0800ddec <pll_Control_I>:
 * @param signal_V 电压信号指针
 * @param Iset 电流设定值(有效值)
 * @param PF 功率因数
 */
void pll_Control_I(pll_Signal_I *signal_I, pll_Signal_V *signal_V, float Iset, float PF)
{
 800ddec:	b590      	push	{r4, r7, lr}
 800ddee:	b099      	sub	sp, #100	@ 0x64
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	60f8      	str	r0, [r7, #12]
 800ddf4:	60b9      	str	r1, [r7, #8]
 800ddf6:	ed87 0a01 	vstr	s0, [r7, #4]
 800ddfa:	edc7 0a00 	vstr	s1, [r7]
    /* 对信号先进行sogi变换，得到两个相位相差90度的信号 */
    pll_Sogi(signal_I->basic->sogi, signal_I->basic->input);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	691a      	ldr	r2, [r3, #16]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4619      	mov	r1, r3
 800de0a:	4610      	mov	r0, r2
 800de0c:	f000 f93e 	bl	800e08c <pll_Sogi>

    /* 在电压的系上得出电流的dq值 */
    float sinTheta = arm_sin_f32(signal_V->theta);
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	edd3 7a01 	vldr	s15, [r3, #4]
 800de16:	eeb0 0a67 	vmov.f32	s0, s15
 800de1a:	f000 fdb3 	bl	800e984 <arm_sin_f32>
 800de1e:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
    float cosTheta = arm_cos_f32(signal_V->theta);
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	edd3 7a01 	vldr	s15, [r3, #4]
 800de28:	eeb0 0a67 	vmov.f32	s0, s15
 800de2c:	f000 fdf0 	bl	800ea10 <arm_cos_f32>
 800de30:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58

    arm_park_f32(signal_I->basic->sogi->alpha[0], signal_I->basic->sogi->beta[0], &signal_I->basic->park_d, &signal_I->basic->park_q, sinTheta, cosTheta);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	691b      	ldr	r3, [r3, #16]
 800de3a:	6818      	ldr	r0, [r3, #0]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	691b      	ldr	r3, [r3, #16]
 800de42:	68d9      	ldr	r1, [r3, #12]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f103 0214 	add.w	r2, r3, #20
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	3318      	adds	r3, #24
 800de52:	6438      	str	r0, [r7, #64]	@ 0x40
 800de54:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800de56:	63ba      	str	r2, [r7, #56]	@ 0x38
 800de58:	637b      	str	r3, [r7, #52]	@ 0x34
 800de5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de5c:	633b      	str	r3, [r7, #48]	@ 0x30
 800de5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800de62:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800de66:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800de6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de6e:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800de72:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800de76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800de7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de80:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800de84:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800de88:	eeb1 7a67 	vneg.f32	s14, s15
 800de8c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800de90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de94:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800de98:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800de9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dea6:	edc3 7a00 	vstr	s15, [r3]
  }
 800deaa:	bf00      	nop

    /* PI控制 */
    float PFTheta = asinf(PF);
 800deac:	ed97 0a00 	vldr	s0, [r7]
 800deb0:	f003 fc0a 	bl	80116c8 <asinf>
 800deb4:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54

    float Ivalue = Iset * 1.414f / Ibase;
 800deb8:	edd7 7a01 	vldr	s15, [r7, #4]
 800debc:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 800e07c <pll_Control_I+0x290>
 800dec0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dec4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800e080 <pll_Control_I+0x294>
 800dec8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800decc:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    pid(signal_I->pid_d, Ivalue * arm_sin_f32(PFTheta), signal_I->basic->park_d); /* 电流大小 */
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	695c      	ldr	r4, [r3, #20]
 800ded4:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 800ded8:	f000 fd54 	bl	800e984 <arm_sin_f32>
 800dedc:	eeb0 7a40 	vmov.f32	s14, s0
 800dee0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800dee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	ed93 7a05 	vldr	s14, [r3, #20]
 800def0:	eef0 0a47 	vmov.f32	s1, s14
 800def4:	eeb0 0a67 	vmov.f32	s0, s15
 800def8:	4620      	mov	r0, r4
 800defa:	f7ff fb80 	bl	800d5fe <pid>

    float Iphase = Ivalue * arm_cos_f32(PFTheta) * (signal_I->CorL ? 1 : -1);
 800defe:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 800df02:	f000 fd85 	bl	800ea10 <arm_cos_f32>
 800df06:	eeb0 7a40 	vmov.f32	s14, s0
 800df0a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800df0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	7b1b      	ldrb	r3, [r3, #12]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d002      	beq.n	800df20 <pll_Control_I+0x134>
 800df1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800df1e:	e001      	b.n	800df24 <pll_Control_I+0x138>
 800df20:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800df24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df28:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    pid(signal_I->pid_q, Iphase, signal_I->basic->park_q); /* 电流相位 */
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	699a      	ldr	r2, [r3, #24]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	edd3 7a06 	vldr	s15, [r3, #24]
 800df38:	eef0 0a67 	vmov.f32	s1, s15
 800df3c:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 800df40:	4610      	mov	r0, r2
 800df42:	f7ff fb5c 	bl	800d5fe <pid>

    /* 解耦调制 */
    float Uabd = signal_V->basic->park_d - signal_I->pid_d->out + signal_I->basic->park_q * signal_I->basic->omiga0 * signal_I->L;
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	ed93 7a05 	vldr	s14, [r3, #20]
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	695b      	ldr	r3, [r3, #20]
 800df52:	edd3 7a06 	vldr	s15, [r3, #24]
 800df56:	ee37 7a67 	vsub.f32	s14, s14, s15
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	edd3 6a06 	vldr	s13, [r3, #24]
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	edd3 7a07 	vldr	s15, [r3, #28]
 800df6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	edd3 7a04 	vldr	s15, [r3, #16]
 800df74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df7c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    float Uabq = signal_V->basic->park_q - signal_I->pid_q->out - signal_I->basic->park_d * signal_I->basic->omiga0 * signal_I->L;
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	ed93 7a06 	vldr	s14, [r3, #24]
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	699b      	ldr	r3, [r3, #24]
 800df8c:	edd3 7a06 	vldr	s15, [r3, #24]
 800df90:	ee37 7a67 	vsub.f32	s14, s14, s15
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	edd3 6a05 	vldr	s13, [r3, #20]
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	edd3 7a07 	vldr	s15, [r3, #28]
 800dfa4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	edd3 7a04 	vldr	s15, [r3, #16]
 800dfae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dfb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dfb6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

    /* park逆变换 */
    arm_inv_park_f32(Uabd, Uabq, &signal_I->park_inv_alpha, &signal_I->park_inv_beta, sinTheta, cosTheta);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	1d1a      	adds	r2, r3, #4
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	3308      	adds	r3, #8
 800dfc2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800dfc4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800dfc6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dfc8:	6279      	str	r1, [r7, #36]	@ 0x24
 800dfca:	623a      	str	r2, [r7, #32]
 800dfcc:	61fb      	str	r3, [r7, #28]
 800dfce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfd0:	61bb      	str	r3, [r7, #24]
 800dfd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dfd4:	617b      	str	r3, [r7, #20]
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 800dfd6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800dfda:	edd7 7a05 	vldr	s15, [r7, #20]
 800dfde:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dfe2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800dfe6:	edd7 7a06 	vldr	s15, [r7, #24]
 800dfea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dfee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dff2:	6a3b      	ldr	r3, [r7, #32]
 800dff4:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 800dff8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800dffc:	edd7 7a06 	vldr	s15, [r7, #24]
 800e000:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e004:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800e008:	edd7 7a05 	vldr	s15, [r7, #20]
 800e00c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e010:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e014:	69fb      	ldr	r3, [r7, #28]
 800e016:	edc3 7a00 	vstr	s15, [r3]
  }
 800e01a:	bf00      	nop

    /* 限幅 */
    signal_I->park_inv_alpha = fmaxf(-0.95f, fminf(0.95f, signal_I->park_inv_alpha));
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	edd3 7a01 	vldr	s15, [r3, #4]
 800e022:	eddf 0a18 	vldr	s1, [pc, #96]	@ 800e084 <pll_Control_I+0x298>
 800e026:	eeb0 0a67 	vmov.f32	s0, s15
 800e02a:	f003 fbc2 	bl	80117b2 <fminf>
 800e02e:	eef0 7a40 	vmov.f32	s15, s0
 800e032:	eddf 0a15 	vldr	s1, [pc, #84]	@ 800e088 <pll_Control_I+0x29c>
 800e036:	eeb0 0a67 	vmov.f32	s0, s15
 800e03a:	f003 fb9d 	bl	8011778 <fmaxf>
 800e03e:	eef0 7a40 	vmov.f32	s15, s0
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_I->park_inv_beta = fmaxf(-0.95f, fminf(0.95f, signal_I->park_inv_beta));
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	edd3 7a02 	vldr	s15, [r3, #8]
 800e04e:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 800e084 <pll_Control_I+0x298>
 800e052:	eeb0 0a67 	vmov.f32	s0, s15
 800e056:	f003 fbac 	bl	80117b2 <fminf>
 800e05a:	eef0 7a40 	vmov.f32	s15, s0
 800e05e:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 800e088 <pll_Control_I+0x29c>
 800e062:	eeb0 0a67 	vmov.f32	s0, s15
 800e066:	f003 fb87 	bl	8011778 <fmaxf>
 800e06a:	eef0 7a40 	vmov.f32	s15, s0
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800e074:	bf00      	nop
 800e076:	3764      	adds	r7, #100	@ 0x64
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd90      	pop	{r4, r7, pc}
 800e07c:	3fb4fdf4 	.word	0x3fb4fdf4
 800e080:	4107be77 	.word	0x4107be77
 800e084:	3f733333 	.word	0x3f733333
 800e088:	bf733333 	.word	0xbf733333

0800e08c <pll_Sogi>:
 * @brief Sogi变换
 * @param input 输入信号
 * @param sogi sogi指针
 */
static void pll_Sogi(SOGI *sogi, float *input)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b083      	sub	sp, #12
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]
    sogi->alpha[0] = sogi->b0 * input[0] - sogi->b0 * input[2] + sogi->a1 * sogi->alpha[1] + sogi->a2 * sogi->alpha[2];
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	edd3 7a00 	vldr	s15, [r3]
 800e0a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	3308      	adds	r3, #8
 800e0b0:	edd3 7a00 	vldr	s15, [r3]
 800e0b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e0b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	edd3 7a01 	vldr	s15, [r3, #4]
 800e0c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e0cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	edd3 7a02 	vldr	s15, [r3, #8]
 800e0dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e0e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	edc3 7a00 	vstr	s15, [r3]
    sogi->beta[0] = sogi->lamda * sogi->b0 * (input[0] + 2 * input[1] + input[2]) + sogi->a1 * sogi->beta[1] + sogi->a2 * sogi->beta[2];
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	ed93 7a07 	vldr	s14, [r3, #28]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800e0f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	edd3 6a00 	vldr	s13, [r3]
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	3304      	adds	r3, #4
 800e104:	edd3 7a00 	vldr	s15, [r3]
 800e108:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e10c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	3308      	adds	r3, #8
 800e114:	edd3 7a00 	vldr	s15, [r3]
 800e118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e11c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	edd3 7a04 	vldr	s15, [r3, #16]
 800e12c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e130:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	edd3 7a05 	vldr	s15, [r3, #20]
 800e140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e144:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	edc3 7a03 	vstr	s15, [r3, #12]

    input[2] = input[1];
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	3308      	adds	r3, #8
 800e152:	683a      	ldr	r2, [r7, #0]
 800e154:	6852      	ldr	r2, [r2, #4]
 800e156:	601a      	str	r2, [r3, #0]
    input[1] = input[0];
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	3304      	adds	r3, #4
 800e15c:	683a      	ldr	r2, [r7, #0]
 800e15e:	6812      	ldr	r2, [r2, #0]
 800e160:	601a      	str	r2, [r3, #0]
    sogi->alpha[2] = sogi->alpha[1];
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	685a      	ldr	r2, [r3, #4]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	609a      	str	r2, [r3, #8]
    sogi->alpha[1] = sogi->alpha[0];
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681a      	ldr	r2, [r3, #0]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	605a      	str	r2, [r3, #4]
    sogi->beta[2] = sogi->beta[1];
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	691a      	ldr	r2, [r3, #16]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	615a      	str	r2, [r3, #20]
    sogi->beta[1] = sogi->beta[0];
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	68da      	ldr	r2, [r3, #12]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	611a      	str	r2, [r3, #16]
}
 800e182:	bf00      	nop
 800e184:	370c      	adds	r7, #12
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr
	...

0800e190 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief    GPIO触发中断
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	4603      	mov	r3, r0
 800e198:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == AD7606_BUSY_Pin)
 800e19a:	88fb      	ldrh	r3, [r7, #6]
 800e19c:	2b40      	cmp	r3, #64	@ 0x40
 800e19e:	d137      	bne.n	800e210 <HAL_GPIO_EXTI_Callback+0x80>
    {
        getVoltageCurrent();     /* 获取电压电流 */
 800e1a0:	f000 f848 	bl	800e234 <getVoltageCurrent>
        calcEffectiveValue();    /* 计算有效值 */
 800e1a4:	f000 f86a 	bl	800e27c <calcEffectiveValue>
        normalize();             /* 标幺化 */
 800e1a8:	f000 f8b0 	bl	800e30c <normalize>
        pll_Control_V(signal_V); /* 锁相控制 */
 800e1ac:	4b1a      	ldr	r3, [pc, #104]	@ (800e218 <HAL_GPIO_EXTI_Callback+0x88>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f7ff fd7d 	bl	800dcb0 <pll_Control_V>

        /* 电流内环控制 */
        if (deviceState == RUN)
 800e1b6:	4b19      	ldr	r3, [pc, #100]	@ (800e21c <HAL_GPIO_EXTI_Callback+0x8c>)
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	d10e      	bne.n	800e1dc <HAL_GPIO_EXTI_Callback+0x4c>
            pll_Control_I(signal_I, signal_V, Itarget, 1.f);
 800e1be:	4b18      	ldr	r3, [pc, #96]	@ (800e220 <HAL_GPIO_EXTI_Callback+0x90>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	4a15      	ldr	r2, [pc, #84]	@ (800e218 <HAL_GPIO_EXTI_Callback+0x88>)
 800e1c4:	6812      	ldr	r2, [r2, #0]
 800e1c6:	4917      	ldr	r1, [pc, #92]	@ (800e224 <HAL_GPIO_EXTI_Callback+0x94>)
 800e1c8:	edd1 7a00 	vldr	s15, [r1]
 800e1cc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800e1d0:	eeb0 0a67 	vmov.f32	s0, s15
 800e1d4:	4611      	mov	r1, r2
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7ff fe08 	bl	800ddec <pll_Control_I>

        /* spwm输出 */
        spwmContral();
 800e1dc:	f000 f8c2 	bl	800e364 <spwmContral>

        /* DAC输出 */
        /* uint32_t dacValue = (uint32_t)((__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 3000.f) / 3000.f * 2000.f + 2048.f); */
        uint32_t dacValue = (uint32_t)(signal_V->basic->input[0] * 2000.f + 2048.f);
 800e1e0:	4b0d      	ldr	r3, [pc, #52]	@ (800e218 <HAL_GPIO_EXTI_Callback+0x88>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	edd3 7a00 	vldr	s15, [r3]
 800e1ea:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800e228 <HAL_GPIO_EXTI_Callback+0x98>
 800e1ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e1f2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800e22c <HAL_GPIO_EXTI_Callback+0x9c>
 800e1f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e1fe:	ee17 3a90 	vmov	r3, s15
 800e202:	60fb      	str	r3, [r7, #12]
        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacValue);
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2200      	movs	r2, #0
 800e208:	2100      	movs	r1, #0
 800e20a:	4809      	ldr	r0, [pc, #36]	@ (800e230 <HAL_GPIO_EXTI_Callback+0xa0>)
 800e20c:	f7f5 f997 	bl	800353e <HAL_DAC_SetValue>
    }
}
 800e210:	bf00      	nop
 800e212:	3710      	adds	r7, #16
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}
 800e218:	240052d0 	.word	0x240052d0
 800e21c:	24005f5c 	.word	0x24005f5c
 800e220:	240052d4 	.word	0x240052d4
 800e224:	24005f6c 	.word	0x24005f6c
 800e228:	44fa0000 	.word	0x44fa0000
 800e22c:	45000000 	.word	0x45000000
 800e230:	24000284 	.word	0x24000284

0800e234 <getVoltageCurrent>:

/**
 * @brief    获取相电压和电流
 */
static void getVoltageCurrent(void)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b088      	sub	sp, #32
 800e238:	af00      	add	r7, sp, #0
    /* 读取AD7606数据 */
    float adcValue[8] = {0};
 800e23a:	463b      	mov	r3, r7
 800e23c:	2220      	movs	r2, #32
 800e23e:	2100      	movs	r1, #0
 800e240:	4618      	mov	r0, r3
 800e242:	f001 fa56 	bl	800f6f2 <memset>
    ad7606_GetValue(&hspi2, 3, adcValue);
 800e246:	463b      	mov	r3, r7
 800e248:	461a      	mov	r2, r3
 800e24a:	2103      	movs	r1, #3
 800e24c:	4808      	ldr	r0, [pc, #32]	@ (800e270 <getVoltageCurrent+0x3c>)
 800e24e:	f7fe feb1 	bl	800cfb4 <ad7606_GetValue>

    /* 处理电流电压数据 */
    signal_V->basic->input[0] = adcValue[1];
 800e252:	4b08      	ldr	r3, [pc, #32]	@ (800e274 <getVoltageCurrent+0x40>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	601a      	str	r2, [r3, #0]
    signal_I->basic->input[0] = adcValue[2];
 800e25c:	4b06      	ldr	r3, [pc, #24]	@ (800e278 <getVoltageCurrent+0x44>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	68ba      	ldr	r2, [r7, #8]
 800e264:	601a      	str	r2, [r3, #0]
}
 800e266:	bf00      	nop
 800e268:	3720      	adds	r7, #32
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	2400038c 	.word	0x2400038c
 800e274:	240052d0 	.word	0x240052d0
 800e278:	240052d4 	.word	0x240052d4

0800e27c <calcEffectiveValue>:

/**
 * @brief    计算电压电流有效值
 */
static void calcEffectiveValue(void)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	af00      	add	r7, sp, #0
    volatile static uint16_t cnt = 0;

    static float Vrms[400] = {0};
    static float Irms[400] = {0};

    Vrms[cnt] = signal_V->basic->input[0];
 800e280:	4b1d      	ldr	r3, [pc, #116]	@ (800e2f8 <calcEffectiveValue+0x7c>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	4a1d      	ldr	r2, [pc, #116]	@ (800e2fc <calcEffectiveValue+0x80>)
 800e288:	8812      	ldrh	r2, [r2, #0]
 800e28a:	b292      	uxth	r2, r2
 800e28c:	4610      	mov	r0, r2
 800e28e:	681a      	ldr	r2, [r3, #0]
 800e290:	491b      	ldr	r1, [pc, #108]	@ (800e300 <calcEffectiveValue+0x84>)
 800e292:	0083      	lsls	r3, r0, #2
 800e294:	440b      	add	r3, r1
 800e296:	601a      	str	r2, [r3, #0]
    Irms[cnt] = signal_I->basic->input[0];
 800e298:	4b1a      	ldr	r3, [pc, #104]	@ (800e304 <calcEffectiveValue+0x88>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	4a17      	ldr	r2, [pc, #92]	@ (800e2fc <calcEffectiveValue+0x80>)
 800e2a0:	8812      	ldrh	r2, [r2, #0]
 800e2a2:	b292      	uxth	r2, r2
 800e2a4:	4610      	mov	r0, r2
 800e2a6:	681a      	ldr	r2, [r3, #0]
 800e2a8:	4917      	ldr	r1, [pc, #92]	@ (800e308 <calcEffectiveValue+0x8c>)
 800e2aa:	0083      	lsls	r3, r0, #2
 800e2ac:	440b      	add	r3, r1
 800e2ae:	601a      	str	r2, [r3, #0]

    if (++cnt == 400)
 800e2b0:	4b12      	ldr	r3, [pc, #72]	@ (800e2fc <calcEffectiveValue+0x80>)
 800e2b2:	881b      	ldrh	r3, [r3, #0]
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	4a10      	ldr	r2, [pc, #64]	@ (800e2fc <calcEffectiveValue+0x80>)
 800e2bc:	4619      	mov	r1, r3
 800e2be:	8011      	strh	r1, [r2, #0]
 800e2c0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800e2c4:	d116      	bne.n	800e2f4 <calcEffectiveValue+0x78>
    {
        cnt = 0;
 800e2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e2fc <calcEffectiveValue+0x80>)
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	801a      	strh	r2, [r3, #0]
        arm_rms_f32(Vrms, 400, &signal_V->basic->rms);
 800e2cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e2f8 <calcEffectiveValue+0x7c>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	330c      	adds	r3, #12
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800e2da:	4809      	ldr	r0, [pc, #36]	@ (800e300 <calcEffectiveValue+0x84>)
 800e2dc:	f000 faea 	bl	800e8b4 <arm_rms_f32>
        arm_rms_f32(Irms, 400, &signal_I->basic->rms);
 800e2e0:	4b08      	ldr	r3, [pc, #32]	@ (800e304 <calcEffectiveValue+0x88>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	330c      	adds	r3, #12
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800e2ee:	4806      	ldr	r0, [pc, #24]	@ (800e308 <calcEffectiveValue+0x8c>)
 800e2f0:	f000 fae0 	bl	800e8b4 <arm_rms_f32>
    }
}
 800e2f4:	bf00      	nop
 800e2f6:	bd80      	pop	{r7, pc}
 800e2f8:	240052d0 	.word	0x240052d0
 800e2fc:	240052d8 	.word	0x240052d8
 800e300:	240052dc 	.word	0x240052dc
 800e304:	240052d4 	.word	0x240052d4
 800e308:	2400591c 	.word	0x2400591c

0800e30c <normalize>:

/**
 * @brief    标幺化
 */
static void normalize(void)
{
 800e30c:	b480      	push	{r7}
 800e30e:	af00      	add	r7, sp, #0
    signal_V->basic->input[0] /= Ubase;
 800e310:	4b10      	ldr	r3, [pc, #64]	@ (800e354 <normalize+0x48>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	ed93 7a00 	vldr	s14, [r3]
 800e31a:	4b0e      	ldr	r3, [pc, #56]	@ (800e354 <normalize+0x48>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800e358 <normalize+0x4c>
 800e324:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e328:	edc3 7a00 	vstr	s15, [r3]
    signal_I->basic->input[0] /= Ibase;
 800e32c:	4b0b      	ldr	r3, [pc, #44]	@ (800e35c <normalize+0x50>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	ed93 7a00 	vldr	s14, [r3]
 800e336:	4b09      	ldr	r3, [pc, #36]	@ (800e35c <normalize+0x50>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800e360 <normalize+0x54>
 800e340:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e344:	edc3 7a00 	vstr	s15, [r3]
}
 800e348:	bf00      	nop
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr
 800e352:	bf00      	nop
 800e354:	240052d0 	.word	0x240052d0
 800e358:	41a9ae15 	.word	0x41a9ae15
 800e35c:	240052d4 	.word	0x240052d4
 800e360:	4107be77 	.word	0x4107be77

0800e364 <spwmContral>:
/**
 * @brief    spwm控制
 * @return
 */
static void spwmContral(void)
{
 800e364:	b480      	push	{r7}
 800e366:	af00      	add	r7, sp, #0
    // 调节SPWM占空比
    if (signal_I->park_inv_alpha > 0)
 800e368:	4b1b      	ldr	r3, [pc, #108]	@ (800e3d8 <spwmContral+0x74>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	edd3 7a01 	vldr	s15, [r3, #4]
 800e370:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e378:	dd13      	ble.n	800e3a2 <spwmContral+0x3e>
    {
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, signal_I->park_inv_alpha * (TIM_PERIOD - 1.f));
 800e37a:	4b17      	ldr	r3, [pc, #92]	@ (800e3d8 <spwmContral+0x74>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	edd3 7a01 	vldr	s15, [r3, #4]
 800e382:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800e3dc <spwmContral+0x78>
 800e386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e38a:	4b15      	ldr	r3, [pc, #84]	@ (800e3e0 <spwmContral+0x7c>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e392:	ee17 2a90 	vmov	r2, s15
 800e396:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 800e398:	4b11      	ldr	r3, [pc, #68]	@ (800e3e0 <spwmContral+0x7c>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2200      	movs	r2, #0
 800e39e:	639a      	str	r2, [r3, #56]	@ 0x38
    else
    {
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, -signal_I->park_inv_alpha * (TIM_PERIOD - 1.f));
    }
}
 800e3a0:	e014      	b.n	800e3cc <spwmContral+0x68>
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 800e3a2:	4b0f      	ldr	r3, [pc, #60]	@ (800e3e0 <spwmContral+0x7c>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, -signal_I->park_inv_alpha * (TIM_PERIOD - 1.f));
 800e3aa:	4b0b      	ldr	r3, [pc, #44]	@ (800e3d8 <spwmContral+0x74>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	edd3 7a01 	vldr	s15, [r3, #4]
 800e3b2:	eef1 7a67 	vneg.f32	s15, s15
 800e3b6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800e3dc <spwmContral+0x78>
 800e3ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e3be:	4b08      	ldr	r3, [pc, #32]	@ (800e3e0 <spwmContral+0x7c>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3c6:	ee17 2a90 	vmov	r2, s15
 800e3ca:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800e3cc:	bf00      	nop
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d4:	4770      	bx	lr
 800e3d6:	bf00      	nop
 800e3d8:	240052d4 	.word	0x240052d4
 800e3dc:	45bb7800 	.word	0x45bb7800
 800e3e0:	240004b0 	.word	0x240004b0

0800e3e4 <UserInit>:
static float Idc = 0.0f;            /* 直流电流 */
static float Utarget = 40.0f;       /* 目标直流电压 */
float Itarget = 0.0f;               /* 电流参考值 */

void UserInit(void)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	af00      	add	r7, sp, #0
    ad7606_Init();
 800e3e8:	f7fe fd46 	bl	800ce78 <ad7606_Init>
    pll_Init_V(&signal_V, 50, 20000);
 800e3ec:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800e3f0:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800e424 <UserInit+0x40>
 800e3f4:	480c      	ldr	r0, [pc, #48]	@ (800e428 <UserInit+0x44>)
 800e3f6:	f7ff f977 	bl	800d6e8 <pll_Init_V>
    pll_Init_I(&signal_I, 50, 20000);
 800e3fa:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800e3fe:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800e424 <UserInit+0x40>
 800e402:	480a      	ldr	r0, [pc, #40]	@ (800e42c <UserInit+0x48>)
 800e404:	f7ff fade 	bl	800d9c4 <pll_Init_I>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800e408:	2100      	movs	r1, #0
 800e40a:	4809      	ldr	r0, [pc, #36]	@ (800e430 <UserInit+0x4c>)
 800e40c:	f7fa fdba 	bl	8008f84 <HAL_TIM_PWM_Start>
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800e410:	2100      	movs	r1, #0
 800e412:	4808      	ldr	r0, [pc, #32]	@ (800e434 <UserInit+0x50>)
 800e414:	f7f4 ffe6 	bl	80033e4 <HAL_DAC_Start>
    ad7606_Start(&htim2, TIM_CHANNEL_1);
 800e418:	2100      	movs	r1, #0
 800e41a:	4807      	ldr	r0, [pc, #28]	@ (800e438 <UserInit+0x54>)
 800e41c:	f7fe fd66 	bl	800ceec <ad7606_Start>
}
 800e420:	bf00      	nop
 800e422:	bd80      	pop	{r7, pc}
 800e424:	42480000 	.word	0x42480000
 800e428:	240052d0 	.word	0x240052d0
 800e42c:	240052d4 	.word	0x240052d4
 800e430:	240004b0 	.word	0x240004b0
 800e434:	24000284 	.word	0x24000284
 800e438:	24000464 	.word	0x24000464

0800e43c <StartStateLED>:
 * @brief    状态指示灯控制
 * @param    *argument
 * @return
 */
void StartStateLED(void *argument)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN stateLED */
    /* Infinite loop */
    for (;;)
    {
        switch (deviceState)
 800e444:	4b20      	ldr	r3, [pc, #128]	@ (800e4c8 <StartStateLED+0x8c>)
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	2b02      	cmp	r3, #2
 800e44a:	d032      	beq.n	800e4b2 <StartStateLED+0x76>
 800e44c:	2b02      	cmp	r3, #2
 800e44e:	dc38      	bgt.n	800e4c2 <StartStateLED+0x86>
 800e450:	2b00      	cmp	r3, #0
 800e452:	d002      	beq.n	800e45a <StartStateLED+0x1e>
 800e454:	2b01      	cmp	r3, #1
 800e456:	d006      	beq.n	800e466 <StartStateLED+0x2a>
        case FAULT: /* 保护状态 */
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
            osDelay(100);
            break;
        default:
            break;
 800e458:	e033      	b.n	800e4c2 <StartStateLED+0x86>
            HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 800e45a:	2201      	movs	r2, #1
 800e45c:	2101      	movs	r1, #1
 800e45e:	481b      	ldr	r0, [pc, #108]	@ (800e4cc <StartStateLED+0x90>)
 800e460:	f7f5 fb9e 	bl	8003ba0 <HAL_GPIO_WritePin>
            break;
 800e464:	e02e      	b.n	800e4c4 <StartStateLED+0x88>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800e466:	2101      	movs	r1, #1
 800e468:	4818      	ldr	r0, [pc, #96]	@ (800e4cc <StartStateLED+0x90>)
 800e46a:	f7f5 fbb2 	bl	8003bd2 <HAL_GPIO_TogglePin>
            osDelay(100);
 800e46e:	2064      	movs	r0, #100	@ 0x64
 800e470:	f7fc f85c 	bl	800a52c <osDelay>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800e474:	2101      	movs	r1, #1
 800e476:	4815      	ldr	r0, [pc, #84]	@ (800e4cc <StartStateLED+0x90>)
 800e478:	f7f5 fbab 	bl	8003bd2 <HAL_GPIO_TogglePin>
            osDelay(200);
 800e47c:	20c8      	movs	r0, #200	@ 0xc8
 800e47e:	f7fc f855 	bl	800a52c <osDelay>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800e482:	2101      	movs	r1, #1
 800e484:	4811      	ldr	r0, [pc, #68]	@ (800e4cc <StartStateLED+0x90>)
 800e486:	f7f5 fba4 	bl	8003bd2 <HAL_GPIO_TogglePin>
            osDelay(100);
 800e48a:	2064      	movs	r0, #100	@ 0x64
 800e48c:	f7fc f84e 	bl	800a52c <osDelay>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800e490:	2101      	movs	r1, #1
 800e492:	480e      	ldr	r0, [pc, #56]	@ (800e4cc <StartStateLED+0x90>)
 800e494:	f7f5 fb9d 	bl	8003bd2 <HAL_GPIO_TogglePin>
            osDelay(200);
 800e498:	20c8      	movs	r0, #200	@ 0xc8
 800e49a:	f7fc f847 	bl	800a52c <osDelay>
            HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800e49e:	2200      	movs	r2, #0
 800e4a0:	2102      	movs	r1, #2
 800e4a2:	480a      	ldr	r0, [pc, #40]	@ (800e4cc <StartStateLED+0x90>)
 800e4a4:	f7f5 fb7c 	bl	8003ba0 <HAL_GPIO_WritePin>
            osDelay(1000);
 800e4a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e4ac:	f7fc f83e 	bl	800a52c <osDelay>
            break;
 800e4b0:	e008      	b.n	800e4c4 <StartStateLED+0x88>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800e4b2:	2101      	movs	r1, #1
 800e4b4:	4805      	ldr	r0, [pc, #20]	@ (800e4cc <StartStateLED+0x90>)
 800e4b6:	f7f5 fb8c 	bl	8003bd2 <HAL_GPIO_TogglePin>
            osDelay(100);
 800e4ba:	2064      	movs	r0, #100	@ 0x64
 800e4bc:	f7fc f836 	bl	800a52c <osDelay>
            break;
 800e4c0:	e000      	b.n	800e4c4 <StartStateLED+0x88>
            break;
 800e4c2:	bf00      	nop
        switch (deviceState)
 800e4c4:	e7be      	b.n	800e444 <StartStateLED+0x8>
 800e4c6:	bf00      	nop
 800e4c8:	24005f5c 	.word	0x24005f5c
 800e4cc:	58022000 	.word	0x58022000

0800e4d0 <StartMcuTemperature>:
 * @brief    芯片温度读取
 * @param    *argument
 * @return
 */
void StartMcuTemperature(void *argument)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b084      	sub	sp, #16
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN mcuTemperature */
    HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED, ADC_CALIB_OFFSET);
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800e4de:	4822      	ldr	r0, [pc, #136]	@ (800e568 <StartMcuTemperature+0x98>)
 800e4e0:	f7f4 fda2 	bl	8003028 <HAL_ADCEx_Calibration_Start>
    HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED, ADC_CALIB_OFFSET_LINEARITY);
 800e4e4:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800e4e8:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800e4ec:	481e      	ldr	r0, [pc, #120]	@ (800e568 <StartMcuTemperature+0x98>)
 800e4ee:	f7f4 fd9b 	bl	8003028 <HAL_ADCEx_Calibration_Start>
    /* Infinite loop */
    for (;;)
    {
        HAL_ADC_Start(&hadc3);
 800e4f2:	481d      	ldr	r0, [pc, #116]	@ (800e568 <StartMcuTemperature+0x98>)
 800e4f4:	f7f3 fe48 	bl	8002188 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc3, 10) == HAL_OK) /* 判断是否转换完成 */
 800e4f8:	210a      	movs	r1, #10
 800e4fa:	481b      	ldr	r0, [pc, #108]	@ (800e568 <StartMcuTemperature+0x98>)
 800e4fc:	f7f3 ff0e 	bl	800231c <HAL_ADC_PollForConversion>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d125      	bne.n	800e552 <StartMcuTemperature+0x82>
        {
            uint16_t temprature = HAL_ADC_GetValue(&hadc3); /* 读出转换结果 */
 800e506:	4818      	ldr	r0, [pc, #96]	@ (800e568 <StartMcuTemperature+0x98>)
 800e508:	f7f3 fffc 	bl	8002504 <HAL_ADC_GetValue>
 800e50c:	4603      	mov	r3, r0
 800e50e:	81fb      	strh	r3, [r7, #14]
            mcuTemperature = ((110.0 - 30.0) / (*(unsigned short *)(0x1FF1E840) - *(unsigned short *)(0x1FF1E820))) * (temprature - *(unsigned short *)(0x1FF1E820)) + 30;
 800e510:	4b16      	ldr	r3, [pc, #88]	@ (800e56c <StartMcuTemperature+0x9c>)
 800e512:	881b      	ldrh	r3, [r3, #0]
 800e514:	461a      	mov	r2, r3
 800e516:	4b16      	ldr	r3, [pc, #88]	@ (800e570 <StartMcuTemperature+0xa0>)
 800e518:	881b      	ldrh	r3, [r3, #0]
 800e51a:	1ad3      	subs	r3, r2, r3
 800e51c:	ee07 3a90 	vmov	s15, r3
 800e520:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e524:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 800e560 <StartMcuTemperature+0x90>
 800e528:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800e52c:	89fb      	ldrh	r3, [r7, #14]
 800e52e:	4a10      	ldr	r2, [pc, #64]	@ (800e570 <StartMcuTemperature+0xa0>)
 800e530:	8812      	ldrh	r2, [r2, #0]
 800e532:	1a9b      	subs	r3, r3, r2
 800e534:	ee07 3a90 	vmov	s15, r3
 800e538:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e53c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e540:	eeb3 6b0e 	vmov.f64	d6, #62	@ 0x41f00000  30.0
 800e544:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e548:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e54c:	4b09      	ldr	r3, [pc, #36]	@ (800e574 <StartMcuTemperature+0xa4>)
 800e54e:	edc3 7a00 	vstr	s15, [r3]
        }
        osDelay(1000);
 800e552:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e556:	f7fb ffe9 	bl	800a52c <osDelay>
        HAL_ADC_Start(&hadc3);
 800e55a:	e7ca      	b.n	800e4f2 <StartMcuTemperature+0x22>
 800e55c:	f3af 8000 	nop.w
 800e560:	00000000 	.word	0x00000000
 800e564:	40540000 	.word	0x40540000
 800e568:	24000220 	.word	0x24000220
 800e56c:	1ff1e840 	.word	0x1ff1e840
 800e570:	1ff1e820 	.word	0x1ff1e820
 800e574:	24005f60 	.word	0x24005f60

0800e578 <StartOledDisplay>:
 * @brief    OLED显示控制
 * @param    *argument
 * @return
 */
void StartOledDisplay(void *argument)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b090      	sub	sp, #64	@ 0x40
 800e57c:	af04      	add	r7, sp, #16
 800e57e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN oledDisplay */
    /* Infinite loop */
    for (;;)
    {
        char oledBuffer[22] = {0};
 800e580:	2300      	movs	r3, #0
 800e582:	60fb      	str	r3, [r7, #12]
 800e584:	f107 0310 	add.w	r3, r7, #16
 800e588:	2200      	movs	r2, #0
 800e58a:	601a      	str	r2, [r3, #0]
 800e58c:	605a      	str	r2, [r3, #4]
 800e58e:	609a      	str	r2, [r3, #8]
 800e590:	60da      	str	r2, [r3, #12]
 800e592:	821a      	strh	r2, [r3, #16]
        float Uac = signal_V->basic->rms;
 800e594:	4b38      	ldr	r3, [pc, #224]	@ (800e678 <StartOledDisplay+0x100>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	62bb      	str	r3, [r7, #40]	@ 0x28
        float Iac = signal_I->basic->rms;
 800e59e:	4b37      	ldr	r3, [pc, #220]	@ (800e67c <StartOledDisplay+0x104>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	68db      	ldr	r3, [r3, #12]
 800e5a6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* 显示直流电压电流 */
        snprintf(oledBuffer, sizeof(oledBuffer), "Udc:%5.2fV Idc:%4.2fA", Udc, Idc);
 800e5a8:	4b35      	ldr	r3, [pc, #212]	@ (800e680 <StartOledDisplay+0x108>)
 800e5aa:	edd3 7a00 	vldr	s15, [r3]
 800e5ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e5b2:	4b34      	ldr	r3, [pc, #208]	@ (800e684 <StartOledDisplay+0x10c>)
 800e5b4:	edd3 6a00 	vldr	s13, [r3]
 800e5b8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800e5bc:	f107 030c 	add.w	r3, r7, #12
 800e5c0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e5c4:	ed8d 7b00 	vstr	d7, [sp]
 800e5c8:	4a2f      	ldr	r2, [pc, #188]	@ (800e688 <StartOledDisplay+0x110>)
 800e5ca:	2116      	movs	r1, #22
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f001 f819 	bl	800f604 <sniprintf>
        OLED_ShowString(0, 0, (uint8_t *)oledBuffer, 12);
 800e5d2:	f107 020c 	add.w	r2, r7, #12
 800e5d6:	230c      	movs	r3, #12
 800e5d8:	2100      	movs	r1, #0
 800e5da:	2000      	movs	r0, #0
 800e5dc:	f7fe ffa8 	bl	800d530 <OLED_ShowString>

        /* 显示交流电压电流 */
        snprintf(oledBuffer, sizeof(oledBuffer), "Uac:%5.2fV Iac:%4.2fA", Uac, Iac);
 800e5e0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800e5e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e5e8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800e5ec:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800e5f0:	f107 030c 	add.w	r3, r7, #12
 800e5f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e5f8:	ed8d 7b00 	vstr	d7, [sp]
 800e5fc:	4a23      	ldr	r2, [pc, #140]	@ (800e68c <StartOledDisplay+0x114>)
 800e5fe:	2116      	movs	r1, #22
 800e600:	4618      	mov	r0, r3
 800e602:	f000 ffff 	bl	800f604 <sniprintf>
        OLED_ShowString(0, 12, (uint8_t *)oledBuffer, 12);
 800e606:	f107 020c 	add.w	r2, r7, #12
 800e60a:	230c      	movs	r3, #12
 800e60c:	210c      	movs	r1, #12
 800e60e:	2000      	movs	r0, #0
 800e610:	f7fe ff8e 	bl	800d530 <OLED_ShowString>

        /* 显示设备状态和温度 */
        const char *stateText;
        switch (deviceState)
 800e614:	4b1e      	ldr	r3, [pc, #120]	@ (800e690 <StartOledDisplay+0x118>)
 800e616:	781b      	ldrb	r3, [r3, #0]
 800e618:	2b02      	cmp	r3, #2
 800e61a:	d00c      	beq.n	800e636 <StartOledDisplay+0xbe>
 800e61c:	2b02      	cmp	r3, #2
 800e61e:	dc0d      	bgt.n	800e63c <StartOledDisplay+0xc4>
 800e620:	2b00      	cmp	r3, #0
 800e622:	d002      	beq.n	800e62a <StartOledDisplay+0xb2>
 800e624:	2b01      	cmp	r3, #1
 800e626:	d003      	beq.n	800e630 <StartOledDisplay+0xb8>
 800e628:	e008      	b.n	800e63c <StartOledDisplay+0xc4>
        {
        case START:
            stateText = "START";
 800e62a:	4b1a      	ldr	r3, [pc, #104]	@ (800e694 <StartOledDisplay+0x11c>)
 800e62c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800e62e:	e008      	b.n	800e642 <StartOledDisplay+0xca>
        case RUN:
            stateText = "RUN";
 800e630:	4b19      	ldr	r3, [pc, #100]	@ (800e698 <StartOledDisplay+0x120>)
 800e632:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800e634:	e005      	b.n	800e642 <StartOledDisplay+0xca>
        case FAULT:
            stateText = "FAULT";
 800e636:	4b19      	ldr	r3, [pc, #100]	@ (800e69c <StartOledDisplay+0x124>)
 800e638:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800e63a:	e002      	b.n	800e642 <StartOledDisplay+0xca>
        default:
            stateText = "UNKNOWN";
 800e63c:	4b18      	ldr	r3, [pc, #96]	@ (800e6a0 <StartOledDisplay+0x128>)
 800e63e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800e640:	bf00      	nop
        }
        snprintf(oledBuffer, sizeof(oledBuffer), "%s T:%4.2fC", stateText, mcuTemperature);
 800e642:	4b18      	ldr	r3, [pc, #96]	@ (800e6a4 <StartOledDisplay+0x12c>)
 800e644:	edd3 7a00 	vldr	s15, [r3]
 800e648:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e64c:	f107 000c 	add.w	r0, r7, #12
 800e650:	ed8d 7b00 	vstr	d7, [sp]
 800e654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e656:	4a14      	ldr	r2, [pc, #80]	@ (800e6a8 <StartOledDisplay+0x130>)
 800e658:	2116      	movs	r1, #22
 800e65a:	f000 ffd3 	bl	800f604 <sniprintf>
        OLED_ShowString(0, 48, (uint8_t *)oledBuffer, 12);
 800e65e:	f107 020c 	add.w	r2, r7, #12
 800e662:	230c      	movs	r3, #12
 800e664:	2130      	movs	r1, #48	@ 0x30
 800e666:	2000      	movs	r0, #0
 800e668:	f7fe ff62 	bl	800d530 <OLED_ShowString>

        /* 刷新显示 */
        OLED_Refresh();
 800e66c:	f7fe fe16 	bl	800d29c <OLED_Refresh>
        osDelay(100);
 800e670:	2064      	movs	r0, #100	@ 0x64
 800e672:	f7fb ff5b 	bl	800a52c <osDelay>
    {
 800e676:	e783      	b.n	800e580 <StartOledDisplay+0x8>
 800e678:	240052d0 	.word	0x240052d0
 800e67c:	240052d4 	.word	0x240052d4
 800e680:	24005f64 	.word	0x24005f64
 800e684:	24005f68 	.word	0x24005f68
 800e688:	08011c98 	.word	0x08011c98
 800e68c:	08011cb0 	.word	0x08011cb0
 800e690:	24005f5c 	.word	0x24005f5c
 800e694:	08011cc8 	.word	0x08011cc8
 800e698:	08011cd0 	.word	0x08011cd0
 800e69c:	08011cd4 	.word	0x08011cd4
 800e6a0:	08011cdc 	.word	0x08011cdc
 800e6a4:	24005f60 	.word	0x24005f60
 800e6a8:	08011ce4 	.word	0x08011ce4

0800e6ac <StartDCSampling>:
 * @brief    直流采样
 * @param    *argument
 * @return
 */
void StartDCSampling(void *argument)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b082      	sub	sp, #8
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
    static const INA228_Handle INA228_0 = &INA228_0_state;

    /* Infinite loop */
    for (;;)
    {
        Udc = INA228_getVBUS_V(INA228_0);
 800e6b4:	4b0c      	ldr	r3, [pc, #48]	@ (800e6e8 <StartDCSampling+0x3c>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7fe fd19 	bl	800d0f0 <INA228_getVBUS_V>
 800e6be:	eef0 7a40 	vmov.f32	s15, s0
 800e6c2:	4b0a      	ldr	r3, [pc, #40]	@ (800e6ec <StartDCSampling+0x40>)
 800e6c4:	edc3 7a00 	vstr	s15, [r3]
        Idc = INA228_getCURRENT_A(INA228_0);
 800e6c8:	4b07      	ldr	r3, [pc, #28]	@ (800e6e8 <StartDCSampling+0x3c>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7fe fd93 	bl	800d1f8 <INA228_getCURRENT_A>
 800e6d2:	eef0 7a40 	vmov.f32	s15, s0
 800e6d6:	4b06      	ldr	r3, [pc, #24]	@ (800e6f0 <StartDCSampling+0x44>)
 800e6d8:	edc3 7a00 	vstr	s15, [r3]
        osDelay(10);
 800e6dc:	200a      	movs	r0, #10
 800e6de:	f7fb ff25 	bl	800a52c <osDelay>
        Udc = INA228_getVBUS_V(INA228_0);
 800e6e2:	bf00      	nop
 800e6e4:	e7e6      	b.n	800e6b4 <StartDCSampling+0x8>
 800e6e6:	bf00      	nop
 800e6e8:	080135d8 	.word	0x080135d8
 800e6ec:	24005f64 	.word	0x24005f64
 800e6f0:	24005f68 	.word	0x24005f68

0800e6f4 <StartCircuitProtection>:
 * @brief    电路保护控制
 * @param    *argument
 * @return
 */
void StartCircuitProtection(void *argument)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN circuitProtection */
    /* Infinite loop */
    for (;;)
    {
        float Uac = signal_V->basic->rms;
 800e6fc:	4b4a      	ldr	r3, [pc, #296]	@ (800e828 <StartCircuitProtection+0x134>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	68db      	ldr	r3, [r3, #12]
 800e704:	60fb      	str	r3, [r7, #12]
        float Iac = signal_I->basic->rms;
 800e706:	4b49      	ldr	r3, [pc, #292]	@ (800e82c <StartCircuitProtection+0x138>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	68db      	ldr	r3, [r3, #12]
 800e70e:	60bb      	str	r3, [r7, #8]
        if (Udc > protection_Udc || fabsf(Idc) > protection_Idc || Uac > protection_Uac || Iac > protection_Iac)
 800e710:	4b47      	ldr	r3, [pc, #284]	@ (800e830 <StartCircuitProtection+0x13c>)
 800e712:	edd3 7a00 	vldr	s15, [r3]
 800e716:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800e834 <StartCircuitProtection+0x140>
 800e71a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e722:	dc1d      	bgt.n	800e760 <StartCircuitProtection+0x6c>
 800e724:	4b44      	ldr	r3, [pc, #272]	@ (800e838 <StartCircuitProtection+0x144>)
 800e726:	edd3 7a00 	vldr	s15, [r3]
 800e72a:	eef0 7ae7 	vabs.f32	s15, s15
 800e72e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800e732:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e73a:	dc11      	bgt.n	800e760 <StartCircuitProtection+0x6c>
 800e73c:	edd7 7a03 	vldr	s15, [r7, #12]
 800e740:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800e744:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e74c:	dc08      	bgt.n	800e760 <StartCircuitProtection+0x6c>
 800e74e:	edd7 7a02 	vldr	s15, [r7, #8]
 800e752:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800e756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e75e:	dd09      	ble.n	800e774 <StartCircuitProtection+0x80>
        {
            deviceState = FAULT;
 800e760:	4b36      	ldr	r3, [pc, #216]	@ (800e83c <StartCircuitProtection+0x148>)
 800e762:	2202      	movs	r2, #2
 800e764:	701a      	strb	r2, [r3, #0]

            HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_RESET); /* 关闭输出 */
 800e766:	2200      	movs	r2, #0
 800e768:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e76c:	4834      	ldr	r0, [pc, #208]	@ (800e840 <StartCircuitProtection+0x14c>)
 800e76e:	f7f5 fa17 	bl	8003ba0 <HAL_GPIO_WritePin>
 800e772:	e054      	b.n	800e81e <StartCircuitProtection+0x12a>
        }
        else if (deviceState == START && Uac > 10.f && Iac > 0.5f && fabsf(signal_V->basic->park_q) < 0.02f)
 800e774:	4b31      	ldr	r3, [pc, #196]	@ (800e83c <StartCircuitProtection+0x148>)
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d150      	bne.n	800e81e <StartCircuitProtection+0x12a>
 800e77c:	edd7 7a03 	vldr	s15, [r7, #12]
 800e780:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800e784:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e78c:	dd47      	ble.n	800e81e <StartCircuitProtection+0x12a>
 800e78e:	edd7 7a02 	vldr	s15, [r7, #8]
 800e792:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e79e:	dd3e      	ble.n	800e81e <StartCircuitProtection+0x12a>
 800e7a0:	4b21      	ldr	r3, [pc, #132]	@ (800e828 <StartCircuitProtection+0x134>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	edd3 7a06 	vldr	s15, [r3, #24]
 800e7aa:	eef0 7ae7 	vabs.f32	s15, s15
 800e7ae:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800e844 <StartCircuitProtection+0x150>
 800e7b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ba:	d530      	bpl.n	800e81e <StartCircuitProtection+0x12a>
        {
            osDelay(500); /* 防止误判 */
 800e7bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800e7c0:	f7fb feb4 	bl	800a52c <osDelay>
            if (deviceState == START && Uac > 10.f && Iac > 0.5f && fabsf(signal_V->basic->park_q) < 0.02f)
 800e7c4:	4b1d      	ldr	r3, [pc, #116]	@ (800e83c <StartCircuitProtection+0x148>)
 800e7c6:	781b      	ldrb	r3, [r3, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d128      	bne.n	800e81e <StartCircuitProtection+0x12a>
 800e7cc:	edd7 7a03 	vldr	s15, [r7, #12]
 800e7d0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800e7d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7dc:	dd1f      	ble.n	800e81e <StartCircuitProtection+0x12a>
 800e7de:	edd7 7a02 	vldr	s15, [r7, #8]
 800e7e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e7e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ee:	dd16      	ble.n	800e81e <StartCircuitProtection+0x12a>
 800e7f0:	4b0d      	ldr	r3, [pc, #52]	@ (800e828 <StartCircuitProtection+0x134>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	edd3 7a06 	vldr	s15, [r3, #24]
 800e7fa:	eef0 7ae7 	vabs.f32	s15, s15
 800e7fe:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800e844 <StartCircuitProtection+0x150>
 800e802:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e80a:	d508      	bpl.n	800e81e <StartCircuitProtection+0x12a>
            {
                deviceState = RUN;
 800e80c:	4b0b      	ldr	r3, [pc, #44]	@ (800e83c <StartCircuitProtection+0x148>)
 800e80e:	2201      	movs	r2, #1
 800e810:	701a      	strb	r2, [r3, #0]

                HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_SET); /* 打开输出 */
 800e812:	2201      	movs	r2, #1
 800e814:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e818:	4809      	ldr	r0, [pc, #36]	@ (800e840 <StartCircuitProtection+0x14c>)
 800e81a:	f7f5 f9c1 	bl	8003ba0 <HAL_GPIO_WritePin>
            }
        }
        osDelay(10);
 800e81e:	200a      	movs	r0, #10
 800e820:	f7fb fe84 	bl	800a52c <osDelay>
    {
 800e824:	e76a      	b.n	800e6fc <StartCircuitProtection+0x8>
 800e826:	bf00      	nop
 800e828:	240052d0 	.word	0x240052d0
 800e82c:	240052d4 	.word	0x240052d4
 800e830:	24005f64 	.word	0x24005f64
 800e834:	42b40000 	.word	0x42b40000
 800e838:	24005f68 	.word	0x24005f68
 800e83c:	24005f5c 	.word	0x24005f5c
 800e840:	58020000 	.word	0x58020000
 800e844:	3ca3d70a 	.word	0x3ca3d70a

0800e848 <StartDCControl>:
 * @brief    直流电压控制
 * @param    *argument
 * @return
 */
void StartDCControl(void *argument)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN dcControl */
    static PID pidDCV;
    pid_Init(&pidDCV, 0.1f, 0.01f, 0, 2.5f, 0.5f);
 800e850:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800e854:	eef0 1a04 	vmov.f32	s3, #4	@ 0x40200000  2.5
 800e858:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 800e898 <StartDCControl+0x50>
 800e85c:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 800e89c <StartDCControl+0x54>
 800e860:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800e8a0 <StartDCControl+0x58>
 800e864:	480f      	ldr	r0, [pc, #60]	@ (800e8a4 <StartDCControl+0x5c>)
 800e866:	f7fe fe97 	bl	800d598 <pid_Init>
    /* Infinite loop */
    for (;;)
    {
        pid(&pidDCV, Utarget, Udc);
 800e86a:	4b0f      	ldr	r3, [pc, #60]	@ (800e8a8 <StartDCControl+0x60>)
 800e86c:	edd3 7a00 	vldr	s15, [r3]
 800e870:	4b0e      	ldr	r3, [pc, #56]	@ (800e8ac <StartDCControl+0x64>)
 800e872:	ed93 7a00 	vldr	s14, [r3]
 800e876:	eef0 0a47 	vmov.f32	s1, s14
 800e87a:	eeb0 0a67 	vmov.f32	s0, s15
 800e87e:	4809      	ldr	r0, [pc, #36]	@ (800e8a4 <StartDCControl+0x5c>)
 800e880:	f7fe febd 	bl	800d5fe <pid>
        Itarget = pidDCV.out;
 800e884:	4b07      	ldr	r3, [pc, #28]	@ (800e8a4 <StartDCControl+0x5c>)
 800e886:	699b      	ldr	r3, [r3, #24]
 800e888:	4a09      	ldr	r2, [pc, #36]	@ (800e8b0 <StartDCControl+0x68>)
 800e88a:	6013      	str	r3, [r2, #0]
        osDelay(20);
 800e88c:	2014      	movs	r0, #20
 800e88e:	f7fb fe4d 	bl	800a52c <osDelay>
        pid(&pidDCV, Utarget, Udc);
 800e892:	bf00      	nop
 800e894:	e7e9      	b.n	800e86a <StartDCControl+0x22>
 800e896:	bf00      	nop
 800e898:	00000000 	.word	0x00000000
 800e89c:	3c23d70a 	.word	0x3c23d70a
 800e8a0:	3dcccccd 	.word	0x3dcccccd
 800e8a4:	24005f70 	.word	0x24005f70
 800e8a8:	24000014 	.word	0x24000014
 800e8ac:	24005f64 	.word	0x24005f64
 800e8b0:	24005f6c 	.word	0x24005f6c

0800e8b4 <arm_rms_f32>:
 800e8b4:	b530      	push	{r4, r5, lr}
 800e8b6:	088d      	lsrs	r5, r1, #2
 800e8b8:	ed2d 8b02 	vpush	{d8}
 800e8bc:	b083      	sub	sp, #12
 800e8be:	d054      	beq.n	800e96a <arm_rms_f32+0xb6>
 800e8c0:	f100 0310 	add.w	r3, r0, #16
 800e8c4:	462c      	mov	r4, r5
 800e8c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800e980 <arm_rms_f32+0xcc>
 800e8ca:	ed53 6a04 	vldr	s13, [r3, #-16]
 800e8ce:	3c01      	subs	r4, #1
 800e8d0:	ed13 7a03 	vldr	s14, [r3, #-12]
 800e8d4:	f103 0310 	add.w	r3, r3, #16
 800e8d8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800e8dc:	ed53 7a06 	vldr	s15, [r3, #-24]	@ 0xffffffe8
 800e8e0:	ee27 7a07 	vmul.f32	s14, s14, s14
 800e8e4:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 800e8e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e8ec:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800e8f0:	ee26 6a06 	vmul.f32	s12, s12, s12
 800e8f4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e8f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e8fc:	ee76 5a27 	vadd.f32	s11, s12, s15
 800e900:	d1e3      	bne.n	800e8ca <arm_rms_f32+0x16>
 800e902:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800e906:	f011 0303 	ands.w	r3, r1, #3
 800e90a:	d015      	beq.n	800e938 <arm_rms_f32+0x84>
 800e90c:	edd0 7a00 	vldr	s15, [r0]
 800e910:	3b01      	subs	r3, #1
 800e912:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e916:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800e91a:	d00d      	beq.n	800e938 <arm_rms_f32+0x84>
 800e91c:	edd0 7a01 	vldr	s15, [r0, #4]
 800e920:	2b01      	cmp	r3, #1
 800e922:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e926:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800e92a:	d005      	beq.n	800e938 <arm_rms_f32+0x84>
 800e92c:	edd0 7a02 	vldr	s15, [r0, #8]
 800e930:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e934:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800e938:	ee07 1a90 	vmov	s15, r1
 800e93c:	2300      	movs	r3, #0
 800e93e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e942:	ee85 0aa7 	vdiv.f32	s0, s11, s15
 800e946:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e94e:	db0f      	blt.n	800e970 <arm_rms_f32+0xbc>
 800e950:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e954:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e95c:	d40a      	bmi.n	800e974 <arm_rms_f32+0xc0>
 800e95e:	ed82 8a00 	vstr	s16, [r2]
 800e962:	b003      	add	sp, #12
 800e964:	ecbd 8b02 	vpop	{d8}
 800e968:	bd30      	pop	{r4, r5, pc}
 800e96a:	eddf 5a05 	vldr	s11, [pc, #20]	@ 800e980 <arm_rms_f32+0xcc>
 800e96e:	e7ca      	b.n	800e906 <arm_rms_f32+0x52>
 800e970:	6013      	str	r3, [r2, #0]
 800e972:	e7f6      	b.n	800e962 <arm_rms_f32+0xae>
 800e974:	9201      	str	r2, [sp, #4]
 800e976:	f002 fed3 	bl	8011720 <sqrtf>
 800e97a:	9a01      	ldr	r2, [sp, #4]
 800e97c:	e7ef      	b.n	800e95e <arm_rms_f32+0xaa>
 800e97e:	bf00      	nop
 800e980:	00000000 	.word	0x00000000

0800e984 <arm_sin_f32>:
 800e984:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800ea04 <arm_sin_f32+0x80>
 800e988:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e98c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e990:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e998:	d504      	bpl.n	800e9a4 <arm_sin_f32+0x20>
 800e99a:	ee17 3a90 	vmov	r3, s15
 800e99e:	3b01      	subs	r3, #1
 800e9a0:	ee07 3a90 	vmov	s15, r3
 800e9a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e9a8:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800ea08 <arm_sin_f32+0x84>
 800e9ac:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e9b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e9b4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800e9b8:	ee17 3a10 	vmov	r3, s14
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e9c2:	d21a      	bcs.n	800e9fa <arm_sin_f32+0x76>
 800e9c4:	ee07 3a10 	vmov	s14, r3
 800e9c8:	1c59      	adds	r1, r3, #1
 800e9ca:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800e9ce:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e9d2:	4a0e      	ldr	r2, [pc, #56]	@ (800ea0c <arm_sin_f32+0x88>)
 800e9d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e9d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e9dc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e9e0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e9e4:	edd3 6a00 	vldr	s13, [r3]
 800e9e8:	ed92 7a00 	vldr	s14, [r2]
 800e9ec:	ee20 0a26 	vmul.f32	s0, s0, s13
 800e9f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e9f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e9f8:	4770      	bx	lr
 800e9fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e9fe:	2101      	movs	r1, #1
 800ea00:	2300      	movs	r3, #0
 800ea02:	e7e6      	b.n	800e9d2 <arm_sin_f32+0x4e>
 800ea04:	3e22f983 	.word	0x3e22f983
 800ea08:	44000000 	.word	0x44000000
 800ea0c:	080135dc 	.word	0x080135dc

0800ea10 <arm_cos_f32>:
 800ea10:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800ea98 <arm_cos_f32+0x88>
 800ea14:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800ea18:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ea1c:	ee30 0a07 	vadd.f32	s0, s0, s14
 800ea20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ea24:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ea28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea2c:	d504      	bpl.n	800ea38 <arm_cos_f32+0x28>
 800ea2e:	ee17 3a90 	vmov	r3, s15
 800ea32:	3b01      	subs	r3, #1
 800ea34:	ee07 3a90 	vmov	s15, r3
 800ea38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea3c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800ea9c <arm_cos_f32+0x8c>
 800ea40:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ea44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ea48:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ea4c:	ee17 3a10 	vmov	r3, s14
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea56:	d21a      	bcs.n	800ea8e <arm_cos_f32+0x7e>
 800ea58:	ee07 3a10 	vmov	s14, r3
 800ea5c:	1c59      	adds	r1, r3, #1
 800ea5e:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800ea62:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ea66:	4a0e      	ldr	r2, [pc, #56]	@ (800eaa0 <arm_cos_f32+0x90>)
 800ea68:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ea6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ea70:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ea74:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ea78:	edd3 6a00 	vldr	s13, [r3]
 800ea7c:	ed92 7a00 	vldr	s14, [r2]
 800ea80:	ee20 0a26 	vmul.f32	s0, s0, s13
 800ea84:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea88:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ea8c:	4770      	bx	lr
 800ea8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ea92:	2101      	movs	r1, #1
 800ea94:	2300      	movs	r3, #0
 800ea96:	e7e6      	b.n	800ea66 <arm_cos_f32+0x56>
 800ea98:	3e22f983 	.word	0x3e22f983
 800ea9c:	44000000 	.word	0x44000000
 800eaa0:	080135dc 	.word	0x080135dc

0800eaa4 <malloc>:
 800eaa4:	4b02      	ldr	r3, [pc, #8]	@ (800eab0 <malloc+0xc>)
 800eaa6:	4601      	mov	r1, r0
 800eaa8:	6818      	ldr	r0, [r3, #0]
 800eaaa:	f000 b825 	b.w	800eaf8 <_malloc_r>
 800eaae:	bf00      	nop
 800eab0:	24000048 	.word	0x24000048

0800eab4 <sbrk_aligned>:
 800eab4:	b570      	push	{r4, r5, r6, lr}
 800eab6:	4e0f      	ldr	r6, [pc, #60]	@ (800eaf4 <sbrk_aligned+0x40>)
 800eab8:	460c      	mov	r4, r1
 800eaba:	6831      	ldr	r1, [r6, #0]
 800eabc:	4605      	mov	r5, r0
 800eabe:	b911      	cbnz	r1, 800eac6 <sbrk_aligned+0x12>
 800eac0:	f000 fe58 	bl	800f774 <_sbrk_r>
 800eac4:	6030      	str	r0, [r6, #0]
 800eac6:	4621      	mov	r1, r4
 800eac8:	4628      	mov	r0, r5
 800eaca:	f000 fe53 	bl	800f774 <_sbrk_r>
 800eace:	1c43      	adds	r3, r0, #1
 800ead0:	d103      	bne.n	800eada <sbrk_aligned+0x26>
 800ead2:	f04f 34ff 	mov.w	r4, #4294967295
 800ead6:	4620      	mov	r0, r4
 800ead8:	bd70      	pop	{r4, r5, r6, pc}
 800eada:	1cc4      	adds	r4, r0, #3
 800eadc:	f024 0403 	bic.w	r4, r4, #3
 800eae0:	42a0      	cmp	r0, r4
 800eae2:	d0f8      	beq.n	800ead6 <sbrk_aligned+0x22>
 800eae4:	1a21      	subs	r1, r4, r0
 800eae6:	4628      	mov	r0, r5
 800eae8:	f000 fe44 	bl	800f774 <_sbrk_r>
 800eaec:	3001      	adds	r0, #1
 800eaee:	d1f2      	bne.n	800ead6 <sbrk_aligned+0x22>
 800eaf0:	e7ef      	b.n	800ead2 <sbrk_aligned+0x1e>
 800eaf2:	bf00      	nop
 800eaf4:	24005f94 	.word	0x24005f94

0800eaf8 <_malloc_r>:
 800eaf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eafc:	1ccd      	adds	r5, r1, #3
 800eafe:	f025 0503 	bic.w	r5, r5, #3
 800eb02:	3508      	adds	r5, #8
 800eb04:	2d0c      	cmp	r5, #12
 800eb06:	bf38      	it	cc
 800eb08:	250c      	movcc	r5, #12
 800eb0a:	2d00      	cmp	r5, #0
 800eb0c:	4606      	mov	r6, r0
 800eb0e:	db01      	blt.n	800eb14 <_malloc_r+0x1c>
 800eb10:	42a9      	cmp	r1, r5
 800eb12:	d904      	bls.n	800eb1e <_malloc_r+0x26>
 800eb14:	230c      	movs	r3, #12
 800eb16:	6033      	str	r3, [r6, #0]
 800eb18:	2000      	movs	r0, #0
 800eb1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ebf4 <_malloc_r+0xfc>
 800eb22:	f000 f869 	bl	800ebf8 <__malloc_lock>
 800eb26:	f8d8 3000 	ldr.w	r3, [r8]
 800eb2a:	461c      	mov	r4, r3
 800eb2c:	bb44      	cbnz	r4, 800eb80 <_malloc_r+0x88>
 800eb2e:	4629      	mov	r1, r5
 800eb30:	4630      	mov	r0, r6
 800eb32:	f7ff ffbf 	bl	800eab4 <sbrk_aligned>
 800eb36:	1c43      	adds	r3, r0, #1
 800eb38:	4604      	mov	r4, r0
 800eb3a:	d158      	bne.n	800ebee <_malloc_r+0xf6>
 800eb3c:	f8d8 4000 	ldr.w	r4, [r8]
 800eb40:	4627      	mov	r7, r4
 800eb42:	2f00      	cmp	r7, #0
 800eb44:	d143      	bne.n	800ebce <_malloc_r+0xd6>
 800eb46:	2c00      	cmp	r4, #0
 800eb48:	d04b      	beq.n	800ebe2 <_malloc_r+0xea>
 800eb4a:	6823      	ldr	r3, [r4, #0]
 800eb4c:	4639      	mov	r1, r7
 800eb4e:	4630      	mov	r0, r6
 800eb50:	eb04 0903 	add.w	r9, r4, r3
 800eb54:	f000 fe0e 	bl	800f774 <_sbrk_r>
 800eb58:	4581      	cmp	r9, r0
 800eb5a:	d142      	bne.n	800ebe2 <_malloc_r+0xea>
 800eb5c:	6821      	ldr	r1, [r4, #0]
 800eb5e:	1a6d      	subs	r5, r5, r1
 800eb60:	4629      	mov	r1, r5
 800eb62:	4630      	mov	r0, r6
 800eb64:	f7ff ffa6 	bl	800eab4 <sbrk_aligned>
 800eb68:	3001      	adds	r0, #1
 800eb6a:	d03a      	beq.n	800ebe2 <_malloc_r+0xea>
 800eb6c:	6823      	ldr	r3, [r4, #0]
 800eb6e:	442b      	add	r3, r5
 800eb70:	6023      	str	r3, [r4, #0]
 800eb72:	f8d8 3000 	ldr.w	r3, [r8]
 800eb76:	685a      	ldr	r2, [r3, #4]
 800eb78:	bb62      	cbnz	r2, 800ebd4 <_malloc_r+0xdc>
 800eb7a:	f8c8 7000 	str.w	r7, [r8]
 800eb7e:	e00f      	b.n	800eba0 <_malloc_r+0xa8>
 800eb80:	6822      	ldr	r2, [r4, #0]
 800eb82:	1b52      	subs	r2, r2, r5
 800eb84:	d420      	bmi.n	800ebc8 <_malloc_r+0xd0>
 800eb86:	2a0b      	cmp	r2, #11
 800eb88:	d917      	bls.n	800ebba <_malloc_r+0xc2>
 800eb8a:	1961      	adds	r1, r4, r5
 800eb8c:	42a3      	cmp	r3, r4
 800eb8e:	6025      	str	r5, [r4, #0]
 800eb90:	bf18      	it	ne
 800eb92:	6059      	strne	r1, [r3, #4]
 800eb94:	6863      	ldr	r3, [r4, #4]
 800eb96:	bf08      	it	eq
 800eb98:	f8c8 1000 	streq.w	r1, [r8]
 800eb9c:	5162      	str	r2, [r4, r5]
 800eb9e:	604b      	str	r3, [r1, #4]
 800eba0:	4630      	mov	r0, r6
 800eba2:	f000 f82f 	bl	800ec04 <__malloc_unlock>
 800eba6:	f104 000b 	add.w	r0, r4, #11
 800ebaa:	1d23      	adds	r3, r4, #4
 800ebac:	f020 0007 	bic.w	r0, r0, #7
 800ebb0:	1ac2      	subs	r2, r0, r3
 800ebb2:	bf1c      	itt	ne
 800ebb4:	1a1b      	subne	r3, r3, r0
 800ebb6:	50a3      	strne	r3, [r4, r2]
 800ebb8:	e7af      	b.n	800eb1a <_malloc_r+0x22>
 800ebba:	6862      	ldr	r2, [r4, #4]
 800ebbc:	42a3      	cmp	r3, r4
 800ebbe:	bf0c      	ite	eq
 800ebc0:	f8c8 2000 	streq.w	r2, [r8]
 800ebc4:	605a      	strne	r2, [r3, #4]
 800ebc6:	e7eb      	b.n	800eba0 <_malloc_r+0xa8>
 800ebc8:	4623      	mov	r3, r4
 800ebca:	6864      	ldr	r4, [r4, #4]
 800ebcc:	e7ae      	b.n	800eb2c <_malloc_r+0x34>
 800ebce:	463c      	mov	r4, r7
 800ebd0:	687f      	ldr	r7, [r7, #4]
 800ebd2:	e7b6      	b.n	800eb42 <_malloc_r+0x4a>
 800ebd4:	461a      	mov	r2, r3
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	42a3      	cmp	r3, r4
 800ebda:	d1fb      	bne.n	800ebd4 <_malloc_r+0xdc>
 800ebdc:	2300      	movs	r3, #0
 800ebde:	6053      	str	r3, [r2, #4]
 800ebe0:	e7de      	b.n	800eba0 <_malloc_r+0xa8>
 800ebe2:	230c      	movs	r3, #12
 800ebe4:	6033      	str	r3, [r6, #0]
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	f000 f80c 	bl	800ec04 <__malloc_unlock>
 800ebec:	e794      	b.n	800eb18 <_malloc_r+0x20>
 800ebee:	6005      	str	r5, [r0, #0]
 800ebf0:	e7d6      	b.n	800eba0 <_malloc_r+0xa8>
 800ebf2:	bf00      	nop
 800ebf4:	24005f98 	.word	0x24005f98

0800ebf8 <__malloc_lock>:
 800ebf8:	4801      	ldr	r0, [pc, #4]	@ (800ec00 <__malloc_lock+0x8>)
 800ebfa:	f000 be08 	b.w	800f80e <__retarget_lock_acquire_recursive>
 800ebfe:	bf00      	nop
 800ec00:	240060dc 	.word	0x240060dc

0800ec04 <__malloc_unlock>:
 800ec04:	4801      	ldr	r0, [pc, #4]	@ (800ec0c <__malloc_unlock+0x8>)
 800ec06:	f000 be03 	b.w	800f810 <__retarget_lock_release_recursive>
 800ec0a:	bf00      	nop
 800ec0c:	240060dc 	.word	0x240060dc

0800ec10 <__cvt>:
 800ec10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec12:	ed2d 8b02 	vpush	{d8}
 800ec16:	eeb0 8b40 	vmov.f64	d8, d0
 800ec1a:	b085      	sub	sp, #20
 800ec1c:	4617      	mov	r7, r2
 800ec1e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800ec20:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ec22:	ee18 2a90 	vmov	r2, s17
 800ec26:	f025 0520 	bic.w	r5, r5, #32
 800ec2a:	2a00      	cmp	r2, #0
 800ec2c:	bfb6      	itet	lt
 800ec2e:	222d      	movlt	r2, #45	@ 0x2d
 800ec30:	2200      	movge	r2, #0
 800ec32:	eeb1 8b40 	vneglt.f64	d8, d0
 800ec36:	2d46      	cmp	r5, #70	@ 0x46
 800ec38:	460c      	mov	r4, r1
 800ec3a:	701a      	strb	r2, [r3, #0]
 800ec3c:	d004      	beq.n	800ec48 <__cvt+0x38>
 800ec3e:	2d45      	cmp	r5, #69	@ 0x45
 800ec40:	d100      	bne.n	800ec44 <__cvt+0x34>
 800ec42:	3401      	adds	r4, #1
 800ec44:	2102      	movs	r1, #2
 800ec46:	e000      	b.n	800ec4a <__cvt+0x3a>
 800ec48:	2103      	movs	r1, #3
 800ec4a:	ab03      	add	r3, sp, #12
 800ec4c:	9301      	str	r3, [sp, #4]
 800ec4e:	ab02      	add	r3, sp, #8
 800ec50:	9300      	str	r3, [sp, #0]
 800ec52:	4622      	mov	r2, r4
 800ec54:	4633      	mov	r3, r6
 800ec56:	eeb0 0b48 	vmov.f64	d0, d8
 800ec5a:	f000 fe71 	bl	800f940 <_dtoa_r>
 800ec5e:	2d47      	cmp	r5, #71	@ 0x47
 800ec60:	d114      	bne.n	800ec8c <__cvt+0x7c>
 800ec62:	07fb      	lsls	r3, r7, #31
 800ec64:	d50a      	bpl.n	800ec7c <__cvt+0x6c>
 800ec66:	1902      	adds	r2, r0, r4
 800ec68:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ec6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec70:	bf08      	it	eq
 800ec72:	9203      	streq	r2, [sp, #12]
 800ec74:	2130      	movs	r1, #48	@ 0x30
 800ec76:	9b03      	ldr	r3, [sp, #12]
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d319      	bcc.n	800ecb0 <__cvt+0xa0>
 800ec7c:	9b03      	ldr	r3, [sp, #12]
 800ec7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec80:	1a1b      	subs	r3, r3, r0
 800ec82:	6013      	str	r3, [r2, #0]
 800ec84:	b005      	add	sp, #20
 800ec86:	ecbd 8b02 	vpop	{d8}
 800ec8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec8c:	2d46      	cmp	r5, #70	@ 0x46
 800ec8e:	eb00 0204 	add.w	r2, r0, r4
 800ec92:	d1e9      	bne.n	800ec68 <__cvt+0x58>
 800ec94:	7803      	ldrb	r3, [r0, #0]
 800ec96:	2b30      	cmp	r3, #48	@ 0x30
 800ec98:	d107      	bne.n	800ecaa <__cvt+0x9a>
 800ec9a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ec9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca2:	bf1c      	itt	ne
 800eca4:	f1c4 0401 	rsbne	r4, r4, #1
 800eca8:	6034      	strne	r4, [r6, #0]
 800ecaa:	6833      	ldr	r3, [r6, #0]
 800ecac:	441a      	add	r2, r3
 800ecae:	e7db      	b.n	800ec68 <__cvt+0x58>
 800ecb0:	1c5c      	adds	r4, r3, #1
 800ecb2:	9403      	str	r4, [sp, #12]
 800ecb4:	7019      	strb	r1, [r3, #0]
 800ecb6:	e7de      	b.n	800ec76 <__cvt+0x66>

0800ecb8 <__exponent>:
 800ecb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ecba:	2900      	cmp	r1, #0
 800ecbc:	bfba      	itte	lt
 800ecbe:	4249      	neglt	r1, r1
 800ecc0:	232d      	movlt	r3, #45	@ 0x2d
 800ecc2:	232b      	movge	r3, #43	@ 0x2b
 800ecc4:	2909      	cmp	r1, #9
 800ecc6:	7002      	strb	r2, [r0, #0]
 800ecc8:	7043      	strb	r3, [r0, #1]
 800ecca:	dd29      	ble.n	800ed20 <__exponent+0x68>
 800eccc:	f10d 0307 	add.w	r3, sp, #7
 800ecd0:	461d      	mov	r5, r3
 800ecd2:	270a      	movs	r7, #10
 800ecd4:	461a      	mov	r2, r3
 800ecd6:	fbb1 f6f7 	udiv	r6, r1, r7
 800ecda:	fb07 1416 	mls	r4, r7, r6, r1
 800ecde:	3430      	adds	r4, #48	@ 0x30
 800ece0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ece4:	460c      	mov	r4, r1
 800ece6:	2c63      	cmp	r4, #99	@ 0x63
 800ece8:	f103 33ff 	add.w	r3, r3, #4294967295
 800ecec:	4631      	mov	r1, r6
 800ecee:	dcf1      	bgt.n	800ecd4 <__exponent+0x1c>
 800ecf0:	3130      	adds	r1, #48	@ 0x30
 800ecf2:	1e94      	subs	r4, r2, #2
 800ecf4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ecf8:	1c41      	adds	r1, r0, #1
 800ecfa:	4623      	mov	r3, r4
 800ecfc:	42ab      	cmp	r3, r5
 800ecfe:	d30a      	bcc.n	800ed16 <__exponent+0x5e>
 800ed00:	f10d 0309 	add.w	r3, sp, #9
 800ed04:	1a9b      	subs	r3, r3, r2
 800ed06:	42ac      	cmp	r4, r5
 800ed08:	bf88      	it	hi
 800ed0a:	2300      	movhi	r3, #0
 800ed0c:	3302      	adds	r3, #2
 800ed0e:	4403      	add	r3, r0
 800ed10:	1a18      	subs	r0, r3, r0
 800ed12:	b003      	add	sp, #12
 800ed14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed16:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ed1a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ed1e:	e7ed      	b.n	800ecfc <__exponent+0x44>
 800ed20:	2330      	movs	r3, #48	@ 0x30
 800ed22:	3130      	adds	r1, #48	@ 0x30
 800ed24:	7083      	strb	r3, [r0, #2]
 800ed26:	70c1      	strb	r1, [r0, #3]
 800ed28:	1d03      	adds	r3, r0, #4
 800ed2a:	e7f1      	b.n	800ed10 <__exponent+0x58>
 800ed2c:	0000      	movs	r0, r0
	...

0800ed30 <_printf_float>:
 800ed30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed34:	b08d      	sub	sp, #52	@ 0x34
 800ed36:	460c      	mov	r4, r1
 800ed38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ed3c:	4616      	mov	r6, r2
 800ed3e:	461f      	mov	r7, r3
 800ed40:	4605      	mov	r5, r0
 800ed42:	f000 fcdf 	bl	800f704 <_localeconv_r>
 800ed46:	f8d0 b000 	ldr.w	fp, [r0]
 800ed4a:	4658      	mov	r0, fp
 800ed4c:	f7f1 fb18 	bl	8000380 <strlen>
 800ed50:	2300      	movs	r3, #0
 800ed52:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed54:	f8d8 3000 	ldr.w	r3, [r8]
 800ed58:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ed5c:	6822      	ldr	r2, [r4, #0]
 800ed5e:	9005      	str	r0, [sp, #20]
 800ed60:	3307      	adds	r3, #7
 800ed62:	f023 0307 	bic.w	r3, r3, #7
 800ed66:	f103 0108 	add.w	r1, r3, #8
 800ed6a:	f8c8 1000 	str.w	r1, [r8]
 800ed6e:	ed93 0b00 	vldr	d0, [r3]
 800ed72:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800efd0 <_printf_float+0x2a0>
 800ed76:	eeb0 7bc0 	vabs.f64	d7, d0
 800ed7a:	eeb4 7b46 	vcmp.f64	d7, d6
 800ed7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed82:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ed86:	dd24      	ble.n	800edd2 <_printf_float+0xa2>
 800ed88:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ed8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed90:	d502      	bpl.n	800ed98 <_printf_float+0x68>
 800ed92:	232d      	movs	r3, #45	@ 0x2d
 800ed94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed98:	498f      	ldr	r1, [pc, #572]	@ (800efd8 <_printf_float+0x2a8>)
 800ed9a:	4b90      	ldr	r3, [pc, #576]	@ (800efdc <_printf_float+0x2ac>)
 800ed9c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800eda0:	bf94      	ite	ls
 800eda2:	4688      	movls	r8, r1
 800eda4:	4698      	movhi	r8, r3
 800eda6:	f022 0204 	bic.w	r2, r2, #4
 800edaa:	2303      	movs	r3, #3
 800edac:	6123      	str	r3, [r4, #16]
 800edae:	6022      	str	r2, [r4, #0]
 800edb0:	f04f 0a00 	mov.w	sl, #0
 800edb4:	9700      	str	r7, [sp, #0]
 800edb6:	4633      	mov	r3, r6
 800edb8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800edba:	4621      	mov	r1, r4
 800edbc:	4628      	mov	r0, r5
 800edbe:	f000 f9d1 	bl	800f164 <_printf_common>
 800edc2:	3001      	adds	r0, #1
 800edc4:	f040 8089 	bne.w	800eeda <_printf_float+0x1aa>
 800edc8:	f04f 30ff 	mov.w	r0, #4294967295
 800edcc:	b00d      	add	sp, #52	@ 0x34
 800edce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edd2:	eeb4 0b40 	vcmp.f64	d0, d0
 800edd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edda:	d709      	bvc.n	800edf0 <_printf_float+0xc0>
 800eddc:	ee10 3a90 	vmov	r3, s1
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	bfbc      	itt	lt
 800ede4:	232d      	movlt	r3, #45	@ 0x2d
 800ede6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800edea:	497d      	ldr	r1, [pc, #500]	@ (800efe0 <_printf_float+0x2b0>)
 800edec:	4b7d      	ldr	r3, [pc, #500]	@ (800efe4 <_printf_float+0x2b4>)
 800edee:	e7d5      	b.n	800ed9c <_printf_float+0x6c>
 800edf0:	6863      	ldr	r3, [r4, #4]
 800edf2:	1c59      	adds	r1, r3, #1
 800edf4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800edf8:	d139      	bne.n	800ee6e <_printf_float+0x13e>
 800edfa:	2306      	movs	r3, #6
 800edfc:	6063      	str	r3, [r4, #4]
 800edfe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ee02:	2300      	movs	r3, #0
 800ee04:	6022      	str	r2, [r4, #0]
 800ee06:	9303      	str	r3, [sp, #12]
 800ee08:	ab0a      	add	r3, sp, #40	@ 0x28
 800ee0a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ee0e:	ab09      	add	r3, sp, #36	@ 0x24
 800ee10:	9300      	str	r3, [sp, #0]
 800ee12:	6861      	ldr	r1, [r4, #4]
 800ee14:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ee18:	4628      	mov	r0, r5
 800ee1a:	f7ff fef9 	bl	800ec10 <__cvt>
 800ee1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ee22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ee24:	4680      	mov	r8, r0
 800ee26:	d129      	bne.n	800ee7c <_printf_float+0x14c>
 800ee28:	1cc8      	adds	r0, r1, #3
 800ee2a:	db02      	blt.n	800ee32 <_printf_float+0x102>
 800ee2c:	6863      	ldr	r3, [r4, #4]
 800ee2e:	4299      	cmp	r1, r3
 800ee30:	dd41      	ble.n	800eeb6 <_printf_float+0x186>
 800ee32:	f1a9 0902 	sub.w	r9, r9, #2
 800ee36:	fa5f f989 	uxtb.w	r9, r9
 800ee3a:	3901      	subs	r1, #1
 800ee3c:	464a      	mov	r2, r9
 800ee3e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ee42:	9109      	str	r1, [sp, #36]	@ 0x24
 800ee44:	f7ff ff38 	bl	800ecb8 <__exponent>
 800ee48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee4a:	1813      	adds	r3, r2, r0
 800ee4c:	2a01      	cmp	r2, #1
 800ee4e:	4682      	mov	sl, r0
 800ee50:	6123      	str	r3, [r4, #16]
 800ee52:	dc02      	bgt.n	800ee5a <_printf_float+0x12a>
 800ee54:	6822      	ldr	r2, [r4, #0]
 800ee56:	07d2      	lsls	r2, r2, #31
 800ee58:	d501      	bpl.n	800ee5e <_printf_float+0x12e>
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	6123      	str	r3, [r4, #16]
 800ee5e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d0a6      	beq.n	800edb4 <_printf_float+0x84>
 800ee66:	232d      	movs	r3, #45	@ 0x2d
 800ee68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee6c:	e7a2      	b.n	800edb4 <_printf_float+0x84>
 800ee6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ee72:	d1c4      	bne.n	800edfe <_printf_float+0xce>
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d1c2      	bne.n	800edfe <_printf_float+0xce>
 800ee78:	2301      	movs	r3, #1
 800ee7a:	e7bf      	b.n	800edfc <_printf_float+0xcc>
 800ee7c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ee80:	d9db      	bls.n	800ee3a <_printf_float+0x10a>
 800ee82:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800ee86:	d118      	bne.n	800eeba <_printf_float+0x18a>
 800ee88:	2900      	cmp	r1, #0
 800ee8a:	6863      	ldr	r3, [r4, #4]
 800ee8c:	dd0b      	ble.n	800eea6 <_printf_float+0x176>
 800ee8e:	6121      	str	r1, [r4, #16]
 800ee90:	b913      	cbnz	r3, 800ee98 <_printf_float+0x168>
 800ee92:	6822      	ldr	r2, [r4, #0]
 800ee94:	07d0      	lsls	r0, r2, #31
 800ee96:	d502      	bpl.n	800ee9e <_printf_float+0x16e>
 800ee98:	3301      	adds	r3, #1
 800ee9a:	440b      	add	r3, r1
 800ee9c:	6123      	str	r3, [r4, #16]
 800ee9e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800eea0:	f04f 0a00 	mov.w	sl, #0
 800eea4:	e7db      	b.n	800ee5e <_printf_float+0x12e>
 800eea6:	b913      	cbnz	r3, 800eeae <_printf_float+0x17e>
 800eea8:	6822      	ldr	r2, [r4, #0]
 800eeaa:	07d2      	lsls	r2, r2, #31
 800eeac:	d501      	bpl.n	800eeb2 <_printf_float+0x182>
 800eeae:	3302      	adds	r3, #2
 800eeb0:	e7f4      	b.n	800ee9c <_printf_float+0x16c>
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	e7f2      	b.n	800ee9c <_printf_float+0x16c>
 800eeb6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800eeba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eebc:	4299      	cmp	r1, r3
 800eebe:	db05      	blt.n	800eecc <_printf_float+0x19c>
 800eec0:	6823      	ldr	r3, [r4, #0]
 800eec2:	6121      	str	r1, [r4, #16]
 800eec4:	07d8      	lsls	r0, r3, #31
 800eec6:	d5ea      	bpl.n	800ee9e <_printf_float+0x16e>
 800eec8:	1c4b      	adds	r3, r1, #1
 800eeca:	e7e7      	b.n	800ee9c <_printf_float+0x16c>
 800eecc:	2900      	cmp	r1, #0
 800eece:	bfd4      	ite	le
 800eed0:	f1c1 0202 	rsble	r2, r1, #2
 800eed4:	2201      	movgt	r2, #1
 800eed6:	4413      	add	r3, r2
 800eed8:	e7e0      	b.n	800ee9c <_printf_float+0x16c>
 800eeda:	6823      	ldr	r3, [r4, #0]
 800eedc:	055a      	lsls	r2, r3, #21
 800eede:	d407      	bmi.n	800eef0 <_printf_float+0x1c0>
 800eee0:	6923      	ldr	r3, [r4, #16]
 800eee2:	4642      	mov	r2, r8
 800eee4:	4631      	mov	r1, r6
 800eee6:	4628      	mov	r0, r5
 800eee8:	47b8      	blx	r7
 800eeea:	3001      	adds	r0, #1
 800eeec:	d12a      	bne.n	800ef44 <_printf_float+0x214>
 800eeee:	e76b      	b.n	800edc8 <_printf_float+0x98>
 800eef0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800eef4:	f240 80e0 	bls.w	800f0b8 <_printf_float+0x388>
 800eef8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800eefc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ef00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef04:	d133      	bne.n	800ef6e <_printf_float+0x23e>
 800ef06:	4a38      	ldr	r2, [pc, #224]	@ (800efe8 <_printf_float+0x2b8>)
 800ef08:	2301      	movs	r3, #1
 800ef0a:	4631      	mov	r1, r6
 800ef0c:	4628      	mov	r0, r5
 800ef0e:	47b8      	blx	r7
 800ef10:	3001      	adds	r0, #1
 800ef12:	f43f af59 	beq.w	800edc8 <_printf_float+0x98>
 800ef16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ef1a:	4543      	cmp	r3, r8
 800ef1c:	db02      	blt.n	800ef24 <_printf_float+0x1f4>
 800ef1e:	6823      	ldr	r3, [r4, #0]
 800ef20:	07d8      	lsls	r0, r3, #31
 800ef22:	d50f      	bpl.n	800ef44 <_printf_float+0x214>
 800ef24:	9b05      	ldr	r3, [sp, #20]
 800ef26:	465a      	mov	r2, fp
 800ef28:	4631      	mov	r1, r6
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	47b8      	blx	r7
 800ef2e:	3001      	adds	r0, #1
 800ef30:	f43f af4a 	beq.w	800edc8 <_printf_float+0x98>
 800ef34:	f04f 0900 	mov.w	r9, #0
 800ef38:	f108 38ff 	add.w	r8, r8, #4294967295
 800ef3c:	f104 0a1a 	add.w	sl, r4, #26
 800ef40:	45c8      	cmp	r8, r9
 800ef42:	dc09      	bgt.n	800ef58 <_printf_float+0x228>
 800ef44:	6823      	ldr	r3, [r4, #0]
 800ef46:	079b      	lsls	r3, r3, #30
 800ef48:	f100 8107 	bmi.w	800f15a <_printf_float+0x42a>
 800ef4c:	68e0      	ldr	r0, [r4, #12]
 800ef4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef50:	4298      	cmp	r0, r3
 800ef52:	bfb8      	it	lt
 800ef54:	4618      	movlt	r0, r3
 800ef56:	e739      	b.n	800edcc <_printf_float+0x9c>
 800ef58:	2301      	movs	r3, #1
 800ef5a:	4652      	mov	r2, sl
 800ef5c:	4631      	mov	r1, r6
 800ef5e:	4628      	mov	r0, r5
 800ef60:	47b8      	blx	r7
 800ef62:	3001      	adds	r0, #1
 800ef64:	f43f af30 	beq.w	800edc8 <_printf_float+0x98>
 800ef68:	f109 0901 	add.w	r9, r9, #1
 800ef6c:	e7e8      	b.n	800ef40 <_printf_float+0x210>
 800ef6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	dc3b      	bgt.n	800efec <_printf_float+0x2bc>
 800ef74:	4a1c      	ldr	r2, [pc, #112]	@ (800efe8 <_printf_float+0x2b8>)
 800ef76:	2301      	movs	r3, #1
 800ef78:	4631      	mov	r1, r6
 800ef7a:	4628      	mov	r0, r5
 800ef7c:	47b8      	blx	r7
 800ef7e:	3001      	adds	r0, #1
 800ef80:	f43f af22 	beq.w	800edc8 <_printf_float+0x98>
 800ef84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ef88:	ea59 0303 	orrs.w	r3, r9, r3
 800ef8c:	d102      	bne.n	800ef94 <_printf_float+0x264>
 800ef8e:	6823      	ldr	r3, [r4, #0]
 800ef90:	07d9      	lsls	r1, r3, #31
 800ef92:	d5d7      	bpl.n	800ef44 <_printf_float+0x214>
 800ef94:	9b05      	ldr	r3, [sp, #20]
 800ef96:	465a      	mov	r2, fp
 800ef98:	4631      	mov	r1, r6
 800ef9a:	4628      	mov	r0, r5
 800ef9c:	47b8      	blx	r7
 800ef9e:	3001      	adds	r0, #1
 800efa0:	f43f af12 	beq.w	800edc8 <_printf_float+0x98>
 800efa4:	f04f 0a00 	mov.w	sl, #0
 800efa8:	f104 0b1a 	add.w	fp, r4, #26
 800efac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efae:	425b      	negs	r3, r3
 800efb0:	4553      	cmp	r3, sl
 800efb2:	dc01      	bgt.n	800efb8 <_printf_float+0x288>
 800efb4:	464b      	mov	r3, r9
 800efb6:	e794      	b.n	800eee2 <_printf_float+0x1b2>
 800efb8:	2301      	movs	r3, #1
 800efba:	465a      	mov	r2, fp
 800efbc:	4631      	mov	r1, r6
 800efbe:	4628      	mov	r0, r5
 800efc0:	47b8      	blx	r7
 800efc2:	3001      	adds	r0, #1
 800efc4:	f43f af00 	beq.w	800edc8 <_printf_float+0x98>
 800efc8:	f10a 0a01 	add.w	sl, sl, #1
 800efcc:	e7ee      	b.n	800efac <_printf_float+0x27c>
 800efce:	bf00      	nop
 800efd0:	ffffffff 	.word	0xffffffff
 800efd4:	7fefffff 	.word	0x7fefffff
 800efd8:	08013de0 	.word	0x08013de0
 800efdc:	08013de4 	.word	0x08013de4
 800efe0:	08013de8 	.word	0x08013de8
 800efe4:	08013dec 	.word	0x08013dec
 800efe8:	08013df0 	.word	0x08013df0
 800efec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800efee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eff2:	4553      	cmp	r3, sl
 800eff4:	bfa8      	it	ge
 800eff6:	4653      	movge	r3, sl
 800eff8:	2b00      	cmp	r3, #0
 800effa:	4699      	mov	r9, r3
 800effc:	dc37      	bgt.n	800f06e <_printf_float+0x33e>
 800effe:	2300      	movs	r3, #0
 800f000:	9307      	str	r3, [sp, #28]
 800f002:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f006:	f104 021a 	add.w	r2, r4, #26
 800f00a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f00c:	9907      	ldr	r1, [sp, #28]
 800f00e:	9306      	str	r3, [sp, #24]
 800f010:	eba3 0309 	sub.w	r3, r3, r9
 800f014:	428b      	cmp	r3, r1
 800f016:	dc31      	bgt.n	800f07c <_printf_float+0x34c>
 800f018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f01a:	459a      	cmp	sl, r3
 800f01c:	dc3b      	bgt.n	800f096 <_printf_float+0x366>
 800f01e:	6823      	ldr	r3, [r4, #0]
 800f020:	07da      	lsls	r2, r3, #31
 800f022:	d438      	bmi.n	800f096 <_printf_float+0x366>
 800f024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f026:	ebaa 0903 	sub.w	r9, sl, r3
 800f02a:	9b06      	ldr	r3, [sp, #24]
 800f02c:	ebaa 0303 	sub.w	r3, sl, r3
 800f030:	4599      	cmp	r9, r3
 800f032:	bfa8      	it	ge
 800f034:	4699      	movge	r9, r3
 800f036:	f1b9 0f00 	cmp.w	r9, #0
 800f03a:	dc34      	bgt.n	800f0a6 <_printf_float+0x376>
 800f03c:	f04f 0800 	mov.w	r8, #0
 800f040:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f044:	f104 0b1a 	add.w	fp, r4, #26
 800f048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f04a:	ebaa 0303 	sub.w	r3, sl, r3
 800f04e:	eba3 0309 	sub.w	r3, r3, r9
 800f052:	4543      	cmp	r3, r8
 800f054:	f77f af76 	ble.w	800ef44 <_printf_float+0x214>
 800f058:	2301      	movs	r3, #1
 800f05a:	465a      	mov	r2, fp
 800f05c:	4631      	mov	r1, r6
 800f05e:	4628      	mov	r0, r5
 800f060:	47b8      	blx	r7
 800f062:	3001      	adds	r0, #1
 800f064:	f43f aeb0 	beq.w	800edc8 <_printf_float+0x98>
 800f068:	f108 0801 	add.w	r8, r8, #1
 800f06c:	e7ec      	b.n	800f048 <_printf_float+0x318>
 800f06e:	4642      	mov	r2, r8
 800f070:	4631      	mov	r1, r6
 800f072:	4628      	mov	r0, r5
 800f074:	47b8      	blx	r7
 800f076:	3001      	adds	r0, #1
 800f078:	d1c1      	bne.n	800effe <_printf_float+0x2ce>
 800f07a:	e6a5      	b.n	800edc8 <_printf_float+0x98>
 800f07c:	2301      	movs	r3, #1
 800f07e:	4631      	mov	r1, r6
 800f080:	4628      	mov	r0, r5
 800f082:	9206      	str	r2, [sp, #24]
 800f084:	47b8      	blx	r7
 800f086:	3001      	adds	r0, #1
 800f088:	f43f ae9e 	beq.w	800edc8 <_printf_float+0x98>
 800f08c:	9b07      	ldr	r3, [sp, #28]
 800f08e:	9a06      	ldr	r2, [sp, #24]
 800f090:	3301      	adds	r3, #1
 800f092:	9307      	str	r3, [sp, #28]
 800f094:	e7b9      	b.n	800f00a <_printf_float+0x2da>
 800f096:	9b05      	ldr	r3, [sp, #20]
 800f098:	465a      	mov	r2, fp
 800f09a:	4631      	mov	r1, r6
 800f09c:	4628      	mov	r0, r5
 800f09e:	47b8      	blx	r7
 800f0a0:	3001      	adds	r0, #1
 800f0a2:	d1bf      	bne.n	800f024 <_printf_float+0x2f4>
 800f0a4:	e690      	b.n	800edc8 <_printf_float+0x98>
 800f0a6:	9a06      	ldr	r2, [sp, #24]
 800f0a8:	464b      	mov	r3, r9
 800f0aa:	4442      	add	r2, r8
 800f0ac:	4631      	mov	r1, r6
 800f0ae:	4628      	mov	r0, r5
 800f0b0:	47b8      	blx	r7
 800f0b2:	3001      	adds	r0, #1
 800f0b4:	d1c2      	bne.n	800f03c <_printf_float+0x30c>
 800f0b6:	e687      	b.n	800edc8 <_printf_float+0x98>
 800f0b8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f0bc:	f1b9 0f01 	cmp.w	r9, #1
 800f0c0:	dc01      	bgt.n	800f0c6 <_printf_float+0x396>
 800f0c2:	07db      	lsls	r3, r3, #31
 800f0c4:	d536      	bpl.n	800f134 <_printf_float+0x404>
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	4642      	mov	r2, r8
 800f0ca:	4631      	mov	r1, r6
 800f0cc:	4628      	mov	r0, r5
 800f0ce:	47b8      	blx	r7
 800f0d0:	3001      	adds	r0, #1
 800f0d2:	f43f ae79 	beq.w	800edc8 <_printf_float+0x98>
 800f0d6:	9b05      	ldr	r3, [sp, #20]
 800f0d8:	465a      	mov	r2, fp
 800f0da:	4631      	mov	r1, r6
 800f0dc:	4628      	mov	r0, r5
 800f0de:	47b8      	blx	r7
 800f0e0:	3001      	adds	r0, #1
 800f0e2:	f43f ae71 	beq.w	800edc8 <_printf_float+0x98>
 800f0e6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f0ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0f2:	f109 39ff 	add.w	r9, r9, #4294967295
 800f0f6:	d018      	beq.n	800f12a <_printf_float+0x3fa>
 800f0f8:	464b      	mov	r3, r9
 800f0fa:	f108 0201 	add.w	r2, r8, #1
 800f0fe:	4631      	mov	r1, r6
 800f100:	4628      	mov	r0, r5
 800f102:	47b8      	blx	r7
 800f104:	3001      	adds	r0, #1
 800f106:	d10c      	bne.n	800f122 <_printf_float+0x3f2>
 800f108:	e65e      	b.n	800edc8 <_printf_float+0x98>
 800f10a:	2301      	movs	r3, #1
 800f10c:	465a      	mov	r2, fp
 800f10e:	4631      	mov	r1, r6
 800f110:	4628      	mov	r0, r5
 800f112:	47b8      	blx	r7
 800f114:	3001      	adds	r0, #1
 800f116:	f43f ae57 	beq.w	800edc8 <_printf_float+0x98>
 800f11a:	f108 0801 	add.w	r8, r8, #1
 800f11e:	45c8      	cmp	r8, r9
 800f120:	dbf3      	blt.n	800f10a <_printf_float+0x3da>
 800f122:	4653      	mov	r3, sl
 800f124:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f128:	e6dc      	b.n	800eee4 <_printf_float+0x1b4>
 800f12a:	f04f 0800 	mov.w	r8, #0
 800f12e:	f104 0b1a 	add.w	fp, r4, #26
 800f132:	e7f4      	b.n	800f11e <_printf_float+0x3ee>
 800f134:	2301      	movs	r3, #1
 800f136:	4642      	mov	r2, r8
 800f138:	e7e1      	b.n	800f0fe <_printf_float+0x3ce>
 800f13a:	2301      	movs	r3, #1
 800f13c:	464a      	mov	r2, r9
 800f13e:	4631      	mov	r1, r6
 800f140:	4628      	mov	r0, r5
 800f142:	47b8      	blx	r7
 800f144:	3001      	adds	r0, #1
 800f146:	f43f ae3f 	beq.w	800edc8 <_printf_float+0x98>
 800f14a:	f108 0801 	add.w	r8, r8, #1
 800f14e:	68e3      	ldr	r3, [r4, #12]
 800f150:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f152:	1a5b      	subs	r3, r3, r1
 800f154:	4543      	cmp	r3, r8
 800f156:	dcf0      	bgt.n	800f13a <_printf_float+0x40a>
 800f158:	e6f8      	b.n	800ef4c <_printf_float+0x21c>
 800f15a:	f04f 0800 	mov.w	r8, #0
 800f15e:	f104 0919 	add.w	r9, r4, #25
 800f162:	e7f4      	b.n	800f14e <_printf_float+0x41e>

0800f164 <_printf_common>:
 800f164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f168:	4616      	mov	r6, r2
 800f16a:	4698      	mov	r8, r3
 800f16c:	688a      	ldr	r2, [r1, #8]
 800f16e:	690b      	ldr	r3, [r1, #16]
 800f170:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f174:	4293      	cmp	r3, r2
 800f176:	bfb8      	it	lt
 800f178:	4613      	movlt	r3, r2
 800f17a:	6033      	str	r3, [r6, #0]
 800f17c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f180:	4607      	mov	r7, r0
 800f182:	460c      	mov	r4, r1
 800f184:	b10a      	cbz	r2, 800f18a <_printf_common+0x26>
 800f186:	3301      	adds	r3, #1
 800f188:	6033      	str	r3, [r6, #0]
 800f18a:	6823      	ldr	r3, [r4, #0]
 800f18c:	0699      	lsls	r1, r3, #26
 800f18e:	bf42      	ittt	mi
 800f190:	6833      	ldrmi	r3, [r6, #0]
 800f192:	3302      	addmi	r3, #2
 800f194:	6033      	strmi	r3, [r6, #0]
 800f196:	6825      	ldr	r5, [r4, #0]
 800f198:	f015 0506 	ands.w	r5, r5, #6
 800f19c:	d106      	bne.n	800f1ac <_printf_common+0x48>
 800f19e:	f104 0a19 	add.w	sl, r4, #25
 800f1a2:	68e3      	ldr	r3, [r4, #12]
 800f1a4:	6832      	ldr	r2, [r6, #0]
 800f1a6:	1a9b      	subs	r3, r3, r2
 800f1a8:	42ab      	cmp	r3, r5
 800f1aa:	dc26      	bgt.n	800f1fa <_printf_common+0x96>
 800f1ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f1b0:	6822      	ldr	r2, [r4, #0]
 800f1b2:	3b00      	subs	r3, #0
 800f1b4:	bf18      	it	ne
 800f1b6:	2301      	movne	r3, #1
 800f1b8:	0692      	lsls	r2, r2, #26
 800f1ba:	d42b      	bmi.n	800f214 <_printf_common+0xb0>
 800f1bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f1c0:	4641      	mov	r1, r8
 800f1c2:	4638      	mov	r0, r7
 800f1c4:	47c8      	blx	r9
 800f1c6:	3001      	adds	r0, #1
 800f1c8:	d01e      	beq.n	800f208 <_printf_common+0xa4>
 800f1ca:	6823      	ldr	r3, [r4, #0]
 800f1cc:	6922      	ldr	r2, [r4, #16]
 800f1ce:	f003 0306 	and.w	r3, r3, #6
 800f1d2:	2b04      	cmp	r3, #4
 800f1d4:	bf02      	ittt	eq
 800f1d6:	68e5      	ldreq	r5, [r4, #12]
 800f1d8:	6833      	ldreq	r3, [r6, #0]
 800f1da:	1aed      	subeq	r5, r5, r3
 800f1dc:	68a3      	ldr	r3, [r4, #8]
 800f1de:	bf0c      	ite	eq
 800f1e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f1e4:	2500      	movne	r5, #0
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	bfc4      	itt	gt
 800f1ea:	1a9b      	subgt	r3, r3, r2
 800f1ec:	18ed      	addgt	r5, r5, r3
 800f1ee:	2600      	movs	r6, #0
 800f1f0:	341a      	adds	r4, #26
 800f1f2:	42b5      	cmp	r5, r6
 800f1f4:	d11a      	bne.n	800f22c <_printf_common+0xc8>
 800f1f6:	2000      	movs	r0, #0
 800f1f8:	e008      	b.n	800f20c <_printf_common+0xa8>
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	4652      	mov	r2, sl
 800f1fe:	4641      	mov	r1, r8
 800f200:	4638      	mov	r0, r7
 800f202:	47c8      	blx	r9
 800f204:	3001      	adds	r0, #1
 800f206:	d103      	bne.n	800f210 <_printf_common+0xac>
 800f208:	f04f 30ff 	mov.w	r0, #4294967295
 800f20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f210:	3501      	adds	r5, #1
 800f212:	e7c6      	b.n	800f1a2 <_printf_common+0x3e>
 800f214:	18e1      	adds	r1, r4, r3
 800f216:	1c5a      	adds	r2, r3, #1
 800f218:	2030      	movs	r0, #48	@ 0x30
 800f21a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f21e:	4422      	add	r2, r4
 800f220:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f224:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f228:	3302      	adds	r3, #2
 800f22a:	e7c7      	b.n	800f1bc <_printf_common+0x58>
 800f22c:	2301      	movs	r3, #1
 800f22e:	4622      	mov	r2, r4
 800f230:	4641      	mov	r1, r8
 800f232:	4638      	mov	r0, r7
 800f234:	47c8      	blx	r9
 800f236:	3001      	adds	r0, #1
 800f238:	d0e6      	beq.n	800f208 <_printf_common+0xa4>
 800f23a:	3601      	adds	r6, #1
 800f23c:	e7d9      	b.n	800f1f2 <_printf_common+0x8e>
	...

0800f240 <_printf_i>:
 800f240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f244:	7e0f      	ldrb	r7, [r1, #24]
 800f246:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f248:	2f78      	cmp	r7, #120	@ 0x78
 800f24a:	4691      	mov	r9, r2
 800f24c:	4680      	mov	r8, r0
 800f24e:	460c      	mov	r4, r1
 800f250:	469a      	mov	sl, r3
 800f252:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f256:	d807      	bhi.n	800f268 <_printf_i+0x28>
 800f258:	2f62      	cmp	r7, #98	@ 0x62
 800f25a:	d80a      	bhi.n	800f272 <_printf_i+0x32>
 800f25c:	2f00      	cmp	r7, #0
 800f25e:	f000 80d2 	beq.w	800f406 <_printf_i+0x1c6>
 800f262:	2f58      	cmp	r7, #88	@ 0x58
 800f264:	f000 80b9 	beq.w	800f3da <_printf_i+0x19a>
 800f268:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f26c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f270:	e03a      	b.n	800f2e8 <_printf_i+0xa8>
 800f272:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f276:	2b15      	cmp	r3, #21
 800f278:	d8f6      	bhi.n	800f268 <_printf_i+0x28>
 800f27a:	a101      	add	r1, pc, #4	@ (adr r1, 800f280 <_printf_i+0x40>)
 800f27c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f280:	0800f2d9 	.word	0x0800f2d9
 800f284:	0800f2ed 	.word	0x0800f2ed
 800f288:	0800f269 	.word	0x0800f269
 800f28c:	0800f269 	.word	0x0800f269
 800f290:	0800f269 	.word	0x0800f269
 800f294:	0800f269 	.word	0x0800f269
 800f298:	0800f2ed 	.word	0x0800f2ed
 800f29c:	0800f269 	.word	0x0800f269
 800f2a0:	0800f269 	.word	0x0800f269
 800f2a4:	0800f269 	.word	0x0800f269
 800f2a8:	0800f269 	.word	0x0800f269
 800f2ac:	0800f3ed 	.word	0x0800f3ed
 800f2b0:	0800f317 	.word	0x0800f317
 800f2b4:	0800f3a7 	.word	0x0800f3a7
 800f2b8:	0800f269 	.word	0x0800f269
 800f2bc:	0800f269 	.word	0x0800f269
 800f2c0:	0800f40f 	.word	0x0800f40f
 800f2c4:	0800f269 	.word	0x0800f269
 800f2c8:	0800f317 	.word	0x0800f317
 800f2cc:	0800f269 	.word	0x0800f269
 800f2d0:	0800f269 	.word	0x0800f269
 800f2d4:	0800f3af 	.word	0x0800f3af
 800f2d8:	6833      	ldr	r3, [r6, #0]
 800f2da:	1d1a      	adds	r2, r3, #4
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	6032      	str	r2, [r6, #0]
 800f2e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f2e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	e09d      	b.n	800f428 <_printf_i+0x1e8>
 800f2ec:	6833      	ldr	r3, [r6, #0]
 800f2ee:	6820      	ldr	r0, [r4, #0]
 800f2f0:	1d19      	adds	r1, r3, #4
 800f2f2:	6031      	str	r1, [r6, #0]
 800f2f4:	0606      	lsls	r6, r0, #24
 800f2f6:	d501      	bpl.n	800f2fc <_printf_i+0xbc>
 800f2f8:	681d      	ldr	r5, [r3, #0]
 800f2fa:	e003      	b.n	800f304 <_printf_i+0xc4>
 800f2fc:	0645      	lsls	r5, r0, #25
 800f2fe:	d5fb      	bpl.n	800f2f8 <_printf_i+0xb8>
 800f300:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f304:	2d00      	cmp	r5, #0
 800f306:	da03      	bge.n	800f310 <_printf_i+0xd0>
 800f308:	232d      	movs	r3, #45	@ 0x2d
 800f30a:	426d      	negs	r5, r5
 800f30c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f310:	4859      	ldr	r0, [pc, #356]	@ (800f478 <_printf_i+0x238>)
 800f312:	230a      	movs	r3, #10
 800f314:	e011      	b.n	800f33a <_printf_i+0xfa>
 800f316:	6821      	ldr	r1, [r4, #0]
 800f318:	6833      	ldr	r3, [r6, #0]
 800f31a:	0608      	lsls	r0, r1, #24
 800f31c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f320:	d402      	bmi.n	800f328 <_printf_i+0xe8>
 800f322:	0649      	lsls	r1, r1, #25
 800f324:	bf48      	it	mi
 800f326:	b2ad      	uxthmi	r5, r5
 800f328:	2f6f      	cmp	r7, #111	@ 0x6f
 800f32a:	4853      	ldr	r0, [pc, #332]	@ (800f478 <_printf_i+0x238>)
 800f32c:	6033      	str	r3, [r6, #0]
 800f32e:	bf14      	ite	ne
 800f330:	230a      	movne	r3, #10
 800f332:	2308      	moveq	r3, #8
 800f334:	2100      	movs	r1, #0
 800f336:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f33a:	6866      	ldr	r6, [r4, #4]
 800f33c:	60a6      	str	r6, [r4, #8]
 800f33e:	2e00      	cmp	r6, #0
 800f340:	bfa2      	ittt	ge
 800f342:	6821      	ldrge	r1, [r4, #0]
 800f344:	f021 0104 	bicge.w	r1, r1, #4
 800f348:	6021      	strge	r1, [r4, #0]
 800f34a:	b90d      	cbnz	r5, 800f350 <_printf_i+0x110>
 800f34c:	2e00      	cmp	r6, #0
 800f34e:	d04b      	beq.n	800f3e8 <_printf_i+0x1a8>
 800f350:	4616      	mov	r6, r2
 800f352:	fbb5 f1f3 	udiv	r1, r5, r3
 800f356:	fb03 5711 	mls	r7, r3, r1, r5
 800f35a:	5dc7      	ldrb	r7, [r0, r7]
 800f35c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f360:	462f      	mov	r7, r5
 800f362:	42bb      	cmp	r3, r7
 800f364:	460d      	mov	r5, r1
 800f366:	d9f4      	bls.n	800f352 <_printf_i+0x112>
 800f368:	2b08      	cmp	r3, #8
 800f36a:	d10b      	bne.n	800f384 <_printf_i+0x144>
 800f36c:	6823      	ldr	r3, [r4, #0]
 800f36e:	07df      	lsls	r7, r3, #31
 800f370:	d508      	bpl.n	800f384 <_printf_i+0x144>
 800f372:	6923      	ldr	r3, [r4, #16]
 800f374:	6861      	ldr	r1, [r4, #4]
 800f376:	4299      	cmp	r1, r3
 800f378:	bfde      	ittt	le
 800f37a:	2330      	movle	r3, #48	@ 0x30
 800f37c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f380:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f384:	1b92      	subs	r2, r2, r6
 800f386:	6122      	str	r2, [r4, #16]
 800f388:	f8cd a000 	str.w	sl, [sp]
 800f38c:	464b      	mov	r3, r9
 800f38e:	aa03      	add	r2, sp, #12
 800f390:	4621      	mov	r1, r4
 800f392:	4640      	mov	r0, r8
 800f394:	f7ff fee6 	bl	800f164 <_printf_common>
 800f398:	3001      	adds	r0, #1
 800f39a:	d14a      	bne.n	800f432 <_printf_i+0x1f2>
 800f39c:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a0:	b004      	add	sp, #16
 800f3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3a6:	6823      	ldr	r3, [r4, #0]
 800f3a8:	f043 0320 	orr.w	r3, r3, #32
 800f3ac:	6023      	str	r3, [r4, #0]
 800f3ae:	4833      	ldr	r0, [pc, #204]	@ (800f47c <_printf_i+0x23c>)
 800f3b0:	2778      	movs	r7, #120	@ 0x78
 800f3b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f3b6:	6823      	ldr	r3, [r4, #0]
 800f3b8:	6831      	ldr	r1, [r6, #0]
 800f3ba:	061f      	lsls	r7, r3, #24
 800f3bc:	f851 5b04 	ldr.w	r5, [r1], #4
 800f3c0:	d402      	bmi.n	800f3c8 <_printf_i+0x188>
 800f3c2:	065f      	lsls	r7, r3, #25
 800f3c4:	bf48      	it	mi
 800f3c6:	b2ad      	uxthmi	r5, r5
 800f3c8:	6031      	str	r1, [r6, #0]
 800f3ca:	07d9      	lsls	r1, r3, #31
 800f3cc:	bf44      	itt	mi
 800f3ce:	f043 0320 	orrmi.w	r3, r3, #32
 800f3d2:	6023      	strmi	r3, [r4, #0]
 800f3d4:	b11d      	cbz	r5, 800f3de <_printf_i+0x19e>
 800f3d6:	2310      	movs	r3, #16
 800f3d8:	e7ac      	b.n	800f334 <_printf_i+0xf4>
 800f3da:	4827      	ldr	r0, [pc, #156]	@ (800f478 <_printf_i+0x238>)
 800f3dc:	e7e9      	b.n	800f3b2 <_printf_i+0x172>
 800f3de:	6823      	ldr	r3, [r4, #0]
 800f3e0:	f023 0320 	bic.w	r3, r3, #32
 800f3e4:	6023      	str	r3, [r4, #0]
 800f3e6:	e7f6      	b.n	800f3d6 <_printf_i+0x196>
 800f3e8:	4616      	mov	r6, r2
 800f3ea:	e7bd      	b.n	800f368 <_printf_i+0x128>
 800f3ec:	6833      	ldr	r3, [r6, #0]
 800f3ee:	6825      	ldr	r5, [r4, #0]
 800f3f0:	6961      	ldr	r1, [r4, #20]
 800f3f2:	1d18      	adds	r0, r3, #4
 800f3f4:	6030      	str	r0, [r6, #0]
 800f3f6:	062e      	lsls	r6, r5, #24
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	d501      	bpl.n	800f400 <_printf_i+0x1c0>
 800f3fc:	6019      	str	r1, [r3, #0]
 800f3fe:	e002      	b.n	800f406 <_printf_i+0x1c6>
 800f400:	0668      	lsls	r0, r5, #25
 800f402:	d5fb      	bpl.n	800f3fc <_printf_i+0x1bc>
 800f404:	8019      	strh	r1, [r3, #0]
 800f406:	2300      	movs	r3, #0
 800f408:	6123      	str	r3, [r4, #16]
 800f40a:	4616      	mov	r6, r2
 800f40c:	e7bc      	b.n	800f388 <_printf_i+0x148>
 800f40e:	6833      	ldr	r3, [r6, #0]
 800f410:	1d1a      	adds	r2, r3, #4
 800f412:	6032      	str	r2, [r6, #0]
 800f414:	681e      	ldr	r6, [r3, #0]
 800f416:	6862      	ldr	r2, [r4, #4]
 800f418:	2100      	movs	r1, #0
 800f41a:	4630      	mov	r0, r6
 800f41c:	f7f0 ff60 	bl	80002e0 <memchr>
 800f420:	b108      	cbz	r0, 800f426 <_printf_i+0x1e6>
 800f422:	1b80      	subs	r0, r0, r6
 800f424:	6060      	str	r0, [r4, #4]
 800f426:	6863      	ldr	r3, [r4, #4]
 800f428:	6123      	str	r3, [r4, #16]
 800f42a:	2300      	movs	r3, #0
 800f42c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f430:	e7aa      	b.n	800f388 <_printf_i+0x148>
 800f432:	6923      	ldr	r3, [r4, #16]
 800f434:	4632      	mov	r2, r6
 800f436:	4649      	mov	r1, r9
 800f438:	4640      	mov	r0, r8
 800f43a:	47d0      	blx	sl
 800f43c:	3001      	adds	r0, #1
 800f43e:	d0ad      	beq.n	800f39c <_printf_i+0x15c>
 800f440:	6823      	ldr	r3, [r4, #0]
 800f442:	079b      	lsls	r3, r3, #30
 800f444:	d413      	bmi.n	800f46e <_printf_i+0x22e>
 800f446:	68e0      	ldr	r0, [r4, #12]
 800f448:	9b03      	ldr	r3, [sp, #12]
 800f44a:	4298      	cmp	r0, r3
 800f44c:	bfb8      	it	lt
 800f44e:	4618      	movlt	r0, r3
 800f450:	e7a6      	b.n	800f3a0 <_printf_i+0x160>
 800f452:	2301      	movs	r3, #1
 800f454:	4632      	mov	r2, r6
 800f456:	4649      	mov	r1, r9
 800f458:	4640      	mov	r0, r8
 800f45a:	47d0      	blx	sl
 800f45c:	3001      	adds	r0, #1
 800f45e:	d09d      	beq.n	800f39c <_printf_i+0x15c>
 800f460:	3501      	adds	r5, #1
 800f462:	68e3      	ldr	r3, [r4, #12]
 800f464:	9903      	ldr	r1, [sp, #12]
 800f466:	1a5b      	subs	r3, r3, r1
 800f468:	42ab      	cmp	r3, r5
 800f46a:	dcf2      	bgt.n	800f452 <_printf_i+0x212>
 800f46c:	e7eb      	b.n	800f446 <_printf_i+0x206>
 800f46e:	2500      	movs	r5, #0
 800f470:	f104 0619 	add.w	r6, r4, #25
 800f474:	e7f5      	b.n	800f462 <_printf_i+0x222>
 800f476:	bf00      	nop
 800f478:	08013df2 	.word	0x08013df2
 800f47c:	08013e03 	.word	0x08013e03

0800f480 <std>:
 800f480:	2300      	movs	r3, #0
 800f482:	b510      	push	{r4, lr}
 800f484:	4604      	mov	r4, r0
 800f486:	e9c0 3300 	strd	r3, r3, [r0]
 800f48a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f48e:	6083      	str	r3, [r0, #8]
 800f490:	8181      	strh	r1, [r0, #12]
 800f492:	6643      	str	r3, [r0, #100]	@ 0x64
 800f494:	81c2      	strh	r2, [r0, #14]
 800f496:	6183      	str	r3, [r0, #24]
 800f498:	4619      	mov	r1, r3
 800f49a:	2208      	movs	r2, #8
 800f49c:	305c      	adds	r0, #92	@ 0x5c
 800f49e:	f000 f928 	bl	800f6f2 <memset>
 800f4a2:	4b0d      	ldr	r3, [pc, #52]	@ (800f4d8 <std+0x58>)
 800f4a4:	6263      	str	r3, [r4, #36]	@ 0x24
 800f4a6:	4b0d      	ldr	r3, [pc, #52]	@ (800f4dc <std+0x5c>)
 800f4a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f4aa:	4b0d      	ldr	r3, [pc, #52]	@ (800f4e0 <std+0x60>)
 800f4ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f4ae:	4b0d      	ldr	r3, [pc, #52]	@ (800f4e4 <std+0x64>)
 800f4b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800f4b2:	4b0d      	ldr	r3, [pc, #52]	@ (800f4e8 <std+0x68>)
 800f4b4:	6224      	str	r4, [r4, #32]
 800f4b6:	429c      	cmp	r4, r3
 800f4b8:	d006      	beq.n	800f4c8 <std+0x48>
 800f4ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f4be:	4294      	cmp	r4, r2
 800f4c0:	d002      	beq.n	800f4c8 <std+0x48>
 800f4c2:	33d0      	adds	r3, #208	@ 0xd0
 800f4c4:	429c      	cmp	r4, r3
 800f4c6:	d105      	bne.n	800f4d4 <std+0x54>
 800f4c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f4cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4d0:	f000 b99c 	b.w	800f80c <__retarget_lock_init_recursive>
 800f4d4:	bd10      	pop	{r4, pc}
 800f4d6:	bf00      	nop
 800f4d8:	0800f66d 	.word	0x0800f66d
 800f4dc:	0800f68f 	.word	0x0800f68f
 800f4e0:	0800f6c7 	.word	0x0800f6c7
 800f4e4:	0800f6eb 	.word	0x0800f6eb
 800f4e8:	24005f9c 	.word	0x24005f9c

0800f4ec <stdio_exit_handler>:
 800f4ec:	4a02      	ldr	r2, [pc, #8]	@ (800f4f8 <stdio_exit_handler+0xc>)
 800f4ee:	4903      	ldr	r1, [pc, #12]	@ (800f4fc <stdio_exit_handler+0x10>)
 800f4f0:	4803      	ldr	r0, [pc, #12]	@ (800f500 <stdio_exit_handler+0x14>)
 800f4f2:	f000 b869 	b.w	800f5c8 <_fwalk_sglue>
 800f4f6:	bf00      	nop
 800f4f8:	2400003c 	.word	0x2400003c
 800f4fc:	08010f3d 	.word	0x08010f3d
 800f500:	2400004c 	.word	0x2400004c

0800f504 <cleanup_stdio>:
 800f504:	6841      	ldr	r1, [r0, #4]
 800f506:	4b0c      	ldr	r3, [pc, #48]	@ (800f538 <cleanup_stdio+0x34>)
 800f508:	4299      	cmp	r1, r3
 800f50a:	b510      	push	{r4, lr}
 800f50c:	4604      	mov	r4, r0
 800f50e:	d001      	beq.n	800f514 <cleanup_stdio+0x10>
 800f510:	f001 fd14 	bl	8010f3c <_fflush_r>
 800f514:	68a1      	ldr	r1, [r4, #8]
 800f516:	4b09      	ldr	r3, [pc, #36]	@ (800f53c <cleanup_stdio+0x38>)
 800f518:	4299      	cmp	r1, r3
 800f51a:	d002      	beq.n	800f522 <cleanup_stdio+0x1e>
 800f51c:	4620      	mov	r0, r4
 800f51e:	f001 fd0d 	bl	8010f3c <_fflush_r>
 800f522:	68e1      	ldr	r1, [r4, #12]
 800f524:	4b06      	ldr	r3, [pc, #24]	@ (800f540 <cleanup_stdio+0x3c>)
 800f526:	4299      	cmp	r1, r3
 800f528:	d004      	beq.n	800f534 <cleanup_stdio+0x30>
 800f52a:	4620      	mov	r0, r4
 800f52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f530:	f001 bd04 	b.w	8010f3c <_fflush_r>
 800f534:	bd10      	pop	{r4, pc}
 800f536:	bf00      	nop
 800f538:	24005f9c 	.word	0x24005f9c
 800f53c:	24006004 	.word	0x24006004
 800f540:	2400606c 	.word	0x2400606c

0800f544 <global_stdio_init.part.0>:
 800f544:	b510      	push	{r4, lr}
 800f546:	4b0b      	ldr	r3, [pc, #44]	@ (800f574 <global_stdio_init.part.0+0x30>)
 800f548:	4c0b      	ldr	r4, [pc, #44]	@ (800f578 <global_stdio_init.part.0+0x34>)
 800f54a:	4a0c      	ldr	r2, [pc, #48]	@ (800f57c <global_stdio_init.part.0+0x38>)
 800f54c:	601a      	str	r2, [r3, #0]
 800f54e:	4620      	mov	r0, r4
 800f550:	2200      	movs	r2, #0
 800f552:	2104      	movs	r1, #4
 800f554:	f7ff ff94 	bl	800f480 <std>
 800f558:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f55c:	2201      	movs	r2, #1
 800f55e:	2109      	movs	r1, #9
 800f560:	f7ff ff8e 	bl	800f480 <std>
 800f564:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f568:	2202      	movs	r2, #2
 800f56a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f56e:	2112      	movs	r1, #18
 800f570:	f7ff bf86 	b.w	800f480 <std>
 800f574:	240060d4 	.word	0x240060d4
 800f578:	24005f9c 	.word	0x24005f9c
 800f57c:	0800f4ed 	.word	0x0800f4ed

0800f580 <__sfp_lock_acquire>:
 800f580:	4801      	ldr	r0, [pc, #4]	@ (800f588 <__sfp_lock_acquire+0x8>)
 800f582:	f000 b944 	b.w	800f80e <__retarget_lock_acquire_recursive>
 800f586:	bf00      	nop
 800f588:	240060dd 	.word	0x240060dd

0800f58c <__sfp_lock_release>:
 800f58c:	4801      	ldr	r0, [pc, #4]	@ (800f594 <__sfp_lock_release+0x8>)
 800f58e:	f000 b93f 	b.w	800f810 <__retarget_lock_release_recursive>
 800f592:	bf00      	nop
 800f594:	240060dd 	.word	0x240060dd

0800f598 <__sinit>:
 800f598:	b510      	push	{r4, lr}
 800f59a:	4604      	mov	r4, r0
 800f59c:	f7ff fff0 	bl	800f580 <__sfp_lock_acquire>
 800f5a0:	6a23      	ldr	r3, [r4, #32]
 800f5a2:	b11b      	cbz	r3, 800f5ac <__sinit+0x14>
 800f5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5a8:	f7ff bff0 	b.w	800f58c <__sfp_lock_release>
 800f5ac:	4b04      	ldr	r3, [pc, #16]	@ (800f5c0 <__sinit+0x28>)
 800f5ae:	6223      	str	r3, [r4, #32]
 800f5b0:	4b04      	ldr	r3, [pc, #16]	@ (800f5c4 <__sinit+0x2c>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d1f5      	bne.n	800f5a4 <__sinit+0xc>
 800f5b8:	f7ff ffc4 	bl	800f544 <global_stdio_init.part.0>
 800f5bc:	e7f2      	b.n	800f5a4 <__sinit+0xc>
 800f5be:	bf00      	nop
 800f5c0:	0800f505 	.word	0x0800f505
 800f5c4:	240060d4 	.word	0x240060d4

0800f5c8 <_fwalk_sglue>:
 800f5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5cc:	4607      	mov	r7, r0
 800f5ce:	4688      	mov	r8, r1
 800f5d0:	4614      	mov	r4, r2
 800f5d2:	2600      	movs	r6, #0
 800f5d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f5d8:	f1b9 0901 	subs.w	r9, r9, #1
 800f5dc:	d505      	bpl.n	800f5ea <_fwalk_sglue+0x22>
 800f5de:	6824      	ldr	r4, [r4, #0]
 800f5e0:	2c00      	cmp	r4, #0
 800f5e2:	d1f7      	bne.n	800f5d4 <_fwalk_sglue+0xc>
 800f5e4:	4630      	mov	r0, r6
 800f5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5ea:	89ab      	ldrh	r3, [r5, #12]
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	d907      	bls.n	800f600 <_fwalk_sglue+0x38>
 800f5f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	d003      	beq.n	800f600 <_fwalk_sglue+0x38>
 800f5f8:	4629      	mov	r1, r5
 800f5fa:	4638      	mov	r0, r7
 800f5fc:	47c0      	blx	r8
 800f5fe:	4306      	orrs	r6, r0
 800f600:	3568      	adds	r5, #104	@ 0x68
 800f602:	e7e9      	b.n	800f5d8 <_fwalk_sglue+0x10>

0800f604 <sniprintf>:
 800f604:	b40c      	push	{r2, r3}
 800f606:	b530      	push	{r4, r5, lr}
 800f608:	4b17      	ldr	r3, [pc, #92]	@ (800f668 <sniprintf+0x64>)
 800f60a:	1e0c      	subs	r4, r1, #0
 800f60c:	681d      	ldr	r5, [r3, #0]
 800f60e:	b09d      	sub	sp, #116	@ 0x74
 800f610:	da08      	bge.n	800f624 <sniprintf+0x20>
 800f612:	238b      	movs	r3, #139	@ 0x8b
 800f614:	602b      	str	r3, [r5, #0]
 800f616:	f04f 30ff 	mov.w	r0, #4294967295
 800f61a:	b01d      	add	sp, #116	@ 0x74
 800f61c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f620:	b002      	add	sp, #8
 800f622:	4770      	bx	lr
 800f624:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f628:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f62c:	bf14      	ite	ne
 800f62e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f632:	4623      	moveq	r3, r4
 800f634:	9304      	str	r3, [sp, #16]
 800f636:	9307      	str	r3, [sp, #28]
 800f638:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f63c:	9002      	str	r0, [sp, #8]
 800f63e:	9006      	str	r0, [sp, #24]
 800f640:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f644:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f646:	ab21      	add	r3, sp, #132	@ 0x84
 800f648:	a902      	add	r1, sp, #8
 800f64a:	4628      	mov	r0, r5
 800f64c:	9301      	str	r3, [sp, #4]
 800f64e:	f001 faf5 	bl	8010c3c <_svfiprintf_r>
 800f652:	1c43      	adds	r3, r0, #1
 800f654:	bfbc      	itt	lt
 800f656:	238b      	movlt	r3, #139	@ 0x8b
 800f658:	602b      	strlt	r3, [r5, #0]
 800f65a:	2c00      	cmp	r4, #0
 800f65c:	d0dd      	beq.n	800f61a <sniprintf+0x16>
 800f65e:	9b02      	ldr	r3, [sp, #8]
 800f660:	2200      	movs	r2, #0
 800f662:	701a      	strb	r2, [r3, #0]
 800f664:	e7d9      	b.n	800f61a <sniprintf+0x16>
 800f666:	bf00      	nop
 800f668:	24000048 	.word	0x24000048

0800f66c <__sread>:
 800f66c:	b510      	push	{r4, lr}
 800f66e:	460c      	mov	r4, r1
 800f670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f674:	f000 f86c 	bl	800f750 <_read_r>
 800f678:	2800      	cmp	r0, #0
 800f67a:	bfab      	itete	ge
 800f67c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f67e:	89a3      	ldrhlt	r3, [r4, #12]
 800f680:	181b      	addge	r3, r3, r0
 800f682:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f686:	bfac      	ite	ge
 800f688:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f68a:	81a3      	strhlt	r3, [r4, #12]
 800f68c:	bd10      	pop	{r4, pc}

0800f68e <__swrite>:
 800f68e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f692:	461f      	mov	r7, r3
 800f694:	898b      	ldrh	r3, [r1, #12]
 800f696:	05db      	lsls	r3, r3, #23
 800f698:	4605      	mov	r5, r0
 800f69a:	460c      	mov	r4, r1
 800f69c:	4616      	mov	r6, r2
 800f69e:	d505      	bpl.n	800f6ac <__swrite+0x1e>
 800f6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6a4:	2302      	movs	r3, #2
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	f000 f840 	bl	800f72c <_lseek_r>
 800f6ac:	89a3      	ldrh	r3, [r4, #12]
 800f6ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f6b6:	81a3      	strh	r3, [r4, #12]
 800f6b8:	4632      	mov	r2, r6
 800f6ba:	463b      	mov	r3, r7
 800f6bc:	4628      	mov	r0, r5
 800f6be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c2:	f000 b867 	b.w	800f794 <_write_r>

0800f6c6 <__sseek>:
 800f6c6:	b510      	push	{r4, lr}
 800f6c8:	460c      	mov	r4, r1
 800f6ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ce:	f000 f82d 	bl	800f72c <_lseek_r>
 800f6d2:	1c43      	adds	r3, r0, #1
 800f6d4:	89a3      	ldrh	r3, [r4, #12]
 800f6d6:	bf15      	itete	ne
 800f6d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f6da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f6de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f6e2:	81a3      	strheq	r3, [r4, #12]
 800f6e4:	bf18      	it	ne
 800f6e6:	81a3      	strhne	r3, [r4, #12]
 800f6e8:	bd10      	pop	{r4, pc}

0800f6ea <__sclose>:
 800f6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ee:	f000 b80d 	b.w	800f70c <_close_r>

0800f6f2 <memset>:
 800f6f2:	4402      	add	r2, r0
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d100      	bne.n	800f6fc <memset+0xa>
 800f6fa:	4770      	bx	lr
 800f6fc:	f803 1b01 	strb.w	r1, [r3], #1
 800f700:	e7f9      	b.n	800f6f6 <memset+0x4>
	...

0800f704 <_localeconv_r>:
 800f704:	4800      	ldr	r0, [pc, #0]	@ (800f708 <_localeconv_r+0x4>)
 800f706:	4770      	bx	lr
 800f708:	24000188 	.word	0x24000188

0800f70c <_close_r>:
 800f70c:	b538      	push	{r3, r4, r5, lr}
 800f70e:	4d06      	ldr	r5, [pc, #24]	@ (800f728 <_close_r+0x1c>)
 800f710:	2300      	movs	r3, #0
 800f712:	4604      	mov	r4, r0
 800f714:	4608      	mov	r0, r1
 800f716:	602b      	str	r3, [r5, #0]
 800f718:	f7f1 fe1a 	bl	8001350 <_close>
 800f71c:	1c43      	adds	r3, r0, #1
 800f71e:	d102      	bne.n	800f726 <_close_r+0x1a>
 800f720:	682b      	ldr	r3, [r5, #0]
 800f722:	b103      	cbz	r3, 800f726 <_close_r+0x1a>
 800f724:	6023      	str	r3, [r4, #0]
 800f726:	bd38      	pop	{r3, r4, r5, pc}
 800f728:	240060d8 	.word	0x240060d8

0800f72c <_lseek_r>:
 800f72c:	b538      	push	{r3, r4, r5, lr}
 800f72e:	4d07      	ldr	r5, [pc, #28]	@ (800f74c <_lseek_r+0x20>)
 800f730:	4604      	mov	r4, r0
 800f732:	4608      	mov	r0, r1
 800f734:	4611      	mov	r1, r2
 800f736:	2200      	movs	r2, #0
 800f738:	602a      	str	r2, [r5, #0]
 800f73a:	461a      	mov	r2, r3
 800f73c:	f7f1 fe2f 	bl	800139e <_lseek>
 800f740:	1c43      	adds	r3, r0, #1
 800f742:	d102      	bne.n	800f74a <_lseek_r+0x1e>
 800f744:	682b      	ldr	r3, [r5, #0]
 800f746:	b103      	cbz	r3, 800f74a <_lseek_r+0x1e>
 800f748:	6023      	str	r3, [r4, #0]
 800f74a:	bd38      	pop	{r3, r4, r5, pc}
 800f74c:	240060d8 	.word	0x240060d8

0800f750 <_read_r>:
 800f750:	b538      	push	{r3, r4, r5, lr}
 800f752:	4d07      	ldr	r5, [pc, #28]	@ (800f770 <_read_r+0x20>)
 800f754:	4604      	mov	r4, r0
 800f756:	4608      	mov	r0, r1
 800f758:	4611      	mov	r1, r2
 800f75a:	2200      	movs	r2, #0
 800f75c:	602a      	str	r2, [r5, #0]
 800f75e:	461a      	mov	r2, r3
 800f760:	f7f1 fdbd 	bl	80012de <_read>
 800f764:	1c43      	adds	r3, r0, #1
 800f766:	d102      	bne.n	800f76e <_read_r+0x1e>
 800f768:	682b      	ldr	r3, [r5, #0]
 800f76a:	b103      	cbz	r3, 800f76e <_read_r+0x1e>
 800f76c:	6023      	str	r3, [r4, #0]
 800f76e:	bd38      	pop	{r3, r4, r5, pc}
 800f770:	240060d8 	.word	0x240060d8

0800f774 <_sbrk_r>:
 800f774:	b538      	push	{r3, r4, r5, lr}
 800f776:	4d06      	ldr	r5, [pc, #24]	@ (800f790 <_sbrk_r+0x1c>)
 800f778:	2300      	movs	r3, #0
 800f77a:	4604      	mov	r4, r0
 800f77c:	4608      	mov	r0, r1
 800f77e:	602b      	str	r3, [r5, #0]
 800f780:	f7f1 fe1a 	bl	80013b8 <_sbrk>
 800f784:	1c43      	adds	r3, r0, #1
 800f786:	d102      	bne.n	800f78e <_sbrk_r+0x1a>
 800f788:	682b      	ldr	r3, [r5, #0]
 800f78a:	b103      	cbz	r3, 800f78e <_sbrk_r+0x1a>
 800f78c:	6023      	str	r3, [r4, #0]
 800f78e:	bd38      	pop	{r3, r4, r5, pc}
 800f790:	240060d8 	.word	0x240060d8

0800f794 <_write_r>:
 800f794:	b538      	push	{r3, r4, r5, lr}
 800f796:	4d07      	ldr	r5, [pc, #28]	@ (800f7b4 <_write_r+0x20>)
 800f798:	4604      	mov	r4, r0
 800f79a:	4608      	mov	r0, r1
 800f79c:	4611      	mov	r1, r2
 800f79e:	2200      	movs	r2, #0
 800f7a0:	602a      	str	r2, [r5, #0]
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	f7f1 fdb8 	bl	8001318 <_write>
 800f7a8:	1c43      	adds	r3, r0, #1
 800f7aa:	d102      	bne.n	800f7b2 <_write_r+0x1e>
 800f7ac:	682b      	ldr	r3, [r5, #0]
 800f7ae:	b103      	cbz	r3, 800f7b2 <_write_r+0x1e>
 800f7b0:	6023      	str	r3, [r4, #0]
 800f7b2:	bd38      	pop	{r3, r4, r5, pc}
 800f7b4:	240060d8 	.word	0x240060d8

0800f7b8 <__errno>:
 800f7b8:	4b01      	ldr	r3, [pc, #4]	@ (800f7c0 <__errno+0x8>)
 800f7ba:	6818      	ldr	r0, [r3, #0]
 800f7bc:	4770      	bx	lr
 800f7be:	bf00      	nop
 800f7c0:	24000048 	.word	0x24000048

0800f7c4 <__libc_init_array>:
 800f7c4:	b570      	push	{r4, r5, r6, lr}
 800f7c6:	4d0d      	ldr	r5, [pc, #52]	@ (800f7fc <__libc_init_array+0x38>)
 800f7c8:	4c0d      	ldr	r4, [pc, #52]	@ (800f800 <__libc_init_array+0x3c>)
 800f7ca:	1b64      	subs	r4, r4, r5
 800f7cc:	10a4      	asrs	r4, r4, #2
 800f7ce:	2600      	movs	r6, #0
 800f7d0:	42a6      	cmp	r6, r4
 800f7d2:	d109      	bne.n	800f7e8 <__libc_init_array+0x24>
 800f7d4:	4d0b      	ldr	r5, [pc, #44]	@ (800f804 <__libc_init_array+0x40>)
 800f7d6:	4c0c      	ldr	r4, [pc, #48]	@ (800f808 <__libc_init_array+0x44>)
 800f7d8:	f002 fa1c 	bl	8011c14 <_init>
 800f7dc:	1b64      	subs	r4, r4, r5
 800f7de:	10a4      	asrs	r4, r4, #2
 800f7e0:	2600      	movs	r6, #0
 800f7e2:	42a6      	cmp	r6, r4
 800f7e4:	d105      	bne.n	800f7f2 <__libc_init_array+0x2e>
 800f7e6:	bd70      	pop	{r4, r5, r6, pc}
 800f7e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7ec:	4798      	blx	r3
 800f7ee:	3601      	adds	r6, #1
 800f7f0:	e7ee      	b.n	800f7d0 <__libc_init_array+0xc>
 800f7f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7f6:	4798      	blx	r3
 800f7f8:	3601      	adds	r6, #1
 800f7fa:	e7f2      	b.n	800f7e2 <__libc_init_array+0x1e>
 800f7fc:	08014168 	.word	0x08014168
 800f800:	08014168 	.word	0x08014168
 800f804:	08014168 	.word	0x08014168
 800f808:	0801416c 	.word	0x0801416c

0800f80c <__retarget_lock_init_recursive>:
 800f80c:	4770      	bx	lr

0800f80e <__retarget_lock_acquire_recursive>:
 800f80e:	4770      	bx	lr

0800f810 <__retarget_lock_release_recursive>:
 800f810:	4770      	bx	lr

0800f812 <memcpy>:
 800f812:	440a      	add	r2, r1
 800f814:	4291      	cmp	r1, r2
 800f816:	f100 33ff 	add.w	r3, r0, #4294967295
 800f81a:	d100      	bne.n	800f81e <memcpy+0xc>
 800f81c:	4770      	bx	lr
 800f81e:	b510      	push	{r4, lr}
 800f820:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f824:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f828:	4291      	cmp	r1, r2
 800f82a:	d1f9      	bne.n	800f820 <memcpy+0xe>
 800f82c:	bd10      	pop	{r4, pc}

0800f82e <quorem>:
 800f82e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f832:	6903      	ldr	r3, [r0, #16]
 800f834:	690c      	ldr	r4, [r1, #16]
 800f836:	42a3      	cmp	r3, r4
 800f838:	4607      	mov	r7, r0
 800f83a:	db7e      	blt.n	800f93a <quorem+0x10c>
 800f83c:	3c01      	subs	r4, #1
 800f83e:	f101 0814 	add.w	r8, r1, #20
 800f842:	00a3      	lsls	r3, r4, #2
 800f844:	f100 0514 	add.w	r5, r0, #20
 800f848:	9300      	str	r3, [sp, #0]
 800f84a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f84e:	9301      	str	r3, [sp, #4]
 800f850:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f854:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f858:	3301      	adds	r3, #1
 800f85a:	429a      	cmp	r2, r3
 800f85c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f860:	fbb2 f6f3 	udiv	r6, r2, r3
 800f864:	d32e      	bcc.n	800f8c4 <quorem+0x96>
 800f866:	f04f 0a00 	mov.w	sl, #0
 800f86a:	46c4      	mov	ip, r8
 800f86c:	46ae      	mov	lr, r5
 800f86e:	46d3      	mov	fp, sl
 800f870:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f874:	b298      	uxth	r0, r3
 800f876:	fb06 a000 	mla	r0, r6, r0, sl
 800f87a:	0c02      	lsrs	r2, r0, #16
 800f87c:	0c1b      	lsrs	r3, r3, #16
 800f87e:	fb06 2303 	mla	r3, r6, r3, r2
 800f882:	f8de 2000 	ldr.w	r2, [lr]
 800f886:	b280      	uxth	r0, r0
 800f888:	b292      	uxth	r2, r2
 800f88a:	1a12      	subs	r2, r2, r0
 800f88c:	445a      	add	r2, fp
 800f88e:	f8de 0000 	ldr.w	r0, [lr]
 800f892:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f896:	b29b      	uxth	r3, r3
 800f898:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f89c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f8a0:	b292      	uxth	r2, r2
 800f8a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f8a6:	45e1      	cmp	r9, ip
 800f8a8:	f84e 2b04 	str.w	r2, [lr], #4
 800f8ac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f8b0:	d2de      	bcs.n	800f870 <quorem+0x42>
 800f8b2:	9b00      	ldr	r3, [sp, #0]
 800f8b4:	58eb      	ldr	r3, [r5, r3]
 800f8b6:	b92b      	cbnz	r3, 800f8c4 <quorem+0x96>
 800f8b8:	9b01      	ldr	r3, [sp, #4]
 800f8ba:	3b04      	subs	r3, #4
 800f8bc:	429d      	cmp	r5, r3
 800f8be:	461a      	mov	r2, r3
 800f8c0:	d32f      	bcc.n	800f922 <quorem+0xf4>
 800f8c2:	613c      	str	r4, [r7, #16]
 800f8c4:	4638      	mov	r0, r7
 800f8c6:	f001 f855 	bl	8010974 <__mcmp>
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	db25      	blt.n	800f91a <quorem+0xec>
 800f8ce:	4629      	mov	r1, r5
 800f8d0:	2000      	movs	r0, #0
 800f8d2:	f858 2b04 	ldr.w	r2, [r8], #4
 800f8d6:	f8d1 c000 	ldr.w	ip, [r1]
 800f8da:	fa1f fe82 	uxth.w	lr, r2
 800f8de:	fa1f f38c 	uxth.w	r3, ip
 800f8e2:	eba3 030e 	sub.w	r3, r3, lr
 800f8e6:	4403      	add	r3, r0
 800f8e8:	0c12      	lsrs	r2, r2, #16
 800f8ea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f8ee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f8f2:	b29b      	uxth	r3, r3
 800f8f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f8f8:	45c1      	cmp	r9, r8
 800f8fa:	f841 3b04 	str.w	r3, [r1], #4
 800f8fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f902:	d2e6      	bcs.n	800f8d2 <quorem+0xa4>
 800f904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f908:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f90c:	b922      	cbnz	r2, 800f918 <quorem+0xea>
 800f90e:	3b04      	subs	r3, #4
 800f910:	429d      	cmp	r5, r3
 800f912:	461a      	mov	r2, r3
 800f914:	d30b      	bcc.n	800f92e <quorem+0x100>
 800f916:	613c      	str	r4, [r7, #16]
 800f918:	3601      	adds	r6, #1
 800f91a:	4630      	mov	r0, r6
 800f91c:	b003      	add	sp, #12
 800f91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f922:	6812      	ldr	r2, [r2, #0]
 800f924:	3b04      	subs	r3, #4
 800f926:	2a00      	cmp	r2, #0
 800f928:	d1cb      	bne.n	800f8c2 <quorem+0x94>
 800f92a:	3c01      	subs	r4, #1
 800f92c:	e7c6      	b.n	800f8bc <quorem+0x8e>
 800f92e:	6812      	ldr	r2, [r2, #0]
 800f930:	3b04      	subs	r3, #4
 800f932:	2a00      	cmp	r2, #0
 800f934:	d1ef      	bne.n	800f916 <quorem+0xe8>
 800f936:	3c01      	subs	r4, #1
 800f938:	e7ea      	b.n	800f910 <quorem+0xe2>
 800f93a:	2000      	movs	r0, #0
 800f93c:	e7ee      	b.n	800f91c <quorem+0xee>
	...

0800f940 <_dtoa_r>:
 800f940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f944:	ed2d 8b02 	vpush	{d8}
 800f948:	69c7      	ldr	r7, [r0, #28]
 800f94a:	b091      	sub	sp, #68	@ 0x44
 800f94c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f950:	ec55 4b10 	vmov	r4, r5, d0
 800f954:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f956:	9107      	str	r1, [sp, #28]
 800f958:	4681      	mov	r9, r0
 800f95a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f95c:	930d      	str	r3, [sp, #52]	@ 0x34
 800f95e:	b97f      	cbnz	r7, 800f980 <_dtoa_r+0x40>
 800f960:	2010      	movs	r0, #16
 800f962:	f7ff f89f 	bl	800eaa4 <malloc>
 800f966:	4602      	mov	r2, r0
 800f968:	f8c9 001c 	str.w	r0, [r9, #28]
 800f96c:	b920      	cbnz	r0, 800f978 <_dtoa_r+0x38>
 800f96e:	4ba0      	ldr	r3, [pc, #640]	@ (800fbf0 <_dtoa_r+0x2b0>)
 800f970:	21ef      	movs	r1, #239	@ 0xef
 800f972:	48a0      	ldr	r0, [pc, #640]	@ (800fbf4 <_dtoa_r+0x2b4>)
 800f974:	f001 fb24 	bl	8010fc0 <__assert_func>
 800f978:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f97c:	6007      	str	r7, [r0, #0]
 800f97e:	60c7      	str	r7, [r0, #12]
 800f980:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f984:	6819      	ldr	r1, [r3, #0]
 800f986:	b159      	cbz	r1, 800f9a0 <_dtoa_r+0x60>
 800f988:	685a      	ldr	r2, [r3, #4]
 800f98a:	604a      	str	r2, [r1, #4]
 800f98c:	2301      	movs	r3, #1
 800f98e:	4093      	lsls	r3, r2
 800f990:	608b      	str	r3, [r1, #8]
 800f992:	4648      	mov	r0, r9
 800f994:	f000 fdb4 	bl	8010500 <_Bfree>
 800f998:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f99c:	2200      	movs	r2, #0
 800f99e:	601a      	str	r2, [r3, #0]
 800f9a0:	1e2b      	subs	r3, r5, #0
 800f9a2:	bfbb      	ittet	lt
 800f9a4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f9a8:	9303      	strlt	r3, [sp, #12]
 800f9aa:	2300      	movge	r3, #0
 800f9ac:	2201      	movlt	r2, #1
 800f9ae:	bfac      	ite	ge
 800f9b0:	6033      	strge	r3, [r6, #0]
 800f9b2:	6032      	strlt	r2, [r6, #0]
 800f9b4:	4b90      	ldr	r3, [pc, #576]	@ (800fbf8 <_dtoa_r+0x2b8>)
 800f9b6:	9e03      	ldr	r6, [sp, #12]
 800f9b8:	43b3      	bics	r3, r6
 800f9ba:	d110      	bne.n	800f9de <_dtoa_r+0x9e>
 800f9bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f9be:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f9c2:	6013      	str	r3, [r2, #0]
 800f9c4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800f9c8:	4323      	orrs	r3, r4
 800f9ca:	f000 84de 	beq.w	801038a <_dtoa_r+0xa4a>
 800f9ce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f9d0:	4f8a      	ldr	r7, [pc, #552]	@ (800fbfc <_dtoa_r+0x2bc>)
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	f000 84e0 	beq.w	8010398 <_dtoa_r+0xa58>
 800f9d8:	1cfb      	adds	r3, r7, #3
 800f9da:	f000 bcdb 	b.w	8010394 <_dtoa_r+0xa54>
 800f9de:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f9e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ea:	d10a      	bne.n	800fa02 <_dtoa_r+0xc2>
 800f9ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	6013      	str	r3, [r2, #0]
 800f9f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f9f4:	b113      	cbz	r3, 800f9fc <_dtoa_r+0xbc>
 800f9f6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f9f8:	4b81      	ldr	r3, [pc, #516]	@ (800fc00 <_dtoa_r+0x2c0>)
 800f9fa:	6013      	str	r3, [r2, #0]
 800f9fc:	4f81      	ldr	r7, [pc, #516]	@ (800fc04 <_dtoa_r+0x2c4>)
 800f9fe:	f000 bccb 	b.w	8010398 <_dtoa_r+0xa58>
 800fa02:	aa0e      	add	r2, sp, #56	@ 0x38
 800fa04:	a90f      	add	r1, sp, #60	@ 0x3c
 800fa06:	4648      	mov	r0, r9
 800fa08:	eeb0 0b48 	vmov.f64	d0, d8
 800fa0c:	f001 f862 	bl	8010ad4 <__d2b>
 800fa10:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800fa14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa16:	9001      	str	r0, [sp, #4]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d045      	beq.n	800faa8 <_dtoa_r+0x168>
 800fa1c:	eeb0 7b48 	vmov.f64	d7, d8
 800fa20:	ee18 1a90 	vmov	r1, s17
 800fa24:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fa28:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800fa2c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800fa30:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fa34:	2500      	movs	r5, #0
 800fa36:	ee07 1a90 	vmov	s15, r1
 800fa3a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800fa3e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800fbd8 <_dtoa_r+0x298>
 800fa42:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fa46:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800fbe0 <_dtoa_r+0x2a0>
 800fa4a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800fa4e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800fbe8 <_dtoa_r+0x2a8>
 800fa52:	ee07 3a90 	vmov	s15, r3
 800fa56:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fa5a:	eeb0 7b46 	vmov.f64	d7, d6
 800fa5e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fa62:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fa66:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fa6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa6e:	ee16 8a90 	vmov	r8, s13
 800fa72:	d508      	bpl.n	800fa86 <_dtoa_r+0x146>
 800fa74:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fa78:	eeb4 6b47 	vcmp.f64	d6, d7
 800fa7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa80:	bf18      	it	ne
 800fa82:	f108 38ff 	addne.w	r8, r8, #4294967295
 800fa86:	f1b8 0f16 	cmp.w	r8, #22
 800fa8a:	d82b      	bhi.n	800fae4 <_dtoa_r+0x1a4>
 800fa8c:	495e      	ldr	r1, [pc, #376]	@ (800fc08 <_dtoa_r+0x2c8>)
 800fa8e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800fa92:	ed91 7b00 	vldr	d7, [r1]
 800fa96:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fa9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa9e:	d501      	bpl.n	800faa4 <_dtoa_r+0x164>
 800faa0:	f108 38ff 	add.w	r8, r8, #4294967295
 800faa4:	2100      	movs	r1, #0
 800faa6:	e01e      	b.n	800fae6 <_dtoa_r+0x1a6>
 800faa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800faaa:	4413      	add	r3, r2
 800faac:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800fab0:	2920      	cmp	r1, #32
 800fab2:	bfc1      	itttt	gt
 800fab4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800fab8:	408e      	lslgt	r6, r1
 800faba:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800fabe:	fa24 f101 	lsrgt.w	r1, r4, r1
 800fac2:	bfd6      	itet	le
 800fac4:	f1c1 0120 	rsble	r1, r1, #32
 800fac8:	4331      	orrgt	r1, r6
 800faca:	fa04 f101 	lslle.w	r1, r4, r1
 800face:	ee07 1a90 	vmov	s15, r1
 800fad2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fad6:	3b01      	subs	r3, #1
 800fad8:	ee17 1a90 	vmov	r1, s15
 800fadc:	2501      	movs	r5, #1
 800fade:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800fae2:	e7a8      	b.n	800fa36 <_dtoa_r+0xf6>
 800fae4:	2101      	movs	r1, #1
 800fae6:	1ad2      	subs	r2, r2, r3
 800fae8:	1e53      	subs	r3, r2, #1
 800faea:	9306      	str	r3, [sp, #24]
 800faec:	bf45      	ittet	mi
 800faee:	f1c2 0301 	rsbmi	r3, r2, #1
 800faf2:	9305      	strmi	r3, [sp, #20]
 800faf4:	2300      	movpl	r3, #0
 800faf6:	2300      	movmi	r3, #0
 800faf8:	bf4c      	ite	mi
 800fafa:	9306      	strmi	r3, [sp, #24]
 800fafc:	9305      	strpl	r3, [sp, #20]
 800fafe:	f1b8 0f00 	cmp.w	r8, #0
 800fb02:	910c      	str	r1, [sp, #48]	@ 0x30
 800fb04:	db18      	blt.n	800fb38 <_dtoa_r+0x1f8>
 800fb06:	9b06      	ldr	r3, [sp, #24]
 800fb08:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800fb0c:	4443      	add	r3, r8
 800fb0e:	9306      	str	r3, [sp, #24]
 800fb10:	2300      	movs	r3, #0
 800fb12:	9a07      	ldr	r2, [sp, #28]
 800fb14:	2a09      	cmp	r2, #9
 800fb16:	d849      	bhi.n	800fbac <_dtoa_r+0x26c>
 800fb18:	2a05      	cmp	r2, #5
 800fb1a:	bfc4      	itt	gt
 800fb1c:	3a04      	subgt	r2, #4
 800fb1e:	9207      	strgt	r2, [sp, #28]
 800fb20:	9a07      	ldr	r2, [sp, #28]
 800fb22:	f1a2 0202 	sub.w	r2, r2, #2
 800fb26:	bfcc      	ite	gt
 800fb28:	2400      	movgt	r4, #0
 800fb2a:	2401      	movle	r4, #1
 800fb2c:	2a03      	cmp	r2, #3
 800fb2e:	d848      	bhi.n	800fbc2 <_dtoa_r+0x282>
 800fb30:	e8df f002 	tbb	[pc, r2]
 800fb34:	3a2c2e0b 	.word	0x3a2c2e0b
 800fb38:	9b05      	ldr	r3, [sp, #20]
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	eba3 0308 	sub.w	r3, r3, r8
 800fb40:	9305      	str	r3, [sp, #20]
 800fb42:	920a      	str	r2, [sp, #40]	@ 0x28
 800fb44:	f1c8 0300 	rsb	r3, r8, #0
 800fb48:	e7e3      	b.n	800fb12 <_dtoa_r+0x1d2>
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	9208      	str	r2, [sp, #32]
 800fb4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb50:	2a00      	cmp	r2, #0
 800fb52:	dc39      	bgt.n	800fbc8 <_dtoa_r+0x288>
 800fb54:	f04f 0b01 	mov.w	fp, #1
 800fb58:	46da      	mov	sl, fp
 800fb5a:	465a      	mov	r2, fp
 800fb5c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800fb60:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800fb64:	2100      	movs	r1, #0
 800fb66:	2004      	movs	r0, #4
 800fb68:	f100 0614 	add.w	r6, r0, #20
 800fb6c:	4296      	cmp	r6, r2
 800fb6e:	d930      	bls.n	800fbd2 <_dtoa_r+0x292>
 800fb70:	6079      	str	r1, [r7, #4]
 800fb72:	4648      	mov	r0, r9
 800fb74:	9304      	str	r3, [sp, #16]
 800fb76:	f000 fc83 	bl	8010480 <_Balloc>
 800fb7a:	9b04      	ldr	r3, [sp, #16]
 800fb7c:	4607      	mov	r7, r0
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	d146      	bne.n	800fc10 <_dtoa_r+0x2d0>
 800fb82:	4b22      	ldr	r3, [pc, #136]	@ (800fc0c <_dtoa_r+0x2cc>)
 800fb84:	4602      	mov	r2, r0
 800fb86:	f240 11af 	movw	r1, #431	@ 0x1af
 800fb8a:	e6f2      	b.n	800f972 <_dtoa_r+0x32>
 800fb8c:	2201      	movs	r2, #1
 800fb8e:	e7dd      	b.n	800fb4c <_dtoa_r+0x20c>
 800fb90:	2200      	movs	r2, #0
 800fb92:	9208      	str	r2, [sp, #32]
 800fb94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb96:	eb08 0b02 	add.w	fp, r8, r2
 800fb9a:	f10b 0a01 	add.w	sl, fp, #1
 800fb9e:	4652      	mov	r2, sl
 800fba0:	2a01      	cmp	r2, #1
 800fba2:	bfb8      	it	lt
 800fba4:	2201      	movlt	r2, #1
 800fba6:	e7db      	b.n	800fb60 <_dtoa_r+0x220>
 800fba8:	2201      	movs	r2, #1
 800fbaa:	e7f2      	b.n	800fb92 <_dtoa_r+0x252>
 800fbac:	2401      	movs	r4, #1
 800fbae:	2200      	movs	r2, #0
 800fbb0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800fbb4:	f04f 3bff 	mov.w	fp, #4294967295
 800fbb8:	2100      	movs	r1, #0
 800fbba:	46da      	mov	sl, fp
 800fbbc:	2212      	movs	r2, #18
 800fbbe:	9109      	str	r1, [sp, #36]	@ 0x24
 800fbc0:	e7ce      	b.n	800fb60 <_dtoa_r+0x220>
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	9208      	str	r2, [sp, #32]
 800fbc6:	e7f5      	b.n	800fbb4 <_dtoa_r+0x274>
 800fbc8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800fbcc:	46da      	mov	sl, fp
 800fbce:	465a      	mov	r2, fp
 800fbd0:	e7c6      	b.n	800fb60 <_dtoa_r+0x220>
 800fbd2:	3101      	adds	r1, #1
 800fbd4:	0040      	lsls	r0, r0, #1
 800fbd6:	e7c7      	b.n	800fb68 <_dtoa_r+0x228>
 800fbd8:	636f4361 	.word	0x636f4361
 800fbdc:	3fd287a7 	.word	0x3fd287a7
 800fbe0:	8b60c8b3 	.word	0x8b60c8b3
 800fbe4:	3fc68a28 	.word	0x3fc68a28
 800fbe8:	509f79fb 	.word	0x509f79fb
 800fbec:	3fd34413 	.word	0x3fd34413
 800fbf0:	08013e21 	.word	0x08013e21
 800fbf4:	08013e38 	.word	0x08013e38
 800fbf8:	7ff00000 	.word	0x7ff00000
 800fbfc:	08013e1d 	.word	0x08013e1d
 800fc00:	08013df1 	.word	0x08013df1
 800fc04:	08013df0 	.word	0x08013df0
 800fc08:	08013f30 	.word	0x08013f30
 800fc0c:	08013e90 	.word	0x08013e90
 800fc10:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800fc14:	f1ba 0f0e 	cmp.w	sl, #14
 800fc18:	6010      	str	r0, [r2, #0]
 800fc1a:	d86f      	bhi.n	800fcfc <_dtoa_r+0x3bc>
 800fc1c:	2c00      	cmp	r4, #0
 800fc1e:	d06d      	beq.n	800fcfc <_dtoa_r+0x3bc>
 800fc20:	f1b8 0f00 	cmp.w	r8, #0
 800fc24:	f340 80c2 	ble.w	800fdac <_dtoa_r+0x46c>
 800fc28:	4aca      	ldr	r2, [pc, #808]	@ (800ff54 <_dtoa_r+0x614>)
 800fc2a:	f008 010f 	and.w	r1, r8, #15
 800fc2e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800fc32:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800fc36:	ed92 7b00 	vldr	d7, [r2]
 800fc3a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800fc3e:	f000 80a9 	beq.w	800fd94 <_dtoa_r+0x454>
 800fc42:	4ac5      	ldr	r2, [pc, #788]	@ (800ff58 <_dtoa_r+0x618>)
 800fc44:	ed92 6b08 	vldr	d6, [r2, #32]
 800fc48:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800fc4c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fc50:	f001 010f 	and.w	r1, r1, #15
 800fc54:	2203      	movs	r2, #3
 800fc56:	48c0      	ldr	r0, [pc, #768]	@ (800ff58 <_dtoa_r+0x618>)
 800fc58:	2900      	cmp	r1, #0
 800fc5a:	f040 809d 	bne.w	800fd98 <_dtoa_r+0x458>
 800fc5e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fc62:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800fc66:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fc6a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fc6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fc70:	2900      	cmp	r1, #0
 800fc72:	f000 80c1 	beq.w	800fdf8 <_dtoa_r+0x4b8>
 800fc76:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800fc7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc82:	f140 80b9 	bpl.w	800fdf8 <_dtoa_r+0x4b8>
 800fc86:	f1ba 0f00 	cmp.w	sl, #0
 800fc8a:	f000 80b5 	beq.w	800fdf8 <_dtoa_r+0x4b8>
 800fc8e:	f1bb 0f00 	cmp.w	fp, #0
 800fc92:	dd31      	ble.n	800fcf8 <_dtoa_r+0x3b8>
 800fc94:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800fc98:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fc9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fca0:	f108 31ff 	add.w	r1, r8, #4294967295
 800fca4:	9104      	str	r1, [sp, #16]
 800fca6:	3201      	adds	r2, #1
 800fca8:	465c      	mov	r4, fp
 800fcaa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fcae:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800fcb2:	ee07 2a90 	vmov	s15, r2
 800fcb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fcba:	eea7 5b06 	vfma.f64	d5, d7, d6
 800fcbe:	ee15 2a90 	vmov	r2, s11
 800fcc2:	ec51 0b15 	vmov	r0, r1, d5
 800fcc6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800fcca:	2c00      	cmp	r4, #0
 800fccc:	f040 8098 	bne.w	800fe00 <_dtoa_r+0x4c0>
 800fcd0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800fcd4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fcd8:	ec41 0b17 	vmov	d7, r0, r1
 800fcdc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fce4:	f300 8261 	bgt.w	80101aa <_dtoa_r+0x86a>
 800fce8:	eeb1 7b47 	vneg.f64	d7, d7
 800fcec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fcf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf4:	f100 80f5 	bmi.w	800fee2 <_dtoa_r+0x5a2>
 800fcf8:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fcfc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fcfe:	2a00      	cmp	r2, #0
 800fd00:	f2c0 812c 	blt.w	800ff5c <_dtoa_r+0x61c>
 800fd04:	f1b8 0f0e 	cmp.w	r8, #14
 800fd08:	f300 8128 	bgt.w	800ff5c <_dtoa_r+0x61c>
 800fd0c:	4b91      	ldr	r3, [pc, #580]	@ (800ff54 <_dtoa_r+0x614>)
 800fd0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fd12:	ed93 6b00 	vldr	d6, [r3]
 800fd16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	da03      	bge.n	800fd24 <_dtoa_r+0x3e4>
 800fd1c:	f1ba 0f00 	cmp.w	sl, #0
 800fd20:	f340 80d2 	ble.w	800fec8 <_dtoa_r+0x588>
 800fd24:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800fd28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fd2c:	463e      	mov	r6, r7
 800fd2e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800fd32:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800fd36:	ee15 3a10 	vmov	r3, s10
 800fd3a:	3330      	adds	r3, #48	@ 0x30
 800fd3c:	f806 3b01 	strb.w	r3, [r6], #1
 800fd40:	1bf3      	subs	r3, r6, r7
 800fd42:	459a      	cmp	sl, r3
 800fd44:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800fd48:	eea3 7b46 	vfms.f64	d7, d3, d6
 800fd4c:	f040 80f8 	bne.w	800ff40 <_dtoa_r+0x600>
 800fd50:	ee37 7b07 	vadd.f64	d7, d7, d7
 800fd54:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fd58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd5c:	f300 80dd 	bgt.w	800ff1a <_dtoa_r+0x5da>
 800fd60:	eeb4 7b46 	vcmp.f64	d7, d6
 800fd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd68:	d104      	bne.n	800fd74 <_dtoa_r+0x434>
 800fd6a:	ee15 3a10 	vmov	r3, s10
 800fd6e:	07db      	lsls	r3, r3, #31
 800fd70:	f100 80d3 	bmi.w	800ff1a <_dtoa_r+0x5da>
 800fd74:	9901      	ldr	r1, [sp, #4]
 800fd76:	4648      	mov	r0, r9
 800fd78:	f000 fbc2 	bl	8010500 <_Bfree>
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fd80:	7033      	strb	r3, [r6, #0]
 800fd82:	f108 0301 	add.w	r3, r8, #1
 800fd86:	6013      	str	r3, [r2, #0]
 800fd88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	f000 8304 	beq.w	8010398 <_dtoa_r+0xa58>
 800fd90:	601e      	str	r6, [r3, #0]
 800fd92:	e301      	b.n	8010398 <_dtoa_r+0xa58>
 800fd94:	2202      	movs	r2, #2
 800fd96:	e75e      	b.n	800fc56 <_dtoa_r+0x316>
 800fd98:	07cc      	lsls	r4, r1, #31
 800fd9a:	d504      	bpl.n	800fda6 <_dtoa_r+0x466>
 800fd9c:	ed90 6b00 	vldr	d6, [r0]
 800fda0:	3201      	adds	r2, #1
 800fda2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fda6:	1049      	asrs	r1, r1, #1
 800fda8:	3008      	adds	r0, #8
 800fdaa:	e755      	b.n	800fc58 <_dtoa_r+0x318>
 800fdac:	d022      	beq.n	800fdf4 <_dtoa_r+0x4b4>
 800fdae:	f1c8 0100 	rsb	r1, r8, #0
 800fdb2:	4a68      	ldr	r2, [pc, #416]	@ (800ff54 <_dtoa_r+0x614>)
 800fdb4:	f001 000f 	and.w	r0, r1, #15
 800fdb8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800fdbc:	ed92 7b00 	vldr	d7, [r2]
 800fdc0:	ee28 7b07 	vmul.f64	d7, d8, d7
 800fdc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fdc8:	4863      	ldr	r0, [pc, #396]	@ (800ff58 <_dtoa_r+0x618>)
 800fdca:	1109      	asrs	r1, r1, #4
 800fdcc:	2400      	movs	r4, #0
 800fdce:	2202      	movs	r2, #2
 800fdd0:	b929      	cbnz	r1, 800fdde <_dtoa_r+0x49e>
 800fdd2:	2c00      	cmp	r4, #0
 800fdd4:	f43f af49 	beq.w	800fc6a <_dtoa_r+0x32a>
 800fdd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fddc:	e745      	b.n	800fc6a <_dtoa_r+0x32a>
 800fdde:	07ce      	lsls	r6, r1, #31
 800fde0:	d505      	bpl.n	800fdee <_dtoa_r+0x4ae>
 800fde2:	ed90 6b00 	vldr	d6, [r0]
 800fde6:	3201      	adds	r2, #1
 800fde8:	2401      	movs	r4, #1
 800fdea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fdee:	1049      	asrs	r1, r1, #1
 800fdf0:	3008      	adds	r0, #8
 800fdf2:	e7ed      	b.n	800fdd0 <_dtoa_r+0x490>
 800fdf4:	2202      	movs	r2, #2
 800fdf6:	e738      	b.n	800fc6a <_dtoa_r+0x32a>
 800fdf8:	f8cd 8010 	str.w	r8, [sp, #16]
 800fdfc:	4654      	mov	r4, sl
 800fdfe:	e754      	b.n	800fcaa <_dtoa_r+0x36a>
 800fe00:	4a54      	ldr	r2, [pc, #336]	@ (800ff54 <_dtoa_r+0x614>)
 800fe02:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800fe06:	ed12 4b02 	vldr	d4, [r2, #-8]
 800fe0a:	9a08      	ldr	r2, [sp, #32]
 800fe0c:	ec41 0b17 	vmov	d7, r0, r1
 800fe10:	443c      	add	r4, r7
 800fe12:	b34a      	cbz	r2, 800fe68 <_dtoa_r+0x528>
 800fe14:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800fe18:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800fe1c:	463e      	mov	r6, r7
 800fe1e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800fe22:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800fe26:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fe2a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fe2e:	ee14 2a90 	vmov	r2, s9
 800fe32:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800fe36:	3230      	adds	r2, #48	@ 0x30
 800fe38:	ee36 6b45 	vsub.f64	d6, d6, d5
 800fe3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fe40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe44:	f806 2b01 	strb.w	r2, [r6], #1
 800fe48:	d438      	bmi.n	800febc <_dtoa_r+0x57c>
 800fe4a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800fe4e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800fe52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe56:	d462      	bmi.n	800ff1e <_dtoa_r+0x5de>
 800fe58:	42a6      	cmp	r6, r4
 800fe5a:	f43f af4d 	beq.w	800fcf8 <_dtoa_r+0x3b8>
 800fe5e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800fe62:	ee26 6b03 	vmul.f64	d6, d6, d3
 800fe66:	e7e0      	b.n	800fe2a <_dtoa_r+0x4ea>
 800fe68:	4621      	mov	r1, r4
 800fe6a:	463e      	mov	r6, r7
 800fe6c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fe70:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800fe74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fe78:	ee14 2a90 	vmov	r2, s9
 800fe7c:	3230      	adds	r2, #48	@ 0x30
 800fe7e:	f806 2b01 	strb.w	r2, [r6], #1
 800fe82:	42a6      	cmp	r6, r4
 800fe84:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800fe88:	ee36 6b45 	vsub.f64	d6, d6, d5
 800fe8c:	d119      	bne.n	800fec2 <_dtoa_r+0x582>
 800fe8e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800fe92:	ee37 4b05 	vadd.f64	d4, d7, d5
 800fe96:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800fe9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe9e:	dc3e      	bgt.n	800ff1e <_dtoa_r+0x5de>
 800fea0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800fea4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800fea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feac:	f57f af24 	bpl.w	800fcf8 <_dtoa_r+0x3b8>
 800feb0:	460e      	mov	r6, r1
 800feb2:	3901      	subs	r1, #1
 800feb4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800feb8:	2b30      	cmp	r3, #48	@ 0x30
 800feba:	d0f9      	beq.n	800feb0 <_dtoa_r+0x570>
 800febc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fec0:	e758      	b.n	800fd74 <_dtoa_r+0x434>
 800fec2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800fec6:	e7d5      	b.n	800fe74 <_dtoa_r+0x534>
 800fec8:	d10b      	bne.n	800fee2 <_dtoa_r+0x5a2>
 800feca:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800fece:	ee26 6b07 	vmul.f64	d6, d6, d7
 800fed2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fed6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800feda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fede:	f2c0 8161 	blt.w	80101a4 <_dtoa_r+0x864>
 800fee2:	2400      	movs	r4, #0
 800fee4:	4625      	mov	r5, r4
 800fee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fee8:	43db      	mvns	r3, r3
 800feea:	9304      	str	r3, [sp, #16]
 800feec:	463e      	mov	r6, r7
 800feee:	f04f 0800 	mov.w	r8, #0
 800fef2:	4621      	mov	r1, r4
 800fef4:	4648      	mov	r0, r9
 800fef6:	f000 fb03 	bl	8010500 <_Bfree>
 800fefa:	2d00      	cmp	r5, #0
 800fefc:	d0de      	beq.n	800febc <_dtoa_r+0x57c>
 800fefe:	f1b8 0f00 	cmp.w	r8, #0
 800ff02:	d005      	beq.n	800ff10 <_dtoa_r+0x5d0>
 800ff04:	45a8      	cmp	r8, r5
 800ff06:	d003      	beq.n	800ff10 <_dtoa_r+0x5d0>
 800ff08:	4641      	mov	r1, r8
 800ff0a:	4648      	mov	r0, r9
 800ff0c:	f000 faf8 	bl	8010500 <_Bfree>
 800ff10:	4629      	mov	r1, r5
 800ff12:	4648      	mov	r0, r9
 800ff14:	f000 faf4 	bl	8010500 <_Bfree>
 800ff18:	e7d0      	b.n	800febc <_dtoa_r+0x57c>
 800ff1a:	f8cd 8010 	str.w	r8, [sp, #16]
 800ff1e:	4633      	mov	r3, r6
 800ff20:	461e      	mov	r6, r3
 800ff22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff26:	2a39      	cmp	r2, #57	@ 0x39
 800ff28:	d106      	bne.n	800ff38 <_dtoa_r+0x5f8>
 800ff2a:	429f      	cmp	r7, r3
 800ff2c:	d1f8      	bne.n	800ff20 <_dtoa_r+0x5e0>
 800ff2e:	9a04      	ldr	r2, [sp, #16]
 800ff30:	3201      	adds	r2, #1
 800ff32:	9204      	str	r2, [sp, #16]
 800ff34:	2230      	movs	r2, #48	@ 0x30
 800ff36:	703a      	strb	r2, [r7, #0]
 800ff38:	781a      	ldrb	r2, [r3, #0]
 800ff3a:	3201      	adds	r2, #1
 800ff3c:	701a      	strb	r2, [r3, #0]
 800ff3e:	e7bd      	b.n	800febc <_dtoa_r+0x57c>
 800ff40:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ff44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ff48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff4c:	f47f aeef 	bne.w	800fd2e <_dtoa_r+0x3ee>
 800ff50:	e710      	b.n	800fd74 <_dtoa_r+0x434>
 800ff52:	bf00      	nop
 800ff54:	08013f30 	.word	0x08013f30
 800ff58:	08013f08 	.word	0x08013f08
 800ff5c:	9908      	ldr	r1, [sp, #32]
 800ff5e:	2900      	cmp	r1, #0
 800ff60:	f000 80e3 	beq.w	801012a <_dtoa_r+0x7ea>
 800ff64:	9907      	ldr	r1, [sp, #28]
 800ff66:	2901      	cmp	r1, #1
 800ff68:	f300 80c8 	bgt.w	80100fc <_dtoa_r+0x7bc>
 800ff6c:	2d00      	cmp	r5, #0
 800ff6e:	f000 80c1 	beq.w	80100f4 <_dtoa_r+0x7b4>
 800ff72:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ff76:	9e05      	ldr	r6, [sp, #20]
 800ff78:	461c      	mov	r4, r3
 800ff7a:	9304      	str	r3, [sp, #16]
 800ff7c:	9b05      	ldr	r3, [sp, #20]
 800ff7e:	4413      	add	r3, r2
 800ff80:	9305      	str	r3, [sp, #20]
 800ff82:	9b06      	ldr	r3, [sp, #24]
 800ff84:	2101      	movs	r1, #1
 800ff86:	4413      	add	r3, r2
 800ff88:	4648      	mov	r0, r9
 800ff8a:	9306      	str	r3, [sp, #24]
 800ff8c:	f000 fb6c 	bl	8010668 <__i2b>
 800ff90:	9b04      	ldr	r3, [sp, #16]
 800ff92:	4605      	mov	r5, r0
 800ff94:	b166      	cbz	r6, 800ffb0 <_dtoa_r+0x670>
 800ff96:	9a06      	ldr	r2, [sp, #24]
 800ff98:	2a00      	cmp	r2, #0
 800ff9a:	dd09      	ble.n	800ffb0 <_dtoa_r+0x670>
 800ff9c:	42b2      	cmp	r2, r6
 800ff9e:	9905      	ldr	r1, [sp, #20]
 800ffa0:	bfa8      	it	ge
 800ffa2:	4632      	movge	r2, r6
 800ffa4:	1a89      	subs	r1, r1, r2
 800ffa6:	9105      	str	r1, [sp, #20]
 800ffa8:	9906      	ldr	r1, [sp, #24]
 800ffaa:	1ab6      	subs	r6, r6, r2
 800ffac:	1a8a      	subs	r2, r1, r2
 800ffae:	9206      	str	r2, [sp, #24]
 800ffb0:	b1fb      	cbz	r3, 800fff2 <_dtoa_r+0x6b2>
 800ffb2:	9a08      	ldr	r2, [sp, #32]
 800ffb4:	2a00      	cmp	r2, #0
 800ffb6:	f000 80bc 	beq.w	8010132 <_dtoa_r+0x7f2>
 800ffba:	b19c      	cbz	r4, 800ffe4 <_dtoa_r+0x6a4>
 800ffbc:	4629      	mov	r1, r5
 800ffbe:	4622      	mov	r2, r4
 800ffc0:	4648      	mov	r0, r9
 800ffc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ffc4:	f000 fc10 	bl	80107e8 <__pow5mult>
 800ffc8:	9a01      	ldr	r2, [sp, #4]
 800ffca:	4601      	mov	r1, r0
 800ffcc:	4605      	mov	r5, r0
 800ffce:	4648      	mov	r0, r9
 800ffd0:	f000 fb60 	bl	8010694 <__multiply>
 800ffd4:	9901      	ldr	r1, [sp, #4]
 800ffd6:	9004      	str	r0, [sp, #16]
 800ffd8:	4648      	mov	r0, r9
 800ffda:	f000 fa91 	bl	8010500 <_Bfree>
 800ffde:	9a04      	ldr	r2, [sp, #16]
 800ffe0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ffe2:	9201      	str	r2, [sp, #4]
 800ffe4:	1b1a      	subs	r2, r3, r4
 800ffe6:	d004      	beq.n	800fff2 <_dtoa_r+0x6b2>
 800ffe8:	9901      	ldr	r1, [sp, #4]
 800ffea:	4648      	mov	r0, r9
 800ffec:	f000 fbfc 	bl	80107e8 <__pow5mult>
 800fff0:	9001      	str	r0, [sp, #4]
 800fff2:	2101      	movs	r1, #1
 800fff4:	4648      	mov	r0, r9
 800fff6:	f000 fb37 	bl	8010668 <__i2b>
 800fffa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fffc:	4604      	mov	r4, r0
 800fffe:	2b00      	cmp	r3, #0
 8010000:	f000 81d0 	beq.w	80103a4 <_dtoa_r+0xa64>
 8010004:	461a      	mov	r2, r3
 8010006:	4601      	mov	r1, r0
 8010008:	4648      	mov	r0, r9
 801000a:	f000 fbed 	bl	80107e8 <__pow5mult>
 801000e:	9b07      	ldr	r3, [sp, #28]
 8010010:	2b01      	cmp	r3, #1
 8010012:	4604      	mov	r4, r0
 8010014:	f300 8095 	bgt.w	8010142 <_dtoa_r+0x802>
 8010018:	9b02      	ldr	r3, [sp, #8]
 801001a:	2b00      	cmp	r3, #0
 801001c:	f040 808b 	bne.w	8010136 <_dtoa_r+0x7f6>
 8010020:	9b03      	ldr	r3, [sp, #12]
 8010022:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010026:	2a00      	cmp	r2, #0
 8010028:	f040 8087 	bne.w	801013a <_dtoa_r+0x7fa>
 801002c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010030:	0d12      	lsrs	r2, r2, #20
 8010032:	0512      	lsls	r2, r2, #20
 8010034:	2a00      	cmp	r2, #0
 8010036:	f000 8082 	beq.w	801013e <_dtoa_r+0x7fe>
 801003a:	9b05      	ldr	r3, [sp, #20]
 801003c:	3301      	adds	r3, #1
 801003e:	9305      	str	r3, [sp, #20]
 8010040:	9b06      	ldr	r3, [sp, #24]
 8010042:	3301      	adds	r3, #1
 8010044:	9306      	str	r3, [sp, #24]
 8010046:	2301      	movs	r3, #1
 8010048:	930b      	str	r3, [sp, #44]	@ 0x2c
 801004a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801004c:	2b00      	cmp	r3, #0
 801004e:	f000 81af 	beq.w	80103b0 <_dtoa_r+0xa70>
 8010052:	6922      	ldr	r2, [r4, #16]
 8010054:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010058:	6910      	ldr	r0, [r2, #16]
 801005a:	f000 fab9 	bl	80105d0 <__hi0bits>
 801005e:	f1c0 0020 	rsb	r0, r0, #32
 8010062:	9b06      	ldr	r3, [sp, #24]
 8010064:	4418      	add	r0, r3
 8010066:	f010 001f 	ands.w	r0, r0, #31
 801006a:	d076      	beq.n	801015a <_dtoa_r+0x81a>
 801006c:	f1c0 0220 	rsb	r2, r0, #32
 8010070:	2a04      	cmp	r2, #4
 8010072:	dd69      	ble.n	8010148 <_dtoa_r+0x808>
 8010074:	9b05      	ldr	r3, [sp, #20]
 8010076:	f1c0 001c 	rsb	r0, r0, #28
 801007a:	4403      	add	r3, r0
 801007c:	9305      	str	r3, [sp, #20]
 801007e:	9b06      	ldr	r3, [sp, #24]
 8010080:	4406      	add	r6, r0
 8010082:	4403      	add	r3, r0
 8010084:	9306      	str	r3, [sp, #24]
 8010086:	9b05      	ldr	r3, [sp, #20]
 8010088:	2b00      	cmp	r3, #0
 801008a:	dd05      	ble.n	8010098 <_dtoa_r+0x758>
 801008c:	9901      	ldr	r1, [sp, #4]
 801008e:	461a      	mov	r2, r3
 8010090:	4648      	mov	r0, r9
 8010092:	f000 fc03 	bl	801089c <__lshift>
 8010096:	9001      	str	r0, [sp, #4]
 8010098:	9b06      	ldr	r3, [sp, #24]
 801009a:	2b00      	cmp	r3, #0
 801009c:	dd05      	ble.n	80100aa <_dtoa_r+0x76a>
 801009e:	4621      	mov	r1, r4
 80100a0:	461a      	mov	r2, r3
 80100a2:	4648      	mov	r0, r9
 80100a4:	f000 fbfa 	bl	801089c <__lshift>
 80100a8:	4604      	mov	r4, r0
 80100aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d056      	beq.n	801015e <_dtoa_r+0x81e>
 80100b0:	9801      	ldr	r0, [sp, #4]
 80100b2:	4621      	mov	r1, r4
 80100b4:	f000 fc5e 	bl	8010974 <__mcmp>
 80100b8:	2800      	cmp	r0, #0
 80100ba:	da50      	bge.n	801015e <_dtoa_r+0x81e>
 80100bc:	f108 33ff 	add.w	r3, r8, #4294967295
 80100c0:	9304      	str	r3, [sp, #16]
 80100c2:	9901      	ldr	r1, [sp, #4]
 80100c4:	2300      	movs	r3, #0
 80100c6:	220a      	movs	r2, #10
 80100c8:	4648      	mov	r0, r9
 80100ca:	f000 fa3b 	bl	8010544 <__multadd>
 80100ce:	9b08      	ldr	r3, [sp, #32]
 80100d0:	9001      	str	r0, [sp, #4]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	f000 816e 	beq.w	80103b4 <_dtoa_r+0xa74>
 80100d8:	4629      	mov	r1, r5
 80100da:	2300      	movs	r3, #0
 80100dc:	220a      	movs	r2, #10
 80100de:	4648      	mov	r0, r9
 80100e0:	f000 fa30 	bl	8010544 <__multadd>
 80100e4:	f1bb 0f00 	cmp.w	fp, #0
 80100e8:	4605      	mov	r5, r0
 80100ea:	dc64      	bgt.n	80101b6 <_dtoa_r+0x876>
 80100ec:	9b07      	ldr	r3, [sp, #28]
 80100ee:	2b02      	cmp	r3, #2
 80100f0:	dc3e      	bgt.n	8010170 <_dtoa_r+0x830>
 80100f2:	e060      	b.n	80101b6 <_dtoa_r+0x876>
 80100f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80100f6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80100fa:	e73c      	b.n	800ff76 <_dtoa_r+0x636>
 80100fc:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010100:	42a3      	cmp	r3, r4
 8010102:	bfbf      	itttt	lt
 8010104:	1ae2      	sublt	r2, r4, r3
 8010106:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010108:	189b      	addlt	r3, r3, r2
 801010a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801010c:	bfae      	itee	ge
 801010e:	1b1c      	subge	r4, r3, r4
 8010110:	4623      	movlt	r3, r4
 8010112:	2400      	movlt	r4, #0
 8010114:	f1ba 0f00 	cmp.w	sl, #0
 8010118:	bfb5      	itete	lt
 801011a:	9a05      	ldrlt	r2, [sp, #20]
 801011c:	9e05      	ldrge	r6, [sp, #20]
 801011e:	eba2 060a 	sublt.w	r6, r2, sl
 8010122:	4652      	movge	r2, sl
 8010124:	bfb8      	it	lt
 8010126:	2200      	movlt	r2, #0
 8010128:	e727      	b.n	800ff7a <_dtoa_r+0x63a>
 801012a:	9e05      	ldr	r6, [sp, #20]
 801012c:	9d08      	ldr	r5, [sp, #32]
 801012e:	461c      	mov	r4, r3
 8010130:	e730      	b.n	800ff94 <_dtoa_r+0x654>
 8010132:	461a      	mov	r2, r3
 8010134:	e758      	b.n	800ffe8 <_dtoa_r+0x6a8>
 8010136:	2300      	movs	r3, #0
 8010138:	e786      	b.n	8010048 <_dtoa_r+0x708>
 801013a:	9b02      	ldr	r3, [sp, #8]
 801013c:	e784      	b.n	8010048 <_dtoa_r+0x708>
 801013e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010140:	e783      	b.n	801004a <_dtoa_r+0x70a>
 8010142:	2300      	movs	r3, #0
 8010144:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010146:	e784      	b.n	8010052 <_dtoa_r+0x712>
 8010148:	d09d      	beq.n	8010086 <_dtoa_r+0x746>
 801014a:	9b05      	ldr	r3, [sp, #20]
 801014c:	321c      	adds	r2, #28
 801014e:	4413      	add	r3, r2
 8010150:	9305      	str	r3, [sp, #20]
 8010152:	9b06      	ldr	r3, [sp, #24]
 8010154:	4416      	add	r6, r2
 8010156:	4413      	add	r3, r2
 8010158:	e794      	b.n	8010084 <_dtoa_r+0x744>
 801015a:	4602      	mov	r2, r0
 801015c:	e7f5      	b.n	801014a <_dtoa_r+0x80a>
 801015e:	f1ba 0f00 	cmp.w	sl, #0
 8010162:	f8cd 8010 	str.w	r8, [sp, #16]
 8010166:	46d3      	mov	fp, sl
 8010168:	dc21      	bgt.n	80101ae <_dtoa_r+0x86e>
 801016a:	9b07      	ldr	r3, [sp, #28]
 801016c:	2b02      	cmp	r3, #2
 801016e:	dd1e      	ble.n	80101ae <_dtoa_r+0x86e>
 8010170:	f1bb 0f00 	cmp.w	fp, #0
 8010174:	f47f aeb7 	bne.w	800fee6 <_dtoa_r+0x5a6>
 8010178:	4621      	mov	r1, r4
 801017a:	465b      	mov	r3, fp
 801017c:	2205      	movs	r2, #5
 801017e:	4648      	mov	r0, r9
 8010180:	f000 f9e0 	bl	8010544 <__multadd>
 8010184:	4601      	mov	r1, r0
 8010186:	4604      	mov	r4, r0
 8010188:	9801      	ldr	r0, [sp, #4]
 801018a:	f000 fbf3 	bl	8010974 <__mcmp>
 801018e:	2800      	cmp	r0, #0
 8010190:	f77f aea9 	ble.w	800fee6 <_dtoa_r+0x5a6>
 8010194:	463e      	mov	r6, r7
 8010196:	2331      	movs	r3, #49	@ 0x31
 8010198:	f806 3b01 	strb.w	r3, [r6], #1
 801019c:	9b04      	ldr	r3, [sp, #16]
 801019e:	3301      	adds	r3, #1
 80101a0:	9304      	str	r3, [sp, #16]
 80101a2:	e6a4      	b.n	800feee <_dtoa_r+0x5ae>
 80101a4:	f8cd 8010 	str.w	r8, [sp, #16]
 80101a8:	4654      	mov	r4, sl
 80101aa:	4625      	mov	r5, r4
 80101ac:	e7f2      	b.n	8010194 <_dtoa_r+0x854>
 80101ae:	9b08      	ldr	r3, [sp, #32]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	f000 8103 	beq.w	80103bc <_dtoa_r+0xa7c>
 80101b6:	2e00      	cmp	r6, #0
 80101b8:	dd05      	ble.n	80101c6 <_dtoa_r+0x886>
 80101ba:	4629      	mov	r1, r5
 80101bc:	4632      	mov	r2, r6
 80101be:	4648      	mov	r0, r9
 80101c0:	f000 fb6c 	bl	801089c <__lshift>
 80101c4:	4605      	mov	r5, r0
 80101c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d058      	beq.n	801027e <_dtoa_r+0x93e>
 80101cc:	6869      	ldr	r1, [r5, #4]
 80101ce:	4648      	mov	r0, r9
 80101d0:	f000 f956 	bl	8010480 <_Balloc>
 80101d4:	4606      	mov	r6, r0
 80101d6:	b928      	cbnz	r0, 80101e4 <_dtoa_r+0x8a4>
 80101d8:	4b82      	ldr	r3, [pc, #520]	@ (80103e4 <_dtoa_r+0xaa4>)
 80101da:	4602      	mov	r2, r0
 80101dc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80101e0:	f7ff bbc7 	b.w	800f972 <_dtoa_r+0x32>
 80101e4:	692a      	ldr	r2, [r5, #16]
 80101e6:	3202      	adds	r2, #2
 80101e8:	0092      	lsls	r2, r2, #2
 80101ea:	f105 010c 	add.w	r1, r5, #12
 80101ee:	300c      	adds	r0, #12
 80101f0:	f7ff fb0f 	bl	800f812 <memcpy>
 80101f4:	2201      	movs	r2, #1
 80101f6:	4631      	mov	r1, r6
 80101f8:	4648      	mov	r0, r9
 80101fa:	f000 fb4f 	bl	801089c <__lshift>
 80101fe:	1c7b      	adds	r3, r7, #1
 8010200:	9305      	str	r3, [sp, #20]
 8010202:	eb07 030b 	add.w	r3, r7, fp
 8010206:	9309      	str	r3, [sp, #36]	@ 0x24
 8010208:	9b02      	ldr	r3, [sp, #8]
 801020a:	f003 0301 	and.w	r3, r3, #1
 801020e:	46a8      	mov	r8, r5
 8010210:	9308      	str	r3, [sp, #32]
 8010212:	4605      	mov	r5, r0
 8010214:	9b05      	ldr	r3, [sp, #20]
 8010216:	9801      	ldr	r0, [sp, #4]
 8010218:	4621      	mov	r1, r4
 801021a:	f103 3bff 	add.w	fp, r3, #4294967295
 801021e:	f7ff fb06 	bl	800f82e <quorem>
 8010222:	4641      	mov	r1, r8
 8010224:	9002      	str	r0, [sp, #8]
 8010226:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801022a:	9801      	ldr	r0, [sp, #4]
 801022c:	f000 fba2 	bl	8010974 <__mcmp>
 8010230:	462a      	mov	r2, r5
 8010232:	9006      	str	r0, [sp, #24]
 8010234:	4621      	mov	r1, r4
 8010236:	4648      	mov	r0, r9
 8010238:	f000 fbb8 	bl	80109ac <__mdiff>
 801023c:	68c2      	ldr	r2, [r0, #12]
 801023e:	4606      	mov	r6, r0
 8010240:	b9fa      	cbnz	r2, 8010282 <_dtoa_r+0x942>
 8010242:	4601      	mov	r1, r0
 8010244:	9801      	ldr	r0, [sp, #4]
 8010246:	f000 fb95 	bl	8010974 <__mcmp>
 801024a:	4602      	mov	r2, r0
 801024c:	4631      	mov	r1, r6
 801024e:	4648      	mov	r0, r9
 8010250:	920a      	str	r2, [sp, #40]	@ 0x28
 8010252:	f000 f955 	bl	8010500 <_Bfree>
 8010256:	9b07      	ldr	r3, [sp, #28]
 8010258:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801025a:	9e05      	ldr	r6, [sp, #20]
 801025c:	ea43 0102 	orr.w	r1, r3, r2
 8010260:	9b08      	ldr	r3, [sp, #32]
 8010262:	4319      	orrs	r1, r3
 8010264:	d10f      	bne.n	8010286 <_dtoa_r+0x946>
 8010266:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801026a:	d028      	beq.n	80102be <_dtoa_r+0x97e>
 801026c:	9b06      	ldr	r3, [sp, #24]
 801026e:	2b00      	cmp	r3, #0
 8010270:	dd02      	ble.n	8010278 <_dtoa_r+0x938>
 8010272:	9b02      	ldr	r3, [sp, #8]
 8010274:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010278:	f88b a000 	strb.w	sl, [fp]
 801027c:	e639      	b.n	800fef2 <_dtoa_r+0x5b2>
 801027e:	4628      	mov	r0, r5
 8010280:	e7bd      	b.n	80101fe <_dtoa_r+0x8be>
 8010282:	2201      	movs	r2, #1
 8010284:	e7e2      	b.n	801024c <_dtoa_r+0x90c>
 8010286:	9b06      	ldr	r3, [sp, #24]
 8010288:	2b00      	cmp	r3, #0
 801028a:	db04      	blt.n	8010296 <_dtoa_r+0x956>
 801028c:	9907      	ldr	r1, [sp, #28]
 801028e:	430b      	orrs	r3, r1
 8010290:	9908      	ldr	r1, [sp, #32]
 8010292:	430b      	orrs	r3, r1
 8010294:	d120      	bne.n	80102d8 <_dtoa_r+0x998>
 8010296:	2a00      	cmp	r2, #0
 8010298:	ddee      	ble.n	8010278 <_dtoa_r+0x938>
 801029a:	9901      	ldr	r1, [sp, #4]
 801029c:	2201      	movs	r2, #1
 801029e:	4648      	mov	r0, r9
 80102a0:	f000 fafc 	bl	801089c <__lshift>
 80102a4:	4621      	mov	r1, r4
 80102a6:	9001      	str	r0, [sp, #4]
 80102a8:	f000 fb64 	bl	8010974 <__mcmp>
 80102ac:	2800      	cmp	r0, #0
 80102ae:	dc03      	bgt.n	80102b8 <_dtoa_r+0x978>
 80102b0:	d1e2      	bne.n	8010278 <_dtoa_r+0x938>
 80102b2:	f01a 0f01 	tst.w	sl, #1
 80102b6:	d0df      	beq.n	8010278 <_dtoa_r+0x938>
 80102b8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80102bc:	d1d9      	bne.n	8010272 <_dtoa_r+0x932>
 80102be:	2339      	movs	r3, #57	@ 0x39
 80102c0:	f88b 3000 	strb.w	r3, [fp]
 80102c4:	4633      	mov	r3, r6
 80102c6:	461e      	mov	r6, r3
 80102c8:	3b01      	subs	r3, #1
 80102ca:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80102ce:	2a39      	cmp	r2, #57	@ 0x39
 80102d0:	d053      	beq.n	801037a <_dtoa_r+0xa3a>
 80102d2:	3201      	adds	r2, #1
 80102d4:	701a      	strb	r2, [r3, #0]
 80102d6:	e60c      	b.n	800fef2 <_dtoa_r+0x5b2>
 80102d8:	2a00      	cmp	r2, #0
 80102da:	dd07      	ble.n	80102ec <_dtoa_r+0x9ac>
 80102dc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80102e0:	d0ed      	beq.n	80102be <_dtoa_r+0x97e>
 80102e2:	f10a 0301 	add.w	r3, sl, #1
 80102e6:	f88b 3000 	strb.w	r3, [fp]
 80102ea:	e602      	b.n	800fef2 <_dtoa_r+0x5b2>
 80102ec:	9b05      	ldr	r3, [sp, #20]
 80102ee:	9a05      	ldr	r2, [sp, #20]
 80102f0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80102f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d029      	beq.n	801034e <_dtoa_r+0xa0e>
 80102fa:	9901      	ldr	r1, [sp, #4]
 80102fc:	2300      	movs	r3, #0
 80102fe:	220a      	movs	r2, #10
 8010300:	4648      	mov	r0, r9
 8010302:	f000 f91f 	bl	8010544 <__multadd>
 8010306:	45a8      	cmp	r8, r5
 8010308:	9001      	str	r0, [sp, #4]
 801030a:	f04f 0300 	mov.w	r3, #0
 801030e:	f04f 020a 	mov.w	r2, #10
 8010312:	4641      	mov	r1, r8
 8010314:	4648      	mov	r0, r9
 8010316:	d107      	bne.n	8010328 <_dtoa_r+0x9e8>
 8010318:	f000 f914 	bl	8010544 <__multadd>
 801031c:	4680      	mov	r8, r0
 801031e:	4605      	mov	r5, r0
 8010320:	9b05      	ldr	r3, [sp, #20]
 8010322:	3301      	adds	r3, #1
 8010324:	9305      	str	r3, [sp, #20]
 8010326:	e775      	b.n	8010214 <_dtoa_r+0x8d4>
 8010328:	f000 f90c 	bl	8010544 <__multadd>
 801032c:	4629      	mov	r1, r5
 801032e:	4680      	mov	r8, r0
 8010330:	2300      	movs	r3, #0
 8010332:	220a      	movs	r2, #10
 8010334:	4648      	mov	r0, r9
 8010336:	f000 f905 	bl	8010544 <__multadd>
 801033a:	4605      	mov	r5, r0
 801033c:	e7f0      	b.n	8010320 <_dtoa_r+0x9e0>
 801033e:	f1bb 0f00 	cmp.w	fp, #0
 8010342:	bfcc      	ite	gt
 8010344:	465e      	movgt	r6, fp
 8010346:	2601      	movle	r6, #1
 8010348:	443e      	add	r6, r7
 801034a:	f04f 0800 	mov.w	r8, #0
 801034e:	9901      	ldr	r1, [sp, #4]
 8010350:	2201      	movs	r2, #1
 8010352:	4648      	mov	r0, r9
 8010354:	f000 faa2 	bl	801089c <__lshift>
 8010358:	4621      	mov	r1, r4
 801035a:	9001      	str	r0, [sp, #4]
 801035c:	f000 fb0a 	bl	8010974 <__mcmp>
 8010360:	2800      	cmp	r0, #0
 8010362:	dcaf      	bgt.n	80102c4 <_dtoa_r+0x984>
 8010364:	d102      	bne.n	801036c <_dtoa_r+0xa2c>
 8010366:	f01a 0f01 	tst.w	sl, #1
 801036a:	d1ab      	bne.n	80102c4 <_dtoa_r+0x984>
 801036c:	4633      	mov	r3, r6
 801036e:	461e      	mov	r6, r3
 8010370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010374:	2a30      	cmp	r2, #48	@ 0x30
 8010376:	d0fa      	beq.n	801036e <_dtoa_r+0xa2e>
 8010378:	e5bb      	b.n	800fef2 <_dtoa_r+0x5b2>
 801037a:	429f      	cmp	r7, r3
 801037c:	d1a3      	bne.n	80102c6 <_dtoa_r+0x986>
 801037e:	9b04      	ldr	r3, [sp, #16]
 8010380:	3301      	adds	r3, #1
 8010382:	9304      	str	r3, [sp, #16]
 8010384:	2331      	movs	r3, #49	@ 0x31
 8010386:	703b      	strb	r3, [r7, #0]
 8010388:	e5b3      	b.n	800fef2 <_dtoa_r+0x5b2>
 801038a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801038c:	4f16      	ldr	r7, [pc, #88]	@ (80103e8 <_dtoa_r+0xaa8>)
 801038e:	b11b      	cbz	r3, 8010398 <_dtoa_r+0xa58>
 8010390:	f107 0308 	add.w	r3, r7, #8
 8010394:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010396:	6013      	str	r3, [r2, #0]
 8010398:	4638      	mov	r0, r7
 801039a:	b011      	add	sp, #68	@ 0x44
 801039c:	ecbd 8b02 	vpop	{d8}
 80103a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103a4:	9b07      	ldr	r3, [sp, #28]
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	f77f ae36 	ble.w	8010018 <_dtoa_r+0x6d8>
 80103ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103b0:	2001      	movs	r0, #1
 80103b2:	e656      	b.n	8010062 <_dtoa_r+0x722>
 80103b4:	f1bb 0f00 	cmp.w	fp, #0
 80103b8:	f77f aed7 	ble.w	801016a <_dtoa_r+0x82a>
 80103bc:	463e      	mov	r6, r7
 80103be:	9801      	ldr	r0, [sp, #4]
 80103c0:	4621      	mov	r1, r4
 80103c2:	f7ff fa34 	bl	800f82e <quorem>
 80103c6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80103ca:	f806 ab01 	strb.w	sl, [r6], #1
 80103ce:	1bf2      	subs	r2, r6, r7
 80103d0:	4593      	cmp	fp, r2
 80103d2:	ddb4      	ble.n	801033e <_dtoa_r+0x9fe>
 80103d4:	9901      	ldr	r1, [sp, #4]
 80103d6:	2300      	movs	r3, #0
 80103d8:	220a      	movs	r2, #10
 80103da:	4648      	mov	r0, r9
 80103dc:	f000 f8b2 	bl	8010544 <__multadd>
 80103e0:	9001      	str	r0, [sp, #4]
 80103e2:	e7ec      	b.n	80103be <_dtoa_r+0xa7e>
 80103e4:	08013e90 	.word	0x08013e90
 80103e8:	08013e14 	.word	0x08013e14

080103ec <_free_r>:
 80103ec:	b538      	push	{r3, r4, r5, lr}
 80103ee:	4605      	mov	r5, r0
 80103f0:	2900      	cmp	r1, #0
 80103f2:	d041      	beq.n	8010478 <_free_r+0x8c>
 80103f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103f8:	1f0c      	subs	r4, r1, #4
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	bfb8      	it	lt
 80103fe:	18e4      	addlt	r4, r4, r3
 8010400:	f7fe fbfa 	bl	800ebf8 <__malloc_lock>
 8010404:	4a1d      	ldr	r2, [pc, #116]	@ (801047c <_free_r+0x90>)
 8010406:	6813      	ldr	r3, [r2, #0]
 8010408:	b933      	cbnz	r3, 8010418 <_free_r+0x2c>
 801040a:	6063      	str	r3, [r4, #4]
 801040c:	6014      	str	r4, [r2, #0]
 801040e:	4628      	mov	r0, r5
 8010410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010414:	f7fe bbf6 	b.w	800ec04 <__malloc_unlock>
 8010418:	42a3      	cmp	r3, r4
 801041a:	d908      	bls.n	801042e <_free_r+0x42>
 801041c:	6820      	ldr	r0, [r4, #0]
 801041e:	1821      	adds	r1, r4, r0
 8010420:	428b      	cmp	r3, r1
 8010422:	bf01      	itttt	eq
 8010424:	6819      	ldreq	r1, [r3, #0]
 8010426:	685b      	ldreq	r3, [r3, #4]
 8010428:	1809      	addeq	r1, r1, r0
 801042a:	6021      	streq	r1, [r4, #0]
 801042c:	e7ed      	b.n	801040a <_free_r+0x1e>
 801042e:	461a      	mov	r2, r3
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	b10b      	cbz	r3, 8010438 <_free_r+0x4c>
 8010434:	42a3      	cmp	r3, r4
 8010436:	d9fa      	bls.n	801042e <_free_r+0x42>
 8010438:	6811      	ldr	r1, [r2, #0]
 801043a:	1850      	adds	r0, r2, r1
 801043c:	42a0      	cmp	r0, r4
 801043e:	d10b      	bne.n	8010458 <_free_r+0x6c>
 8010440:	6820      	ldr	r0, [r4, #0]
 8010442:	4401      	add	r1, r0
 8010444:	1850      	adds	r0, r2, r1
 8010446:	4283      	cmp	r3, r0
 8010448:	6011      	str	r1, [r2, #0]
 801044a:	d1e0      	bne.n	801040e <_free_r+0x22>
 801044c:	6818      	ldr	r0, [r3, #0]
 801044e:	685b      	ldr	r3, [r3, #4]
 8010450:	6053      	str	r3, [r2, #4]
 8010452:	4408      	add	r0, r1
 8010454:	6010      	str	r0, [r2, #0]
 8010456:	e7da      	b.n	801040e <_free_r+0x22>
 8010458:	d902      	bls.n	8010460 <_free_r+0x74>
 801045a:	230c      	movs	r3, #12
 801045c:	602b      	str	r3, [r5, #0]
 801045e:	e7d6      	b.n	801040e <_free_r+0x22>
 8010460:	6820      	ldr	r0, [r4, #0]
 8010462:	1821      	adds	r1, r4, r0
 8010464:	428b      	cmp	r3, r1
 8010466:	bf04      	itt	eq
 8010468:	6819      	ldreq	r1, [r3, #0]
 801046a:	685b      	ldreq	r3, [r3, #4]
 801046c:	6063      	str	r3, [r4, #4]
 801046e:	bf04      	itt	eq
 8010470:	1809      	addeq	r1, r1, r0
 8010472:	6021      	streq	r1, [r4, #0]
 8010474:	6054      	str	r4, [r2, #4]
 8010476:	e7ca      	b.n	801040e <_free_r+0x22>
 8010478:	bd38      	pop	{r3, r4, r5, pc}
 801047a:	bf00      	nop
 801047c:	24005f98 	.word	0x24005f98

08010480 <_Balloc>:
 8010480:	b570      	push	{r4, r5, r6, lr}
 8010482:	69c6      	ldr	r6, [r0, #28]
 8010484:	4604      	mov	r4, r0
 8010486:	460d      	mov	r5, r1
 8010488:	b976      	cbnz	r6, 80104a8 <_Balloc+0x28>
 801048a:	2010      	movs	r0, #16
 801048c:	f7fe fb0a 	bl	800eaa4 <malloc>
 8010490:	4602      	mov	r2, r0
 8010492:	61e0      	str	r0, [r4, #28]
 8010494:	b920      	cbnz	r0, 80104a0 <_Balloc+0x20>
 8010496:	4b18      	ldr	r3, [pc, #96]	@ (80104f8 <_Balloc+0x78>)
 8010498:	4818      	ldr	r0, [pc, #96]	@ (80104fc <_Balloc+0x7c>)
 801049a:	216b      	movs	r1, #107	@ 0x6b
 801049c:	f000 fd90 	bl	8010fc0 <__assert_func>
 80104a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104a4:	6006      	str	r6, [r0, #0]
 80104a6:	60c6      	str	r6, [r0, #12]
 80104a8:	69e6      	ldr	r6, [r4, #28]
 80104aa:	68f3      	ldr	r3, [r6, #12]
 80104ac:	b183      	cbz	r3, 80104d0 <_Balloc+0x50>
 80104ae:	69e3      	ldr	r3, [r4, #28]
 80104b0:	68db      	ldr	r3, [r3, #12]
 80104b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80104b6:	b9b8      	cbnz	r0, 80104e8 <_Balloc+0x68>
 80104b8:	2101      	movs	r1, #1
 80104ba:	fa01 f605 	lsl.w	r6, r1, r5
 80104be:	1d72      	adds	r2, r6, #5
 80104c0:	0092      	lsls	r2, r2, #2
 80104c2:	4620      	mov	r0, r4
 80104c4:	f000 fd9a 	bl	8010ffc <_calloc_r>
 80104c8:	b160      	cbz	r0, 80104e4 <_Balloc+0x64>
 80104ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80104ce:	e00e      	b.n	80104ee <_Balloc+0x6e>
 80104d0:	2221      	movs	r2, #33	@ 0x21
 80104d2:	2104      	movs	r1, #4
 80104d4:	4620      	mov	r0, r4
 80104d6:	f000 fd91 	bl	8010ffc <_calloc_r>
 80104da:	69e3      	ldr	r3, [r4, #28]
 80104dc:	60f0      	str	r0, [r6, #12]
 80104de:	68db      	ldr	r3, [r3, #12]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d1e4      	bne.n	80104ae <_Balloc+0x2e>
 80104e4:	2000      	movs	r0, #0
 80104e6:	bd70      	pop	{r4, r5, r6, pc}
 80104e8:	6802      	ldr	r2, [r0, #0]
 80104ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80104ee:	2300      	movs	r3, #0
 80104f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80104f4:	e7f7      	b.n	80104e6 <_Balloc+0x66>
 80104f6:	bf00      	nop
 80104f8:	08013e21 	.word	0x08013e21
 80104fc:	08013ea1 	.word	0x08013ea1

08010500 <_Bfree>:
 8010500:	b570      	push	{r4, r5, r6, lr}
 8010502:	69c6      	ldr	r6, [r0, #28]
 8010504:	4605      	mov	r5, r0
 8010506:	460c      	mov	r4, r1
 8010508:	b976      	cbnz	r6, 8010528 <_Bfree+0x28>
 801050a:	2010      	movs	r0, #16
 801050c:	f7fe faca 	bl	800eaa4 <malloc>
 8010510:	4602      	mov	r2, r0
 8010512:	61e8      	str	r0, [r5, #28]
 8010514:	b920      	cbnz	r0, 8010520 <_Bfree+0x20>
 8010516:	4b09      	ldr	r3, [pc, #36]	@ (801053c <_Bfree+0x3c>)
 8010518:	4809      	ldr	r0, [pc, #36]	@ (8010540 <_Bfree+0x40>)
 801051a:	218f      	movs	r1, #143	@ 0x8f
 801051c:	f000 fd50 	bl	8010fc0 <__assert_func>
 8010520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010524:	6006      	str	r6, [r0, #0]
 8010526:	60c6      	str	r6, [r0, #12]
 8010528:	b13c      	cbz	r4, 801053a <_Bfree+0x3a>
 801052a:	69eb      	ldr	r3, [r5, #28]
 801052c:	6862      	ldr	r2, [r4, #4]
 801052e:	68db      	ldr	r3, [r3, #12]
 8010530:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010534:	6021      	str	r1, [r4, #0]
 8010536:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801053a:	bd70      	pop	{r4, r5, r6, pc}
 801053c:	08013e21 	.word	0x08013e21
 8010540:	08013ea1 	.word	0x08013ea1

08010544 <__multadd>:
 8010544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010548:	690d      	ldr	r5, [r1, #16]
 801054a:	4607      	mov	r7, r0
 801054c:	460c      	mov	r4, r1
 801054e:	461e      	mov	r6, r3
 8010550:	f101 0c14 	add.w	ip, r1, #20
 8010554:	2000      	movs	r0, #0
 8010556:	f8dc 3000 	ldr.w	r3, [ip]
 801055a:	b299      	uxth	r1, r3
 801055c:	fb02 6101 	mla	r1, r2, r1, r6
 8010560:	0c1e      	lsrs	r6, r3, #16
 8010562:	0c0b      	lsrs	r3, r1, #16
 8010564:	fb02 3306 	mla	r3, r2, r6, r3
 8010568:	b289      	uxth	r1, r1
 801056a:	3001      	adds	r0, #1
 801056c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010570:	4285      	cmp	r5, r0
 8010572:	f84c 1b04 	str.w	r1, [ip], #4
 8010576:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801057a:	dcec      	bgt.n	8010556 <__multadd+0x12>
 801057c:	b30e      	cbz	r6, 80105c2 <__multadd+0x7e>
 801057e:	68a3      	ldr	r3, [r4, #8]
 8010580:	42ab      	cmp	r3, r5
 8010582:	dc19      	bgt.n	80105b8 <__multadd+0x74>
 8010584:	6861      	ldr	r1, [r4, #4]
 8010586:	4638      	mov	r0, r7
 8010588:	3101      	adds	r1, #1
 801058a:	f7ff ff79 	bl	8010480 <_Balloc>
 801058e:	4680      	mov	r8, r0
 8010590:	b928      	cbnz	r0, 801059e <__multadd+0x5a>
 8010592:	4602      	mov	r2, r0
 8010594:	4b0c      	ldr	r3, [pc, #48]	@ (80105c8 <__multadd+0x84>)
 8010596:	480d      	ldr	r0, [pc, #52]	@ (80105cc <__multadd+0x88>)
 8010598:	21ba      	movs	r1, #186	@ 0xba
 801059a:	f000 fd11 	bl	8010fc0 <__assert_func>
 801059e:	6922      	ldr	r2, [r4, #16]
 80105a0:	3202      	adds	r2, #2
 80105a2:	f104 010c 	add.w	r1, r4, #12
 80105a6:	0092      	lsls	r2, r2, #2
 80105a8:	300c      	adds	r0, #12
 80105aa:	f7ff f932 	bl	800f812 <memcpy>
 80105ae:	4621      	mov	r1, r4
 80105b0:	4638      	mov	r0, r7
 80105b2:	f7ff ffa5 	bl	8010500 <_Bfree>
 80105b6:	4644      	mov	r4, r8
 80105b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80105bc:	3501      	adds	r5, #1
 80105be:	615e      	str	r6, [r3, #20]
 80105c0:	6125      	str	r5, [r4, #16]
 80105c2:	4620      	mov	r0, r4
 80105c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105c8:	08013e90 	.word	0x08013e90
 80105cc:	08013ea1 	.word	0x08013ea1

080105d0 <__hi0bits>:
 80105d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80105d4:	4603      	mov	r3, r0
 80105d6:	bf36      	itet	cc
 80105d8:	0403      	lslcc	r3, r0, #16
 80105da:	2000      	movcs	r0, #0
 80105dc:	2010      	movcc	r0, #16
 80105de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80105e2:	bf3c      	itt	cc
 80105e4:	021b      	lslcc	r3, r3, #8
 80105e6:	3008      	addcc	r0, #8
 80105e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80105ec:	bf3c      	itt	cc
 80105ee:	011b      	lslcc	r3, r3, #4
 80105f0:	3004      	addcc	r0, #4
 80105f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80105f6:	bf3c      	itt	cc
 80105f8:	009b      	lslcc	r3, r3, #2
 80105fa:	3002      	addcc	r0, #2
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	db05      	blt.n	801060c <__hi0bits+0x3c>
 8010600:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010604:	f100 0001 	add.w	r0, r0, #1
 8010608:	bf08      	it	eq
 801060a:	2020      	moveq	r0, #32
 801060c:	4770      	bx	lr

0801060e <__lo0bits>:
 801060e:	6803      	ldr	r3, [r0, #0]
 8010610:	4602      	mov	r2, r0
 8010612:	f013 0007 	ands.w	r0, r3, #7
 8010616:	d00b      	beq.n	8010630 <__lo0bits+0x22>
 8010618:	07d9      	lsls	r1, r3, #31
 801061a:	d421      	bmi.n	8010660 <__lo0bits+0x52>
 801061c:	0798      	lsls	r0, r3, #30
 801061e:	bf49      	itett	mi
 8010620:	085b      	lsrmi	r3, r3, #1
 8010622:	089b      	lsrpl	r3, r3, #2
 8010624:	2001      	movmi	r0, #1
 8010626:	6013      	strmi	r3, [r2, #0]
 8010628:	bf5c      	itt	pl
 801062a:	6013      	strpl	r3, [r2, #0]
 801062c:	2002      	movpl	r0, #2
 801062e:	4770      	bx	lr
 8010630:	b299      	uxth	r1, r3
 8010632:	b909      	cbnz	r1, 8010638 <__lo0bits+0x2a>
 8010634:	0c1b      	lsrs	r3, r3, #16
 8010636:	2010      	movs	r0, #16
 8010638:	b2d9      	uxtb	r1, r3
 801063a:	b909      	cbnz	r1, 8010640 <__lo0bits+0x32>
 801063c:	3008      	adds	r0, #8
 801063e:	0a1b      	lsrs	r3, r3, #8
 8010640:	0719      	lsls	r1, r3, #28
 8010642:	bf04      	itt	eq
 8010644:	091b      	lsreq	r3, r3, #4
 8010646:	3004      	addeq	r0, #4
 8010648:	0799      	lsls	r1, r3, #30
 801064a:	bf04      	itt	eq
 801064c:	089b      	lsreq	r3, r3, #2
 801064e:	3002      	addeq	r0, #2
 8010650:	07d9      	lsls	r1, r3, #31
 8010652:	d403      	bmi.n	801065c <__lo0bits+0x4e>
 8010654:	085b      	lsrs	r3, r3, #1
 8010656:	f100 0001 	add.w	r0, r0, #1
 801065a:	d003      	beq.n	8010664 <__lo0bits+0x56>
 801065c:	6013      	str	r3, [r2, #0]
 801065e:	4770      	bx	lr
 8010660:	2000      	movs	r0, #0
 8010662:	4770      	bx	lr
 8010664:	2020      	movs	r0, #32
 8010666:	4770      	bx	lr

08010668 <__i2b>:
 8010668:	b510      	push	{r4, lr}
 801066a:	460c      	mov	r4, r1
 801066c:	2101      	movs	r1, #1
 801066e:	f7ff ff07 	bl	8010480 <_Balloc>
 8010672:	4602      	mov	r2, r0
 8010674:	b928      	cbnz	r0, 8010682 <__i2b+0x1a>
 8010676:	4b05      	ldr	r3, [pc, #20]	@ (801068c <__i2b+0x24>)
 8010678:	4805      	ldr	r0, [pc, #20]	@ (8010690 <__i2b+0x28>)
 801067a:	f240 1145 	movw	r1, #325	@ 0x145
 801067e:	f000 fc9f 	bl	8010fc0 <__assert_func>
 8010682:	2301      	movs	r3, #1
 8010684:	6144      	str	r4, [r0, #20]
 8010686:	6103      	str	r3, [r0, #16]
 8010688:	bd10      	pop	{r4, pc}
 801068a:	bf00      	nop
 801068c:	08013e90 	.word	0x08013e90
 8010690:	08013ea1 	.word	0x08013ea1

08010694 <__multiply>:
 8010694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010698:	4614      	mov	r4, r2
 801069a:	690a      	ldr	r2, [r1, #16]
 801069c:	6923      	ldr	r3, [r4, #16]
 801069e:	429a      	cmp	r2, r3
 80106a0:	bfa8      	it	ge
 80106a2:	4623      	movge	r3, r4
 80106a4:	460f      	mov	r7, r1
 80106a6:	bfa4      	itt	ge
 80106a8:	460c      	movge	r4, r1
 80106aa:	461f      	movge	r7, r3
 80106ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80106b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80106b4:	68a3      	ldr	r3, [r4, #8]
 80106b6:	6861      	ldr	r1, [r4, #4]
 80106b8:	eb0a 0609 	add.w	r6, sl, r9
 80106bc:	42b3      	cmp	r3, r6
 80106be:	b085      	sub	sp, #20
 80106c0:	bfb8      	it	lt
 80106c2:	3101      	addlt	r1, #1
 80106c4:	f7ff fedc 	bl	8010480 <_Balloc>
 80106c8:	b930      	cbnz	r0, 80106d8 <__multiply+0x44>
 80106ca:	4602      	mov	r2, r0
 80106cc:	4b44      	ldr	r3, [pc, #272]	@ (80107e0 <__multiply+0x14c>)
 80106ce:	4845      	ldr	r0, [pc, #276]	@ (80107e4 <__multiply+0x150>)
 80106d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80106d4:	f000 fc74 	bl	8010fc0 <__assert_func>
 80106d8:	f100 0514 	add.w	r5, r0, #20
 80106dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80106e0:	462b      	mov	r3, r5
 80106e2:	2200      	movs	r2, #0
 80106e4:	4543      	cmp	r3, r8
 80106e6:	d321      	bcc.n	801072c <__multiply+0x98>
 80106e8:	f107 0114 	add.w	r1, r7, #20
 80106ec:	f104 0214 	add.w	r2, r4, #20
 80106f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80106f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80106f8:	9302      	str	r3, [sp, #8]
 80106fa:	1b13      	subs	r3, r2, r4
 80106fc:	3b15      	subs	r3, #21
 80106fe:	f023 0303 	bic.w	r3, r3, #3
 8010702:	3304      	adds	r3, #4
 8010704:	f104 0715 	add.w	r7, r4, #21
 8010708:	42ba      	cmp	r2, r7
 801070a:	bf38      	it	cc
 801070c:	2304      	movcc	r3, #4
 801070e:	9301      	str	r3, [sp, #4]
 8010710:	9b02      	ldr	r3, [sp, #8]
 8010712:	9103      	str	r1, [sp, #12]
 8010714:	428b      	cmp	r3, r1
 8010716:	d80c      	bhi.n	8010732 <__multiply+0x9e>
 8010718:	2e00      	cmp	r6, #0
 801071a:	dd03      	ble.n	8010724 <__multiply+0x90>
 801071c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010720:	2b00      	cmp	r3, #0
 8010722:	d05b      	beq.n	80107dc <__multiply+0x148>
 8010724:	6106      	str	r6, [r0, #16]
 8010726:	b005      	add	sp, #20
 8010728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801072c:	f843 2b04 	str.w	r2, [r3], #4
 8010730:	e7d8      	b.n	80106e4 <__multiply+0x50>
 8010732:	f8b1 a000 	ldrh.w	sl, [r1]
 8010736:	f1ba 0f00 	cmp.w	sl, #0
 801073a:	d024      	beq.n	8010786 <__multiply+0xf2>
 801073c:	f104 0e14 	add.w	lr, r4, #20
 8010740:	46a9      	mov	r9, r5
 8010742:	f04f 0c00 	mov.w	ip, #0
 8010746:	f85e 7b04 	ldr.w	r7, [lr], #4
 801074a:	f8d9 3000 	ldr.w	r3, [r9]
 801074e:	fa1f fb87 	uxth.w	fp, r7
 8010752:	b29b      	uxth	r3, r3
 8010754:	fb0a 330b 	mla	r3, sl, fp, r3
 8010758:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801075c:	f8d9 7000 	ldr.w	r7, [r9]
 8010760:	4463      	add	r3, ip
 8010762:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010766:	fb0a c70b 	mla	r7, sl, fp, ip
 801076a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801076e:	b29b      	uxth	r3, r3
 8010770:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010774:	4572      	cmp	r2, lr
 8010776:	f849 3b04 	str.w	r3, [r9], #4
 801077a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801077e:	d8e2      	bhi.n	8010746 <__multiply+0xb2>
 8010780:	9b01      	ldr	r3, [sp, #4]
 8010782:	f845 c003 	str.w	ip, [r5, r3]
 8010786:	9b03      	ldr	r3, [sp, #12]
 8010788:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801078c:	3104      	adds	r1, #4
 801078e:	f1b9 0f00 	cmp.w	r9, #0
 8010792:	d021      	beq.n	80107d8 <__multiply+0x144>
 8010794:	682b      	ldr	r3, [r5, #0]
 8010796:	f104 0c14 	add.w	ip, r4, #20
 801079a:	46ae      	mov	lr, r5
 801079c:	f04f 0a00 	mov.w	sl, #0
 80107a0:	f8bc b000 	ldrh.w	fp, [ip]
 80107a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80107a8:	fb09 770b 	mla	r7, r9, fp, r7
 80107ac:	4457      	add	r7, sl
 80107ae:	b29b      	uxth	r3, r3
 80107b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80107b4:	f84e 3b04 	str.w	r3, [lr], #4
 80107b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80107bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80107c0:	f8be 3000 	ldrh.w	r3, [lr]
 80107c4:	fb09 330a 	mla	r3, r9, sl, r3
 80107c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80107cc:	4562      	cmp	r2, ip
 80107ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80107d2:	d8e5      	bhi.n	80107a0 <__multiply+0x10c>
 80107d4:	9f01      	ldr	r7, [sp, #4]
 80107d6:	51eb      	str	r3, [r5, r7]
 80107d8:	3504      	adds	r5, #4
 80107da:	e799      	b.n	8010710 <__multiply+0x7c>
 80107dc:	3e01      	subs	r6, #1
 80107de:	e79b      	b.n	8010718 <__multiply+0x84>
 80107e0:	08013e90 	.word	0x08013e90
 80107e4:	08013ea1 	.word	0x08013ea1

080107e8 <__pow5mult>:
 80107e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107ec:	4615      	mov	r5, r2
 80107ee:	f012 0203 	ands.w	r2, r2, #3
 80107f2:	4607      	mov	r7, r0
 80107f4:	460e      	mov	r6, r1
 80107f6:	d007      	beq.n	8010808 <__pow5mult+0x20>
 80107f8:	4c25      	ldr	r4, [pc, #148]	@ (8010890 <__pow5mult+0xa8>)
 80107fa:	3a01      	subs	r2, #1
 80107fc:	2300      	movs	r3, #0
 80107fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010802:	f7ff fe9f 	bl	8010544 <__multadd>
 8010806:	4606      	mov	r6, r0
 8010808:	10ad      	asrs	r5, r5, #2
 801080a:	d03d      	beq.n	8010888 <__pow5mult+0xa0>
 801080c:	69fc      	ldr	r4, [r7, #28]
 801080e:	b97c      	cbnz	r4, 8010830 <__pow5mult+0x48>
 8010810:	2010      	movs	r0, #16
 8010812:	f7fe f947 	bl	800eaa4 <malloc>
 8010816:	4602      	mov	r2, r0
 8010818:	61f8      	str	r0, [r7, #28]
 801081a:	b928      	cbnz	r0, 8010828 <__pow5mult+0x40>
 801081c:	4b1d      	ldr	r3, [pc, #116]	@ (8010894 <__pow5mult+0xac>)
 801081e:	481e      	ldr	r0, [pc, #120]	@ (8010898 <__pow5mult+0xb0>)
 8010820:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010824:	f000 fbcc 	bl	8010fc0 <__assert_func>
 8010828:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801082c:	6004      	str	r4, [r0, #0]
 801082e:	60c4      	str	r4, [r0, #12]
 8010830:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010834:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010838:	b94c      	cbnz	r4, 801084e <__pow5mult+0x66>
 801083a:	f240 2171 	movw	r1, #625	@ 0x271
 801083e:	4638      	mov	r0, r7
 8010840:	f7ff ff12 	bl	8010668 <__i2b>
 8010844:	2300      	movs	r3, #0
 8010846:	f8c8 0008 	str.w	r0, [r8, #8]
 801084a:	4604      	mov	r4, r0
 801084c:	6003      	str	r3, [r0, #0]
 801084e:	f04f 0900 	mov.w	r9, #0
 8010852:	07eb      	lsls	r3, r5, #31
 8010854:	d50a      	bpl.n	801086c <__pow5mult+0x84>
 8010856:	4631      	mov	r1, r6
 8010858:	4622      	mov	r2, r4
 801085a:	4638      	mov	r0, r7
 801085c:	f7ff ff1a 	bl	8010694 <__multiply>
 8010860:	4631      	mov	r1, r6
 8010862:	4680      	mov	r8, r0
 8010864:	4638      	mov	r0, r7
 8010866:	f7ff fe4b 	bl	8010500 <_Bfree>
 801086a:	4646      	mov	r6, r8
 801086c:	106d      	asrs	r5, r5, #1
 801086e:	d00b      	beq.n	8010888 <__pow5mult+0xa0>
 8010870:	6820      	ldr	r0, [r4, #0]
 8010872:	b938      	cbnz	r0, 8010884 <__pow5mult+0x9c>
 8010874:	4622      	mov	r2, r4
 8010876:	4621      	mov	r1, r4
 8010878:	4638      	mov	r0, r7
 801087a:	f7ff ff0b 	bl	8010694 <__multiply>
 801087e:	6020      	str	r0, [r4, #0]
 8010880:	f8c0 9000 	str.w	r9, [r0]
 8010884:	4604      	mov	r4, r0
 8010886:	e7e4      	b.n	8010852 <__pow5mult+0x6a>
 8010888:	4630      	mov	r0, r6
 801088a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801088e:	bf00      	nop
 8010890:	08013efc 	.word	0x08013efc
 8010894:	08013e21 	.word	0x08013e21
 8010898:	08013ea1 	.word	0x08013ea1

0801089c <__lshift>:
 801089c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108a0:	460c      	mov	r4, r1
 80108a2:	6849      	ldr	r1, [r1, #4]
 80108a4:	6923      	ldr	r3, [r4, #16]
 80108a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80108aa:	68a3      	ldr	r3, [r4, #8]
 80108ac:	4607      	mov	r7, r0
 80108ae:	4691      	mov	r9, r2
 80108b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80108b4:	f108 0601 	add.w	r6, r8, #1
 80108b8:	42b3      	cmp	r3, r6
 80108ba:	db0b      	blt.n	80108d4 <__lshift+0x38>
 80108bc:	4638      	mov	r0, r7
 80108be:	f7ff fddf 	bl	8010480 <_Balloc>
 80108c2:	4605      	mov	r5, r0
 80108c4:	b948      	cbnz	r0, 80108da <__lshift+0x3e>
 80108c6:	4602      	mov	r2, r0
 80108c8:	4b28      	ldr	r3, [pc, #160]	@ (801096c <__lshift+0xd0>)
 80108ca:	4829      	ldr	r0, [pc, #164]	@ (8010970 <__lshift+0xd4>)
 80108cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80108d0:	f000 fb76 	bl	8010fc0 <__assert_func>
 80108d4:	3101      	adds	r1, #1
 80108d6:	005b      	lsls	r3, r3, #1
 80108d8:	e7ee      	b.n	80108b8 <__lshift+0x1c>
 80108da:	2300      	movs	r3, #0
 80108dc:	f100 0114 	add.w	r1, r0, #20
 80108e0:	f100 0210 	add.w	r2, r0, #16
 80108e4:	4618      	mov	r0, r3
 80108e6:	4553      	cmp	r3, sl
 80108e8:	db33      	blt.n	8010952 <__lshift+0xb6>
 80108ea:	6920      	ldr	r0, [r4, #16]
 80108ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80108f0:	f104 0314 	add.w	r3, r4, #20
 80108f4:	f019 091f 	ands.w	r9, r9, #31
 80108f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80108fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010900:	d02b      	beq.n	801095a <__lshift+0xbe>
 8010902:	f1c9 0e20 	rsb	lr, r9, #32
 8010906:	468a      	mov	sl, r1
 8010908:	2200      	movs	r2, #0
 801090a:	6818      	ldr	r0, [r3, #0]
 801090c:	fa00 f009 	lsl.w	r0, r0, r9
 8010910:	4310      	orrs	r0, r2
 8010912:	f84a 0b04 	str.w	r0, [sl], #4
 8010916:	f853 2b04 	ldr.w	r2, [r3], #4
 801091a:	459c      	cmp	ip, r3
 801091c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010920:	d8f3      	bhi.n	801090a <__lshift+0x6e>
 8010922:	ebac 0304 	sub.w	r3, ip, r4
 8010926:	3b15      	subs	r3, #21
 8010928:	f023 0303 	bic.w	r3, r3, #3
 801092c:	3304      	adds	r3, #4
 801092e:	f104 0015 	add.w	r0, r4, #21
 8010932:	4584      	cmp	ip, r0
 8010934:	bf38      	it	cc
 8010936:	2304      	movcc	r3, #4
 8010938:	50ca      	str	r2, [r1, r3]
 801093a:	b10a      	cbz	r2, 8010940 <__lshift+0xa4>
 801093c:	f108 0602 	add.w	r6, r8, #2
 8010940:	3e01      	subs	r6, #1
 8010942:	4638      	mov	r0, r7
 8010944:	612e      	str	r6, [r5, #16]
 8010946:	4621      	mov	r1, r4
 8010948:	f7ff fdda 	bl	8010500 <_Bfree>
 801094c:	4628      	mov	r0, r5
 801094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010952:	f842 0f04 	str.w	r0, [r2, #4]!
 8010956:	3301      	adds	r3, #1
 8010958:	e7c5      	b.n	80108e6 <__lshift+0x4a>
 801095a:	3904      	subs	r1, #4
 801095c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010960:	f841 2f04 	str.w	r2, [r1, #4]!
 8010964:	459c      	cmp	ip, r3
 8010966:	d8f9      	bhi.n	801095c <__lshift+0xc0>
 8010968:	e7ea      	b.n	8010940 <__lshift+0xa4>
 801096a:	bf00      	nop
 801096c:	08013e90 	.word	0x08013e90
 8010970:	08013ea1 	.word	0x08013ea1

08010974 <__mcmp>:
 8010974:	690a      	ldr	r2, [r1, #16]
 8010976:	4603      	mov	r3, r0
 8010978:	6900      	ldr	r0, [r0, #16]
 801097a:	1a80      	subs	r0, r0, r2
 801097c:	b530      	push	{r4, r5, lr}
 801097e:	d10e      	bne.n	801099e <__mcmp+0x2a>
 8010980:	3314      	adds	r3, #20
 8010982:	3114      	adds	r1, #20
 8010984:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010988:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801098c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010990:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010994:	4295      	cmp	r5, r2
 8010996:	d003      	beq.n	80109a0 <__mcmp+0x2c>
 8010998:	d205      	bcs.n	80109a6 <__mcmp+0x32>
 801099a:	f04f 30ff 	mov.w	r0, #4294967295
 801099e:	bd30      	pop	{r4, r5, pc}
 80109a0:	42a3      	cmp	r3, r4
 80109a2:	d3f3      	bcc.n	801098c <__mcmp+0x18>
 80109a4:	e7fb      	b.n	801099e <__mcmp+0x2a>
 80109a6:	2001      	movs	r0, #1
 80109a8:	e7f9      	b.n	801099e <__mcmp+0x2a>
	...

080109ac <__mdiff>:
 80109ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109b0:	4689      	mov	r9, r1
 80109b2:	4606      	mov	r6, r0
 80109b4:	4611      	mov	r1, r2
 80109b6:	4648      	mov	r0, r9
 80109b8:	4614      	mov	r4, r2
 80109ba:	f7ff ffdb 	bl	8010974 <__mcmp>
 80109be:	1e05      	subs	r5, r0, #0
 80109c0:	d112      	bne.n	80109e8 <__mdiff+0x3c>
 80109c2:	4629      	mov	r1, r5
 80109c4:	4630      	mov	r0, r6
 80109c6:	f7ff fd5b 	bl	8010480 <_Balloc>
 80109ca:	4602      	mov	r2, r0
 80109cc:	b928      	cbnz	r0, 80109da <__mdiff+0x2e>
 80109ce:	4b3f      	ldr	r3, [pc, #252]	@ (8010acc <__mdiff+0x120>)
 80109d0:	f240 2137 	movw	r1, #567	@ 0x237
 80109d4:	483e      	ldr	r0, [pc, #248]	@ (8010ad0 <__mdiff+0x124>)
 80109d6:	f000 faf3 	bl	8010fc0 <__assert_func>
 80109da:	2301      	movs	r3, #1
 80109dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80109e0:	4610      	mov	r0, r2
 80109e2:	b003      	add	sp, #12
 80109e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109e8:	bfbc      	itt	lt
 80109ea:	464b      	movlt	r3, r9
 80109ec:	46a1      	movlt	r9, r4
 80109ee:	4630      	mov	r0, r6
 80109f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80109f4:	bfba      	itte	lt
 80109f6:	461c      	movlt	r4, r3
 80109f8:	2501      	movlt	r5, #1
 80109fa:	2500      	movge	r5, #0
 80109fc:	f7ff fd40 	bl	8010480 <_Balloc>
 8010a00:	4602      	mov	r2, r0
 8010a02:	b918      	cbnz	r0, 8010a0c <__mdiff+0x60>
 8010a04:	4b31      	ldr	r3, [pc, #196]	@ (8010acc <__mdiff+0x120>)
 8010a06:	f240 2145 	movw	r1, #581	@ 0x245
 8010a0a:	e7e3      	b.n	80109d4 <__mdiff+0x28>
 8010a0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010a10:	6926      	ldr	r6, [r4, #16]
 8010a12:	60c5      	str	r5, [r0, #12]
 8010a14:	f109 0310 	add.w	r3, r9, #16
 8010a18:	f109 0514 	add.w	r5, r9, #20
 8010a1c:	f104 0e14 	add.w	lr, r4, #20
 8010a20:	f100 0b14 	add.w	fp, r0, #20
 8010a24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010a28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010a2c:	9301      	str	r3, [sp, #4]
 8010a2e:	46d9      	mov	r9, fp
 8010a30:	f04f 0c00 	mov.w	ip, #0
 8010a34:	9b01      	ldr	r3, [sp, #4]
 8010a36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010a3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010a3e:	9301      	str	r3, [sp, #4]
 8010a40:	fa1f f38a 	uxth.w	r3, sl
 8010a44:	4619      	mov	r1, r3
 8010a46:	b283      	uxth	r3, r0
 8010a48:	1acb      	subs	r3, r1, r3
 8010a4a:	0c00      	lsrs	r0, r0, #16
 8010a4c:	4463      	add	r3, ip
 8010a4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010a52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010a56:	b29b      	uxth	r3, r3
 8010a58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010a5c:	4576      	cmp	r6, lr
 8010a5e:	f849 3b04 	str.w	r3, [r9], #4
 8010a62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010a66:	d8e5      	bhi.n	8010a34 <__mdiff+0x88>
 8010a68:	1b33      	subs	r3, r6, r4
 8010a6a:	3b15      	subs	r3, #21
 8010a6c:	f023 0303 	bic.w	r3, r3, #3
 8010a70:	3415      	adds	r4, #21
 8010a72:	3304      	adds	r3, #4
 8010a74:	42a6      	cmp	r6, r4
 8010a76:	bf38      	it	cc
 8010a78:	2304      	movcc	r3, #4
 8010a7a:	441d      	add	r5, r3
 8010a7c:	445b      	add	r3, fp
 8010a7e:	461e      	mov	r6, r3
 8010a80:	462c      	mov	r4, r5
 8010a82:	4544      	cmp	r4, r8
 8010a84:	d30e      	bcc.n	8010aa4 <__mdiff+0xf8>
 8010a86:	f108 0103 	add.w	r1, r8, #3
 8010a8a:	1b49      	subs	r1, r1, r5
 8010a8c:	f021 0103 	bic.w	r1, r1, #3
 8010a90:	3d03      	subs	r5, #3
 8010a92:	45a8      	cmp	r8, r5
 8010a94:	bf38      	it	cc
 8010a96:	2100      	movcc	r1, #0
 8010a98:	440b      	add	r3, r1
 8010a9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010a9e:	b191      	cbz	r1, 8010ac6 <__mdiff+0x11a>
 8010aa0:	6117      	str	r7, [r2, #16]
 8010aa2:	e79d      	b.n	80109e0 <__mdiff+0x34>
 8010aa4:	f854 1b04 	ldr.w	r1, [r4], #4
 8010aa8:	46e6      	mov	lr, ip
 8010aaa:	0c08      	lsrs	r0, r1, #16
 8010aac:	fa1c fc81 	uxtah	ip, ip, r1
 8010ab0:	4471      	add	r1, lr
 8010ab2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010ab6:	b289      	uxth	r1, r1
 8010ab8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010abc:	f846 1b04 	str.w	r1, [r6], #4
 8010ac0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010ac4:	e7dd      	b.n	8010a82 <__mdiff+0xd6>
 8010ac6:	3f01      	subs	r7, #1
 8010ac8:	e7e7      	b.n	8010a9a <__mdiff+0xee>
 8010aca:	bf00      	nop
 8010acc:	08013e90 	.word	0x08013e90
 8010ad0:	08013ea1 	.word	0x08013ea1

08010ad4 <__d2b>:
 8010ad4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ad8:	460f      	mov	r7, r1
 8010ada:	2101      	movs	r1, #1
 8010adc:	ec59 8b10 	vmov	r8, r9, d0
 8010ae0:	4616      	mov	r6, r2
 8010ae2:	f7ff fccd 	bl	8010480 <_Balloc>
 8010ae6:	4604      	mov	r4, r0
 8010ae8:	b930      	cbnz	r0, 8010af8 <__d2b+0x24>
 8010aea:	4602      	mov	r2, r0
 8010aec:	4b23      	ldr	r3, [pc, #140]	@ (8010b7c <__d2b+0xa8>)
 8010aee:	4824      	ldr	r0, [pc, #144]	@ (8010b80 <__d2b+0xac>)
 8010af0:	f240 310f 	movw	r1, #783	@ 0x30f
 8010af4:	f000 fa64 	bl	8010fc0 <__assert_func>
 8010af8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010afc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b00:	b10d      	cbz	r5, 8010b06 <__d2b+0x32>
 8010b02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010b06:	9301      	str	r3, [sp, #4]
 8010b08:	f1b8 0300 	subs.w	r3, r8, #0
 8010b0c:	d023      	beq.n	8010b56 <__d2b+0x82>
 8010b0e:	4668      	mov	r0, sp
 8010b10:	9300      	str	r3, [sp, #0]
 8010b12:	f7ff fd7c 	bl	801060e <__lo0bits>
 8010b16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010b1a:	b1d0      	cbz	r0, 8010b52 <__d2b+0x7e>
 8010b1c:	f1c0 0320 	rsb	r3, r0, #32
 8010b20:	fa02 f303 	lsl.w	r3, r2, r3
 8010b24:	430b      	orrs	r3, r1
 8010b26:	40c2      	lsrs	r2, r0
 8010b28:	6163      	str	r3, [r4, #20]
 8010b2a:	9201      	str	r2, [sp, #4]
 8010b2c:	9b01      	ldr	r3, [sp, #4]
 8010b2e:	61a3      	str	r3, [r4, #24]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	bf0c      	ite	eq
 8010b34:	2201      	moveq	r2, #1
 8010b36:	2202      	movne	r2, #2
 8010b38:	6122      	str	r2, [r4, #16]
 8010b3a:	b1a5      	cbz	r5, 8010b66 <__d2b+0x92>
 8010b3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010b40:	4405      	add	r5, r0
 8010b42:	603d      	str	r5, [r7, #0]
 8010b44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010b48:	6030      	str	r0, [r6, #0]
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	b003      	add	sp, #12
 8010b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b52:	6161      	str	r1, [r4, #20]
 8010b54:	e7ea      	b.n	8010b2c <__d2b+0x58>
 8010b56:	a801      	add	r0, sp, #4
 8010b58:	f7ff fd59 	bl	801060e <__lo0bits>
 8010b5c:	9b01      	ldr	r3, [sp, #4]
 8010b5e:	6163      	str	r3, [r4, #20]
 8010b60:	3020      	adds	r0, #32
 8010b62:	2201      	movs	r2, #1
 8010b64:	e7e8      	b.n	8010b38 <__d2b+0x64>
 8010b66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010b6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010b6e:	6038      	str	r0, [r7, #0]
 8010b70:	6918      	ldr	r0, [r3, #16]
 8010b72:	f7ff fd2d 	bl	80105d0 <__hi0bits>
 8010b76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010b7a:	e7e5      	b.n	8010b48 <__d2b+0x74>
 8010b7c:	08013e90 	.word	0x08013e90
 8010b80:	08013ea1 	.word	0x08013ea1

08010b84 <__ssputs_r>:
 8010b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b88:	688e      	ldr	r6, [r1, #8]
 8010b8a:	461f      	mov	r7, r3
 8010b8c:	42be      	cmp	r6, r7
 8010b8e:	680b      	ldr	r3, [r1, #0]
 8010b90:	4682      	mov	sl, r0
 8010b92:	460c      	mov	r4, r1
 8010b94:	4690      	mov	r8, r2
 8010b96:	d82d      	bhi.n	8010bf4 <__ssputs_r+0x70>
 8010b98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010b9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010ba0:	d026      	beq.n	8010bf0 <__ssputs_r+0x6c>
 8010ba2:	6965      	ldr	r5, [r4, #20]
 8010ba4:	6909      	ldr	r1, [r1, #16]
 8010ba6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010baa:	eba3 0901 	sub.w	r9, r3, r1
 8010bae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010bb2:	1c7b      	adds	r3, r7, #1
 8010bb4:	444b      	add	r3, r9
 8010bb6:	106d      	asrs	r5, r5, #1
 8010bb8:	429d      	cmp	r5, r3
 8010bba:	bf38      	it	cc
 8010bbc:	461d      	movcc	r5, r3
 8010bbe:	0553      	lsls	r3, r2, #21
 8010bc0:	d527      	bpl.n	8010c12 <__ssputs_r+0x8e>
 8010bc2:	4629      	mov	r1, r5
 8010bc4:	f7fd ff98 	bl	800eaf8 <_malloc_r>
 8010bc8:	4606      	mov	r6, r0
 8010bca:	b360      	cbz	r0, 8010c26 <__ssputs_r+0xa2>
 8010bcc:	6921      	ldr	r1, [r4, #16]
 8010bce:	464a      	mov	r2, r9
 8010bd0:	f7fe fe1f 	bl	800f812 <memcpy>
 8010bd4:	89a3      	ldrh	r3, [r4, #12]
 8010bd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010bde:	81a3      	strh	r3, [r4, #12]
 8010be0:	6126      	str	r6, [r4, #16]
 8010be2:	6165      	str	r5, [r4, #20]
 8010be4:	444e      	add	r6, r9
 8010be6:	eba5 0509 	sub.w	r5, r5, r9
 8010bea:	6026      	str	r6, [r4, #0]
 8010bec:	60a5      	str	r5, [r4, #8]
 8010bee:	463e      	mov	r6, r7
 8010bf0:	42be      	cmp	r6, r7
 8010bf2:	d900      	bls.n	8010bf6 <__ssputs_r+0x72>
 8010bf4:	463e      	mov	r6, r7
 8010bf6:	6820      	ldr	r0, [r4, #0]
 8010bf8:	4632      	mov	r2, r6
 8010bfa:	4641      	mov	r1, r8
 8010bfc:	f000 f9c6 	bl	8010f8c <memmove>
 8010c00:	68a3      	ldr	r3, [r4, #8]
 8010c02:	1b9b      	subs	r3, r3, r6
 8010c04:	60a3      	str	r3, [r4, #8]
 8010c06:	6823      	ldr	r3, [r4, #0]
 8010c08:	4433      	add	r3, r6
 8010c0a:	6023      	str	r3, [r4, #0]
 8010c0c:	2000      	movs	r0, #0
 8010c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c12:	462a      	mov	r2, r5
 8010c14:	f000 fa18 	bl	8011048 <_realloc_r>
 8010c18:	4606      	mov	r6, r0
 8010c1a:	2800      	cmp	r0, #0
 8010c1c:	d1e0      	bne.n	8010be0 <__ssputs_r+0x5c>
 8010c1e:	6921      	ldr	r1, [r4, #16]
 8010c20:	4650      	mov	r0, sl
 8010c22:	f7ff fbe3 	bl	80103ec <_free_r>
 8010c26:	230c      	movs	r3, #12
 8010c28:	f8ca 3000 	str.w	r3, [sl]
 8010c2c:	89a3      	ldrh	r3, [r4, #12]
 8010c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c32:	81a3      	strh	r3, [r4, #12]
 8010c34:	f04f 30ff 	mov.w	r0, #4294967295
 8010c38:	e7e9      	b.n	8010c0e <__ssputs_r+0x8a>
	...

08010c3c <_svfiprintf_r>:
 8010c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c40:	4698      	mov	r8, r3
 8010c42:	898b      	ldrh	r3, [r1, #12]
 8010c44:	061b      	lsls	r3, r3, #24
 8010c46:	b09d      	sub	sp, #116	@ 0x74
 8010c48:	4607      	mov	r7, r0
 8010c4a:	460d      	mov	r5, r1
 8010c4c:	4614      	mov	r4, r2
 8010c4e:	d510      	bpl.n	8010c72 <_svfiprintf_r+0x36>
 8010c50:	690b      	ldr	r3, [r1, #16]
 8010c52:	b973      	cbnz	r3, 8010c72 <_svfiprintf_r+0x36>
 8010c54:	2140      	movs	r1, #64	@ 0x40
 8010c56:	f7fd ff4f 	bl	800eaf8 <_malloc_r>
 8010c5a:	6028      	str	r0, [r5, #0]
 8010c5c:	6128      	str	r0, [r5, #16]
 8010c5e:	b930      	cbnz	r0, 8010c6e <_svfiprintf_r+0x32>
 8010c60:	230c      	movs	r3, #12
 8010c62:	603b      	str	r3, [r7, #0]
 8010c64:	f04f 30ff 	mov.w	r0, #4294967295
 8010c68:	b01d      	add	sp, #116	@ 0x74
 8010c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c6e:	2340      	movs	r3, #64	@ 0x40
 8010c70:	616b      	str	r3, [r5, #20]
 8010c72:	2300      	movs	r3, #0
 8010c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c76:	2320      	movs	r3, #32
 8010c78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010c7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c80:	2330      	movs	r3, #48	@ 0x30
 8010c82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010e20 <_svfiprintf_r+0x1e4>
 8010c86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010c8a:	f04f 0901 	mov.w	r9, #1
 8010c8e:	4623      	mov	r3, r4
 8010c90:	469a      	mov	sl, r3
 8010c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c96:	b10a      	cbz	r2, 8010c9c <_svfiprintf_r+0x60>
 8010c98:	2a25      	cmp	r2, #37	@ 0x25
 8010c9a:	d1f9      	bne.n	8010c90 <_svfiprintf_r+0x54>
 8010c9c:	ebba 0b04 	subs.w	fp, sl, r4
 8010ca0:	d00b      	beq.n	8010cba <_svfiprintf_r+0x7e>
 8010ca2:	465b      	mov	r3, fp
 8010ca4:	4622      	mov	r2, r4
 8010ca6:	4629      	mov	r1, r5
 8010ca8:	4638      	mov	r0, r7
 8010caa:	f7ff ff6b 	bl	8010b84 <__ssputs_r>
 8010cae:	3001      	adds	r0, #1
 8010cb0:	f000 80a7 	beq.w	8010e02 <_svfiprintf_r+0x1c6>
 8010cb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010cb6:	445a      	add	r2, fp
 8010cb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8010cba:	f89a 3000 	ldrb.w	r3, [sl]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	f000 809f 	beq.w	8010e02 <_svfiprintf_r+0x1c6>
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8010cca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cce:	f10a 0a01 	add.w	sl, sl, #1
 8010cd2:	9304      	str	r3, [sp, #16]
 8010cd4:	9307      	str	r3, [sp, #28]
 8010cd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010cda:	931a      	str	r3, [sp, #104]	@ 0x68
 8010cdc:	4654      	mov	r4, sl
 8010cde:	2205      	movs	r2, #5
 8010ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ce4:	484e      	ldr	r0, [pc, #312]	@ (8010e20 <_svfiprintf_r+0x1e4>)
 8010ce6:	f7ef fafb 	bl	80002e0 <memchr>
 8010cea:	9a04      	ldr	r2, [sp, #16]
 8010cec:	b9d8      	cbnz	r0, 8010d26 <_svfiprintf_r+0xea>
 8010cee:	06d0      	lsls	r0, r2, #27
 8010cf0:	bf44      	itt	mi
 8010cf2:	2320      	movmi	r3, #32
 8010cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010cf8:	0711      	lsls	r1, r2, #28
 8010cfa:	bf44      	itt	mi
 8010cfc:	232b      	movmi	r3, #43	@ 0x2b
 8010cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d02:	f89a 3000 	ldrb.w	r3, [sl]
 8010d06:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d08:	d015      	beq.n	8010d36 <_svfiprintf_r+0xfa>
 8010d0a:	9a07      	ldr	r2, [sp, #28]
 8010d0c:	4654      	mov	r4, sl
 8010d0e:	2000      	movs	r0, #0
 8010d10:	f04f 0c0a 	mov.w	ip, #10
 8010d14:	4621      	mov	r1, r4
 8010d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d1a:	3b30      	subs	r3, #48	@ 0x30
 8010d1c:	2b09      	cmp	r3, #9
 8010d1e:	d94b      	bls.n	8010db8 <_svfiprintf_r+0x17c>
 8010d20:	b1b0      	cbz	r0, 8010d50 <_svfiprintf_r+0x114>
 8010d22:	9207      	str	r2, [sp, #28]
 8010d24:	e014      	b.n	8010d50 <_svfiprintf_r+0x114>
 8010d26:	eba0 0308 	sub.w	r3, r0, r8
 8010d2a:	fa09 f303 	lsl.w	r3, r9, r3
 8010d2e:	4313      	orrs	r3, r2
 8010d30:	9304      	str	r3, [sp, #16]
 8010d32:	46a2      	mov	sl, r4
 8010d34:	e7d2      	b.n	8010cdc <_svfiprintf_r+0xa0>
 8010d36:	9b03      	ldr	r3, [sp, #12]
 8010d38:	1d19      	adds	r1, r3, #4
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	9103      	str	r1, [sp, #12]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	bfbb      	ittet	lt
 8010d42:	425b      	neglt	r3, r3
 8010d44:	f042 0202 	orrlt.w	r2, r2, #2
 8010d48:	9307      	strge	r3, [sp, #28]
 8010d4a:	9307      	strlt	r3, [sp, #28]
 8010d4c:	bfb8      	it	lt
 8010d4e:	9204      	strlt	r2, [sp, #16]
 8010d50:	7823      	ldrb	r3, [r4, #0]
 8010d52:	2b2e      	cmp	r3, #46	@ 0x2e
 8010d54:	d10a      	bne.n	8010d6c <_svfiprintf_r+0x130>
 8010d56:	7863      	ldrb	r3, [r4, #1]
 8010d58:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d5a:	d132      	bne.n	8010dc2 <_svfiprintf_r+0x186>
 8010d5c:	9b03      	ldr	r3, [sp, #12]
 8010d5e:	1d1a      	adds	r2, r3, #4
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	9203      	str	r2, [sp, #12]
 8010d64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010d68:	3402      	adds	r4, #2
 8010d6a:	9305      	str	r3, [sp, #20]
 8010d6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010e30 <_svfiprintf_r+0x1f4>
 8010d70:	7821      	ldrb	r1, [r4, #0]
 8010d72:	2203      	movs	r2, #3
 8010d74:	4650      	mov	r0, sl
 8010d76:	f7ef fab3 	bl	80002e0 <memchr>
 8010d7a:	b138      	cbz	r0, 8010d8c <_svfiprintf_r+0x150>
 8010d7c:	9b04      	ldr	r3, [sp, #16]
 8010d7e:	eba0 000a 	sub.w	r0, r0, sl
 8010d82:	2240      	movs	r2, #64	@ 0x40
 8010d84:	4082      	lsls	r2, r0
 8010d86:	4313      	orrs	r3, r2
 8010d88:	3401      	adds	r4, #1
 8010d8a:	9304      	str	r3, [sp, #16]
 8010d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d90:	4824      	ldr	r0, [pc, #144]	@ (8010e24 <_svfiprintf_r+0x1e8>)
 8010d92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010d96:	2206      	movs	r2, #6
 8010d98:	f7ef faa2 	bl	80002e0 <memchr>
 8010d9c:	2800      	cmp	r0, #0
 8010d9e:	d036      	beq.n	8010e0e <_svfiprintf_r+0x1d2>
 8010da0:	4b21      	ldr	r3, [pc, #132]	@ (8010e28 <_svfiprintf_r+0x1ec>)
 8010da2:	bb1b      	cbnz	r3, 8010dec <_svfiprintf_r+0x1b0>
 8010da4:	9b03      	ldr	r3, [sp, #12]
 8010da6:	3307      	adds	r3, #7
 8010da8:	f023 0307 	bic.w	r3, r3, #7
 8010dac:	3308      	adds	r3, #8
 8010dae:	9303      	str	r3, [sp, #12]
 8010db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010db2:	4433      	add	r3, r6
 8010db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010db6:	e76a      	b.n	8010c8e <_svfiprintf_r+0x52>
 8010db8:	fb0c 3202 	mla	r2, ip, r2, r3
 8010dbc:	460c      	mov	r4, r1
 8010dbe:	2001      	movs	r0, #1
 8010dc0:	e7a8      	b.n	8010d14 <_svfiprintf_r+0xd8>
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	3401      	adds	r4, #1
 8010dc6:	9305      	str	r3, [sp, #20]
 8010dc8:	4619      	mov	r1, r3
 8010dca:	f04f 0c0a 	mov.w	ip, #10
 8010dce:	4620      	mov	r0, r4
 8010dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010dd4:	3a30      	subs	r2, #48	@ 0x30
 8010dd6:	2a09      	cmp	r2, #9
 8010dd8:	d903      	bls.n	8010de2 <_svfiprintf_r+0x1a6>
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d0c6      	beq.n	8010d6c <_svfiprintf_r+0x130>
 8010dde:	9105      	str	r1, [sp, #20]
 8010de0:	e7c4      	b.n	8010d6c <_svfiprintf_r+0x130>
 8010de2:	fb0c 2101 	mla	r1, ip, r1, r2
 8010de6:	4604      	mov	r4, r0
 8010de8:	2301      	movs	r3, #1
 8010dea:	e7f0      	b.n	8010dce <_svfiprintf_r+0x192>
 8010dec:	ab03      	add	r3, sp, #12
 8010dee:	9300      	str	r3, [sp, #0]
 8010df0:	462a      	mov	r2, r5
 8010df2:	4b0e      	ldr	r3, [pc, #56]	@ (8010e2c <_svfiprintf_r+0x1f0>)
 8010df4:	a904      	add	r1, sp, #16
 8010df6:	4638      	mov	r0, r7
 8010df8:	f7fd ff9a 	bl	800ed30 <_printf_float>
 8010dfc:	1c42      	adds	r2, r0, #1
 8010dfe:	4606      	mov	r6, r0
 8010e00:	d1d6      	bne.n	8010db0 <_svfiprintf_r+0x174>
 8010e02:	89ab      	ldrh	r3, [r5, #12]
 8010e04:	065b      	lsls	r3, r3, #25
 8010e06:	f53f af2d 	bmi.w	8010c64 <_svfiprintf_r+0x28>
 8010e0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010e0c:	e72c      	b.n	8010c68 <_svfiprintf_r+0x2c>
 8010e0e:	ab03      	add	r3, sp, #12
 8010e10:	9300      	str	r3, [sp, #0]
 8010e12:	462a      	mov	r2, r5
 8010e14:	4b05      	ldr	r3, [pc, #20]	@ (8010e2c <_svfiprintf_r+0x1f0>)
 8010e16:	a904      	add	r1, sp, #16
 8010e18:	4638      	mov	r0, r7
 8010e1a:	f7fe fa11 	bl	800f240 <_printf_i>
 8010e1e:	e7ed      	b.n	8010dfc <_svfiprintf_r+0x1c0>
 8010e20:	08013ff8 	.word	0x08013ff8
 8010e24:	08014002 	.word	0x08014002
 8010e28:	0800ed31 	.word	0x0800ed31
 8010e2c:	08010b85 	.word	0x08010b85
 8010e30:	08013ffe 	.word	0x08013ffe

08010e34 <__sflush_r>:
 8010e34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e3c:	0716      	lsls	r6, r2, #28
 8010e3e:	4605      	mov	r5, r0
 8010e40:	460c      	mov	r4, r1
 8010e42:	d454      	bmi.n	8010eee <__sflush_r+0xba>
 8010e44:	684b      	ldr	r3, [r1, #4]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	dc02      	bgt.n	8010e50 <__sflush_r+0x1c>
 8010e4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	dd48      	ble.n	8010ee2 <__sflush_r+0xae>
 8010e50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010e52:	2e00      	cmp	r6, #0
 8010e54:	d045      	beq.n	8010ee2 <__sflush_r+0xae>
 8010e56:	2300      	movs	r3, #0
 8010e58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010e5c:	682f      	ldr	r7, [r5, #0]
 8010e5e:	6a21      	ldr	r1, [r4, #32]
 8010e60:	602b      	str	r3, [r5, #0]
 8010e62:	d030      	beq.n	8010ec6 <__sflush_r+0x92>
 8010e64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010e66:	89a3      	ldrh	r3, [r4, #12]
 8010e68:	0759      	lsls	r1, r3, #29
 8010e6a:	d505      	bpl.n	8010e78 <__sflush_r+0x44>
 8010e6c:	6863      	ldr	r3, [r4, #4]
 8010e6e:	1ad2      	subs	r2, r2, r3
 8010e70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010e72:	b10b      	cbz	r3, 8010e78 <__sflush_r+0x44>
 8010e74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010e76:	1ad2      	subs	r2, r2, r3
 8010e78:	2300      	movs	r3, #0
 8010e7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010e7c:	6a21      	ldr	r1, [r4, #32]
 8010e7e:	4628      	mov	r0, r5
 8010e80:	47b0      	blx	r6
 8010e82:	1c43      	adds	r3, r0, #1
 8010e84:	89a3      	ldrh	r3, [r4, #12]
 8010e86:	d106      	bne.n	8010e96 <__sflush_r+0x62>
 8010e88:	6829      	ldr	r1, [r5, #0]
 8010e8a:	291d      	cmp	r1, #29
 8010e8c:	d82b      	bhi.n	8010ee6 <__sflush_r+0xb2>
 8010e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8010f38 <__sflush_r+0x104>)
 8010e90:	410a      	asrs	r2, r1
 8010e92:	07d6      	lsls	r6, r2, #31
 8010e94:	d427      	bmi.n	8010ee6 <__sflush_r+0xb2>
 8010e96:	2200      	movs	r2, #0
 8010e98:	6062      	str	r2, [r4, #4]
 8010e9a:	04d9      	lsls	r1, r3, #19
 8010e9c:	6922      	ldr	r2, [r4, #16]
 8010e9e:	6022      	str	r2, [r4, #0]
 8010ea0:	d504      	bpl.n	8010eac <__sflush_r+0x78>
 8010ea2:	1c42      	adds	r2, r0, #1
 8010ea4:	d101      	bne.n	8010eaa <__sflush_r+0x76>
 8010ea6:	682b      	ldr	r3, [r5, #0]
 8010ea8:	b903      	cbnz	r3, 8010eac <__sflush_r+0x78>
 8010eaa:	6560      	str	r0, [r4, #84]	@ 0x54
 8010eac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010eae:	602f      	str	r7, [r5, #0]
 8010eb0:	b1b9      	cbz	r1, 8010ee2 <__sflush_r+0xae>
 8010eb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010eb6:	4299      	cmp	r1, r3
 8010eb8:	d002      	beq.n	8010ec0 <__sflush_r+0x8c>
 8010eba:	4628      	mov	r0, r5
 8010ebc:	f7ff fa96 	bl	80103ec <_free_r>
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ec4:	e00d      	b.n	8010ee2 <__sflush_r+0xae>
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	4628      	mov	r0, r5
 8010eca:	47b0      	blx	r6
 8010ecc:	4602      	mov	r2, r0
 8010ece:	1c50      	adds	r0, r2, #1
 8010ed0:	d1c9      	bne.n	8010e66 <__sflush_r+0x32>
 8010ed2:	682b      	ldr	r3, [r5, #0]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d0c6      	beq.n	8010e66 <__sflush_r+0x32>
 8010ed8:	2b1d      	cmp	r3, #29
 8010eda:	d001      	beq.n	8010ee0 <__sflush_r+0xac>
 8010edc:	2b16      	cmp	r3, #22
 8010ede:	d11e      	bne.n	8010f1e <__sflush_r+0xea>
 8010ee0:	602f      	str	r7, [r5, #0]
 8010ee2:	2000      	movs	r0, #0
 8010ee4:	e022      	b.n	8010f2c <__sflush_r+0xf8>
 8010ee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010eea:	b21b      	sxth	r3, r3
 8010eec:	e01b      	b.n	8010f26 <__sflush_r+0xf2>
 8010eee:	690f      	ldr	r7, [r1, #16]
 8010ef0:	2f00      	cmp	r7, #0
 8010ef2:	d0f6      	beq.n	8010ee2 <__sflush_r+0xae>
 8010ef4:	0793      	lsls	r3, r2, #30
 8010ef6:	680e      	ldr	r6, [r1, #0]
 8010ef8:	bf08      	it	eq
 8010efa:	694b      	ldreq	r3, [r1, #20]
 8010efc:	600f      	str	r7, [r1, #0]
 8010efe:	bf18      	it	ne
 8010f00:	2300      	movne	r3, #0
 8010f02:	eba6 0807 	sub.w	r8, r6, r7
 8010f06:	608b      	str	r3, [r1, #8]
 8010f08:	f1b8 0f00 	cmp.w	r8, #0
 8010f0c:	dde9      	ble.n	8010ee2 <__sflush_r+0xae>
 8010f0e:	6a21      	ldr	r1, [r4, #32]
 8010f10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010f12:	4643      	mov	r3, r8
 8010f14:	463a      	mov	r2, r7
 8010f16:	4628      	mov	r0, r5
 8010f18:	47b0      	blx	r6
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	dc08      	bgt.n	8010f30 <__sflush_r+0xfc>
 8010f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f26:	81a3      	strh	r3, [r4, #12]
 8010f28:	f04f 30ff 	mov.w	r0, #4294967295
 8010f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f30:	4407      	add	r7, r0
 8010f32:	eba8 0800 	sub.w	r8, r8, r0
 8010f36:	e7e7      	b.n	8010f08 <__sflush_r+0xd4>
 8010f38:	dfbffffe 	.word	0xdfbffffe

08010f3c <_fflush_r>:
 8010f3c:	b538      	push	{r3, r4, r5, lr}
 8010f3e:	690b      	ldr	r3, [r1, #16]
 8010f40:	4605      	mov	r5, r0
 8010f42:	460c      	mov	r4, r1
 8010f44:	b913      	cbnz	r3, 8010f4c <_fflush_r+0x10>
 8010f46:	2500      	movs	r5, #0
 8010f48:	4628      	mov	r0, r5
 8010f4a:	bd38      	pop	{r3, r4, r5, pc}
 8010f4c:	b118      	cbz	r0, 8010f56 <_fflush_r+0x1a>
 8010f4e:	6a03      	ldr	r3, [r0, #32]
 8010f50:	b90b      	cbnz	r3, 8010f56 <_fflush_r+0x1a>
 8010f52:	f7fe fb21 	bl	800f598 <__sinit>
 8010f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d0f3      	beq.n	8010f46 <_fflush_r+0xa>
 8010f5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010f60:	07d0      	lsls	r0, r2, #31
 8010f62:	d404      	bmi.n	8010f6e <_fflush_r+0x32>
 8010f64:	0599      	lsls	r1, r3, #22
 8010f66:	d402      	bmi.n	8010f6e <_fflush_r+0x32>
 8010f68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f6a:	f7fe fc50 	bl	800f80e <__retarget_lock_acquire_recursive>
 8010f6e:	4628      	mov	r0, r5
 8010f70:	4621      	mov	r1, r4
 8010f72:	f7ff ff5f 	bl	8010e34 <__sflush_r>
 8010f76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010f78:	07da      	lsls	r2, r3, #31
 8010f7a:	4605      	mov	r5, r0
 8010f7c:	d4e4      	bmi.n	8010f48 <_fflush_r+0xc>
 8010f7e:	89a3      	ldrh	r3, [r4, #12]
 8010f80:	059b      	lsls	r3, r3, #22
 8010f82:	d4e1      	bmi.n	8010f48 <_fflush_r+0xc>
 8010f84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f86:	f7fe fc43 	bl	800f810 <__retarget_lock_release_recursive>
 8010f8a:	e7dd      	b.n	8010f48 <_fflush_r+0xc>

08010f8c <memmove>:
 8010f8c:	4288      	cmp	r0, r1
 8010f8e:	b510      	push	{r4, lr}
 8010f90:	eb01 0402 	add.w	r4, r1, r2
 8010f94:	d902      	bls.n	8010f9c <memmove+0x10>
 8010f96:	4284      	cmp	r4, r0
 8010f98:	4623      	mov	r3, r4
 8010f9a:	d807      	bhi.n	8010fac <memmove+0x20>
 8010f9c:	1e43      	subs	r3, r0, #1
 8010f9e:	42a1      	cmp	r1, r4
 8010fa0:	d008      	beq.n	8010fb4 <memmove+0x28>
 8010fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010faa:	e7f8      	b.n	8010f9e <memmove+0x12>
 8010fac:	4402      	add	r2, r0
 8010fae:	4601      	mov	r1, r0
 8010fb0:	428a      	cmp	r2, r1
 8010fb2:	d100      	bne.n	8010fb6 <memmove+0x2a>
 8010fb4:	bd10      	pop	{r4, pc}
 8010fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010fbe:	e7f7      	b.n	8010fb0 <memmove+0x24>

08010fc0 <__assert_func>:
 8010fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010fc2:	4614      	mov	r4, r2
 8010fc4:	461a      	mov	r2, r3
 8010fc6:	4b09      	ldr	r3, [pc, #36]	@ (8010fec <__assert_func+0x2c>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	4605      	mov	r5, r0
 8010fcc:	68d8      	ldr	r0, [r3, #12]
 8010fce:	b954      	cbnz	r4, 8010fe6 <__assert_func+0x26>
 8010fd0:	4b07      	ldr	r3, [pc, #28]	@ (8010ff0 <__assert_func+0x30>)
 8010fd2:	461c      	mov	r4, r3
 8010fd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010fd8:	9100      	str	r1, [sp, #0]
 8010fda:	462b      	mov	r3, r5
 8010fdc:	4905      	ldr	r1, [pc, #20]	@ (8010ff4 <__assert_func+0x34>)
 8010fde:	f000 f86f 	bl	80110c0 <fiprintf>
 8010fe2:	f000 f87f 	bl	80110e4 <abort>
 8010fe6:	4b04      	ldr	r3, [pc, #16]	@ (8010ff8 <__assert_func+0x38>)
 8010fe8:	e7f4      	b.n	8010fd4 <__assert_func+0x14>
 8010fea:	bf00      	nop
 8010fec:	24000048 	.word	0x24000048
 8010ff0:	0801404e 	.word	0x0801404e
 8010ff4:	08014020 	.word	0x08014020
 8010ff8:	08014013 	.word	0x08014013

08010ffc <_calloc_r>:
 8010ffc:	b570      	push	{r4, r5, r6, lr}
 8010ffe:	fba1 5402 	umull	r5, r4, r1, r2
 8011002:	b93c      	cbnz	r4, 8011014 <_calloc_r+0x18>
 8011004:	4629      	mov	r1, r5
 8011006:	f7fd fd77 	bl	800eaf8 <_malloc_r>
 801100a:	4606      	mov	r6, r0
 801100c:	b928      	cbnz	r0, 801101a <_calloc_r+0x1e>
 801100e:	2600      	movs	r6, #0
 8011010:	4630      	mov	r0, r6
 8011012:	bd70      	pop	{r4, r5, r6, pc}
 8011014:	220c      	movs	r2, #12
 8011016:	6002      	str	r2, [r0, #0]
 8011018:	e7f9      	b.n	801100e <_calloc_r+0x12>
 801101a:	462a      	mov	r2, r5
 801101c:	4621      	mov	r1, r4
 801101e:	f7fe fb68 	bl	800f6f2 <memset>
 8011022:	e7f5      	b.n	8011010 <_calloc_r+0x14>

08011024 <__ascii_mbtowc>:
 8011024:	b082      	sub	sp, #8
 8011026:	b901      	cbnz	r1, 801102a <__ascii_mbtowc+0x6>
 8011028:	a901      	add	r1, sp, #4
 801102a:	b142      	cbz	r2, 801103e <__ascii_mbtowc+0x1a>
 801102c:	b14b      	cbz	r3, 8011042 <__ascii_mbtowc+0x1e>
 801102e:	7813      	ldrb	r3, [r2, #0]
 8011030:	600b      	str	r3, [r1, #0]
 8011032:	7812      	ldrb	r2, [r2, #0]
 8011034:	1e10      	subs	r0, r2, #0
 8011036:	bf18      	it	ne
 8011038:	2001      	movne	r0, #1
 801103a:	b002      	add	sp, #8
 801103c:	4770      	bx	lr
 801103e:	4610      	mov	r0, r2
 8011040:	e7fb      	b.n	801103a <__ascii_mbtowc+0x16>
 8011042:	f06f 0001 	mvn.w	r0, #1
 8011046:	e7f8      	b.n	801103a <__ascii_mbtowc+0x16>

08011048 <_realloc_r>:
 8011048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801104c:	4680      	mov	r8, r0
 801104e:	4615      	mov	r5, r2
 8011050:	460c      	mov	r4, r1
 8011052:	b921      	cbnz	r1, 801105e <_realloc_r+0x16>
 8011054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011058:	4611      	mov	r1, r2
 801105a:	f7fd bd4d 	b.w	800eaf8 <_malloc_r>
 801105e:	b92a      	cbnz	r2, 801106c <_realloc_r+0x24>
 8011060:	f7ff f9c4 	bl	80103ec <_free_r>
 8011064:	2400      	movs	r4, #0
 8011066:	4620      	mov	r0, r4
 8011068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801106c:	f000 f841 	bl	80110f2 <_malloc_usable_size_r>
 8011070:	4285      	cmp	r5, r0
 8011072:	4606      	mov	r6, r0
 8011074:	d802      	bhi.n	801107c <_realloc_r+0x34>
 8011076:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801107a:	d8f4      	bhi.n	8011066 <_realloc_r+0x1e>
 801107c:	4629      	mov	r1, r5
 801107e:	4640      	mov	r0, r8
 8011080:	f7fd fd3a 	bl	800eaf8 <_malloc_r>
 8011084:	4607      	mov	r7, r0
 8011086:	2800      	cmp	r0, #0
 8011088:	d0ec      	beq.n	8011064 <_realloc_r+0x1c>
 801108a:	42b5      	cmp	r5, r6
 801108c:	462a      	mov	r2, r5
 801108e:	4621      	mov	r1, r4
 8011090:	bf28      	it	cs
 8011092:	4632      	movcs	r2, r6
 8011094:	f7fe fbbd 	bl	800f812 <memcpy>
 8011098:	4621      	mov	r1, r4
 801109a:	4640      	mov	r0, r8
 801109c:	f7ff f9a6 	bl	80103ec <_free_r>
 80110a0:	463c      	mov	r4, r7
 80110a2:	e7e0      	b.n	8011066 <_realloc_r+0x1e>

080110a4 <__ascii_wctomb>:
 80110a4:	4603      	mov	r3, r0
 80110a6:	4608      	mov	r0, r1
 80110a8:	b141      	cbz	r1, 80110bc <__ascii_wctomb+0x18>
 80110aa:	2aff      	cmp	r2, #255	@ 0xff
 80110ac:	d904      	bls.n	80110b8 <__ascii_wctomb+0x14>
 80110ae:	228a      	movs	r2, #138	@ 0x8a
 80110b0:	601a      	str	r2, [r3, #0]
 80110b2:	f04f 30ff 	mov.w	r0, #4294967295
 80110b6:	4770      	bx	lr
 80110b8:	700a      	strb	r2, [r1, #0]
 80110ba:	2001      	movs	r0, #1
 80110bc:	4770      	bx	lr
	...

080110c0 <fiprintf>:
 80110c0:	b40e      	push	{r1, r2, r3}
 80110c2:	b503      	push	{r0, r1, lr}
 80110c4:	4601      	mov	r1, r0
 80110c6:	ab03      	add	r3, sp, #12
 80110c8:	4805      	ldr	r0, [pc, #20]	@ (80110e0 <fiprintf+0x20>)
 80110ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80110ce:	6800      	ldr	r0, [r0, #0]
 80110d0:	9301      	str	r3, [sp, #4]
 80110d2:	f000 f83f 	bl	8011154 <_vfiprintf_r>
 80110d6:	b002      	add	sp, #8
 80110d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80110dc:	b003      	add	sp, #12
 80110de:	4770      	bx	lr
 80110e0:	24000048 	.word	0x24000048

080110e4 <abort>:
 80110e4:	b508      	push	{r3, lr}
 80110e6:	2006      	movs	r0, #6
 80110e8:	f000 fa08 	bl	80114fc <raise>
 80110ec:	2001      	movs	r0, #1
 80110ee:	f7f0 f8eb 	bl	80012c8 <_exit>

080110f2 <_malloc_usable_size_r>:
 80110f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110f6:	1f18      	subs	r0, r3, #4
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	bfbc      	itt	lt
 80110fc:	580b      	ldrlt	r3, [r1, r0]
 80110fe:	18c0      	addlt	r0, r0, r3
 8011100:	4770      	bx	lr

08011102 <__sfputc_r>:
 8011102:	6893      	ldr	r3, [r2, #8]
 8011104:	3b01      	subs	r3, #1
 8011106:	2b00      	cmp	r3, #0
 8011108:	b410      	push	{r4}
 801110a:	6093      	str	r3, [r2, #8]
 801110c:	da08      	bge.n	8011120 <__sfputc_r+0x1e>
 801110e:	6994      	ldr	r4, [r2, #24]
 8011110:	42a3      	cmp	r3, r4
 8011112:	db01      	blt.n	8011118 <__sfputc_r+0x16>
 8011114:	290a      	cmp	r1, #10
 8011116:	d103      	bne.n	8011120 <__sfputc_r+0x1e>
 8011118:	f85d 4b04 	ldr.w	r4, [sp], #4
 801111c:	f000 b932 	b.w	8011384 <__swbuf_r>
 8011120:	6813      	ldr	r3, [r2, #0]
 8011122:	1c58      	adds	r0, r3, #1
 8011124:	6010      	str	r0, [r2, #0]
 8011126:	7019      	strb	r1, [r3, #0]
 8011128:	4608      	mov	r0, r1
 801112a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801112e:	4770      	bx	lr

08011130 <__sfputs_r>:
 8011130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011132:	4606      	mov	r6, r0
 8011134:	460f      	mov	r7, r1
 8011136:	4614      	mov	r4, r2
 8011138:	18d5      	adds	r5, r2, r3
 801113a:	42ac      	cmp	r4, r5
 801113c:	d101      	bne.n	8011142 <__sfputs_r+0x12>
 801113e:	2000      	movs	r0, #0
 8011140:	e007      	b.n	8011152 <__sfputs_r+0x22>
 8011142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011146:	463a      	mov	r2, r7
 8011148:	4630      	mov	r0, r6
 801114a:	f7ff ffda 	bl	8011102 <__sfputc_r>
 801114e:	1c43      	adds	r3, r0, #1
 8011150:	d1f3      	bne.n	801113a <__sfputs_r+0xa>
 8011152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011154 <_vfiprintf_r>:
 8011154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011158:	460d      	mov	r5, r1
 801115a:	b09d      	sub	sp, #116	@ 0x74
 801115c:	4614      	mov	r4, r2
 801115e:	4698      	mov	r8, r3
 8011160:	4606      	mov	r6, r0
 8011162:	b118      	cbz	r0, 801116c <_vfiprintf_r+0x18>
 8011164:	6a03      	ldr	r3, [r0, #32]
 8011166:	b90b      	cbnz	r3, 801116c <_vfiprintf_r+0x18>
 8011168:	f7fe fa16 	bl	800f598 <__sinit>
 801116c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801116e:	07d9      	lsls	r1, r3, #31
 8011170:	d405      	bmi.n	801117e <_vfiprintf_r+0x2a>
 8011172:	89ab      	ldrh	r3, [r5, #12]
 8011174:	059a      	lsls	r2, r3, #22
 8011176:	d402      	bmi.n	801117e <_vfiprintf_r+0x2a>
 8011178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801117a:	f7fe fb48 	bl	800f80e <__retarget_lock_acquire_recursive>
 801117e:	89ab      	ldrh	r3, [r5, #12]
 8011180:	071b      	lsls	r3, r3, #28
 8011182:	d501      	bpl.n	8011188 <_vfiprintf_r+0x34>
 8011184:	692b      	ldr	r3, [r5, #16]
 8011186:	b99b      	cbnz	r3, 80111b0 <_vfiprintf_r+0x5c>
 8011188:	4629      	mov	r1, r5
 801118a:	4630      	mov	r0, r6
 801118c:	f000 f938 	bl	8011400 <__swsetup_r>
 8011190:	b170      	cbz	r0, 80111b0 <_vfiprintf_r+0x5c>
 8011192:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011194:	07dc      	lsls	r4, r3, #31
 8011196:	d504      	bpl.n	80111a2 <_vfiprintf_r+0x4e>
 8011198:	f04f 30ff 	mov.w	r0, #4294967295
 801119c:	b01d      	add	sp, #116	@ 0x74
 801119e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111a2:	89ab      	ldrh	r3, [r5, #12]
 80111a4:	0598      	lsls	r0, r3, #22
 80111a6:	d4f7      	bmi.n	8011198 <_vfiprintf_r+0x44>
 80111a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80111aa:	f7fe fb31 	bl	800f810 <__retarget_lock_release_recursive>
 80111ae:	e7f3      	b.n	8011198 <_vfiprintf_r+0x44>
 80111b0:	2300      	movs	r3, #0
 80111b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80111b4:	2320      	movs	r3, #32
 80111b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80111ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80111be:	2330      	movs	r3, #48	@ 0x30
 80111c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011370 <_vfiprintf_r+0x21c>
 80111c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80111c8:	f04f 0901 	mov.w	r9, #1
 80111cc:	4623      	mov	r3, r4
 80111ce:	469a      	mov	sl, r3
 80111d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111d4:	b10a      	cbz	r2, 80111da <_vfiprintf_r+0x86>
 80111d6:	2a25      	cmp	r2, #37	@ 0x25
 80111d8:	d1f9      	bne.n	80111ce <_vfiprintf_r+0x7a>
 80111da:	ebba 0b04 	subs.w	fp, sl, r4
 80111de:	d00b      	beq.n	80111f8 <_vfiprintf_r+0xa4>
 80111e0:	465b      	mov	r3, fp
 80111e2:	4622      	mov	r2, r4
 80111e4:	4629      	mov	r1, r5
 80111e6:	4630      	mov	r0, r6
 80111e8:	f7ff ffa2 	bl	8011130 <__sfputs_r>
 80111ec:	3001      	adds	r0, #1
 80111ee:	f000 80a7 	beq.w	8011340 <_vfiprintf_r+0x1ec>
 80111f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111f4:	445a      	add	r2, fp
 80111f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80111f8:	f89a 3000 	ldrb.w	r3, [sl]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	f000 809f 	beq.w	8011340 <_vfiprintf_r+0x1ec>
 8011202:	2300      	movs	r3, #0
 8011204:	f04f 32ff 	mov.w	r2, #4294967295
 8011208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801120c:	f10a 0a01 	add.w	sl, sl, #1
 8011210:	9304      	str	r3, [sp, #16]
 8011212:	9307      	str	r3, [sp, #28]
 8011214:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011218:	931a      	str	r3, [sp, #104]	@ 0x68
 801121a:	4654      	mov	r4, sl
 801121c:	2205      	movs	r2, #5
 801121e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011222:	4853      	ldr	r0, [pc, #332]	@ (8011370 <_vfiprintf_r+0x21c>)
 8011224:	f7ef f85c 	bl	80002e0 <memchr>
 8011228:	9a04      	ldr	r2, [sp, #16]
 801122a:	b9d8      	cbnz	r0, 8011264 <_vfiprintf_r+0x110>
 801122c:	06d1      	lsls	r1, r2, #27
 801122e:	bf44      	itt	mi
 8011230:	2320      	movmi	r3, #32
 8011232:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011236:	0713      	lsls	r3, r2, #28
 8011238:	bf44      	itt	mi
 801123a:	232b      	movmi	r3, #43	@ 0x2b
 801123c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011240:	f89a 3000 	ldrb.w	r3, [sl]
 8011244:	2b2a      	cmp	r3, #42	@ 0x2a
 8011246:	d015      	beq.n	8011274 <_vfiprintf_r+0x120>
 8011248:	9a07      	ldr	r2, [sp, #28]
 801124a:	4654      	mov	r4, sl
 801124c:	2000      	movs	r0, #0
 801124e:	f04f 0c0a 	mov.w	ip, #10
 8011252:	4621      	mov	r1, r4
 8011254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011258:	3b30      	subs	r3, #48	@ 0x30
 801125a:	2b09      	cmp	r3, #9
 801125c:	d94b      	bls.n	80112f6 <_vfiprintf_r+0x1a2>
 801125e:	b1b0      	cbz	r0, 801128e <_vfiprintf_r+0x13a>
 8011260:	9207      	str	r2, [sp, #28]
 8011262:	e014      	b.n	801128e <_vfiprintf_r+0x13a>
 8011264:	eba0 0308 	sub.w	r3, r0, r8
 8011268:	fa09 f303 	lsl.w	r3, r9, r3
 801126c:	4313      	orrs	r3, r2
 801126e:	9304      	str	r3, [sp, #16]
 8011270:	46a2      	mov	sl, r4
 8011272:	e7d2      	b.n	801121a <_vfiprintf_r+0xc6>
 8011274:	9b03      	ldr	r3, [sp, #12]
 8011276:	1d19      	adds	r1, r3, #4
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	9103      	str	r1, [sp, #12]
 801127c:	2b00      	cmp	r3, #0
 801127e:	bfbb      	ittet	lt
 8011280:	425b      	neglt	r3, r3
 8011282:	f042 0202 	orrlt.w	r2, r2, #2
 8011286:	9307      	strge	r3, [sp, #28]
 8011288:	9307      	strlt	r3, [sp, #28]
 801128a:	bfb8      	it	lt
 801128c:	9204      	strlt	r2, [sp, #16]
 801128e:	7823      	ldrb	r3, [r4, #0]
 8011290:	2b2e      	cmp	r3, #46	@ 0x2e
 8011292:	d10a      	bne.n	80112aa <_vfiprintf_r+0x156>
 8011294:	7863      	ldrb	r3, [r4, #1]
 8011296:	2b2a      	cmp	r3, #42	@ 0x2a
 8011298:	d132      	bne.n	8011300 <_vfiprintf_r+0x1ac>
 801129a:	9b03      	ldr	r3, [sp, #12]
 801129c:	1d1a      	adds	r2, r3, #4
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	9203      	str	r2, [sp, #12]
 80112a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80112a6:	3402      	adds	r4, #2
 80112a8:	9305      	str	r3, [sp, #20]
 80112aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011380 <_vfiprintf_r+0x22c>
 80112ae:	7821      	ldrb	r1, [r4, #0]
 80112b0:	2203      	movs	r2, #3
 80112b2:	4650      	mov	r0, sl
 80112b4:	f7ef f814 	bl	80002e0 <memchr>
 80112b8:	b138      	cbz	r0, 80112ca <_vfiprintf_r+0x176>
 80112ba:	9b04      	ldr	r3, [sp, #16]
 80112bc:	eba0 000a 	sub.w	r0, r0, sl
 80112c0:	2240      	movs	r2, #64	@ 0x40
 80112c2:	4082      	lsls	r2, r0
 80112c4:	4313      	orrs	r3, r2
 80112c6:	3401      	adds	r4, #1
 80112c8:	9304      	str	r3, [sp, #16]
 80112ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112ce:	4829      	ldr	r0, [pc, #164]	@ (8011374 <_vfiprintf_r+0x220>)
 80112d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80112d4:	2206      	movs	r2, #6
 80112d6:	f7ef f803 	bl	80002e0 <memchr>
 80112da:	2800      	cmp	r0, #0
 80112dc:	d03f      	beq.n	801135e <_vfiprintf_r+0x20a>
 80112de:	4b26      	ldr	r3, [pc, #152]	@ (8011378 <_vfiprintf_r+0x224>)
 80112e0:	bb1b      	cbnz	r3, 801132a <_vfiprintf_r+0x1d6>
 80112e2:	9b03      	ldr	r3, [sp, #12]
 80112e4:	3307      	adds	r3, #7
 80112e6:	f023 0307 	bic.w	r3, r3, #7
 80112ea:	3308      	adds	r3, #8
 80112ec:	9303      	str	r3, [sp, #12]
 80112ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112f0:	443b      	add	r3, r7
 80112f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80112f4:	e76a      	b.n	80111cc <_vfiprintf_r+0x78>
 80112f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80112fa:	460c      	mov	r4, r1
 80112fc:	2001      	movs	r0, #1
 80112fe:	e7a8      	b.n	8011252 <_vfiprintf_r+0xfe>
 8011300:	2300      	movs	r3, #0
 8011302:	3401      	adds	r4, #1
 8011304:	9305      	str	r3, [sp, #20]
 8011306:	4619      	mov	r1, r3
 8011308:	f04f 0c0a 	mov.w	ip, #10
 801130c:	4620      	mov	r0, r4
 801130e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011312:	3a30      	subs	r2, #48	@ 0x30
 8011314:	2a09      	cmp	r2, #9
 8011316:	d903      	bls.n	8011320 <_vfiprintf_r+0x1cc>
 8011318:	2b00      	cmp	r3, #0
 801131a:	d0c6      	beq.n	80112aa <_vfiprintf_r+0x156>
 801131c:	9105      	str	r1, [sp, #20]
 801131e:	e7c4      	b.n	80112aa <_vfiprintf_r+0x156>
 8011320:	fb0c 2101 	mla	r1, ip, r1, r2
 8011324:	4604      	mov	r4, r0
 8011326:	2301      	movs	r3, #1
 8011328:	e7f0      	b.n	801130c <_vfiprintf_r+0x1b8>
 801132a:	ab03      	add	r3, sp, #12
 801132c:	9300      	str	r3, [sp, #0]
 801132e:	462a      	mov	r2, r5
 8011330:	4b12      	ldr	r3, [pc, #72]	@ (801137c <_vfiprintf_r+0x228>)
 8011332:	a904      	add	r1, sp, #16
 8011334:	4630      	mov	r0, r6
 8011336:	f7fd fcfb 	bl	800ed30 <_printf_float>
 801133a:	4607      	mov	r7, r0
 801133c:	1c78      	adds	r0, r7, #1
 801133e:	d1d6      	bne.n	80112ee <_vfiprintf_r+0x19a>
 8011340:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011342:	07d9      	lsls	r1, r3, #31
 8011344:	d405      	bmi.n	8011352 <_vfiprintf_r+0x1fe>
 8011346:	89ab      	ldrh	r3, [r5, #12]
 8011348:	059a      	lsls	r2, r3, #22
 801134a:	d402      	bmi.n	8011352 <_vfiprintf_r+0x1fe>
 801134c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801134e:	f7fe fa5f 	bl	800f810 <__retarget_lock_release_recursive>
 8011352:	89ab      	ldrh	r3, [r5, #12]
 8011354:	065b      	lsls	r3, r3, #25
 8011356:	f53f af1f 	bmi.w	8011198 <_vfiprintf_r+0x44>
 801135a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801135c:	e71e      	b.n	801119c <_vfiprintf_r+0x48>
 801135e:	ab03      	add	r3, sp, #12
 8011360:	9300      	str	r3, [sp, #0]
 8011362:	462a      	mov	r2, r5
 8011364:	4b05      	ldr	r3, [pc, #20]	@ (801137c <_vfiprintf_r+0x228>)
 8011366:	a904      	add	r1, sp, #16
 8011368:	4630      	mov	r0, r6
 801136a:	f7fd ff69 	bl	800f240 <_printf_i>
 801136e:	e7e4      	b.n	801133a <_vfiprintf_r+0x1e6>
 8011370:	08013ff8 	.word	0x08013ff8
 8011374:	08014002 	.word	0x08014002
 8011378:	0800ed31 	.word	0x0800ed31
 801137c:	08011131 	.word	0x08011131
 8011380:	08013ffe 	.word	0x08013ffe

08011384 <__swbuf_r>:
 8011384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011386:	460e      	mov	r6, r1
 8011388:	4614      	mov	r4, r2
 801138a:	4605      	mov	r5, r0
 801138c:	b118      	cbz	r0, 8011396 <__swbuf_r+0x12>
 801138e:	6a03      	ldr	r3, [r0, #32]
 8011390:	b90b      	cbnz	r3, 8011396 <__swbuf_r+0x12>
 8011392:	f7fe f901 	bl	800f598 <__sinit>
 8011396:	69a3      	ldr	r3, [r4, #24]
 8011398:	60a3      	str	r3, [r4, #8]
 801139a:	89a3      	ldrh	r3, [r4, #12]
 801139c:	071a      	lsls	r2, r3, #28
 801139e:	d501      	bpl.n	80113a4 <__swbuf_r+0x20>
 80113a0:	6923      	ldr	r3, [r4, #16]
 80113a2:	b943      	cbnz	r3, 80113b6 <__swbuf_r+0x32>
 80113a4:	4621      	mov	r1, r4
 80113a6:	4628      	mov	r0, r5
 80113a8:	f000 f82a 	bl	8011400 <__swsetup_r>
 80113ac:	b118      	cbz	r0, 80113b6 <__swbuf_r+0x32>
 80113ae:	f04f 37ff 	mov.w	r7, #4294967295
 80113b2:	4638      	mov	r0, r7
 80113b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113b6:	6823      	ldr	r3, [r4, #0]
 80113b8:	6922      	ldr	r2, [r4, #16]
 80113ba:	1a98      	subs	r0, r3, r2
 80113bc:	6963      	ldr	r3, [r4, #20]
 80113be:	b2f6      	uxtb	r6, r6
 80113c0:	4283      	cmp	r3, r0
 80113c2:	4637      	mov	r7, r6
 80113c4:	dc05      	bgt.n	80113d2 <__swbuf_r+0x4e>
 80113c6:	4621      	mov	r1, r4
 80113c8:	4628      	mov	r0, r5
 80113ca:	f7ff fdb7 	bl	8010f3c <_fflush_r>
 80113ce:	2800      	cmp	r0, #0
 80113d0:	d1ed      	bne.n	80113ae <__swbuf_r+0x2a>
 80113d2:	68a3      	ldr	r3, [r4, #8]
 80113d4:	3b01      	subs	r3, #1
 80113d6:	60a3      	str	r3, [r4, #8]
 80113d8:	6823      	ldr	r3, [r4, #0]
 80113da:	1c5a      	adds	r2, r3, #1
 80113dc:	6022      	str	r2, [r4, #0]
 80113de:	701e      	strb	r6, [r3, #0]
 80113e0:	6962      	ldr	r2, [r4, #20]
 80113e2:	1c43      	adds	r3, r0, #1
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d004      	beq.n	80113f2 <__swbuf_r+0x6e>
 80113e8:	89a3      	ldrh	r3, [r4, #12]
 80113ea:	07db      	lsls	r3, r3, #31
 80113ec:	d5e1      	bpl.n	80113b2 <__swbuf_r+0x2e>
 80113ee:	2e0a      	cmp	r6, #10
 80113f0:	d1df      	bne.n	80113b2 <__swbuf_r+0x2e>
 80113f2:	4621      	mov	r1, r4
 80113f4:	4628      	mov	r0, r5
 80113f6:	f7ff fda1 	bl	8010f3c <_fflush_r>
 80113fa:	2800      	cmp	r0, #0
 80113fc:	d0d9      	beq.n	80113b2 <__swbuf_r+0x2e>
 80113fe:	e7d6      	b.n	80113ae <__swbuf_r+0x2a>

08011400 <__swsetup_r>:
 8011400:	b538      	push	{r3, r4, r5, lr}
 8011402:	4b29      	ldr	r3, [pc, #164]	@ (80114a8 <__swsetup_r+0xa8>)
 8011404:	4605      	mov	r5, r0
 8011406:	6818      	ldr	r0, [r3, #0]
 8011408:	460c      	mov	r4, r1
 801140a:	b118      	cbz	r0, 8011414 <__swsetup_r+0x14>
 801140c:	6a03      	ldr	r3, [r0, #32]
 801140e:	b90b      	cbnz	r3, 8011414 <__swsetup_r+0x14>
 8011410:	f7fe f8c2 	bl	800f598 <__sinit>
 8011414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011418:	0719      	lsls	r1, r3, #28
 801141a:	d422      	bmi.n	8011462 <__swsetup_r+0x62>
 801141c:	06da      	lsls	r2, r3, #27
 801141e:	d407      	bmi.n	8011430 <__swsetup_r+0x30>
 8011420:	2209      	movs	r2, #9
 8011422:	602a      	str	r2, [r5, #0]
 8011424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011428:	81a3      	strh	r3, [r4, #12]
 801142a:	f04f 30ff 	mov.w	r0, #4294967295
 801142e:	e033      	b.n	8011498 <__swsetup_r+0x98>
 8011430:	0758      	lsls	r0, r3, #29
 8011432:	d512      	bpl.n	801145a <__swsetup_r+0x5a>
 8011434:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011436:	b141      	cbz	r1, 801144a <__swsetup_r+0x4a>
 8011438:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801143c:	4299      	cmp	r1, r3
 801143e:	d002      	beq.n	8011446 <__swsetup_r+0x46>
 8011440:	4628      	mov	r0, r5
 8011442:	f7fe ffd3 	bl	80103ec <_free_r>
 8011446:	2300      	movs	r3, #0
 8011448:	6363      	str	r3, [r4, #52]	@ 0x34
 801144a:	89a3      	ldrh	r3, [r4, #12]
 801144c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011450:	81a3      	strh	r3, [r4, #12]
 8011452:	2300      	movs	r3, #0
 8011454:	6063      	str	r3, [r4, #4]
 8011456:	6923      	ldr	r3, [r4, #16]
 8011458:	6023      	str	r3, [r4, #0]
 801145a:	89a3      	ldrh	r3, [r4, #12]
 801145c:	f043 0308 	orr.w	r3, r3, #8
 8011460:	81a3      	strh	r3, [r4, #12]
 8011462:	6923      	ldr	r3, [r4, #16]
 8011464:	b94b      	cbnz	r3, 801147a <__swsetup_r+0x7a>
 8011466:	89a3      	ldrh	r3, [r4, #12]
 8011468:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801146c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011470:	d003      	beq.n	801147a <__swsetup_r+0x7a>
 8011472:	4621      	mov	r1, r4
 8011474:	4628      	mov	r0, r5
 8011476:	f000 f883 	bl	8011580 <__smakebuf_r>
 801147a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801147e:	f013 0201 	ands.w	r2, r3, #1
 8011482:	d00a      	beq.n	801149a <__swsetup_r+0x9a>
 8011484:	2200      	movs	r2, #0
 8011486:	60a2      	str	r2, [r4, #8]
 8011488:	6962      	ldr	r2, [r4, #20]
 801148a:	4252      	negs	r2, r2
 801148c:	61a2      	str	r2, [r4, #24]
 801148e:	6922      	ldr	r2, [r4, #16]
 8011490:	b942      	cbnz	r2, 80114a4 <__swsetup_r+0xa4>
 8011492:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011496:	d1c5      	bne.n	8011424 <__swsetup_r+0x24>
 8011498:	bd38      	pop	{r3, r4, r5, pc}
 801149a:	0799      	lsls	r1, r3, #30
 801149c:	bf58      	it	pl
 801149e:	6962      	ldrpl	r2, [r4, #20]
 80114a0:	60a2      	str	r2, [r4, #8]
 80114a2:	e7f4      	b.n	801148e <__swsetup_r+0x8e>
 80114a4:	2000      	movs	r0, #0
 80114a6:	e7f7      	b.n	8011498 <__swsetup_r+0x98>
 80114a8:	24000048 	.word	0x24000048

080114ac <_raise_r>:
 80114ac:	291f      	cmp	r1, #31
 80114ae:	b538      	push	{r3, r4, r5, lr}
 80114b0:	4605      	mov	r5, r0
 80114b2:	460c      	mov	r4, r1
 80114b4:	d904      	bls.n	80114c0 <_raise_r+0x14>
 80114b6:	2316      	movs	r3, #22
 80114b8:	6003      	str	r3, [r0, #0]
 80114ba:	f04f 30ff 	mov.w	r0, #4294967295
 80114be:	bd38      	pop	{r3, r4, r5, pc}
 80114c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80114c2:	b112      	cbz	r2, 80114ca <_raise_r+0x1e>
 80114c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80114c8:	b94b      	cbnz	r3, 80114de <_raise_r+0x32>
 80114ca:	4628      	mov	r0, r5
 80114cc:	f000 f830 	bl	8011530 <_getpid_r>
 80114d0:	4622      	mov	r2, r4
 80114d2:	4601      	mov	r1, r0
 80114d4:	4628      	mov	r0, r5
 80114d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114da:	f000 b817 	b.w	801150c <_kill_r>
 80114de:	2b01      	cmp	r3, #1
 80114e0:	d00a      	beq.n	80114f8 <_raise_r+0x4c>
 80114e2:	1c59      	adds	r1, r3, #1
 80114e4:	d103      	bne.n	80114ee <_raise_r+0x42>
 80114e6:	2316      	movs	r3, #22
 80114e8:	6003      	str	r3, [r0, #0]
 80114ea:	2001      	movs	r0, #1
 80114ec:	e7e7      	b.n	80114be <_raise_r+0x12>
 80114ee:	2100      	movs	r1, #0
 80114f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80114f4:	4620      	mov	r0, r4
 80114f6:	4798      	blx	r3
 80114f8:	2000      	movs	r0, #0
 80114fa:	e7e0      	b.n	80114be <_raise_r+0x12>

080114fc <raise>:
 80114fc:	4b02      	ldr	r3, [pc, #8]	@ (8011508 <raise+0xc>)
 80114fe:	4601      	mov	r1, r0
 8011500:	6818      	ldr	r0, [r3, #0]
 8011502:	f7ff bfd3 	b.w	80114ac <_raise_r>
 8011506:	bf00      	nop
 8011508:	24000048 	.word	0x24000048

0801150c <_kill_r>:
 801150c:	b538      	push	{r3, r4, r5, lr}
 801150e:	4d07      	ldr	r5, [pc, #28]	@ (801152c <_kill_r+0x20>)
 8011510:	2300      	movs	r3, #0
 8011512:	4604      	mov	r4, r0
 8011514:	4608      	mov	r0, r1
 8011516:	4611      	mov	r1, r2
 8011518:	602b      	str	r3, [r5, #0]
 801151a:	f7ef fec5 	bl	80012a8 <_kill>
 801151e:	1c43      	adds	r3, r0, #1
 8011520:	d102      	bne.n	8011528 <_kill_r+0x1c>
 8011522:	682b      	ldr	r3, [r5, #0]
 8011524:	b103      	cbz	r3, 8011528 <_kill_r+0x1c>
 8011526:	6023      	str	r3, [r4, #0]
 8011528:	bd38      	pop	{r3, r4, r5, pc}
 801152a:	bf00      	nop
 801152c:	240060d8 	.word	0x240060d8

08011530 <_getpid_r>:
 8011530:	f7ef beb2 	b.w	8001298 <_getpid>

08011534 <__swhatbuf_r>:
 8011534:	b570      	push	{r4, r5, r6, lr}
 8011536:	460c      	mov	r4, r1
 8011538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801153c:	2900      	cmp	r1, #0
 801153e:	b096      	sub	sp, #88	@ 0x58
 8011540:	4615      	mov	r5, r2
 8011542:	461e      	mov	r6, r3
 8011544:	da0d      	bge.n	8011562 <__swhatbuf_r+0x2e>
 8011546:	89a3      	ldrh	r3, [r4, #12]
 8011548:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801154c:	f04f 0100 	mov.w	r1, #0
 8011550:	bf14      	ite	ne
 8011552:	2340      	movne	r3, #64	@ 0x40
 8011554:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011558:	2000      	movs	r0, #0
 801155a:	6031      	str	r1, [r6, #0]
 801155c:	602b      	str	r3, [r5, #0]
 801155e:	b016      	add	sp, #88	@ 0x58
 8011560:	bd70      	pop	{r4, r5, r6, pc}
 8011562:	466a      	mov	r2, sp
 8011564:	f000 f848 	bl	80115f8 <_fstat_r>
 8011568:	2800      	cmp	r0, #0
 801156a:	dbec      	blt.n	8011546 <__swhatbuf_r+0x12>
 801156c:	9901      	ldr	r1, [sp, #4]
 801156e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011572:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011576:	4259      	negs	r1, r3
 8011578:	4159      	adcs	r1, r3
 801157a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801157e:	e7eb      	b.n	8011558 <__swhatbuf_r+0x24>

08011580 <__smakebuf_r>:
 8011580:	898b      	ldrh	r3, [r1, #12]
 8011582:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011584:	079d      	lsls	r5, r3, #30
 8011586:	4606      	mov	r6, r0
 8011588:	460c      	mov	r4, r1
 801158a:	d507      	bpl.n	801159c <__smakebuf_r+0x1c>
 801158c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011590:	6023      	str	r3, [r4, #0]
 8011592:	6123      	str	r3, [r4, #16]
 8011594:	2301      	movs	r3, #1
 8011596:	6163      	str	r3, [r4, #20]
 8011598:	b003      	add	sp, #12
 801159a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801159c:	ab01      	add	r3, sp, #4
 801159e:	466a      	mov	r2, sp
 80115a0:	f7ff ffc8 	bl	8011534 <__swhatbuf_r>
 80115a4:	9f00      	ldr	r7, [sp, #0]
 80115a6:	4605      	mov	r5, r0
 80115a8:	4639      	mov	r1, r7
 80115aa:	4630      	mov	r0, r6
 80115ac:	f7fd faa4 	bl	800eaf8 <_malloc_r>
 80115b0:	b948      	cbnz	r0, 80115c6 <__smakebuf_r+0x46>
 80115b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115b6:	059a      	lsls	r2, r3, #22
 80115b8:	d4ee      	bmi.n	8011598 <__smakebuf_r+0x18>
 80115ba:	f023 0303 	bic.w	r3, r3, #3
 80115be:	f043 0302 	orr.w	r3, r3, #2
 80115c2:	81a3      	strh	r3, [r4, #12]
 80115c4:	e7e2      	b.n	801158c <__smakebuf_r+0xc>
 80115c6:	89a3      	ldrh	r3, [r4, #12]
 80115c8:	6020      	str	r0, [r4, #0]
 80115ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80115ce:	81a3      	strh	r3, [r4, #12]
 80115d0:	9b01      	ldr	r3, [sp, #4]
 80115d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80115d6:	b15b      	cbz	r3, 80115f0 <__smakebuf_r+0x70>
 80115d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115dc:	4630      	mov	r0, r6
 80115de:	f000 f81d 	bl	801161c <_isatty_r>
 80115e2:	b128      	cbz	r0, 80115f0 <__smakebuf_r+0x70>
 80115e4:	89a3      	ldrh	r3, [r4, #12]
 80115e6:	f023 0303 	bic.w	r3, r3, #3
 80115ea:	f043 0301 	orr.w	r3, r3, #1
 80115ee:	81a3      	strh	r3, [r4, #12]
 80115f0:	89a3      	ldrh	r3, [r4, #12]
 80115f2:	431d      	orrs	r5, r3
 80115f4:	81a5      	strh	r5, [r4, #12]
 80115f6:	e7cf      	b.n	8011598 <__smakebuf_r+0x18>

080115f8 <_fstat_r>:
 80115f8:	b538      	push	{r3, r4, r5, lr}
 80115fa:	4d07      	ldr	r5, [pc, #28]	@ (8011618 <_fstat_r+0x20>)
 80115fc:	2300      	movs	r3, #0
 80115fe:	4604      	mov	r4, r0
 8011600:	4608      	mov	r0, r1
 8011602:	4611      	mov	r1, r2
 8011604:	602b      	str	r3, [r5, #0]
 8011606:	f7ef feaf 	bl	8001368 <_fstat>
 801160a:	1c43      	adds	r3, r0, #1
 801160c:	d102      	bne.n	8011614 <_fstat_r+0x1c>
 801160e:	682b      	ldr	r3, [r5, #0]
 8011610:	b103      	cbz	r3, 8011614 <_fstat_r+0x1c>
 8011612:	6023      	str	r3, [r4, #0]
 8011614:	bd38      	pop	{r3, r4, r5, pc}
 8011616:	bf00      	nop
 8011618:	240060d8 	.word	0x240060d8

0801161c <_isatty_r>:
 801161c:	b538      	push	{r3, r4, r5, lr}
 801161e:	4d06      	ldr	r5, [pc, #24]	@ (8011638 <_isatty_r+0x1c>)
 8011620:	2300      	movs	r3, #0
 8011622:	4604      	mov	r4, r0
 8011624:	4608      	mov	r0, r1
 8011626:	602b      	str	r3, [r5, #0]
 8011628:	f7ef feae 	bl	8001388 <_isatty>
 801162c:	1c43      	adds	r3, r0, #1
 801162e:	d102      	bne.n	8011636 <_isatty_r+0x1a>
 8011630:	682b      	ldr	r3, [r5, #0]
 8011632:	b103      	cbz	r3, 8011636 <_isatty_r+0x1a>
 8011634:	6023      	str	r3, [r4, #0]
 8011636:	bd38      	pop	{r3, r4, r5, pc}
 8011638:	240060d8 	.word	0x240060d8
 801163c:	00000000 	.word	0x00000000

08011640 <fmod>:
 8011640:	b508      	push	{r3, lr}
 8011642:	ed2d 8b04 	vpush	{d8-d9}
 8011646:	eeb0 9b40 	vmov.f64	d9, d0
 801164a:	eeb0 8b41 	vmov.f64	d8, d1
 801164e:	f000 f8ef 	bl	8011830 <__ieee754_fmod>
 8011652:	eeb4 9b48 	vcmp.f64	d9, d8
 8011656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801165a:	d60c      	bvs.n	8011676 <fmod+0x36>
 801165c:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8011680 <fmod+0x40>
 8011660:	eeb4 8b49 	vcmp.f64	d8, d9
 8011664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011668:	d105      	bne.n	8011676 <fmod+0x36>
 801166a:	f7fe f8a5 	bl	800f7b8 <__errno>
 801166e:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8011672:	2321      	movs	r3, #33	@ 0x21
 8011674:	6003      	str	r3, [r0, #0]
 8011676:	ecbd 8b04 	vpop	{d8-d9}
 801167a:	bd08      	pop	{r3, pc}
 801167c:	f3af 8000 	nop.w
	...

08011688 <sqrt>:
 8011688:	b508      	push	{r3, lr}
 801168a:	ed2d 8b04 	vpush	{d8-d9}
 801168e:	eeb0 8b40 	vmov.f64	d8, d0
 8011692:	f000 f8c7 	bl	8011824 <__ieee754_sqrt>
 8011696:	eeb4 8b48 	vcmp.f64	d8, d8
 801169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801169e:	d60c      	bvs.n	80116ba <sqrt+0x32>
 80116a0:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 80116c0 <sqrt+0x38>
 80116a4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80116a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ac:	d505      	bpl.n	80116ba <sqrt+0x32>
 80116ae:	f7fe f883 	bl	800f7b8 <__errno>
 80116b2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80116b6:	2321      	movs	r3, #33	@ 0x21
 80116b8:	6003      	str	r3, [r0, #0]
 80116ba:	ecbd 8b04 	vpop	{d8-d9}
 80116be:	bd08      	pop	{r3, pc}
	...

080116c8 <asinf>:
 80116c8:	b508      	push	{r3, lr}
 80116ca:	ed2d 8b02 	vpush	{d8}
 80116ce:	eeb0 8a40 	vmov.f32	s16, s0
 80116d2:	f000 f9b9 	bl	8011a48 <__ieee754_asinf>
 80116d6:	eeb4 8a48 	vcmp.f32	s16, s16
 80116da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116de:	eef0 8a40 	vmov.f32	s17, s0
 80116e2:	d615      	bvs.n	8011710 <asinf+0x48>
 80116e4:	eeb0 0a48 	vmov.f32	s0, s16
 80116e8:	f000 f838 	bl	801175c <fabsf>
 80116ec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80116f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80116f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116f8:	dd0a      	ble.n	8011710 <asinf+0x48>
 80116fa:	f7fe f85d 	bl	800f7b8 <__errno>
 80116fe:	ecbd 8b02 	vpop	{d8}
 8011702:	2321      	movs	r3, #33	@ 0x21
 8011704:	6003      	str	r3, [r0, #0]
 8011706:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801170a:	4804      	ldr	r0, [pc, #16]	@ (801171c <asinf+0x54>)
 801170c:	f000 b82e 	b.w	801176c <nanf>
 8011710:	eeb0 0a68 	vmov.f32	s0, s17
 8011714:	ecbd 8b02 	vpop	{d8}
 8011718:	bd08      	pop	{r3, pc}
 801171a:	bf00      	nop
 801171c:	0801404e 	.word	0x0801404e

08011720 <sqrtf>:
 8011720:	b508      	push	{r3, lr}
 8011722:	ed2d 8b02 	vpush	{d8}
 8011726:	eeb0 8a40 	vmov.f32	s16, s0
 801172a:	f000 f87e 	bl	801182a <__ieee754_sqrtf>
 801172e:	eeb4 8a48 	vcmp.f32	s16, s16
 8011732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011736:	d60c      	bvs.n	8011752 <sqrtf+0x32>
 8011738:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8011758 <sqrtf+0x38>
 801173c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011744:	d505      	bpl.n	8011752 <sqrtf+0x32>
 8011746:	f7fe f837 	bl	800f7b8 <__errno>
 801174a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801174e:	2321      	movs	r3, #33	@ 0x21
 8011750:	6003      	str	r3, [r0, #0]
 8011752:	ecbd 8b02 	vpop	{d8}
 8011756:	bd08      	pop	{r3, pc}
 8011758:	00000000 	.word	0x00000000

0801175c <fabsf>:
 801175c:	ee10 3a10 	vmov	r3, s0
 8011760:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011764:	ee00 3a10 	vmov	s0, r3
 8011768:	4770      	bx	lr
	...

0801176c <nanf>:
 801176c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011774 <nanf+0x8>
 8011770:	4770      	bx	lr
 8011772:	bf00      	nop
 8011774:	7fc00000 	.word	0x7fc00000

08011778 <fmaxf>:
 8011778:	b508      	push	{r3, lr}
 801177a:	ed2d 8b02 	vpush	{d8}
 801177e:	eeb0 8a40 	vmov.f32	s16, s0
 8011782:	eef0 8a60 	vmov.f32	s17, s1
 8011786:	f000 f831 	bl	80117ec <__fpclassifyf>
 801178a:	b930      	cbnz	r0, 801179a <fmaxf+0x22>
 801178c:	eeb0 8a68 	vmov.f32	s16, s17
 8011790:	eeb0 0a48 	vmov.f32	s0, s16
 8011794:	ecbd 8b02 	vpop	{d8}
 8011798:	bd08      	pop	{r3, pc}
 801179a:	eeb0 0a68 	vmov.f32	s0, s17
 801179e:	f000 f825 	bl	80117ec <__fpclassifyf>
 80117a2:	2800      	cmp	r0, #0
 80117a4:	d0f4      	beq.n	8011790 <fmaxf+0x18>
 80117a6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80117aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ae:	dded      	ble.n	801178c <fmaxf+0x14>
 80117b0:	e7ee      	b.n	8011790 <fmaxf+0x18>

080117b2 <fminf>:
 80117b2:	b508      	push	{r3, lr}
 80117b4:	ed2d 8b02 	vpush	{d8}
 80117b8:	eeb0 8a40 	vmov.f32	s16, s0
 80117bc:	eef0 8a60 	vmov.f32	s17, s1
 80117c0:	f000 f814 	bl	80117ec <__fpclassifyf>
 80117c4:	b930      	cbnz	r0, 80117d4 <fminf+0x22>
 80117c6:	eeb0 8a68 	vmov.f32	s16, s17
 80117ca:	eeb0 0a48 	vmov.f32	s0, s16
 80117ce:	ecbd 8b02 	vpop	{d8}
 80117d2:	bd08      	pop	{r3, pc}
 80117d4:	eeb0 0a68 	vmov.f32	s0, s17
 80117d8:	f000 f808 	bl	80117ec <__fpclassifyf>
 80117dc:	2800      	cmp	r0, #0
 80117de:	d0f4      	beq.n	80117ca <fminf+0x18>
 80117e0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80117e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117e8:	d5ed      	bpl.n	80117c6 <fminf+0x14>
 80117ea:	e7ee      	b.n	80117ca <fminf+0x18>

080117ec <__fpclassifyf>:
 80117ec:	ee10 3a10 	vmov	r3, s0
 80117f0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80117f4:	d00d      	beq.n	8011812 <__fpclassifyf+0x26>
 80117f6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80117fa:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80117fe:	d30a      	bcc.n	8011816 <__fpclassifyf+0x2a>
 8011800:	4b07      	ldr	r3, [pc, #28]	@ (8011820 <__fpclassifyf+0x34>)
 8011802:	1e42      	subs	r2, r0, #1
 8011804:	429a      	cmp	r2, r3
 8011806:	d908      	bls.n	801181a <__fpclassifyf+0x2e>
 8011808:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 801180c:	4258      	negs	r0, r3
 801180e:	4158      	adcs	r0, r3
 8011810:	4770      	bx	lr
 8011812:	2002      	movs	r0, #2
 8011814:	4770      	bx	lr
 8011816:	2004      	movs	r0, #4
 8011818:	4770      	bx	lr
 801181a:	2003      	movs	r0, #3
 801181c:	4770      	bx	lr
 801181e:	bf00      	nop
 8011820:	007ffffe 	.word	0x007ffffe

08011824 <__ieee754_sqrt>:
 8011824:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8011828:	4770      	bx	lr

0801182a <__ieee754_sqrtf>:
 801182a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801182e:	4770      	bx	lr

08011830 <__ieee754_fmod>:
 8011830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011834:	ed8d 1b00 	vstr	d1, [sp]
 8011838:	e9dd 6500 	ldrd	r6, r5, [sp]
 801183c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8011840:	ea56 0307 	orrs.w	r3, r6, r7
 8011844:	46b6      	mov	lr, r6
 8011846:	d00d      	beq.n	8011864 <__ieee754_fmod+0x34>
 8011848:	ee10 ca90 	vmov	ip, s1
 801184c:	4b78      	ldr	r3, [pc, #480]	@ (8011a30 <__ieee754_fmod+0x200>)
 801184e:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 8011852:	4598      	cmp	r8, r3
 8011854:	d806      	bhi.n	8011864 <__ieee754_fmod+0x34>
 8011856:	4273      	negs	r3, r6
 8011858:	4a76      	ldr	r2, [pc, #472]	@ (8011a34 <__ieee754_fmod+0x204>)
 801185a:	4333      	orrs	r3, r6
 801185c:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8011860:	4293      	cmp	r3, r2
 8011862:	d908      	bls.n	8011876 <__ieee754_fmod+0x46>
 8011864:	ed9d 7b00 	vldr	d7, [sp]
 8011868:	ee20 7b07 	vmul.f64	d7, d0, d7
 801186c:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8011870:	b003      	add	sp, #12
 8011872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011876:	ee10 9a10 	vmov	r9, s0
 801187a:	45b8      	cmp	r8, r7
 801187c:	4649      	mov	r1, r9
 801187e:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 8011882:	dc09      	bgt.n	8011898 <__ieee754_fmod+0x68>
 8011884:	dbf4      	blt.n	8011870 <__ieee754_fmod+0x40>
 8011886:	454e      	cmp	r6, r9
 8011888:	d8f2      	bhi.n	8011870 <__ieee754_fmod+0x40>
 801188a:	d105      	bne.n	8011898 <__ieee754_fmod+0x68>
 801188c:	4b6a      	ldr	r3, [pc, #424]	@ (8011a38 <__ieee754_fmod+0x208>)
 801188e:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8011892:	ed93 0b00 	vldr	d0, [r3]
 8011896:	e7eb      	b.n	8011870 <__ieee754_fmod+0x40>
 8011898:	4a66      	ldr	r2, [pc, #408]	@ (8011a34 <__ieee754_fmod+0x204>)
 801189a:	ea1c 0f02 	tst.w	ip, r2
 801189e:	d14a      	bne.n	8011936 <__ieee754_fmod+0x106>
 80118a0:	f1b8 0f00 	cmp.w	r8, #0
 80118a4:	d13f      	bne.n	8011926 <__ieee754_fmod+0xf6>
 80118a6:	4865      	ldr	r0, [pc, #404]	@ (8011a3c <__ieee754_fmod+0x20c>)
 80118a8:	464b      	mov	r3, r9
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	dc38      	bgt.n	8011920 <__ieee754_fmod+0xf0>
 80118ae:	4215      	tst	r5, r2
 80118b0:	d150      	bne.n	8011954 <__ieee754_fmod+0x124>
 80118b2:	2f00      	cmp	r7, #0
 80118b4:	d147      	bne.n	8011946 <__ieee754_fmod+0x116>
 80118b6:	4a61      	ldr	r2, [pc, #388]	@ (8011a3c <__ieee754_fmod+0x20c>)
 80118b8:	4633      	mov	r3, r6
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	dc40      	bgt.n	8011940 <__ieee754_fmod+0x110>
 80118be:	4b60      	ldr	r3, [pc, #384]	@ (8011a40 <__ieee754_fmod+0x210>)
 80118c0:	4298      	cmp	r0, r3
 80118c2:	db4b      	blt.n	801195c <__ieee754_fmod+0x12c>
 80118c4:	f3cc 0313 	ubfx	r3, ip, #0, #20
 80118c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80118cc:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8011a40 <__ieee754_fmod+0x210>
 80118d0:	4562      	cmp	r2, ip
 80118d2:	db58      	blt.n	8011986 <__ieee754_fmod+0x156>
 80118d4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80118d8:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 80118dc:	1a80      	subs	r0, r0, r2
 80118de:	1b5e      	subs	r6, r3, r5
 80118e0:	eba1 070e 	sub.w	r7, r1, lr
 80118e4:	2800      	cmp	r0, #0
 80118e6:	d164      	bne.n	80119b2 <__ieee754_fmod+0x182>
 80118e8:	4571      	cmp	r1, lr
 80118ea:	bf38      	it	cc
 80118ec:	f106 36ff 	addcc.w	r6, r6, #4294967295
 80118f0:	2e00      	cmp	r6, #0
 80118f2:	bfa4      	itt	ge
 80118f4:	4639      	movge	r1, r7
 80118f6:	4633      	movge	r3, r6
 80118f8:	ea53 0001 	orrs.w	r0, r3, r1
 80118fc:	d0c6      	beq.n	801188c <__ieee754_fmod+0x5c>
 80118fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011902:	db6b      	blt.n	80119dc <__ieee754_fmod+0x1ac>
 8011904:	484e      	ldr	r0, [pc, #312]	@ (8011a40 <__ieee754_fmod+0x210>)
 8011906:	4282      	cmp	r2, r0
 8011908:	db6e      	blt.n	80119e8 <__ieee754_fmod+0x1b8>
 801190a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801190e:	4323      	orrs	r3, r4
 8011910:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8011914:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011918:	460c      	mov	r4, r1
 801191a:	ec45 4b10 	vmov	d0, r4, r5
 801191e:	e7a7      	b.n	8011870 <__ieee754_fmod+0x40>
 8011920:	3801      	subs	r0, #1
 8011922:	005b      	lsls	r3, r3, #1
 8011924:	e7c1      	b.n	80118aa <__ieee754_fmod+0x7a>
 8011926:	4846      	ldr	r0, [pc, #280]	@ (8011a40 <__ieee754_fmod+0x210>)
 8011928:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801192c:	2b00      	cmp	r3, #0
 801192e:	ddbe      	ble.n	80118ae <__ieee754_fmod+0x7e>
 8011930:	3801      	subs	r0, #1
 8011932:	005b      	lsls	r3, r3, #1
 8011934:	e7fa      	b.n	801192c <__ieee754_fmod+0xfc>
 8011936:	ea4f 5028 	mov.w	r0, r8, asr #20
 801193a:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 801193e:	e7b6      	b.n	80118ae <__ieee754_fmod+0x7e>
 8011940:	3a01      	subs	r2, #1
 8011942:	005b      	lsls	r3, r3, #1
 8011944:	e7b9      	b.n	80118ba <__ieee754_fmod+0x8a>
 8011946:	4a3e      	ldr	r2, [pc, #248]	@ (8011a40 <__ieee754_fmod+0x210>)
 8011948:	02fb      	lsls	r3, r7, #11
 801194a:	2b00      	cmp	r3, #0
 801194c:	ddb7      	ble.n	80118be <__ieee754_fmod+0x8e>
 801194e:	3a01      	subs	r2, #1
 8011950:	005b      	lsls	r3, r3, #1
 8011952:	e7fa      	b.n	801194a <__ieee754_fmod+0x11a>
 8011954:	153a      	asrs	r2, r7, #20
 8011956:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801195a:	e7b0      	b.n	80118be <__ieee754_fmod+0x8e>
 801195c:	eba3 0c00 	sub.w	ip, r3, r0
 8011960:	f1bc 0f1f 	cmp.w	ip, #31
 8011964:	dc09      	bgt.n	801197a <__ieee754_fmod+0x14a>
 8011966:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 801196a:	fa08 f10c 	lsl.w	r1, r8, ip
 801196e:	fa29 f303 	lsr.w	r3, r9, r3
 8011972:	430b      	orrs	r3, r1
 8011974:	fa09 f10c 	lsl.w	r1, r9, ip
 8011978:	e7a8      	b.n	80118cc <__ieee754_fmod+0x9c>
 801197a:	4b32      	ldr	r3, [pc, #200]	@ (8011a44 <__ieee754_fmod+0x214>)
 801197c:	1a1b      	subs	r3, r3, r0
 801197e:	fa09 f303 	lsl.w	r3, r9, r3
 8011982:	2100      	movs	r1, #0
 8011984:	e7a2      	b.n	80118cc <__ieee754_fmod+0x9c>
 8011986:	ebac 0c02 	sub.w	ip, ip, r2
 801198a:	f1bc 0f1f 	cmp.w	ip, #31
 801198e:	dc09      	bgt.n	80119a4 <__ieee754_fmod+0x174>
 8011990:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 8011994:	fa07 f70c 	lsl.w	r7, r7, ip
 8011998:	fa26 f505 	lsr.w	r5, r6, r5
 801199c:	433d      	orrs	r5, r7
 801199e:	fa06 fe0c 	lsl.w	lr, r6, ip
 80119a2:	e79b      	b.n	80118dc <__ieee754_fmod+0xac>
 80119a4:	4d27      	ldr	r5, [pc, #156]	@ (8011a44 <__ieee754_fmod+0x214>)
 80119a6:	1aad      	subs	r5, r5, r2
 80119a8:	fa06 f505 	lsl.w	r5, r6, r5
 80119ac:	f04f 0e00 	mov.w	lr, #0
 80119b0:	e794      	b.n	80118dc <__ieee754_fmod+0xac>
 80119b2:	4571      	cmp	r1, lr
 80119b4:	bf38      	it	cc
 80119b6:	f106 36ff 	addcc.w	r6, r6, #4294967295
 80119ba:	2e00      	cmp	r6, #0
 80119bc:	da05      	bge.n	80119ca <__ieee754_fmod+0x19a>
 80119be:	0fce      	lsrs	r6, r1, #31
 80119c0:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80119c4:	0049      	lsls	r1, r1, #1
 80119c6:	3801      	subs	r0, #1
 80119c8:	e789      	b.n	80118de <__ieee754_fmod+0xae>
 80119ca:	ea56 0307 	orrs.w	r3, r6, r7
 80119ce:	f43f af5d 	beq.w	801188c <__ieee754_fmod+0x5c>
 80119d2:	0ffb      	lsrs	r3, r7, #31
 80119d4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80119d8:	0079      	lsls	r1, r7, #1
 80119da:	e7f4      	b.n	80119c6 <__ieee754_fmod+0x196>
 80119dc:	0fc8      	lsrs	r0, r1, #31
 80119de:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80119e2:	0049      	lsls	r1, r1, #1
 80119e4:	3a01      	subs	r2, #1
 80119e6:	e78a      	b.n	80118fe <__ieee754_fmod+0xce>
 80119e8:	1a80      	subs	r0, r0, r2
 80119ea:	2814      	cmp	r0, #20
 80119ec:	dc0c      	bgt.n	8011a08 <__ieee754_fmod+0x1d8>
 80119ee:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80119f2:	fa03 f202 	lsl.w	r2, r3, r2
 80119f6:	40c1      	lsrs	r1, r0
 80119f8:	430a      	orrs	r2, r1
 80119fa:	4103      	asrs	r3, r0
 80119fc:	ea43 0104 	orr.w	r1, r3, r4
 8011a00:	4610      	mov	r0, r2
 8011a02:	ec41 0b10 	vmov	d0, r0, r1
 8011a06:	e733      	b.n	8011870 <__ieee754_fmod+0x40>
 8011a08:	281f      	cmp	r0, #31
 8011a0a:	dc07      	bgt.n	8011a1c <__ieee754_fmod+0x1ec>
 8011a0c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8011a10:	40c1      	lsrs	r1, r0
 8011a12:	fa03 f202 	lsl.w	r2, r3, r2
 8011a16:	430a      	orrs	r2, r1
 8011a18:	4623      	mov	r3, r4
 8011a1a:	e7ef      	b.n	80119fc <__ieee754_fmod+0x1cc>
 8011a1c:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8011a20:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8011a24:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8011a28:	32e2      	adds	r2, #226	@ 0xe2
 8011a2a:	fa43 f202 	asr.w	r2, r3, r2
 8011a2e:	e7f3      	b.n	8011a18 <__ieee754_fmod+0x1e8>
 8011a30:	7fefffff 	.word	0x7fefffff
 8011a34:	7ff00000 	.word	0x7ff00000
 8011a38:	08014150 	.word	0x08014150
 8011a3c:	fffffbed 	.word	0xfffffbed
 8011a40:	fffffc02 	.word	0xfffffc02
 8011a44:	fffffbe2 	.word	0xfffffbe2

08011a48 <__ieee754_asinf>:
 8011a48:	b538      	push	{r3, r4, r5, lr}
 8011a4a:	ee10 5a10 	vmov	r5, s0
 8011a4e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8011a52:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8011a56:	ed2d 8b04 	vpush	{d8-d9}
 8011a5a:	d10c      	bne.n	8011a76 <__ieee754_asinf+0x2e>
 8011a5c:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8011bd4 <__ieee754_asinf+0x18c>
 8011a60:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8011bd8 <__ieee754_asinf+0x190>
 8011a64:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011a68:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8011a70:	ecbd 8b04 	vpop	{d8-d9}
 8011a74:	bd38      	pop	{r3, r4, r5, pc}
 8011a76:	d904      	bls.n	8011a82 <__ieee754_asinf+0x3a>
 8011a78:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011a7c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011a80:	e7f6      	b.n	8011a70 <__ieee754_asinf+0x28>
 8011a82:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8011a86:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8011a8a:	d20b      	bcs.n	8011aa4 <__ieee754_asinf+0x5c>
 8011a8c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8011a90:	d252      	bcs.n	8011b38 <__ieee754_asinf+0xf0>
 8011a92:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8011bdc <__ieee754_asinf+0x194>
 8011a96:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011a9a:	eef4 7ae8 	vcmpe.f32	s15, s17
 8011a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aa2:	dce5      	bgt.n	8011a70 <__ieee754_asinf+0x28>
 8011aa4:	f7ff fe5a 	bl	801175c <fabsf>
 8011aa8:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8011aac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011ab0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011ab4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8011be0 <__ieee754_asinf+0x198>
 8011ab8:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8011be4 <__ieee754_asinf+0x19c>
 8011abc:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8011be8 <__ieee754_asinf+0x1a0>
 8011ac0:	eea8 7a27 	vfma.f32	s14, s16, s15
 8011ac4:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8011bec <__ieee754_asinf+0x1a4>
 8011ac8:	eee7 7a08 	vfma.f32	s15, s14, s16
 8011acc:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8011bf0 <__ieee754_asinf+0x1a8>
 8011ad0:	eea7 7a88 	vfma.f32	s14, s15, s16
 8011ad4:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8011bf4 <__ieee754_asinf+0x1ac>
 8011ad8:	eee7 7a08 	vfma.f32	s15, s14, s16
 8011adc:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8011bf8 <__ieee754_asinf+0x1b0>
 8011ae0:	eea7 9a88 	vfma.f32	s18, s15, s16
 8011ae4:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8011bfc <__ieee754_asinf+0x1b4>
 8011ae8:	eee8 7a07 	vfma.f32	s15, s16, s14
 8011aec:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8011c00 <__ieee754_asinf+0x1b8>
 8011af0:	eea7 7a88 	vfma.f32	s14, s15, s16
 8011af4:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8011c04 <__ieee754_asinf+0x1bc>
 8011af8:	eee7 7a08 	vfma.f32	s15, s14, s16
 8011afc:	eeb0 0a48 	vmov.f32	s0, s16
 8011b00:	eee7 8a88 	vfma.f32	s17, s15, s16
 8011b04:	f7ff fe91 	bl	801182a <__ieee754_sqrtf>
 8011b08:	4b3f      	ldr	r3, [pc, #252]	@ (8011c08 <__ieee754_asinf+0x1c0>)
 8011b0a:	ee29 9a08 	vmul.f32	s18, s18, s16
 8011b0e:	429c      	cmp	r4, r3
 8011b10:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8011b14:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011b18:	d93d      	bls.n	8011b96 <__ieee754_asinf+0x14e>
 8011b1a:	eea0 0a06 	vfma.f32	s0, s0, s12
 8011b1e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8011c0c <__ieee754_asinf+0x1c4>
 8011b22:	eee0 7a26 	vfma.f32	s15, s0, s13
 8011b26:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8011bd8 <__ieee754_asinf+0x190>
 8011b2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011b2e:	2d00      	cmp	r5, #0
 8011b30:	bfd8      	it	le
 8011b32:	eeb1 0a40 	vnegle.f32	s0, s0
 8011b36:	e79b      	b.n	8011a70 <__ieee754_asinf+0x28>
 8011b38:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011b3c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8011be4 <__ieee754_asinf+0x19c>
 8011b40:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8011be0 <__ieee754_asinf+0x198>
 8011b44:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8011bf8 <__ieee754_asinf+0x1b0>
 8011b48:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011b4c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8011bec <__ieee754_asinf+0x1a4>
 8011b50:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011b54:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8011bf0 <__ieee754_asinf+0x1a8>
 8011b58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011b5c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8011bf4 <__ieee754_asinf+0x1ac>
 8011b60:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011b64:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8011be8 <__ieee754_asinf+0x1a0>
 8011b68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011b6c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8011bfc <__ieee754_asinf+0x1b4>
 8011b70:	eee7 6a86 	vfma.f32	s13, s15, s12
 8011b74:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8011c00 <__ieee754_asinf+0x1b8>
 8011b78:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011b7c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8011c04 <__ieee754_asinf+0x1bc>
 8011b80:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011b84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011b88:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8011b8c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8011b90:	eea0 0a27 	vfma.f32	s0, s0, s15
 8011b94:	e76c      	b.n	8011a70 <__ieee754_asinf+0x28>
 8011b96:	ee10 3a10 	vmov	r3, s0
 8011b9a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8011b9e:	f023 030f 	bic.w	r3, r3, #15
 8011ba2:	ee07 3a10 	vmov	s14, r3
 8011ba6:	eea7 8a47 	vfms.f32	s16, s14, s14
 8011baa:	ee70 5a00 	vadd.f32	s11, s0, s0
 8011bae:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011bb2:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011bd4 <__ieee754_asinf+0x18c>
 8011bb6:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8011bba:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8011c10 <__ieee754_asinf+0x1c8>
 8011bbe:	eee5 7a66 	vfms.f32	s15, s10, s13
 8011bc2:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8011bc6:	eeb0 6a40 	vmov.f32	s12, s0
 8011bca:	eea7 6a66 	vfms.f32	s12, s14, s13
 8011bce:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011bd2:	e7aa      	b.n	8011b2a <__ieee754_asinf+0xe2>
 8011bd4:	b33bbd2e 	.word	0xb33bbd2e
 8011bd8:	3fc90fdb 	.word	0x3fc90fdb
 8011bdc:	7149f2ca 	.word	0x7149f2ca
 8011be0:	3a4f7f04 	.word	0x3a4f7f04
 8011be4:	3811ef08 	.word	0x3811ef08
 8011be8:	3e2aaaab 	.word	0x3e2aaaab
 8011bec:	bd241146 	.word	0xbd241146
 8011bf0:	3e4e0aa8 	.word	0x3e4e0aa8
 8011bf4:	bea6b090 	.word	0xbea6b090
 8011bf8:	3d9dc62e 	.word	0x3d9dc62e
 8011bfc:	bf303361 	.word	0xbf303361
 8011c00:	4001572d 	.word	0x4001572d
 8011c04:	c019d139 	.word	0xc019d139
 8011c08:	3f799999 	.word	0x3f799999
 8011c0c:	333bbd2e 	.word	0x333bbd2e
 8011c10:	3f490fdb 	.word	0x3f490fdb

08011c14 <_init>:
 8011c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c16:	bf00      	nop
 8011c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c1a:	bc08      	pop	{r3}
 8011c1c:	469e      	mov	lr, r3
 8011c1e:	4770      	bx	lr

08011c20 <_fini>:
 8011c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c22:	bf00      	nop
 8011c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c26:	bc08      	pop	{r3}
 8011c28:	469e      	mov	lr, r3
 8011c2a:	4770      	bx	lr
