
EX_Single_Phase_Rectifier_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011bdc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002538  08011e80  08011e80  00012e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080143b8  080143b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080143c0  080143c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080143c4  080143c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000204  24000000  080143c8  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005edc  24000204  080145cc  00016204  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  240060e0  080145cc  000170e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00016204  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034071  00000000  00000000  00016232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006c74  00000000  00000000  0004a2a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002420  00000000  00000000  00050f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001b57  00000000  00000000  00053338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004014e  00000000  00000000  00054e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000310a7  00000000  00000000  00094fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00187603  00000000  00000000  000c6084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  0024d687  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a814  00000000  00000000  0024d740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  00257f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000005c1  00000000  00000000  00257fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000058  00000000  00000000  0025858d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000204 	.word	0x24000204
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011e64 	.word	0x08011e64

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000208 	.word	0x24000208
 80002dc:	08011e64 	.word	0x08011e64

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	@ 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
 80005c0:	615a      	str	r2, [r3, #20]
 80005c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80005c4:	4b34      	ldr	r3, [pc, #208]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005c6:	4a35      	ldr	r2, [pc, #212]	@ (800069c <MX_ADC3_Init+0xf0>)
 80005c8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80005ca:	4b33      	ldr	r3, [pc, #204]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005cc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80005d0:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005d2:	4b31      	ldr	r3, [pc, #196]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005da:	2204      	movs	r2, #4
 80005dc:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80005de:	4b2e      	ldr	r3, [pc, #184]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80005ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005f0:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f6:	4b28      	ldr	r3, [pc, #160]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fc:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <MX_ADC3_Init+0xec>)
 80005fe:	2200      	movs	r2, #0
 8000600:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000602:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <MX_ADC3_Init+0xec>)
 8000604:	2200      	movs	r2, #0
 8000606:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000608:	4b23      	ldr	r3, [pc, #140]	@ (8000698 <MX_ADC3_Init+0xec>)
 800060a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800060e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000610:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <MX_ADC3_Init+0xec>)
 8000612:	2200      	movs	r2, #0
 8000614:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = ENABLE;
 8000616:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <MX_ADC3_Init+0xec>)
 8000618:	2201      	movs	r2, #1
 800061a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 15;
 800061e:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <MX_ADC3_Init+0xec>)
 8000620:	220f      	movs	r2, #15
 8000622:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000624:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <MX_ADC3_Init+0xec>)
 8000626:	2280      	movs	r2, #128	@ 0x80
 8000628:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800062a:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <MX_ADC3_Init+0xec>)
 800062c:	2200      	movs	r2, #0
 800062e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000630:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_ADC3_Init+0xec>)
 8000632:	2201      	movs	r2, #1
 8000634:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000636:	4818      	ldr	r0, [pc, #96]	@ (8000698 <MX_ADC3_Init+0xec>)
 8000638:	f001 fc70 	bl	8001f1c <HAL_ADC_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000642:	f000 fc9d 	bl	8000f80 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <MX_ADC3_Init+0xec>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800064c:	4812      	ldr	r0, [pc, #72]	@ (8000698 <MX_ADC3_Init+0xec>)
 800064e:	f001 fc65 	bl	8001f1c <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000658:	f000 fc92 	bl	8000f80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800065c:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <MX_ADC3_Init+0xf4>)
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000660:	2306      	movs	r3, #6
 8000662:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000664:	2307      	movs	r3, #7
 8000666:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000668:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800066c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800066e:	2304      	movs	r3, #4
 8000670:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000676:	2300      	movs	r3, #0
 8000678:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	@ (8000698 <MX_ADC3_Init+0xec>)
 8000680:	f001 ffba 	bl	80025f8 <HAL_ADC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 800068a:	f000 fc79 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	3720      	adds	r7, #32
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	24000220 	.word	0x24000220
 800069c:	58026000 	.word	0x58026000
 80006a0:	cb840000 	.word	0xcb840000

080006a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b0b4      	sub	sp, #208	@ 0xd0
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	22c0      	movs	r2, #192	@ 0xc0
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f00f f944 	bl	800f942 <memset>
  if(adcHandle->Instance==ADC3)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a1d      	ldr	r2, [pc, #116]	@ (8000734 <HAL_ADC_MspInit+0x90>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d132      	bne.n	800072a <HAL_ADC_MspInit+0x86>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006c4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80006c8:	f04f 0300 	mov.w	r3, #0
 80006cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80006d0:	2319      	movs	r3, #25
 80006d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 504;
 80006d4:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 80006d8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 7;
 80006da:	2307      	movs	r3, #7
 80006dc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80006f2:	2300      	movs	r3, #0
 80006f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	4618      	mov	r0, r3
 80006fe:	f005 f811 	bl	8005724 <HAL_RCCEx_PeriphCLKConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 8000708:	f000 fc3a 	bl	8000f80 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800070c:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <HAL_ADC_MspInit+0x94>)
 800070e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000712:	4a09      	ldr	r2, [pc, #36]	@ (8000738 <HAL_ADC_MspInit+0x94>)
 8000714:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000718:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <HAL_ADC_MspInit+0x94>)
 800071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000722:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800072a:	bf00      	nop
 800072c:	37d0      	adds	r7, #208	@ 0xd0
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	58026000 	.word	0x58026000
 8000738:	58024400 	.word	0x58024400

0800073c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	@ 0x28
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2224      	movs	r2, #36	@ 0x24
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f00f f8fa 	bl	800f942 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_DAC1_Init+0x5c>)
 8000750:	4a12      	ldr	r2, [pc, #72]	@ (800079c <MX_DAC1_Init+0x60>)
 8000752:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000754:	4810      	ldr	r0, [pc, #64]	@ (8000798 <MX_DAC1_Init+0x5c>)
 8000756:	f002 fe8f 	bl	8003478 <HAL_DAC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000760:	f000 fc0e 	bl	8000f80 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000770:	2301      	movs	r3, #1
 8000772:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	@ (8000798 <MX_DAC1_Init+0x5c>)
 8000780:	f002 ff7e 	bl	8003680 <HAL_DAC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 fbf9 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3728      	adds	r7, #40	@ 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	24000284 	.word	0x24000284
 800079c:	40007400 	.word	0x40007400

080007a0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	@ 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000830 <HAL_DAC_MspInit+0x90>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d131      	bne.n	8000826 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <HAL_DAC_MspInit+0x94>)
 80007c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000834 <HAL_DAC_MspInit+0x94>)
 80007ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80007ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80007d2:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <HAL_DAC_MspInit+0x94>)
 80007d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <HAL_DAC_MspInit+0x94>)
 80007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e6:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <HAL_DAC_MspInit+0x94>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f0:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <HAL_DAC_MspInit+0x94>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007fe:	2310      	movs	r3, #16
 8000800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000802:	2303      	movs	r3, #3
 8000804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4809      	ldr	r0, [pc, #36]	@ (8000838 <HAL_DAC_MspInit+0x98>)
 8000812:	f003 f881 	bl	8003918 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2105      	movs	r1, #5
 800081a:	2036      	movs	r0, #54	@ 0x36
 800081c:	f002 fd8c 	bl	8003338 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000820:	2036      	movs	r0, #54	@ 0x36
 8000822:	f002 fda3 	bl	800336c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000826:	bf00      	nop
 8000828:	3728      	adds	r7, #40	@ 0x28
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40007400 	.word	0x40007400
 8000834:	58024400 	.word	0x58024400
 8000838:	58020000 	.word	0x58020000

0800083c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  UserInit();
 8000840:	f00d fef4 	bl	800e62c <UserInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateLED */
  stateLEDHandle = osThreadNew(StartStateLED, NULL, &stateLED_attributes);
 8000844:	4a18      	ldr	r2, [pc, #96]	@ (80008a8 <MX_FREERTOS_Init+0x6c>)
 8000846:	2100      	movs	r1, #0
 8000848:	4818      	ldr	r0, [pc, #96]	@ (80008ac <MX_FREERTOS_Init+0x70>)
 800084a:	f009 fe49 	bl	800a4e0 <osThreadNew>
 800084e:	4603      	mov	r3, r0
 8000850:	4a17      	ldr	r2, [pc, #92]	@ (80008b0 <MX_FREERTOS_Init+0x74>)
 8000852:	6013      	str	r3, [r2, #0]

  /* creation of mcuTemperature */
  mcuTemperatureHandle = osThreadNew(StartMcuTemperature, NULL, &mcuTemperature_attributes);
 8000854:	4a17      	ldr	r2, [pc, #92]	@ (80008b4 <MX_FREERTOS_Init+0x78>)
 8000856:	2100      	movs	r1, #0
 8000858:	4817      	ldr	r0, [pc, #92]	@ (80008b8 <MX_FREERTOS_Init+0x7c>)
 800085a:	f009 fe41 	bl	800a4e0 <osThreadNew>
 800085e:	4603      	mov	r3, r0
 8000860:	4a16      	ldr	r2, [pc, #88]	@ (80008bc <MX_FREERTOS_Init+0x80>)
 8000862:	6013      	str	r3, [r2, #0]

  /* creation of oledDisplay */
  oledDisplayHandle = osThreadNew(StartOledDisplay, NULL, &oledDisplay_attributes);
 8000864:	4a16      	ldr	r2, [pc, #88]	@ (80008c0 <MX_FREERTOS_Init+0x84>)
 8000866:	2100      	movs	r1, #0
 8000868:	4816      	ldr	r0, [pc, #88]	@ (80008c4 <MX_FREERTOS_Init+0x88>)
 800086a:	f009 fe39 	bl	800a4e0 <osThreadNew>
 800086e:	4603      	mov	r3, r0
 8000870:	4a15      	ldr	r2, [pc, #84]	@ (80008c8 <MX_FREERTOS_Init+0x8c>)
 8000872:	6013      	str	r3, [r2, #0]

  /* creation of dcSampling */
  dcSamplingHandle = osThreadNew(StartDCSampling, NULL, &dcSampling_attributes);
 8000874:	4a15      	ldr	r2, [pc, #84]	@ (80008cc <MX_FREERTOS_Init+0x90>)
 8000876:	2100      	movs	r1, #0
 8000878:	4815      	ldr	r0, [pc, #84]	@ (80008d0 <MX_FREERTOS_Init+0x94>)
 800087a:	f009 fe31 	bl	800a4e0 <osThreadNew>
 800087e:	4603      	mov	r3, r0
 8000880:	4a14      	ldr	r2, [pc, #80]	@ (80008d4 <MX_FREERTOS_Init+0x98>)
 8000882:	6013      	str	r3, [r2, #0]

  /* creation of circuitProtecti */
  circuitProtectiHandle = osThreadNew(StartCircuitProtection, NULL, &circuitProtecti_attributes);
 8000884:	4a14      	ldr	r2, [pc, #80]	@ (80008d8 <MX_FREERTOS_Init+0x9c>)
 8000886:	2100      	movs	r1, #0
 8000888:	4814      	ldr	r0, [pc, #80]	@ (80008dc <MX_FREERTOS_Init+0xa0>)
 800088a:	f009 fe29 	bl	800a4e0 <osThreadNew>
 800088e:	4603      	mov	r3, r0
 8000890:	4a13      	ldr	r2, [pc, #76]	@ (80008e0 <MX_FREERTOS_Init+0xa4>)
 8000892:	6013      	str	r3, [r2, #0]

  /* creation of dcControl */
  dcControlHandle = osThreadNew(StartDCControl, NULL, &dcControl_attributes);
 8000894:	4a13      	ldr	r2, [pc, #76]	@ (80008e4 <MX_FREERTOS_Init+0xa8>)
 8000896:	2100      	movs	r1, #0
 8000898:	4813      	ldr	r0, [pc, #76]	@ (80008e8 <MX_FREERTOS_Init+0xac>)
 800089a:	f009 fe21 	bl	800a4e0 <osThreadNew>
 800089e:	4603      	mov	r3, r0
 80008a0:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <MX_FREERTOS_Init+0xb0>)
 80008a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	08011f44 	.word	0x08011f44
 80008ac:	0800e689 	.word	0x0800e689
 80008b0:	24000298 	.word	0x24000298
 80008b4:	08011f68 	.word	0x08011f68
 80008b8:	0800e721 	.word	0x0800e721
 80008bc:	2400029c 	.word	0x2400029c
 80008c0:	08011f8c 	.word	0x08011f8c
 80008c4:	0800e7c9 	.word	0x0800e7c9
 80008c8:	240002a0 	.word	0x240002a0
 80008cc:	08011fb0 	.word	0x08011fb0
 80008d0:	0800e8fd 	.word	0x0800e8fd
 80008d4:	240002a4 	.word	0x240002a4
 80008d8:	08011fd4 	.word	0x08011fd4
 80008dc:	0800e945 	.word	0x0800e945
 80008e0:	240002a8 	.word	0x240002a8
 80008e4:	08011ff8 	.word	0x08011ff8
 80008e8:	0800ea99 	.word	0x0800ea99
 80008ec:	240002ac 	.word	0x240002ac

080008f0 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	@ 0x30
 80008f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	4b71      	ldr	r3, [pc, #452]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090c:	4a6f      	ldr	r2, [pc, #444]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 800090e:	f043 0304 	orr.w	r3, r3, #4
 8000912:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000916:	4b6d      	ldr	r3, [pc, #436]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091c:	f003 0304 	and.w	r3, r3, #4
 8000920:	61bb      	str	r3, [r7, #24]
 8000922:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000924:	4b69      	ldr	r3, [pc, #420]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092a:	4a68      	ldr	r2, [pc, #416]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 800092c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000934:	4b65      	ldr	r3, [pc, #404]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b62      	ldr	r3, [pc, #392]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000948:	4a60      	ldr	r2, [pc, #384]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000952:	4b5e      	ldr	r3, [pc, #376]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	4b5a      	ldr	r3, [pc, #360]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000966:	4a59      	ldr	r2, [pc, #356]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000970:	4b56      	ldr	r3, [pc, #344]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800097e:	4b53      	ldr	r3, [pc, #332]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000984:	4a51      	ldr	r2, [pc, #324]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800098a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098e:	4b4f      	ldr	r3, [pc, #316]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800099c:	4b4b      	ldr	r3, [pc, #300]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a2:	4a4a      	ldr	r2, [pc, #296]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 80009a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ac:	4b47      	ldr	r3, [pc, #284]	@ (8000acc <MX_GPIO_Init+0x1dc>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2120      	movs	r1, #32
 80009be:	4844      	ldr	r0, [pc, #272]	@ (8000ad0 <MX_GPIO_Init+0x1e0>)
 80009c0:	f003 f95a 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2102      	movs	r1, #2
 80009c8:	4842      	ldr	r0, [pc, #264]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 80009ca:	f003 f955 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2188      	movs	r1, #136	@ 0x88
 80009d2:	4841      	ldr	r0, [pc, #260]	@ (8000ad8 <MX_GPIO_Init+0x1e8>)
 80009d4:	f003 f950 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009de:	483f      	ldr	r0, [pc, #252]	@ (8000adc <MX_GPIO_Init+0x1ec>)
 80009e0:	f003 f94a 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0|OLED_DC_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2141      	movs	r1, #65	@ 0x41
 80009e8:	483d      	ldr	r0, [pc, #244]	@ (8000ae0 <MX_GPIO_Init+0x1f0>)
 80009ea:	f003 f945 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 80009ee:	2320      	movs	r3, #32
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009fa:	2301      	movs	r3, #1
 80009fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4832      	ldr	r0, [pc, #200]	@ (8000ad0 <MX_GPIO_Init+0x1e0>)
 8000a06:	f002 ff87 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a16:	2301      	movs	r3, #1
 8000a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	482c      	ldr	r0, [pc, #176]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 8000a22:	f002 ff79 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 8000a26:	2388      	movs	r3, #136	@ 0x88
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4826      	ldr	r0, [pc, #152]	@ (8000ad8 <MX_GPIO_Init+0x1e8>)
 8000a3e:	f002 ff6b 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 8000a42:	2340      	movs	r3, #64	@ 0x40
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a46:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4820      	ldr	r0, [pc, #128]	@ (8000ad8 <MX_GPIO_Init+0x1e8>)
 8000a58:	f002 ff5e 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR2104_SD_Pin;
 8000a5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a66:	2302      	movs	r3, #2
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IR2104_SD_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4819      	ldr	r0, [pc, #100]	@ (8000adc <MX_GPIO_Init+0x1ec>)
 8000a76:	f002 ff4f 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4813      	ldr	r0, [pc, #76]	@ (8000ae0 <MX_GPIO_Init+0x1f0>)
 8000a92:	f002 ff41 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000a96:	2340      	movs	r3, #64	@ 0x40
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <MX_GPIO_Init+0x1f0>)
 8000aae:	f002 ff33 	bl	8003918 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	2017      	movs	r0, #23
 8000ab8:	f002 fc3e 	bl	8003338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000abc:	2017      	movs	r0, #23
 8000abe:	f002 fc55 	bl	800336c <HAL_NVIC_EnableIRQ>

}
 8000ac2:	bf00      	nop
 8000ac4:	3730      	adds	r7, #48	@ 0x30
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	58024400 	.word	0x58024400
 8000ad0:	58020800 	.word	0x58020800
 8000ad4:	58020400 	.word	0x58020400
 8000ad8:	58021800 	.word	0x58021800
 8000adc:	58020000 	.word	0x58020000
 8000ae0:	58022000 	.word	0x58022000

08000ae4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000aea:	4a1c      	ldr	r2, [pc, #112]	@ (8000b5c <MX_I2C1_Init+0x78>)
 8000aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000af0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b60 <MX_I2C1_Init+0x7c>)
 8000af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000af4:	4b18      	ldr	r3, [pc, #96]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b06:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b1e:	480e      	ldr	r0, [pc, #56]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b20:	f003 f8f8 	bl	8003d14 <HAL_I2C_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b2a:	f000 fa29 	bl	8000f80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4809      	ldr	r0, [pc, #36]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b32:	f003 fd13 	bl	800455c <HAL_I2CEx_ConfigAnalogFilter>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b3c:	f000 fa20 	bl	8000f80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b40:	2100      	movs	r1, #0
 8000b42:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <MX_I2C1_Init+0x74>)
 8000b44:	f003 fd55 	bl	80045f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b4e:	f000 fa17 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	240002b0 	.word	0x240002b0
 8000b5c:	40005400 	.word	0x40005400
 8000b60:	307075b1 	.word	0x307075b1

08000b64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0ba      	sub	sp, #232	@ 0xe8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	22c0      	movs	r2, #192	@ 0xc0
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00e fedc 	bl	800f942 <memset>
  if(i2cHandle->Instance==I2C1)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a26      	ldr	r2, [pc, #152]	@ (8000c28 <HAL_I2C_MspInit+0xc4>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d145      	bne.n	8000c20 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b94:	f04f 0208 	mov.w	r2, #8
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4618      	mov	r0, r3
 8000bac:	f004 fdba 	bl	8005724 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000bb6:	f000 f9e3 	bl	8000f80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <HAL_I2C_MspInit+0xc8>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c2c <HAL_I2C_MspInit+0xc8>)
 8000bc2:	f043 0302 	orr.w	r3, r3, #2
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bca:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <HAL_I2C_MspInit+0xc8>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bd8:	23c0      	movs	r3, #192	@ 0xc0
 8000bda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bde:	2312      	movs	r3, #18
 8000be0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000bea:	2301      	movs	r3, #1
 8000bec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480c      	ldr	r0, [pc, #48]	@ (8000c30 <HAL_I2C_MspInit+0xcc>)
 8000bfe:	f002 fe8b 	bl	8003918 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <HAL_I2C_MspInit+0xc8>)
 8000c04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c08:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <HAL_I2C_MspInit+0xc8>)
 8000c0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c0e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_I2C_MspInit+0xc8>)
 8000c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c20:	bf00      	nop
 8000c22:	37e8      	adds	r7, #232	@ 0xe8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40005400 	.word	0x40005400
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	58020400 	.word	0x58020400

08000c34 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c3a:	f000 f961 	bl	8000f00 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c3e:	4b40      	ldr	r3, [pc, #256]	@ (8000d40 <main+0x10c>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d11b      	bne.n	8000c82 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4a:	f3bf 8f4f 	dsb	sy
}
 8000c4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c50:	f3bf 8f6f 	isb	sy
}
 8000c54:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c56:	4b3a      	ldr	r3, [pc, #232]	@ (8000d40 <main+0x10c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c5e:	f3bf 8f4f 	dsb	sy
}
 8000c62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c64:	f3bf 8f6f 	isb	sy
}
 8000c68:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c6a:	4b35      	ldr	r3, [pc, #212]	@ (8000d40 <main+0x10c>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	4a34      	ldr	r2, [pc, #208]	@ (8000d40 <main+0x10c>)
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c74:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c76:	f3bf 8f4f 	dsb	sy
}
 8000c7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c7c:	f3bf 8f6f 	isb	sy
}
 8000c80:	e000      	b.n	8000c84 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c82:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c84:	4b2e      	ldr	r3, [pc, #184]	@ (8000d40 <main+0x10c>)
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d138      	bne.n	8000d02 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000c90:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <main+0x10c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c98:	f3bf 8f4f 	dsb	sy
}
 8000c9c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c9e:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <main+0x10c>)
 8000ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ca4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	0b5b      	lsrs	r3, r3, #13
 8000caa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000cae:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	08db      	lsrs	r3, r3, #3
 8000cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cb8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	015a      	lsls	r2, r3, #5
 8000cbe:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000cc2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cc8:	491d      	ldr	r1, [pc, #116]	@ (8000d40 <main+0x10c>)
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	1e5a      	subs	r2, r3, #1
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1ef      	bne.n	8000cba <main+0x86>
    } while(sets-- != 0U);
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1e5a      	subs	r2, r3, #1
 8000cde:	60ba      	str	r2, [r7, #8]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1e5      	bne.n	8000cb0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ce4:	f3bf 8f4f 	dsb	sy
}
 8000ce8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <main+0x10c>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	4a14      	ldr	r2, [pc, #80]	@ (8000d40 <main+0x10c>)
 8000cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cf4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cf6:	f3bf 8f4f 	dsb	sy
}
 8000cfa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cfc:	f3bf 8f6f 	isb	sy
}
 8000d00:	e000      	b.n	8000d04 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d02:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d04:	f000 fe76 	bl	80019f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d08:	f000 f81c 	bl	8000d44 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d0c:	f000 f8c8 	bl	8000ea0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d10:	f7ff fdee 	bl	80008f0 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000d14:	f7ff fc4a 	bl	80005ac <MX_ADC3_Init>
  MX_SPI1_Init();
 8000d18:	f000 f938 	bl	8000f8c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d1c:	f000 f98e 	bl	800103c <MX_SPI2_Init>
  MX_I2C1_Init();
 8000d20:	f7ff fee0 	bl	8000ae4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000d24:	f000 fc72 	bl	800160c <MX_TIM2_Init>
  MX_DAC1_Init();
 8000d28:	f7ff fd08 	bl	800073c <MX_DAC1_Init>
  MX_TIM8_Init();
 8000d2c:	f000 fce6 	bl	80016fc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d30:	f009 fb8c 	bl	800a44c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d34:	f7ff fd82 	bl	800083c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d38:	f009 fbac 	bl	800a494 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <main+0x108>
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b09e      	sub	sp, #120	@ 0x78
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d4e:	224c      	movs	r2, #76	@ 0x4c
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f00e fdf5 	bl	800f942 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f00e fdee 	bl	800f942 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d66:	2002      	movs	r0, #2
 8000d68:	f003 fc90 	bl	800468c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	4b48      	ldr	r3, [pc, #288]	@ (8000e94 <SystemClock_Config+0x150>)
 8000d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d74:	4a47      	ldr	r2, [pc, #284]	@ (8000e94 <SystemClock_Config+0x150>)
 8000d76:	f023 0301 	bic.w	r3, r3, #1
 8000d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d7c:	4b45      	ldr	r3, [pc, #276]	@ (8000e94 <SystemClock_Config+0x150>)
 8000d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	4b44      	ldr	r3, [pc, #272]	@ (8000e98 <SystemClock_Config+0x154>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a43      	ldr	r2, [pc, #268]	@ (8000e98 <SystemClock_Config+0x154>)
 8000d8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b41      	ldr	r3, [pc, #260]	@ (8000e98 <SystemClock_Config+0x154>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000d9e:	bf00      	nop
 8000da0:	4b3d      	ldr	r3, [pc, #244]	@ (8000e98 <SystemClock_Config+0x154>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000da8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dac:	d1f8      	bne.n	8000da0 <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	4b3b      	ldr	r3, [pc, #236]	@ (8000e9c <SystemClock_Config+0x158>)
 8000db0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000db4:	4a39      	ldr	r2, [pc, #228]	@ (8000e9c <SystemClock_Config+0x158>)
 8000db6:	f043 0302 	orr.w	r3, r3, #2
 8000dba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dbe:	4b37      	ldr	r3, [pc, #220]	@ (8000e9c <SystemClock_Config+0x158>)
 8000dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	4b31      	ldr	r3, [pc, #196]	@ (8000e98 <SystemClock_Config+0x154>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a30      	ldr	r2, [pc, #192]	@ (8000e98 <SystemClock_Config+0x154>)
 8000dd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8000e98 <SystemClock_Config+0x154>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e94 <SystemClock_Config+0x150>)
 8000de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dea:	4a2a      	ldr	r2, [pc, #168]	@ (8000e94 <SystemClock_Config+0x150>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000df2:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <SystemClock_Config+0x150>)
 8000df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000dfe:	bf00      	nop
 8000e00:	4b25      	ldr	r3, [pc, #148]	@ (8000e98 <SystemClock_Config+0x154>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e0c:	d1f8      	bne.n	8000e00 <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e16:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000e20:	2305      	movs	r3, #5
 8000e22:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e24:	23c0      	movs	r3, #192	@ 0xc0
 8000e26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000e2c:	2314      	movs	r3, #20
 8000e2e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e34:	2308      	movs	r3, #8
 8000e36:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e44:	4618      	mov	r0, r3
 8000e46:	f003 fc5b 	bl	8004700 <HAL_RCC_OscConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000e50:	f000 f896 	bl	8000f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000e54:	233f      	movs	r3, #63	@ 0x3f
 8000e56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e60:	2308      	movs	r3, #8
 8000e62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e64:	2340      	movs	r3, #64	@ 0x40
 8000e66:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e68:	2340      	movs	r3, #64	@ 0x40
 8000e6a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e72:	2340      	movs	r3, #64	@ 0x40
 8000e74:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f004 f899 	bl	8004fb4 <HAL_RCC_ClockConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000e88:	f000 f87a 	bl	8000f80 <Error_Handler>
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	3778      	adds	r7, #120	@ 0x78
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	58000400 	.word	0x58000400
 8000e98:	58024800 	.word	0x58024800
 8000e9c:	58024400 	.word	0x58024400

08000ea0 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0b0      	sub	sp, #192	@ 0xc0
 8000ea4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	22c0      	movs	r2, #192	@ 0xc0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f00e fd48 	bl	800f942 <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
 8000eb2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000eb6:	f04f 0300 	mov.w	r3, #0
 8000eba:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000ebe:	2319      	movs	r3, #25
 8000ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 8000ec2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000ee0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ee4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f004 fc1b 	bl	8005724 <HAL_RCCEx_PeriphCLKConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000ef4:	f000 f844 	bl	8000f80 <Error_Handler>
  }
}
 8000ef8:	bf00      	nop
 8000efa:	37c0      	adds	r7, #192	@ 0xc0
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f12:	f002 fa39 	bl	8003388 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f16:	2301      	movs	r3, #1
 8000f18:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000f1e:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000f22:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000f24:	2312      	movs	r3, #18
 8000f26:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f30:	2303      	movs	r3, #3
 8000f32:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000f40:	2301      	movs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f44:	463b      	mov	r3, r7
 8000f46:	4618      	mov	r0, r3
 8000f48:	f002 fa56 	bl	80033f8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f4c:	2004      	movs	r0, #4
 8000f4e:	f002 fa33 	bl	80033b8 <HAL_MPU_Enable>
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d101      	bne.n	8000f72 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f6e:	f000 fd7d 	bl	8001a6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40001000 	.word	0x40001000

08000f80 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f84:	b672      	cpsid	i
}
 8000f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <Error_Handler+0x8>

08000f8c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f90:	4b28      	ldr	r3, [pc, #160]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000f92:	4a29      	ldr	r2, [pc, #164]	@ (8001038 <MX_SPI1_Init+0xac>)
 8000f94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f96:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000f98:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000f9e:	4b25      	ldr	r3, [pc, #148]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fa0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fa4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa6:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fac:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb2:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fbe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fce:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000fda:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fe2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fe6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8001002:	2200      	movs	r2, #0
 8001004:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8001008:	2200      	movs	r2, #0
 800100a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_SPI1_Init+0xa8>)
 800100e:	2200      	movs	r2, #0
 8001010:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001012:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8001014:	2200      	movs	r2, #0
 8001016:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_SPI1_Init+0xa8>)
 800101a:	2200      	movs	r2, #0
 800101c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8001020:	f007 f87e 	bl	8008120 <HAL_SPI_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800102a:	f7ff ffa9 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	24000304 	.word	0x24000304
 8001038:	40013000 	.word	0x40013000

0800103c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001040:	4b28      	ldr	r3, [pc, #160]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001042:	4a29      	ldr	r2, [pc, #164]	@ (80010e8 <MX_SPI2_Init+0xac>)
 8001044:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001046:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001048:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800104c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800104e:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001050:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001054:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001056:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001058:	220f      	movs	r2, #15
 800105a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800105c:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 800105e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001062:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001064:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800106a:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 800106c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001070:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001072:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001074:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001078:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107a:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001080:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001086:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001088:	2200      	movs	r2, #0
 800108a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800108c:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 800108e:	2200      	movs	r2, #0
 8001090:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001092:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001094:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001098:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800109a:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 800109c:	2200      	movs	r2, #0
 800109e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010a0:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010ac:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010c4:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010d2:	f007 f825 	bl	8008120 <HAL_SPI_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 80010dc:	f7ff ff50 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2400038c 	.word	0x2400038c
 80010e8:	40003800 	.word	0x40003800

080010ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	@ 0x30
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a34      	ldr	r2, [pc, #208]	@ (80011dc <HAL_SPI_MspInit+0xf0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d12e      	bne.n	800116c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800110e:	4b34      	ldr	r3, [pc, #208]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001110:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001114:	4a32      	ldr	r2, [pc, #200]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001116:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800111a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800111e:	4b30      	ldr	r3, [pc, #192]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001124:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001128:	61bb      	str	r3, [r7, #24]
 800112a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112c:	4b2c      	ldr	r3, [pc, #176]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001132:	4a2b      	ldr	r2, [pc, #172]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800113c:	4b28      	ldr	r3, [pc, #160]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 800114a:	23a0      	movs	r3, #160	@ 0xa0
 800114c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001156:	2301      	movs	r3, #1
 8001158:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800115a:	2305      	movs	r3, #5
 800115c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	4619      	mov	r1, r3
 8001164:	481f      	ldr	r0, [pc, #124]	@ (80011e4 <HAL_SPI_MspInit+0xf8>)
 8001166:	f002 fbd7 	bl	8003918 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800116a:	e032      	b.n	80011d2 <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a1d      	ldr	r2, [pc, #116]	@ (80011e8 <HAL_SPI_MspInit+0xfc>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d12d      	bne.n	80011d2 <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800117c:	4a18      	ldr	r2, [pc, #96]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 800117e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001182:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001186:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800118c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119a:	4a11      	ldr	r2, [pc, #68]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 800119c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a4:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80011b2:	2306      	movs	r3, #6
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011be:	2301      	movs	r3, #1
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011c2:	2305      	movs	r3, #5
 80011c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	4807      	ldr	r0, [pc, #28]	@ (80011ec <HAL_SPI_MspInit+0x100>)
 80011ce:	f002 fba3 	bl	8003918 <HAL_GPIO_Init>
}
 80011d2:	bf00      	nop
 80011d4:	3730      	adds	r7, #48	@ 0x30
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40013000 	.word	0x40013000
 80011e0:	58024400 	.word	0x58024400
 80011e4:	58020000 	.word	0x58020000
 80011e8:	40003800 	.word	0x40003800
 80011ec:	58022000 	.word	0x58022000

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <HAL_MspInit+0x38>)
 80011f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <HAL_MspInit+0x38>)
 80011fe:	f043 0302 	orr.w	r3, r3, #2
 8001202:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001206:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <HAL_MspInit+0x38>)
 8001208:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	210f      	movs	r1, #15
 8001218:	f06f 0001 	mvn.w	r0, #1
 800121c:	f002 f88c 	bl	8003338 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	58024400 	.word	0x58024400

0800122c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b090      	sub	sp, #64	@ 0x40
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	d827      	bhi.n	800128a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800123a:	2200      	movs	r2, #0
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	2036      	movs	r0, #54	@ 0x36
 8001240:	f002 f87a 	bl	8003338 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001244:	2036      	movs	r0, #54	@ 0x36
 8001246:	f002 f891 	bl	800336c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800124a:	4a29      	ldr	r2, [pc, #164]	@ (80012f0 <HAL_InitTick+0xc4>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001250:	4b28      	ldr	r3, [pc, #160]	@ (80012f4 <HAL_InitTick+0xc8>)
 8001252:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001256:	4a27      	ldr	r2, [pc, #156]	@ (80012f4 <HAL_InitTick+0xc8>)
 8001258:	f043 0310 	orr.w	r3, r3, #16
 800125c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001260:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <HAL_InitTick+0xc8>)
 8001262:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800126e:	f107 0210 	add.w	r2, r7, #16
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f004 fa11 	bl	80056a0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800127e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001280:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001284:	2b00      	cmp	r3, #0
 8001286:	d106      	bne.n	8001296 <HAL_InitTick+0x6a>
 8001288:	e001      	b.n	800128e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e02b      	b.n	80012e6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800128e:	f004 f9f1 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 8001292:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001294:	e004      	b.n	80012a0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001296:	f004 f9ed 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 800129a:	4603      	mov	r3, r0
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012a2:	4a15      	ldr	r2, [pc, #84]	@ (80012f8 <HAL_InitTick+0xcc>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	0c9b      	lsrs	r3, r3, #18
 80012aa:	3b01      	subs	r3, #1
 80012ac:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012ae:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <HAL_InitTick+0xd0>)
 80012b0:	4a13      	ldr	r2, [pc, #76]	@ (8001300 <HAL_InitTick+0xd4>)
 80012b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <HAL_InitTick+0xd0>)
 80012b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012bc:	4a0f      	ldr	r2, [pc, #60]	@ (80012fc <HAL_InitTick+0xd0>)
 80012be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <HAL_InitTick+0xd0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <HAL_InitTick+0xd0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80012ce:	480b      	ldr	r0, [pc, #44]	@ (80012fc <HAL_InitTick+0xd0>)
 80012d0:	f007 fd93 	bl	8008dfa <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d104      	bne.n	80012e4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012da:	4808      	ldr	r0, [pc, #32]	@ (80012fc <HAL_InitTick+0xd0>)
 80012dc:	f007 fde4 	bl	8008ea8 <HAL_TIM_Base_Start_IT>
 80012e0:	4603      	mov	r3, r0
 80012e2:	e000      	b.n	80012e6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3740      	adds	r7, #64	@ 0x40
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	24000008 	.word	0x24000008
 80012f4:	58024400 	.word	0x58024400
 80012f8:	431bde83 	.word	0x431bde83
 80012fc:	24000414 	.word	0x24000414
 8001300:	40001000 	.word	0x40001000

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <NMI_Handler+0x4>

0800130c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <MemManage_Handler+0x4>

0800131c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <UsageFault_Handler+0x4>

0800132c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 800133e:	2040      	movs	r0, #64	@ 0x40
 8001340:	f002 fccd 	bl	8003cde <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <TIM6_DAC_IRQHandler+0x20>)
 800134e:	791b      	ldrb	r3, [r3, #4]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8001356:	4804      	ldr	r0, [pc, #16]	@ (8001368 <TIM6_DAC_IRQHandler+0x20>)
 8001358:	f002 f907 	bl	800356a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800135c:	4803      	ldr	r0, [pc, #12]	@ (800136c <TIM6_DAC_IRQHandler+0x24>)
 800135e:	f007 ff8b 	bl	8009278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	24000284 	.word	0x24000284
 800136c:	24000414 	.word	0x24000414

08001370 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return 1;
 8001374:	2301      	movs	r3, #1
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_kill>:

int _kill(int pid, int sig)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800138a:	f00e fb3d 	bl	800fa08 <__errno>
 800138e:	4603      	mov	r3, r0
 8001390:	2216      	movs	r2, #22
 8001392:	601a      	str	r2, [r3, #0]
  return -1;
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_exit>:

void _exit (int status)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013a8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ffe7 	bl	8001380 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013b2:	bf00      	nop
 80013b4:	e7fd      	b.n	80013b2 <_exit+0x12>

080013b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e00a      	b.n	80013de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013c8:	f3af 8000 	nop.w
 80013cc:	4601      	mov	r1, r0
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	60ba      	str	r2, [r7, #8]
 80013d4:	b2ca      	uxtb	r2, r1
 80013d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3301      	adds	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	dbf0      	blt.n	80013c8 <_read+0x12>
  }

  return len;
 80013e6:	687b      	ldr	r3, [r7, #4]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e009      	b.n	8001416 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	60ba      	str	r2, [r7, #8]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	3301      	adds	r3, #1
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	429a      	cmp	r2, r3
 800141c:	dbf1      	blt.n	8001402 <_write+0x12>
  }
  return len;
 800141e:	687b      	ldr	r3, [r7, #4]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <_close>:

int _close(int file)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001450:	605a      	str	r2, [r3, #4]
  return 0;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <_isatty>:

int _isatty(int file)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001468:	2301      	movs	r3, #1
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001476:	b480      	push	{r7}
 8001478:	b085      	sub	sp, #20
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001498:	4a14      	ldr	r2, [pc, #80]	@ (80014ec <_sbrk+0x5c>)
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <_sbrk+0x60>)
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a4:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ac:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <_sbrk+0x64>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	@ (80014f8 <_sbrk+0x68>)
 80014b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d207      	bcs.n	80014d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c0:	f00e faa2 	bl	800fa08 <__errno>
 80014c4:	4603      	mov	r3, r0
 80014c6:	220c      	movs	r2, #12
 80014c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	e009      	b.n	80014e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d0:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d6:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	4a05      	ldr	r2, [pc, #20]	@ (80014f4 <_sbrk+0x64>)
 80014e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e2:	68fb      	ldr	r3, [r7, #12]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	24080000 	.word	0x24080000
 80014f0:	00004000 	.word	0x00004000
 80014f4:	24000460 	.word	0x24000460
 80014f8:	240060e0 	.word	0x240060e0

080014fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001500:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <SystemInit+0xe4>)
 8001502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001506:	4a36      	ldr	r2, [pc, #216]	@ (80015e0 <SystemInit+0xe4>)
 8001508:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800150c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001510:	4b34      	ldr	r3, [pc, #208]	@ (80015e4 <SystemInit+0xe8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	2b06      	cmp	r3, #6
 800151a:	d807      	bhi.n	800152c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800151c:	4b31      	ldr	r3, [pc, #196]	@ (80015e4 <SystemInit+0xe8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 030f 	bic.w	r3, r3, #15
 8001524:	4a2f      	ldr	r2, [pc, #188]	@ (80015e4 <SystemInit+0xe8>)
 8001526:	f043 0307 	orr.w	r3, r3, #7
 800152a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800152c:	4b2e      	ldr	r3, [pc, #184]	@ (80015e8 <SystemInit+0xec>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a2d      	ldr	r2, [pc, #180]	@ (80015e8 <SystemInit+0xec>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001538:	4b2b      	ldr	r3, [pc, #172]	@ (80015e8 <SystemInit+0xec>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800153e:	4b2a      	ldr	r3, [pc, #168]	@ (80015e8 <SystemInit+0xec>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4929      	ldr	r1, [pc, #164]	@ (80015e8 <SystemInit+0xec>)
 8001544:	4b29      	ldr	r3, [pc, #164]	@ (80015ec <SystemInit+0xf0>)
 8001546:	4013      	ands	r3, r2
 8001548:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800154a:	4b26      	ldr	r3, [pc, #152]	@ (80015e4 <SystemInit+0xe8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001556:	4b23      	ldr	r3, [pc, #140]	@ (80015e4 <SystemInit+0xe8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 030f 	bic.w	r3, r3, #15
 800155e:	4a21      	ldr	r2, [pc, #132]	@ (80015e4 <SystemInit+0xe8>)
 8001560:	f043 0307 	orr.w	r3, r3, #7
 8001564:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <SystemInit+0xec>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800156c:	4b1e      	ldr	r3, [pc, #120]	@ (80015e8 <SystemInit+0xec>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001572:	4b1d      	ldr	r3, [pc, #116]	@ (80015e8 <SystemInit+0xec>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001578:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <SystemInit+0xec>)
 800157a:	4a1d      	ldr	r2, [pc, #116]	@ (80015f0 <SystemInit+0xf4>)
 800157c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800157e:	4b1a      	ldr	r3, [pc, #104]	@ (80015e8 <SystemInit+0xec>)
 8001580:	4a1c      	ldr	r2, [pc, #112]	@ (80015f4 <SystemInit+0xf8>)
 8001582:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001584:	4b18      	ldr	r3, [pc, #96]	@ (80015e8 <SystemInit+0xec>)
 8001586:	4a1c      	ldr	r2, [pc, #112]	@ (80015f8 <SystemInit+0xfc>)
 8001588:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800158a:	4b17      	ldr	r3, [pc, #92]	@ (80015e8 <SystemInit+0xec>)
 800158c:	2200      	movs	r2, #0
 800158e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001590:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <SystemInit+0xec>)
 8001592:	4a19      	ldr	r2, [pc, #100]	@ (80015f8 <SystemInit+0xfc>)
 8001594:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001596:	4b14      	ldr	r3, [pc, #80]	@ (80015e8 <SystemInit+0xec>)
 8001598:	2200      	movs	r2, #0
 800159a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800159c:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <SystemInit+0xec>)
 800159e:	4a16      	ldr	r2, [pc, #88]	@ (80015f8 <SystemInit+0xfc>)
 80015a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015a2:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <SystemInit+0xec>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <SystemInit+0xec>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0e      	ldr	r2, [pc, #56]	@ (80015e8 <SystemInit+0xec>)
 80015ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <SystemInit+0xec>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <SystemInit+0x100>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <SystemInit+0x104>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015c6:	d202      	bcs.n	80015ce <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <SystemInit+0x108>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <SystemInit+0x10c>)
 80015d0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80015d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00
 80015e4:	52002000 	.word	0x52002000
 80015e8:	58024400 	.word	0x58024400
 80015ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80015f0:	02020200 	.word	0x02020200
 80015f4:	01ff0000 	.word	0x01ff0000
 80015f8:	01010280 	.word	0x01010280
 80015fc:	5c001000 	.word	0x5c001000
 8001600:	ffff0000 	.word	0xffff0000
 8001604:	51008108 	.word	0x51008108
 8001608:	52004000 	.word	0x52004000

0800160c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08e      	sub	sp, #56	@ 0x38
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800162c:	463b      	mov	r3, r7
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]
 800163a:	615a      	str	r2, [r3, #20]
 800163c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800163e:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <MX_TIM2_Init+0xec>)
 8001640:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001644:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001646:	4b2c      	ldr	r3, [pc, #176]	@ (80016f8 <MX_TIM2_Init+0xec>)
 8001648:	2200      	movs	r2, #0
 800164a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164c:	4b2a      	ldr	r3, [pc, #168]	@ (80016f8 <MX_TIM2_Init+0xec>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8001652:	4b29      	ldr	r3, [pc, #164]	@ (80016f8 <MX_TIM2_Init+0xec>)
 8001654:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001658:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165a:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <MX_TIM2_Init+0xec>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001660:	4b25      	ldr	r3, [pc, #148]	@ (80016f8 <MX_TIM2_Init+0xec>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001666:	4824      	ldr	r0, [pc, #144]	@ (80016f8 <MX_TIM2_Init+0xec>)
 8001668:	f007 fbc7 	bl	8008dfa <HAL_TIM_Base_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001672:	f7ff fc85 	bl	8000f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800167c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001680:	4619      	mov	r1, r3
 8001682:	481d      	ldr	r0, [pc, #116]	@ (80016f8 <MX_TIM2_Init+0xec>)
 8001684:	f008 f814 	bl	80096b0 <HAL_TIM_ConfigClockSource>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800168e:	f7ff fc77 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001692:	4819      	ldr	r0, [pc, #100]	@ (80016f8 <MX_TIM2_Init+0xec>)
 8001694:	f007 fc80 	bl	8008f98 <HAL_TIM_PWM_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800169e:	f7ff fc6f 	bl	8000f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	4811      	ldr	r0, [pc, #68]	@ (80016f8 <MX_TIM2_Init+0xec>)
 80016b2:	f008 fd5d 	bl	800a170 <HAL_TIMEx_MasterConfigSynchronization>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80016bc:	f7ff fc60 	bl	8000f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c0:	2360      	movs	r3, #96	@ 0x60
 80016c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 80016c4:	f242 3327 	movw	r3, #8999	@ 0x2327
 80016c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80016ce:	2304      	movs	r3, #4
 80016d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d2:	463b      	mov	r3, r7
 80016d4:	2200      	movs	r2, #0
 80016d6:	4619      	mov	r1, r3
 80016d8:	4807      	ldr	r0, [pc, #28]	@ (80016f8 <MX_TIM2_Init+0xec>)
 80016da:	f007 fed5 	bl	8009488 <HAL_TIM_PWM_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80016e4:	f7ff fc4c 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016e8:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <MX_TIM2_Init+0xec>)
 80016ea:	f000 f8f7 	bl	80018dc <HAL_TIM_MspPostInit>

}
 80016ee:	bf00      	nop
 80016f0:	3738      	adds	r7, #56	@ 0x38
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	24000464 	.word	0x24000464

080016fc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b09a      	sub	sp, #104	@ 0x68
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001702:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800171c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	615a      	str	r2, [r3, #20]
 800172e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	222c      	movs	r2, #44	@ 0x2c
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f00e f903 	bl	800f942 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800173c:	4b49      	ldr	r3, [pc, #292]	@ (8001864 <MX_TIM8_Init+0x168>)
 800173e:	4a4a      	ldr	r2, [pc, #296]	@ (8001868 <MX_TIM8_Init+0x16c>)
 8001740:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001742:	4b48      	ldr	r3, [pc, #288]	@ (8001864 <MX_TIM8_Init+0x168>)
 8001744:	2200      	movs	r2, #0
 8001746:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001748:	4b46      	ldr	r3, [pc, #280]	@ (8001864 <MX_TIM8_Init+0x168>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000-1;
 800174e:	4b45      	ldr	r3, [pc, #276]	@ (8001864 <MX_TIM8_Init+0x168>)
 8001750:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001754:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001756:	4b43      	ldr	r3, [pc, #268]	@ (8001864 <MX_TIM8_Init+0x168>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800175c:	4b41      	ldr	r3, [pc, #260]	@ (8001864 <MX_TIM8_Init+0x168>)
 800175e:	2200      	movs	r2, #0
 8001760:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001762:	4b40      	ldr	r3, [pc, #256]	@ (8001864 <MX_TIM8_Init+0x168>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001768:	483e      	ldr	r0, [pc, #248]	@ (8001864 <MX_TIM8_Init+0x168>)
 800176a:	f007 fb46 	bl	8008dfa <HAL_TIM_Base_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001774:	f7ff fc04 	bl	8000f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800177c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800177e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001782:	4619      	mov	r1, r3
 8001784:	4837      	ldr	r0, [pc, #220]	@ (8001864 <MX_TIM8_Init+0x168>)
 8001786:	f007 ff93 	bl	80096b0 <HAL_TIM_ConfigClockSource>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001790:	f7ff fbf6 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001794:	4833      	ldr	r0, [pc, #204]	@ (8001864 <MX_TIM8_Init+0x168>)
 8001796:	f007 fbff 	bl	8008f98 <HAL_TIM_PWM_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80017a0:	f7ff fbee 	bl	8000f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80017b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017b4:	4619      	mov	r1, r3
 80017b6:	482b      	ldr	r0, [pc, #172]	@ (8001864 <MX_TIM8_Init+0x168>)
 80017b8:	f008 fcda 	bl	800a170 <HAL_TIMEx_MasterConfigSynchronization>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80017c2:	f7ff fbdd 	bl	8000f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c6:	2360      	movs	r3, #96	@ 0x60
 80017c8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ce:	2300      	movs	r3, #0
 80017d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017d2:	2300      	movs	r3, #0
 80017d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80017d6:	2304      	movs	r3, #4
 80017d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017e6:	2200      	movs	r2, #0
 80017e8:	4619      	mov	r1, r3
 80017ea:	481e      	ldr	r0, [pc, #120]	@ (8001864 <MX_TIM8_Init+0x168>)
 80017ec:	f007 fe4c 	bl	8009488 <HAL_TIM_PWM_ConfigChannel>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80017f6:	f7ff fbc3 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017fe:	2204      	movs	r2, #4
 8001800:	4619      	mov	r1, r3
 8001802:	4818      	ldr	r0, [pc, #96]	@ (8001864 <MX_TIM8_Init+0x168>)
 8001804:	f007 fe40 	bl	8009488 <HAL_TIM_PWM_ConfigChannel>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 800180e:	f7ff fbb7 	bl	8000f80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001826:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800182a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001834:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	4619      	mov	r1, r3
 8001846:	4807      	ldr	r0, [pc, #28]	@ (8001864 <MX_TIM8_Init+0x168>)
 8001848:	f008 fd20 	bl	800a28c <HAL_TIMEx_ConfigBreakDeadTime>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 8001852:	f7ff fb95 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001856:	4803      	ldr	r0, [pc, #12]	@ (8001864 <MX_TIM8_Init+0x168>)
 8001858:	f000 f840 	bl	80018dc <HAL_TIM_MspPostInit>

}
 800185c:	bf00      	nop
 800185e:	3768      	adds	r7, #104	@ 0x68
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	240004b0 	.word	0x240004b0
 8001868:	40010400 	.word	0x40010400

0800186c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800187c:	d10f      	bne.n	800189e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <HAL_TIM_Base_MspInit+0x68>)
 8001880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001884:	4a13      	ldr	r2, [pc, #76]	@ (80018d4 <HAL_TIM_Base_MspInit+0x68>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800188e:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <HAL_TIM_Base_MspInit+0x68>)
 8001890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800189c:	e013      	b.n	80018c6 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM8)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a0d      	ldr	r2, [pc, #52]	@ (80018d8 <HAL_TIM_Base_MspInit+0x6c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d10e      	bne.n	80018c6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018a8:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <HAL_TIM_Base_MspInit+0x68>)
 80018aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018ae:	4a09      	ldr	r2, [pc, #36]	@ (80018d4 <HAL_TIM_Base_MspInit+0x68>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_TIM_Base_MspInit+0x68>)
 80018ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
}
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	58024400 	.word	0x58024400
 80018d8:	40010400 	.word	0x40010400

080018dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	@ 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018fc:	d11f      	bne.n	800193e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	4b24      	ldr	r3, [pc, #144]	@ (8001990 <HAL_TIM_MspPostInit+0xb4>)
 8001900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001904:	4a22      	ldr	r2, [pc, #136]	@ (8001990 <HAL_TIM_MspPostInit+0xb4>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800190e:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <HAL_TIM_MspPostInit+0xb4>)
 8001910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800191c:	2301      	movs	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001928:	2302      	movs	r3, #2
 800192a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800192c:	2301      	movs	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	4817      	ldr	r0, [pc, #92]	@ (8001994 <HAL_TIM_MspPostInit+0xb8>)
 8001938:	f001 ffee 	bl	8003918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800193c:	e023      	b.n	8001986 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a15      	ldr	r2, [pc, #84]	@ (8001998 <HAL_TIM_MspPostInit+0xbc>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d11e      	bne.n	8001986 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <HAL_TIM_MspPostInit+0xb4>)
 800194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800194e:	4a10      	ldr	r2, [pc, #64]	@ (8001990 <HAL_TIM_MspPostInit+0xb4>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001958:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <HAL_TIM_MspPostInit+0xb4>)
 800195a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001966:	23c0      	movs	r3, #192	@ 0xc0
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001972:	2302      	movs	r3, #2
 8001974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001976:	2303      	movs	r3, #3
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	4806      	ldr	r0, [pc, #24]	@ (800199c <HAL_TIM_MspPostInit+0xc0>)
 8001982:	f001 ffc9 	bl	8003918 <HAL_GPIO_Init>
}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	@ 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	58024400 	.word	0x58024400
 8001994:	58020000 	.word	0x58020000
 8001998:	40010400 	.word	0x40010400
 800199c:	58020800 	.word	0x58020800

080019a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019a4:	f7ff fdaa 	bl	80014fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a8:	480c      	ldr	r0, [pc, #48]	@ (80019dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019aa:	490d      	ldr	r1, [pc, #52]	@ (80019e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019ac:	4a0d      	ldr	r2, [pc, #52]	@ (80019e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019c0:	4c0a      	ldr	r4, [pc, #40]	@ (80019ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ce:	f00e f821 	bl	800fa14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d2:	f7ff f92f 	bl	8000c34 <main>
  bx  lr
 80019d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019e0:	24000204 	.word	0x24000204
  ldr r2, =_sidata
 80019e4:	080143c8 	.word	0x080143c8
  ldr r2, =_sbss
 80019e8:	24000204 	.word	0x24000204
  ldr r4, =_ebss
 80019ec:	240060e0 	.word	0x240060e0

080019f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC3_IRQHandler>
	...

080019f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fa:	2003      	movs	r0, #3
 80019fc:	f001 fc91 	bl	8003322 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a00:	f003 fc8e 	bl	8005320 <HAL_RCC_GetSysClockFreq>
 8001a04:	4602      	mov	r2, r0
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <HAL_Init+0x68>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	4913      	ldr	r1, [pc, #76]	@ (8001a60 <HAL_Init+0x6c>)
 8001a12:	5ccb      	ldrb	r3, [r1, r3]
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <HAL_Init+0x68>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	4a0e      	ldr	r2, [pc, #56]	@ (8001a60 <HAL_Init+0x6c>)
 8001a28:	5cd3      	ldrb	r3, [r2, r3]
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	4a0b      	ldr	r2, [pc, #44]	@ (8001a64 <HAL_Init+0x70>)
 8001a36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a38:	4a0b      	ldr	r2, [pc, #44]	@ (8001a68 <HAL_Init+0x74>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a3e:	2005      	movs	r0, #5
 8001a40:	f7ff fbf4 	bl	800122c <HAL_InitTick>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e002      	b.n	8001a54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4e:	f7ff fbcf 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	58024400 	.word	0x58024400
 8001a60:	0801201c 	.word	0x0801201c
 8001a64:	24000004 	.word	0x24000004
 8001a68:	24000000 	.word	0x24000000

08001a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_IncTick+0x20>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_IncTick+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <HAL_IncTick+0x24>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	2400000c 	.word	0x2400000c
 8001a90:	240004fc 	.word	0x240004fc

08001a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;
 8001a98:	4b03      	ldr	r3, [pc, #12]	@ (8001aa8 <HAL_GetTick+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	240004fc 	.word	0x240004fc

08001aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff ffee 	bl	8001a94 <HAL_GetTick>
 8001ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d005      	beq.n	8001ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <HAL_Delay+0x44>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad2:	bf00      	nop
 8001ad4:	f7ff ffde 	bl	8001a94 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d8f7      	bhi.n	8001ad4 <HAL_Delay+0x28>
  {
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	2400000c 	.word	0x2400000c

08001af4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001af8:	4b03      	ldr	r3, [pc, #12]	@ (8001b08 <HAL_GetREVID+0x14>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0c1b      	lsrs	r3, r3, #16
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	5c001000 	.word	0x5c001000

08001b0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	609a      	str	r2, [r3, #8]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3360      	adds	r3, #96	@ 0x60
 8001b86:	461a      	mov	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ba8:	bf00      	nop
 8001baa:	371c      	adds	r7, #28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	611a      	str	r2, [r3, #16]
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b087      	sub	sp, #28
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3360      	adds	r3, #96	@ 0x60
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	601a      	str	r2, [r3, #0]
  }
}
 8001c10:	bf00      	nop
 8001c12:	371c      	adds	r7, #28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b087      	sub	sp, #28
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3330      	adds	r3, #48	@ 0x30
 8001c52:	461a      	mov	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	4413      	add	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	211f      	movs	r1, #31
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	401a      	ands	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	0e9b      	lsrs	r3, r3, #26
 8001c7a:	f003 011f 	and.w	r1, r3, #31
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c8e:	bf00      	nop
 8001c90:	371c      	adds	r7, #28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b087      	sub	sp, #28
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3314      	adds	r3, #20
 8001caa:	461a      	mov	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	0e5b      	lsrs	r3, r3, #25
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	4413      	add	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	0d1b      	lsrs	r3, r3, #20
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	2107      	movs	r1, #7
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	401a      	ands	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	0d1b      	lsrs	r3, r3, #20
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ce4:	bf00      	nop
 8001ce6:	371c      	adds	r7, #28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0318 	and.w	r3, r3, #24
 8001d12:	4908      	ldr	r1, [pc, #32]	@ (8001d34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d14:	40d9      	lsrs	r1, r3
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	400b      	ands	r3, r1
 8001d1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	000fffff 	.word	0x000fffff

08001d38 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 031f 	and.w	r3, r3, #31
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6093      	str	r3, [r2, #8]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	5fffffc0 	.word	0x5fffffc0

08001d94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001da4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001da8:	d101      	bne.n	8001dae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	6fffffc0 	.word	0x6fffffc0

08001de4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001df8:	d101      	bne.n	8001dfe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <LL_ADC_Enable+0x24>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	f043 0201 	orr.w	r2, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	7fffffc0 	.word	0x7fffffc0

08001e34 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <LL_ADC_Disable+0x24>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	f043 0202 	orr.w	r2, r3, #2
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	7fffffc0 	.word	0x7fffffc0

08001e5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <LL_ADC_IsEnabled+0x18>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <LL_ADC_IsEnabled+0x1a>
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d101      	bne.n	8001e9a <LL_ADC_IsDisableOngoing+0x18>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <LL_ADC_IsDisableOngoing+0x1a>
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <LL_ADC_REG_StartConversion+0x24>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	f043 0204 	orr.w	r2, r3, #4
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	7fffffc0 	.word	0x7fffffc0

08001ed0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d101      	bne.n	8001ee8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d101      	bne.n	8001f0e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b089      	sub	sp, #36	@ 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e18f      	b.n	8002256 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d109      	bne.n	8001f58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7fe fbad 	bl	80006a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff19 	bl	8001d94 <LL_ADC_IsDeepPowerDownEnabled>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d004      	beq.n	8001f72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff feff 	bl	8001d70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff34 	bl	8001de4 <LL_ADC_IsInternalRegulatorEnabled>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d114      	bne.n	8001fac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff18 	bl	8001dbc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f8c:	4b87      	ldr	r3, [pc, #540]	@ (80021ac <HAL_ADC_Init+0x290>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	099b      	lsrs	r3, r3, #6
 8001f92:	4a87      	ldr	r2, [pc, #540]	@ (80021b0 <HAL_ADC_Init+0x294>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	099b      	lsrs	r3, r3, #6
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f9e:	e002      	b.n	8001fa6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f9      	bne.n	8001fa0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff17 	bl	8001de4 <LL_ADC_IsInternalRegulatorEnabled>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10d      	bne.n	8001fd8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc0:	f043 0210 	orr.w	r2, r3, #16
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fcc:	f043 0201 	orr.w	r2, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff77 	bl	8001ed0 <LL_ADC_REG_IsConversionOngoing>
 8001fe2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f040 8129 	bne.w	8002244 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f040 8125 	bne.w	8002244 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002002:	f043 0202 	orr.w	r2, r3, #2
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff24 	bl	8001e5c <LL_ADC_IsEnabled>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d136      	bne.n	8002088 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a65      	ldr	r2, [pc, #404]	@ (80021b4 <HAL_ADC_Init+0x298>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d004      	beq.n	800202e <HAL_ADC_Init+0x112>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a63      	ldr	r2, [pc, #396]	@ (80021b8 <HAL_ADC_Init+0x29c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d10e      	bne.n	800204c <HAL_ADC_Init+0x130>
 800202e:	4861      	ldr	r0, [pc, #388]	@ (80021b4 <HAL_ADC_Init+0x298>)
 8002030:	f7ff ff14 	bl	8001e5c <LL_ADC_IsEnabled>
 8002034:	4604      	mov	r4, r0
 8002036:	4860      	ldr	r0, [pc, #384]	@ (80021b8 <HAL_ADC_Init+0x29c>)
 8002038:	f7ff ff10 	bl	8001e5c <LL_ADC_IsEnabled>
 800203c:	4603      	mov	r3, r0
 800203e:	4323      	orrs	r3, r4
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	e008      	b.n	800205e <HAL_ADC_Init+0x142>
 800204c:	485b      	ldr	r0, [pc, #364]	@ (80021bc <HAL_ADC_Init+0x2a0>)
 800204e:	f7ff ff05 	bl	8001e5c <LL_ADC_IsEnabled>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf0c      	ite	eq
 8002058:	2301      	moveq	r3, #1
 800205a:	2300      	movne	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d012      	beq.n	8002088 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a53      	ldr	r2, [pc, #332]	@ (80021b4 <HAL_ADC_Init+0x298>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d004      	beq.n	8002076 <HAL_ADC_Init+0x15a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a51      	ldr	r2, [pc, #324]	@ (80021b8 <HAL_ADC_Init+0x29c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d101      	bne.n	800207a <HAL_ADC_Init+0x15e>
 8002076:	4a52      	ldr	r2, [pc, #328]	@ (80021c0 <HAL_ADC_Init+0x2a4>)
 8002078:	e000      	b.n	800207c <HAL_ADC_Init+0x160>
 800207a:	4a52      	ldr	r2, [pc, #328]	@ (80021c4 <HAL_ADC_Init+0x2a8>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4619      	mov	r1, r3
 8002082:	4610      	mov	r0, r2
 8002084:	f7ff fd42 	bl	8001b0c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002088:	f7ff fd34 	bl	8001af4 <HAL_GetREVID>
 800208c:	4603      	mov	r3, r0
 800208e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002092:	4293      	cmp	r3, r2
 8002094:	d914      	bls.n	80020c0 <HAL_ADC_Init+0x1a4>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b10      	cmp	r3, #16
 800209c:	d110      	bne.n	80020c0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	7d5b      	ldrb	r3, [r3, #21]
 80020a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020a8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	7f1b      	ldrb	r3, [r3, #28]
 80020b4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80020b6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020b8:	f043 030c 	orr.w	r3, r3, #12
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	e00d      	b.n	80020dc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	7d5b      	ldrb	r3, [r3, #21]
 80020c4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020ca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020d0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	7f1b      	ldrb	r3, [r3, #28]
 80020d6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7f1b      	ldrb	r3, [r3, #28]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d106      	bne.n	80020f2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	045b      	lsls	r3, r3, #17
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002106:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	4b2c      	ldr	r3, [pc, #176]	@ (80021c8 <HAL_ADC_Init+0x2ac>)
 8002116:	4013      	ands	r3, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	69b9      	ldr	r1, [r7, #24]
 800211e:	430b      	orrs	r3, r1
 8002120:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fed2 	bl	8001ed0 <LL_ADC_REG_IsConversionOngoing>
 800212c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fedf 	bl	8001ef6 <LL_ADC_INJ_IsConversionOngoing>
 8002138:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d15f      	bne.n	8002200 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d15c      	bne.n	8002200 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7d1b      	ldrb	r3, [r3, #20]
 800214a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <HAL_ADC_Init+0x2b0>)
 800215c:	4013      	ands	r3, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	69b9      	ldr	r1, [r7, #24]
 8002164:	430b      	orrs	r3, r1
 8002166:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800216e:	2b01      	cmp	r3, #1
 8002170:	d130      	bne.n	80021d4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	4b14      	ldr	r3, [pc, #80]	@ (80021d0 <HAL_ADC_Init+0x2b4>)
 8002180:	4013      	ands	r3, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002186:	3a01      	subs	r2, #1
 8002188:	0411      	lsls	r1, r2, #16
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800218e:	4311      	orrs	r1, r2
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002194:	4311      	orrs	r1, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800219a:	430a      	orrs	r2, r1
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0201 	orr.w	r2, r2, #1
 80021a6:	611a      	str	r2, [r3, #16]
 80021a8:	e01c      	b.n	80021e4 <HAL_ADC_Init+0x2c8>
 80021aa:	bf00      	nop
 80021ac:	24000000 	.word	0x24000000
 80021b0:	053e2d63 	.word	0x053e2d63
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40022100 	.word	0x40022100
 80021bc:	58026000 	.word	0x58026000
 80021c0:	40022300 	.word	0x40022300
 80021c4:	58026300 	.word	0x58026300
 80021c8:	fff0c003 	.word	0xfff0c003
 80021cc:	ffffbffc 	.word	0xffffbffc
 80021d0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fe42 	bl	8002e84 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d10c      	bne.n	8002222 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	f023 010f 	bic.w	r1, r3, #15
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	1e5a      	subs	r2, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002220:	e007      	b.n	8002232 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 020f 	bic.w	r2, r2, #15
 8002230:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002236:	f023 0303 	bic.w	r3, r3, #3
 800223a:	f043 0201 	orr.w	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	655a      	str	r2, [r3, #84]	@ 0x54
 8002242:	e007      	b.n	8002254 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002248:	f043 0210 	orr.w	r2, r3, #16
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002254:	7ffb      	ldrb	r3, [r7, #31]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	@ 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd90      	pop	{r4, r7, pc}
 800225e:	bf00      	nop

08002260 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a5c      	ldr	r2, [pc, #368]	@ (80023e0 <HAL_ADC_Start+0x180>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d004      	beq.n	800227c <HAL_ADC_Start+0x1c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a5b      	ldr	r2, [pc, #364]	@ (80023e4 <HAL_ADC_Start+0x184>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d101      	bne.n	8002280 <HAL_ADC_Start+0x20>
 800227c:	4b5a      	ldr	r3, [pc, #360]	@ (80023e8 <HAL_ADC_Start+0x188>)
 800227e:	e000      	b.n	8002282 <HAL_ADC_Start+0x22>
 8002280:	4b5a      	ldr	r3, [pc, #360]	@ (80023ec <HAL_ADC_Start+0x18c>)
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fd58 	bl	8001d38 <LL_ADC_GetMultimode>
 8002288:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fe1e 	bl	8001ed0 <LL_ADC_REG_IsConversionOngoing>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	f040 809a 	bne.w	80023d0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_Start+0x4a>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e095      	b.n	80023d6 <HAL_ADC_Start+0x176>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fcfc 	bl	8002cb0 <ADC_Enable>
 80022b8:	4603      	mov	r3, r0
 80022ba:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022bc:	7dfb      	ldrb	r3, [r7, #23]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 8081 	bne.w	80023c6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80022c8:	4b49      	ldr	r3, [pc, #292]	@ (80023f0 <HAL_ADC_Start+0x190>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a42      	ldr	r2, [pc, #264]	@ (80023e4 <HAL_ADC_Start+0x184>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d002      	beq.n	80022e4 <HAL_ADC_Start+0x84>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	e000      	b.n	80022e6 <HAL_ADC_Start+0x86>
 80022e4:	4b3e      	ldr	r3, [pc, #248]	@ (80023e0 <HAL_ADC_Start+0x180>)
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d002      	beq.n	80022f4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002304:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800230c:	d106      	bne.n	800231c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002312:	f023 0206 	bic.w	r2, r3, #6
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	659a      	str	r2, [r3, #88]	@ 0x58
 800231a:	e002      	b.n	8002322 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	221c      	movs	r2, #28
 8002328:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a2b      	ldr	r2, [pc, #172]	@ (80023e4 <HAL_ADC_Start+0x184>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d002      	beq.n	8002342 <HAL_ADC_Start+0xe2>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	e000      	b.n	8002344 <HAL_ADC_Start+0xe4>
 8002342:	4b27      	ldr	r3, [pc, #156]	@ (80023e0 <HAL_ADC_Start+0x180>)
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	4293      	cmp	r3, r2
 800234a:	d008      	beq.n	800235e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2b05      	cmp	r3, #5
 8002356:	d002      	beq.n	800235e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	2b09      	cmp	r3, #9
 800235c:	d114      	bne.n	8002388 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002370:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002374:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fd91 	bl	8001ea8 <LL_ADC_REG_StartConversion>
 8002386:	e025      	b.n	80023d4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a12      	ldr	r2, [pc, #72]	@ (80023e4 <HAL_ADC_Start+0x184>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d002      	beq.n	80023a4 <HAL_ADC_Start+0x144>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	e000      	b.n	80023a6 <HAL_ADC_Start+0x146>
 80023a4:	4b0e      	ldr	r3, [pc, #56]	@ (80023e0 <HAL_ADC_Start+0x180>)
 80023a6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00f      	beq.n	80023d4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80023c4:	e006      	b.n	80023d4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80023ce:	e001      	b.n	80023d4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
 80023d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40022000 	.word	0x40022000
 80023e4:	40022100 	.word	0x40022100
 80023e8:	40022300 	.word	0x40022300
 80023ec:	58026300 	.word	0x58026300
 80023f0:	fffff0fe 	.word	0xfffff0fe

080023f4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a72      	ldr	r2, [pc, #456]	@ (80025cc <HAL_ADC_PollForConversion+0x1d8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d004      	beq.n	8002412 <HAL_ADC_PollForConversion+0x1e>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a70      	ldr	r2, [pc, #448]	@ (80025d0 <HAL_ADC_PollForConversion+0x1dc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <HAL_ADC_PollForConversion+0x22>
 8002412:	4b70      	ldr	r3, [pc, #448]	@ (80025d4 <HAL_ADC_PollForConversion+0x1e0>)
 8002414:	e000      	b.n	8002418 <HAL_ADC_PollForConversion+0x24>
 8002416:	4b70      	ldr	r3, [pc, #448]	@ (80025d8 <HAL_ADC_PollForConversion+0x1e4>)
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fc8d 	bl	8001d38 <LL_ADC_GetMultimode>
 800241e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	2b08      	cmp	r3, #8
 8002426:	d102      	bne.n	800242e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002428:	2308      	movs	r3, #8
 800242a:	61fb      	str	r3, [r7, #28]
 800242c:	e037      	b.n	800249e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2b05      	cmp	r3, #5
 8002438:	d002      	beq.n	8002440 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b09      	cmp	r3, #9
 800243e:	d111      	bne.n	8002464 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002452:	f043 0220 	orr.w	r2, r3, #32
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0b1      	b.n	80025c2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800245e:	2304      	movs	r3, #4
 8002460:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002462:	e01c      	b.n	800249e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a58      	ldr	r2, [pc, #352]	@ (80025cc <HAL_ADC_PollForConversion+0x1d8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d004      	beq.n	8002478 <HAL_ADC_PollForConversion+0x84>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a57      	ldr	r2, [pc, #348]	@ (80025d0 <HAL_ADC_PollForConversion+0x1dc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_ADC_PollForConversion+0x88>
 8002478:	4b56      	ldr	r3, [pc, #344]	@ (80025d4 <HAL_ADC_PollForConversion+0x1e0>)
 800247a:	e000      	b.n	800247e <HAL_ADC_PollForConversion+0x8a>
 800247c:	4b56      	ldr	r3, [pc, #344]	@ (80025d8 <HAL_ADC_PollForConversion+0x1e4>)
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fc68 	bl	8001d54 <LL_ADC_GetMultiDMATransfer>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248e:	f043 0220 	orr.w	r2, r3, #32
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e093      	b.n	80025c2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800249a:	2304      	movs	r3, #4
 800249c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800249e:	f7ff faf9 	bl	8001a94 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024a4:	e021      	b.n	80024ea <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d01d      	beq.n	80024ea <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80024ae:	f7ff faf1 	bl	8001a94 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d302      	bcc.n	80024c4 <HAL_ADC_PollForConversion+0xd0>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d112      	bne.n	80024ea <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10b      	bne.n	80024ea <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d6:	f043 0204 	orr.w	r2, r3, #4
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e06b      	b.n	80025c2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0d6      	beq.n	80024a6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fb87 	bl	8001c1c <LL_ADC_REG_IsTriggerSourceSWStart>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01c      	beq.n	800254e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7d5b      	ldrb	r3, [r3, #21]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d118      	bne.n	800254e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b08      	cmp	r3, #8
 8002528:	d111      	bne.n	800254e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d105      	bne.n	800254e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002546:	f043 0201 	orr.w	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1f      	ldr	r2, [pc, #124]	@ (80025d0 <HAL_ADC_PollForConversion+0x1dc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d002      	beq.n	800255e <HAL_ADC_PollForConversion+0x16a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	e000      	b.n	8002560 <HAL_ADC_PollForConversion+0x16c>
 800255e:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <HAL_ADC_PollForConversion+0x1d8>)
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	4293      	cmp	r3, r2
 8002566:	d008      	beq.n	800257a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b05      	cmp	r3, #5
 8002572:	d002      	beq.n	800257a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b09      	cmp	r3, #9
 8002578:	d104      	bne.n	8002584 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	e00c      	b.n	800259e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a11      	ldr	r2, [pc, #68]	@ (80025d0 <HAL_ADC_PollForConversion+0x1dc>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d002      	beq.n	8002594 <HAL_ADC_PollForConversion+0x1a0>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e000      	b.n	8002596 <HAL_ADC_PollForConversion+0x1a2>
 8002594:	4b0d      	ldr	r3, [pc, #52]	@ (80025cc <HAL_ADC_PollForConversion+0x1d8>)
 8002596:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d104      	bne.n	80025ae <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2208      	movs	r2, #8
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e008      	b.n	80025c0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d103      	bne.n	80025c0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	220c      	movs	r2, #12
 80025be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3720      	adds	r7, #32
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40022000 	.word	0x40022000
 80025d0:	40022100 	.word	0x40022100
 80025d4:	40022300 	.word	0x40022300
 80025d8:	58026300 	.word	0x58026300

080025dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b0a1      	sub	sp, #132	@ 0x84
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4a65      	ldr	r2, [pc, #404]	@ (80027a8 <HAL_ADC_ConfigChannel+0x1b0>)
 8002612:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x2a>
 800261e:	2302      	movs	r3, #2
 8002620:	e32e      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x688>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fc4e 	bl	8001ed0 <LL_ADC_REG_IsConversionOngoing>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 8313 	bne.w	8002c62 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	db2c      	blt.n	800269e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800264c:	2b00      	cmp	r3, #0
 800264e:	d108      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x6a>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	2201      	movs	r2, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	e016      	b.n	8002690 <HAL_ADC_ConfigChannel+0x98>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002670:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002672:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002674:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800267a:	2320      	movs	r3, #32
 800267c:	e003      	b.n	8002686 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800267e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	2201      	movs	r2, #1
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	69d1      	ldr	r1, [r2, #28]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	430b      	orrs	r3, r1
 800269c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6859      	ldr	r1, [r3, #4]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	f7ff fac9 	bl	8001c42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fc0b 	bl	8001ed0 <LL_ADC_REG_IsConversionOngoing>
 80026ba:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fc18 	bl	8001ef6 <LL_ADC_INJ_IsConversionOngoing>
 80026c6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f040 80b8 	bne.w	8002840 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f040 80b4 	bne.w	8002840 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6819      	ldr	r1, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	461a      	mov	r2, r3
 80026e6:	f7ff fad8 	bl	8001c9a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026ea:	4b30      	ldr	r3, [pc, #192]	@ (80027ac <HAL_ADC_ConfigChannel+0x1b4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80026f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026f6:	d10b      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x118>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	e01d      	b.n	800274c <HAL_ADC_ConfigChannel+0x154>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10b      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x13e>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	e00a      	b.n	800274c <HAL_ADC_ConfigChannel+0x154>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	089b      	lsrs	r3, r3, #2
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	2b04      	cmp	r3, #4
 8002754:	d02c      	beq.n	80027b0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	6919      	ldr	r1, [r3, #16]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002764:	f7ff fa06 	bl	8001b74 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	6919      	ldr	r1, [r3, #16]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	7e5b      	ldrb	r3, [r3, #25]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d102      	bne.n	800277e <HAL_ADC_ConfigChannel+0x186>
 8002778:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800277c:	e000      	b.n	8002780 <HAL_ADC_ConfigChannel+0x188>
 800277e:	2300      	movs	r3, #0
 8002780:	461a      	mov	r2, r3
 8002782:	f7ff fa30 	bl	8001be6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6919      	ldr	r1, [r3, #16]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	7e1b      	ldrb	r3, [r3, #24]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d102      	bne.n	800279c <HAL_ADC_ConfigChannel+0x1a4>
 8002796:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800279a:	e000      	b.n	800279e <HAL_ADC_ConfigChannel+0x1a6>
 800279c:	2300      	movs	r3, #0
 800279e:	461a      	mov	r2, r3
 80027a0:	f7ff fa08 	bl	8001bb4 <LL_ADC_SetDataRightShift>
 80027a4:	e04c      	b.n	8002840 <HAL_ADC_ConfigChannel+0x248>
 80027a6:	bf00      	nop
 80027a8:	47ff0000 	.word	0x47ff0000
 80027ac:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	069b      	lsls	r3, r3, #26
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d107      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027d2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	069b      	lsls	r3, r3, #26
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d107      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027f6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	069b      	lsls	r3, r3, #26
 8002808:	429a      	cmp	r2, r3
 800280a:	d107      	bne.n	800281c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800281a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002822:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	069b      	lsls	r3, r3, #26
 800282c:	429a      	cmp	r2, r3
 800282e:	d107      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800283e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fb09 	bl	8001e5c <LL_ADC_IsEnabled>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 8211 	bne.w	8002c74 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6819      	ldr	r1, [r3, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	461a      	mov	r2, r3
 8002860:	f7ff fa46 	bl	8001cf0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4aa1      	ldr	r2, [pc, #644]	@ (8002af0 <HAL_ADC_ConfigChannel+0x4f8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	f040 812e 	bne.w	8002acc <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10b      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x2a0>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	0e9b      	lsrs	r3, r3, #26
 8002886:	3301      	adds	r3, #1
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	2b09      	cmp	r3, #9
 800288e:	bf94      	ite	ls
 8002890:	2301      	movls	r3, #1
 8002892:	2300      	movhi	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	e019      	b.n	80028cc <HAL_ADC_ConfigChannel+0x2d4>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80028a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80028aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80028b0:	2320      	movs	r3, #32
 80028b2:	e003      	b.n	80028bc <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80028b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	3301      	adds	r3, #1
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	2b09      	cmp	r3, #9
 80028c4:	bf94      	ite	ls
 80028c6:	2301      	movls	r3, #1
 80028c8:	2300      	movhi	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d079      	beq.n	80029c4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d107      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x2f4>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	0e9b      	lsrs	r3, r3, #26
 80028e2:	3301      	adds	r3, #1
 80028e4:	069b      	lsls	r3, r3, #26
 80028e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028ea:	e015      	b.n	8002918 <HAL_ADC_ConfigChannel+0x320>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80028fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028fc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80028fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002904:	2320      	movs	r3, #32
 8002906:	e003      	b.n	8002910 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	3301      	adds	r3, #1
 8002912:	069b      	lsls	r3, r3, #26
 8002914:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x340>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0e9b      	lsrs	r3, r3, #26
 800292a:	3301      	adds	r3, #1
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	2101      	movs	r1, #1
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	e017      	b.n	8002968 <HAL_ADC_ConfigChannel+0x370>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002948:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800294a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002950:	2320      	movs	r3, #32
 8002952:	e003      	b.n	800295c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	3301      	adds	r3, #1
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	ea42 0103 	orr.w	r1, r2, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <HAL_ADC_ConfigChannel+0x396>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0e9b      	lsrs	r3, r3, #26
 800297e:	3301      	adds	r3, #1
 8002980:	f003 021f 	and.w	r2, r3, #31
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	051b      	lsls	r3, r3, #20
 800298c:	e018      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x3c8>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800299c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80029a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e003      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80029aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	f003 021f 	and.w	r2, r3, #31
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c0:	430b      	orrs	r3, r1
 80029c2:	e07e      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d107      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x3e8>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	0e9b      	lsrs	r3, r3, #26
 80029d6:	3301      	adds	r3, #1
 80029d8:	069b      	lsls	r3, r3, #26
 80029da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029de:	e015      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x414>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e8:	fa93 f3a3 	rbit	r3, r3
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80029f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80029f8:	2320      	movs	r3, #32
 80029fa:	e003      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80029fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	069b      	lsls	r3, r3, #26
 8002a08:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x434>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0e9b      	lsrs	r3, r3, #26
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	2101      	movs	r1, #1
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	e017      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x464>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	61bb      	str	r3, [r7, #24]
  return result;
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002a44:	2320      	movs	r3, #32
 8002a46:	e003      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	3301      	adds	r3, #1
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	2101      	movs	r1, #1
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	ea42 0103 	orr.w	r1, r2, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10d      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x490>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0e9b      	lsrs	r3, r3, #26
 8002a72:	3301      	adds	r3, #1
 8002a74:	f003 021f 	and.w	r2, r3, #31
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3b1e      	subs	r3, #30
 8002a80:	051b      	lsls	r3, r3, #20
 8002a82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a86:	e01b      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x4c8>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	60fb      	str	r3, [r7, #12]
  return result;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	e003      	b.n	8002aac <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	3301      	adds	r3, #1
 8002aae:	f003 021f 	and.w	r2, r3, #31
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3b1e      	subs	r3, #30
 8002aba:	051b      	lsls	r3, r3, #20
 8002abc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	6892      	ldr	r2, [r2, #8]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f7ff f8e7 	bl	8001c9a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f280 80cf 	bge.w	8002c74 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a06      	ldr	r2, [pc, #24]	@ (8002af4 <HAL_ADC_ConfigChannel+0x4fc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d004      	beq.n	8002aea <HAL_ADC_ConfigChannel+0x4f2>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a04      	ldr	r2, [pc, #16]	@ (8002af8 <HAL_ADC_ConfigChannel+0x500>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10a      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x508>
 8002aea:	4b04      	ldr	r3, [pc, #16]	@ (8002afc <HAL_ADC_ConfigChannel+0x504>)
 8002aec:	e009      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x50a>
 8002aee:	bf00      	nop
 8002af0:	47ff0000 	.word	0x47ff0000
 8002af4:	40022000 	.word	0x40022000
 8002af8:	40022100 	.word	0x40022100
 8002afc:	40022300 	.word	0x40022300
 8002b00:	4b61      	ldr	r3, [pc, #388]	@ (8002c88 <HAL_ADC_ConfigChannel+0x690>)
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff f828 	bl	8001b58 <LL_ADC_GetCommonPathInternalCh>
 8002b08:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a5f      	ldr	r2, [pc, #380]	@ (8002c8c <HAL_ADC_ConfigChannel+0x694>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d004      	beq.n	8002b1e <HAL_ADC_ConfigChannel+0x526>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a5d      	ldr	r2, [pc, #372]	@ (8002c90 <HAL_ADC_ConfigChannel+0x698>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d10e      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x544>
 8002b1e:	485b      	ldr	r0, [pc, #364]	@ (8002c8c <HAL_ADC_ConfigChannel+0x694>)
 8002b20:	f7ff f99c 	bl	8001e5c <LL_ADC_IsEnabled>
 8002b24:	4604      	mov	r4, r0
 8002b26:	485a      	ldr	r0, [pc, #360]	@ (8002c90 <HAL_ADC_ConfigChannel+0x698>)
 8002b28:	f7ff f998 	bl	8001e5c <LL_ADC_IsEnabled>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4323      	orrs	r3, r4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	e008      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x556>
 8002b3c:	4855      	ldr	r0, [pc, #340]	@ (8002c94 <HAL_ADC_ConfigChannel+0x69c>)
 8002b3e:	f7ff f98d 	bl	8001e5c <LL_ADC_IsEnabled>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d07d      	beq.n	8002c4e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a50      	ldr	r2, [pc, #320]	@ (8002c98 <HAL_ADC_ConfigChannel+0x6a0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d130      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x5c6>
 8002b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d12b      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a4a      	ldr	r2, [pc, #296]	@ (8002c94 <HAL_ADC_ConfigChannel+0x69c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	f040 8081 	bne.w	8002c74 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a45      	ldr	r2, [pc, #276]	@ (8002c8c <HAL_ADC_ConfigChannel+0x694>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_ADC_ConfigChannel+0x58e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a43      	ldr	r2, [pc, #268]	@ (8002c90 <HAL_ADC_ConfigChannel+0x698>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x592>
 8002b86:	4a45      	ldr	r2, [pc, #276]	@ (8002c9c <HAL_ADC_ConfigChannel+0x6a4>)
 8002b88:	e000      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x594>
 8002b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8002c88 <HAL_ADC_ConfigChannel+0x690>)
 8002b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b8e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b92:	4619      	mov	r1, r3
 8002b94:	4610      	mov	r0, r2
 8002b96:	f7fe ffcc 	bl	8001b32 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x6a8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	099b      	lsrs	r3, r3, #6
 8002ba0:	4a40      	ldr	r2, [pc, #256]	@ (8002ca4 <HAL_ADC_ConfigChannel+0x6ac>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	099b      	lsrs	r3, r3, #6
 8002ba8:	3301      	adds	r3, #1
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002bae:	e002      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f9      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bbc:	e05a      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a39      	ldr	r2, [pc, #228]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x6b0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d11e      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x60e>
 8002bc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d119      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a2f      	ldr	r2, [pc, #188]	@ (8002c94 <HAL_ADC_ConfigChannel+0x69c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d14b      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a2a      	ldr	r2, [pc, #168]	@ (8002c8c <HAL_ADC_ConfigChannel+0x694>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <HAL_ADC_ConfigChannel+0x5f8>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a29      	ldr	r2, [pc, #164]	@ (8002c90 <HAL_ADC_ConfigChannel+0x698>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d101      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x5fc>
 8002bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8002c9c <HAL_ADC_ConfigChannel+0x6a4>)
 8002bf2:	e000      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x5fe>
 8002bf4:	4a24      	ldr	r2, [pc, #144]	@ (8002c88 <HAL_ADC_ConfigChannel+0x690>)
 8002bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bf8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f7fe ff97 	bl	8001b32 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c04:	e036      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a28      	ldr	r2, [pc, #160]	@ (8002cac <HAL_ADC_ConfigChannel+0x6b4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d131      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x67c>
 8002c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d12c      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002c94 <HAL_ADC_ConfigChannel+0x69c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d127      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a18      	ldr	r2, [pc, #96]	@ (8002c8c <HAL_ADC_ConfigChannel+0x694>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d004      	beq.n	8002c38 <HAL_ADC_ConfigChannel+0x640>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a17      	ldr	r2, [pc, #92]	@ (8002c90 <HAL_ADC_ConfigChannel+0x698>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d101      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x644>
 8002c38:	4a18      	ldr	r2, [pc, #96]	@ (8002c9c <HAL_ADC_ConfigChannel+0x6a4>)
 8002c3a:	e000      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x646>
 8002c3c:	4a12      	ldr	r2, [pc, #72]	@ (8002c88 <HAL_ADC_ConfigChannel+0x690>)
 8002c3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c44:	4619      	mov	r1, r3
 8002c46:	4610      	mov	r0, r2
 8002c48:	f7fe ff73 	bl	8001b32 <LL_ADC_SetCommonPathInternalCh>
 8002c4c:	e012      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c52:	f043 0220 	orr.w	r2, r3, #32
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002c60:	e008      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c66:	f043 0220 	orr.w	r2, r3, #32
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c7c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3784      	adds	r7, #132	@ 0x84
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}
 8002c88:	58026300 	.word	0x58026300
 8002c8c:	40022000 	.word	0x40022000
 8002c90:	40022100 	.word	0x40022100
 8002c94:	58026000 	.word	0x58026000
 8002c98:	cb840000 	.word	0xcb840000
 8002c9c:	40022300 	.word	0x40022300
 8002ca0:	24000000 	.word	0x24000000
 8002ca4:	053e2d63 	.word	0x053e2d63
 8002ca8:	c7520000 	.word	0xc7520000
 8002cac:	cfb80000 	.word	0xcfb80000

08002cb0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff f8cd 	bl	8001e5c <LL_ADC_IsEnabled>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d16e      	bne.n	8002da6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	4b38      	ldr	r3, [pc, #224]	@ (8002db0 <ADC_Enable+0x100>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cda:	f043 0210 	orr.w	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e05a      	b.n	8002da8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff f888 	bl	8001e0c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cfc:	f7fe feca 	bl	8001a94 <HAL_GetTick>
 8002d00:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a2b      	ldr	r2, [pc, #172]	@ (8002db4 <ADC_Enable+0x104>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d004      	beq.n	8002d16 <ADC_Enable+0x66>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a29      	ldr	r2, [pc, #164]	@ (8002db8 <ADC_Enable+0x108>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d101      	bne.n	8002d1a <ADC_Enable+0x6a>
 8002d16:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <ADC_Enable+0x10c>)
 8002d18:	e000      	b.n	8002d1c <ADC_Enable+0x6c>
 8002d1a:	4b29      	ldr	r3, [pc, #164]	@ (8002dc0 <ADC_Enable+0x110>)
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff f80b 	bl	8001d38 <LL_ADC_GetMultimode>
 8002d22:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a23      	ldr	r2, [pc, #140]	@ (8002db8 <ADC_Enable+0x108>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d002      	beq.n	8002d34 <ADC_Enable+0x84>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	e000      	b.n	8002d36 <ADC_Enable+0x86>
 8002d34:	4b1f      	ldr	r3, [pc, #124]	@ (8002db4 <ADC_Enable+0x104>)
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d02c      	beq.n	8002d98 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d130      	bne.n	8002da6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d44:	e028      	b.n	8002d98 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff f886 	bl	8001e5c <LL_ADC_IsEnabled>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d104      	bne.n	8002d60 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff f856 	bl	8001e0c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d60:	f7fe fe98 	bl	8001a94 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d914      	bls.n	8002d98 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d00d      	beq.n	8002d98 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d80:	f043 0210 	orr.w	r2, r3, #16
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e007      	b.n	8002da8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d1cf      	bne.n	8002d46 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	8000003f 	.word	0x8000003f
 8002db4:	40022000 	.word	0x40022000
 8002db8:	40022100 	.word	0x40022100
 8002dbc:	40022300 	.word	0x40022300
 8002dc0:	58026300 	.word	0x58026300

08002dc4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff f856 	bl	8001e82 <LL_ADC_IsDisableOngoing>
 8002dd6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff f83d 	bl	8001e5c <LL_ADC_IsEnabled>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d047      	beq.n	8002e78 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d144      	bne.n	8002e78 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030d 	and.w	r3, r3, #13
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d10c      	bne.n	8002e16 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff f817 	bl	8001e34 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e0e:	f7fe fe41 	bl	8001a94 <HAL_GetTick>
 8002e12:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e14:	e029      	b.n	8002e6a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1a:	f043 0210 	orr.w	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e26:	f043 0201 	orr.w	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e023      	b.n	8002e7a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e32:	f7fe fe2f 	bl	8001a94 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d914      	bls.n	8002e6a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e52:	f043 0210 	orr.w	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5e:	f043 0201 	orr.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e007      	b.n	8002e7a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1dc      	bne.n	8002e32 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a7a      	ldr	r2, [pc, #488]	@ (800307c <ADC_ConfigureBoostMode+0x1f8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <ADC_ConfigureBoostMode+0x1c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a79      	ldr	r2, [pc, #484]	@ (8003080 <ADC_ConfigureBoostMode+0x1fc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d109      	bne.n	8002eb4 <ADC_ConfigureBoostMode+0x30>
 8002ea0:	4b78      	ldr	r3, [pc, #480]	@ (8003084 <ADC_ConfigureBoostMode+0x200>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	e008      	b.n	8002ec6 <ADC_ConfigureBoostMode+0x42>
 8002eb4:	4b74      	ldr	r3, [pc, #464]	@ (8003088 <ADC_ConfigureBoostMode+0x204>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf14      	ite	ne
 8002ec0:	2301      	movne	r3, #1
 8002ec2:	2300      	moveq	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d01c      	beq.n	8002f04 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002eca:	f002 fba3 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 8002ece:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ed8:	d010      	beq.n	8002efc <ADC_ConfigureBoostMode+0x78>
 8002eda:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ede:	d873      	bhi.n	8002fc8 <ADC_ConfigureBoostMode+0x144>
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee4:	d002      	beq.n	8002eec <ADC_ConfigureBoostMode+0x68>
 8002ee6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002eea:	d16d      	bne.n	8002fc8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	60fb      	str	r3, [r7, #12]
        break;
 8002efa:	e068      	b.n	8002fce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	089b      	lsrs	r3, r3, #2
 8002f00:	60fb      	str	r3, [r7, #12]
        break;
 8002f02:	e064      	b.n	8002fce <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f04:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002f08:	f04f 0100 	mov.w	r1, #0
 8002f0c:	f003 fe14 	bl	8006b38 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f10:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f1a:	d051      	beq.n	8002fc0 <ADC_ConfigureBoostMode+0x13c>
 8002f1c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f20:	d854      	bhi.n	8002fcc <ADC_ConfigureBoostMode+0x148>
 8002f22:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f26:	d047      	beq.n	8002fb8 <ADC_ConfigureBoostMode+0x134>
 8002f28:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f2c:	d84e      	bhi.n	8002fcc <ADC_ConfigureBoostMode+0x148>
 8002f2e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f32:	d03d      	beq.n	8002fb0 <ADC_ConfigureBoostMode+0x12c>
 8002f34:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f38:	d848      	bhi.n	8002fcc <ADC_ConfigureBoostMode+0x148>
 8002f3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f3e:	d033      	beq.n	8002fa8 <ADC_ConfigureBoostMode+0x124>
 8002f40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f44:	d842      	bhi.n	8002fcc <ADC_ConfigureBoostMode+0x148>
 8002f46:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002f4a:	d029      	beq.n	8002fa0 <ADC_ConfigureBoostMode+0x11c>
 8002f4c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002f50:	d83c      	bhi.n	8002fcc <ADC_ConfigureBoostMode+0x148>
 8002f52:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002f56:	d01a      	beq.n	8002f8e <ADC_ConfigureBoostMode+0x10a>
 8002f58:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002f5c:	d836      	bhi.n	8002fcc <ADC_ConfigureBoostMode+0x148>
 8002f5e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002f62:	d014      	beq.n	8002f8e <ADC_ConfigureBoostMode+0x10a>
 8002f64:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002f68:	d830      	bhi.n	8002fcc <ADC_ConfigureBoostMode+0x148>
 8002f6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f6e:	d00e      	beq.n	8002f8e <ADC_ConfigureBoostMode+0x10a>
 8002f70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f74:	d82a      	bhi.n	8002fcc <ADC_ConfigureBoostMode+0x148>
 8002f76:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f7a:	d008      	beq.n	8002f8e <ADC_ConfigureBoostMode+0x10a>
 8002f7c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f80:	d824      	bhi.n	8002fcc <ADC_ConfigureBoostMode+0x148>
 8002f82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f86:	d002      	beq.n	8002f8e <ADC_ConfigureBoostMode+0x10a>
 8002f88:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f8c:	d11e      	bne.n	8002fcc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	0c9b      	lsrs	r3, r3, #18
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	60fb      	str	r3, [r7, #12]
        break;
 8002f9e:	e016      	b.n	8002fce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	60fb      	str	r3, [r7, #12]
        break;
 8002fa6:	e012      	b.n	8002fce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	60fb      	str	r3, [r7, #12]
        break;
 8002fae:	e00e      	b.n	8002fce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	099b      	lsrs	r3, r3, #6
 8002fb4:	60fb      	str	r3, [r7, #12]
        break;
 8002fb6:	e00a      	b.n	8002fce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	09db      	lsrs	r3, r3, #7
 8002fbc:	60fb      	str	r3, [r7, #12]
        break;
 8002fbe:	e006      	b.n	8002fce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	60fb      	str	r3, [r7, #12]
        break;
 8002fc6:	e002      	b.n	8002fce <ADC_ConfigureBoostMode+0x14a>
        break;
 8002fc8:	bf00      	nop
 8002fca:	e000      	b.n	8002fce <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002fcc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002fce:	f7fe fd91 	bl	8001af4 <HAL_GetREVID>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d815      	bhi.n	8003008 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a2b      	ldr	r2, [pc, #172]	@ (800308c <ADC_ConfigureBoostMode+0x208>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d908      	bls.n	8002ff6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ff2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002ff4:	e03e      	b.n	8003074 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003004:	609a      	str	r2, [r3, #8]
}
 8003006:	e035      	b.n	8003074 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	085b      	lsrs	r3, r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4a1f      	ldr	r2, [pc, #124]	@ (8003090 <ADC_ConfigureBoostMode+0x20c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d808      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003024:	609a      	str	r2, [r3, #8]
}
 8003026:	e025      	b.n	8003074 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4a1a      	ldr	r2, [pc, #104]	@ (8003094 <ADC_ConfigureBoostMode+0x210>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d80a      	bhi.n	8003046 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003042:	609a      	str	r2, [r3, #8]
}
 8003044:	e016      	b.n	8003074 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4a13      	ldr	r2, [pc, #76]	@ (8003098 <ADC_ConfigureBoostMode+0x214>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d80a      	bhi.n	8003064 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003060:	609a      	str	r2, [r3, #8]
}
 8003062:	e007      	b.n	8003074 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003072:	609a      	str	r2, [r3, #8]
}
 8003074:	bf00      	nop
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40022000 	.word	0x40022000
 8003080:	40022100 	.word	0x40022100
 8003084:	40022300 	.word	0x40022300
 8003088:	58026300 	.word	0x58026300
 800308c:	01312d00 	.word	0x01312d00
 8003090:	005f5e10 	.word	0x005f5e10
 8003094:	00bebc20 	.word	0x00bebc20
 8003098:	017d7840 	.word	0x017d7840

0800309c <LL_ADC_StartCalibration>:
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <LL_ADC_StartCalibration+0x38>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80030bc:	430a      	orrs	r2, r1
 80030be:	4313      	orrs	r3, r2
 80030c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	609a      	str	r2, [r3, #8]
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	3ffeffc0 	.word	0x3ffeffc0

080030d8 <LL_ADC_IsCalibrationOnGoing>:
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030ec:	d101      	bne.n	80030f2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_ADCEx_Calibration_Start+0x1e>
 800311a:	2302      	movs	r3, #2
 800311c:	e04c      	b.n	80031b8 <HAL_ADCEx_Calibration_Start+0xb8>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7ff fe4c 	bl	8002dc4 <ADC_Disable>
 800312c:	4603      	mov	r3, r0
 800312e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003130:	7dfb      	ldrb	r3, [r7, #23]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d135      	bne.n	80031a2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800313a:	4b21      	ldr	r3, [pc, #132]	@ (80031c0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800313c:	4013      	ands	r3, r2
 800313e:	f043 0202 	orr.w	r2, r3, #2
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff ffa4 	bl	800309c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003154:	e014      	b.n	8003180 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	3301      	adds	r3, #1
 800315a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4a19      	ldr	r2, [pc, #100]	@ (80031c4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d30d      	bcc.n	8003180 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003168:	f023 0312 	bic.w	r3, r3, #18
 800316c:	f043 0210 	orr.w	r2, r3, #16
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e01b      	b.n	80031b8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ffa7 	bl	80030d8 <LL_ADC_IsCalibrationOnGoing>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1e2      	bne.n	8003156 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003194:	f023 0303 	bic.w	r3, r3, #3
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	655a      	str	r2, [r3, #84]	@ 0x54
 80031a0:	e005      	b.n	80031ae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a6:	f043 0210 	orr.w	r2, r3, #16
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	ffffeefd 	.word	0xffffeefd
 80031c4:	25c3f800 	.word	0x25c3f800

080031c8 <__NVIC_SetPriorityGrouping>:
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003208 <__NVIC_SetPriorityGrouping+0x40>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031e4:	4013      	ands	r3, r2
 80031e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031f0:	4b06      	ldr	r3, [pc, #24]	@ (800320c <__NVIC_SetPriorityGrouping+0x44>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031f6:	4a04      	ldr	r2, [pc, #16]	@ (8003208 <__NVIC_SetPriorityGrouping+0x40>)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	60d3      	str	r3, [r2, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000ed00 	.word	0xe000ed00
 800320c:	05fa0000 	.word	0x05fa0000

08003210 <__NVIC_GetPriorityGrouping>:
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003214:	4b04      	ldr	r3, [pc, #16]	@ (8003228 <__NVIC_GetPriorityGrouping+0x18>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	0a1b      	lsrs	r3, r3, #8
 800321a:	f003 0307 	and.w	r3, r3, #7
}
 800321e:	4618      	mov	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <__NVIC_EnableIRQ>:
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800323a:	2b00      	cmp	r3, #0
 800323c:	db0b      	blt.n	8003256 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	f003 021f 	and.w	r2, r3, #31
 8003244:	4907      	ldr	r1, [pc, #28]	@ (8003264 <__NVIC_EnableIRQ+0x38>)
 8003246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	2001      	movs	r0, #1
 800324e:	fa00 f202 	lsl.w	r2, r0, r2
 8003252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	e000e100 	.word	0xe000e100

08003268 <__NVIC_SetPriority>:
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	6039      	str	r1, [r7, #0]
 8003272:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003274:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003278:	2b00      	cmp	r3, #0
 800327a:	db0a      	blt.n	8003292 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	490c      	ldr	r1, [pc, #48]	@ (80032b4 <__NVIC_SetPriority+0x4c>)
 8003282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003286:	0112      	lsls	r2, r2, #4
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	440b      	add	r3, r1
 800328c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003290:	e00a      	b.n	80032a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	b2da      	uxtb	r2, r3
 8003296:	4908      	ldr	r1, [pc, #32]	@ (80032b8 <__NVIC_SetPriority+0x50>)
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	3b04      	subs	r3, #4
 80032a0:	0112      	lsls	r2, r2, #4
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	440b      	add	r3, r1
 80032a6:	761a      	strb	r2, [r3, #24]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	e000e100 	.word	0xe000e100
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <NVIC_EncodePriority>:
{
 80032bc:	b480      	push	{r7}
 80032be:	b089      	sub	sp, #36	@ 0x24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f1c3 0307 	rsb	r3, r3, #7
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	bf28      	it	cs
 80032da:	2304      	movcs	r3, #4
 80032dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3304      	adds	r3, #4
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d902      	bls.n	80032ec <NVIC_EncodePriority+0x30>
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3b03      	subs	r3, #3
 80032ea:	e000      	b.n	80032ee <NVIC_EncodePriority+0x32>
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	f04f 32ff 	mov.w	r2, #4294967295
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43da      	mvns	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	401a      	ands	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003304:	f04f 31ff 	mov.w	r1, #4294967295
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	fa01 f303 	lsl.w	r3, r1, r3
 800330e:	43d9      	mvns	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003314:	4313      	orrs	r3, r2
}
 8003316:	4618      	mov	r0, r3
 8003318:	3724      	adds	r7, #36	@ 0x24
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff ff4c 	bl	80031c8 <__NVIC_SetPriorityGrouping>
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003346:	f7ff ff63 	bl	8003210 <__NVIC_GetPriorityGrouping>
 800334a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	68b9      	ldr	r1, [r7, #8]
 8003350:	6978      	ldr	r0, [r7, #20]
 8003352:	f7ff ffb3 	bl	80032bc <NVIC_EncodePriority>
 8003356:	4602      	mov	r2, r0
 8003358:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff ff82 	bl	8003268 <__NVIC_SetPriority>
}
 8003364:	bf00      	nop
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff ff56 	bl	800322c <__NVIC_EnableIRQ>
}
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800338c:	f3bf 8f5f 	dmb	sy
}
 8003390:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003392:	4b07      	ldr	r3, [pc, #28]	@ (80033b0 <HAL_MPU_Disable+0x28>)
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	4a06      	ldr	r2, [pc, #24]	@ (80033b0 <HAL_MPU_Disable+0x28>)
 8003398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800339c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800339e:	4b05      	ldr	r3, [pc, #20]	@ (80033b4 <HAL_MPU_Disable+0x2c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	605a      	str	r2, [r3, #4]
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000ed00 	.word	0xe000ed00
 80033b4:	e000ed90 	.word	0xe000ed90

080033b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80033c0:	4a0b      	ldr	r2, [pc, #44]	@ (80033f0 <HAL_MPU_Enable+0x38>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80033ca:	4b0a      	ldr	r3, [pc, #40]	@ (80033f4 <HAL_MPU_Enable+0x3c>)
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	4a09      	ldr	r2, [pc, #36]	@ (80033f4 <HAL_MPU_Enable+0x3c>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80033d6:	f3bf 8f4f 	dsb	sy
}
 80033da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033dc:	f3bf 8f6f 	isb	sy
}
 80033e0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000ed90 	.word	0xe000ed90
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	785a      	ldrb	r2, [r3, #1]
 8003404:	4b1b      	ldr	r3, [pc, #108]	@ (8003474 <HAL_MPU_ConfigRegion+0x7c>)
 8003406:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003408:	4b1a      	ldr	r3, [pc, #104]	@ (8003474 <HAL_MPU_ConfigRegion+0x7c>)
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	4a19      	ldr	r2, [pc, #100]	@ (8003474 <HAL_MPU_ConfigRegion+0x7c>)
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003414:	4a17      	ldr	r2, [pc, #92]	@ (8003474 <HAL_MPU_ConfigRegion+0x7c>)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	7b1b      	ldrb	r3, [r3, #12]
 8003420:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	7adb      	ldrb	r3, [r3, #11]
 8003426:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003428:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	7a9b      	ldrb	r3, [r3, #10]
 800342e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003430:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	7b5b      	ldrb	r3, [r3, #13]
 8003436:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003438:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	7b9b      	ldrb	r3, [r3, #14]
 800343e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003440:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	7bdb      	ldrb	r3, [r3, #15]
 8003446:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003448:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	7a5b      	ldrb	r3, [r3, #9]
 800344e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003450:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	7a1b      	ldrb	r3, [r3, #8]
 8003456:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003458:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	7812      	ldrb	r2, [r2, #0]
 800345e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003460:	4a04      	ldr	r2, [pc, #16]	@ (8003474 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003462:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003464:	6113      	str	r3, [r2, #16]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	e000ed90 	.word	0xe000ed90

08003478 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e014      	b.n	80034b4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	791b      	ldrb	r3, [r3, #4]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fd f980 	bl	80007a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e046      	b.n	800355e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	795b      	ldrb	r3, [r3, #5]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_DAC_Start+0x20>
 80034d8:	2302      	movs	r3, #2
 80034da:	e040      	b.n	800355e <HAL_DAC_Start+0xa2>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6819      	ldr	r1, [r3, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2201      	movs	r2, #1
 80034f6:	409a      	lsls	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10f      	bne.n	8003526 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8003510:	2b02      	cmp	r3, #2
 8003512:	d11d      	bne.n	8003550 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	605a      	str	r2, [r3, #4]
 8003524:	e014      	b.n	8003550 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2102      	movs	r1, #2
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	429a      	cmp	r2, r3
 800353e:	d107      	bne.n	8003550 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0202 	orr.w	r2, r2, #2
 800354e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003580:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01d      	beq.n	80035c8 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d018      	beq.n	80035c8 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2204      	movs	r2, #4
 800359a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f043 0201 	orr.w	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035c0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f851 	bl	800366a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d01d      	beq.n	800360e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d018      	beq.n	800360e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2204      	movs	r2, #4
 80035e0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f043 0202 	orr.w	r2, r3, #2
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80035f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003606:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f97b 	bl	8003904 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800360e:	bf00      	nop
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003616:	b480      	push	{r7}
 8003618:	b087      	sub	sp, #28
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e015      	b.n	800365e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d105      	bne.n	800364a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4413      	add	r3, r2
 8003644:	3308      	adds	r3, #8
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	e004      	b.n	8003654 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4413      	add	r3, r2
 8003650:	3314      	adds	r3, #20
 8003652:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	461a      	mov	r2, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	371c      	adds	r7, #28
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	@ 0x28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <HAL_DAC_ConfigChannel+0x1e>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e12a      	b.n	80038f8 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	795b      	ldrb	r3, [r3, #5]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_DAC_ConfigChannel+0x2e>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e124      	b.n	80038f8 <HAL_DAC_ConfigChannel+0x278>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2202      	movs	r2, #2
 80036b8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d17a      	bne.n	80037b8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80036c2:	f7fe f9e7 	bl	8001a94 <HAL_GetTick>
 80036c6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d13d      	bne.n	800374a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036ce:	e018      	b.n	8003702 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80036d0:	f7fe f9e0 	bl	8001a94 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d911      	bls.n	8003702 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036e4:	4b86      	ldr	r3, [pc, #536]	@ (8003900 <HAL_DAC_ConfigChannel+0x280>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f043 0208 	orr.w	r2, r3, #8
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2203      	movs	r2, #3
 80036fc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0fa      	b.n	80038f8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003708:	4b7d      	ldr	r3, [pc, #500]	@ (8003900 <HAL_DAC_ConfigChannel+0x280>)
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1df      	bne.n	80036d0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	6992      	ldr	r2, [r2, #24]
 8003718:	641a      	str	r2, [r3, #64]	@ 0x40
 800371a:	e020      	b.n	800375e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800371c:	f7fe f9ba 	bl	8001a94 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d90f      	bls.n	800374a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003730:	2b00      	cmp	r3, #0
 8003732:	da0a      	bge.n	800374a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f043 0208 	orr.w	r2, r3, #8
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2203      	movs	r2, #3
 8003744:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e0d6      	b.n	80038f8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003750:	2b00      	cmp	r3, #0
 8003752:	dbe3      	blt.n	800371c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	6992      	ldr	r2, [r2, #24]
 800375c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800376e:	fa01 f303 	lsl.w	r3, r1, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	ea02 0103 	and.w	r1, r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	69da      	ldr	r2, [r3, #28]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	409a      	lsls	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	21ff      	movs	r1, #255	@ 0xff
 800379a:	fa01 f303 	lsl.w	r3, r1, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	ea02 0103 	and.w	r1, r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	6a1a      	ldr	r2, [r3, #32]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	409a      	lsls	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d11d      	bne.n	80037fc <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	221f      	movs	r2, #31
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003802:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2207      	movs	r2, #7
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d102      	bne.n	8003826 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8003820:	2300      	movs	r3, #0
 8003822:	627b      	str	r3, [r7, #36]	@ 0x24
 8003824:	e00f      	b.n	8003846 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d102      	bne.n	8003834 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800382e:	2301      	movs	r3, #1
 8003830:	627b      	str	r3, [r7, #36]	@ 0x24
 8003832:	e008      	b.n	8003846 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d102      	bne.n	8003842 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800383c:	2301      	movs	r3, #1
 800383e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003840:	e001      	b.n	8003846 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003842:	2300      	movs	r3, #0
 8003844:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	4313      	orrs	r3, r2
 8003850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4313      	orrs	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6819      	ldr	r1, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43da      	mvns	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	400a      	ands	r2, r1
 800388c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6819      	ldr	r1, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	22c0      	movs	r2, #192	@ 0xc0
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43da      	mvns	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	400a      	ands	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80038f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3728      	adds	r7, #40	@ 0x28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20008000 	.word	0x20008000

08003904 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	@ 0x24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003926:	4b89      	ldr	r3, [pc, #548]	@ (8003b4c <HAL_GPIO_Init+0x234>)
 8003928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800392a:	e194      	b.n	8003c56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	2101      	movs	r1, #1
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	fa01 f303 	lsl.w	r3, r1, r3
 8003938:	4013      	ands	r3, r2
 800393a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 8186 	beq.w	8003c50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d005      	beq.n	800395c <HAL_GPIO_Init+0x44>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d130      	bne.n	80039be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	2203      	movs	r2, #3
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003992:	2201      	movs	r2, #1
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	091b      	lsrs	r3, r3, #4
 80039a8:	f003 0201 	and.w	r2, r3, #1
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d017      	beq.n	80039fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	2203      	movs	r2, #3
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4013      	ands	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d123      	bne.n	8003a4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	08da      	lsrs	r2, r3, #3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3208      	adds	r2, #8
 8003a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	220f      	movs	r2, #15
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43db      	mvns	r3, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4013      	ands	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	08da      	lsrs	r2, r3, #3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3208      	adds	r2, #8
 8003a48:	69b9      	ldr	r1, [r7, #24]
 8003a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	2203      	movs	r2, #3
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4013      	ands	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 0203 	and.w	r2, r3, #3
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80e0 	beq.w	8003c50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a90:	4b2f      	ldr	r3, [pc, #188]	@ (8003b50 <HAL_GPIO_Init+0x238>)
 8003a92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a96:	4a2e      	ldr	r2, [pc, #184]	@ (8003b50 <HAL_GPIO_Init+0x238>)
 8003a98:	f043 0302 	orr.w	r3, r3, #2
 8003a9c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8003b50 <HAL_GPIO_Init+0x238>)
 8003aa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aae:	4a29      	ldr	r2, [pc, #164]	@ (8003b54 <HAL_GPIO_Init+0x23c>)
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	089b      	lsrs	r3, r3, #2
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	220f      	movs	r2, #15
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a20      	ldr	r2, [pc, #128]	@ (8003b58 <HAL_GPIO_Init+0x240>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d052      	beq.n	8003b80 <HAL_GPIO_Init+0x268>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a1f      	ldr	r2, [pc, #124]	@ (8003b5c <HAL_GPIO_Init+0x244>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d031      	beq.n	8003b46 <HAL_GPIO_Init+0x22e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8003b60 <HAL_GPIO_Init+0x248>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d02b      	beq.n	8003b42 <HAL_GPIO_Init+0x22a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a1d      	ldr	r2, [pc, #116]	@ (8003b64 <HAL_GPIO_Init+0x24c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d025      	beq.n	8003b3e <HAL_GPIO_Init+0x226>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b68 <HAL_GPIO_Init+0x250>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01f      	beq.n	8003b3a <HAL_GPIO_Init+0x222>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a1b      	ldr	r2, [pc, #108]	@ (8003b6c <HAL_GPIO_Init+0x254>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d019      	beq.n	8003b36 <HAL_GPIO_Init+0x21e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a1a      	ldr	r2, [pc, #104]	@ (8003b70 <HAL_GPIO_Init+0x258>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <HAL_GPIO_Init+0x21a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a19      	ldr	r2, [pc, #100]	@ (8003b74 <HAL_GPIO_Init+0x25c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00d      	beq.n	8003b2e <HAL_GPIO_Init+0x216>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a18      	ldr	r2, [pc, #96]	@ (8003b78 <HAL_GPIO_Init+0x260>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d007      	beq.n	8003b2a <HAL_GPIO_Init+0x212>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a17      	ldr	r2, [pc, #92]	@ (8003b7c <HAL_GPIO_Init+0x264>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d101      	bne.n	8003b26 <HAL_GPIO_Init+0x20e>
 8003b22:	2309      	movs	r3, #9
 8003b24:	e02d      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b26:	230a      	movs	r3, #10
 8003b28:	e02b      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	e029      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b2e:	2307      	movs	r3, #7
 8003b30:	e027      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b32:	2306      	movs	r3, #6
 8003b34:	e025      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b36:	2305      	movs	r3, #5
 8003b38:	e023      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b3a:	2304      	movs	r3, #4
 8003b3c:	e021      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e01f      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b42:	2302      	movs	r3, #2
 8003b44:	e01d      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e01b      	b.n	8003b82 <HAL_GPIO_Init+0x26a>
 8003b4a:	bf00      	nop
 8003b4c:	58000080 	.word	0x58000080
 8003b50:	58024400 	.word	0x58024400
 8003b54:	58000400 	.word	0x58000400
 8003b58:	58020000 	.word	0x58020000
 8003b5c:	58020400 	.word	0x58020400
 8003b60:	58020800 	.word	0x58020800
 8003b64:	58020c00 	.word	0x58020c00
 8003b68:	58021000 	.word	0x58021000
 8003b6c:	58021400 	.word	0x58021400
 8003b70:	58021800 	.word	0x58021800
 8003b74:	58021c00 	.word	0x58021c00
 8003b78:	58022000 	.word	0x58022000
 8003b7c:	58022400 	.word	0x58022400
 8003b80:	2300      	movs	r3, #0
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	f002 0203 	and.w	r2, r2, #3
 8003b88:	0092      	lsls	r2, r2, #2
 8003b8a:	4093      	lsls	r3, r2
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b92:	4938      	ldr	r1, [pc, #224]	@ (8003c74 <HAL_GPIO_Init+0x35c>)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	089b      	lsrs	r3, r3, #2
 8003b98:	3302      	adds	r3, #2
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003bc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003bf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	3301      	adds	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f47f ae63 	bne.w	800392c <HAL_GPIO_Init+0x14>
  }
}
 8003c66:	bf00      	nop
 8003c68:	bf00      	nop
 8003c6a:	3724      	adds	r7, #36	@ 0x24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	58000400 	.word	0x58000400

08003c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	807b      	strh	r3, [r7, #2]
 8003c84:	4613      	mov	r3, r2
 8003c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c88:	787b      	ldrb	r3, [r7, #1]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c8e:	887a      	ldrh	r2, [r7, #2]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c94:	e003      	b.n	8003c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c96:	887b      	ldrh	r3, [r7, #2]
 8003c98:	041a      	lsls	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	619a      	str	r2, [r3, #24]
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b085      	sub	sp, #20
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cbc:	887a      	ldrh	r2, [r7, #2]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	041a      	lsls	r2, r3, #16
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	43d9      	mvns	r1, r3
 8003cc8:	887b      	ldrh	r3, [r7, #2]
 8003cca:	400b      	ands	r3, r1
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	619a      	str	r2, [r3, #24]
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d008      	beq.n	8003d0a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cfc:	88fb      	ldrh	r3, [r7, #6]
 8003cfe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f00a fb67 	bl	800e3d8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e08b      	b.n	8003e3e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fc ff12 	bl	8000b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2224      	movs	r2, #36	@ 0x24
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0201 	bic.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d107      	bne.n	8003d8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d8a:	609a      	str	r2, [r3, #8]
 8003d8c:	e006      	b.n	8003d9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003d9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d108      	bne.n	8003db6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003db2:	605a      	str	r2, [r3, #4]
 8003db4:	e007      	b.n	8003dc6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6859      	ldr	r1, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e48 <HAL_I2C_Init+0x134>)
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003de4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69d9      	ldr	r1, [r3, #28]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1a      	ldr	r2, [r3, #32]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	02008000 	.word	0x02008000

08003e4c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	4608      	mov	r0, r1
 8003e56:	4611      	mov	r1, r2
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	817b      	strh	r3, [r7, #10]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	813b      	strh	r3, [r7, #8]
 8003e62:	4613      	mov	r3, r2
 8003e64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	f040 80fd 	bne.w	800406e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_I2C_Mem_Read+0x34>
 8003e7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e86:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0f1      	b.n	8004070 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_I2C_Mem_Read+0x4e>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e0ea      	b.n	8004070 <HAL_I2C_Mem_Read+0x224>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ea2:	f7fd fdf7 	bl	8001a94 <HAL_GetTick>
 8003ea6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	2319      	movs	r3, #25
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f95b 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0d5      	b.n	8004070 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2222      	movs	r2, #34	@ 0x22
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2240      	movs	r2, #64	@ 0x40
 8003ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a3a      	ldr	r2, [r7, #32]
 8003ede:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ee4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003eec:	88f8      	ldrh	r0, [r7, #6]
 8003eee:	893a      	ldrh	r2, [r7, #8]
 8003ef0:	8979      	ldrh	r1, [r7, #10]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	9301      	str	r3, [sp, #4]
 8003ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	4603      	mov	r3, r0
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f8bf 	bl	8004080 <I2C_RequestMemoryRead>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0ad      	b.n	8004070 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2bff      	cmp	r3, #255	@ 0xff
 8003f1c:	d90e      	bls.n	8003f3c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	22ff      	movs	r2, #255	@ 0xff
 8003f22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	8979      	ldrh	r1, [r7, #10]
 8003f2c:	4b52      	ldr	r3, [pc, #328]	@ (8004078 <HAL_I2C_Mem_Read+0x22c>)
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fadf 	bl	80044f8 <I2C_TransferConfig>
 8003f3a:	e00f      	b.n	8003f5c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	8979      	ldrh	r1, [r7, #10]
 8003f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8004078 <HAL_I2C_Mem_Read+0x22c>)
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 face 	bl	80044f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f62:	2200      	movs	r2, #0
 8003f64:	2104      	movs	r1, #4
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f902 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e07c      	b.n	8004070 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d034      	beq.n	800401c <HAL_I2C_Mem_Read+0x1d0>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d130      	bne.n	800401c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2180      	movs	r1, #128	@ 0x80
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f8d3 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e04d      	b.n	8004070 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2bff      	cmp	r3, #255	@ 0xff
 8003fdc:	d90e      	bls.n	8003ffc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	22ff      	movs	r2, #255	@ 0xff
 8003fe2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	8979      	ldrh	r1, [r7, #10]
 8003fec:	2300      	movs	r3, #0
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fa7f 	bl	80044f8 <I2C_TransferConfig>
 8003ffa:	e00f      	b.n	800401c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400a:	b2da      	uxtb	r2, r3
 800400c:	8979      	ldrh	r1, [r7, #10]
 800400e:	2300      	movs	r3, #0
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 fa6e 	bl	80044f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d19a      	bne.n	8003f5c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f940 	bl	80042b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e01a      	b.n	8004070 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2220      	movs	r2, #32
 8004040:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6859      	ldr	r1, [r3, #4]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b0b      	ldr	r3, [pc, #44]	@ (800407c <HAL_I2C_Mem_Read+0x230>)
 800404e:	400b      	ands	r3, r1
 8004050:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	e000      	b.n	8004070 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800406e:	2302      	movs	r3, #2
  }
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	80002400 	.word	0x80002400
 800407c:	fe00e800 	.word	0xfe00e800

08004080 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	4608      	mov	r0, r1
 800408a:	4611      	mov	r1, r2
 800408c:	461a      	mov	r2, r3
 800408e:	4603      	mov	r3, r0
 8004090:	817b      	strh	r3, [r7, #10]
 8004092:	460b      	mov	r3, r1
 8004094:	813b      	strh	r3, [r7, #8]
 8004096:	4613      	mov	r3, r2
 8004098:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	b2da      	uxtb	r2, r3
 800409e:	8979      	ldrh	r1, [r7, #10]
 80040a0:	4b20      	ldr	r3, [pc, #128]	@ (8004124 <I2C_RequestMemoryRead+0xa4>)
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	2300      	movs	r3, #0
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fa26 	bl	80044f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	69b9      	ldr	r1, [r7, #24]
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f8b6 	bl	8004222 <I2C_WaitOnTXISFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e02c      	b.n	800411a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040c0:	88fb      	ldrh	r3, [r7, #6]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d105      	bne.n	80040d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040c6:	893b      	ldrh	r3, [r7, #8]
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80040d0:	e015      	b.n	80040fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040d2:	893b      	ldrh	r3, [r7, #8]
 80040d4:	0a1b      	lsrs	r3, r3, #8
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040e0:	69fa      	ldr	r2, [r7, #28]
 80040e2:	69b9      	ldr	r1, [r7, #24]
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f89c 	bl	8004222 <I2C_WaitOnTXISFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e012      	b.n	800411a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040f4:	893b      	ldrh	r3, [r7, #8]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	2200      	movs	r2, #0
 8004106:	2140      	movs	r1, #64	@ 0x40
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f831 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	80002000 	.word	0x80002000

08004128 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b02      	cmp	r3, #2
 800413c:	d103      	bne.n	8004146 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2200      	movs	r2, #0
 8004144:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b01      	cmp	r3, #1
 8004152:	d007      	beq.n	8004164 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	619a      	str	r2, [r3, #24]
  }
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	4613      	mov	r3, r2
 800417e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004180:	e03b      	b.n	80041fa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	6839      	ldr	r1, [r7, #0]
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f8d6 	bl	8004338 <I2C_IsErrorOccurred>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e041      	b.n	800421a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d02d      	beq.n	80041fa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419e:	f7fd fc79 	bl	8001a94 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d302      	bcc.n	80041b4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d122      	bne.n	80041fa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4013      	ands	r3, r2
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d113      	bne.n	80041fa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d6:	f043 0220 	orr.w	r2, r3, #32
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e00f      	b.n	800421a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699a      	ldr	r2, [r3, #24]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4013      	ands	r3, r2
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	429a      	cmp	r2, r3
 8004208:	bf0c      	ite	eq
 800420a:	2301      	moveq	r3, #1
 800420c:	2300      	movne	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	461a      	mov	r2, r3
 8004212:	79fb      	ldrb	r3, [r7, #7]
 8004214:	429a      	cmp	r2, r3
 8004216:	d0b4      	beq.n	8004182 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800422e:	e033      	b.n	8004298 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f87f 	bl	8004338 <I2C_IsErrorOccurred>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e031      	b.n	80042a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424a:	d025      	beq.n	8004298 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424c:	f7fd fc22 	bl	8001a94 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	429a      	cmp	r2, r3
 800425a:	d302      	bcc.n	8004262 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d11a      	bne.n	8004298 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b02      	cmp	r3, #2
 800426e:	d013      	beq.n	8004298 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004274:	f043 0220 	orr.w	r2, r3, #32
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e007      	b.n	80042a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d1c4      	bne.n	8004230 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042bc:	e02f      	b.n	800431e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	68b9      	ldr	r1, [r7, #8]
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f838 	bl	8004338 <I2C_IsErrorOccurred>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e02d      	b.n	800432e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d2:	f7fd fbdf 	bl	8001a94 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d302      	bcc.n	80042e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d11a      	bne.n	800431e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d013      	beq.n	800431e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fa:	f043 0220 	orr.w	r2, r3, #32
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e007      	b.n	800432e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b20      	cmp	r3, #32
 800432a:	d1c8      	bne.n	80042be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08a      	sub	sp, #40	@ 0x28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b00      	cmp	r3, #0
 8004362:	d068      	beq.n	8004436 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2210      	movs	r2, #16
 800436a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800436c:	e049      	b.n	8004402 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d045      	beq.n	8004402 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004376:	f7fd fb8d 	bl	8001a94 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	d302      	bcc.n	800438c <I2C_IsErrorOccurred+0x54>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d13a      	bne.n	8004402 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004396:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800439e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ae:	d121      	bne.n	80043f4 <I2C_IsErrorOccurred+0xbc>
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043b6:	d01d      	beq.n	80043f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80043b8:	7cfb      	ldrb	r3, [r7, #19]
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d01a      	beq.n	80043f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80043ce:	f7fd fb61 	bl	8001a94 <HAL_GetTick>
 80043d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043d4:	e00e      	b.n	80043f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80043d6:	f7fd fb5d 	bl	8001a94 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b19      	cmp	r3, #25
 80043e2:	d907      	bls.n	80043f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	f043 0320 	orr.w	r3, r3, #32
 80043ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80043f2:	e006      	b.n	8004402 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d1e9      	bne.n	80043d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b20      	cmp	r3, #32
 800440e:	d003      	beq.n	8004418 <I2C_IsErrorOccurred+0xe0>
 8004410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0aa      	beq.n	800436e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800441c:	2b00      	cmp	r3, #0
 800441e:	d103      	bne.n	8004428 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2220      	movs	r2, #32
 8004426:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	f043 0304 	orr.w	r3, r3, #4
 800442e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00b      	beq.n	8004460 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004458:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00b      	beq.n	8004482 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	f043 0308 	orr.w	r3, r3, #8
 8004470:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800447a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00b      	beq.n	80044a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	f043 0302 	orr.w	r3, r3, #2
 8004492:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800449c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80044a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01c      	beq.n	80044e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f7ff fe3b 	bl	8004128 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6859      	ldr	r1, [r3, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	4b0d      	ldr	r3, [pc, #52]	@ (80044f4 <I2C_IsErrorOccurred+0x1bc>)
 80044be:	400b      	ands	r3, r1
 80044c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80044e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3728      	adds	r7, #40	@ 0x28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	fe00e800 	.word	0xfe00e800

080044f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	607b      	str	r3, [r7, #4]
 8004502:	460b      	mov	r3, r1
 8004504:	817b      	strh	r3, [r7, #10]
 8004506:	4613      	mov	r3, r2
 8004508:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800450a:	897b      	ldrh	r3, [r7, #10]
 800450c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004510:	7a7b      	ldrb	r3, [r7, #9]
 8004512:	041b      	lsls	r3, r3, #16
 8004514:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004518:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	4313      	orrs	r3, r2
 8004522:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004526:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	0d5b      	lsrs	r3, r3, #21
 8004532:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004536:	4b08      	ldr	r3, [pc, #32]	@ (8004558 <I2C_TransferConfig+0x60>)
 8004538:	430b      	orrs	r3, r1
 800453a:	43db      	mvns	r3, r3
 800453c:	ea02 0103 	and.w	r1, r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800454a:	bf00      	nop
 800454c:	371c      	adds	r7, #28
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	03ff63ff 	.word	0x03ff63ff

0800455c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b20      	cmp	r3, #32
 8004570:	d138      	bne.n	80045e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800457c:	2302      	movs	r3, #2
 800457e:	e032      	b.n	80045e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2224      	movs	r2, #36	@ 0x24
 800458c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0201 	bic.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6819      	ldr	r1, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	e000      	b.n	80045e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045e4:	2302      	movs	r3, #2
  }
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b085      	sub	sp, #20
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b20      	cmp	r3, #32
 8004606:	d139      	bne.n	800467c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004612:	2302      	movs	r3, #2
 8004614:	e033      	b.n	800467e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2224      	movs	r2, #36	@ 0x24
 8004622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0201 	bic.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004644:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	e000      	b.n	800467e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800467c:	2302      	movs	r3, #2
  }
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
	...

0800468c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004694:	4b19      	ldr	r3, [pc, #100]	@ (80046fc <HAL_PWREx_ConfigSupply+0x70>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b04      	cmp	r3, #4
 800469e:	d00a      	beq.n	80046b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80046a0:	4b16      	ldr	r3, [pc, #88]	@ (80046fc <HAL_PWREx_ConfigSupply+0x70>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d001      	beq.n	80046b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e01f      	b.n	80046f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e01d      	b.n	80046f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80046b6:	4b11      	ldr	r3, [pc, #68]	@ (80046fc <HAL_PWREx_ConfigSupply+0x70>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f023 0207 	bic.w	r2, r3, #7
 80046be:	490f      	ldr	r1, [pc, #60]	@ (80046fc <HAL_PWREx_ConfigSupply+0x70>)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80046c6:	f7fd f9e5 	bl	8001a94 <HAL_GetTick>
 80046ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046cc:	e009      	b.n	80046e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046ce:	f7fd f9e1 	bl	8001a94 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046dc:	d901      	bls.n	80046e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e007      	b.n	80046f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046e2:	4b06      	ldr	r3, [pc, #24]	@ (80046fc <HAL_PWREx_ConfigSupply+0x70>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046ee:	d1ee      	bne.n	80046ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	58024800 	.word	0x58024800

08004700 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08c      	sub	sp, #48	@ 0x30
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d102      	bne.n	8004714 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	f000 bc48 	b.w	8004fa4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 8088 	beq.w	8004832 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004722:	4b99      	ldr	r3, [pc, #612]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800472a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800472c:	4b96      	ldr	r3, [pc, #600]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 800472e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004730:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004734:	2b10      	cmp	r3, #16
 8004736:	d007      	beq.n	8004748 <HAL_RCC_OscConfig+0x48>
 8004738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473a:	2b18      	cmp	r3, #24
 800473c:	d111      	bne.n	8004762 <HAL_RCC_OscConfig+0x62>
 800473e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d10c      	bne.n	8004762 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004748:	4b8f      	ldr	r3, [pc, #572]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d06d      	beq.n	8004830 <HAL_RCC_OscConfig+0x130>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d169      	bne.n	8004830 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	f000 bc21 	b.w	8004fa4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800476a:	d106      	bne.n	800477a <HAL_RCC_OscConfig+0x7a>
 800476c:	4b86      	ldr	r3, [pc, #536]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a85      	ldr	r2, [pc, #532]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 8004772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	e02e      	b.n	80047d8 <HAL_RCC_OscConfig+0xd8>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x9c>
 8004782:	4b81      	ldr	r3, [pc, #516]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a80      	ldr	r2, [pc, #512]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 8004788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	4b7e      	ldr	r3, [pc, #504]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a7d      	ldr	r2, [pc, #500]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 8004794:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	e01d      	b.n	80047d8 <HAL_RCC_OscConfig+0xd8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0xc0>
 80047a6:	4b78      	ldr	r3, [pc, #480]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a77      	ldr	r2, [pc, #476]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 80047ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	4b75      	ldr	r3, [pc, #468]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a74      	ldr	r2, [pc, #464]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 80047b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	e00b      	b.n	80047d8 <HAL_RCC_OscConfig+0xd8>
 80047c0:	4b71      	ldr	r3, [pc, #452]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a70      	ldr	r2, [pc, #448]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 80047c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	4b6e      	ldr	r3, [pc, #440]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a6d      	ldr	r2, [pc, #436]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 80047d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d013      	beq.n	8004808 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e0:	f7fd f958 	bl	8001a94 <HAL_GetTick>
 80047e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e8:	f7fd f954 	bl	8001a94 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b64      	cmp	r3, #100	@ 0x64
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e3d4      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047fa:	4b63      	ldr	r3, [pc, #396]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0xe8>
 8004806:	e014      	b.n	8004832 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fd f944 	bl	8001a94 <HAL_GetTick>
 800480c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004810:	f7fd f940 	bl	8001a94 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b64      	cmp	r3, #100	@ 0x64
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e3c0      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004822:	4b59      	ldr	r3, [pc, #356]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x110>
 800482e:	e000      	b.n	8004832 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 80ca 	beq.w	80049d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004840:	4b51      	ldr	r3, [pc, #324]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004848:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800484a:	4b4f      	ldr	r3, [pc, #316]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 800484c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <HAL_RCC_OscConfig+0x166>
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	2b18      	cmp	r3, #24
 800485a:	d156      	bne.n	800490a <HAL_RCC_OscConfig+0x20a>
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d151      	bne.n	800490a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004866:	4b48      	ldr	r3, [pc, #288]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_RCC_OscConfig+0x17e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e392      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800487e:	4b42      	ldr	r3, [pc, #264]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 0219 	bic.w	r2, r3, #25
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	493f      	ldr	r1, [pc, #252]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 800488c:	4313      	orrs	r3, r2
 800488e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fd f900 	bl	8001a94 <HAL_GetTick>
 8004894:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004898:	f7fd f8fc 	bl	8001a94 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e37c      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048aa:	4b37      	ldr	r3, [pc, #220]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b6:	f7fd f91d 	bl	8001af4 <HAL_GetREVID>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d817      	bhi.n	80048f4 <HAL_RCC_OscConfig+0x1f4>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	2b40      	cmp	r3, #64	@ 0x40
 80048ca:	d108      	bne.n	80048de <HAL_RCC_OscConfig+0x1de>
 80048cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80048d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 80048d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048da:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048dc:	e07a      	b.n	80049d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048de:	4b2a      	ldr	r3, [pc, #168]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	031b      	lsls	r3, r3, #12
 80048ec:	4926      	ldr	r1, [pc, #152]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048f2:	e06f      	b.n	80049d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f4:	4b24      	ldr	r3, [pc, #144]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	4921      	ldr	r1, [pc, #132]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 8004904:	4313      	orrs	r3, r2
 8004906:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004908:	e064      	b.n	80049d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d047      	beq.n	80049a2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004912:	4b1d      	ldr	r3, [pc, #116]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f023 0219 	bic.w	r2, r3, #25
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	491a      	ldr	r1, [pc, #104]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 8004920:	4313      	orrs	r3, r2
 8004922:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004924:	f7fd f8b6 	bl	8001a94 <HAL_GetTick>
 8004928:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800492c:	f7fd f8b2 	bl	8001a94 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e332      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800493e:	4b12      	ldr	r3, [pc, #72]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494a:	f7fd f8d3 	bl	8001af4 <HAL_GetREVID>
 800494e:	4603      	mov	r3, r0
 8004950:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004954:	4293      	cmp	r3, r2
 8004956:	d819      	bhi.n	800498c <HAL_RCC_OscConfig+0x28c>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	2b40      	cmp	r3, #64	@ 0x40
 800495e:	d108      	bne.n	8004972 <HAL_RCC_OscConfig+0x272>
 8004960:	4b09      	ldr	r3, [pc, #36]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004968:	4a07      	ldr	r2, [pc, #28]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 800496a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800496e:	6053      	str	r3, [r2, #4]
 8004970:	e030      	b.n	80049d4 <HAL_RCC_OscConfig+0x2d4>
 8004972:	4b05      	ldr	r3, [pc, #20]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	031b      	lsls	r3, r3, #12
 8004980:	4901      	ldr	r1, [pc, #4]	@ (8004988 <HAL_RCC_OscConfig+0x288>)
 8004982:	4313      	orrs	r3, r2
 8004984:	604b      	str	r3, [r1, #4]
 8004986:	e025      	b.n	80049d4 <HAL_RCC_OscConfig+0x2d4>
 8004988:	58024400 	.word	0x58024400
 800498c:	4b9a      	ldr	r3, [pc, #616]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	061b      	lsls	r3, r3, #24
 800499a:	4997      	ldr	r1, [pc, #604]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 800499c:	4313      	orrs	r3, r2
 800499e:	604b      	str	r3, [r1, #4]
 80049a0:	e018      	b.n	80049d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a2:	4b95      	ldr	r3, [pc, #596]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a94      	ldr	r2, [pc, #592]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 80049a8:	f023 0301 	bic.w	r3, r3, #1
 80049ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ae:	f7fd f871 	bl	8001a94 <HAL_GetTick>
 80049b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b6:	f7fd f86d 	bl	8001a94 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e2ed      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049c8:	4b8b      	ldr	r3, [pc, #556]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80a9 	beq.w	8004b34 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049e2:	4b85      	ldr	r3, [pc, #532]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049ec:	4b82      	ldr	r3, [pc, #520]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 80049ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d007      	beq.n	8004a08 <HAL_RCC_OscConfig+0x308>
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b18      	cmp	r3, #24
 80049fc:	d13a      	bne.n	8004a74 <HAL_RCC_OscConfig+0x374>
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d135      	bne.n	8004a74 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a08:	4b7b      	ldr	r3, [pc, #492]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <HAL_RCC_OscConfig+0x320>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	2b80      	cmp	r3, #128	@ 0x80
 8004a1a:	d001      	beq.n	8004a20 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e2c1      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a20:	f7fd f868 	bl	8001af4 <HAL_GetREVID>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d817      	bhi.n	8004a5e <HAL_RCC_OscConfig+0x35e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d108      	bne.n	8004a48 <HAL_RCC_OscConfig+0x348>
 8004a36:	4b70      	ldr	r3, [pc, #448]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004a3e:	4a6e      	ldr	r2, [pc, #440]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004a40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a44:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a46:	e075      	b.n	8004b34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a48:	4b6b      	ldr	r3, [pc, #428]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	069b      	lsls	r3, r3, #26
 8004a56:	4968      	ldr	r1, [pc, #416]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a5c:	e06a      	b.n	8004b34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a5e:	4b66      	ldr	r3, [pc, #408]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	061b      	lsls	r3, r3, #24
 8004a6c:	4962      	ldr	r1, [pc, #392]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a72:	e05f      	b.n	8004b34 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d042      	beq.n	8004b02 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004a7c:	4b5e      	ldr	r3, [pc, #376]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a5d      	ldr	r2, [pc, #372]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7fd f804 	bl	8001a94 <HAL_GetTick>
 8004a8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a90:	f7fd f800 	bl	8001a94 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e280      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004aa2:	4b55      	ldr	r3, [pc, #340]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f0      	beq.n	8004a90 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004aae:	f7fd f821 	bl	8001af4 <HAL_GetREVID>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d817      	bhi.n	8004aec <HAL_RCC_OscConfig+0x3ec>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	d108      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x3d6>
 8004ac4:	4b4c      	ldr	r3, [pc, #304]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004acc:	4a4a      	ldr	r2, [pc, #296]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004ace:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ad2:	6053      	str	r3, [r2, #4]
 8004ad4:	e02e      	b.n	8004b34 <HAL_RCC_OscConfig+0x434>
 8004ad6:	4b48      	ldr	r3, [pc, #288]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	069b      	lsls	r3, r3, #26
 8004ae4:	4944      	ldr	r1, [pc, #272]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	604b      	str	r3, [r1, #4]
 8004aea:	e023      	b.n	8004b34 <HAL_RCC_OscConfig+0x434>
 8004aec:	4b42      	ldr	r3, [pc, #264]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	061b      	lsls	r3, r3, #24
 8004afa:	493f      	ldr	r1, [pc, #252]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60cb      	str	r3, [r1, #12]
 8004b00:	e018      	b.n	8004b34 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004b02:	4b3d      	ldr	r3, [pc, #244]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a3c      	ldr	r2, [pc, #240]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004b08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0e:	f7fc ffc1 	bl	8001a94 <HAL_GetTick>
 8004b12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b16:	f7fc ffbd 	bl	8001a94 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e23d      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b28:	4b33      	ldr	r3, [pc, #204]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f0      	bne.n	8004b16 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d036      	beq.n	8004bae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d019      	beq.n	8004b7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b48:	4b2b      	ldr	r3, [pc, #172]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004b4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b54:	f7fc ff9e 	bl	8001a94 <HAL_GetTick>
 8004b58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b5c:	f7fc ff9a 	bl	8001a94 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e21a      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b6e:	4b22      	ldr	r3, [pc, #136]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0x45c>
 8004b7a:	e018      	b.n	8004bae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b80:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004b82:	f023 0301 	bic.w	r3, r3, #1
 8004b86:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b88:	f7fc ff84 	bl	8001a94 <HAL_GetTick>
 8004b8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b90:	f7fc ff80 	bl	8001a94 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e200      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ba2:	4b15      	ldr	r3, [pc, #84]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f0      	bne.n	8004b90 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d039      	beq.n	8004c2e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d01c      	beq.n	8004bfc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004bc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004bcc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004bce:	f7fc ff61 	bl	8001a94 <HAL_GetTick>
 8004bd2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004bd4:	e008      	b.n	8004be8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bd6:	f7fc ff5d 	bl	8001a94 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e1dd      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004be8:	4b03      	ldr	r3, [pc, #12]	@ (8004bf8 <HAL_RCC_OscConfig+0x4f8>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0f0      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x4d6>
 8004bf4:	e01b      	b.n	8004c2e <HAL_RCC_OscConfig+0x52e>
 8004bf6:	bf00      	nop
 8004bf8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bfc:	4b9b      	ldr	r3, [pc, #620]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a9a      	ldr	r2, [pc, #616]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004c02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c08:	f7fc ff44 	bl	8001a94 <HAL_GetTick>
 8004c0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c10:	f7fc ff40 	bl	8001a94 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e1c0      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c22:	4b92      	ldr	r3, [pc, #584]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8081 	beq.w	8004d3e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c3c:	4b8c      	ldr	r3, [pc, #560]	@ (8004e70 <HAL_RCC_OscConfig+0x770>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a8b      	ldr	r2, [pc, #556]	@ (8004e70 <HAL_RCC_OscConfig+0x770>)
 8004c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c48:	f7fc ff24 	bl	8001a94 <HAL_GetTick>
 8004c4c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c50:	f7fc ff20 	bl	8001a94 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b64      	cmp	r3, #100	@ 0x64
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e1a0      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c62:	4b83      	ldr	r3, [pc, #524]	@ (8004e70 <HAL_RCC_OscConfig+0x770>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d106      	bne.n	8004c84 <HAL_RCC_OscConfig+0x584>
 8004c76:	4b7d      	ldr	r3, [pc, #500]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7a:	4a7c      	ldr	r2, [pc, #496]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004c7c:	f043 0301 	orr.w	r3, r3, #1
 8004c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c82:	e02d      	b.n	8004ce0 <HAL_RCC_OscConfig+0x5e0>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10c      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x5a6>
 8004c8c:	4b77      	ldr	r3, [pc, #476]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c90:	4a76      	ldr	r2, [pc, #472]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004c92:	f023 0301 	bic.w	r3, r3, #1
 8004c96:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c98:	4b74      	ldr	r3, [pc, #464]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c9c:	4a73      	ldr	r2, [pc, #460]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004c9e:	f023 0304 	bic.w	r3, r3, #4
 8004ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ca4:	e01c      	b.n	8004ce0 <HAL_RCC_OscConfig+0x5e0>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b05      	cmp	r3, #5
 8004cac:	d10c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x5c8>
 8004cae:	4b6f      	ldr	r3, [pc, #444]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb2:	4a6e      	ldr	r2, [pc, #440]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004cb4:	f043 0304 	orr.w	r3, r3, #4
 8004cb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cba:	4b6c      	ldr	r3, [pc, #432]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cbe:	4a6b      	ldr	r2, [pc, #428]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004cc0:	f043 0301 	orr.w	r3, r3, #1
 8004cc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cc6:	e00b      	b.n	8004ce0 <HAL_RCC_OscConfig+0x5e0>
 8004cc8:	4b68      	ldr	r3, [pc, #416]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ccc:	4a67      	ldr	r2, [pc, #412]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004cce:	f023 0301 	bic.w	r3, r3, #1
 8004cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cd4:	4b65      	ldr	r3, [pc, #404]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd8:	4a64      	ldr	r2, [pc, #400]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004cda:	f023 0304 	bic.w	r3, r3, #4
 8004cde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d015      	beq.n	8004d14 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce8:	f7fc fed4 	bl	8001a94 <HAL_GetTick>
 8004cec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cee:	e00a      	b.n	8004d06 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf0:	f7fc fed0 	bl	8001a94 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e14e      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d06:	4b59      	ldr	r3, [pc, #356]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0ee      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x5f0>
 8004d12:	e014      	b.n	8004d3e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fc febe 	bl	8001a94 <HAL_GetTick>
 8004d18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d1c:	f7fc feba 	bl	8001a94 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e138      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d32:	4b4e      	ldr	r3, [pc, #312]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1ee      	bne.n	8004d1c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 812d 	beq.w	8004fa2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004d48:	4b48      	ldr	r3, [pc, #288]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d50:	2b18      	cmp	r3, #24
 8004d52:	f000 80bd 	beq.w	8004ed0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	f040 809e 	bne.w	8004e9c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d60:	4b42      	ldr	r3, [pc, #264]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a41      	ldr	r2, [pc, #260]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004d66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7fc fe92 	bl	8001a94 <HAL_GetTick>
 8004d70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d74:	f7fc fe8e 	bl	8001a94 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e10e      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d86:	4b39      	ldr	r3, [pc, #228]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d92:	4b36      	ldr	r3, [pc, #216]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004d94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d96:	4b37      	ldr	r3, [pc, #220]	@ (8004e74 <HAL_RCC_OscConfig+0x774>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004da2:	0112      	lsls	r2, r2, #4
 8004da4:	430a      	orrs	r2, r1
 8004da6:	4931      	ldr	r1, [pc, #196]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	628b      	str	r3, [r1, #40]	@ 0x28
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db0:	3b01      	subs	r3, #1
 8004db2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	025b      	lsls	r3, r3, #9
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	041b      	lsls	r3, r3, #16
 8004dca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	061b      	lsls	r3, r3, #24
 8004dd8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ddc:	4923      	ldr	r1, [pc, #140]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004de2:	4b22      	ldr	r3, [pc, #136]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de6:	4a21      	ldr	r2, [pc, #132]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004de8:	f023 0301 	bic.w	r3, r3, #1
 8004dec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004dee:	4b1f      	ldr	r3, [pc, #124]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004df2:	4b21      	ldr	r3, [pc, #132]	@ (8004e78 <HAL_RCC_OscConfig+0x778>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004dfa:	00d2      	lsls	r2, r2, #3
 8004dfc:	491b      	ldr	r1, [pc, #108]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004e02:	4b1a      	ldr	r3, [pc, #104]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e06:	f023 020c 	bic.w	r2, r3, #12
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0e:	4917      	ldr	r1, [pc, #92]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004e14:	4b15      	ldr	r3, [pc, #84]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e18:	f023 0202 	bic.w	r2, r3, #2
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e20:	4912      	ldr	r1, [pc, #72]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e26:	4b11      	ldr	r3, [pc, #68]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2a:	4a10      	ldr	r2, [pc, #64]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e32:	4b0e      	ldr	r3, [pc, #56]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e36:	4a0d      	ldr	r2, [pc, #52]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e42:	4a0a      	ldr	r2, [pc, #40]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004e44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004e4a:	4b08      	ldr	r3, [pc, #32]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4e:	4a07      	ldr	r2, [pc, #28]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004e50:	f043 0301 	orr.w	r3, r3, #1
 8004e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e56:	4b05      	ldr	r3, [pc, #20]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a04      	ldr	r2, [pc, #16]	@ (8004e6c <HAL_RCC_OscConfig+0x76c>)
 8004e5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e62:	f7fc fe17 	bl	8001a94 <HAL_GetTick>
 8004e66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e68:	e011      	b.n	8004e8e <HAL_RCC_OscConfig+0x78e>
 8004e6a:	bf00      	nop
 8004e6c:	58024400 	.word	0x58024400
 8004e70:	58024800 	.word	0x58024800
 8004e74:	fffffc0c 	.word	0xfffffc0c
 8004e78:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7c:	f7fc fe0a 	bl	8001a94 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e08a      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e8e:	4b47      	ldr	r3, [pc, #284]	@ (8004fac <HAL_RCC_OscConfig+0x8ac>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f0      	beq.n	8004e7c <HAL_RCC_OscConfig+0x77c>
 8004e9a:	e082      	b.n	8004fa2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e9c:	4b43      	ldr	r3, [pc, #268]	@ (8004fac <HAL_RCC_OscConfig+0x8ac>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a42      	ldr	r2, [pc, #264]	@ (8004fac <HAL_RCC_OscConfig+0x8ac>)
 8004ea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea8:	f7fc fdf4 	bl	8001a94 <HAL_GetTick>
 8004eac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb0:	f7fc fdf0 	bl	8001a94 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e070      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ec2:	4b3a      	ldr	r3, [pc, #232]	@ (8004fac <HAL_RCC_OscConfig+0x8ac>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f0      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x7b0>
 8004ece:	e068      	b.n	8004fa2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ed0:	4b36      	ldr	r3, [pc, #216]	@ (8004fac <HAL_RCC_OscConfig+0x8ac>)
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ed6:	4b35      	ldr	r3, [pc, #212]	@ (8004fac <HAL_RCC_OscConfig+0x8ac>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eda:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d031      	beq.n	8004f48 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f003 0203 	and.w	r2, r3, #3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d12a      	bne.n	8004f48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	091b      	lsrs	r3, r3, #4
 8004ef6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d122      	bne.n	8004f48 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d11a      	bne.n	8004f48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	0a5b      	lsrs	r3, r3, #9
 8004f16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d111      	bne.n	8004f48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	0c1b      	lsrs	r3, r3, #16
 8004f28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f30:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d108      	bne.n	8004f48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	0e1b      	lsrs	r3, r3, #24
 8004f3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f42:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d001      	beq.n	8004f4c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e02b      	b.n	8004fa4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004f4c:	4b17      	ldr	r3, [pc, #92]	@ (8004fac <HAL_RCC_OscConfig+0x8ac>)
 8004f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f50:	08db      	lsrs	r3, r3, #3
 8004f52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f56:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d01f      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004f62:	4b12      	ldr	r3, [pc, #72]	@ (8004fac <HAL_RCC_OscConfig+0x8ac>)
 8004f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f66:	4a11      	ldr	r2, [pc, #68]	@ (8004fac <HAL_RCC_OscConfig+0x8ac>)
 8004f68:	f023 0301 	bic.w	r3, r3, #1
 8004f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f6e:	f7fc fd91 	bl	8001a94 <HAL_GetTick>
 8004f72:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004f74:	bf00      	nop
 8004f76:	f7fc fd8d 	bl	8001a94 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d0f9      	beq.n	8004f76 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f82:	4b0a      	ldr	r3, [pc, #40]	@ (8004fac <HAL_RCC_OscConfig+0x8ac>)
 8004f84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f86:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb0 <HAL_RCC_OscConfig+0x8b0>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f8e:	00d2      	lsls	r2, r2, #3
 8004f90:	4906      	ldr	r1, [pc, #24]	@ (8004fac <HAL_RCC_OscConfig+0x8ac>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004f96:	4b05      	ldr	r3, [pc, #20]	@ (8004fac <HAL_RCC_OscConfig+0x8ac>)
 8004f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9a:	4a04      	ldr	r2, [pc, #16]	@ (8004fac <HAL_RCC_OscConfig+0x8ac>)
 8004f9c:	f043 0301 	orr.w	r3, r3, #1
 8004fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3730      	adds	r7, #48	@ 0x30
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	58024400 	.word	0x58024400
 8004fb0:	ffff0007 	.word	0xffff0007

08004fb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e19c      	b.n	8005302 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc8:	4b8a      	ldr	r3, [pc, #552]	@ (80051f4 <HAL_RCC_ClockConfig+0x240>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d910      	bls.n	8004ff8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd6:	4b87      	ldr	r3, [pc, #540]	@ (80051f4 <HAL_RCC_ClockConfig+0x240>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f023 020f 	bic.w	r2, r3, #15
 8004fde:	4985      	ldr	r1, [pc, #532]	@ (80051f4 <HAL_RCC_ClockConfig+0x240>)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	4b83      	ldr	r3, [pc, #524]	@ (80051f4 <HAL_RCC_ClockConfig+0x240>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e184      	b.n	8005302 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	d010      	beq.n	8005026 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	4b7b      	ldr	r3, [pc, #492]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005010:	429a      	cmp	r2, r3
 8005012:	d908      	bls.n	8005026 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005014:	4b78      	ldr	r3, [pc, #480]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	4975      	ldr	r1, [pc, #468]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 8005022:	4313      	orrs	r3, r2
 8005024:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d010      	beq.n	8005054 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695a      	ldr	r2, [r3, #20]
 8005036:	4b70      	ldr	r3, [pc, #448]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800503e:	429a      	cmp	r2, r3
 8005040:	d908      	bls.n	8005054 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005042:	4b6d      	ldr	r3, [pc, #436]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	496a      	ldr	r1, [pc, #424]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 8005050:	4313      	orrs	r3, r2
 8005052:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	2b00      	cmp	r3, #0
 800505e:	d010      	beq.n	8005082 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699a      	ldr	r2, [r3, #24]
 8005064:	4b64      	ldr	r3, [pc, #400]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800506c:	429a      	cmp	r2, r3
 800506e:	d908      	bls.n	8005082 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005070:	4b61      	ldr	r3, [pc, #388]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	495e      	ldr	r1, [pc, #376]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 800507e:	4313      	orrs	r3, r2
 8005080:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d010      	beq.n	80050b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69da      	ldr	r2, [r3, #28]
 8005092:	4b59      	ldr	r3, [pc, #356]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800509a:	429a      	cmp	r2, r3
 800509c:	d908      	bls.n	80050b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800509e:	4b56      	ldr	r3, [pc, #344]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	4953      	ldr	r1, [pc, #332]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d010      	beq.n	80050de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	4b4d      	ldr	r3, [pc, #308]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	f003 030f 	and.w	r3, r3, #15
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d908      	bls.n	80050de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050cc:	4b4a      	ldr	r3, [pc, #296]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	f023 020f 	bic.w	r2, r3, #15
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	4947      	ldr	r1, [pc, #284]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d055      	beq.n	8005196 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80050ea:	4b43      	ldr	r3, [pc, #268]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	4940      	ldr	r1, [pc, #256]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d107      	bne.n	8005114 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005104:	4b3c      	ldr	r3, [pc, #240]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d121      	bne.n	8005154 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e0f6      	b.n	8005302 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b03      	cmp	r3, #3
 800511a:	d107      	bne.n	800512c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800511c:	4b36      	ldr	r3, [pc, #216]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d115      	bne.n	8005154 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e0ea      	b.n	8005302 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d107      	bne.n	8005144 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005134:	4b30      	ldr	r3, [pc, #192]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800513c:	2b00      	cmp	r3, #0
 800513e:	d109      	bne.n	8005154 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0de      	b.n	8005302 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005144:	4b2c      	ldr	r3, [pc, #176]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e0d6      	b.n	8005302 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005154:	4b28      	ldr	r3, [pc, #160]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f023 0207 	bic.w	r2, r3, #7
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	4925      	ldr	r1, [pc, #148]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 8005162:	4313      	orrs	r3, r2
 8005164:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005166:	f7fc fc95 	bl	8001a94 <HAL_GetTick>
 800516a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516c:	e00a      	b.n	8005184 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800516e:	f7fc fc91 	bl	8001a94 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800517c:	4293      	cmp	r3, r2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e0be      	b.n	8005302 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005184:	4b1c      	ldr	r3, [pc, #112]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	429a      	cmp	r2, r3
 8005194:	d1eb      	bne.n	800516e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d010      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	4b14      	ldr	r3, [pc, #80]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d208      	bcs.n	80051c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b2:	4b11      	ldr	r3, [pc, #68]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f023 020f 	bic.w	r2, r3, #15
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	490e      	ldr	r1, [pc, #56]	@ (80051f8 <HAL_RCC_ClockConfig+0x244>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051c4:	4b0b      	ldr	r3, [pc, #44]	@ (80051f4 <HAL_RCC_ClockConfig+0x240>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d214      	bcs.n	80051fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d2:	4b08      	ldr	r3, [pc, #32]	@ (80051f4 <HAL_RCC_ClockConfig+0x240>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f023 020f 	bic.w	r2, r3, #15
 80051da:	4906      	ldr	r1, [pc, #24]	@ (80051f4 <HAL_RCC_ClockConfig+0x240>)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	4313      	orrs	r3, r2
 80051e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e2:	4b04      	ldr	r3, [pc, #16]	@ (80051f4 <HAL_RCC_ClockConfig+0x240>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d005      	beq.n	80051fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e086      	b.n	8005302 <HAL_RCC_ClockConfig+0x34e>
 80051f4:	52002000 	.word	0x52002000
 80051f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d010      	beq.n	800522a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	4b3f      	ldr	r3, [pc, #252]	@ (800530c <HAL_RCC_ClockConfig+0x358>)
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005214:	429a      	cmp	r2, r3
 8005216:	d208      	bcs.n	800522a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005218:	4b3c      	ldr	r3, [pc, #240]	@ (800530c <HAL_RCC_ClockConfig+0x358>)
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	4939      	ldr	r1, [pc, #228]	@ (800530c <HAL_RCC_ClockConfig+0x358>)
 8005226:	4313      	orrs	r3, r2
 8005228:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d010      	beq.n	8005258 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695a      	ldr	r2, [r3, #20]
 800523a:	4b34      	ldr	r3, [pc, #208]	@ (800530c <HAL_RCC_ClockConfig+0x358>)
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005242:	429a      	cmp	r2, r3
 8005244:	d208      	bcs.n	8005258 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005246:	4b31      	ldr	r3, [pc, #196]	@ (800530c <HAL_RCC_ClockConfig+0x358>)
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	492e      	ldr	r1, [pc, #184]	@ (800530c <HAL_RCC_ClockConfig+0x358>)
 8005254:	4313      	orrs	r3, r2
 8005256:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	2b00      	cmp	r3, #0
 8005262:	d010      	beq.n	8005286 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699a      	ldr	r2, [r3, #24]
 8005268:	4b28      	ldr	r3, [pc, #160]	@ (800530c <HAL_RCC_ClockConfig+0x358>)
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005270:	429a      	cmp	r2, r3
 8005272:	d208      	bcs.n	8005286 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005274:	4b25      	ldr	r3, [pc, #148]	@ (800530c <HAL_RCC_ClockConfig+0x358>)
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	4922      	ldr	r1, [pc, #136]	@ (800530c <HAL_RCC_ClockConfig+0x358>)
 8005282:	4313      	orrs	r3, r2
 8005284:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d010      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69da      	ldr	r2, [r3, #28]
 8005296:	4b1d      	ldr	r3, [pc, #116]	@ (800530c <HAL_RCC_ClockConfig+0x358>)
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800529e:	429a      	cmp	r2, r3
 80052a0:	d208      	bcs.n	80052b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80052a2:	4b1a      	ldr	r3, [pc, #104]	@ (800530c <HAL_RCC_ClockConfig+0x358>)
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	4917      	ldr	r1, [pc, #92]	@ (800530c <HAL_RCC_ClockConfig+0x358>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80052b4:	f000 f834 	bl	8005320 <HAL_RCC_GetSysClockFreq>
 80052b8:	4602      	mov	r2, r0
 80052ba:	4b14      	ldr	r3, [pc, #80]	@ (800530c <HAL_RCC_ClockConfig+0x358>)
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	0a1b      	lsrs	r3, r3, #8
 80052c0:	f003 030f 	and.w	r3, r3, #15
 80052c4:	4912      	ldr	r1, [pc, #72]	@ (8005310 <HAL_RCC_ClockConfig+0x35c>)
 80052c6:	5ccb      	ldrb	r3, [r1, r3]
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	fa22 f303 	lsr.w	r3, r2, r3
 80052d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052d2:	4b0e      	ldr	r3, [pc, #56]	@ (800530c <HAL_RCC_ClockConfig+0x358>)
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	4a0d      	ldr	r2, [pc, #52]	@ (8005310 <HAL_RCC_ClockConfig+0x35c>)
 80052dc:	5cd3      	ldrb	r3, [r2, r3]
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	fa22 f303 	lsr.w	r3, r2, r3
 80052e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005314 <HAL_RCC_ClockConfig+0x360>)
 80052ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005318 <HAL_RCC_ClockConfig+0x364>)
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80052f2:	4b0a      	ldr	r3, [pc, #40]	@ (800531c <HAL_RCC_ClockConfig+0x368>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fb ff98 	bl	800122c <HAL_InitTick>
 80052fc:	4603      	mov	r3, r0
 80052fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005300:	7bfb      	ldrb	r3, [r7, #15]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	58024400 	.word	0x58024400
 8005310:	0801201c 	.word	0x0801201c
 8005314:	24000004 	.word	0x24000004
 8005318:	24000000 	.word	0x24000000
 800531c:	24000008 	.word	0x24000008

08005320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005320:	b480      	push	{r7}
 8005322:	b089      	sub	sp, #36	@ 0x24
 8005324:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005326:	4bb3      	ldr	r3, [pc, #716]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800532e:	2b18      	cmp	r3, #24
 8005330:	f200 8155 	bhi.w	80055de <HAL_RCC_GetSysClockFreq+0x2be>
 8005334:	a201      	add	r2, pc, #4	@ (adr r2, 800533c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	080053a1 	.word	0x080053a1
 8005340:	080055df 	.word	0x080055df
 8005344:	080055df 	.word	0x080055df
 8005348:	080055df 	.word	0x080055df
 800534c:	080055df 	.word	0x080055df
 8005350:	080055df 	.word	0x080055df
 8005354:	080055df 	.word	0x080055df
 8005358:	080055df 	.word	0x080055df
 800535c:	080053c7 	.word	0x080053c7
 8005360:	080055df 	.word	0x080055df
 8005364:	080055df 	.word	0x080055df
 8005368:	080055df 	.word	0x080055df
 800536c:	080055df 	.word	0x080055df
 8005370:	080055df 	.word	0x080055df
 8005374:	080055df 	.word	0x080055df
 8005378:	080055df 	.word	0x080055df
 800537c:	080053cd 	.word	0x080053cd
 8005380:	080055df 	.word	0x080055df
 8005384:	080055df 	.word	0x080055df
 8005388:	080055df 	.word	0x080055df
 800538c:	080055df 	.word	0x080055df
 8005390:	080055df 	.word	0x080055df
 8005394:	080055df 	.word	0x080055df
 8005398:	080055df 	.word	0x080055df
 800539c:	080053d3 	.word	0x080053d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053a0:	4b94      	ldr	r3, [pc, #592]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d009      	beq.n	80053c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053ac:	4b91      	ldr	r3, [pc, #580]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	08db      	lsrs	r3, r3, #3
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	4a90      	ldr	r2, [pc, #576]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
 80053bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80053be:	e111      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80053c0:	4b8d      	ldr	r3, [pc, #564]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053c2:	61bb      	str	r3, [r7, #24]
      break;
 80053c4:	e10e      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80053c6:	4b8d      	ldr	r3, [pc, #564]	@ (80055fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053c8:	61bb      	str	r3, [r7, #24]
      break;
 80053ca:	e10b      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80053cc:	4b8c      	ldr	r3, [pc, #560]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80053ce:	61bb      	str	r3, [r7, #24]
      break;
 80053d0:	e108      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053d2:	4b88      	ldr	r3, [pc, #544]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80053dc:	4b85      	ldr	r3, [pc, #532]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e0:	091b      	lsrs	r3, r3, #4
 80053e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80053e8:	4b82      	ldr	r3, [pc, #520]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80053f2:	4b80      	ldr	r3, [pc, #512]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f6:	08db      	lsrs	r3, r3, #3
 80053f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	fb02 f303 	mul.w	r3, r2, r3
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 80e1 	beq.w	80055d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2b02      	cmp	r3, #2
 800541a:	f000 8083 	beq.w	8005524 <HAL_RCC_GetSysClockFreq+0x204>
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b02      	cmp	r3, #2
 8005422:	f200 80a1 	bhi.w	8005568 <HAL_RCC_GetSysClockFreq+0x248>
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <HAL_RCC_GetSysClockFreq+0x114>
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d056      	beq.n	80054e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005432:	e099      	b.n	8005568 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005434:	4b6f      	ldr	r3, [pc, #444]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b00      	cmp	r3, #0
 800543e:	d02d      	beq.n	800549c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005440:	4b6c      	ldr	r3, [pc, #432]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	08db      	lsrs	r3, r3, #3
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	4a6b      	ldr	r2, [pc, #428]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800544c:	fa22 f303 	lsr.w	r3, r2, r3
 8005450:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	ee07 3a90 	vmov	s15, r3
 8005458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800546a:	4b62      	ldr	r3, [pc, #392]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800546c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800547a:	ed97 6a02 	vldr	s12, [r7, #8]
 800547e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005604 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800548a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800548e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005496:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800549a:	e087      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005608 <HAL_RCC_GetSysClockFreq+0x2e8>
 80054aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ae:	4b51      	ldr	r3, [pc, #324]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054be:	ed97 6a02 	vldr	s12, [r7, #8]
 80054c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005604 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054de:	e065      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	ee07 3a90 	vmov	s15, r3
 80054e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800560c <HAL_RCC_GetSysClockFreq+0x2ec>
 80054ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054f2:	4b40      	ldr	r3, [pc, #256]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005502:	ed97 6a02 	vldr	s12, [r7, #8]
 8005506:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005604 <HAL_RCC_GetSysClockFreq+0x2e4>
 800550a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800550e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800551a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005522:	e043      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	ee07 3a90 	vmov	s15, r3
 800552a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005610 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005536:	4b2f      	ldr	r3, [pc, #188]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800553e:	ee07 3a90 	vmov	s15, r3
 8005542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005546:	ed97 6a02 	vldr	s12, [r7, #8]
 800554a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005604 <HAL_RCC_GetSysClockFreq+0x2e4>
 800554e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005556:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800555a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800555e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005562:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005566:	e021      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005572:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800560c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800557a:	4b1e      	ldr	r3, [pc, #120]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800557c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005582:	ee07 3a90 	vmov	s15, r3
 8005586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800558a:	ed97 6a02 	vldr	s12, [r7, #8]
 800558e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005604 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800559a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800559e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80055ac:	4b11      	ldr	r3, [pc, #68]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b0:	0a5b      	lsrs	r3, r3, #9
 80055b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055b6:	3301      	adds	r3, #1
 80055b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	ee07 3a90 	vmov	s15, r3
 80055c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80055c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055d0:	ee17 3a90 	vmov	r3, s15
 80055d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80055d6:	e005      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	61bb      	str	r3, [r7, #24]
      break;
 80055dc:	e002      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80055de:	4b07      	ldr	r3, [pc, #28]	@ (80055fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80055e0:	61bb      	str	r3, [r7, #24]
      break;
 80055e2:	bf00      	nop
  }

  return sysclockfreq;
 80055e4:	69bb      	ldr	r3, [r7, #24]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3724      	adds	r7, #36	@ 0x24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	58024400 	.word	0x58024400
 80055f8:	03d09000 	.word	0x03d09000
 80055fc:	003d0900 	.word	0x003d0900
 8005600:	017d7840 	.word	0x017d7840
 8005604:	46000000 	.word	0x46000000
 8005608:	4c742400 	.word	0x4c742400
 800560c:	4a742400 	.word	0x4a742400
 8005610:	4bbebc20 	.word	0x4bbebc20

08005614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800561a:	f7ff fe81 	bl	8005320 <HAL_RCC_GetSysClockFreq>
 800561e:	4602      	mov	r2, r0
 8005620:	4b10      	ldr	r3, [pc, #64]	@ (8005664 <HAL_RCC_GetHCLKFreq+0x50>)
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	0a1b      	lsrs	r3, r3, #8
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	490f      	ldr	r1, [pc, #60]	@ (8005668 <HAL_RCC_GetHCLKFreq+0x54>)
 800562c:	5ccb      	ldrb	r3, [r1, r3]
 800562e:	f003 031f 	and.w	r3, r3, #31
 8005632:	fa22 f303 	lsr.w	r3, r2, r3
 8005636:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005638:	4b0a      	ldr	r3, [pc, #40]	@ (8005664 <HAL_RCC_GetHCLKFreq+0x50>)
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	f003 030f 	and.w	r3, r3, #15
 8005640:	4a09      	ldr	r2, [pc, #36]	@ (8005668 <HAL_RCC_GetHCLKFreq+0x54>)
 8005642:	5cd3      	ldrb	r3, [r2, r3]
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	fa22 f303 	lsr.w	r3, r2, r3
 800564e:	4a07      	ldr	r2, [pc, #28]	@ (800566c <HAL_RCC_GetHCLKFreq+0x58>)
 8005650:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005652:	4a07      	ldr	r2, [pc, #28]	@ (8005670 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005658:	4b04      	ldr	r3, [pc, #16]	@ (800566c <HAL_RCC_GetHCLKFreq+0x58>)
 800565a:	681b      	ldr	r3, [r3, #0]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	58024400 	.word	0x58024400
 8005668:	0801201c 	.word	0x0801201c
 800566c:	24000004 	.word	0x24000004
 8005670:	24000000 	.word	0x24000000

08005674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005678:	f7ff ffcc 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 800567c:	4602      	mov	r2, r0
 800567e:	4b06      	ldr	r3, [pc, #24]	@ (8005698 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	091b      	lsrs	r3, r3, #4
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	4904      	ldr	r1, [pc, #16]	@ (800569c <HAL_RCC_GetPCLK1Freq+0x28>)
 800568a:	5ccb      	ldrb	r3, [r1, r3]
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005694:	4618      	mov	r0, r3
 8005696:	bd80      	pop	{r7, pc}
 8005698:	58024400 	.word	0x58024400
 800569c:	0801201c 	.word	0x0801201c

080056a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	223f      	movs	r2, #63	@ 0x3f
 80056ae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80056b0:	4b1a      	ldr	r3, [pc, #104]	@ (800571c <HAL_RCC_GetClockConfig+0x7c>)
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f003 0207 	and.w	r2, r3, #7
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80056bc:	4b17      	ldr	r3, [pc, #92]	@ (800571c <HAL_RCC_GetClockConfig+0x7c>)
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80056c8:	4b14      	ldr	r3, [pc, #80]	@ (800571c <HAL_RCC_GetClockConfig+0x7c>)
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	f003 020f 	and.w	r2, r3, #15
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80056d4:	4b11      	ldr	r3, [pc, #68]	@ (800571c <HAL_RCC_GetClockConfig+0x7c>)
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80056e0:	4b0e      	ldr	r3, [pc, #56]	@ (800571c <HAL_RCC_GetClockConfig+0x7c>)
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80056ec:	4b0b      	ldr	r3, [pc, #44]	@ (800571c <HAL_RCC_GetClockConfig+0x7c>)
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80056f8:	4b08      	ldr	r3, [pc, #32]	@ (800571c <HAL_RCC_GetClockConfig+0x7c>)
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005704:	4b06      	ldr	r3, [pc, #24]	@ (8005720 <HAL_RCC_GetClockConfig+0x80>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 020f 	and.w	r2, r3, #15
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	601a      	str	r2, [r3, #0]
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	58024400 	.word	0x58024400
 8005720:	52002000 	.word	0x52002000

08005724 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005728:	b0ca      	sub	sp, #296	@ 0x128
 800572a:	af00      	add	r7, sp, #0
 800572c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005730:	2300      	movs	r3, #0
 8005732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005736:	2300      	movs	r3, #0
 8005738:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800573c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005744:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005748:	2500      	movs	r5, #0
 800574a:	ea54 0305 	orrs.w	r3, r4, r5
 800574e:	d049      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005754:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005756:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800575a:	d02f      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800575c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005760:	d828      	bhi.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005762:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005766:	d01a      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005768:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800576c:	d822      	bhi.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005776:	d007      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005778:	e01c      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800577a:	4bb8      	ldr	r3, [pc, #736]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800577c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577e:	4ab7      	ldr	r2, [pc, #732]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005784:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005786:	e01a      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578c:	3308      	adds	r3, #8
 800578e:	2102      	movs	r1, #2
 8005790:	4618      	mov	r0, r3
 8005792:	f002 fb61 	bl	8007e58 <RCCEx_PLL2_Config>
 8005796:	4603      	mov	r3, r0
 8005798:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800579c:	e00f      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800579e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a2:	3328      	adds	r3, #40	@ 0x28
 80057a4:	2102      	movs	r1, #2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f002 fc08 	bl	8007fbc <RCCEx_PLL3_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80057b2:	e004      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057ba:	e000      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80057bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10a      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80057c6:	4ba5      	ldr	r3, [pc, #660]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80057ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057d4:	4aa1      	ldr	r2, [pc, #644]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057d6:	430b      	orrs	r3, r1
 80057d8:	6513      	str	r3, [r2, #80]	@ 0x50
 80057da:	e003      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80057f0:	f04f 0900 	mov.w	r9, #0
 80057f4:	ea58 0309 	orrs.w	r3, r8, r9
 80057f8:	d047      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80057fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005800:	2b04      	cmp	r3, #4
 8005802:	d82a      	bhi.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005804:	a201      	add	r2, pc, #4	@ (adr r2, 800580c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580a:	bf00      	nop
 800580c:	08005821 	.word	0x08005821
 8005810:	0800582f 	.word	0x0800582f
 8005814:	08005845 	.word	0x08005845
 8005818:	08005863 	.word	0x08005863
 800581c:	08005863 	.word	0x08005863
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005820:	4b8e      	ldr	r3, [pc, #568]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005824:	4a8d      	ldr	r2, [pc, #564]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800582a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800582c:	e01a      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800582e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005832:	3308      	adds	r3, #8
 8005834:	2100      	movs	r1, #0
 8005836:	4618      	mov	r0, r3
 8005838:	f002 fb0e 	bl	8007e58 <RCCEx_PLL2_Config>
 800583c:	4603      	mov	r3, r0
 800583e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005842:	e00f      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005848:	3328      	adds	r3, #40	@ 0x28
 800584a:	2100      	movs	r1, #0
 800584c:	4618      	mov	r0, r3
 800584e:	f002 fbb5 	bl	8007fbc <RCCEx_PLL3_Config>
 8005852:	4603      	mov	r3, r0
 8005854:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005858:	e004      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005860:	e000      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005862:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005864:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800586c:	4b7b      	ldr	r3, [pc, #492]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800586e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005870:	f023 0107 	bic.w	r1, r3, #7
 8005874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587a:	4a78      	ldr	r2, [pc, #480]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800587c:	430b      	orrs	r3, r1
 800587e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005880:	e003      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005886:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800588a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005892:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005896:	f04f 0b00 	mov.w	fp, #0
 800589a:	ea5a 030b 	orrs.w	r3, sl, fp
 800589e:	d04c      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80058a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058aa:	d030      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80058ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058b0:	d829      	bhi.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80058b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80058b4:	d02d      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80058b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80058b8:	d825      	bhi.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80058ba:	2b80      	cmp	r3, #128	@ 0x80
 80058bc:	d018      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80058be:	2b80      	cmp	r3, #128	@ 0x80
 80058c0:	d821      	bhi.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80058c6:	2b40      	cmp	r3, #64	@ 0x40
 80058c8:	d007      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80058ca:	e01c      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058cc:	4b63      	ldr	r3, [pc, #396]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d0:	4a62      	ldr	r2, [pc, #392]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058d8:	e01c      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058de:	3308      	adds	r3, #8
 80058e0:	2100      	movs	r1, #0
 80058e2:	4618      	mov	r0, r3
 80058e4:	f002 fab8 	bl	8007e58 <RCCEx_PLL2_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058ee:	e011      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f4:	3328      	adds	r3, #40	@ 0x28
 80058f6:	2100      	movs	r1, #0
 80058f8:	4618      	mov	r0, r3
 80058fa:	f002 fb5f 	bl	8007fbc <RCCEx_PLL3_Config>
 80058fe:	4603      	mov	r3, r0
 8005900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005904:	e006      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800590c:	e002      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800590e:	bf00      	nop
 8005910:	e000      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10a      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800591c:	4b4f      	ldr	r3, [pc, #316]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800591e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005920:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800592a:	4a4c      	ldr	r2, [pc, #304]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800592c:	430b      	orrs	r3, r1
 800592e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005930:	e003      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005936:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800593a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005946:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800594a:	2300      	movs	r3, #0
 800594c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005950:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005954:	460b      	mov	r3, r1
 8005956:	4313      	orrs	r3, r2
 8005958:	d053      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800595a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005962:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005966:	d035      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005968:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800596c:	d82e      	bhi.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800596e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005972:	d031      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005974:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005978:	d828      	bhi.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800597a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800597e:	d01a      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005980:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005984:	d822      	bhi.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800598a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800598e:	d007      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005990:	e01c      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005992:	4b32      	ldr	r3, [pc, #200]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005996:	4a31      	ldr	r2, [pc, #196]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800599c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800599e:	e01c      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a4:	3308      	adds	r3, #8
 80059a6:	2100      	movs	r1, #0
 80059a8:	4618      	mov	r0, r3
 80059aa:	f002 fa55 	bl	8007e58 <RCCEx_PLL2_Config>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80059b4:	e011      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ba:	3328      	adds	r3, #40	@ 0x28
 80059bc:	2100      	movs	r1, #0
 80059be:	4618      	mov	r0, r3
 80059c0:	f002 fafc 	bl	8007fbc <RCCEx_PLL3_Config>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059ca:	e006      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059d2:	e002      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80059d4:	bf00      	nop
 80059d6:	e000      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80059d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10b      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80059e2:	4b1e      	ldr	r3, [pc, #120]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80059ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80059f2:	4a1a      	ldr	r2, [pc, #104]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059f4:	430b      	orrs	r3, r1
 80059f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80059f8:	e003      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005a0e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a12:	2300      	movs	r3, #0
 8005a14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005a18:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	d056      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a2e:	d038      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005a30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a34:	d831      	bhi.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a3a:	d034      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005a3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a40:	d82b      	bhi.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a46:	d01d      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005a48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a4c:	d825      	bhi.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d006      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005a52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a56:	d00a      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005a58:	e01f      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a5a:	bf00      	nop
 8005a5c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a60:	4ba2      	ldr	r3, [pc, #648]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a64:	4aa1      	ldr	r2, [pc, #644]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a6c:	e01c      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a72:	3308      	adds	r3, #8
 8005a74:	2100      	movs	r1, #0
 8005a76:	4618      	mov	r0, r3
 8005a78:	f002 f9ee 	bl	8007e58 <RCCEx_PLL2_Config>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a82:	e011      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a88:	3328      	adds	r3, #40	@ 0x28
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f002 fa95 	bl	8007fbc <RCCEx_PLL3_Config>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a98:	e006      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005aa0:	e002      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005aa2:	bf00      	nop
 8005aa4:	e000      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10b      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ab0:	4b8e      	ldr	r3, [pc, #568]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005abc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005ac0:	4a8a      	ldr	r2, [pc, #552]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ac2:	430b      	orrs	r3, r1
 8005ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ac6:	e003      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005acc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005adc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ae6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005aea:	460b      	mov	r3, r1
 8005aec:	4313      	orrs	r3, r2
 8005aee:	d03a      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005af6:	2b30      	cmp	r3, #48	@ 0x30
 8005af8:	d01f      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005afa:	2b30      	cmp	r3, #48	@ 0x30
 8005afc:	d819      	bhi.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	d00c      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005b02:	2b20      	cmp	r3, #32
 8005b04:	d815      	bhi.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d019      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d111      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b0e:	4b77      	ldr	r3, [pc, #476]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b12:	4a76      	ldr	r2, [pc, #472]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b1a:	e011      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b20:	3308      	adds	r3, #8
 8005b22:	2102      	movs	r1, #2
 8005b24:	4618      	mov	r0, r3
 8005b26:	f002 f997 	bl	8007e58 <RCCEx_PLL2_Config>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b30:	e006      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b38:	e002      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b3a:	bf00      	nop
 8005b3c:	e000      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10a      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b48:	4b68      	ldr	r3, [pc, #416]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b4c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b56:	4a65      	ldr	r2, [pc, #404]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b5c:	e003      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005b72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b76:	2300      	movs	r3, #0
 8005b78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005b7c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4313      	orrs	r3, r2
 8005b84:	d051      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b90:	d035      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005b92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b96:	d82e      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b9c:	d031      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005b9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ba2:	d828      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ba8:	d01a      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bae:	d822      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb8:	d007      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005bba:	e01c      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc0:	4a4a      	ldr	r2, [pc, #296]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bc8:	e01c      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bce:	3308      	adds	r3, #8
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f002 f940 	bl	8007e58 <RCCEx_PLL2_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bde:	e011      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be4:	3328      	adds	r3, #40	@ 0x28
 8005be6:	2100      	movs	r1, #0
 8005be8:	4618      	mov	r0, r3
 8005bea:	f002 f9e7 	bl	8007fbc <RCCEx_PLL3_Config>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bf4:	e006      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bfc:	e002      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005bfe:	bf00      	nop
 8005c00:	e000      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c0c:	4b37      	ldr	r3, [pc, #220]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c10:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c1a:	4a34      	ldr	r2, [pc, #208]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c20:	e003      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c32:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005c36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005c44:	460b      	mov	r3, r1
 8005c46:	4313      	orrs	r3, r2
 8005c48:	d056      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c54:	d033      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005c56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c5a:	d82c      	bhi.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c60:	d02f      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005c62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c66:	d826      	bhi.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c6c:	d02b      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005c6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c72:	d820      	bhi.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c78:	d012      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005c7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c7e:	d81a      	bhi.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d022      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c88:	d115      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8e:	3308      	adds	r3, #8
 8005c90:	2101      	movs	r1, #1
 8005c92:	4618      	mov	r0, r3
 8005c94:	f002 f8e0 	bl	8007e58 <RCCEx_PLL2_Config>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005c9e:	e015      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca4:	3328      	adds	r3, #40	@ 0x28
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f002 f987 	bl	8007fbc <RCCEx_PLL3_Config>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005cb4:	e00a      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cbc:	e006      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005cbe:	bf00      	nop
 8005cc0:	e004      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005cc2:	bf00      	nop
 8005cc4:	e002      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005cc6:	bf00      	nop
 8005cc8:	e000      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10d      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005cd4:	4b05      	ldr	r3, [pc, #20]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cd8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ce2:	4a02      	ldr	r2, [pc, #8]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ce8:	e006      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005cea:	bf00      	nop
 8005cec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d00:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005d04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d0e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4313      	orrs	r3, r2
 8005d16:	d055      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d24:	d033      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d2a:	d82c      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d30:	d02f      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d36:	d826      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d3c:	d02b      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005d3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d42:	d820      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d48:	d012      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005d4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d4e:	d81a      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d022      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005d54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d58:	d115      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5e:	3308      	adds	r3, #8
 8005d60:	2101      	movs	r1, #1
 8005d62:	4618      	mov	r0, r3
 8005d64:	f002 f878 	bl	8007e58 <RCCEx_PLL2_Config>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d6e:	e015      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d74:	3328      	adds	r3, #40	@ 0x28
 8005d76:	2101      	movs	r1, #1
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f002 f91f 	bl	8007fbc <RCCEx_PLL3_Config>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d84:	e00a      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d8c:	e006      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d8e:	bf00      	nop
 8005d90:	e004      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d92:	bf00      	nop
 8005d94:	e002      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d96:	bf00      	nop
 8005d98:	e000      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10b      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005da4:	4ba3      	ldr	r3, [pc, #652]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005db4:	4a9f      	ldr	r2, [pc, #636]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005db6:	430b      	orrs	r3, r1
 8005db8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dba:	e003      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005dda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005dde:	460b      	mov	r3, r1
 8005de0:	4313      	orrs	r3, r2
 8005de2:	d037      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dee:	d00e      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005df0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005df4:	d816      	bhi.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d018      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005dfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dfe:	d111      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e00:	4b8c      	ldr	r3, [pc, #560]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e04:	4a8b      	ldr	r2, [pc, #556]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e0c:	e00f      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e12:	3308      	adds	r3, #8
 8005e14:	2101      	movs	r1, #1
 8005e16:	4618      	mov	r0, r3
 8005e18:	f002 f81e 	bl	8007e58 <RCCEx_PLL2_Config>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e22:	e004      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e2a:	e000      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e36:	4b7f      	ldr	r3, [pc, #508]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e3a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e44:	4a7b      	ldr	r2, [pc, #492]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e46:	430b      	orrs	r3, r1
 8005e48:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e4a:	e003      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005e60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e64:	2300      	movs	r3, #0
 8005e66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005e6a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4313      	orrs	r3, r2
 8005e72:	d039      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d81c      	bhi.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e84 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e84:	08005ec1 	.word	0x08005ec1
 8005e88:	08005e95 	.word	0x08005e95
 8005e8c:	08005ea3 	.word	0x08005ea3
 8005e90:	08005ec1 	.word	0x08005ec1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e94:	4b67      	ldr	r3, [pc, #412]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e98:	4a66      	ldr	r2, [pc, #408]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ea0:	e00f      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	2102      	movs	r1, #2
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f001 ffd4 	bl	8007e58 <RCCEx_PLL2_Config>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005eb6:	e004      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ebe:	e000      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10a      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005eca:	4b5a      	ldr	r3, [pc, #360]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ece:	f023 0103 	bic.w	r1, r3, #3
 8005ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ed8:	4a56      	ldr	r2, [pc, #344]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eda:	430b      	orrs	r3, r1
 8005edc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ede:	e003      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005ef4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005efe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005f02:	460b      	mov	r3, r1
 8005f04:	4313      	orrs	r3, r2
 8005f06:	f000 809f 	beq.w	8006048 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f0a:	4b4b      	ldr	r3, [pc, #300]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a4a      	ldr	r2, [pc, #296]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f16:	f7fb fdbd 	bl	8001a94 <HAL_GetTick>
 8005f1a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f1e:	e00b      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f20:	f7fb fdb8 	bl	8001a94 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b64      	cmp	r3, #100	@ 0x64
 8005f2e:	d903      	bls.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f36:	e005      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f38:	4b3f      	ldr	r3, [pc, #252]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0ed      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d179      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f4c:	4b39      	ldr	r3, [pc, #228]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f58:	4053      	eors	r3, r2
 8005f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d015      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f62:	4b34      	ldr	r3, [pc, #208]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f6a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f6e:	4b31      	ldr	r3, [pc, #196]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f72:	4a30      	ldr	r2, [pc, #192]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f78:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f7a:	4b2e      	ldr	r3, [pc, #184]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7e:	4a2d      	ldr	r2, [pc, #180]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f84:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f86:	4a2b      	ldr	r2, [pc, #172]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f8c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f9a:	d118      	bne.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9c:	f7fb fd7a 	bl	8001a94 <HAL_GetTick>
 8005fa0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fa4:	e00d      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fa6:	f7fb fd75 	bl	8001a94 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005fb0:	1ad2      	subs	r2, r2, r3
 8005fb2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d903      	bls.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005fc0:	e005      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0eb      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d129      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fe2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fe6:	d10e      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005fe8:	4b12      	ldr	r3, [pc, #72]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ff8:	091a      	lsrs	r2, r3, #4
 8005ffa:	4b10      	ldr	r3, [pc, #64]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	4a0d      	ldr	r2, [pc, #52]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006000:	430b      	orrs	r3, r1
 8006002:	6113      	str	r3, [r2, #16]
 8006004:	e005      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006006:	4b0b      	ldr	r3, [pc, #44]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	4a0a      	ldr	r2, [pc, #40]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800600c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006010:	6113      	str	r3, [r2, #16]
 8006012:	4b08      	ldr	r3, [pc, #32]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006014:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800601e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006022:	4a04      	ldr	r2, [pc, #16]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006024:	430b      	orrs	r3, r1
 8006026:	6713      	str	r3, [r2, #112]	@ 0x70
 8006028:	e00e      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800602a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800602e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006032:	e009      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006034:	58024400 	.word	0x58024400
 8006038:	58024800 	.word	0x58024800
 800603c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006044:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006050:	f002 0301 	and.w	r3, r2, #1
 8006054:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006058:	2300      	movs	r3, #0
 800605a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800605e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006062:	460b      	mov	r3, r1
 8006064:	4313      	orrs	r3, r2
 8006066:	f000 8089 	beq.w	800617c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800606a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006070:	2b28      	cmp	r3, #40	@ 0x28
 8006072:	d86b      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006074:	a201      	add	r2, pc, #4	@ (adr r2, 800607c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607a:	bf00      	nop
 800607c:	08006155 	.word	0x08006155
 8006080:	0800614d 	.word	0x0800614d
 8006084:	0800614d 	.word	0x0800614d
 8006088:	0800614d 	.word	0x0800614d
 800608c:	0800614d 	.word	0x0800614d
 8006090:	0800614d 	.word	0x0800614d
 8006094:	0800614d 	.word	0x0800614d
 8006098:	0800614d 	.word	0x0800614d
 800609c:	08006121 	.word	0x08006121
 80060a0:	0800614d 	.word	0x0800614d
 80060a4:	0800614d 	.word	0x0800614d
 80060a8:	0800614d 	.word	0x0800614d
 80060ac:	0800614d 	.word	0x0800614d
 80060b0:	0800614d 	.word	0x0800614d
 80060b4:	0800614d 	.word	0x0800614d
 80060b8:	0800614d 	.word	0x0800614d
 80060bc:	08006137 	.word	0x08006137
 80060c0:	0800614d 	.word	0x0800614d
 80060c4:	0800614d 	.word	0x0800614d
 80060c8:	0800614d 	.word	0x0800614d
 80060cc:	0800614d 	.word	0x0800614d
 80060d0:	0800614d 	.word	0x0800614d
 80060d4:	0800614d 	.word	0x0800614d
 80060d8:	0800614d 	.word	0x0800614d
 80060dc:	08006155 	.word	0x08006155
 80060e0:	0800614d 	.word	0x0800614d
 80060e4:	0800614d 	.word	0x0800614d
 80060e8:	0800614d 	.word	0x0800614d
 80060ec:	0800614d 	.word	0x0800614d
 80060f0:	0800614d 	.word	0x0800614d
 80060f4:	0800614d 	.word	0x0800614d
 80060f8:	0800614d 	.word	0x0800614d
 80060fc:	08006155 	.word	0x08006155
 8006100:	0800614d 	.word	0x0800614d
 8006104:	0800614d 	.word	0x0800614d
 8006108:	0800614d 	.word	0x0800614d
 800610c:	0800614d 	.word	0x0800614d
 8006110:	0800614d 	.word	0x0800614d
 8006114:	0800614d 	.word	0x0800614d
 8006118:	0800614d 	.word	0x0800614d
 800611c:	08006155 	.word	0x08006155
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006124:	3308      	adds	r3, #8
 8006126:	2101      	movs	r1, #1
 8006128:	4618      	mov	r0, r3
 800612a:	f001 fe95 	bl	8007e58 <RCCEx_PLL2_Config>
 800612e:	4603      	mov	r3, r0
 8006130:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006134:	e00f      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613a:	3328      	adds	r3, #40	@ 0x28
 800613c:	2101      	movs	r1, #1
 800613e:	4618      	mov	r0, r3
 8006140:	f001 ff3c 	bl	8007fbc <RCCEx_PLL3_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800614a:	e004      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006152:	e000      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10a      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800615e:	4bbf      	ldr	r3, [pc, #764]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006162:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800616c:	4abb      	ldr	r2, [pc, #748]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800616e:	430b      	orrs	r3, r1
 8006170:	6553      	str	r3, [r2, #84]	@ 0x54
 8006172:	e003      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006174:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006178:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800617c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	f002 0302 	and.w	r3, r2, #2
 8006188:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800618c:	2300      	movs	r3, #0
 800618e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006192:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006196:	460b      	mov	r3, r1
 8006198:	4313      	orrs	r3, r2
 800619a:	d041      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061a2:	2b05      	cmp	r3, #5
 80061a4:	d824      	bhi.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80061a6:	a201      	add	r2, pc, #4	@ (adr r2, 80061ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80061a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ac:	080061f9 	.word	0x080061f9
 80061b0:	080061c5 	.word	0x080061c5
 80061b4:	080061db 	.word	0x080061db
 80061b8:	080061f9 	.word	0x080061f9
 80061bc:	080061f9 	.word	0x080061f9
 80061c0:	080061f9 	.word	0x080061f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c8:	3308      	adds	r3, #8
 80061ca:	2101      	movs	r1, #1
 80061cc:	4618      	mov	r0, r3
 80061ce:	f001 fe43 	bl	8007e58 <RCCEx_PLL2_Config>
 80061d2:	4603      	mov	r3, r0
 80061d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80061d8:	e00f      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061de:	3328      	adds	r3, #40	@ 0x28
 80061e0:	2101      	movs	r1, #1
 80061e2:	4618      	mov	r0, r3
 80061e4:	f001 feea 	bl	8007fbc <RCCEx_PLL3_Config>
 80061e8:	4603      	mov	r3, r0
 80061ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80061ee:	e004      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061f6:	e000      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80061f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10a      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006202:	4b96      	ldr	r3, [pc, #600]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006206:	f023 0107 	bic.w	r1, r3, #7
 800620a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800620e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006210:	4a92      	ldr	r2, [pc, #584]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006212:	430b      	orrs	r3, r1
 8006214:	6553      	str	r3, [r2, #84]	@ 0x54
 8006216:	e003      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800621c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006228:	f002 0304 	and.w	r3, r2, #4
 800622c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006230:	2300      	movs	r3, #0
 8006232:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006236:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800623a:	460b      	mov	r3, r1
 800623c:	4313      	orrs	r3, r2
 800623e:	d044      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006244:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006248:	2b05      	cmp	r3, #5
 800624a:	d825      	bhi.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800624c:	a201      	add	r2, pc, #4	@ (adr r2, 8006254 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800624e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006252:	bf00      	nop
 8006254:	080062a1 	.word	0x080062a1
 8006258:	0800626d 	.word	0x0800626d
 800625c:	08006283 	.word	0x08006283
 8006260:	080062a1 	.word	0x080062a1
 8006264:	080062a1 	.word	0x080062a1
 8006268:	080062a1 	.word	0x080062a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800626c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006270:	3308      	adds	r3, #8
 8006272:	2101      	movs	r1, #1
 8006274:	4618      	mov	r0, r3
 8006276:	f001 fdef 	bl	8007e58 <RCCEx_PLL2_Config>
 800627a:	4603      	mov	r3, r0
 800627c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006280:	e00f      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006286:	3328      	adds	r3, #40	@ 0x28
 8006288:	2101      	movs	r1, #1
 800628a:	4618      	mov	r0, r3
 800628c:	f001 fe96 	bl	8007fbc <RCCEx_PLL3_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006296:	e004      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800629e:	e000      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80062a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10b      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062aa:	4b6c      	ldr	r3, [pc, #432]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ae:	f023 0107 	bic.w	r1, r3, #7
 80062b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062ba:	4a68      	ldr	r2, [pc, #416]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062bc:	430b      	orrs	r3, r1
 80062be:	6593      	str	r3, [r2, #88]	@ 0x58
 80062c0:	e003      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d2:	f002 0320 	and.w	r3, r2, #32
 80062d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062da:	2300      	movs	r3, #0
 80062dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80062e4:	460b      	mov	r3, r1
 80062e6:	4313      	orrs	r3, r2
 80062e8:	d055      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80062ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062f6:	d033      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80062f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062fc:	d82c      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006302:	d02f      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006308:	d826      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800630a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800630e:	d02b      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006310:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006314:	d820      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006316:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800631a:	d012      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800631c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006320:	d81a      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d022      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006326:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800632a:	d115      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800632c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006330:	3308      	adds	r3, #8
 8006332:	2100      	movs	r1, #0
 8006334:	4618      	mov	r0, r3
 8006336:	f001 fd8f 	bl	8007e58 <RCCEx_PLL2_Config>
 800633a:	4603      	mov	r3, r0
 800633c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006340:	e015      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006346:	3328      	adds	r3, #40	@ 0x28
 8006348:	2102      	movs	r1, #2
 800634a:	4618      	mov	r0, r3
 800634c:	f001 fe36 	bl	8007fbc <RCCEx_PLL3_Config>
 8006350:	4603      	mov	r3, r0
 8006352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006356:	e00a      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800635e:	e006      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006360:	bf00      	nop
 8006362:	e004      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006364:	bf00      	nop
 8006366:	e002      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006368:	bf00      	nop
 800636a:	e000      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800636c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800636e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10b      	bne.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006376:	4b39      	ldr	r3, [pc, #228]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800637a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800637e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006386:	4a35      	ldr	r2, [pc, #212]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006388:	430b      	orrs	r3, r1
 800638a:	6553      	str	r3, [r2, #84]	@ 0x54
 800638c:	e003      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006392:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800639a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80063a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80063a6:	2300      	movs	r3, #0
 80063a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80063ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80063b0:	460b      	mov	r3, r1
 80063b2:	4313      	orrs	r3, r2
 80063b4:	d058      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80063c2:	d033      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80063c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80063c8:	d82c      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ce:	d02f      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80063d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d4:	d826      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063da:	d02b      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80063dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063e0:	d820      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063e6:	d012      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80063e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063ec:	d81a      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d022      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80063f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063f6:	d115      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fc:	3308      	adds	r3, #8
 80063fe:	2100      	movs	r1, #0
 8006400:	4618      	mov	r0, r3
 8006402:	f001 fd29 	bl	8007e58 <RCCEx_PLL2_Config>
 8006406:	4603      	mov	r3, r0
 8006408:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800640c:	e015      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800640e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006412:	3328      	adds	r3, #40	@ 0x28
 8006414:	2102      	movs	r1, #2
 8006416:	4618      	mov	r0, r3
 8006418:	f001 fdd0 	bl	8007fbc <RCCEx_PLL3_Config>
 800641c:	4603      	mov	r3, r0
 800641e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006422:	e00a      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800642a:	e006      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800642c:	bf00      	nop
 800642e:	e004      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006430:	bf00      	nop
 8006432:	e002      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006434:	bf00      	nop
 8006436:	e000      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800643a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10e      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006442:	4b06      	ldr	r3, [pc, #24]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006446:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800644a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006452:	4a02      	ldr	r2, [pc, #8]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006454:	430b      	orrs	r3, r1
 8006456:	6593      	str	r3, [r2, #88]	@ 0x58
 8006458:	e006      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800645a:	bf00      	nop
 800645c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006460:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006464:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006470:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006474:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006478:	2300      	movs	r3, #0
 800647a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800647e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006482:	460b      	mov	r3, r1
 8006484:	4313      	orrs	r3, r2
 8006486:	d055      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006490:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006494:	d033      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006496:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800649a:	d82c      	bhi.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800649c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064a0:	d02f      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80064a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064a6:	d826      	bhi.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80064a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80064ac:	d02b      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80064ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80064b2:	d820      	bhi.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80064b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064b8:	d012      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80064ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064be:	d81a      	bhi.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d022      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80064c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064c8:	d115      	bne.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ce:	3308      	adds	r3, #8
 80064d0:	2100      	movs	r1, #0
 80064d2:	4618      	mov	r0, r3
 80064d4:	f001 fcc0 	bl	8007e58 <RCCEx_PLL2_Config>
 80064d8:	4603      	mov	r3, r0
 80064da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80064de:	e015      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e4:	3328      	adds	r3, #40	@ 0x28
 80064e6:	2102      	movs	r1, #2
 80064e8:	4618      	mov	r0, r3
 80064ea:	f001 fd67 	bl	8007fbc <RCCEx_PLL3_Config>
 80064ee:	4603      	mov	r3, r0
 80064f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80064f4:	e00a      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064fc:	e006      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064fe:	bf00      	nop
 8006500:	e004      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006502:	bf00      	nop
 8006504:	e002      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006506:	bf00      	nop
 8006508:	e000      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800650a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10b      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006514:	4ba1      	ldr	r3, [pc, #644]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006518:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800651c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006520:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006524:	4a9d      	ldr	r2, [pc, #628]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006526:	430b      	orrs	r3, r1
 8006528:	6593      	str	r3, [r2, #88]	@ 0x58
 800652a:	e003      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006530:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	f002 0308 	and.w	r3, r2, #8
 8006540:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006544:	2300      	movs	r3, #0
 8006546:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800654a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800654e:	460b      	mov	r3, r1
 8006550:	4313      	orrs	r3, r2
 8006552:	d01e      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006558:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800655c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006560:	d10c      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006566:	3328      	adds	r3, #40	@ 0x28
 8006568:	2102      	movs	r1, #2
 800656a:	4618      	mov	r0, r3
 800656c:	f001 fd26 	bl	8007fbc <RCCEx_PLL3_Config>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d002      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800657c:	4b87      	ldr	r3, [pc, #540]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800657e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006580:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006588:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800658c:	4a83      	ldr	r2, [pc, #524]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800658e:	430b      	orrs	r3, r1
 8006590:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	f002 0310 	and.w	r3, r2, #16
 800659e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065a2:	2300      	movs	r3, #0
 80065a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80065a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80065ac:	460b      	mov	r3, r1
 80065ae:	4313      	orrs	r3, r2
 80065b0:	d01e      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065be:	d10c      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c4:	3328      	adds	r3, #40	@ 0x28
 80065c6:	2102      	movs	r1, #2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f001 fcf7 	bl	8007fbc <RCCEx_PLL3_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065da:	4b70      	ldr	r3, [pc, #448]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065ea:	4a6c      	ldr	r2, [pc, #432]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065ec:	430b      	orrs	r3, r1
 80065ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80065fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006600:	2300      	movs	r3, #0
 8006602:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006606:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800660a:	460b      	mov	r3, r1
 800660c:	4313      	orrs	r3, r2
 800660e:	d03e      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006614:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006618:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800661c:	d022      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800661e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006622:	d81b      	bhi.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006624:	2b00      	cmp	r3, #0
 8006626:	d003      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800662c:	d00b      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800662e:	e015      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006634:	3308      	adds	r3, #8
 8006636:	2100      	movs	r1, #0
 8006638:	4618      	mov	r0, r3
 800663a:	f001 fc0d 	bl	8007e58 <RCCEx_PLL2_Config>
 800663e:	4603      	mov	r3, r0
 8006640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006644:	e00f      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664a:	3328      	adds	r3, #40	@ 0x28
 800664c:	2102      	movs	r1, #2
 800664e:	4618      	mov	r0, r3
 8006650:	f001 fcb4 	bl	8007fbc <RCCEx_PLL3_Config>
 8006654:	4603      	mov	r3, r0
 8006656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800665a:	e004      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006662:	e000      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10b      	bne.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800666e:	4b4b      	ldr	r3, [pc, #300]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006672:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800667e:	4a47      	ldr	r2, [pc, #284]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006680:	430b      	orrs	r3, r1
 8006682:	6593      	str	r3, [r2, #88]	@ 0x58
 8006684:	e003      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800668a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800668e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800669a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800669c:	2300      	movs	r3, #0
 800669e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80066a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80066a4:	460b      	mov	r3, r1
 80066a6:	4313      	orrs	r3, r2
 80066a8:	d03b      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80066aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80066b6:	d01f      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80066b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80066bc:	d818      	bhi.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80066be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066c2:	d003      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80066c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066c8:	d007      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80066ca:	e011      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066cc:	4b33      	ldr	r3, [pc, #204]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d0:	4a32      	ldr	r2, [pc, #200]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80066d8:	e00f      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066de:	3328      	adds	r3, #40	@ 0x28
 80066e0:	2101      	movs	r1, #1
 80066e2:	4618      	mov	r0, r3
 80066e4:	f001 fc6a 	bl	8007fbc <RCCEx_PLL3_Config>
 80066e8:	4603      	mov	r3, r0
 80066ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80066ee:	e004      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066f6:	e000      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80066f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10b      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006702:	4b26      	ldr	r3, [pc, #152]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006706:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800670a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006712:	4a22      	ldr	r2, [pc, #136]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006714:	430b      	orrs	r3, r1
 8006716:	6553      	str	r3, [r2, #84]	@ 0x54
 8006718:	e003      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800671e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800672e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006730:	2300      	movs	r3, #0
 8006732:	677b      	str	r3, [r7, #116]	@ 0x74
 8006734:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006738:	460b      	mov	r3, r1
 800673a:	4313      	orrs	r3, r2
 800673c:	d034      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800674c:	d007      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800674e:	e011      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006750:	4b12      	ldr	r3, [pc, #72]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006754:	4a11      	ldr	r2, [pc, #68]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800675a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800675c:	e00e      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006762:	3308      	adds	r3, #8
 8006764:	2102      	movs	r1, #2
 8006766:	4618      	mov	r0, r3
 8006768:	f001 fb76 	bl	8007e58 <RCCEx_PLL2_Config>
 800676c:	4603      	mov	r3, r0
 800676e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006772:	e003      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800677a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800677c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10d      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006784:	4b05      	ldr	r3, [pc, #20]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006788:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800678c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006792:	4a02      	ldr	r2, [pc, #8]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006794:	430b      	orrs	r3, r1
 8006796:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006798:	e006      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800679a:	bf00      	nop
 800679c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80067b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067b6:	2300      	movs	r3, #0
 80067b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80067ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80067be:	460b      	mov	r3, r1
 80067c0:	4313      	orrs	r3, r2
 80067c2:	d00c      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c8:	3328      	adds	r3, #40	@ 0x28
 80067ca:	2102      	movs	r1, #2
 80067cc:	4618      	mov	r0, r3
 80067ce:	f001 fbf5 	bl	8007fbc <RCCEx_PLL3_Config>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80067de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80067ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80067ec:	2300      	movs	r3, #0
 80067ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80067f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80067f4:	460b      	mov	r3, r1
 80067f6:	4313      	orrs	r3, r2
 80067f8:	d038      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80067fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006802:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006806:	d018      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006808:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800680c:	d811      	bhi.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800680e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006812:	d014      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006818:	d80b      	bhi.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800681a:	2b00      	cmp	r3, #0
 800681c:	d011      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800681e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006822:	d106      	bne.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006824:	4bc3      	ldr	r3, [pc, #780]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006828:	4ac2      	ldr	r2, [pc, #776]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800682a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800682e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006830:	e008      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006838:	e004      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800683a:	bf00      	nop
 800683c:	e002      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800683e:	bf00      	nop
 8006840:	e000      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10b      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800684c:	4bb9      	ldr	r3, [pc, #740]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800684e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006850:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006858:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800685c:	4ab5      	ldr	r2, [pc, #724]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800685e:	430b      	orrs	r3, r1
 8006860:	6553      	str	r3, [r2, #84]	@ 0x54
 8006862:	e003      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006864:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006868:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800686c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006874:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006878:	65bb      	str	r3, [r7, #88]	@ 0x58
 800687a:	2300      	movs	r3, #0
 800687c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800687e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006882:	460b      	mov	r3, r1
 8006884:	4313      	orrs	r3, r2
 8006886:	d009      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006888:	4baa      	ldr	r3, [pc, #680]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800688a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800688c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006896:	4aa7      	ldr	r2, [pc, #668]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006898:	430b      	orrs	r3, r1
 800689a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800689c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80068a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80068aa:	2300      	movs	r3, #0
 80068ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80068ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80068b2:	460b      	mov	r3, r1
 80068b4:	4313      	orrs	r3, r2
 80068b6:	d00a      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80068b8:	4b9e      	ldr	r3, [pc, #632]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80068c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80068c8:	4a9a      	ldr	r2, [pc, #616]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068ca:	430b      	orrs	r3, r1
 80068cc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80068da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068dc:	2300      	movs	r3, #0
 80068de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068e0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80068e4:	460b      	mov	r3, r1
 80068e6:	4313      	orrs	r3, r2
 80068e8:	d009      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068ea:	4b92      	ldr	r3, [pc, #584]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068ee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80068f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068f8:	4a8e      	ldr	r2, [pc, #568]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068fa:	430b      	orrs	r3, r1
 80068fc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80068fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006906:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800690a:	643b      	str	r3, [r7, #64]	@ 0x40
 800690c:	2300      	movs	r3, #0
 800690e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006910:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006914:	460b      	mov	r3, r1
 8006916:	4313      	orrs	r3, r2
 8006918:	d00e      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800691a:	4b86      	ldr	r3, [pc, #536]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	4a85      	ldr	r2, [pc, #532]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006920:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006924:	6113      	str	r3, [r2, #16]
 8006926:	4b83      	ldr	r3, [pc, #524]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006928:	6919      	ldr	r1, [r3, #16]
 800692a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006932:	4a80      	ldr	r2, [pc, #512]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006934:	430b      	orrs	r3, r1
 8006936:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006944:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006946:	2300      	movs	r3, #0
 8006948:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800694a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800694e:	460b      	mov	r3, r1
 8006950:	4313      	orrs	r3, r2
 8006952:	d009      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006954:	4b77      	ldr	r3, [pc, #476]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006958:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800695c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006962:	4a74      	ldr	r2, [pc, #464]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006964:	430b      	orrs	r3, r1
 8006966:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800696c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006970:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006974:	633b      	str	r3, [r7, #48]	@ 0x30
 8006976:	2300      	movs	r3, #0
 8006978:	637b      	str	r3, [r7, #52]	@ 0x34
 800697a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800697e:	460b      	mov	r3, r1
 8006980:	4313      	orrs	r3, r2
 8006982:	d00a      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006984:	4b6b      	ldr	r3, [pc, #428]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006988:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800698c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006994:	4a67      	ldr	r2, [pc, #412]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006996:	430b      	orrs	r3, r1
 8006998:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800699a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	2100      	movs	r1, #0
 80069a4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80069b0:	460b      	mov	r3, r1
 80069b2:	4313      	orrs	r3, r2
 80069b4:	d011      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ba:	3308      	adds	r3, #8
 80069bc:	2100      	movs	r1, #0
 80069be:	4618      	mov	r0, r3
 80069c0:	f001 fa4a 	bl	8007e58 <RCCEx_PLL2_Config>
 80069c4:	4603      	mov	r3, r0
 80069c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80069da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	2100      	movs	r1, #0
 80069e4:	6239      	str	r1, [r7, #32]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80069ec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80069f0:	460b      	mov	r3, r1
 80069f2:	4313      	orrs	r3, r2
 80069f4:	d011      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fa:	3308      	adds	r3, #8
 80069fc:	2101      	movs	r1, #1
 80069fe:	4618      	mov	r0, r3
 8006a00:	f001 fa2a 	bl	8007e58 <RCCEx_PLL2_Config>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	2100      	movs	r1, #0
 8006a24:	61b9      	str	r1, [r7, #24]
 8006a26:	f003 0304 	and.w	r3, r3, #4
 8006a2a:	61fb      	str	r3, [r7, #28]
 8006a2c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006a30:	460b      	mov	r3, r1
 8006a32:	4313      	orrs	r3, r2
 8006a34:	d011      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	2102      	movs	r1, #2
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f001 fa0a 	bl	8007e58 <RCCEx_PLL2_Config>
 8006a44:	4603      	mov	r3, r0
 8006a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	2100      	movs	r1, #0
 8006a64:	6139      	str	r1, [r7, #16]
 8006a66:	f003 0308 	and.w	r3, r3, #8
 8006a6a:	617b      	str	r3, [r7, #20]
 8006a6c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a70:	460b      	mov	r3, r1
 8006a72:	4313      	orrs	r3, r2
 8006a74:	d011      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7a:	3328      	adds	r3, #40	@ 0x28
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f001 fa9c 	bl	8007fbc <RCCEx_PLL3_Config>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	f003 0310 	and.w	r3, r3, #16
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	d011      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aba:	3328      	adds	r3, #40	@ 0x28
 8006abc:	2101      	movs	r1, #1
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f001 fa7c 	bl	8007fbc <RCCEx_PLL3_Config>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ad6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	6039      	str	r1, [r7, #0]
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	607b      	str	r3, [r7, #4]
 8006aec:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006af0:	460b      	mov	r3, r1
 8006af2:	4313      	orrs	r3, r2
 8006af4:	d011      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afa:	3328      	adds	r3, #40	@ 0x28
 8006afc:	2102      	movs	r1, #2
 8006afe:	4618      	mov	r0, r3
 8006b00:	f001 fa5c 	bl	8007fbc <RCCEx_PLL3_Config>
 8006b04:	4603      	mov	r3, r0
 8006b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006b1a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	e000      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b34:	58024400 	.word	0x58024400

08006b38 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b090      	sub	sp, #64	@ 0x40
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006b42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b46:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006b4a:	430b      	orrs	r3, r1
 8006b4c:	f040 8094 	bne.w	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006b50:	4b9e      	ldr	r3, [pc, #632]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	f200 8087 	bhi.w	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006b62:	a201      	add	r2, pc, #4	@ (adr r2, 8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b68:	08006b7d 	.word	0x08006b7d
 8006b6c:	08006ba5 	.word	0x08006ba5
 8006b70:	08006bcd 	.word	0x08006bcd
 8006b74:	08006c69 	.word	0x08006c69
 8006b78:	08006bf5 	.word	0x08006bf5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b7c:	4b93      	ldr	r3, [pc, #588]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b88:	d108      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f001 f810 	bl	8007bb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b98:	f000 bd45 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ba0:	f000 bd41 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ba4:	4b89      	ldr	r3, [pc, #548]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bb0:	d108      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bb2:	f107 0318 	add.w	r3, r7, #24
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 fd54 	bl	8007664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bc0:	f000 bd31 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bc8:	f000 bd2d 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bcc:	4b7f      	ldr	r3, [pc, #508]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bd8:	d108      	bne.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bda:	f107 030c 	add.w	r3, r7, #12
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fe94 	bl	800790c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006be8:	f000 bd1d 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bf0:	f000 bd19 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006bf4:	4b75      	ldr	r3, [pc, #468]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006bfc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bfe:	4b73      	ldr	r3, [pc, #460]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0304 	and.w	r3, r3, #4
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d10c      	bne.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d109      	bne.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c10:	4b6e      	ldr	r3, [pc, #440]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	08db      	lsrs	r3, r3, #3
 8006c16:	f003 0303 	and.w	r3, r3, #3
 8006c1a:	4a6d      	ldr	r2, [pc, #436]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c22:	e01f      	b.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c24:	4b69      	ldr	r3, [pc, #420]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c30:	d106      	bne.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c38:	d102      	bne.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c3a:	4b66      	ldr	r3, [pc, #408]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c3e:	e011      	b.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c40:	4b62      	ldr	r3, [pc, #392]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c4c:	d106      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c54:	d102      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c56:	4b60      	ldr	r3, [pc, #384]	@ (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c5a:	e003      	b.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006c60:	f000 bce1 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c64:	f000 bcdf 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c68:	4b5c      	ldr	r3, [pc, #368]	@ (8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c6c:	f000 bcdb 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c74:	f000 bcd7 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c7c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006c80:	430b      	orrs	r3, r1
 8006c82:	f040 80ad 	bne.w	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006c86:	4b51      	ldr	r3, [pc, #324]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c8a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006c8e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c96:	d056      	beq.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c9e:	f200 8090 	bhi.w	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca4:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ca6:	f000 8088 	beq.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cac:	2bc0      	cmp	r3, #192	@ 0xc0
 8006cae:	f200 8088 	bhi.w	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb4:	2b80      	cmp	r3, #128	@ 0x80
 8006cb6:	d032      	beq.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cba:	2b80      	cmp	r3, #128	@ 0x80
 8006cbc:	f200 8081 	bhi.w	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc8:	2b40      	cmp	r3, #64	@ 0x40
 8006cca:	d014      	beq.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006ccc:	e079      	b.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cce:	4b3f      	ldr	r3, [pc, #252]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cda:	d108      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 ff67 	bl	8007bb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cea:	f000 bc9c 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cf2:	f000 bc98 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cf6:	4b35      	ldr	r3, [pc, #212]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d02:	d108      	bne.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d04:	f107 0318 	add.w	r3, r7, #24
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 fcab 	bl	8007664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d12:	f000 bc88 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d1a:	f000 bc84 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d2a:	d108      	bne.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d2c:	f107 030c 	add.w	r3, r7, #12
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fdeb 	bl	800790c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d3a:	f000 bc74 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d42:	f000 bc70 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d46:	4b21      	ldr	r3, [pc, #132]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006d4e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d50:	4b1e      	ldr	r3, [pc, #120]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d10c      	bne.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d109      	bne.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d62:	4b1a      	ldr	r3, [pc, #104]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	08db      	lsrs	r3, r3, #3
 8006d68:	f003 0303 	and.w	r3, r3, #3
 8006d6c:	4a18      	ldr	r2, [pc, #96]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d74:	e01f      	b.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d76:	4b15      	ldr	r3, [pc, #84]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d82:	d106      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d8a:	d102      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d8c:	4b11      	ldr	r3, [pc, #68]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d90:	e011      	b.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d92:	4b0e      	ldr	r3, [pc, #56]	@ (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d9e:	d106      	bne.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006da6:	d102      	bne.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006da8:	4b0b      	ldr	r3, [pc, #44]	@ (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dac:	e003      	b.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006dae:	2300      	movs	r3, #0
 8006db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006db2:	f000 bc38 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006db6:	f000 bc36 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006dba:	4b08      	ldr	r3, [pc, #32]	@ (8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dbe:	f000 bc32 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dc6:	f000 bc2e 	b.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006dca:	bf00      	nop
 8006dcc:	58024400 	.word	0x58024400
 8006dd0:	03d09000 	.word	0x03d09000
 8006dd4:	003d0900 	.word	0x003d0900
 8006dd8:	017d7840 	.word	0x017d7840
 8006ddc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006de4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006de8:	430b      	orrs	r3, r1
 8006dea:	f040 809c 	bne.w	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006dee:	4b9e      	ldr	r3, [pc, #632]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006df2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006df6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006dfe:	d054      	beq.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e06:	f200 808b 	bhi.w	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006e10:	f000 8083 	beq.w	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e16:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006e1a:	f200 8081 	bhi.w	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e24:	d02f      	beq.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e2c:	d878      	bhi.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d004      	beq.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e3a:	d012      	beq.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006e3c:	e070      	b.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e3e:	4b8a      	ldr	r3, [pc, #552]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e4a:	d107      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 feaf 	bl	8007bb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e5a:	e3e4      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e60:	e3e1      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e62:	4b81      	ldr	r3, [pc, #516]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e6e:	d107      	bne.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e70:	f107 0318 	add.w	r3, r7, #24
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 fbf5 	bl	8007664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e7e:	e3d2      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e80:	2300      	movs	r3, #0
 8006e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e84:	e3cf      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e86:	4b78      	ldr	r3, [pc, #480]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e92:	d107      	bne.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e94:	f107 030c 	add.w	r3, r7, #12
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 fd37 	bl	800790c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ea2:	e3c0      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ea8:	e3bd      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006eaa:	4b6f      	ldr	r3, [pc, #444]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006eb2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006eb4:	4b6c      	ldr	r3, [pc, #432]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0304 	and.w	r3, r3, #4
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d10c      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d109      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ec6:	4b68      	ldr	r3, [pc, #416]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	08db      	lsrs	r3, r3, #3
 8006ecc:	f003 0303 	and.w	r3, r3, #3
 8006ed0:	4a66      	ldr	r2, [pc, #408]	@ (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ed8:	e01e      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006eda:	4b63      	ldr	r3, [pc, #396]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ee6:	d106      	bne.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006eee:	d102      	bne.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ef0:	4b5f      	ldr	r3, [pc, #380]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ef4:	e010      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ef6:	4b5c      	ldr	r3, [pc, #368]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006efe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f02:	d106      	bne.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f0a:	d102      	bne.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f0c:	4b59      	ldr	r3, [pc, #356]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f10:	e002      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f12:	2300      	movs	r3, #0
 8006f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f16:	e386      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f18:	e385      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f1a:	4b57      	ldr	r3, [pc, #348]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f1e:	e382      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006f20:	2300      	movs	r3, #0
 8006f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f24:	e37f      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006f26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f2a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006f2e:	430b      	orrs	r3, r1
 8006f30:	f040 80a7 	bne.w	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006f34:	4b4c      	ldr	r3, [pc, #304]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f38:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006f3c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f44:	d055      	beq.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f4c:	f200 8096 	bhi.w	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006f56:	f000 8084 	beq.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006f60:	f200 808c 	bhi.w	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f6a:	d030      	beq.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f72:	f200 8083 	bhi.w	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d004      	beq.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f82:	d012      	beq.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006f84:	e07a      	b.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f86:	4b38      	ldr	r3, [pc, #224]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f92:	d107      	bne.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fe0b 	bl	8007bb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fa2:	e340      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fa8:	e33d      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006faa:	4b2f      	ldr	r3, [pc, #188]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fb6:	d107      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fb8:	f107 0318 	add.w	r3, r7, #24
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 fb51 	bl	8007664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fc6:	e32e      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fcc:	e32b      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fce:	4b26      	ldr	r3, [pc, #152]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fda:	d107      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fdc:	f107 030c 	add.w	r3, r7, #12
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fc93 	bl	800790c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fea:	e31c      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ff0:	e319      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ff6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ffa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	2b04      	cmp	r3, #4
 8007006:	d10c      	bne.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800700e:	4b16      	ldr	r3, [pc, #88]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	08db      	lsrs	r3, r3, #3
 8007014:	f003 0303 	and.w	r3, r3, #3
 8007018:	4a14      	ldr	r2, [pc, #80]	@ (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800701a:	fa22 f303 	lsr.w	r3, r2, r3
 800701e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007020:	e01e      	b.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007022:	4b11      	ldr	r3, [pc, #68]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800702a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800702e:	d106      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007032:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007036:	d102      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007038:	4b0d      	ldr	r3, [pc, #52]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800703a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800703c:	e010      	b.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800703e:	4b0a      	ldr	r3, [pc, #40]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007046:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800704a:	d106      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800704c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800704e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007052:	d102      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007054:	4b07      	ldr	r3, [pc, #28]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007056:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007058:	e002      	b.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800705e:	e2e2      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007060:	e2e1      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007062:	4b05      	ldr	r3, [pc, #20]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007066:	e2de      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007068:	58024400 	.word	0x58024400
 800706c:	03d09000 	.word	0x03d09000
 8007070:	003d0900 	.word	0x003d0900
 8007074:	017d7840 	.word	0x017d7840
 8007078:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800707c:	2300      	movs	r3, #0
 800707e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007080:	e2d1      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007086:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800708a:	430b      	orrs	r3, r1
 800708c:	f040 809c 	bne.w	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007090:	4b93      	ldr	r3, [pc, #588]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007094:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007098:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800709a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070a0:	d054      	beq.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80070a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070a8:	f200 808b 	bhi.w	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80070ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80070b2:	f000 8083 	beq.w	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80070b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80070bc:	f200 8081 	bhi.w	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80070c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070c6:	d02f      	beq.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80070c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070ce:	d878      	bhi.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80070d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d004      	beq.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80070d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070dc:	d012      	beq.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80070de:	e070      	b.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070e0:	4b7f      	ldr	r3, [pc, #508]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070ec:	d107      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 fd5e 	bl	8007bb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070fc:	e293      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007102:	e290      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007104:	4b76      	ldr	r3, [pc, #472]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800710c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007110:	d107      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007112:	f107 0318 	add.w	r3, r7, #24
 8007116:	4618      	mov	r0, r3
 8007118:	f000 faa4 	bl	8007664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007120:	e281      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007126:	e27e      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007128:	4b6d      	ldr	r3, [pc, #436]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007130:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007134:	d107      	bne.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007136:	f107 030c 	add.w	r3, r7, #12
 800713a:	4618      	mov	r0, r3
 800713c:	f000 fbe6 	bl	800790c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007144:	e26f      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800714a:	e26c      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800714c:	4b64      	ldr	r3, [pc, #400]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800714e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007150:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007154:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007156:	4b62      	ldr	r3, [pc, #392]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0304 	and.w	r3, r3, #4
 800715e:	2b04      	cmp	r3, #4
 8007160:	d10c      	bne.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007164:	2b00      	cmp	r3, #0
 8007166:	d109      	bne.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007168:	4b5d      	ldr	r3, [pc, #372]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	08db      	lsrs	r3, r3, #3
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	4a5c      	ldr	r2, [pc, #368]	@ (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007174:	fa22 f303 	lsr.w	r3, r2, r3
 8007178:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800717a:	e01e      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800717c:	4b58      	ldr	r3, [pc, #352]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007184:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007188:	d106      	bne.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800718a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800718c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007190:	d102      	bne.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007192:	4b55      	ldr	r3, [pc, #340]	@ (80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007194:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007196:	e010      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007198:	4b51      	ldr	r3, [pc, #324]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071a4:	d106      	bne.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80071a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071ac:	d102      	bne.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80071ae:	4b4f      	ldr	r3, [pc, #316]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80071b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071b2:	e002      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80071b8:	e235      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071ba:	e234      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80071bc:	4b4c      	ldr	r3, [pc, #304]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80071be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071c0:	e231      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80071c2:	2300      	movs	r3, #0
 80071c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071c6:	e22e      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80071c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071cc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80071d0:	430b      	orrs	r3, r1
 80071d2:	f040 808f 	bne.w	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80071d6:	4b42      	ldr	r3, [pc, #264]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071da:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80071de:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80071e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071e6:	d06b      	beq.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80071e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071ee:	d874      	bhi.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80071f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071f6:	d056      	beq.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80071f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071fe:	d86c      	bhi.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007202:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007206:	d03b      	beq.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800720e:	d864      	bhi.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007212:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007216:	d021      	beq.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800721e:	d85c      	bhi.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007222:	2b00      	cmp	r3, #0
 8007224:	d004      	beq.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800722c:	d004      	beq.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800722e:	e054      	b.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007230:	f7fe fa20 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 8007234:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007236:	e1f6      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007238:	4b29      	ldr	r3, [pc, #164]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007240:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007244:	d107      	bne.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007246:	f107 0318 	add.w	r3, r7, #24
 800724a:	4618      	mov	r0, r3
 800724c:	f000 fa0a 	bl	8007664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007254:	e1e7      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007256:	2300      	movs	r3, #0
 8007258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800725a:	e1e4      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800725c:	4b20      	ldr	r3, [pc, #128]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007268:	d107      	bne.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800726a:	f107 030c 	add.w	r3, r7, #12
 800726e:	4618      	mov	r0, r3
 8007270:	f000 fb4c 	bl	800790c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007278:	e1d5      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800727e:	e1d2      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007280:	4b17      	ldr	r3, [pc, #92]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0304 	and.w	r3, r3, #4
 8007288:	2b04      	cmp	r3, #4
 800728a:	d109      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800728c:	4b14      	ldr	r3, [pc, #80]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	08db      	lsrs	r3, r3, #3
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	4a13      	ldr	r2, [pc, #76]	@ (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007298:	fa22 f303 	lsr.w	r3, r2, r3
 800729c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800729e:	e1c2      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072a4:	e1bf      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80072a6:	4b0e      	ldr	r3, [pc, #56]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072b2:	d102      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80072b4:	4b0c      	ldr	r3, [pc, #48]	@ (80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80072b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072b8:	e1b5      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072ba:	2300      	movs	r3, #0
 80072bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072be:	e1b2      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80072c0:	4b07      	ldr	r3, [pc, #28]	@ (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072cc:	d102      	bne.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80072ce:	4b07      	ldr	r3, [pc, #28]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80072d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072d2:	e1a8      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072d4:	2300      	movs	r3, #0
 80072d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072d8:	e1a5      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80072da:	2300      	movs	r3, #0
 80072dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072de:	e1a2      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072e0:	58024400 	.word	0x58024400
 80072e4:	03d09000 	.word	0x03d09000
 80072e8:	003d0900 	.word	0x003d0900
 80072ec:	017d7840 	.word	0x017d7840
 80072f0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80072f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072f8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80072fc:	430b      	orrs	r3, r1
 80072fe:	d173      	bne.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007300:	4b9c      	ldr	r3, [pc, #624]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007304:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007308:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800730a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007310:	d02f      	beq.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007314:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007318:	d863      	bhi.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800731a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731c:	2b00      	cmp	r3, #0
 800731e:	d004      	beq.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007322:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007326:	d012      	beq.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007328:	e05b      	b.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800732a:	4b92      	ldr	r3, [pc, #584]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007332:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007336:	d107      	bne.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007338:	f107 0318 	add.w	r3, r7, #24
 800733c:	4618      	mov	r0, r3
 800733e:	f000 f991 	bl	8007664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007346:	e16e      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800734c:	e16b      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800734e:	4b89      	ldr	r3, [pc, #548]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800735a:	d107      	bne.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800735c:	f107 030c 	add.w	r3, r7, #12
 8007360:	4618      	mov	r0, r3
 8007362:	f000 fad3 	bl	800790c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800736a:	e15c      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800736c:	2300      	movs	r3, #0
 800736e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007370:	e159      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007372:	4b80      	ldr	r3, [pc, #512]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007376:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800737a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800737c:	4b7d      	ldr	r3, [pc, #500]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b04      	cmp	r3, #4
 8007386:	d10c      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800738a:	2b00      	cmp	r3, #0
 800738c:	d109      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800738e:	4b79      	ldr	r3, [pc, #484]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	08db      	lsrs	r3, r3, #3
 8007394:	f003 0303 	and.w	r3, r3, #3
 8007398:	4a77      	ldr	r2, [pc, #476]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800739a:	fa22 f303 	lsr.w	r3, r2, r3
 800739e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073a0:	e01e      	b.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073a2:	4b74      	ldr	r3, [pc, #464]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073ae:	d106      	bne.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80073b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073b6:	d102      	bne.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80073b8:	4b70      	ldr	r3, [pc, #448]	@ (800757c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80073ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073bc:	e010      	b.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073be:	4b6d      	ldr	r3, [pc, #436]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073ca:	d106      	bne.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80073cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073d2:	d102      	bne.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80073d4:	4b6a      	ldr	r3, [pc, #424]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80073d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073d8:	e002      	b.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80073de:	e122      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80073e0:	e121      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80073e2:	2300      	movs	r3, #0
 80073e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073e6:	e11e      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80073e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ec:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80073f0:	430b      	orrs	r3, r1
 80073f2:	d133      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80073f4:	4b5f      	ldr	r3, [pc, #380]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80073fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007400:	2b00      	cmp	r3, #0
 8007402:	d004      	beq.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007406:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800740a:	d012      	beq.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800740c:	e023      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800740e:	4b59      	ldr	r3, [pc, #356]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007416:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800741a:	d107      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800741c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007420:	4618      	mov	r0, r3
 8007422:	f000 fbc7 	bl	8007bb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800742a:	e0fc      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800742c:	2300      	movs	r3, #0
 800742e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007430:	e0f9      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007432:	4b50      	ldr	r3, [pc, #320]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800743a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800743e:	d107      	bne.n	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007440:	f107 0318 	add.w	r3, r7, #24
 8007444:	4618      	mov	r0, r3
 8007446:	f000 f90d 	bl	8007664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800744e:	e0ea      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007454:	e0e7      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800745a:	e0e4      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800745c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007460:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007464:	430b      	orrs	r3, r1
 8007466:	f040 808d 	bne.w	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800746a:	4b42      	ldr	r3, [pc, #264]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800746c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800746e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007472:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007476:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800747a:	d06b      	beq.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800747c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007482:	d874      	bhi.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800748a:	d056      	beq.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800748c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007492:	d86c      	bhi.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007496:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800749a:	d03b      	beq.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800749c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80074a2:	d864      	bhi.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80074a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074aa:	d021      	beq.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80074ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074b2:	d85c      	bhi.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80074b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d004      	beq.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80074ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074c0:	d004      	beq.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80074c2:	e054      	b.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80074c4:	f000 f8b8 	bl	8007638 <HAL_RCCEx_GetD3PCLK1Freq>
 80074c8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074ca:	e0ac      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074cc:	4b29      	ldr	r3, [pc, #164]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074d8:	d107      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074da:	f107 0318 	add.w	r3, r7, #24
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 f8c0 	bl	8007664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074e8:	e09d      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074ea:	2300      	movs	r3, #0
 80074ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ee:	e09a      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074f0:	4b20      	ldr	r3, [pc, #128]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074fc:	d107      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074fe:	f107 030c 	add.w	r3, r7, #12
 8007502:	4618      	mov	r0, r3
 8007504:	f000 fa02 	bl	800790c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800750c:	e08b      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800750e:	2300      	movs	r3, #0
 8007510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007512:	e088      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007514:	4b17      	ldr	r3, [pc, #92]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	2b04      	cmp	r3, #4
 800751e:	d109      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007520:	4b14      	ldr	r3, [pc, #80]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	08db      	lsrs	r3, r3, #3
 8007526:	f003 0303 	and.w	r3, r3, #3
 800752a:	4a13      	ldr	r2, [pc, #76]	@ (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800752c:	fa22 f303 	lsr.w	r3, r2, r3
 8007530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007532:	e078      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007538:	e075      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800753a:	4b0e      	ldr	r3, [pc, #56]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007546:	d102      	bne.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007548:	4b0c      	ldr	r3, [pc, #48]	@ (800757c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800754a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800754c:	e06b      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800754e:	2300      	movs	r3, #0
 8007550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007552:	e068      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007554:	4b07      	ldr	r3, [pc, #28]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800755c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007560:	d102      	bne.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007562:	4b07      	ldr	r3, [pc, #28]	@ (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007566:	e05e      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007568:	2300      	movs	r3, #0
 800756a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800756c:	e05b      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007572:	e058      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007574:	58024400 	.word	0x58024400
 8007578:	03d09000 	.word	0x03d09000
 800757c:	003d0900 	.word	0x003d0900
 8007580:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007588:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800758c:	430b      	orrs	r3, r1
 800758e:	d148      	bne.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007590:	4b27      	ldr	r3, [pc, #156]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007594:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007598:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800759a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075a0:	d02a      	beq.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80075a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075a8:	d838      	bhi.n	800761c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80075aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d004      	beq.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80075b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075b6:	d00d      	beq.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80075b8:	e030      	b.n	800761c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80075ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075c6:	d102      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80075c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007634 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80075ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075cc:	e02b      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075d2:	e028      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075d4:	4b16      	ldr	r3, [pc, #88]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075e0:	d107      	bne.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 fae4 	bl	8007bb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075f0:	e019      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075f6:	e016      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075f8:	4b0d      	ldr	r3, [pc, #52]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007600:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007604:	d107      	bne.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007606:	f107 0318 	add.w	r3, r7, #24
 800760a:	4618      	mov	r0, r3
 800760c:	f000 f82a 	bl	8007664 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007614:	e007      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800761a:	e004      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800761c:	2300      	movs	r3, #0
 800761e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007620:	e001      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007622:	2300      	movs	r3, #0
 8007624:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007628:	4618      	mov	r0, r3
 800762a:	3740      	adds	r7, #64	@ 0x40
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	58024400 	.word	0x58024400
 8007634:	017d7840 	.word	0x017d7840

08007638 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800763c:	f7fd ffea 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 8007640:	4602      	mov	r2, r0
 8007642:	4b06      	ldr	r3, [pc, #24]	@ (800765c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	091b      	lsrs	r3, r3, #4
 8007648:	f003 0307 	and.w	r3, r3, #7
 800764c:	4904      	ldr	r1, [pc, #16]	@ (8007660 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800764e:	5ccb      	ldrb	r3, [r1, r3]
 8007650:	f003 031f 	and.w	r3, r3, #31
 8007654:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007658:	4618      	mov	r0, r3
 800765a:	bd80      	pop	{r7, pc}
 800765c:	58024400 	.word	0x58024400
 8007660:	0801201c 	.word	0x0801201c

08007664 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007664:	b480      	push	{r7}
 8007666:	b089      	sub	sp, #36	@ 0x24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800766c:	4ba1      	ldr	r3, [pc, #644]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800766e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007670:	f003 0303 	and.w	r3, r3, #3
 8007674:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007676:	4b9f      	ldr	r3, [pc, #636]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800767a:	0b1b      	lsrs	r3, r3, #12
 800767c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007680:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007682:	4b9c      	ldr	r3, [pc, #624]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007686:	091b      	lsrs	r3, r3, #4
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800768e:	4b99      	ldr	r3, [pc, #612]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007692:	08db      	lsrs	r3, r3, #3
 8007694:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	fb02 f303 	mul.w	r3, r2, r3
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 8111 	beq.w	80078d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	f000 8083 	beq.w	80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	2b02      	cmp	r3, #2
 80076be:	f200 80a1 	bhi.w	8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d056      	beq.n	800777c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80076ce:	e099      	b.n	8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076d0:	4b88      	ldr	r3, [pc, #544]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0320 	and.w	r3, r3, #32
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d02d      	beq.n	8007738 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076dc:	4b85      	ldr	r3, [pc, #532]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	08db      	lsrs	r3, r3, #3
 80076e2:	f003 0303 	and.w	r3, r3, #3
 80076e6:	4a84      	ldr	r2, [pc, #528]	@ (80078f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80076e8:	fa22 f303 	lsr.w	r3, r2, r3
 80076ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	ee07 3a90 	vmov	s15, r3
 80076f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007706:	4b7b      	ldr	r3, [pc, #492]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800770a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007716:	ed97 6a03 	vldr	s12, [r7, #12]
 800771a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80078fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800771e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800772a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800772e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007732:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007736:	e087      	b.n	8007848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	ee07 3a90 	vmov	s15, r3
 800773e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007742:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007900 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800774a:	4b6a      	ldr	r3, [pc, #424]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800774c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800774e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800775a:	ed97 6a03 	vldr	s12, [r7, #12]
 800775e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80078fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800776a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800776e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800777a:	e065      	b.n	8007848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	ee07 3a90 	vmov	s15, r3
 8007782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007786:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800778a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800778e:	4b59      	ldr	r3, [pc, #356]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007796:	ee07 3a90 	vmov	s15, r3
 800779a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800779e:	ed97 6a03 	vldr	s12, [r7, #12]
 80077a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80078fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077be:	e043      	b.n	8007848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	ee07 3a90 	vmov	s15, r3
 80077c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80077ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077d2:	4b48      	ldr	r3, [pc, #288]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077da:	ee07 3a90 	vmov	s15, r3
 80077de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80078fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007802:	e021      	b.n	8007848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	ee07 3a90 	vmov	s15, r3
 800780a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007816:	4b37      	ldr	r3, [pc, #220]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800781a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007826:	ed97 6a03 	vldr	s12, [r7, #12]
 800782a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80078fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800782e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800783a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800783e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007846:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007848:	4b2a      	ldr	r3, [pc, #168]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800784a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784c:	0a5b      	lsrs	r3, r3, #9
 800784e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007852:	ee07 3a90 	vmov	s15, r3
 8007856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800785a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800785e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007862:	edd7 6a07 	vldr	s13, [r7, #28]
 8007866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800786a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800786e:	ee17 2a90 	vmov	r2, s15
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007876:	4b1f      	ldr	r3, [pc, #124]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787a:	0c1b      	lsrs	r3, r3, #16
 800787c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007880:	ee07 3a90 	vmov	s15, r3
 8007884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007888:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800788c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007890:	edd7 6a07 	vldr	s13, [r7, #28]
 8007894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800789c:	ee17 2a90 	vmov	r2, s15
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80078a4:	4b13      	ldr	r3, [pc, #76]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a8:	0e1b      	lsrs	r3, r3, #24
 80078aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078be:	edd7 6a07 	vldr	s13, [r7, #28]
 80078c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ca:	ee17 2a90 	vmov	r2, s15
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80078d2:	e008      	b.n	80078e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	609a      	str	r2, [r3, #8]
}
 80078e6:	bf00      	nop
 80078e8:	3724      	adds	r7, #36	@ 0x24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	58024400 	.word	0x58024400
 80078f8:	03d09000 	.word	0x03d09000
 80078fc:	46000000 	.word	0x46000000
 8007900:	4c742400 	.word	0x4c742400
 8007904:	4a742400 	.word	0x4a742400
 8007908:	4bbebc20 	.word	0x4bbebc20

0800790c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800790c:	b480      	push	{r7}
 800790e:	b089      	sub	sp, #36	@ 0x24
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007914:	4ba1      	ldr	r3, [pc, #644]	@ (8007b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007918:	f003 0303 	and.w	r3, r3, #3
 800791c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800791e:	4b9f      	ldr	r3, [pc, #636]	@ (8007b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007922:	0d1b      	lsrs	r3, r3, #20
 8007924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007928:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800792a:	4b9c      	ldr	r3, [pc, #624]	@ (8007b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800792c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800792e:	0a1b      	lsrs	r3, r3, #8
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007936:	4b99      	ldr	r3, [pc, #612]	@ (8007b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800793a:	08db      	lsrs	r3, r3, #3
 800793c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	fb02 f303 	mul.w	r3, r2, r3
 8007946:	ee07 3a90 	vmov	s15, r3
 800794a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 8111 	beq.w	8007b7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	2b02      	cmp	r3, #2
 800795e:	f000 8083 	beq.w	8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	2b02      	cmp	r3, #2
 8007966:	f200 80a1 	bhi.w	8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d056      	beq.n	8007a24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007976:	e099      	b.n	8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007978:	4b88      	ldr	r3, [pc, #544]	@ (8007b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0320 	and.w	r3, r3, #32
 8007980:	2b00      	cmp	r3, #0
 8007982:	d02d      	beq.n	80079e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007984:	4b85      	ldr	r3, [pc, #532]	@ (8007b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	08db      	lsrs	r3, r3, #3
 800798a:	f003 0303 	and.w	r3, r3, #3
 800798e:	4a84      	ldr	r2, [pc, #528]	@ (8007ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007990:	fa22 f303 	lsr.w	r3, r2, r3
 8007994:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	ee07 3a90 	vmov	s15, r3
 800799c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	ee07 3a90 	vmov	s15, r3
 80079a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ae:	4b7b      	ldr	r3, [pc, #492]	@ (8007b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b6:	ee07 3a90 	vmov	s15, r3
 80079ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079be:	ed97 6a03 	vldr	s12, [r7, #12]
 80079c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80079de:	e087      	b.n	8007af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	ee07 3a90 	vmov	s15, r3
 80079e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80079ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079f2:	4b6a      	ldr	r3, [pc, #424]	@ (8007b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079fa:	ee07 3a90 	vmov	s15, r3
 80079fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a22:	e065      	b.n	8007af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	ee07 3a90 	vmov	s15, r3
 8007a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a36:	4b59      	ldr	r3, [pc, #356]	@ (8007b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3e:	ee07 3a90 	vmov	s15, r3
 8007a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a66:	e043      	b.n	8007af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	ee07 3a90 	vmov	s15, r3
 8007a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a7a:	4b48      	ldr	r3, [pc, #288]	@ (8007b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a82:	ee07 3a90 	vmov	s15, r3
 8007a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aaa:	e021      	b.n	8007af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	ee07 3a90 	vmov	s15, r3
 8007ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007abe:	4b37      	ldr	r3, [pc, #220]	@ (8007b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ad2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007af0:	4b2a      	ldr	r3, [pc, #168]	@ (8007b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af4:	0a5b      	lsrs	r3, r3, #9
 8007af6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b16:	ee17 2a90 	vmov	r2, s15
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8007b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b22:	0c1b      	lsrs	r3, r3, #16
 8007b24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b28:	ee07 3a90 	vmov	s15, r3
 8007b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b44:	ee17 2a90 	vmov	r2, s15
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007b4c:	4b13      	ldr	r3, [pc, #76]	@ (8007b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b50:	0e1b      	lsrs	r3, r3, #24
 8007b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b72:	ee17 2a90 	vmov	r2, s15
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007b7a:	e008      	b.n	8007b8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	609a      	str	r2, [r3, #8]
}
 8007b8e:	bf00      	nop
 8007b90:	3724      	adds	r7, #36	@ 0x24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	58024400 	.word	0x58024400
 8007ba0:	03d09000 	.word	0x03d09000
 8007ba4:	46000000 	.word	0x46000000
 8007ba8:	4c742400 	.word	0x4c742400
 8007bac:	4a742400 	.word	0x4a742400
 8007bb0:	4bbebc20 	.word	0x4bbebc20

08007bb4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b089      	sub	sp, #36	@ 0x24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bbc:	4ba0      	ldr	r3, [pc, #640]	@ (8007e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc0:	f003 0303 	and.w	r3, r3, #3
 8007bc4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007bc6:	4b9e      	ldr	r3, [pc, #632]	@ (8007e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bca:	091b      	lsrs	r3, r3, #4
 8007bcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bd0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007bd2:	4b9b      	ldr	r3, [pc, #620]	@ (8007e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007bdc:	4b98      	ldr	r3, [pc, #608]	@ (8007e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007be0:	08db      	lsrs	r3, r3, #3
 8007be2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	fb02 f303 	mul.w	r3, r2, r3
 8007bec:	ee07 3a90 	vmov	s15, r3
 8007bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 8111 	beq.w	8007e22 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	f000 8083 	beq.w	8007d0e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	f200 80a1 	bhi.w	8007d52 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d056      	beq.n	8007cca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007c1c:	e099      	b.n	8007d52 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c1e:	4b88      	ldr	r3, [pc, #544]	@ (8007e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d02d      	beq.n	8007c86 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c2a:	4b85      	ldr	r3, [pc, #532]	@ (8007e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	08db      	lsrs	r3, r3, #3
 8007c30:	f003 0303 	and.w	r3, r3, #3
 8007c34:	4a83      	ldr	r2, [pc, #524]	@ (8007e44 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007c36:	fa22 f303 	lsr.w	r3, r2, r3
 8007c3a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	ee07 3a90 	vmov	s15, r3
 8007c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c54:	4b7a      	ldr	r3, [pc, #488]	@ (8007e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c5c:	ee07 3a90 	vmov	s15, r3
 8007c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c64:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c68:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007e48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c80:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c84:	e087      	b.n	8007d96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	ee07 3a90 	vmov	s15, r3
 8007c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c90:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007e4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c98:	4b69      	ldr	r3, [pc, #420]	@ (8007e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca0:	ee07 3a90 	vmov	s15, r3
 8007ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cac:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007e48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cc8:	e065      	b.n	8007d96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	ee07 3a90 	vmov	s15, r3
 8007cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007e50 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cdc:	4b58      	ldr	r3, [pc, #352]	@ (8007e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce4:	ee07 3a90 	vmov	s15, r3
 8007ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cec:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cf0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007e48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007cf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d0c:	e043      	b.n	8007d96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	ee07 3a90 	vmov	s15, r3
 8007d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d18:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007d1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d20:	4b47      	ldr	r3, [pc, #284]	@ (8007e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d28:	ee07 3a90 	vmov	s15, r3
 8007d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d30:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d34:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007e48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d50:	e021      	b.n	8007d96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	ee07 3a90 	vmov	s15, r3
 8007d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d5c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007e4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007d60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d64:	4b36      	ldr	r3, [pc, #216]	@ (8007e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d6c:	ee07 3a90 	vmov	s15, r3
 8007d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d74:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d78:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007e48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d94:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007d96:	4b2a      	ldr	r3, [pc, #168]	@ (8007e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d9a:	0a5b      	lsrs	r3, r3, #9
 8007d9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007da0:	ee07 3a90 	vmov	s15, r3
 8007da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007db0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dbc:	ee17 2a90 	vmov	r2, s15
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007dc4:	4b1e      	ldr	r3, [pc, #120]	@ (8007e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc8:	0c1b      	lsrs	r3, r3, #16
 8007dca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dce:	ee07 3a90 	vmov	s15, r3
 8007dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dde:	edd7 6a07 	vldr	s13, [r7, #28]
 8007de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dea:	ee17 2a90 	vmov	r2, s15
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007df2:	4b13      	ldr	r3, [pc, #76]	@ (8007e40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df6:	0e1b      	lsrs	r3, r3, #24
 8007df8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dfc:	ee07 3a90 	vmov	s15, r3
 8007e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e18:	ee17 2a90 	vmov	r2, s15
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007e20:	e008      	b.n	8007e34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	609a      	str	r2, [r3, #8]
}
 8007e34:	bf00      	nop
 8007e36:	3724      	adds	r7, #36	@ 0x24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	58024400 	.word	0x58024400
 8007e44:	03d09000 	.word	0x03d09000
 8007e48:	46000000 	.word	0x46000000
 8007e4c:	4c742400 	.word	0x4c742400
 8007e50:	4a742400 	.word	0x4a742400
 8007e54:	4bbebc20 	.word	0x4bbebc20

08007e58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e66:	4b53      	ldr	r3, [pc, #332]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e6a:	f003 0303 	and.w	r3, r3, #3
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d101      	bne.n	8007e76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e099      	b.n	8007faa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007e76:	4b4f      	ldr	r3, [pc, #316]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a4e      	ldr	r2, [pc, #312]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007e7c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e82:	f7f9 fe07 	bl	8001a94 <HAL_GetTick>
 8007e86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e88:	e008      	b.n	8007e9c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e8a:	f7f9 fe03 	bl	8001a94 <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d901      	bls.n	8007e9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e086      	b.n	8007faa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e9c:	4b45      	ldr	r3, [pc, #276]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1f0      	bne.n	8007e8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007ea8:	4b42      	ldr	r3, [pc, #264]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	031b      	lsls	r3, r3, #12
 8007eb6:	493f      	ldr	r1, [pc, #252]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	628b      	str	r3, [r1, #40]	@ 0x28
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	025b      	lsls	r3, r3, #9
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	431a      	orrs	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	041b      	lsls	r3, r3, #16
 8007eda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	061b      	lsls	r3, r3, #24
 8007ee8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007eec:	4931      	ldr	r1, [pc, #196]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007ef2:	4b30      	ldr	r3, [pc, #192]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	492d      	ldr	r1, [pc, #180]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007f00:	4313      	orrs	r3, r2
 8007f02:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007f04:	4b2b      	ldr	r3, [pc, #172]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f08:	f023 0220 	bic.w	r2, r3, #32
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	4928      	ldr	r1, [pc, #160]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007f12:	4313      	orrs	r3, r2
 8007f14:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007f16:	4b27      	ldr	r3, [pc, #156]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1a:	4a26      	ldr	r2, [pc, #152]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007f1c:	f023 0310 	bic.w	r3, r3, #16
 8007f20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007f22:	4b24      	ldr	r3, [pc, #144]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007f24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f26:	4b24      	ldr	r3, [pc, #144]	@ (8007fb8 <RCCEx_PLL2_Config+0x160>)
 8007f28:	4013      	ands	r3, r2
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	69d2      	ldr	r2, [r2, #28]
 8007f2e:	00d2      	lsls	r2, r2, #3
 8007f30:	4920      	ldr	r1, [pc, #128]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007f36:	4b1f      	ldr	r3, [pc, #124]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007f3c:	f043 0310 	orr.w	r3, r3, #16
 8007f40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d106      	bne.n	8007f56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007f48:	4b1a      	ldr	r3, [pc, #104]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f4c:	4a19      	ldr	r2, [pc, #100]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007f4e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007f54:	e00f      	b.n	8007f76 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d106      	bne.n	8007f6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007f5c:	4b15      	ldr	r3, [pc, #84]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f60:	4a14      	ldr	r2, [pc, #80]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007f62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007f68:	e005      	b.n	8007f76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007f6a:	4b12      	ldr	r3, [pc, #72]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6e:	4a11      	ldr	r2, [pc, #68]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007f70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007f74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007f76:	4b0f      	ldr	r3, [pc, #60]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007f7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f82:	f7f9 fd87 	bl	8001a94 <HAL_GetTick>
 8007f86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f88:	e008      	b.n	8007f9c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f8a:	f7f9 fd83 	bl	8001a94 <HAL_GetTick>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d901      	bls.n	8007f9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e006      	b.n	8007faa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f9c:	4b05      	ldr	r3, [pc, #20]	@ (8007fb4 <RCCEx_PLL2_Config+0x15c>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d0f0      	beq.n	8007f8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	58024400 	.word	0x58024400
 8007fb8:	ffff0007 	.word	0xffff0007

08007fbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007fca:	4b53      	ldr	r3, [pc, #332]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 8007fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fce:	f003 0303 	and.w	r3, r3, #3
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d101      	bne.n	8007fda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e099      	b.n	800810e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007fda:	4b4f      	ldr	r3, [pc, #316]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a4e      	ldr	r2, [pc, #312]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 8007fe0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fe6:	f7f9 fd55 	bl	8001a94 <HAL_GetTick>
 8007fea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007fec:	e008      	b.n	8008000 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007fee:	f7f9 fd51 	bl	8001a94 <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d901      	bls.n	8008000 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e086      	b.n	800810e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008000:	4b45      	ldr	r3, [pc, #276]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1f0      	bne.n	8007fee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800800c:	4b42      	ldr	r3, [pc, #264]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 800800e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008010:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	051b      	lsls	r3, r3, #20
 800801a:	493f      	ldr	r1, [pc, #252]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 800801c:	4313      	orrs	r3, r2
 800801e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	3b01      	subs	r3, #1
 8008026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	3b01      	subs	r3, #1
 8008030:	025b      	lsls	r3, r3, #9
 8008032:	b29b      	uxth	r3, r3
 8008034:	431a      	orrs	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	3b01      	subs	r3, #1
 800803c:	041b      	lsls	r3, r3, #16
 800803e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008042:	431a      	orrs	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	3b01      	subs	r3, #1
 800804a:	061b      	lsls	r3, r3, #24
 800804c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008050:	4931      	ldr	r1, [pc, #196]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 8008052:	4313      	orrs	r3, r2
 8008054:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008056:	4b30      	ldr	r3, [pc, #192]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 8008058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	492d      	ldr	r1, [pc, #180]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 8008064:	4313      	orrs	r3, r2
 8008066:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008068:	4b2b      	ldr	r3, [pc, #172]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 800806a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	4928      	ldr	r1, [pc, #160]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 8008076:	4313      	orrs	r3, r2
 8008078:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800807a:	4b27      	ldr	r3, [pc, #156]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 800807c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807e:	4a26      	ldr	r2, [pc, #152]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 8008080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008084:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008086:	4b24      	ldr	r3, [pc, #144]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 8008088:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800808a:	4b24      	ldr	r3, [pc, #144]	@ (800811c <RCCEx_PLL3_Config+0x160>)
 800808c:	4013      	ands	r3, r2
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	69d2      	ldr	r2, [r2, #28]
 8008092:	00d2      	lsls	r2, r2, #3
 8008094:	4920      	ldr	r1, [pc, #128]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 8008096:	4313      	orrs	r3, r2
 8008098:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800809a:	4b1f      	ldr	r3, [pc, #124]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 800809c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809e:	4a1e      	ldr	r2, [pc, #120]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 80080a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d106      	bne.n	80080ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80080ac:	4b1a      	ldr	r3, [pc, #104]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 80080ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b0:	4a19      	ldr	r2, [pc, #100]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 80080b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80080b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80080b8:	e00f      	b.n	80080da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d106      	bne.n	80080ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80080c0:	4b15      	ldr	r3, [pc, #84]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 80080c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c4:	4a14      	ldr	r2, [pc, #80]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 80080c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80080ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80080cc:	e005      	b.n	80080da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80080ce:	4b12      	ldr	r3, [pc, #72]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 80080d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d2:	4a11      	ldr	r2, [pc, #68]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 80080d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80080d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80080da:	4b0f      	ldr	r3, [pc, #60]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a0e      	ldr	r2, [pc, #56]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 80080e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080e6:	f7f9 fcd5 	bl	8001a94 <HAL_GetTick>
 80080ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080ec:	e008      	b.n	8008100 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80080ee:	f7f9 fcd1 	bl	8001a94 <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d901      	bls.n	8008100 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e006      	b.n	800810e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008100:	4b05      	ldr	r3, [pc, #20]	@ (8008118 <RCCEx_PLL3_Config+0x15c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d0f0      	beq.n	80080ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800810c:	7bfb      	ldrb	r3, [r7, #15]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	58024400 	.word	0x58024400
 800811c:	ffff0007 	.word	0xffff0007

08008120 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e10f      	b.n	8008352 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a87      	ldr	r2, [pc, #540]	@ (800835c <HAL_SPI_Init+0x23c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00f      	beq.n	8008162 <HAL_SPI_Init+0x42>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a86      	ldr	r2, [pc, #536]	@ (8008360 <HAL_SPI_Init+0x240>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d00a      	beq.n	8008162 <HAL_SPI_Init+0x42>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a84      	ldr	r2, [pc, #528]	@ (8008364 <HAL_SPI_Init+0x244>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d005      	beq.n	8008162 <HAL_SPI_Init+0x42>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	2b0f      	cmp	r3, #15
 800815c:	d901      	bls.n	8008162 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e0f7      	b.n	8008352 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fe2e 	bl	8008dc4 <SPI_GetPacketSize>
 8008168:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a7b      	ldr	r2, [pc, #492]	@ (800835c <HAL_SPI_Init+0x23c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d00c      	beq.n	800818e <HAL_SPI_Init+0x6e>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a79      	ldr	r2, [pc, #484]	@ (8008360 <HAL_SPI_Init+0x240>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d007      	beq.n	800818e <HAL_SPI_Init+0x6e>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a78      	ldr	r2, [pc, #480]	@ (8008364 <HAL_SPI_Init+0x244>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d002      	beq.n	800818e <HAL_SPI_Init+0x6e>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b08      	cmp	r3, #8
 800818c:	d811      	bhi.n	80081b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008192:	4a72      	ldr	r2, [pc, #456]	@ (800835c <HAL_SPI_Init+0x23c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d009      	beq.n	80081ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a70      	ldr	r2, [pc, #448]	@ (8008360 <HAL_SPI_Init+0x240>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d004      	beq.n	80081ac <HAL_SPI_Init+0x8c>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a6f      	ldr	r2, [pc, #444]	@ (8008364 <HAL_SPI_Init+0x244>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d104      	bne.n	80081b6 <HAL_SPI_Init+0x96>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b10      	cmp	r3, #16
 80081b0:	d901      	bls.n	80081b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e0cd      	b.n	8008352 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d106      	bne.n	80081d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7f8 ff8e 	bl	80010ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f022 0201 	bic.w	r2, r2, #1
 80081e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80081f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081fc:	d119      	bne.n	8008232 <HAL_SPI_Init+0x112>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008206:	d103      	bne.n	8008210 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800820c:	2b00      	cmp	r3, #0
 800820e:	d008      	beq.n	8008222 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10c      	bne.n	8008232 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800821c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008220:	d107      	bne.n	8008232 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008230:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00f      	beq.n	800825e <HAL_SPI_Init+0x13e>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	2b06      	cmp	r3, #6
 8008244:	d90b      	bls.n	800825e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	e007      	b.n	800826e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800826c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69da      	ldr	r2, [r3, #28]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008276:	431a      	orrs	r2, r3
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	431a      	orrs	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008280:	ea42 0103 	orr.w	r1, r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	68da      	ldr	r2, [r3, #12]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	430a      	orrs	r2, r1
 800828e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008298:	431a      	orrs	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829e:	431a      	orrs	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	431a      	orrs	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	431a      	orrs	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	431a      	orrs	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	431a      	orrs	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	431a      	orrs	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082c2:	431a      	orrs	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	431a      	orrs	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082ce:	ea42 0103 	orr.w	r1, r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	430a      	orrs	r2, r1
 80082dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d113      	bne.n	800830e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800830c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 0201 	bic.w	r2, r2, #1
 800831c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	40013000 	.word	0x40013000
 8008360:	40003800 	.word	0x40003800
 8008364:	40003c00 	.word	0x40003c00

08008368 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af02      	add	r7, sp, #8
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	4613      	mov	r3, r2
 8008376:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3320      	adds	r3, #32
 800837e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008380:	f7f9 fb88 	bl	8001a94 <HAL_GetTick>
 8008384:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b01      	cmp	r3, #1
 8008390:	d001      	beq.n	8008396 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8008392:	2302      	movs	r3, #2
 8008394:	e1d1      	b.n	800873a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <HAL_SPI_Transmit+0x3a>
 800839c:	88fb      	ldrh	r3, [r7, #6]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e1c9      	b.n	800873a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d101      	bne.n	80083b4 <HAL_SPI_Transmit+0x4c>
 80083b0:	2302      	movs	r3, #2
 80083b2:	e1c2      	b.n	800873a <HAL_SPI_Transmit+0x3d2>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2203      	movs	r2, #3
 80083c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	88fa      	ldrh	r2, [r7, #6]
 80083d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	88fa      	ldrh	r2, [r7, #6]
 80083de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800840c:	d108      	bne.n	8008420 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	e009      	b.n	8008434 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008432:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	4b96      	ldr	r3, [pc, #600]	@ (8008694 <HAL_SPI_Transmit+0x32c>)
 800843c:	4013      	ands	r3, r2
 800843e:	88f9      	ldrh	r1, [r7, #6]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	6812      	ldr	r2, [r2, #0]
 8008444:	430b      	orrs	r3, r1
 8008446:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f042 0201 	orr.w	r2, r2, #1
 8008456:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008460:	d107      	bne.n	8008472 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008470:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	2b0f      	cmp	r3, #15
 8008478:	d947      	bls.n	800850a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800847a:	e03f      	b.n	80084fc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b02      	cmp	r3, #2
 8008488:	d114      	bne.n	80084b4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6812      	ldr	r2, [r2, #0]
 8008494:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800849a:	1d1a      	adds	r2, r3, #4
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	3b01      	subs	r3, #1
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80084b2:	e023      	b.n	80084fc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084b4:	f7f9 faee 	bl	8001a94 <HAL_GetTick>
 80084b8:	4602      	mov	r2, r0
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d803      	bhi.n	80084cc <HAL_SPI_Transmit+0x164>
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ca:	d102      	bne.n	80084d2 <HAL_SPI_Transmit+0x16a>
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d114      	bne.n	80084fc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 fba8 	bl	8008c28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e11e      	b.n	800873a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008502:	b29b      	uxth	r3, r3
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1b9      	bne.n	800847c <HAL_SPI_Transmit+0x114>
 8008508:	e0f1      	b.n	80086ee <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	2b07      	cmp	r3, #7
 8008510:	f240 80e6 	bls.w	80086e0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008514:	e05d      	b.n	80085d2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b02      	cmp	r3, #2
 8008522:	d132      	bne.n	800858a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800852a:	b29b      	uxth	r3, r3
 800852c:	2b01      	cmp	r3, #1
 800852e:	d918      	bls.n	8008562 <HAL_SPI_Transmit+0x1fa>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008534:	2b00      	cmp	r3, #0
 8008536:	d014      	beq.n	8008562 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6812      	ldr	r2, [r2, #0]
 8008542:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008548:	1d1a      	adds	r2, r3, #4
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008554:	b29b      	uxth	r3, r3
 8008556:	3b02      	subs	r3, #2
 8008558:	b29a      	uxth	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008560:	e037      	b.n	80085d2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008566:	881a      	ldrh	r2, [r3, #0]
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008570:	1c9a      	adds	r2, r3, #2
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800857c:	b29b      	uxth	r3, r3
 800857e:	3b01      	subs	r3, #1
 8008580:	b29a      	uxth	r2, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008588:	e023      	b.n	80085d2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800858a:	f7f9 fa83 	bl	8001a94 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	429a      	cmp	r2, r3
 8008598:	d803      	bhi.n	80085a2 <HAL_SPI_Transmit+0x23a>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a0:	d102      	bne.n	80085a8 <HAL_SPI_Transmit+0x240>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d114      	bne.n	80085d2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 fb3d 	bl	8008c28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e0b3      	b.n	800873a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80085d8:	b29b      	uxth	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d19b      	bne.n	8008516 <HAL_SPI_Transmit+0x1ae>
 80085de:	e086      	b.n	80086ee <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	f003 0302 	and.w	r3, r3, #2
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d154      	bne.n	8008698 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d918      	bls.n	800862c <HAL_SPI_Transmit+0x2c4>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085fe:	2b40      	cmp	r3, #64	@ 0x40
 8008600:	d914      	bls.n	800862c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6812      	ldr	r2, [r2, #0]
 800860c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008612:	1d1a      	adds	r2, r3, #4
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800861e:	b29b      	uxth	r3, r3
 8008620:	3b04      	subs	r3, #4
 8008622:	b29a      	uxth	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800862a:	e059      	b.n	80086e0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008632:	b29b      	uxth	r3, r3
 8008634:	2b01      	cmp	r3, #1
 8008636:	d917      	bls.n	8008668 <HAL_SPI_Transmit+0x300>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800863c:	2b00      	cmp	r3, #0
 800863e:	d013      	beq.n	8008668 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008644:	881a      	ldrh	r2, [r3, #0]
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800864e:	1c9a      	adds	r2, r3, #2
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800865a:	b29b      	uxth	r3, r3
 800865c:	3b02      	subs	r3, #2
 800865e:	b29a      	uxth	r2, r3
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008666:	e03b      	b.n	80086e0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3320      	adds	r3, #32
 8008672:	7812      	ldrb	r2, [r2, #0]
 8008674:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008686:	b29b      	uxth	r3, r3
 8008688:	3b01      	subs	r3, #1
 800868a:	b29a      	uxth	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008692:	e025      	b.n	80086e0 <HAL_SPI_Transmit+0x378>
 8008694:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008698:	f7f9 f9fc 	bl	8001a94 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d803      	bhi.n	80086b0 <HAL_SPI_Transmit+0x348>
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ae:	d102      	bne.n	80086b6 <HAL_SPI_Transmit+0x34e>
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d114      	bne.n	80086e0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f000 fab6 	bl	8008c28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e02c      	b.n	800873a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f47f af79 	bne.w	80085e0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2200      	movs	r2, #0
 80086f6:	2108      	movs	r1, #8
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 fb35 	bl	8008d68 <SPI_WaitOnFlagUntilTimeout>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d007      	beq.n	8008714 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800870a:	f043 0220 	orr.w	r2, r3, #32
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f000 fa87 	bl	8008c28 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e000      	b.n	800873a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008738:	2300      	movs	r3, #0
  }
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop

08008744 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	603b      	str	r3, [r7, #0]
 8008750:	4613      	mov	r3, r2
 8008752:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008758:	095b      	lsrs	r3, r3, #5
 800875a:	b29b      	uxth	r3, r3
 800875c:	3301      	adds	r3, #1
 800875e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3330      	adds	r3, #48	@ 0x30
 8008766:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008768:	f7f9 f994 	bl	8001a94 <HAL_GetTick>
 800876c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b01      	cmp	r3, #1
 8008778:	d001      	beq.n	800877e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800877a:	2302      	movs	r3, #2
 800877c:	e250      	b.n	8008c20 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <HAL_SPI_Receive+0x46>
 8008784:	88fb      	ldrh	r3, [r7, #6]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e248      	b.n	8008c20 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008794:	2b01      	cmp	r3, #1
 8008796:	d101      	bne.n	800879c <HAL_SPI_Receive+0x58>
 8008798:	2302      	movs	r3, #2
 800879a:	e241      	b.n	8008c20 <HAL_SPI_Receive+0x4dc>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2204      	movs	r2, #4
 80087a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	88fa      	ldrh	r2, [r7, #6]
 80087be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	88fa      	ldrh	r2, [r7, #6]
 80087c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80087f4:	d108      	bne.n	8008808 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008804:	601a      	str	r2, [r3, #0]
 8008806:	e009      	b.n	800881c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800881a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685a      	ldr	r2, [r3, #4]
 8008822:	4b95      	ldr	r3, [pc, #596]	@ (8008a78 <HAL_SPI_Receive+0x334>)
 8008824:	4013      	ands	r3, r2
 8008826:	88f9      	ldrh	r1, [r7, #6]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	6812      	ldr	r2, [r2, #0]
 800882c:	430b      	orrs	r3, r1
 800882e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f042 0201 	orr.w	r2, r2, #1
 800883e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008848:	d107      	bne.n	800885a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008858:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	2b0f      	cmp	r3, #15
 8008860:	d96c      	bls.n	800893c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008862:	e064      	b.n	800892e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	2b01      	cmp	r3, #1
 8008878:	d114      	bne.n	80088a4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008882:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008884:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800888a:	1d1a      	adds	r2, r3, #4
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008896:	b29b      	uxth	r3, r3
 8008898:	3b01      	subs	r3, #1
 800889a:	b29a      	uxth	r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80088a2:	e044      	b.n	800892e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	8bfa      	ldrh	r2, [r7, #30]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d919      	bls.n	80088e6 <HAL_SPI_Receive+0x1a2>
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d014      	beq.n	80088e6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80088c6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088cc:	1d1a      	adds	r2, r3, #4
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80088d8:	b29b      	uxth	r3, r3
 80088da:	3b01      	subs	r3, #1
 80088dc:	b29a      	uxth	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80088e4:	e023      	b.n	800892e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088e6:	f7f9 f8d5 	bl	8001a94 <HAL_GetTick>
 80088ea:	4602      	mov	r2, r0
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d803      	bhi.n	80088fe <HAL_SPI_Receive+0x1ba>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fc:	d102      	bne.n	8008904 <HAL_SPI_Receive+0x1c0>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d114      	bne.n	800892e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 f98f 	bl	8008c28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008910:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e178      	b.n	8008c20 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008934:	b29b      	uxth	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d194      	bne.n	8008864 <HAL_SPI_Receive+0x120>
 800893a:	e15e      	b.n	8008bfa <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	2b07      	cmp	r3, #7
 8008942:	f240 8153 	bls.w	8008bec <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008946:	e08f      	b.n	8008a68 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b01      	cmp	r3, #1
 800895c:	d114      	bne.n	8008988 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008962:	69ba      	ldr	r2, [r7, #24]
 8008964:	8812      	ldrh	r2, [r2, #0]
 8008966:	b292      	uxth	r2, r2
 8008968:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800896e:	1c9a      	adds	r2, r3, #2
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800897a:	b29b      	uxth	r3, r3
 800897c:	3b01      	subs	r3, #1
 800897e:	b29a      	uxth	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008986:	e06f      	b.n	8008a68 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800898e:	b29b      	uxth	r3, r3
 8008990:	8bfa      	ldrh	r2, [r7, #30]
 8008992:	429a      	cmp	r2, r3
 8008994:	d924      	bls.n	80089e0 <HAL_SPI_Receive+0x29c>
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01f      	beq.n	80089e0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	8812      	ldrh	r2, [r2, #0]
 80089a8:	b292      	uxth	r2, r2
 80089aa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089b0:	1c9a      	adds	r2, r3, #2
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089ba:	69ba      	ldr	r2, [r7, #24]
 80089bc:	8812      	ldrh	r2, [r2, #0]
 80089be:	b292      	uxth	r2, r2
 80089c0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089c6:	1c9a      	adds	r2, r3, #2
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	3b02      	subs	r3, #2
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80089de:	e043      	b.n	8008a68 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d119      	bne.n	8008a20 <HAL_SPI_Receive+0x2dc>
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d014      	beq.n	8008a20 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089fa:	69ba      	ldr	r2, [r7, #24]
 80089fc:	8812      	ldrh	r2, [r2, #0]
 80089fe:	b292      	uxth	r2, r2
 8008a00:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a06:	1c9a      	adds	r2, r3, #2
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	3b01      	subs	r3, #1
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008a1e:	e023      	b.n	8008a68 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a20:	f7f9 f838 	bl	8001a94 <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d803      	bhi.n	8008a38 <HAL_SPI_Receive+0x2f4>
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a36:	d102      	bne.n	8008a3e <HAL_SPI_Receive+0x2fa>
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d114      	bne.n	8008a68 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f000 f8f2 	bl	8008c28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e0db      	b.n	8008c20 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f47f af69 	bne.w	8008948 <HAL_SPI_Receive+0x204>
 8008a76:	e0c0      	b.n	8008bfa <HAL_SPI_Receive+0x4b6>
 8008a78:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d117      	bne.n	8008ac2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a9e:	7812      	ldrb	r2, [r2, #0]
 8008aa0:	b2d2      	uxtb	r2, r2
 8008aa2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008aa8:	1c5a      	adds	r2, r3, #1
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008ac0:	e094      	b.n	8008bec <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	8bfa      	ldrh	r2, [r7, #30]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d946      	bls.n	8008b5e <HAL_SPI_Receive+0x41a>
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d041      	beq.n	8008b5e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ae6:	7812      	ldrb	r2, [r2, #0]
 8008ae8:	b2d2      	uxtb	r2, r2
 8008aea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008af0:	1c5a      	adds	r2, r3, #1
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b02:	7812      	ldrb	r2, [r2, #0]
 8008b04:	b2d2      	uxtb	r2, r2
 8008b06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b0c:	1c5a      	adds	r2, r3, #1
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b1e:	7812      	ldrb	r2, [r2, #0]
 8008b20:	b2d2      	uxtb	r2, r2
 8008b22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b28:	1c5a      	adds	r2, r3, #1
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b3a:	7812      	ldrb	r2, [r2, #0]
 8008b3c:	b2d2      	uxtb	r2, r2
 8008b3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b44:	1c5a      	adds	r2, r3, #1
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	3b04      	subs	r3, #4
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008b5c:	e046      	b.n	8008bec <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d81c      	bhi.n	8008ba4 <HAL_SPI_Receive+0x460>
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d017      	beq.n	8008ba4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b80:	7812      	ldrb	r2, [r2, #0]
 8008b82:	b2d2      	uxtb	r2, r2
 8008b84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008ba2:	e023      	b.n	8008bec <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ba4:	f7f8 ff76 	bl	8001a94 <HAL_GetTick>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d803      	bhi.n	8008bbc <HAL_SPI_Receive+0x478>
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bba:	d102      	bne.n	8008bc2 <HAL_SPI_Receive+0x47e>
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d114      	bne.n	8008bec <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f000 f830 	bl	8008c28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e019      	b.n	8008c20 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f47f af41 	bne.w	8008a7c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 f814 	bl	8008c28 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e000      	b.n	8008c20 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
  }
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3720      	adds	r7, #32
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	695b      	ldr	r3, [r3, #20]
 8008c36:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	699a      	ldr	r2, [r3, #24]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f042 0208 	orr.w	r2, r2, #8
 8008c46:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	699a      	ldr	r2, [r3, #24]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f042 0210 	orr.w	r2, r2, #16
 8008c56:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f022 0201 	bic.w	r2, r2, #1
 8008c66:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6919      	ldr	r1, [r3, #16]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	4b3c      	ldr	r3, [pc, #240]	@ (8008d64 <SPI_CloseTransfer+0x13c>)
 8008c74:	400b      	ands	r3, r1
 8008c76:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689a      	ldr	r2, [r3, #8]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008c86:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	d014      	beq.n	8008cbe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f003 0320 	and.w	r3, r3, #32
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00f      	beq.n	8008cbe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ca4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	699a      	ldr	r2, [r3, #24]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f042 0220 	orr.w	r2, r2, #32
 8008cbc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d014      	beq.n	8008cf4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00f      	beq.n	8008cf4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cda:	f043 0204 	orr.w	r2, r3, #4
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	699a      	ldr	r2, [r3, #24]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cf2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00f      	beq.n	8008d1e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d04:	f043 0201 	orr.w	r2, r3, #1
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	699a      	ldr	r2, [r3, #24]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d1c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00f      	beq.n	8008d48 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d2e:	f043 0208 	orr.w	r2, r3, #8
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	699a      	ldr	r2, [r3, #24]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008d46:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008d58:	bf00      	nop
 8008d5a:	3714      	adds	r7, #20
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr
 8008d64:	fffffc90 	.word	0xfffffc90

08008d68 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	603b      	str	r3, [r7, #0]
 8008d74:	4613      	mov	r3, r2
 8008d76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008d78:	e010      	b.n	8008d9c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d7a:	f7f8 fe8b 	bl	8001a94 <HAL_GetTick>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d803      	bhi.n	8008d92 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d90:	d102      	bne.n	8008d98 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e00f      	b.n	8008dbc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	695a      	ldr	r2, [r3, #20]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	4013      	ands	r3, r2
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	bf0c      	ite	eq
 8008dac:	2301      	moveq	r3, #1
 8008dae:	2300      	movne	r3, #0
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	461a      	mov	r2, r3
 8008db4:	79fb      	ldrb	r3, [r7, #7]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d0df      	beq.n	8008d7a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dd0:	095b      	lsrs	r3, r3, #5
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	3307      	adds	r3, #7
 8008de2:	08db      	lsrs	r3, r3, #3
 8008de4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	fb02 f303 	mul.w	r3, r2, r3
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d101      	bne.n	8008e0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e049      	b.n	8008ea0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d106      	bne.n	8008e26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7f8 fd23 	bl	800186c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2202      	movs	r2, #2
 8008e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	3304      	adds	r3, #4
 8008e36:	4619      	mov	r1, r3
 8008e38:	4610      	mov	r0, r2
 8008e3a:	f000 fd59 	bl	80098f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d001      	beq.n	8008ec0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e054      	b.n	8008f6a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68da      	ldr	r2, [r3, #12]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f042 0201 	orr.w	r2, r2, #1
 8008ed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a26      	ldr	r2, [pc, #152]	@ (8008f78 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d022      	beq.n	8008f28 <HAL_TIM_Base_Start_IT+0x80>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eea:	d01d      	beq.n	8008f28 <HAL_TIM_Base_Start_IT+0x80>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a22      	ldr	r2, [pc, #136]	@ (8008f7c <HAL_TIM_Base_Start_IT+0xd4>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d018      	beq.n	8008f28 <HAL_TIM_Base_Start_IT+0x80>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a21      	ldr	r2, [pc, #132]	@ (8008f80 <HAL_TIM_Base_Start_IT+0xd8>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d013      	beq.n	8008f28 <HAL_TIM_Base_Start_IT+0x80>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a1f      	ldr	r2, [pc, #124]	@ (8008f84 <HAL_TIM_Base_Start_IT+0xdc>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d00e      	beq.n	8008f28 <HAL_TIM_Base_Start_IT+0x80>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8008f88 <HAL_TIM_Base_Start_IT+0xe0>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d009      	beq.n	8008f28 <HAL_TIM_Base_Start_IT+0x80>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a1c      	ldr	r2, [pc, #112]	@ (8008f8c <HAL_TIM_Base_Start_IT+0xe4>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d004      	beq.n	8008f28 <HAL_TIM_Base_Start_IT+0x80>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a1b      	ldr	r2, [pc, #108]	@ (8008f90 <HAL_TIM_Base_Start_IT+0xe8>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d115      	bne.n	8008f54 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689a      	ldr	r2, [r3, #8]
 8008f2e:	4b19      	ldr	r3, [pc, #100]	@ (8008f94 <HAL_TIM_Base_Start_IT+0xec>)
 8008f30:	4013      	ands	r3, r2
 8008f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b06      	cmp	r3, #6
 8008f38:	d015      	beq.n	8008f66 <HAL_TIM_Base_Start_IT+0xbe>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f40:	d011      	beq.n	8008f66 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f042 0201 	orr.w	r2, r2, #1
 8008f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f52:	e008      	b.n	8008f66 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f042 0201 	orr.w	r2, r2, #1
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	e000      	b.n	8008f68 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	40010000 	.word	0x40010000
 8008f7c:	40000400 	.word	0x40000400
 8008f80:	40000800 	.word	0x40000800
 8008f84:	40000c00 	.word	0x40000c00
 8008f88:	40010400 	.word	0x40010400
 8008f8c:	40001800 	.word	0x40001800
 8008f90:	40014000 	.word	0x40014000
 8008f94:	00010007 	.word	0x00010007

08008f98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d101      	bne.n	8008faa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e049      	b.n	800903e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d106      	bne.n	8008fc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f841 	bl	8009046 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4610      	mov	r0, r2
 8008fd8:	f000 fc8a 	bl	80098f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009046:	b480      	push	{r7}
 8009048:	b083      	sub	sp, #12
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800904e:	bf00      	nop
 8009050:	370c      	adds	r7, #12
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
	...

0800905c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d109      	bne.n	8009080 <HAL_TIM_PWM_Start+0x24>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009072:	b2db      	uxtb	r3, r3
 8009074:	2b01      	cmp	r3, #1
 8009076:	bf14      	ite	ne
 8009078:	2301      	movne	r3, #1
 800907a:	2300      	moveq	r3, #0
 800907c:	b2db      	uxtb	r3, r3
 800907e:	e03c      	b.n	80090fa <HAL_TIM_PWM_Start+0x9e>
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2b04      	cmp	r3, #4
 8009084:	d109      	bne.n	800909a <HAL_TIM_PWM_Start+0x3e>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800908c:	b2db      	uxtb	r3, r3
 800908e:	2b01      	cmp	r3, #1
 8009090:	bf14      	ite	ne
 8009092:	2301      	movne	r3, #1
 8009094:	2300      	moveq	r3, #0
 8009096:	b2db      	uxtb	r3, r3
 8009098:	e02f      	b.n	80090fa <HAL_TIM_PWM_Start+0x9e>
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	2b08      	cmp	r3, #8
 800909e:	d109      	bne.n	80090b4 <HAL_TIM_PWM_Start+0x58>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	bf14      	ite	ne
 80090ac:	2301      	movne	r3, #1
 80090ae:	2300      	moveq	r3, #0
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	e022      	b.n	80090fa <HAL_TIM_PWM_Start+0x9e>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	2b0c      	cmp	r3, #12
 80090b8:	d109      	bne.n	80090ce <HAL_TIM_PWM_Start+0x72>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	bf14      	ite	ne
 80090c6:	2301      	movne	r3, #1
 80090c8:	2300      	moveq	r3, #0
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	e015      	b.n	80090fa <HAL_TIM_PWM_Start+0x9e>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	2b10      	cmp	r3, #16
 80090d2:	d109      	bne.n	80090e8 <HAL_TIM_PWM_Start+0x8c>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	2b01      	cmp	r3, #1
 80090de:	bf14      	ite	ne
 80090e0:	2301      	movne	r3, #1
 80090e2:	2300      	moveq	r3, #0
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	e008      	b.n	80090fa <HAL_TIM_PWM_Start+0x9e>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	bf14      	ite	ne
 80090f4:	2301      	movne	r3, #1
 80090f6:	2300      	moveq	r3, #0
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d001      	beq.n	8009102 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e0a1      	b.n	8009246 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d104      	bne.n	8009112 <HAL_TIM_PWM_Start+0xb6>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2202      	movs	r2, #2
 800910c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009110:	e023      	b.n	800915a <HAL_TIM_PWM_Start+0xfe>
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b04      	cmp	r3, #4
 8009116:	d104      	bne.n	8009122 <HAL_TIM_PWM_Start+0xc6>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2202      	movs	r2, #2
 800911c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009120:	e01b      	b.n	800915a <HAL_TIM_PWM_Start+0xfe>
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	2b08      	cmp	r3, #8
 8009126:	d104      	bne.n	8009132 <HAL_TIM_PWM_Start+0xd6>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2202      	movs	r2, #2
 800912c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009130:	e013      	b.n	800915a <HAL_TIM_PWM_Start+0xfe>
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b0c      	cmp	r3, #12
 8009136:	d104      	bne.n	8009142 <HAL_TIM_PWM_Start+0xe6>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2202      	movs	r2, #2
 800913c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009140:	e00b      	b.n	800915a <HAL_TIM_PWM_Start+0xfe>
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	2b10      	cmp	r3, #16
 8009146:	d104      	bne.n	8009152 <HAL_TIM_PWM_Start+0xf6>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2202      	movs	r2, #2
 800914c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009150:	e003      	b.n	800915a <HAL_TIM_PWM_Start+0xfe>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2202      	movs	r2, #2
 8009156:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2201      	movs	r2, #1
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	4618      	mov	r0, r3
 8009164:	f000 ffde 	bl	800a124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a38      	ldr	r2, [pc, #224]	@ (8009250 <HAL_TIM_PWM_Start+0x1f4>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d013      	beq.n	800919a <HAL_TIM_PWM_Start+0x13e>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a37      	ldr	r2, [pc, #220]	@ (8009254 <HAL_TIM_PWM_Start+0x1f8>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d00e      	beq.n	800919a <HAL_TIM_PWM_Start+0x13e>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a35      	ldr	r2, [pc, #212]	@ (8009258 <HAL_TIM_PWM_Start+0x1fc>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d009      	beq.n	800919a <HAL_TIM_PWM_Start+0x13e>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a34      	ldr	r2, [pc, #208]	@ (800925c <HAL_TIM_PWM_Start+0x200>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d004      	beq.n	800919a <HAL_TIM_PWM_Start+0x13e>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a32      	ldr	r2, [pc, #200]	@ (8009260 <HAL_TIM_PWM_Start+0x204>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d101      	bne.n	800919e <HAL_TIM_PWM_Start+0x142>
 800919a:	2301      	movs	r3, #1
 800919c:	e000      	b.n	80091a0 <HAL_TIM_PWM_Start+0x144>
 800919e:	2300      	movs	r3, #0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d007      	beq.n	80091b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80091b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a25      	ldr	r2, [pc, #148]	@ (8009250 <HAL_TIM_PWM_Start+0x1f4>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d022      	beq.n	8009204 <HAL_TIM_PWM_Start+0x1a8>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091c6:	d01d      	beq.n	8009204 <HAL_TIM_PWM_Start+0x1a8>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a25      	ldr	r2, [pc, #148]	@ (8009264 <HAL_TIM_PWM_Start+0x208>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d018      	beq.n	8009204 <HAL_TIM_PWM_Start+0x1a8>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a24      	ldr	r2, [pc, #144]	@ (8009268 <HAL_TIM_PWM_Start+0x20c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d013      	beq.n	8009204 <HAL_TIM_PWM_Start+0x1a8>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a22      	ldr	r2, [pc, #136]	@ (800926c <HAL_TIM_PWM_Start+0x210>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d00e      	beq.n	8009204 <HAL_TIM_PWM_Start+0x1a8>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a1a      	ldr	r2, [pc, #104]	@ (8009254 <HAL_TIM_PWM_Start+0x1f8>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d009      	beq.n	8009204 <HAL_TIM_PWM_Start+0x1a8>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a1e      	ldr	r2, [pc, #120]	@ (8009270 <HAL_TIM_PWM_Start+0x214>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d004      	beq.n	8009204 <HAL_TIM_PWM_Start+0x1a8>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a16      	ldr	r2, [pc, #88]	@ (8009258 <HAL_TIM_PWM_Start+0x1fc>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d115      	bne.n	8009230 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689a      	ldr	r2, [r3, #8]
 800920a:	4b1a      	ldr	r3, [pc, #104]	@ (8009274 <HAL_TIM_PWM_Start+0x218>)
 800920c:	4013      	ands	r3, r2
 800920e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2b06      	cmp	r3, #6
 8009214:	d015      	beq.n	8009242 <HAL_TIM_PWM_Start+0x1e6>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800921c:	d011      	beq.n	8009242 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f042 0201 	orr.w	r2, r2, #1
 800922c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800922e:	e008      	b.n	8009242 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f042 0201 	orr.w	r2, r2, #1
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	e000      	b.n	8009244 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009242:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	40010000 	.word	0x40010000
 8009254:	40010400 	.word	0x40010400
 8009258:	40014000 	.word	0x40014000
 800925c:	40014400 	.word	0x40014400
 8009260:	40014800 	.word	0x40014800
 8009264:	40000400 	.word	0x40000400
 8009268:	40000800 	.word	0x40000800
 800926c:	40000c00 	.word	0x40000c00
 8009270:	40001800 	.word	0x40001800
 8009274:	00010007 	.word	0x00010007

08009278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f003 0302 	and.w	r3, r3, #2
 8009296:	2b00      	cmp	r3, #0
 8009298:	d020      	beq.n	80092dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f003 0302 	and.w	r3, r3, #2
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d01b      	beq.n	80092dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f06f 0202 	mvn.w	r2, #2
 80092ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	f003 0303 	and.w	r3, r3, #3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 faf6 	bl	80098b4 <HAL_TIM_IC_CaptureCallback>
 80092c8:	e005      	b.n	80092d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fae8 	bl	80098a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 faf9 	bl	80098c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	f003 0304 	and.w	r3, r3, #4
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d020      	beq.n	8009328 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f003 0304 	and.w	r3, r3, #4
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d01b      	beq.n	8009328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f06f 0204 	mvn.w	r2, #4
 80092f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2202      	movs	r2, #2
 80092fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	699b      	ldr	r3, [r3, #24]
 8009306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800930a:	2b00      	cmp	r3, #0
 800930c:	d003      	beq.n	8009316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fad0 	bl	80098b4 <HAL_TIM_IC_CaptureCallback>
 8009314:	e005      	b.n	8009322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fac2 	bl	80098a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 fad3 	bl	80098c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	f003 0308 	and.w	r3, r3, #8
 800932e:	2b00      	cmp	r3, #0
 8009330:	d020      	beq.n	8009374 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f003 0308 	and.w	r3, r3, #8
 8009338:	2b00      	cmp	r3, #0
 800933a:	d01b      	beq.n	8009374 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f06f 0208 	mvn.w	r2, #8
 8009344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2204      	movs	r2, #4
 800934a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	f003 0303 	and.w	r3, r3, #3
 8009356:	2b00      	cmp	r3, #0
 8009358:	d003      	beq.n	8009362 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 faaa 	bl	80098b4 <HAL_TIM_IC_CaptureCallback>
 8009360:	e005      	b.n	800936e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fa9c 	bl	80098a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 faad 	bl	80098c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	f003 0310 	and.w	r3, r3, #16
 800937a:	2b00      	cmp	r3, #0
 800937c:	d020      	beq.n	80093c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f003 0310 	and.w	r3, r3, #16
 8009384:	2b00      	cmp	r3, #0
 8009386:	d01b      	beq.n	80093c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f06f 0210 	mvn.w	r2, #16
 8009390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2208      	movs	r2, #8
 8009396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	69db      	ldr	r3, [r3, #28]
 800939e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d003      	beq.n	80093ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fa84 	bl	80098b4 <HAL_TIM_IC_CaptureCallback>
 80093ac:	e005      	b.n	80093ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fa76 	bl	80098a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fa87 	bl	80098c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00c      	beq.n	80093e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d007      	beq.n	80093e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f06f 0201 	mvn.w	r2, #1
 80093dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7f7 fdbc 	bl	8000f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d104      	bne.n	80093f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00c      	beq.n	8009412 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d007      	beq.n	8009412 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800940a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 ffc5 	bl	800a39c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00c      	beq.n	8009436 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009422:	2b00      	cmp	r3, #0
 8009424:	d007      	beq.n	8009436 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800942e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 ffbd 	bl	800a3b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00c      	beq.n	800945a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009446:	2b00      	cmp	r3, #0
 8009448:	d007      	beq.n	800945a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fa41 	bl	80098dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	f003 0320 	and.w	r3, r3, #32
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00c      	beq.n	800947e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f003 0320 	and.w	r3, r3, #32
 800946a:	2b00      	cmp	r3, #0
 800946c:	d007      	beq.n	800947e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f06f 0220 	mvn.w	r2, #32
 8009476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 ff85 	bl	800a388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800947e:	bf00      	nop
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
	...

08009488 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d101      	bne.n	80094a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094a2:	2302      	movs	r3, #2
 80094a4:	e0ff      	b.n	80096a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2b14      	cmp	r3, #20
 80094b2:	f200 80f0 	bhi.w	8009696 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80094b6:	a201      	add	r2, pc, #4	@ (adr r2, 80094bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094bc:	08009511 	.word	0x08009511
 80094c0:	08009697 	.word	0x08009697
 80094c4:	08009697 	.word	0x08009697
 80094c8:	08009697 	.word	0x08009697
 80094cc:	08009551 	.word	0x08009551
 80094d0:	08009697 	.word	0x08009697
 80094d4:	08009697 	.word	0x08009697
 80094d8:	08009697 	.word	0x08009697
 80094dc:	08009593 	.word	0x08009593
 80094e0:	08009697 	.word	0x08009697
 80094e4:	08009697 	.word	0x08009697
 80094e8:	08009697 	.word	0x08009697
 80094ec:	080095d3 	.word	0x080095d3
 80094f0:	08009697 	.word	0x08009697
 80094f4:	08009697 	.word	0x08009697
 80094f8:	08009697 	.word	0x08009697
 80094fc:	08009615 	.word	0x08009615
 8009500:	08009697 	.word	0x08009697
 8009504:	08009697 	.word	0x08009697
 8009508:	08009697 	.word	0x08009697
 800950c:	08009655 	.word	0x08009655
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68b9      	ldr	r1, [r7, #8]
 8009516:	4618      	mov	r0, r3
 8009518:	f000 fa90 	bl	8009a3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	699a      	ldr	r2, [r3, #24]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f042 0208 	orr.w	r2, r2, #8
 800952a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	699a      	ldr	r2, [r3, #24]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f022 0204 	bic.w	r2, r2, #4
 800953a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6999      	ldr	r1, [r3, #24]
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	691a      	ldr	r2, [r3, #16]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	430a      	orrs	r2, r1
 800954c:	619a      	str	r2, [r3, #24]
      break;
 800954e:	e0a5      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68b9      	ldr	r1, [r7, #8]
 8009556:	4618      	mov	r0, r3
 8009558:	f000 fb00 	bl	8009b5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	699a      	ldr	r2, [r3, #24]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800956a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	699a      	ldr	r2, [r3, #24]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800957a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6999      	ldr	r1, [r3, #24]
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	021a      	lsls	r2, r3, #8
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	430a      	orrs	r2, r1
 800958e:	619a      	str	r2, [r3, #24]
      break;
 8009590:	e084      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68b9      	ldr	r1, [r7, #8]
 8009598:	4618      	mov	r0, r3
 800959a:	f000 fb69 	bl	8009c70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	69da      	ldr	r2, [r3, #28]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f042 0208 	orr.w	r2, r2, #8
 80095ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	69da      	ldr	r2, [r3, #28]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f022 0204 	bic.w	r2, r2, #4
 80095bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	69d9      	ldr	r1, [r3, #28]
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	691a      	ldr	r2, [r3, #16]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	430a      	orrs	r2, r1
 80095ce:	61da      	str	r2, [r3, #28]
      break;
 80095d0:	e064      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68b9      	ldr	r1, [r7, #8]
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 fbd1 	bl	8009d80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69da      	ldr	r2, [r3, #28]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	69da      	ldr	r2, [r3, #28]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	69d9      	ldr	r1, [r3, #28]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	021a      	lsls	r2, r3, #8
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	61da      	str	r2, [r3, #28]
      break;
 8009612:	e043      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68b9      	ldr	r1, [r7, #8]
 800961a:	4618      	mov	r0, r3
 800961c:	f000 fc1a 	bl	8009e54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f042 0208 	orr.w	r2, r2, #8
 800962e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f022 0204 	bic.w	r2, r2, #4
 800963e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	691a      	ldr	r2, [r3, #16]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009652:	e023      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68b9      	ldr	r1, [r7, #8]
 800965a:	4618      	mov	r0, r3
 800965c:	f000 fc5e 	bl	8009f1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800966e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800967e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	021a      	lsls	r2, r3, #8
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	430a      	orrs	r2, r1
 8009692:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009694:	e002      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	75fb      	strb	r3, [r7, #23]
      break;
 800969a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80096a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop

080096b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d101      	bne.n	80096cc <HAL_TIM_ConfigClockSource+0x1c>
 80096c8:	2302      	movs	r3, #2
 80096ca:	e0dc      	b.n	8009886 <HAL_TIM_ConfigClockSource+0x1d6>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2202      	movs	r2, #2
 80096d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	4b6a      	ldr	r3, [pc, #424]	@ (8009890 <HAL_TIM_ConfigClockSource+0x1e0>)
 80096e8:	4013      	ands	r3, r2
 80096ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a64      	ldr	r2, [pc, #400]	@ (8009894 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009702:	4293      	cmp	r3, r2
 8009704:	f000 80a9 	beq.w	800985a <HAL_TIM_ConfigClockSource+0x1aa>
 8009708:	4a62      	ldr	r2, [pc, #392]	@ (8009894 <HAL_TIM_ConfigClockSource+0x1e4>)
 800970a:	4293      	cmp	r3, r2
 800970c:	f200 80ae 	bhi.w	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 8009710:	4a61      	ldr	r2, [pc, #388]	@ (8009898 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009712:	4293      	cmp	r3, r2
 8009714:	f000 80a1 	beq.w	800985a <HAL_TIM_ConfigClockSource+0x1aa>
 8009718:	4a5f      	ldr	r2, [pc, #380]	@ (8009898 <HAL_TIM_ConfigClockSource+0x1e8>)
 800971a:	4293      	cmp	r3, r2
 800971c:	f200 80a6 	bhi.w	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 8009720:	4a5e      	ldr	r2, [pc, #376]	@ (800989c <HAL_TIM_ConfigClockSource+0x1ec>)
 8009722:	4293      	cmp	r3, r2
 8009724:	f000 8099 	beq.w	800985a <HAL_TIM_ConfigClockSource+0x1aa>
 8009728:	4a5c      	ldr	r2, [pc, #368]	@ (800989c <HAL_TIM_ConfigClockSource+0x1ec>)
 800972a:	4293      	cmp	r3, r2
 800972c:	f200 809e 	bhi.w	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 8009730:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009734:	f000 8091 	beq.w	800985a <HAL_TIM_ConfigClockSource+0x1aa>
 8009738:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800973c:	f200 8096 	bhi.w	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 8009740:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009744:	f000 8089 	beq.w	800985a <HAL_TIM_ConfigClockSource+0x1aa>
 8009748:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800974c:	f200 808e 	bhi.w	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 8009750:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009754:	d03e      	beq.n	80097d4 <HAL_TIM_ConfigClockSource+0x124>
 8009756:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800975a:	f200 8087 	bhi.w	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 800975e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009762:	f000 8086 	beq.w	8009872 <HAL_TIM_ConfigClockSource+0x1c2>
 8009766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800976a:	d87f      	bhi.n	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 800976c:	2b70      	cmp	r3, #112	@ 0x70
 800976e:	d01a      	beq.n	80097a6 <HAL_TIM_ConfigClockSource+0xf6>
 8009770:	2b70      	cmp	r3, #112	@ 0x70
 8009772:	d87b      	bhi.n	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 8009774:	2b60      	cmp	r3, #96	@ 0x60
 8009776:	d050      	beq.n	800981a <HAL_TIM_ConfigClockSource+0x16a>
 8009778:	2b60      	cmp	r3, #96	@ 0x60
 800977a:	d877      	bhi.n	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 800977c:	2b50      	cmp	r3, #80	@ 0x50
 800977e:	d03c      	beq.n	80097fa <HAL_TIM_ConfigClockSource+0x14a>
 8009780:	2b50      	cmp	r3, #80	@ 0x50
 8009782:	d873      	bhi.n	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 8009784:	2b40      	cmp	r3, #64	@ 0x40
 8009786:	d058      	beq.n	800983a <HAL_TIM_ConfigClockSource+0x18a>
 8009788:	2b40      	cmp	r3, #64	@ 0x40
 800978a:	d86f      	bhi.n	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 800978c:	2b30      	cmp	r3, #48	@ 0x30
 800978e:	d064      	beq.n	800985a <HAL_TIM_ConfigClockSource+0x1aa>
 8009790:	2b30      	cmp	r3, #48	@ 0x30
 8009792:	d86b      	bhi.n	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 8009794:	2b20      	cmp	r3, #32
 8009796:	d060      	beq.n	800985a <HAL_TIM_ConfigClockSource+0x1aa>
 8009798:	2b20      	cmp	r3, #32
 800979a:	d867      	bhi.n	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 800979c:	2b00      	cmp	r3, #0
 800979e:	d05c      	beq.n	800985a <HAL_TIM_ConfigClockSource+0x1aa>
 80097a0:	2b10      	cmp	r3, #16
 80097a2:	d05a      	beq.n	800985a <HAL_TIM_ConfigClockSource+0x1aa>
 80097a4:	e062      	b.n	800986c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80097b6:	f000 fc95 	bl	800a0e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80097c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	609a      	str	r2, [r3, #8]
      break;
 80097d2:	e04f      	b.n	8009874 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80097e4:	f000 fc7e 	bl	800a0e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	689a      	ldr	r2, [r3, #8]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80097f6:	609a      	str	r2, [r3, #8]
      break;
 80097f8:	e03c      	b.n	8009874 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009806:	461a      	mov	r2, r3
 8009808:	f000 fbee 	bl	8009fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2150      	movs	r1, #80	@ 0x50
 8009812:	4618      	mov	r0, r3
 8009814:	f000 fc48 	bl	800a0a8 <TIM_ITRx_SetConfig>
      break;
 8009818:	e02c      	b.n	8009874 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009826:	461a      	mov	r2, r3
 8009828:	f000 fc0d 	bl	800a046 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2160      	movs	r1, #96	@ 0x60
 8009832:	4618      	mov	r0, r3
 8009834:	f000 fc38 	bl	800a0a8 <TIM_ITRx_SetConfig>
      break;
 8009838:	e01c      	b.n	8009874 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009846:	461a      	mov	r2, r3
 8009848:	f000 fbce 	bl	8009fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2140      	movs	r1, #64	@ 0x40
 8009852:	4618      	mov	r0, r3
 8009854:	f000 fc28 	bl	800a0a8 <TIM_ITRx_SetConfig>
      break;
 8009858:	e00c      	b.n	8009874 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4619      	mov	r1, r3
 8009864:	4610      	mov	r0, r2
 8009866:	f000 fc1f 	bl	800a0a8 <TIM_ITRx_SetConfig>
      break;
 800986a:	e003      	b.n	8009874 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	73fb      	strb	r3, [r7, #15]
      break;
 8009870:	e000      	b.n	8009874 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009884:	7bfb      	ldrb	r3, [r7, #15]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	ffceff88 	.word	0xffceff88
 8009894:	00100040 	.word	0x00100040
 8009898:	00100030 	.word	0x00100030
 800989c:	00100020 	.word	0x00100020

080098a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098a8:	bf00      	nop
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a46      	ldr	r2, [pc, #280]	@ (8009a1c <TIM_Base_SetConfig+0x12c>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d013      	beq.n	8009930 <TIM_Base_SetConfig+0x40>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800990e:	d00f      	beq.n	8009930 <TIM_Base_SetConfig+0x40>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a43      	ldr	r2, [pc, #268]	@ (8009a20 <TIM_Base_SetConfig+0x130>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d00b      	beq.n	8009930 <TIM_Base_SetConfig+0x40>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a42      	ldr	r2, [pc, #264]	@ (8009a24 <TIM_Base_SetConfig+0x134>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d007      	beq.n	8009930 <TIM_Base_SetConfig+0x40>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a41      	ldr	r2, [pc, #260]	@ (8009a28 <TIM_Base_SetConfig+0x138>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d003      	beq.n	8009930 <TIM_Base_SetConfig+0x40>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a40      	ldr	r2, [pc, #256]	@ (8009a2c <TIM_Base_SetConfig+0x13c>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d108      	bne.n	8009942 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	4313      	orrs	r3, r2
 8009940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a35      	ldr	r2, [pc, #212]	@ (8009a1c <TIM_Base_SetConfig+0x12c>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d01f      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009950:	d01b      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a32      	ldr	r2, [pc, #200]	@ (8009a20 <TIM_Base_SetConfig+0x130>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d017      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a31      	ldr	r2, [pc, #196]	@ (8009a24 <TIM_Base_SetConfig+0x134>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d013      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a30      	ldr	r2, [pc, #192]	@ (8009a28 <TIM_Base_SetConfig+0x138>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d00f      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a2f      	ldr	r2, [pc, #188]	@ (8009a2c <TIM_Base_SetConfig+0x13c>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d00b      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a2e      	ldr	r2, [pc, #184]	@ (8009a30 <TIM_Base_SetConfig+0x140>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d007      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a2d      	ldr	r2, [pc, #180]	@ (8009a34 <TIM_Base_SetConfig+0x144>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d003      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a2c      	ldr	r2, [pc, #176]	@ (8009a38 <TIM_Base_SetConfig+0x148>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d108      	bne.n	800999c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	4313      	orrs	r3, r2
 800999a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	689a      	ldr	r2, [r3, #8]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a16      	ldr	r2, [pc, #88]	@ (8009a1c <TIM_Base_SetConfig+0x12c>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d00f      	beq.n	80099e8 <TIM_Base_SetConfig+0xf8>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a18      	ldr	r2, [pc, #96]	@ (8009a2c <TIM_Base_SetConfig+0x13c>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d00b      	beq.n	80099e8 <TIM_Base_SetConfig+0xf8>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a17      	ldr	r2, [pc, #92]	@ (8009a30 <TIM_Base_SetConfig+0x140>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d007      	beq.n	80099e8 <TIM_Base_SetConfig+0xf8>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a16      	ldr	r2, [pc, #88]	@ (8009a34 <TIM_Base_SetConfig+0x144>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d003      	beq.n	80099e8 <TIM_Base_SetConfig+0xf8>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a15      	ldr	r2, [pc, #84]	@ (8009a38 <TIM_Base_SetConfig+0x148>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d103      	bne.n	80099f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	691a      	ldr	r2, [r3, #16]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2201      	movs	r2, #1
 80099f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	f003 0301 	and.w	r3, r3, #1
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d105      	bne.n	8009a0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	f023 0201 	bic.w	r2, r3, #1
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	611a      	str	r2, [r3, #16]
  }
}
 8009a0e:	bf00      	nop
 8009a10:	3714      	adds	r7, #20
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	40010000 	.word	0x40010000
 8009a20:	40000400 	.word	0x40000400
 8009a24:	40000800 	.word	0x40000800
 8009a28:	40000c00 	.word	0x40000c00
 8009a2c:	40010400 	.word	0x40010400
 8009a30:	40014000 	.word	0x40014000
 8009a34:	40014400 	.word	0x40014400
 8009a38:	40014800 	.word	0x40014800

08009a3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a1b      	ldr	r3, [r3, #32]
 8009a50:	f023 0201 	bic.w	r2, r3, #1
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	699b      	ldr	r3, [r3, #24]
 8009a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	4b37      	ldr	r3, [pc, #220]	@ (8009b44 <TIM_OC1_SetConfig+0x108>)
 8009a68:	4013      	ands	r3, r2
 8009a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f023 0303 	bic.w	r3, r3, #3
 8009a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f023 0302 	bic.w	r3, r3, #2
 8009a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a2d      	ldr	r2, [pc, #180]	@ (8009b48 <TIM_OC1_SetConfig+0x10c>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d00f      	beq.n	8009ab8 <TIM_OC1_SetConfig+0x7c>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8009b4c <TIM_OC1_SetConfig+0x110>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d00b      	beq.n	8009ab8 <TIM_OC1_SetConfig+0x7c>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a2b      	ldr	r2, [pc, #172]	@ (8009b50 <TIM_OC1_SetConfig+0x114>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d007      	beq.n	8009ab8 <TIM_OC1_SetConfig+0x7c>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8009b54 <TIM_OC1_SetConfig+0x118>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d003      	beq.n	8009ab8 <TIM_OC1_SetConfig+0x7c>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a29      	ldr	r2, [pc, #164]	@ (8009b58 <TIM_OC1_SetConfig+0x11c>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d10c      	bne.n	8009ad2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	f023 0308 	bic.w	r3, r3, #8
 8009abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	697a      	ldr	r2, [r7, #20]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	f023 0304 	bic.w	r3, r3, #4
 8009ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8009b48 <TIM_OC1_SetConfig+0x10c>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d00f      	beq.n	8009afa <TIM_OC1_SetConfig+0xbe>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a1b      	ldr	r2, [pc, #108]	@ (8009b4c <TIM_OC1_SetConfig+0x110>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d00b      	beq.n	8009afa <TIM_OC1_SetConfig+0xbe>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8009b50 <TIM_OC1_SetConfig+0x114>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d007      	beq.n	8009afa <TIM_OC1_SetConfig+0xbe>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a19      	ldr	r2, [pc, #100]	@ (8009b54 <TIM_OC1_SetConfig+0x118>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d003      	beq.n	8009afa <TIM_OC1_SetConfig+0xbe>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a18      	ldr	r2, [pc, #96]	@ (8009b58 <TIM_OC1_SetConfig+0x11c>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d111      	bne.n	8009b1e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	693a      	ldr	r2, [r7, #16]
 8009b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	685a      	ldr	r2, [r3, #4]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	697a      	ldr	r2, [r7, #20]
 8009b36:	621a      	str	r2, [r3, #32]
}
 8009b38:	bf00      	nop
 8009b3a:	371c      	adds	r7, #28
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	fffeff8f 	.word	0xfffeff8f
 8009b48:	40010000 	.word	0x40010000
 8009b4c:	40010400 	.word	0x40010400
 8009b50:	40014000 	.word	0x40014000
 8009b54:	40014400 	.word	0x40014400
 8009b58:	40014800 	.word	0x40014800

08009b5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b087      	sub	sp, #28
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a1b      	ldr	r3, [r3, #32]
 8009b70:	f023 0210 	bic.w	r2, r3, #16
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	699b      	ldr	r3, [r3, #24]
 8009b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	4b34      	ldr	r3, [pc, #208]	@ (8009c58 <TIM_OC2_SetConfig+0xfc>)
 8009b88:	4013      	ands	r3, r2
 8009b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	021b      	lsls	r3, r3, #8
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	f023 0320 	bic.w	r3, r3, #32
 8009ba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	011b      	lsls	r3, r3, #4
 8009bae:	697a      	ldr	r2, [r7, #20]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a29      	ldr	r2, [pc, #164]	@ (8009c5c <TIM_OC2_SetConfig+0x100>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d003      	beq.n	8009bc4 <TIM_OC2_SetConfig+0x68>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a28      	ldr	r2, [pc, #160]	@ (8009c60 <TIM_OC2_SetConfig+0x104>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d10d      	bne.n	8009be0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	011b      	lsls	r3, r3, #4
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a1e      	ldr	r2, [pc, #120]	@ (8009c5c <TIM_OC2_SetConfig+0x100>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d00f      	beq.n	8009c08 <TIM_OC2_SetConfig+0xac>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a1d      	ldr	r2, [pc, #116]	@ (8009c60 <TIM_OC2_SetConfig+0x104>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d00b      	beq.n	8009c08 <TIM_OC2_SetConfig+0xac>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8009c64 <TIM_OC2_SetConfig+0x108>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d007      	beq.n	8009c08 <TIM_OC2_SetConfig+0xac>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8009c68 <TIM_OC2_SetConfig+0x10c>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d003      	beq.n	8009c08 <TIM_OC2_SetConfig+0xac>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a1a      	ldr	r2, [pc, #104]	@ (8009c6c <TIM_OC2_SetConfig+0x110>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d113      	bne.n	8009c30 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009c0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	695b      	ldr	r3, [r3, #20]
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	621a      	str	r2, [r3, #32]
}
 8009c4a:	bf00      	nop
 8009c4c:	371c      	adds	r7, #28
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	feff8fff 	.word	0xfeff8fff
 8009c5c:	40010000 	.word	0x40010000
 8009c60:	40010400 	.word	0x40010400
 8009c64:	40014000 	.word	0x40014000
 8009c68:	40014400 	.word	0x40014400
 8009c6c:	40014800 	.word	0x40014800

08009c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b087      	sub	sp, #28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a1b      	ldr	r3, [r3, #32]
 8009c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a1b      	ldr	r3, [r3, #32]
 8009c84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	69db      	ldr	r3, [r3, #28]
 8009c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	4b33      	ldr	r3, [pc, #204]	@ (8009d68 <TIM_OC3_SetConfig+0xf8>)
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f023 0303 	bic.w	r3, r3, #3
 8009ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	021b      	lsls	r3, r3, #8
 8009cc0:	697a      	ldr	r2, [r7, #20]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a28      	ldr	r2, [pc, #160]	@ (8009d6c <TIM_OC3_SetConfig+0xfc>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d003      	beq.n	8009cd6 <TIM_OC3_SetConfig+0x66>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a27      	ldr	r2, [pc, #156]	@ (8009d70 <TIM_OC3_SetConfig+0x100>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d10d      	bne.n	8009cf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	021b      	lsls	r3, r3, #8
 8009ce4:	697a      	ldr	r2, [r7, #20]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8009d6c <TIM_OC3_SetConfig+0xfc>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d00f      	beq.n	8009d1a <TIM_OC3_SetConfig+0xaa>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8009d70 <TIM_OC3_SetConfig+0x100>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d00b      	beq.n	8009d1a <TIM_OC3_SetConfig+0xaa>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a1b      	ldr	r2, [pc, #108]	@ (8009d74 <TIM_OC3_SetConfig+0x104>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d007      	beq.n	8009d1a <TIM_OC3_SetConfig+0xaa>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a1a      	ldr	r2, [pc, #104]	@ (8009d78 <TIM_OC3_SetConfig+0x108>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d003      	beq.n	8009d1a <TIM_OC3_SetConfig+0xaa>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a19      	ldr	r2, [pc, #100]	@ (8009d7c <TIM_OC3_SetConfig+0x10c>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d113      	bne.n	8009d42 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	011b      	lsls	r3, r3, #4
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	011b      	lsls	r3, r3, #4
 8009d3c:	693a      	ldr	r2, [r7, #16]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	621a      	str	r2, [r3, #32]
}
 8009d5c:	bf00      	nop
 8009d5e:	371c      	adds	r7, #28
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	fffeff8f 	.word	0xfffeff8f
 8009d6c:	40010000 	.word	0x40010000
 8009d70:	40010400 	.word	0x40010400
 8009d74:	40014000 	.word	0x40014000
 8009d78:	40014400 	.word	0x40014400
 8009d7c:	40014800 	.word	0x40014800

08009d80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b087      	sub	sp, #28
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a1b      	ldr	r3, [r3, #32]
 8009d94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	4b24      	ldr	r3, [pc, #144]	@ (8009e3c <TIM_OC4_SetConfig+0xbc>)
 8009dac:	4013      	ands	r3, r2
 8009dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	021b      	lsls	r3, r3, #8
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009dca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	031b      	lsls	r3, r3, #12
 8009dd2:	693a      	ldr	r2, [r7, #16]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a19      	ldr	r2, [pc, #100]	@ (8009e40 <TIM_OC4_SetConfig+0xc0>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d00f      	beq.n	8009e00 <TIM_OC4_SetConfig+0x80>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a18      	ldr	r2, [pc, #96]	@ (8009e44 <TIM_OC4_SetConfig+0xc4>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d00b      	beq.n	8009e00 <TIM_OC4_SetConfig+0x80>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a17      	ldr	r2, [pc, #92]	@ (8009e48 <TIM_OC4_SetConfig+0xc8>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d007      	beq.n	8009e00 <TIM_OC4_SetConfig+0x80>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a16      	ldr	r2, [pc, #88]	@ (8009e4c <TIM_OC4_SetConfig+0xcc>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d003      	beq.n	8009e00 <TIM_OC4_SetConfig+0x80>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a15      	ldr	r2, [pc, #84]	@ (8009e50 <TIM_OC4_SetConfig+0xd0>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d109      	bne.n	8009e14 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	695b      	ldr	r3, [r3, #20]
 8009e0c:	019b      	lsls	r3, r3, #6
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	685a      	ldr	r2, [r3, #4]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	621a      	str	r2, [r3, #32]
}
 8009e2e:	bf00      	nop
 8009e30:	371c      	adds	r7, #28
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	feff8fff 	.word	0xfeff8fff
 8009e40:	40010000 	.word	0x40010000
 8009e44:	40010400 	.word	0x40010400
 8009e48:	40014000 	.word	0x40014000
 8009e4c:	40014400 	.word	0x40014400
 8009e50:	40014800 	.word	0x40014800

08009e54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b087      	sub	sp, #28
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a1b      	ldr	r3, [r3, #32]
 8009e62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a1b      	ldr	r3, [r3, #32]
 8009e68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	4b21      	ldr	r3, [pc, #132]	@ (8009f04 <TIM_OC5_SetConfig+0xb0>)
 8009e80:	4013      	ands	r3, r2
 8009e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009e94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	041b      	lsls	r3, r3, #16
 8009e9c:	693a      	ldr	r2, [r7, #16]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a18      	ldr	r2, [pc, #96]	@ (8009f08 <TIM_OC5_SetConfig+0xb4>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d00f      	beq.n	8009eca <TIM_OC5_SetConfig+0x76>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a17      	ldr	r2, [pc, #92]	@ (8009f0c <TIM_OC5_SetConfig+0xb8>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d00b      	beq.n	8009eca <TIM_OC5_SetConfig+0x76>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a16      	ldr	r2, [pc, #88]	@ (8009f10 <TIM_OC5_SetConfig+0xbc>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d007      	beq.n	8009eca <TIM_OC5_SetConfig+0x76>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4a15      	ldr	r2, [pc, #84]	@ (8009f14 <TIM_OC5_SetConfig+0xc0>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d003      	beq.n	8009eca <TIM_OC5_SetConfig+0x76>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	4a14      	ldr	r2, [pc, #80]	@ (8009f18 <TIM_OC5_SetConfig+0xc4>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d109      	bne.n	8009ede <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	695b      	ldr	r3, [r3, #20]
 8009ed6:	021b      	lsls	r3, r3, #8
 8009ed8:	697a      	ldr	r2, [r7, #20]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	685a      	ldr	r2, [r3, #4]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	693a      	ldr	r2, [r7, #16]
 8009ef6:	621a      	str	r2, [r3, #32]
}
 8009ef8:	bf00      	nop
 8009efa:	371c      	adds	r7, #28
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr
 8009f04:	fffeff8f 	.word	0xfffeff8f
 8009f08:	40010000 	.word	0x40010000
 8009f0c:	40010400 	.word	0x40010400
 8009f10:	40014000 	.word	0x40014000
 8009f14:	40014400 	.word	0x40014400
 8009f18:	40014800 	.word	0x40014800

08009f1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b087      	sub	sp, #28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a1b      	ldr	r3, [r3, #32]
 8009f2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a1b      	ldr	r3, [r3, #32]
 8009f30:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	4b22      	ldr	r3, [pc, #136]	@ (8009fd0 <TIM_OC6_SetConfig+0xb4>)
 8009f48:	4013      	ands	r3, r2
 8009f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	021b      	lsls	r3, r3, #8
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009f5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	051b      	lsls	r3, r3, #20
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a19      	ldr	r2, [pc, #100]	@ (8009fd4 <TIM_OC6_SetConfig+0xb8>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d00f      	beq.n	8009f94 <TIM_OC6_SetConfig+0x78>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a18      	ldr	r2, [pc, #96]	@ (8009fd8 <TIM_OC6_SetConfig+0xbc>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d00b      	beq.n	8009f94 <TIM_OC6_SetConfig+0x78>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a17      	ldr	r2, [pc, #92]	@ (8009fdc <TIM_OC6_SetConfig+0xc0>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d007      	beq.n	8009f94 <TIM_OC6_SetConfig+0x78>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a16      	ldr	r2, [pc, #88]	@ (8009fe0 <TIM_OC6_SetConfig+0xc4>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d003      	beq.n	8009f94 <TIM_OC6_SetConfig+0x78>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a15      	ldr	r2, [pc, #84]	@ (8009fe4 <TIM_OC6_SetConfig+0xc8>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d109      	bne.n	8009fa8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	695b      	ldr	r3, [r3, #20]
 8009fa0:	029b      	lsls	r3, r3, #10
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	693a      	ldr	r2, [r7, #16]
 8009fc0:	621a      	str	r2, [r3, #32]
}
 8009fc2:	bf00      	nop
 8009fc4:	371c      	adds	r7, #28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	feff8fff 	.word	0xfeff8fff
 8009fd4:	40010000 	.word	0x40010000
 8009fd8:	40010400 	.word	0x40010400
 8009fdc:	40014000 	.word	0x40014000
 8009fe0:	40014400 	.word	0x40014400
 8009fe4:	40014800 	.word	0x40014800

08009fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6a1b      	ldr	r3, [r3, #32]
 8009ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	f023 0201 	bic.w	r2, r3, #1
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	699b      	ldr	r3, [r3, #24]
 800a00a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	011b      	lsls	r3, r3, #4
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f023 030a 	bic.w	r3, r3, #10
 800a024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	693a      	ldr	r2, [r7, #16]
 800a032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	697a      	ldr	r2, [r7, #20]
 800a038:	621a      	str	r2, [r3, #32]
}
 800a03a:	bf00      	nop
 800a03c:	371c      	adds	r7, #28
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr

0800a046 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a046:	b480      	push	{r7}
 800a048:	b087      	sub	sp, #28
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	60f8      	str	r0, [r7, #12]
 800a04e:	60b9      	str	r1, [r7, #8]
 800a050:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6a1b      	ldr	r3, [r3, #32]
 800a05c:	f023 0210 	bic.w	r2, r3, #16
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a070:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	031b      	lsls	r3, r3, #12
 800a076:	693a      	ldr	r2, [r7, #16]
 800a078:	4313      	orrs	r3, r2
 800a07a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a082:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	011b      	lsls	r3, r3, #4
 800a088:	697a      	ldr	r2, [r7, #20]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	697a      	ldr	r2, [r7, #20]
 800a098:	621a      	str	r2, [r3, #32]
}
 800a09a:	bf00      	nop
 800a09c:	371c      	adds	r7, #28
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
	...

0800a0a8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	4b09      	ldr	r3, [pc, #36]	@ (800a0e0 <TIM_ITRx_SetConfig+0x38>)
 800a0bc:	4013      	ands	r3, r2
 800a0be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0c0:	683a      	ldr	r2, [r7, #0]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	f043 0307 	orr.w	r3, r3, #7
 800a0ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	609a      	str	r2, [r3, #8]
}
 800a0d2:	bf00      	nop
 800a0d4:	3714      	adds	r7, #20
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	ffcfff8f 	.word	0xffcfff8f

0800a0e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b087      	sub	sp, #28
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
 800a0f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a0fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	021a      	lsls	r2, r3, #8
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	431a      	orrs	r2, r3
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	697a      	ldr	r2, [r7, #20]
 800a10e:	4313      	orrs	r3, r2
 800a110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	609a      	str	r2, [r3, #8]
}
 800a118:	bf00      	nop
 800a11a:	371c      	adds	r7, #28
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a124:	b480      	push	{r7}
 800a126:	b087      	sub	sp, #28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f003 031f 	and.w	r3, r3, #31
 800a136:	2201      	movs	r2, #1
 800a138:	fa02 f303 	lsl.w	r3, r2, r3
 800a13c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6a1a      	ldr	r2, [r3, #32]
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	43db      	mvns	r3, r3
 800a146:	401a      	ands	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6a1a      	ldr	r2, [r3, #32]
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	f003 031f 	and.w	r3, r3, #31
 800a156:	6879      	ldr	r1, [r7, #4]
 800a158:	fa01 f303 	lsl.w	r3, r1, r3
 800a15c:	431a      	orrs	r2, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	621a      	str	r2, [r3, #32]
}
 800a162:	bf00      	nop
 800a164:	371c      	adds	r7, #28
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
	...

0800a170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a180:	2b01      	cmp	r3, #1
 800a182:	d101      	bne.n	800a188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a184:	2302      	movs	r3, #2
 800a186:	e06d      	b.n	800a264 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2202      	movs	r2, #2
 800a194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a30      	ldr	r2, [pc, #192]	@ (800a270 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d004      	beq.n	800a1bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a2f      	ldr	r2, [pc, #188]	@ (800a274 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d108      	bne.n	800a1ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a1c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a20      	ldr	r2, [pc, #128]	@ (800a270 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d022      	beq.n	800a238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1fa:	d01d      	beq.n	800a238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a1d      	ldr	r2, [pc, #116]	@ (800a278 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d018      	beq.n	800a238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a1c      	ldr	r2, [pc, #112]	@ (800a27c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d013      	beq.n	800a238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a1a      	ldr	r2, [pc, #104]	@ (800a280 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d00e      	beq.n	800a238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a15      	ldr	r2, [pc, #84]	@ (800a274 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d009      	beq.n	800a238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a16      	ldr	r2, [pc, #88]	@ (800a284 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d004      	beq.n	800a238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a15      	ldr	r2, [pc, #84]	@ (800a288 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d10c      	bne.n	800a252 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a23e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	4313      	orrs	r3, r2
 800a248:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	40010000 	.word	0x40010000
 800a274:	40010400 	.word	0x40010400
 800a278:	40000400 	.word	0x40000400
 800a27c:	40000800 	.word	0x40000800
 800a280:	40000c00 	.word	0x40000c00
 800a284:	40001800 	.word	0x40001800
 800a288:	40014000 	.word	0x40014000

0800a28c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a296:	2300      	movs	r3, #0
 800a298:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d101      	bne.n	800a2a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	e065      	b.n	800a374 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	691b      	ldr	r3, [r3, #16]
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	695b      	ldr	r3, [r3, #20]
 800a300:	4313      	orrs	r3, r2
 800a302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a30e:	4313      	orrs	r3, r2
 800a310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	041b      	lsls	r3, r3, #16
 800a31e:	4313      	orrs	r3, r2
 800a320:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a16      	ldr	r2, [pc, #88]	@ (800a380 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d004      	beq.n	800a336 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a14      	ldr	r2, [pc, #80]	@ (800a384 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d115      	bne.n	800a362 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a340:	051b      	lsls	r3, r3, #20
 800a342:	4313      	orrs	r3, r2
 800a344:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	69db      	ldr	r3, [r3, #28]
 800a350:	4313      	orrs	r3, r2
 800a352:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	6a1b      	ldr	r3, [r3, #32]
 800a35e:	4313      	orrs	r3, r2
 800a360:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	40010000 	.word	0x40010000
 800a384:	40010400 	.word	0x40010400

0800a388 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a390:	bf00      	nop
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a3a4:	bf00      	nop
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <__NVIC_SetPriority>:
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	6039      	str	r1, [r7, #0]
 800a3ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a3d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	db0a      	blt.n	800a3ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	b2da      	uxtb	r2, r3
 800a3dc:	490c      	ldr	r1, [pc, #48]	@ (800a410 <__NVIC_SetPriority+0x4c>)
 800a3de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a3e2:	0112      	lsls	r2, r2, #4
 800a3e4:	b2d2      	uxtb	r2, r2
 800a3e6:	440b      	add	r3, r1
 800a3e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a3ec:	e00a      	b.n	800a404 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	b2da      	uxtb	r2, r3
 800a3f2:	4908      	ldr	r1, [pc, #32]	@ (800a414 <__NVIC_SetPriority+0x50>)
 800a3f4:	88fb      	ldrh	r3, [r7, #6]
 800a3f6:	f003 030f 	and.w	r3, r3, #15
 800a3fa:	3b04      	subs	r3, #4
 800a3fc:	0112      	lsls	r2, r2, #4
 800a3fe:	b2d2      	uxtb	r2, r2
 800a400:	440b      	add	r3, r1
 800a402:	761a      	strb	r2, [r3, #24]
}
 800a404:	bf00      	nop
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	e000e100 	.word	0xe000e100
 800a414:	e000ed00 	.word	0xe000ed00

0800a418 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a418:	b580      	push	{r7, lr}
 800a41a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a41c:	4b05      	ldr	r3, [pc, #20]	@ (800a434 <SysTick_Handler+0x1c>)
 800a41e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a420:	f001 fd18 	bl	800be54 <xTaskGetSchedulerState>
 800a424:	4603      	mov	r3, r0
 800a426:	2b01      	cmp	r3, #1
 800a428:	d001      	beq.n	800a42e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a42a:	f002 fb0d 	bl	800ca48 <xPortSysTickHandler>
  }
}
 800a42e:	bf00      	nop
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	e000e010 	.word	0xe000e010

0800a438 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a438:	b580      	push	{r7, lr}
 800a43a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a43c:	2100      	movs	r1, #0
 800a43e:	f06f 0004 	mvn.w	r0, #4
 800a442:	f7ff ffbf 	bl	800a3c4 <__NVIC_SetPriority>
#endif
}
 800a446:	bf00      	nop
 800a448:	bd80      	pop	{r7, pc}
	...

0800a44c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a452:	f3ef 8305 	mrs	r3, IPSR
 800a456:	603b      	str	r3, [r7, #0]
  return(result);
 800a458:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d003      	beq.n	800a466 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a45e:	f06f 0305 	mvn.w	r3, #5
 800a462:	607b      	str	r3, [r7, #4]
 800a464:	e00c      	b.n	800a480 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a466:	4b0a      	ldr	r3, [pc, #40]	@ (800a490 <osKernelInitialize+0x44>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d105      	bne.n	800a47a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a46e:	4b08      	ldr	r3, [pc, #32]	@ (800a490 <osKernelInitialize+0x44>)
 800a470:	2201      	movs	r2, #1
 800a472:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a474:	2300      	movs	r3, #0
 800a476:	607b      	str	r3, [r7, #4]
 800a478:	e002      	b.n	800a480 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a47a:	f04f 33ff 	mov.w	r3, #4294967295
 800a47e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a480:	687b      	ldr	r3, [r7, #4]
}
 800a482:	4618      	mov	r0, r3
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	24000500 	.word	0x24000500

0800a494 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a49a:	f3ef 8305 	mrs	r3, IPSR
 800a49e:	603b      	str	r3, [r7, #0]
  return(result);
 800a4a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d003      	beq.n	800a4ae <osKernelStart+0x1a>
    stat = osErrorISR;
 800a4a6:	f06f 0305 	mvn.w	r3, #5
 800a4aa:	607b      	str	r3, [r7, #4]
 800a4ac:	e010      	b.n	800a4d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a4ae:	4b0b      	ldr	r3, [pc, #44]	@ (800a4dc <osKernelStart+0x48>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d109      	bne.n	800a4ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a4b6:	f7ff ffbf 	bl	800a438 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a4ba:	4b08      	ldr	r3, [pc, #32]	@ (800a4dc <osKernelStart+0x48>)
 800a4bc:	2202      	movs	r2, #2
 800a4be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a4c0:	f001 f87a 	bl	800b5b8 <vTaskStartScheduler>
      stat = osOK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	607b      	str	r3, [r7, #4]
 800a4c8:	e002      	b.n	800a4d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a4ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a4d0:	687b      	ldr	r3, [r7, #4]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	24000500 	.word	0x24000500

0800a4e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b08e      	sub	sp, #56	@ 0x38
 800a4e4:	af04      	add	r7, sp, #16
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4f0:	f3ef 8305 	mrs	r3, IPSR
 800a4f4:	617b      	str	r3, [r7, #20]
  return(result);
 800a4f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d17e      	bne.n	800a5fa <osThreadNew+0x11a>
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d07b      	beq.n	800a5fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a502:	2380      	movs	r3, #128	@ 0x80
 800a504:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a506:	2318      	movs	r3, #24
 800a508:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a50a:	2300      	movs	r3, #0
 800a50c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a50e:	f04f 33ff 	mov.w	r3, #4294967295
 800a512:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d045      	beq.n	800a5a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d002      	beq.n	800a528 <osThreadNew+0x48>
        name = attr->name;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	699b      	ldr	r3, [r3, #24]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d002      	beq.n	800a536 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d008      	beq.n	800a54e <osThreadNew+0x6e>
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	2b38      	cmp	r3, #56	@ 0x38
 800a540:	d805      	bhi.n	800a54e <osThreadNew+0x6e>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d001      	beq.n	800a552 <osThreadNew+0x72>
        return (NULL);
 800a54e:	2300      	movs	r3, #0
 800a550:	e054      	b.n	800a5fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	695b      	ldr	r3, [r3, #20]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d003      	beq.n	800a562 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	695b      	ldr	r3, [r3, #20]
 800a55e:	089b      	lsrs	r3, r3, #2
 800a560:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00e      	beq.n	800a588 <osThreadNew+0xa8>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	2b5b      	cmp	r3, #91	@ 0x5b
 800a570:	d90a      	bls.n	800a588 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a576:	2b00      	cmp	r3, #0
 800a578:	d006      	beq.n	800a588 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d002      	beq.n	800a588 <osThreadNew+0xa8>
        mem = 1;
 800a582:	2301      	movs	r3, #1
 800a584:	61bb      	str	r3, [r7, #24]
 800a586:	e010      	b.n	800a5aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10c      	bne.n	800a5aa <osThreadNew+0xca>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d108      	bne.n	800a5aa <osThreadNew+0xca>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d104      	bne.n	800a5aa <osThreadNew+0xca>
          mem = 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	61bb      	str	r3, [r7, #24]
 800a5a4:	e001      	b.n	800a5aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d110      	bne.n	800a5d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a5b8:	9202      	str	r2, [sp, #8]
 800a5ba:	9301      	str	r3, [sp, #4]
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	9300      	str	r3, [sp, #0]
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	6a3a      	ldr	r2, [r7, #32]
 800a5c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f000 fe1a 	bl	800b200 <xTaskCreateStatic>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	613b      	str	r3, [r7, #16]
 800a5d0:	e013      	b.n	800a5fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d110      	bne.n	800a5fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a5d8:	6a3b      	ldr	r3, [r7, #32]
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	f107 0310 	add.w	r3, r7, #16
 800a5e0:	9301      	str	r3, [sp, #4]
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f000 fe68 	bl	800b2c0 <xTaskCreate>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d001      	beq.n	800a5fa <osThreadNew+0x11a>
            hTask = NULL;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a5fa:	693b      	ldr	r3, [r7, #16]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3728      	adds	r7, #40	@ 0x28
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a60c:	f3ef 8305 	mrs	r3, IPSR
 800a610:	60bb      	str	r3, [r7, #8]
  return(result);
 800a612:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a614:	2b00      	cmp	r3, #0
 800a616:	d003      	beq.n	800a620 <osDelay+0x1c>
    stat = osErrorISR;
 800a618:	f06f 0305 	mvn.w	r3, #5
 800a61c:	60fb      	str	r3, [r7, #12]
 800a61e:	e007      	b.n	800a630 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a620:	2300      	movs	r3, #0
 800a622:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d002      	beq.n	800a630 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 ff8e 	bl	800b54c <vTaskDelay>
    }
  }

  return (stat);
 800a630:	68fb      	ldr	r3, [r7, #12]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
	...

0800a63c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	4a07      	ldr	r2, [pc, #28]	@ (800a668 <vApplicationGetIdleTaskMemory+0x2c>)
 800a64c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	4a06      	ldr	r2, [pc, #24]	@ (800a66c <vApplicationGetIdleTaskMemory+0x30>)
 800a652:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2280      	movs	r2, #128	@ 0x80
 800a658:	601a      	str	r2, [r3, #0]
}
 800a65a:	bf00      	nop
 800a65c:	3714      	adds	r7, #20
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	24000504 	.word	0x24000504
 800a66c:	24000560 	.word	0x24000560

0800a670 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a670:	b480      	push	{r7}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	4a07      	ldr	r2, [pc, #28]	@ (800a69c <vApplicationGetTimerTaskMemory+0x2c>)
 800a680:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	4a06      	ldr	r2, [pc, #24]	@ (800a6a0 <vApplicationGetTimerTaskMemory+0x30>)
 800a686:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a68e:	601a      	str	r2, [r3, #0]
}
 800a690:	bf00      	nop
 800a692:	3714      	adds	r7, #20
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	24000760 	.word	0x24000760
 800a6a0:	240007bc 	.word	0x240007bc

0800a6a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f103 0208 	add.w	r2, r3, #8
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f103 0208 	add.w	r2, r3, #8
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f103 0208 	add.w	r2, r3, #8
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6d8:	bf00      	nop
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a6f2:	bf00      	nop
 800a6f4:	370c      	adds	r7, #12
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6fe:	b480      	push	{r7}
 800a700:	b085      	sub	sp, #20
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	689a      	ldr	r2, [r3, #8]
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	1c5a      	adds	r2, r3, #1
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	601a      	str	r2, [r3, #0]
}
 800a73a:	bf00      	nop
 800a73c:	3714      	adds	r7, #20
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr

0800a746 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a746:	b480      	push	{r7}
 800a748:	b085      	sub	sp, #20
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75c:	d103      	bne.n	800a766 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	60fb      	str	r3, [r7, #12]
 800a764:	e00c      	b.n	800a780 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	3308      	adds	r3, #8
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	e002      	b.n	800a774 <vListInsert+0x2e>
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	60fb      	str	r3, [r7, #12]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d2f6      	bcs.n	800a76e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	685a      	ldr	r2, [r3, #4]
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	1c5a      	adds	r2, r3, #1
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	601a      	str	r2, [r3, #0]
}
 800a7ac:	bf00      	nop
 800a7ae:	3714      	adds	r7, #20
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	6892      	ldr	r2, [r2, #8]
 800a7ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	6852      	ldr	r2, [r2, #4]
 800a7d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d103      	bne.n	800a7ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	689a      	ldr	r2, [r3, #8]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	1e5a      	subs	r2, r3, #1
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
}
 800a800:	4618      	mov	r0, r3
 800a802:	3714      	adds	r7, #20
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10b      	bne.n	800a838 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a832:	bf00      	nop
 800a834:	bf00      	nop
 800a836:	e7fd      	b.n	800a834 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a838:	f002 f876 	bl	800c928 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a844:	68f9      	ldr	r1, [r7, #12]
 800a846:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a848:	fb01 f303 	mul.w	r3, r1, r3
 800a84c:	441a      	add	r2, r3
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a868:	3b01      	subs	r3, #1
 800a86a:	68f9      	ldr	r1, [r7, #12]
 800a86c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a86e:	fb01 f303 	mul.w	r3, r1, r3
 800a872:	441a      	add	r2, r3
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	22ff      	movs	r2, #255	@ 0xff
 800a87c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	22ff      	movs	r2, #255	@ 0xff
 800a884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d114      	bne.n	800a8b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d01a      	beq.n	800a8cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	3310      	adds	r3, #16
 800a89a:	4618      	mov	r0, r3
 800a89c:	f001 f91a 	bl	800bad4 <xTaskRemoveFromEventList>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d012      	beq.n	800a8cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a8a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a8dc <xQueueGenericReset+0xd0>)
 800a8a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8ac:	601a      	str	r2, [r3, #0]
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	e009      	b.n	800a8cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	3310      	adds	r3, #16
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7ff fef1 	bl	800a6a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3324      	adds	r3, #36	@ 0x24
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7ff feec 	bl	800a6a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a8cc:	f002 f85e 	bl	800c98c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a8d0:	2301      	movs	r3, #1
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	e000ed04 	.word	0xe000ed04

0800a8e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b08e      	sub	sp, #56	@ 0x38
 800a8e4:	af02      	add	r7, sp, #8
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
 800a8ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10b      	bne.n	800a90c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8f8:	f383 8811 	msr	BASEPRI, r3
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a906:	bf00      	nop
 800a908:	bf00      	nop
 800a90a:	e7fd      	b.n	800a908 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d10b      	bne.n	800a92a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a924:	bf00      	nop
 800a926:	bf00      	nop
 800a928:	e7fd      	b.n	800a926 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d002      	beq.n	800a936 <xQueueGenericCreateStatic+0x56>
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d001      	beq.n	800a93a <xQueueGenericCreateStatic+0x5a>
 800a936:	2301      	movs	r3, #1
 800a938:	e000      	b.n	800a93c <xQueueGenericCreateStatic+0x5c>
 800a93a:	2300      	movs	r3, #0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d10b      	bne.n	800a958 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a944:	f383 8811 	msr	BASEPRI, r3
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	623b      	str	r3, [r7, #32]
}
 800a952:	bf00      	nop
 800a954:	bf00      	nop
 800a956:	e7fd      	b.n	800a954 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d102      	bne.n	800a964 <xQueueGenericCreateStatic+0x84>
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d101      	bne.n	800a968 <xQueueGenericCreateStatic+0x88>
 800a964:	2301      	movs	r3, #1
 800a966:	e000      	b.n	800a96a <xQueueGenericCreateStatic+0x8a>
 800a968:	2300      	movs	r3, #0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10b      	bne.n	800a986 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	61fb      	str	r3, [r7, #28]
}
 800a980:	bf00      	nop
 800a982:	bf00      	nop
 800a984:	e7fd      	b.n	800a982 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a986:	2350      	movs	r3, #80	@ 0x50
 800a988:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	2b50      	cmp	r3, #80	@ 0x50
 800a98e:	d00b      	beq.n	800a9a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a994:	f383 8811 	msr	BASEPRI, r3
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	61bb      	str	r3, [r7, #24]
}
 800a9a2:	bf00      	nop
 800a9a4:	bf00      	nop
 800a9a6:	e7fd      	b.n	800a9a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a9a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00d      	beq.n	800a9d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	68b9      	ldr	r1, [r7, #8]
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f000 f805 	bl	800a9da <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3730      	adds	r7, #48	@ 0x30
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b084      	sub	sp, #16
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	60f8      	str	r0, [r7, #12]
 800a9e2:	60b9      	str	r1, [r7, #8]
 800a9e4:	607a      	str	r2, [r7, #4]
 800a9e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d103      	bne.n	800a9f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	69ba      	ldr	r2, [r7, #24]
 800a9f2:	601a      	str	r2, [r3, #0]
 800a9f4:	e002      	b.n	800a9fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	68ba      	ldr	r2, [r7, #8]
 800aa06:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aa08:	2101      	movs	r1, #1
 800aa0a:	69b8      	ldr	r0, [r7, #24]
 800aa0c:	f7ff fefe 	bl	800a80c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	78fa      	ldrb	r2, [r7, #3]
 800aa14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aa18:	bf00      	nop
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b08e      	sub	sp, #56	@ 0x38
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
 800aa2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aa36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10b      	bne.n	800aa54 <xQueueGenericSend+0x34>
	__asm volatile
 800aa3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aa4e:	bf00      	nop
 800aa50:	bf00      	nop
 800aa52:	e7fd      	b.n	800aa50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d103      	bne.n	800aa62 <xQueueGenericSend+0x42>
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d101      	bne.n	800aa66 <xQueueGenericSend+0x46>
 800aa62:	2301      	movs	r3, #1
 800aa64:	e000      	b.n	800aa68 <xQueueGenericSend+0x48>
 800aa66:	2300      	movs	r3, #0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10b      	bne.n	800aa84 <xQueueGenericSend+0x64>
	__asm volatile
 800aa6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa70:	f383 8811 	msr	BASEPRI, r3
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aa7e:	bf00      	nop
 800aa80:	bf00      	nop
 800aa82:	e7fd      	b.n	800aa80 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d103      	bne.n	800aa92 <xQueueGenericSend+0x72>
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d101      	bne.n	800aa96 <xQueueGenericSend+0x76>
 800aa92:	2301      	movs	r3, #1
 800aa94:	e000      	b.n	800aa98 <xQueueGenericSend+0x78>
 800aa96:	2300      	movs	r3, #0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d10b      	bne.n	800aab4 <xQueueGenericSend+0x94>
	__asm volatile
 800aa9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa0:	f383 8811 	msr	BASEPRI, r3
 800aaa4:	f3bf 8f6f 	isb	sy
 800aaa8:	f3bf 8f4f 	dsb	sy
 800aaac:	623b      	str	r3, [r7, #32]
}
 800aaae:	bf00      	nop
 800aab0:	bf00      	nop
 800aab2:	e7fd      	b.n	800aab0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aab4:	f001 f9ce 	bl	800be54 <xTaskGetSchedulerState>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d102      	bne.n	800aac4 <xQueueGenericSend+0xa4>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d101      	bne.n	800aac8 <xQueueGenericSend+0xa8>
 800aac4:	2301      	movs	r3, #1
 800aac6:	e000      	b.n	800aaca <xQueueGenericSend+0xaa>
 800aac8:	2300      	movs	r3, #0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10b      	bne.n	800aae6 <xQueueGenericSend+0xc6>
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	61fb      	str	r3, [r7, #28]
}
 800aae0:	bf00      	nop
 800aae2:	bf00      	nop
 800aae4:	e7fd      	b.n	800aae2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aae6:	f001 ff1f 	bl	800c928 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aaea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aaee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d302      	bcc.n	800aafc <xQueueGenericSend+0xdc>
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d129      	bne.n	800ab50 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aafc:	683a      	ldr	r2, [r7, #0]
 800aafe:	68b9      	ldr	r1, [r7, #8]
 800ab00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab02:	f000 fa0f 	bl	800af24 <prvCopyDataToQueue>
 800ab06:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d010      	beq.n	800ab32 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab12:	3324      	adds	r3, #36	@ 0x24
 800ab14:	4618      	mov	r0, r3
 800ab16:	f000 ffdd 	bl	800bad4 <xTaskRemoveFromEventList>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d013      	beq.n	800ab48 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab20:	4b3f      	ldr	r3, [pc, #252]	@ (800ac20 <xQueueGenericSend+0x200>)
 800ab22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab26:	601a      	str	r2, [r3, #0]
 800ab28:	f3bf 8f4f 	dsb	sy
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	e00a      	b.n	800ab48 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d007      	beq.n	800ab48 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ab38:	4b39      	ldr	r3, [pc, #228]	@ (800ac20 <xQueueGenericSend+0x200>)
 800ab3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab3e:	601a      	str	r2, [r3, #0]
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ab48:	f001 ff20 	bl	800c98c <vPortExitCritical>
				return pdPASS;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e063      	b.n	800ac18 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d103      	bne.n	800ab5e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab56:	f001 ff19 	bl	800c98c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	e05c      	b.n	800ac18 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d106      	bne.n	800ab72 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab64:	f107 0314 	add.w	r3, r7, #20
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f001 f817 	bl	800bb9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab72:	f001 ff0b 	bl	800c98c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab76:	f000 fd87 	bl	800b688 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab7a:	f001 fed5 	bl	800c928 <vPortEnterCritical>
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab84:	b25b      	sxtb	r3, r3
 800ab86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8a:	d103      	bne.n	800ab94 <xQueueGenericSend+0x174>
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab9a:	b25b      	sxtb	r3, r3
 800ab9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aba0:	d103      	bne.n	800abaa <xQueueGenericSend+0x18a>
 800aba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba4:	2200      	movs	r2, #0
 800aba6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abaa:	f001 feef 	bl	800c98c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abae:	1d3a      	adds	r2, r7, #4
 800abb0:	f107 0314 	add.w	r3, r7, #20
 800abb4:	4611      	mov	r1, r2
 800abb6:	4618      	mov	r0, r3
 800abb8:	f001 f806 	bl	800bbc8 <xTaskCheckForTimeOut>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d124      	bne.n	800ac0c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800abc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800abc4:	f000 faa6 	bl	800b114 <prvIsQueueFull>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d018      	beq.n	800ac00 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800abce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd0:	3310      	adds	r3, #16
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	4611      	mov	r1, r2
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 ff2a 	bl	800ba30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800abdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800abde:	f000 fa31 	bl	800b044 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800abe2:	f000 fd5f 	bl	800b6a4 <xTaskResumeAll>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f47f af7c 	bne.w	800aae6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800abee:	4b0c      	ldr	r3, [pc, #48]	@ (800ac20 <xQueueGenericSend+0x200>)
 800abf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abf4:	601a      	str	r2, [r3, #0]
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	f3bf 8f6f 	isb	sy
 800abfe:	e772      	b.n	800aae6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac02:	f000 fa1f 	bl	800b044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac06:	f000 fd4d 	bl	800b6a4 <xTaskResumeAll>
 800ac0a:	e76c      	b.n	800aae6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac0e:	f000 fa19 	bl	800b044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac12:	f000 fd47 	bl	800b6a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3738      	adds	r7, #56	@ 0x38
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	e000ed04 	.word	0xe000ed04

0800ac24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b090      	sub	sp, #64	@ 0x40
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
 800ac30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ac36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10b      	bne.n	800ac54 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ac3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ac4e:	bf00      	nop
 800ac50:	bf00      	nop
 800ac52:	e7fd      	b.n	800ac50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d103      	bne.n	800ac62 <xQueueGenericSendFromISR+0x3e>
 800ac5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d101      	bne.n	800ac66 <xQueueGenericSendFromISR+0x42>
 800ac62:	2301      	movs	r3, #1
 800ac64:	e000      	b.n	800ac68 <xQueueGenericSendFromISR+0x44>
 800ac66:	2300      	movs	r3, #0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10b      	bne.n	800ac84 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ac7e:	bf00      	nop
 800ac80:	bf00      	nop
 800ac82:	e7fd      	b.n	800ac80 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d103      	bne.n	800ac92 <xQueueGenericSendFromISR+0x6e>
 800ac8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d101      	bne.n	800ac96 <xQueueGenericSendFromISR+0x72>
 800ac92:	2301      	movs	r3, #1
 800ac94:	e000      	b.n	800ac98 <xQueueGenericSendFromISR+0x74>
 800ac96:	2300      	movs	r3, #0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10b      	bne.n	800acb4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ac9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca0:	f383 8811 	msr	BASEPRI, r3
 800aca4:	f3bf 8f6f 	isb	sy
 800aca8:	f3bf 8f4f 	dsb	sy
 800acac:	623b      	str	r3, [r7, #32]
}
 800acae:	bf00      	nop
 800acb0:	bf00      	nop
 800acb2:	e7fd      	b.n	800acb0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acb4:	f001 ff18 	bl	800cae8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800acb8:	f3ef 8211 	mrs	r2, BASEPRI
 800acbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc0:	f383 8811 	msr	BASEPRI, r3
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	61fa      	str	r2, [r7, #28]
 800acce:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800acd0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acd2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800acd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acdc:	429a      	cmp	r2, r3
 800acde:	d302      	bcc.n	800ace6 <xQueueGenericSendFromISR+0xc2>
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d12f      	bne.n	800ad46 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ace6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800acec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800acf6:	683a      	ldr	r2, [r7, #0]
 800acf8:	68b9      	ldr	r1, [r7, #8]
 800acfa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800acfc:	f000 f912 	bl	800af24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad00:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ad04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad08:	d112      	bne.n	800ad30 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d016      	beq.n	800ad40 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad14:	3324      	adds	r3, #36	@ 0x24
 800ad16:	4618      	mov	r0, r3
 800ad18:	f000 fedc 	bl	800bad4 <xTaskRemoveFromEventList>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00e      	beq.n	800ad40 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00b      	beq.n	800ad40 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	601a      	str	r2, [r3, #0]
 800ad2e:	e007      	b.n	800ad40 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ad34:	3301      	adds	r3, #1
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	b25a      	sxtb	r2, r3
 800ad3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ad40:	2301      	movs	r3, #1
 800ad42:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ad44:	e001      	b.n	800ad4a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad46:	2300      	movs	r3, #0
 800ad48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad4c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ad54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3740      	adds	r7, #64	@ 0x40
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b08c      	sub	sp, #48	@ 0x30
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10b      	bne.n	800ad92 <xQueueReceive+0x32>
	__asm volatile
 800ad7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad7e:	f383 8811 	msr	BASEPRI, r3
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	623b      	str	r3, [r7, #32]
}
 800ad8c:	bf00      	nop
 800ad8e:	bf00      	nop
 800ad90:	e7fd      	b.n	800ad8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d103      	bne.n	800ada0 <xQueueReceive+0x40>
 800ad98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d101      	bne.n	800ada4 <xQueueReceive+0x44>
 800ada0:	2301      	movs	r3, #1
 800ada2:	e000      	b.n	800ada6 <xQueueReceive+0x46>
 800ada4:	2300      	movs	r3, #0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10b      	bne.n	800adc2 <xQueueReceive+0x62>
	__asm volatile
 800adaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	61fb      	str	r3, [r7, #28]
}
 800adbc:	bf00      	nop
 800adbe:	bf00      	nop
 800adc0:	e7fd      	b.n	800adbe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adc2:	f001 f847 	bl	800be54 <xTaskGetSchedulerState>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d102      	bne.n	800add2 <xQueueReceive+0x72>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d101      	bne.n	800add6 <xQueueReceive+0x76>
 800add2:	2301      	movs	r3, #1
 800add4:	e000      	b.n	800add8 <xQueueReceive+0x78>
 800add6:	2300      	movs	r3, #0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10b      	bne.n	800adf4 <xQueueReceive+0x94>
	__asm volatile
 800addc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade0:	f383 8811 	msr	BASEPRI, r3
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	61bb      	str	r3, [r7, #24]
}
 800adee:	bf00      	nop
 800adf0:	bf00      	nop
 800adf2:	e7fd      	b.n	800adf0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adf4:	f001 fd98 	bl	800c928 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adfc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d01f      	beq.n	800ae44 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae04:	68b9      	ldr	r1, [r7, #8]
 800ae06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae08:	f000 f8f6 	bl	800aff8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0e:	1e5a      	subs	r2, r3, #1
 800ae10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae12:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae16:	691b      	ldr	r3, [r3, #16]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00f      	beq.n	800ae3c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae1e:	3310      	adds	r3, #16
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 fe57 	bl	800bad4 <xTaskRemoveFromEventList>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d007      	beq.n	800ae3c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae2c:	4b3c      	ldr	r3, [pc, #240]	@ (800af20 <xQueueReceive+0x1c0>)
 800ae2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	f3bf 8f4f 	dsb	sy
 800ae38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae3c:	f001 fda6 	bl	800c98c <vPortExitCritical>
				return pdPASS;
 800ae40:	2301      	movs	r3, #1
 800ae42:	e069      	b.n	800af18 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d103      	bne.n	800ae52 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae4a:	f001 fd9f 	bl	800c98c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	e062      	b.n	800af18 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d106      	bne.n	800ae66 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae58:	f107 0310 	add.w	r3, r7, #16
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f000 fe9d 	bl	800bb9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae62:	2301      	movs	r3, #1
 800ae64:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae66:	f001 fd91 	bl	800c98c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae6a:	f000 fc0d 	bl	800b688 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae6e:	f001 fd5b 	bl	800c928 <vPortEnterCritical>
 800ae72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae78:	b25b      	sxtb	r3, r3
 800ae7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7e:	d103      	bne.n	800ae88 <xQueueReceive+0x128>
 800ae80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae8e:	b25b      	sxtb	r3, r3
 800ae90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae94:	d103      	bne.n	800ae9e <xQueueReceive+0x13e>
 800ae96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae9e:	f001 fd75 	bl	800c98c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aea2:	1d3a      	adds	r2, r7, #4
 800aea4:	f107 0310 	add.w	r3, r7, #16
 800aea8:	4611      	mov	r1, r2
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f000 fe8c 	bl	800bbc8 <xTaskCheckForTimeOut>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d123      	bne.n	800aefe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aeb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aeb8:	f000 f916 	bl	800b0e8 <prvIsQueueEmpty>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d017      	beq.n	800aef2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec4:	3324      	adds	r3, #36	@ 0x24
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	4611      	mov	r1, r2
 800aeca:	4618      	mov	r0, r3
 800aecc:	f000 fdb0 	bl	800ba30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aed0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aed2:	f000 f8b7 	bl	800b044 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aed6:	f000 fbe5 	bl	800b6a4 <xTaskResumeAll>
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d189      	bne.n	800adf4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800aee0:	4b0f      	ldr	r3, [pc, #60]	@ (800af20 <xQueueReceive+0x1c0>)
 800aee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aee6:	601a      	str	r2, [r3, #0]
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	f3bf 8f6f 	isb	sy
 800aef0:	e780      	b.n	800adf4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aef2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aef4:	f000 f8a6 	bl	800b044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aef8:	f000 fbd4 	bl	800b6a4 <xTaskResumeAll>
 800aefc:	e77a      	b.n	800adf4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aefe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af00:	f000 f8a0 	bl	800b044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af04:	f000 fbce 	bl	800b6a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af0a:	f000 f8ed 	bl	800b0e8 <prvIsQueueEmpty>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	f43f af6f 	beq.w	800adf4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af16:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3730      	adds	r7, #48	@ 0x30
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	e000ed04 	.word	0xe000ed04

0800af24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b086      	sub	sp, #24
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af30:	2300      	movs	r3, #0
 800af32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10d      	bne.n	800af5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d14d      	bne.n	800afe6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 ff9e 	bl	800be90 <xTaskPriorityDisinherit>
 800af54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2200      	movs	r2, #0
 800af5a:	609a      	str	r2, [r3, #8]
 800af5c:	e043      	b.n	800afe6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d119      	bne.n	800af98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6858      	ldr	r0, [r3, #4]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af6c:	461a      	mov	r2, r3
 800af6e:	68b9      	ldr	r1, [r7, #8]
 800af70:	f004 fd77 	bl	800fa62 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	685a      	ldr	r2, [r3, #4]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af7c:	441a      	add	r2, r3
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	685a      	ldr	r2, [r3, #4]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d32b      	bcc.n	800afe6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	605a      	str	r2, [r3, #4]
 800af96:	e026      	b.n	800afe6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	68d8      	ldr	r0, [r3, #12]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afa0:	461a      	mov	r2, r3
 800afa2:	68b9      	ldr	r1, [r7, #8]
 800afa4:	f004 fd5d 	bl	800fa62 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	68da      	ldr	r2, [r3, #12]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afb0:	425b      	negs	r3, r3
 800afb2:	441a      	add	r2, r3
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	68da      	ldr	r2, [r3, #12]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d207      	bcs.n	800afd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	689a      	ldr	r2, [r3, #8]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afcc:	425b      	negs	r3, r3
 800afce:	441a      	add	r2, r3
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	d105      	bne.n	800afe6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d002      	beq.n	800afe6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	3b01      	subs	r3, #1
 800afe4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	1c5a      	adds	r2, r3, #1
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800afee:	697b      	ldr	r3, [r7, #20]
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3718      	adds	r7, #24
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b006:	2b00      	cmp	r3, #0
 800b008:	d018      	beq.n	800b03c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	68da      	ldr	r2, [r3, #12]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b012:	441a      	add	r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	68da      	ldr	r2, [r3, #12]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	429a      	cmp	r2, r3
 800b022:	d303      	bcc.n	800b02c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	68d9      	ldr	r1, [r3, #12]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b034:	461a      	mov	r2, r3
 800b036:	6838      	ldr	r0, [r7, #0]
 800b038:	f004 fd13 	bl	800fa62 <memcpy>
	}
}
 800b03c:	bf00      	nop
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b04c:	f001 fc6c 	bl	800c928 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b056:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b058:	e011      	b.n	800b07e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d012      	beq.n	800b088 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	3324      	adds	r3, #36	@ 0x24
 800b066:	4618      	mov	r0, r3
 800b068:	f000 fd34 	bl	800bad4 <xTaskRemoveFromEventList>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d001      	beq.n	800b076 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b072:	f000 fe0d 	bl	800bc90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b076:	7bfb      	ldrb	r3, [r7, #15]
 800b078:	3b01      	subs	r3, #1
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b07e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b082:	2b00      	cmp	r3, #0
 800b084:	dce9      	bgt.n	800b05a <prvUnlockQueue+0x16>
 800b086:	e000      	b.n	800b08a <prvUnlockQueue+0x46>
					break;
 800b088:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	22ff      	movs	r2, #255	@ 0xff
 800b08e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b092:	f001 fc7b 	bl	800c98c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b096:	f001 fc47 	bl	800c928 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0a2:	e011      	b.n	800b0c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d012      	beq.n	800b0d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	3310      	adds	r3, #16
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f000 fd0f 	bl	800bad4 <xTaskRemoveFromEventList>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d001      	beq.n	800b0c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b0bc:	f000 fde8 	bl	800bc90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b0c0:	7bbb      	ldrb	r3, [r7, #14]
 800b0c2:	3b01      	subs	r3, #1
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	dce9      	bgt.n	800b0a4 <prvUnlockQueue+0x60>
 800b0d0:	e000      	b.n	800b0d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b0d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	22ff      	movs	r2, #255	@ 0xff
 800b0d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b0dc:	f001 fc56 	bl	800c98c <vPortExitCritical>
}
 800b0e0:	bf00      	nop
 800b0e2:	3710      	adds	r7, #16
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0f0:	f001 fc1a 	bl	800c928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d102      	bne.n	800b102 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	60fb      	str	r3, [r7, #12]
 800b100:	e001      	b.n	800b106 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b102:	2300      	movs	r3, #0
 800b104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b106:	f001 fc41 	bl	800c98c <vPortExitCritical>

	return xReturn;
 800b10a:	68fb      	ldr	r3, [r7, #12]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b11c:	f001 fc04 	bl	800c928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b128:	429a      	cmp	r2, r3
 800b12a:	d102      	bne.n	800b132 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b12c:	2301      	movs	r3, #1
 800b12e:	60fb      	str	r3, [r7, #12]
 800b130:	e001      	b.n	800b136 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b132:	2300      	movs	r3, #0
 800b134:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b136:	f001 fc29 	bl	800c98c <vPortExitCritical>

	return xReturn;
 800b13a:	68fb      	ldr	r3, [r7, #12]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3710      	adds	r7, #16
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b144:	b480      	push	{r7}
 800b146:	b085      	sub	sp, #20
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b14e:	2300      	movs	r3, #0
 800b150:	60fb      	str	r3, [r7, #12]
 800b152:	e014      	b.n	800b17e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b154:	4a0f      	ldr	r2, [pc, #60]	@ (800b194 <vQueueAddToRegistry+0x50>)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d10b      	bne.n	800b178 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b160:	490c      	ldr	r1, [pc, #48]	@ (800b194 <vQueueAddToRegistry+0x50>)
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	683a      	ldr	r2, [r7, #0]
 800b166:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b16a:	4a0a      	ldr	r2, [pc, #40]	@ (800b194 <vQueueAddToRegistry+0x50>)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	00db      	lsls	r3, r3, #3
 800b170:	4413      	add	r3, r2
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b176:	e006      	b.n	800b186 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	3301      	adds	r3, #1
 800b17c:	60fb      	str	r3, [r7, #12]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2b07      	cmp	r3, #7
 800b182:	d9e7      	bls.n	800b154 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b184:	bf00      	nop
 800b186:	bf00      	nop
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	24000bbc 	.word	0x24000bbc

0800b198 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b1a8:	f001 fbbe 	bl	800c928 <vPortEnterCritical>
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b1b2:	b25b      	sxtb	r3, r3
 800b1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b8:	d103      	bne.n	800b1c2 <vQueueWaitForMessageRestricted+0x2a>
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b1c8:	b25b      	sxtb	r3, r3
 800b1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ce:	d103      	bne.n	800b1d8 <vQueueWaitForMessageRestricted+0x40>
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b1d8:	f001 fbd8 	bl	800c98c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d106      	bne.n	800b1f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	3324      	adds	r3, #36	@ 0x24
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	68b9      	ldr	r1, [r7, #8]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f000 fc45 	bl	800ba7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b1f2:	6978      	ldr	r0, [r7, #20]
 800b1f4:	f7ff ff26 	bl	800b044 <prvUnlockQueue>
	}
 800b1f8:	bf00      	nop
 800b1fa:	3718      	adds	r7, #24
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b200:	b580      	push	{r7, lr}
 800b202:	b08e      	sub	sp, #56	@ 0x38
 800b204:	af04      	add	r7, sp, #16
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	607a      	str	r2, [r7, #4]
 800b20c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b20e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b210:	2b00      	cmp	r3, #0
 800b212:	d10b      	bne.n	800b22c <xTaskCreateStatic+0x2c>
	__asm volatile
 800b214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b218:	f383 8811 	msr	BASEPRI, r3
 800b21c:	f3bf 8f6f 	isb	sy
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	623b      	str	r3, [r7, #32]
}
 800b226:	bf00      	nop
 800b228:	bf00      	nop
 800b22a:	e7fd      	b.n	800b228 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d10b      	bne.n	800b24a <xTaskCreateStatic+0x4a>
	__asm volatile
 800b232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b236:	f383 8811 	msr	BASEPRI, r3
 800b23a:	f3bf 8f6f 	isb	sy
 800b23e:	f3bf 8f4f 	dsb	sy
 800b242:	61fb      	str	r3, [r7, #28]
}
 800b244:	bf00      	nop
 800b246:	bf00      	nop
 800b248:	e7fd      	b.n	800b246 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b24a:	235c      	movs	r3, #92	@ 0x5c
 800b24c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	2b5c      	cmp	r3, #92	@ 0x5c
 800b252:	d00b      	beq.n	800b26c <xTaskCreateStatic+0x6c>
	__asm volatile
 800b254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b258:	f383 8811 	msr	BASEPRI, r3
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	f3bf 8f4f 	dsb	sy
 800b264:	61bb      	str	r3, [r7, #24]
}
 800b266:	bf00      	nop
 800b268:	bf00      	nop
 800b26a:	e7fd      	b.n	800b268 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b26c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b270:	2b00      	cmp	r3, #0
 800b272:	d01e      	beq.n	800b2b2 <xTaskCreateStatic+0xb2>
 800b274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b276:	2b00      	cmp	r3, #0
 800b278:	d01b      	beq.n	800b2b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b280:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b282:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b286:	2202      	movs	r2, #2
 800b288:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b28c:	2300      	movs	r3, #0
 800b28e:	9303      	str	r3, [sp, #12]
 800b290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b292:	9302      	str	r3, [sp, #8]
 800b294:	f107 0314 	add.w	r3, r7, #20
 800b298:	9301      	str	r3, [sp, #4]
 800b29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29c:	9300      	str	r3, [sp, #0]
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	68b9      	ldr	r1, [r7, #8]
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f000 f850 	bl	800b34a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b2ac:	f000 f8de 	bl	800b46c <prvAddNewTaskToReadyList>
 800b2b0:	e001      	b.n	800b2b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b2b6:	697b      	ldr	r3, [r7, #20]
	}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3728      	adds	r7, #40	@ 0x28
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b08c      	sub	sp, #48	@ 0x30
 800b2c4:	af04      	add	r7, sp, #16
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	603b      	str	r3, [r7, #0]
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b2d0:	88fb      	ldrh	r3, [r7, #6]
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f001 fc49 	bl	800cb6c <pvPortMalloc>
 800b2da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00e      	beq.n	800b300 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b2e2:	205c      	movs	r0, #92	@ 0x5c
 800b2e4:	f001 fc42 	bl	800cb6c <pvPortMalloc>
 800b2e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d003      	beq.n	800b2f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b2f6:	e005      	b.n	800b304 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b2f8:	6978      	ldr	r0, [r7, #20]
 800b2fa:	f001 fd05 	bl	800cd08 <vPortFree>
 800b2fe:	e001      	b.n	800b304 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b300:	2300      	movs	r3, #0
 800b302:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d017      	beq.n	800b33a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b30a:	69fb      	ldr	r3, [r7, #28]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b312:	88fa      	ldrh	r2, [r7, #6]
 800b314:	2300      	movs	r3, #0
 800b316:	9303      	str	r3, [sp, #12]
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	9302      	str	r3, [sp, #8]
 800b31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b31e:	9301      	str	r3, [sp, #4]
 800b320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	68b9      	ldr	r1, [r7, #8]
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f000 f80e 	bl	800b34a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b32e:	69f8      	ldr	r0, [r7, #28]
 800b330:	f000 f89c 	bl	800b46c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b334:	2301      	movs	r3, #1
 800b336:	61bb      	str	r3, [r7, #24]
 800b338:	e002      	b.n	800b340 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b33a:	f04f 33ff 	mov.w	r3, #4294967295
 800b33e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b340:	69bb      	ldr	r3, [r7, #24]
	}
 800b342:	4618      	mov	r0, r3
 800b344:	3720      	adds	r7, #32
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b088      	sub	sp, #32
 800b34e:	af00      	add	r7, sp, #0
 800b350:	60f8      	str	r0, [r7, #12]
 800b352:	60b9      	str	r1, [r7, #8]
 800b354:	607a      	str	r2, [r7, #4]
 800b356:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b35a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	461a      	mov	r2, r3
 800b362:	21a5      	movs	r1, #165	@ 0xa5
 800b364:	f004 faed 	bl	800f942 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b36c:	6879      	ldr	r1, [r7, #4]
 800b36e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b372:	440b      	add	r3, r1
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	4413      	add	r3, r2
 800b378:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	f023 0307 	bic.w	r3, r3, #7
 800b380:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	f003 0307 	and.w	r3, r3, #7
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d00b      	beq.n	800b3a4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b390:	f383 8811 	msr	BASEPRI, r3
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	617b      	str	r3, [r7, #20]
}
 800b39e:	bf00      	nop
 800b3a0:	bf00      	nop
 800b3a2:	e7fd      	b.n	800b3a0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d01f      	beq.n	800b3ea <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	61fb      	str	r3, [r7, #28]
 800b3ae:	e012      	b.n	800b3d6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	7819      	ldrb	r1, [r3, #0]
 800b3b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	4413      	add	r3, r2
 800b3be:	3334      	adds	r3, #52	@ 0x34
 800b3c0:	460a      	mov	r2, r1
 800b3c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b3c4:	68ba      	ldr	r2, [r7, #8]
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d006      	beq.n	800b3de <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	61fb      	str	r3, [r7, #28]
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	2b0f      	cmp	r3, #15
 800b3da:	d9e9      	bls.n	800b3b0 <prvInitialiseNewTask+0x66>
 800b3dc:	e000      	b.n	800b3e0 <prvInitialiseNewTask+0x96>
			{
				break;
 800b3de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b3e8:	e003      	b.n	800b3f2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f4:	2b37      	cmp	r3, #55	@ 0x37
 800b3f6:	d901      	bls.n	800b3fc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b3f8:	2337      	movs	r3, #55	@ 0x37
 800b3fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b400:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b404:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b406:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40a:	2200      	movs	r2, #0
 800b40c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b410:	3304      	adds	r3, #4
 800b412:	4618      	mov	r0, r3
 800b414:	f7ff f966 	bl	800a6e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41a:	3318      	adds	r3, #24
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7ff f961 	bl	800a6e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b426:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b42a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b430:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b436:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43a:	2200      	movs	r2, #0
 800b43c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b440:	2200      	movs	r2, #0
 800b442:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	68f9      	ldr	r1, [r7, #12]
 800b44a:	69b8      	ldr	r0, [r7, #24]
 800b44c:	f001 f93e 	bl	800c6cc <pxPortInitialiseStack>
 800b450:	4602      	mov	r2, r0
 800b452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b454:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d002      	beq.n	800b462 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b45e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b460:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b462:	bf00      	nop
 800b464:	3720      	adds	r7, #32
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
	...

0800b46c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b082      	sub	sp, #8
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b474:	f001 fa58 	bl	800c928 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b478:	4b2d      	ldr	r3, [pc, #180]	@ (800b530 <prvAddNewTaskToReadyList+0xc4>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	3301      	adds	r3, #1
 800b47e:	4a2c      	ldr	r2, [pc, #176]	@ (800b530 <prvAddNewTaskToReadyList+0xc4>)
 800b480:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b482:	4b2c      	ldr	r3, [pc, #176]	@ (800b534 <prvAddNewTaskToReadyList+0xc8>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d109      	bne.n	800b49e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b48a:	4a2a      	ldr	r2, [pc, #168]	@ (800b534 <prvAddNewTaskToReadyList+0xc8>)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b490:	4b27      	ldr	r3, [pc, #156]	@ (800b530 <prvAddNewTaskToReadyList+0xc4>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b01      	cmp	r3, #1
 800b496:	d110      	bne.n	800b4ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b498:	f000 fc1e 	bl	800bcd8 <prvInitialiseTaskLists>
 800b49c:	e00d      	b.n	800b4ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b49e:	4b26      	ldr	r3, [pc, #152]	@ (800b538 <prvAddNewTaskToReadyList+0xcc>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d109      	bne.n	800b4ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b4a6:	4b23      	ldr	r3, [pc, #140]	@ (800b534 <prvAddNewTaskToReadyList+0xc8>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d802      	bhi.n	800b4ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b4b4:	4a1f      	ldr	r2, [pc, #124]	@ (800b534 <prvAddNewTaskToReadyList+0xc8>)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b4ba:	4b20      	ldr	r3, [pc, #128]	@ (800b53c <prvAddNewTaskToReadyList+0xd0>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	4a1e      	ldr	r2, [pc, #120]	@ (800b53c <prvAddNewTaskToReadyList+0xd0>)
 800b4c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b4c4:	4b1d      	ldr	r3, [pc, #116]	@ (800b53c <prvAddNewTaskToReadyList+0xd0>)
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4d0:	4b1b      	ldr	r3, [pc, #108]	@ (800b540 <prvAddNewTaskToReadyList+0xd4>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d903      	bls.n	800b4e0 <prvAddNewTaskToReadyList+0x74>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4dc:	4a18      	ldr	r2, [pc, #96]	@ (800b540 <prvAddNewTaskToReadyList+0xd4>)
 800b4de:	6013      	str	r3, [r2, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	4413      	add	r3, r2
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	4a15      	ldr	r2, [pc, #84]	@ (800b544 <prvAddNewTaskToReadyList+0xd8>)
 800b4ee:	441a      	add	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	3304      	adds	r3, #4
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	4610      	mov	r0, r2
 800b4f8:	f7ff f901 	bl	800a6fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b4fc:	f001 fa46 	bl	800c98c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b500:	4b0d      	ldr	r3, [pc, #52]	@ (800b538 <prvAddNewTaskToReadyList+0xcc>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d00e      	beq.n	800b526 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b508:	4b0a      	ldr	r3, [pc, #40]	@ (800b534 <prvAddNewTaskToReadyList+0xc8>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b512:	429a      	cmp	r2, r3
 800b514:	d207      	bcs.n	800b526 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b516:	4b0c      	ldr	r3, [pc, #48]	@ (800b548 <prvAddNewTaskToReadyList+0xdc>)
 800b518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b51c:	601a      	str	r2, [r3, #0]
 800b51e:	f3bf 8f4f 	dsb	sy
 800b522:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b526:	bf00      	nop
 800b528:	3708      	adds	r7, #8
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	240010d0 	.word	0x240010d0
 800b534:	24000bfc 	.word	0x24000bfc
 800b538:	240010dc 	.word	0x240010dc
 800b53c:	240010ec 	.word	0x240010ec
 800b540:	240010d8 	.word	0x240010d8
 800b544:	24000c00 	.word	0x24000c00
 800b548:	e000ed04 	.word	0xe000ed04

0800b54c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b554:	2300      	movs	r3, #0
 800b556:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d018      	beq.n	800b590 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b55e:	4b14      	ldr	r3, [pc, #80]	@ (800b5b0 <vTaskDelay+0x64>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00b      	beq.n	800b57e <vTaskDelay+0x32>
	__asm volatile
 800b566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b56a:	f383 8811 	msr	BASEPRI, r3
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f3bf 8f4f 	dsb	sy
 800b576:	60bb      	str	r3, [r7, #8]
}
 800b578:	bf00      	nop
 800b57a:	bf00      	nop
 800b57c:	e7fd      	b.n	800b57a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b57e:	f000 f883 	bl	800b688 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b582:	2100      	movs	r1, #0
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 fcf3 	bl	800bf70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b58a:	f000 f88b 	bl	800b6a4 <xTaskResumeAll>
 800b58e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d107      	bne.n	800b5a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b596:	4b07      	ldr	r3, [pc, #28]	@ (800b5b4 <vTaskDelay+0x68>)
 800b598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b59c:	601a      	str	r2, [r3, #0]
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5a6:	bf00      	nop
 800b5a8:	3710      	adds	r7, #16
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	240010f8 	.word	0x240010f8
 800b5b4:	e000ed04 	.word	0xe000ed04

0800b5b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b08a      	sub	sp, #40	@ 0x28
 800b5bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b5c6:	463a      	mov	r2, r7
 800b5c8:	1d39      	adds	r1, r7, #4
 800b5ca:	f107 0308 	add.w	r3, r7, #8
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7ff f834 	bl	800a63c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b5d4:	6839      	ldr	r1, [r7, #0]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	68ba      	ldr	r2, [r7, #8]
 800b5da:	9202      	str	r2, [sp, #8]
 800b5dc:	9301      	str	r3, [sp, #4]
 800b5de:	2300      	movs	r3, #0
 800b5e0:	9300      	str	r3, [sp, #0]
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	460a      	mov	r2, r1
 800b5e6:	4922      	ldr	r1, [pc, #136]	@ (800b670 <vTaskStartScheduler+0xb8>)
 800b5e8:	4822      	ldr	r0, [pc, #136]	@ (800b674 <vTaskStartScheduler+0xbc>)
 800b5ea:	f7ff fe09 	bl	800b200 <xTaskCreateStatic>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	4a21      	ldr	r2, [pc, #132]	@ (800b678 <vTaskStartScheduler+0xc0>)
 800b5f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b5f4:	4b20      	ldr	r3, [pc, #128]	@ (800b678 <vTaskStartScheduler+0xc0>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d002      	beq.n	800b602 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	617b      	str	r3, [r7, #20]
 800b600:	e001      	b.n	800b606 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b602:	2300      	movs	r3, #0
 800b604:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d102      	bne.n	800b612 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b60c:	f000 fd04 	bl	800c018 <xTimerCreateTimerTask>
 800b610:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d116      	bne.n	800b646 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b61c:	f383 8811 	msr	BASEPRI, r3
 800b620:	f3bf 8f6f 	isb	sy
 800b624:	f3bf 8f4f 	dsb	sy
 800b628:	613b      	str	r3, [r7, #16]
}
 800b62a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b62c:	4b13      	ldr	r3, [pc, #76]	@ (800b67c <vTaskStartScheduler+0xc4>)
 800b62e:	f04f 32ff 	mov.w	r2, #4294967295
 800b632:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b634:	4b12      	ldr	r3, [pc, #72]	@ (800b680 <vTaskStartScheduler+0xc8>)
 800b636:	2201      	movs	r2, #1
 800b638:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b63a:	4b12      	ldr	r3, [pc, #72]	@ (800b684 <vTaskStartScheduler+0xcc>)
 800b63c:	2200      	movs	r2, #0
 800b63e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b640:	f001 f8ce 	bl	800c7e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b644:	e00f      	b.n	800b666 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b64c:	d10b      	bne.n	800b666 <vTaskStartScheduler+0xae>
	__asm volatile
 800b64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	60fb      	str	r3, [r7, #12]
}
 800b660:	bf00      	nop
 800b662:	bf00      	nop
 800b664:	e7fd      	b.n	800b662 <vTaskStartScheduler+0xaa>
}
 800b666:	bf00      	nop
 800b668:	3718      	adds	r7, #24
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	08011ed0 	.word	0x08011ed0
 800b674:	0800bca9 	.word	0x0800bca9
 800b678:	240010f4 	.word	0x240010f4
 800b67c:	240010f0 	.word	0x240010f0
 800b680:	240010dc 	.word	0x240010dc
 800b684:	240010d4 	.word	0x240010d4

0800b688 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b688:	b480      	push	{r7}
 800b68a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b68c:	4b04      	ldr	r3, [pc, #16]	@ (800b6a0 <vTaskSuspendAll+0x18>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	3301      	adds	r3, #1
 800b692:	4a03      	ldr	r2, [pc, #12]	@ (800b6a0 <vTaskSuspendAll+0x18>)
 800b694:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b696:	bf00      	nop
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr
 800b6a0:	240010f8 	.word	0x240010f8

0800b6a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b6b2:	4b42      	ldr	r3, [pc, #264]	@ (800b7bc <xTaskResumeAll+0x118>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d10b      	bne.n	800b6d2 <xTaskResumeAll+0x2e>
	__asm volatile
 800b6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6be:	f383 8811 	msr	BASEPRI, r3
 800b6c2:	f3bf 8f6f 	isb	sy
 800b6c6:	f3bf 8f4f 	dsb	sy
 800b6ca:	603b      	str	r3, [r7, #0]
}
 800b6cc:	bf00      	nop
 800b6ce:	bf00      	nop
 800b6d0:	e7fd      	b.n	800b6ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b6d2:	f001 f929 	bl	800c928 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b6d6:	4b39      	ldr	r3, [pc, #228]	@ (800b7bc <xTaskResumeAll+0x118>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	4a37      	ldr	r2, [pc, #220]	@ (800b7bc <xTaskResumeAll+0x118>)
 800b6de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6e0:	4b36      	ldr	r3, [pc, #216]	@ (800b7bc <xTaskResumeAll+0x118>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d162      	bne.n	800b7ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b6e8:	4b35      	ldr	r3, [pc, #212]	@ (800b7c0 <xTaskResumeAll+0x11c>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d05e      	beq.n	800b7ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6f0:	e02f      	b.n	800b752 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6f2:	4b34      	ldr	r3, [pc, #208]	@ (800b7c4 <xTaskResumeAll+0x120>)
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	3318      	adds	r3, #24
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7ff f85a 	bl	800a7b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	3304      	adds	r3, #4
 800b708:	4618      	mov	r0, r3
 800b70a:	f7ff f855 	bl	800a7b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b712:	4b2d      	ldr	r3, [pc, #180]	@ (800b7c8 <xTaskResumeAll+0x124>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	429a      	cmp	r2, r3
 800b718:	d903      	bls.n	800b722 <xTaskResumeAll+0x7e>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b71e:	4a2a      	ldr	r2, [pc, #168]	@ (800b7c8 <xTaskResumeAll+0x124>)
 800b720:	6013      	str	r3, [r2, #0]
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b726:	4613      	mov	r3, r2
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	4413      	add	r3, r2
 800b72c:	009b      	lsls	r3, r3, #2
 800b72e:	4a27      	ldr	r2, [pc, #156]	@ (800b7cc <xTaskResumeAll+0x128>)
 800b730:	441a      	add	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	3304      	adds	r3, #4
 800b736:	4619      	mov	r1, r3
 800b738:	4610      	mov	r0, r2
 800b73a:	f7fe ffe0 	bl	800a6fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b742:	4b23      	ldr	r3, [pc, #140]	@ (800b7d0 <xTaskResumeAll+0x12c>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b748:	429a      	cmp	r2, r3
 800b74a:	d302      	bcc.n	800b752 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b74c:	4b21      	ldr	r3, [pc, #132]	@ (800b7d4 <xTaskResumeAll+0x130>)
 800b74e:	2201      	movs	r2, #1
 800b750:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b752:	4b1c      	ldr	r3, [pc, #112]	@ (800b7c4 <xTaskResumeAll+0x120>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d1cb      	bne.n	800b6f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d001      	beq.n	800b764 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b760:	f000 fb58 	bl	800be14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b764:	4b1c      	ldr	r3, [pc, #112]	@ (800b7d8 <xTaskResumeAll+0x134>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d010      	beq.n	800b792 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b770:	f000 f846 	bl	800b800 <xTaskIncrementTick>
 800b774:	4603      	mov	r3, r0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d002      	beq.n	800b780 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b77a:	4b16      	ldr	r3, [pc, #88]	@ (800b7d4 <xTaskResumeAll+0x130>)
 800b77c:	2201      	movs	r2, #1
 800b77e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	3b01      	subs	r3, #1
 800b784:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1f1      	bne.n	800b770 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b78c:	4b12      	ldr	r3, [pc, #72]	@ (800b7d8 <xTaskResumeAll+0x134>)
 800b78e:	2200      	movs	r2, #0
 800b790:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b792:	4b10      	ldr	r3, [pc, #64]	@ (800b7d4 <xTaskResumeAll+0x130>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d009      	beq.n	800b7ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b79a:	2301      	movs	r3, #1
 800b79c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b79e:	4b0f      	ldr	r3, [pc, #60]	@ (800b7dc <xTaskResumeAll+0x138>)
 800b7a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7a4:	601a      	str	r2, [r3, #0]
 800b7a6:	f3bf 8f4f 	dsb	sy
 800b7aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b7ae:	f001 f8ed 	bl	800c98c <vPortExitCritical>

	return xAlreadyYielded;
 800b7b2:	68bb      	ldr	r3, [r7, #8]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	240010f8 	.word	0x240010f8
 800b7c0:	240010d0 	.word	0x240010d0
 800b7c4:	24001090 	.word	0x24001090
 800b7c8:	240010d8 	.word	0x240010d8
 800b7cc:	24000c00 	.word	0x24000c00
 800b7d0:	24000bfc 	.word	0x24000bfc
 800b7d4:	240010e4 	.word	0x240010e4
 800b7d8:	240010e0 	.word	0x240010e0
 800b7dc:	e000ed04 	.word	0xe000ed04

0800b7e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b7e6:	4b05      	ldr	r3, [pc, #20]	@ (800b7fc <xTaskGetTickCount+0x1c>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b7ec:	687b      	ldr	r3, [r7, #4]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	370c      	adds	r7, #12
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	240010d4 	.word	0x240010d4

0800b800 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b806:	2300      	movs	r3, #0
 800b808:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b80a:	4b4f      	ldr	r3, [pc, #316]	@ (800b948 <xTaskIncrementTick+0x148>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f040 8090 	bne.w	800b934 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b814:	4b4d      	ldr	r3, [pc, #308]	@ (800b94c <xTaskIncrementTick+0x14c>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	3301      	adds	r3, #1
 800b81a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b81c:	4a4b      	ldr	r2, [pc, #300]	@ (800b94c <xTaskIncrementTick+0x14c>)
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d121      	bne.n	800b86c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b828:	4b49      	ldr	r3, [pc, #292]	@ (800b950 <xTaskIncrementTick+0x150>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00b      	beq.n	800b84a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b836:	f383 8811 	msr	BASEPRI, r3
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	603b      	str	r3, [r7, #0]
}
 800b844:	bf00      	nop
 800b846:	bf00      	nop
 800b848:	e7fd      	b.n	800b846 <xTaskIncrementTick+0x46>
 800b84a:	4b41      	ldr	r3, [pc, #260]	@ (800b950 <xTaskIncrementTick+0x150>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	60fb      	str	r3, [r7, #12]
 800b850:	4b40      	ldr	r3, [pc, #256]	@ (800b954 <xTaskIncrementTick+0x154>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a3e      	ldr	r2, [pc, #248]	@ (800b950 <xTaskIncrementTick+0x150>)
 800b856:	6013      	str	r3, [r2, #0]
 800b858:	4a3e      	ldr	r2, [pc, #248]	@ (800b954 <xTaskIncrementTick+0x154>)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6013      	str	r3, [r2, #0]
 800b85e:	4b3e      	ldr	r3, [pc, #248]	@ (800b958 <xTaskIncrementTick+0x158>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	3301      	adds	r3, #1
 800b864:	4a3c      	ldr	r2, [pc, #240]	@ (800b958 <xTaskIncrementTick+0x158>)
 800b866:	6013      	str	r3, [r2, #0]
 800b868:	f000 fad4 	bl	800be14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b86c:	4b3b      	ldr	r3, [pc, #236]	@ (800b95c <xTaskIncrementTick+0x15c>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	693a      	ldr	r2, [r7, #16]
 800b872:	429a      	cmp	r2, r3
 800b874:	d349      	bcc.n	800b90a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b876:	4b36      	ldr	r3, [pc, #216]	@ (800b950 <xTaskIncrementTick+0x150>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d104      	bne.n	800b88a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b880:	4b36      	ldr	r3, [pc, #216]	@ (800b95c <xTaskIncrementTick+0x15c>)
 800b882:	f04f 32ff 	mov.w	r2, #4294967295
 800b886:	601a      	str	r2, [r3, #0]
					break;
 800b888:	e03f      	b.n	800b90a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b88a:	4b31      	ldr	r3, [pc, #196]	@ (800b950 <xTaskIncrementTick+0x150>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b89a:	693a      	ldr	r2, [r7, #16]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d203      	bcs.n	800b8aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b8a2:	4a2e      	ldr	r2, [pc, #184]	@ (800b95c <xTaskIncrementTick+0x15c>)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b8a8:	e02f      	b.n	800b90a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	3304      	adds	r3, #4
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7fe ff82 	bl	800a7b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d004      	beq.n	800b8c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	3318      	adds	r3, #24
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7fe ff79 	bl	800a7b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8ca:	4b25      	ldr	r3, [pc, #148]	@ (800b960 <xTaskIncrementTick+0x160>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d903      	bls.n	800b8da <xTaskIncrementTick+0xda>
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8d6:	4a22      	ldr	r2, [pc, #136]	@ (800b960 <xTaskIncrementTick+0x160>)
 800b8d8:	6013      	str	r3, [r2, #0]
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8de:	4613      	mov	r3, r2
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	4413      	add	r3, r2
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	4a1f      	ldr	r2, [pc, #124]	@ (800b964 <xTaskIncrementTick+0x164>)
 800b8e8:	441a      	add	r2, r3
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	3304      	adds	r3, #4
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	4610      	mov	r0, r2
 800b8f2:	f7fe ff04 	bl	800a6fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8fa:	4b1b      	ldr	r3, [pc, #108]	@ (800b968 <xTaskIncrementTick+0x168>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b900:	429a      	cmp	r2, r3
 800b902:	d3b8      	bcc.n	800b876 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b904:	2301      	movs	r3, #1
 800b906:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b908:	e7b5      	b.n	800b876 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b90a:	4b17      	ldr	r3, [pc, #92]	@ (800b968 <xTaskIncrementTick+0x168>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b910:	4914      	ldr	r1, [pc, #80]	@ (800b964 <xTaskIncrementTick+0x164>)
 800b912:	4613      	mov	r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	4413      	add	r3, r2
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	440b      	add	r3, r1
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d901      	bls.n	800b926 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b922:	2301      	movs	r3, #1
 800b924:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b926:	4b11      	ldr	r3, [pc, #68]	@ (800b96c <xTaskIncrementTick+0x16c>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d007      	beq.n	800b93e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b92e:	2301      	movs	r3, #1
 800b930:	617b      	str	r3, [r7, #20]
 800b932:	e004      	b.n	800b93e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b934:	4b0e      	ldr	r3, [pc, #56]	@ (800b970 <xTaskIncrementTick+0x170>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	3301      	adds	r3, #1
 800b93a:	4a0d      	ldr	r2, [pc, #52]	@ (800b970 <xTaskIncrementTick+0x170>)
 800b93c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b93e:	697b      	ldr	r3, [r7, #20]
}
 800b940:	4618      	mov	r0, r3
 800b942:	3718      	adds	r7, #24
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	240010f8 	.word	0x240010f8
 800b94c:	240010d4 	.word	0x240010d4
 800b950:	24001088 	.word	0x24001088
 800b954:	2400108c 	.word	0x2400108c
 800b958:	240010e8 	.word	0x240010e8
 800b95c:	240010f0 	.word	0x240010f0
 800b960:	240010d8 	.word	0x240010d8
 800b964:	24000c00 	.word	0x24000c00
 800b968:	24000bfc 	.word	0x24000bfc
 800b96c:	240010e4 	.word	0x240010e4
 800b970:	240010e0 	.word	0x240010e0

0800b974 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b97a:	4b28      	ldr	r3, [pc, #160]	@ (800ba1c <vTaskSwitchContext+0xa8>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d003      	beq.n	800b98a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b982:	4b27      	ldr	r3, [pc, #156]	@ (800ba20 <vTaskSwitchContext+0xac>)
 800b984:	2201      	movs	r2, #1
 800b986:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b988:	e042      	b.n	800ba10 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b98a:	4b25      	ldr	r3, [pc, #148]	@ (800ba20 <vTaskSwitchContext+0xac>)
 800b98c:	2200      	movs	r2, #0
 800b98e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b990:	4b24      	ldr	r3, [pc, #144]	@ (800ba24 <vTaskSwitchContext+0xb0>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	60fb      	str	r3, [r7, #12]
 800b996:	e011      	b.n	800b9bc <vTaskSwitchContext+0x48>
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10b      	bne.n	800b9b6 <vTaskSwitchContext+0x42>
	__asm volatile
 800b99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9a2:	f383 8811 	msr	BASEPRI, r3
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	607b      	str	r3, [r7, #4]
}
 800b9b0:	bf00      	nop
 800b9b2:	bf00      	nop
 800b9b4:	e7fd      	b.n	800b9b2 <vTaskSwitchContext+0x3e>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	3b01      	subs	r3, #1
 800b9ba:	60fb      	str	r3, [r7, #12]
 800b9bc:	491a      	ldr	r1, [pc, #104]	@ (800ba28 <vTaskSwitchContext+0xb4>)
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	4413      	add	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	440b      	add	r3, r1
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d0e3      	beq.n	800b998 <vTaskSwitchContext+0x24>
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4413      	add	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	4a13      	ldr	r2, [pc, #76]	@ (800ba28 <vTaskSwitchContext+0xb4>)
 800b9dc:	4413      	add	r3, r2
 800b9de:	60bb      	str	r3, [r7, #8]
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	685a      	ldr	r2, [r3, #4]
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	605a      	str	r2, [r3, #4]
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	685a      	ldr	r2, [r3, #4]
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	3308      	adds	r3, #8
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d104      	bne.n	800ba00 <vTaskSwitchContext+0x8c>
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	685a      	ldr	r2, [r3, #4]
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	605a      	str	r2, [r3, #4]
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	4a09      	ldr	r2, [pc, #36]	@ (800ba2c <vTaskSwitchContext+0xb8>)
 800ba08:	6013      	str	r3, [r2, #0]
 800ba0a:	4a06      	ldr	r2, [pc, #24]	@ (800ba24 <vTaskSwitchContext+0xb0>)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6013      	str	r3, [r2, #0]
}
 800ba10:	bf00      	nop
 800ba12:	3714      	adds	r7, #20
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr
 800ba1c:	240010f8 	.word	0x240010f8
 800ba20:	240010e4 	.word	0x240010e4
 800ba24:	240010d8 	.word	0x240010d8
 800ba28:	24000c00 	.word	0x24000c00
 800ba2c:	24000bfc 	.word	0x24000bfc

0800ba30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d10b      	bne.n	800ba58 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ba40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba44:	f383 8811 	msr	BASEPRI, r3
 800ba48:	f3bf 8f6f 	isb	sy
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	60fb      	str	r3, [r7, #12]
}
 800ba52:	bf00      	nop
 800ba54:	bf00      	nop
 800ba56:	e7fd      	b.n	800ba54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba58:	4b07      	ldr	r3, [pc, #28]	@ (800ba78 <vTaskPlaceOnEventList+0x48>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	3318      	adds	r3, #24
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f7fe fe70 	bl	800a746 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ba66:	2101      	movs	r1, #1
 800ba68:	6838      	ldr	r0, [r7, #0]
 800ba6a:	f000 fa81 	bl	800bf70 <prvAddCurrentTaskToDelayedList>
}
 800ba6e:	bf00      	nop
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	24000bfc 	.word	0x24000bfc

0800ba7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b086      	sub	sp, #24
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d10b      	bne.n	800baa6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ba8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba92:	f383 8811 	msr	BASEPRI, r3
 800ba96:	f3bf 8f6f 	isb	sy
 800ba9a:	f3bf 8f4f 	dsb	sy
 800ba9e:	617b      	str	r3, [r7, #20]
}
 800baa0:	bf00      	nop
 800baa2:	bf00      	nop
 800baa4:	e7fd      	b.n	800baa2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800baa6:	4b0a      	ldr	r3, [pc, #40]	@ (800bad0 <vTaskPlaceOnEventListRestricted+0x54>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	3318      	adds	r3, #24
 800baac:	4619      	mov	r1, r3
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f7fe fe25 	bl	800a6fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d002      	beq.n	800bac0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800baba:	f04f 33ff 	mov.w	r3, #4294967295
 800babe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bac0:	6879      	ldr	r1, [r7, #4]
 800bac2:	68b8      	ldr	r0, [r7, #8]
 800bac4:	f000 fa54 	bl	800bf70 <prvAddCurrentTaskToDelayedList>
	}
 800bac8:	bf00      	nop
 800baca:	3718      	adds	r7, #24
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	24000bfc 	.word	0x24000bfc

0800bad4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d10b      	bne.n	800bb02 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800baea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baee:	f383 8811 	msr	BASEPRI, r3
 800baf2:	f3bf 8f6f 	isb	sy
 800baf6:	f3bf 8f4f 	dsb	sy
 800bafa:	60fb      	str	r3, [r7, #12]
}
 800bafc:	bf00      	nop
 800bafe:	bf00      	nop
 800bb00:	e7fd      	b.n	800bafe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	3318      	adds	r3, #24
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7fe fe56 	bl	800a7b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb0c:	4b1d      	ldr	r3, [pc, #116]	@ (800bb84 <xTaskRemoveFromEventList+0xb0>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d11d      	bne.n	800bb50 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	3304      	adds	r3, #4
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7fe fe4d 	bl	800a7b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb22:	4b19      	ldr	r3, [pc, #100]	@ (800bb88 <xTaskRemoveFromEventList+0xb4>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d903      	bls.n	800bb32 <xTaskRemoveFromEventList+0x5e>
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb2e:	4a16      	ldr	r2, [pc, #88]	@ (800bb88 <xTaskRemoveFromEventList+0xb4>)
 800bb30:	6013      	str	r3, [r2, #0]
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb36:	4613      	mov	r3, r2
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	4413      	add	r3, r2
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	4a13      	ldr	r2, [pc, #76]	@ (800bb8c <xTaskRemoveFromEventList+0xb8>)
 800bb40:	441a      	add	r2, r3
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	3304      	adds	r3, #4
 800bb46:	4619      	mov	r1, r3
 800bb48:	4610      	mov	r0, r2
 800bb4a:	f7fe fdd8 	bl	800a6fe <vListInsertEnd>
 800bb4e:	e005      	b.n	800bb5c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	3318      	adds	r3, #24
 800bb54:	4619      	mov	r1, r3
 800bb56:	480e      	ldr	r0, [pc, #56]	@ (800bb90 <xTaskRemoveFromEventList+0xbc>)
 800bb58:	f7fe fdd1 	bl	800a6fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb60:	4b0c      	ldr	r3, [pc, #48]	@ (800bb94 <xTaskRemoveFromEventList+0xc0>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d905      	bls.n	800bb76 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bb6e:	4b0a      	ldr	r3, [pc, #40]	@ (800bb98 <xTaskRemoveFromEventList+0xc4>)
 800bb70:	2201      	movs	r2, #1
 800bb72:	601a      	str	r2, [r3, #0]
 800bb74:	e001      	b.n	800bb7a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bb76:	2300      	movs	r3, #0
 800bb78:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bb7a:	697b      	ldr	r3, [r7, #20]
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3718      	adds	r7, #24
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	240010f8 	.word	0x240010f8
 800bb88:	240010d8 	.word	0x240010d8
 800bb8c:	24000c00 	.word	0x24000c00
 800bb90:	24001090 	.word	0x24001090
 800bb94:	24000bfc 	.word	0x24000bfc
 800bb98:	240010e4 	.word	0x240010e4

0800bb9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bba4:	4b06      	ldr	r3, [pc, #24]	@ (800bbc0 <vTaskInternalSetTimeOutState+0x24>)
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bbac:	4b05      	ldr	r3, [pc, #20]	@ (800bbc4 <vTaskInternalSetTimeOutState+0x28>)
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	605a      	str	r2, [r3, #4]
}
 800bbb4:	bf00      	nop
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr
 800bbc0:	240010e8 	.word	0x240010e8
 800bbc4:	240010d4 	.word	0x240010d4

0800bbc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b088      	sub	sp, #32
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d10b      	bne.n	800bbf0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bbd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbdc:	f383 8811 	msr	BASEPRI, r3
 800bbe0:	f3bf 8f6f 	isb	sy
 800bbe4:	f3bf 8f4f 	dsb	sy
 800bbe8:	613b      	str	r3, [r7, #16]
}
 800bbea:	bf00      	nop
 800bbec:	bf00      	nop
 800bbee:	e7fd      	b.n	800bbec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d10b      	bne.n	800bc0e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bbf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbfa:	f383 8811 	msr	BASEPRI, r3
 800bbfe:	f3bf 8f6f 	isb	sy
 800bc02:	f3bf 8f4f 	dsb	sy
 800bc06:	60fb      	str	r3, [r7, #12]
}
 800bc08:	bf00      	nop
 800bc0a:	bf00      	nop
 800bc0c:	e7fd      	b.n	800bc0a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bc0e:	f000 fe8b 	bl	800c928 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc12:	4b1d      	ldr	r3, [pc, #116]	@ (800bc88 <xTaskCheckForTimeOut+0xc0>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	69ba      	ldr	r2, [r7, #24]
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc2a:	d102      	bne.n	800bc32 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	61fb      	str	r3, [r7, #28]
 800bc30:	e023      	b.n	800bc7a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	4b15      	ldr	r3, [pc, #84]	@ (800bc8c <xTaskCheckForTimeOut+0xc4>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d007      	beq.n	800bc4e <xTaskCheckForTimeOut+0x86>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	69ba      	ldr	r2, [r7, #24]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d302      	bcc.n	800bc4e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	61fb      	str	r3, [r7, #28]
 800bc4c:	e015      	b.n	800bc7a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	697a      	ldr	r2, [r7, #20]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d20b      	bcs.n	800bc70 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	1ad2      	subs	r2, r2, r3
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f7ff ff99 	bl	800bb9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	61fb      	str	r3, [r7, #28]
 800bc6e:	e004      	b.n	800bc7a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	2200      	movs	r2, #0
 800bc74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bc76:	2301      	movs	r3, #1
 800bc78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bc7a:	f000 fe87 	bl	800c98c <vPortExitCritical>

	return xReturn;
 800bc7e:	69fb      	ldr	r3, [r7, #28]
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3720      	adds	r7, #32
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	240010d4 	.word	0x240010d4
 800bc8c:	240010e8 	.word	0x240010e8

0800bc90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc90:	b480      	push	{r7}
 800bc92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc94:	4b03      	ldr	r3, [pc, #12]	@ (800bca4 <vTaskMissedYield+0x14>)
 800bc96:	2201      	movs	r2, #1
 800bc98:	601a      	str	r2, [r3, #0]
}
 800bc9a:	bf00      	nop
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	240010e4 	.word	0x240010e4

0800bca8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bcb0:	f000 f852 	bl	800bd58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bcb4:	4b06      	ldr	r3, [pc, #24]	@ (800bcd0 <prvIdleTask+0x28>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d9f9      	bls.n	800bcb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bcbc:	4b05      	ldr	r3, [pc, #20]	@ (800bcd4 <prvIdleTask+0x2c>)
 800bcbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	f3bf 8f4f 	dsb	sy
 800bcc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bccc:	e7f0      	b.n	800bcb0 <prvIdleTask+0x8>
 800bcce:	bf00      	nop
 800bcd0:	24000c00 	.word	0x24000c00
 800bcd4:	e000ed04 	.word	0xe000ed04

0800bcd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcde:	2300      	movs	r3, #0
 800bce0:	607b      	str	r3, [r7, #4]
 800bce2:	e00c      	b.n	800bcfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	4613      	mov	r3, r2
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	4413      	add	r3, r2
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	4a12      	ldr	r2, [pc, #72]	@ (800bd38 <prvInitialiseTaskLists+0x60>)
 800bcf0:	4413      	add	r3, r2
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7fe fcd6 	bl	800a6a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	607b      	str	r3, [r7, #4]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2b37      	cmp	r3, #55	@ 0x37
 800bd02:	d9ef      	bls.n	800bce4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd04:	480d      	ldr	r0, [pc, #52]	@ (800bd3c <prvInitialiseTaskLists+0x64>)
 800bd06:	f7fe fccd 	bl	800a6a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd0a:	480d      	ldr	r0, [pc, #52]	@ (800bd40 <prvInitialiseTaskLists+0x68>)
 800bd0c:	f7fe fcca 	bl	800a6a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd10:	480c      	ldr	r0, [pc, #48]	@ (800bd44 <prvInitialiseTaskLists+0x6c>)
 800bd12:	f7fe fcc7 	bl	800a6a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd16:	480c      	ldr	r0, [pc, #48]	@ (800bd48 <prvInitialiseTaskLists+0x70>)
 800bd18:	f7fe fcc4 	bl	800a6a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd1c:	480b      	ldr	r0, [pc, #44]	@ (800bd4c <prvInitialiseTaskLists+0x74>)
 800bd1e:	f7fe fcc1 	bl	800a6a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd22:	4b0b      	ldr	r3, [pc, #44]	@ (800bd50 <prvInitialiseTaskLists+0x78>)
 800bd24:	4a05      	ldr	r2, [pc, #20]	@ (800bd3c <prvInitialiseTaskLists+0x64>)
 800bd26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd28:	4b0a      	ldr	r3, [pc, #40]	@ (800bd54 <prvInitialiseTaskLists+0x7c>)
 800bd2a:	4a05      	ldr	r2, [pc, #20]	@ (800bd40 <prvInitialiseTaskLists+0x68>)
 800bd2c:	601a      	str	r2, [r3, #0]
}
 800bd2e:	bf00      	nop
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	24000c00 	.word	0x24000c00
 800bd3c:	24001060 	.word	0x24001060
 800bd40:	24001074 	.word	0x24001074
 800bd44:	24001090 	.word	0x24001090
 800bd48:	240010a4 	.word	0x240010a4
 800bd4c:	240010bc 	.word	0x240010bc
 800bd50:	24001088 	.word	0x24001088
 800bd54:	2400108c 	.word	0x2400108c

0800bd58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd5e:	e019      	b.n	800bd94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd60:	f000 fde2 	bl	800c928 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd64:	4b10      	ldr	r3, [pc, #64]	@ (800bda8 <prvCheckTasksWaitingTermination+0x50>)
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	68db      	ldr	r3, [r3, #12]
 800bd6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	3304      	adds	r3, #4
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7fe fd21 	bl	800a7b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bd76:	4b0d      	ldr	r3, [pc, #52]	@ (800bdac <prvCheckTasksWaitingTermination+0x54>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	4a0b      	ldr	r2, [pc, #44]	@ (800bdac <prvCheckTasksWaitingTermination+0x54>)
 800bd7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bd80:	4b0b      	ldr	r3, [pc, #44]	@ (800bdb0 <prvCheckTasksWaitingTermination+0x58>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	3b01      	subs	r3, #1
 800bd86:	4a0a      	ldr	r2, [pc, #40]	@ (800bdb0 <prvCheckTasksWaitingTermination+0x58>)
 800bd88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bd8a:	f000 fdff 	bl	800c98c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 f810 	bl	800bdb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd94:	4b06      	ldr	r3, [pc, #24]	@ (800bdb0 <prvCheckTasksWaitingTermination+0x58>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d1e1      	bne.n	800bd60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bd9c:	bf00      	nop
 800bd9e:	bf00      	nop
 800bda0:	3708      	adds	r7, #8
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	240010a4 	.word	0x240010a4
 800bdac:	240010d0 	.word	0x240010d0
 800bdb0:	240010b8 	.word	0x240010b8

0800bdb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d108      	bne.n	800bdd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f000 ff9c 	bl	800cd08 <vPortFree>
				vPortFree( pxTCB );
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 ff99 	bl	800cd08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bdd6:	e019      	b.n	800be0c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d103      	bne.n	800bdea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 ff90 	bl	800cd08 <vPortFree>
	}
 800bde8:	e010      	b.n	800be0c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bdf0:	2b02      	cmp	r3, #2
 800bdf2:	d00b      	beq.n	800be0c <prvDeleteTCB+0x58>
	__asm volatile
 800bdf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf8:	f383 8811 	msr	BASEPRI, r3
 800bdfc:	f3bf 8f6f 	isb	sy
 800be00:	f3bf 8f4f 	dsb	sy
 800be04:	60fb      	str	r3, [r7, #12]
}
 800be06:	bf00      	nop
 800be08:	bf00      	nop
 800be0a:	e7fd      	b.n	800be08 <prvDeleteTCB+0x54>
	}
 800be0c:	bf00      	nop
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be1a:	4b0c      	ldr	r3, [pc, #48]	@ (800be4c <prvResetNextTaskUnblockTime+0x38>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d104      	bne.n	800be2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be24:	4b0a      	ldr	r3, [pc, #40]	@ (800be50 <prvResetNextTaskUnblockTime+0x3c>)
 800be26:	f04f 32ff 	mov.w	r2, #4294967295
 800be2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be2c:	e008      	b.n	800be40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be2e:	4b07      	ldr	r3, [pc, #28]	@ (800be4c <prvResetNextTaskUnblockTime+0x38>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	68db      	ldr	r3, [r3, #12]
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	4a04      	ldr	r2, [pc, #16]	@ (800be50 <prvResetNextTaskUnblockTime+0x3c>)
 800be3e:	6013      	str	r3, [r2, #0]
}
 800be40:	bf00      	nop
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr
 800be4c:	24001088 	.word	0x24001088
 800be50:	240010f0 	.word	0x240010f0

0800be54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be5a:	4b0b      	ldr	r3, [pc, #44]	@ (800be88 <xTaskGetSchedulerState+0x34>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d102      	bne.n	800be68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be62:	2301      	movs	r3, #1
 800be64:	607b      	str	r3, [r7, #4]
 800be66:	e008      	b.n	800be7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be68:	4b08      	ldr	r3, [pc, #32]	@ (800be8c <xTaskGetSchedulerState+0x38>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d102      	bne.n	800be76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be70:	2302      	movs	r3, #2
 800be72:	607b      	str	r3, [r7, #4]
 800be74:	e001      	b.n	800be7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be76:	2300      	movs	r3, #0
 800be78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be7a:	687b      	ldr	r3, [r7, #4]
	}
 800be7c:	4618      	mov	r0, r3
 800be7e:	370c      	adds	r7, #12
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr
 800be88:	240010dc 	.word	0x240010dc
 800be8c:	240010f8 	.word	0x240010f8

0800be90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be9c:	2300      	movs	r3, #0
 800be9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d058      	beq.n	800bf58 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bea6:	4b2f      	ldr	r3, [pc, #188]	@ (800bf64 <xTaskPriorityDisinherit+0xd4>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	429a      	cmp	r2, r3
 800beae:	d00b      	beq.n	800bec8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	60fb      	str	r3, [r7, #12]
}
 800bec2:	bf00      	nop
 800bec4:	bf00      	nop
 800bec6:	e7fd      	b.n	800bec4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800becc:	2b00      	cmp	r3, #0
 800bece:	d10b      	bne.n	800bee8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed4:	f383 8811 	msr	BASEPRI, r3
 800bed8:	f3bf 8f6f 	isb	sy
 800bedc:	f3bf 8f4f 	dsb	sy
 800bee0:	60bb      	str	r3, [r7, #8]
}
 800bee2:	bf00      	nop
 800bee4:	bf00      	nop
 800bee6:	e7fd      	b.n	800bee4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800beec:	1e5a      	subs	r2, r3, #1
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800befa:	429a      	cmp	r2, r3
 800befc:	d02c      	beq.n	800bf58 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d128      	bne.n	800bf58 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	3304      	adds	r3, #4
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fe fc54 	bl	800a7b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf28:	4b0f      	ldr	r3, [pc, #60]	@ (800bf68 <xTaskPriorityDisinherit+0xd8>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d903      	bls.n	800bf38 <xTaskPriorityDisinherit+0xa8>
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf34:	4a0c      	ldr	r2, [pc, #48]	@ (800bf68 <xTaskPriorityDisinherit+0xd8>)
 800bf36:	6013      	str	r3, [r2, #0]
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4a09      	ldr	r2, [pc, #36]	@ (800bf6c <xTaskPriorityDisinherit+0xdc>)
 800bf46:	441a      	add	r2, r3
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	3304      	adds	r3, #4
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	4610      	mov	r0, r2
 800bf50:	f7fe fbd5 	bl	800a6fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf54:	2301      	movs	r3, #1
 800bf56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf58:	697b      	ldr	r3, [r7, #20]
	}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3718      	adds	r7, #24
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	24000bfc 	.word	0x24000bfc
 800bf68:	240010d8 	.word	0x240010d8
 800bf6c:	24000c00 	.word	0x24000c00

0800bf70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf7a:	4b21      	ldr	r3, [pc, #132]	@ (800c000 <prvAddCurrentTaskToDelayedList+0x90>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf80:	4b20      	ldr	r3, [pc, #128]	@ (800c004 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	3304      	adds	r3, #4
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7fe fc16 	bl	800a7b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf92:	d10a      	bne.n	800bfaa <prvAddCurrentTaskToDelayedList+0x3a>
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d007      	beq.n	800bfaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf9a:	4b1a      	ldr	r3, [pc, #104]	@ (800c004 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	3304      	adds	r3, #4
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	4819      	ldr	r0, [pc, #100]	@ (800c008 <prvAddCurrentTaskToDelayedList+0x98>)
 800bfa4:	f7fe fbab 	bl	800a6fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bfa8:	e026      	b.n	800bff8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	4413      	add	r3, r2
 800bfb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bfb2:	4b14      	ldr	r3, [pc, #80]	@ (800c004 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bfba:	68ba      	ldr	r2, [r7, #8]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d209      	bcs.n	800bfd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfc2:	4b12      	ldr	r3, [pc, #72]	@ (800c00c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	4b0f      	ldr	r3, [pc, #60]	@ (800c004 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	3304      	adds	r3, #4
 800bfcc:	4619      	mov	r1, r3
 800bfce:	4610      	mov	r0, r2
 800bfd0:	f7fe fbb9 	bl	800a746 <vListInsert>
}
 800bfd4:	e010      	b.n	800bff8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfd6:	4b0e      	ldr	r3, [pc, #56]	@ (800c010 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	4b0a      	ldr	r3, [pc, #40]	@ (800c004 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	3304      	adds	r3, #4
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	4610      	mov	r0, r2
 800bfe4:	f7fe fbaf 	bl	800a746 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bfe8:	4b0a      	ldr	r3, [pc, #40]	@ (800c014 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	68ba      	ldr	r2, [r7, #8]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d202      	bcs.n	800bff8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bff2:	4a08      	ldr	r2, [pc, #32]	@ (800c014 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	6013      	str	r3, [r2, #0]
}
 800bff8:	bf00      	nop
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	240010d4 	.word	0x240010d4
 800c004:	24000bfc 	.word	0x24000bfc
 800c008:	240010bc 	.word	0x240010bc
 800c00c:	2400108c 	.word	0x2400108c
 800c010:	24001088 	.word	0x24001088
 800c014:	240010f0 	.word	0x240010f0

0800c018 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b08a      	sub	sp, #40	@ 0x28
 800c01c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c01e:	2300      	movs	r3, #0
 800c020:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c022:	f000 fb13 	bl	800c64c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c026:	4b1d      	ldr	r3, [pc, #116]	@ (800c09c <xTimerCreateTimerTask+0x84>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d021      	beq.n	800c072 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c02e:	2300      	movs	r3, #0
 800c030:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c032:	2300      	movs	r3, #0
 800c034:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c036:	1d3a      	adds	r2, r7, #4
 800c038:	f107 0108 	add.w	r1, r7, #8
 800c03c:	f107 030c 	add.w	r3, r7, #12
 800c040:	4618      	mov	r0, r3
 800c042:	f7fe fb15 	bl	800a670 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c046:	6879      	ldr	r1, [r7, #4]
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	9202      	str	r2, [sp, #8]
 800c04e:	9301      	str	r3, [sp, #4]
 800c050:	2302      	movs	r3, #2
 800c052:	9300      	str	r3, [sp, #0]
 800c054:	2300      	movs	r3, #0
 800c056:	460a      	mov	r2, r1
 800c058:	4911      	ldr	r1, [pc, #68]	@ (800c0a0 <xTimerCreateTimerTask+0x88>)
 800c05a:	4812      	ldr	r0, [pc, #72]	@ (800c0a4 <xTimerCreateTimerTask+0x8c>)
 800c05c:	f7ff f8d0 	bl	800b200 <xTaskCreateStatic>
 800c060:	4603      	mov	r3, r0
 800c062:	4a11      	ldr	r2, [pc, #68]	@ (800c0a8 <xTimerCreateTimerTask+0x90>)
 800c064:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c066:	4b10      	ldr	r3, [pc, #64]	@ (800c0a8 <xTimerCreateTimerTask+0x90>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d001      	beq.n	800c072 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c06e:	2301      	movs	r3, #1
 800c070:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d10b      	bne.n	800c090 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c07c:	f383 8811 	msr	BASEPRI, r3
 800c080:	f3bf 8f6f 	isb	sy
 800c084:	f3bf 8f4f 	dsb	sy
 800c088:	613b      	str	r3, [r7, #16]
}
 800c08a:	bf00      	nop
 800c08c:	bf00      	nop
 800c08e:	e7fd      	b.n	800c08c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c090:	697b      	ldr	r3, [r7, #20]
}
 800c092:	4618      	mov	r0, r3
 800c094:	3718      	adds	r7, #24
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	2400112c 	.word	0x2400112c
 800c0a0:	08011ed8 	.word	0x08011ed8
 800c0a4:	0800c1e5 	.word	0x0800c1e5
 800c0a8:	24001130 	.word	0x24001130

0800c0ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b08a      	sub	sp, #40	@ 0x28
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	607a      	str	r2, [r7, #4]
 800c0b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d10b      	bne.n	800c0dc <xTimerGenericCommand+0x30>
	__asm volatile
 800c0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c8:	f383 8811 	msr	BASEPRI, r3
 800c0cc:	f3bf 8f6f 	isb	sy
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	623b      	str	r3, [r7, #32]
}
 800c0d6:	bf00      	nop
 800c0d8:	bf00      	nop
 800c0da:	e7fd      	b.n	800c0d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c0dc:	4b19      	ldr	r3, [pc, #100]	@ (800c144 <xTimerGenericCommand+0x98>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d02a      	beq.n	800c13a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	2b05      	cmp	r3, #5
 800c0f4:	dc18      	bgt.n	800c128 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c0f6:	f7ff fead 	bl	800be54 <xTaskGetSchedulerState>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b02      	cmp	r3, #2
 800c0fe:	d109      	bne.n	800c114 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c100:	4b10      	ldr	r3, [pc, #64]	@ (800c144 <xTimerGenericCommand+0x98>)
 800c102:	6818      	ldr	r0, [r3, #0]
 800c104:	f107 0110 	add.w	r1, r7, #16
 800c108:	2300      	movs	r3, #0
 800c10a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c10c:	f7fe fc88 	bl	800aa20 <xQueueGenericSend>
 800c110:	6278      	str	r0, [r7, #36]	@ 0x24
 800c112:	e012      	b.n	800c13a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c114:	4b0b      	ldr	r3, [pc, #44]	@ (800c144 <xTimerGenericCommand+0x98>)
 800c116:	6818      	ldr	r0, [r3, #0]
 800c118:	f107 0110 	add.w	r1, r7, #16
 800c11c:	2300      	movs	r3, #0
 800c11e:	2200      	movs	r2, #0
 800c120:	f7fe fc7e 	bl	800aa20 <xQueueGenericSend>
 800c124:	6278      	str	r0, [r7, #36]	@ 0x24
 800c126:	e008      	b.n	800c13a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c128:	4b06      	ldr	r3, [pc, #24]	@ (800c144 <xTimerGenericCommand+0x98>)
 800c12a:	6818      	ldr	r0, [r3, #0]
 800c12c:	f107 0110 	add.w	r1, r7, #16
 800c130:	2300      	movs	r3, #0
 800c132:	683a      	ldr	r2, [r7, #0]
 800c134:	f7fe fd76 	bl	800ac24 <xQueueGenericSendFromISR>
 800c138:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3728      	adds	r7, #40	@ 0x28
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	2400112c 	.word	0x2400112c

0800c148 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b088      	sub	sp, #32
 800c14c:	af02      	add	r7, sp, #8
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c152:	4b23      	ldr	r3, [pc, #140]	@ (800c1e0 <prvProcessExpiredTimer+0x98>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	3304      	adds	r3, #4
 800c160:	4618      	mov	r0, r3
 800c162:	f7fe fb29 	bl	800a7b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c16c:	f003 0304 	and.w	r3, r3, #4
 800c170:	2b00      	cmp	r3, #0
 800c172:	d023      	beq.n	800c1bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	699a      	ldr	r2, [r3, #24]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	18d1      	adds	r1, r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	683a      	ldr	r2, [r7, #0]
 800c180:	6978      	ldr	r0, [r7, #20]
 800c182:	f000 f8d5 	bl	800c330 <prvInsertTimerInActiveList>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d020      	beq.n	800c1ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c18c:	2300      	movs	r3, #0
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	2300      	movs	r3, #0
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	2100      	movs	r1, #0
 800c196:	6978      	ldr	r0, [r7, #20]
 800c198:	f7ff ff88 	bl	800c0ac <xTimerGenericCommand>
 800c19c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d114      	bne.n	800c1ce <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a8:	f383 8811 	msr	BASEPRI, r3
 800c1ac:	f3bf 8f6f 	isb	sy
 800c1b0:	f3bf 8f4f 	dsb	sy
 800c1b4:	60fb      	str	r3, [r7, #12]
}
 800c1b6:	bf00      	nop
 800c1b8:	bf00      	nop
 800c1ba:	e7fd      	b.n	800c1b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1c2:	f023 0301 	bic.w	r3, r3, #1
 800c1c6:	b2da      	uxtb	r2, r3
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	6a1b      	ldr	r3, [r3, #32]
 800c1d2:	6978      	ldr	r0, [r7, #20]
 800c1d4:	4798      	blx	r3
}
 800c1d6:	bf00      	nop
 800c1d8:	3718      	adds	r7, #24
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	24001124 	.word	0x24001124

0800c1e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c1ec:	f107 0308 	add.w	r3, r7, #8
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f000 f859 	bl	800c2a8 <prvGetNextExpireTime>
 800c1f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f000 f805 	bl	800c20c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c202:	f000 f8d7 	bl	800c3b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c206:	bf00      	nop
 800c208:	e7f0      	b.n	800c1ec <prvTimerTask+0x8>
	...

0800c20c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c216:	f7ff fa37 	bl	800b688 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c21a:	f107 0308 	add.w	r3, r7, #8
 800c21e:	4618      	mov	r0, r3
 800c220:	f000 f866 	bl	800c2f0 <prvSampleTimeNow>
 800c224:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d130      	bne.n	800c28e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d10a      	bne.n	800c248 <prvProcessTimerOrBlockTask+0x3c>
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	429a      	cmp	r2, r3
 800c238:	d806      	bhi.n	800c248 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c23a:	f7ff fa33 	bl	800b6a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c23e:	68f9      	ldr	r1, [r7, #12]
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f7ff ff81 	bl	800c148 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c246:	e024      	b.n	800c292 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d008      	beq.n	800c260 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c24e:	4b13      	ldr	r3, [pc, #76]	@ (800c29c <prvProcessTimerOrBlockTask+0x90>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d101      	bne.n	800c25c <prvProcessTimerOrBlockTask+0x50>
 800c258:	2301      	movs	r3, #1
 800c25a:	e000      	b.n	800c25e <prvProcessTimerOrBlockTask+0x52>
 800c25c:	2300      	movs	r3, #0
 800c25e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c260:	4b0f      	ldr	r3, [pc, #60]	@ (800c2a0 <prvProcessTimerOrBlockTask+0x94>)
 800c262:	6818      	ldr	r0, [r3, #0]
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	1ad3      	subs	r3, r2, r3
 800c26a:	683a      	ldr	r2, [r7, #0]
 800c26c:	4619      	mov	r1, r3
 800c26e:	f7fe ff93 	bl	800b198 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c272:	f7ff fa17 	bl	800b6a4 <xTaskResumeAll>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d10a      	bne.n	800c292 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c27c:	4b09      	ldr	r3, [pc, #36]	@ (800c2a4 <prvProcessTimerOrBlockTask+0x98>)
 800c27e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c282:	601a      	str	r2, [r3, #0]
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	f3bf 8f6f 	isb	sy
}
 800c28c:	e001      	b.n	800c292 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c28e:	f7ff fa09 	bl	800b6a4 <xTaskResumeAll>
}
 800c292:	bf00      	nop
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	24001128 	.word	0x24001128
 800c2a0:	2400112c 	.word	0x2400112c
 800c2a4:	e000ed04 	.word	0xe000ed04

0800c2a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b085      	sub	sp, #20
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c2b0:	4b0e      	ldr	r3, [pc, #56]	@ (800c2ec <prvGetNextExpireTime+0x44>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d101      	bne.n	800c2be <prvGetNextExpireTime+0x16>
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	e000      	b.n	800c2c0 <prvGetNextExpireTime+0x18>
 800c2be:	2200      	movs	r2, #0
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d105      	bne.n	800c2d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2cc:	4b07      	ldr	r3, [pc, #28]	@ (800c2ec <prvGetNextExpireTime+0x44>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	60fb      	str	r3, [r7, #12]
 800c2d6:	e001      	b.n	800c2dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3714      	adds	r7, #20
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	24001124 	.word	0x24001124

0800c2f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c2f8:	f7ff fa72 	bl	800b7e0 <xTaskGetTickCount>
 800c2fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c2fe:	4b0b      	ldr	r3, [pc, #44]	@ (800c32c <prvSampleTimeNow+0x3c>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	429a      	cmp	r2, r3
 800c306:	d205      	bcs.n	800c314 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c308:	f000 f93a 	bl	800c580 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	601a      	str	r2, [r3, #0]
 800c312:	e002      	b.n	800c31a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c31a:	4a04      	ldr	r2, [pc, #16]	@ (800c32c <prvSampleTimeNow+0x3c>)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c320:	68fb      	ldr	r3, [r7, #12]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	24001134 	.word	0x24001134

0800c330 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b086      	sub	sp, #24
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
 800c33c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c33e:	2300      	movs	r3, #0
 800c340:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	68ba      	ldr	r2, [r7, #8]
 800c346:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	68fa      	ldr	r2, [r7, #12]
 800c34c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c34e:	68ba      	ldr	r2, [r7, #8]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	429a      	cmp	r2, r3
 800c354:	d812      	bhi.n	800c37c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	1ad2      	subs	r2, r2, r3
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	699b      	ldr	r3, [r3, #24]
 800c360:	429a      	cmp	r2, r3
 800c362:	d302      	bcc.n	800c36a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c364:	2301      	movs	r3, #1
 800c366:	617b      	str	r3, [r7, #20]
 800c368:	e01b      	b.n	800c3a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c36a:	4b10      	ldr	r3, [pc, #64]	@ (800c3ac <prvInsertTimerInActiveList+0x7c>)
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3304      	adds	r3, #4
 800c372:	4619      	mov	r1, r3
 800c374:	4610      	mov	r0, r2
 800c376:	f7fe f9e6 	bl	800a746 <vListInsert>
 800c37a:	e012      	b.n	800c3a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	429a      	cmp	r2, r3
 800c382:	d206      	bcs.n	800c392 <prvInsertTimerInActiveList+0x62>
 800c384:	68ba      	ldr	r2, [r7, #8]
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d302      	bcc.n	800c392 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c38c:	2301      	movs	r3, #1
 800c38e:	617b      	str	r3, [r7, #20]
 800c390:	e007      	b.n	800c3a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c392:	4b07      	ldr	r3, [pc, #28]	@ (800c3b0 <prvInsertTimerInActiveList+0x80>)
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	3304      	adds	r3, #4
 800c39a:	4619      	mov	r1, r3
 800c39c:	4610      	mov	r0, r2
 800c39e:	f7fe f9d2 	bl	800a746 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c3a2:	697b      	ldr	r3, [r7, #20]
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3718      	adds	r7, #24
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	24001128 	.word	0x24001128
 800c3b0:	24001124 	.word	0x24001124

0800c3b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b08e      	sub	sp, #56	@ 0x38
 800c3b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c3ba:	e0ce      	b.n	800c55a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	da19      	bge.n	800c3f6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c3c2:	1d3b      	adds	r3, r7, #4
 800c3c4:	3304      	adds	r3, #4
 800c3c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d10b      	bne.n	800c3e6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d2:	f383 8811 	msr	BASEPRI, r3
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	f3bf 8f4f 	dsb	sy
 800c3de:	61fb      	str	r3, [r7, #28]
}
 800c3e0:	bf00      	nop
 800c3e2:	bf00      	nop
 800c3e4:	e7fd      	b.n	800c3e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3ec:	6850      	ldr	r0, [r2, #4]
 800c3ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3f0:	6892      	ldr	r2, [r2, #8]
 800c3f2:	4611      	mov	r1, r2
 800c3f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	f2c0 80ae 	blt.w	800c55a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c404:	695b      	ldr	r3, [r3, #20]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d004      	beq.n	800c414 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c40c:	3304      	adds	r3, #4
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fe f9d2 	bl	800a7b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c414:	463b      	mov	r3, r7
 800c416:	4618      	mov	r0, r3
 800c418:	f7ff ff6a 	bl	800c2f0 <prvSampleTimeNow>
 800c41c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2b09      	cmp	r3, #9
 800c422:	f200 8097 	bhi.w	800c554 <prvProcessReceivedCommands+0x1a0>
 800c426:	a201      	add	r2, pc, #4	@ (adr r2, 800c42c <prvProcessReceivedCommands+0x78>)
 800c428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c42c:	0800c455 	.word	0x0800c455
 800c430:	0800c455 	.word	0x0800c455
 800c434:	0800c455 	.word	0x0800c455
 800c438:	0800c4cb 	.word	0x0800c4cb
 800c43c:	0800c4df 	.word	0x0800c4df
 800c440:	0800c52b 	.word	0x0800c52b
 800c444:	0800c455 	.word	0x0800c455
 800c448:	0800c455 	.word	0x0800c455
 800c44c:	0800c4cb 	.word	0x0800c4cb
 800c450:	0800c4df 	.word	0x0800c4df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c456:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c45a:	f043 0301 	orr.w	r3, r3, #1
 800c45e:	b2da      	uxtb	r2, r3
 800c460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c462:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c466:	68ba      	ldr	r2, [r7, #8]
 800c468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c46a:	699b      	ldr	r3, [r3, #24]
 800c46c:	18d1      	adds	r1, r2, r3
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c472:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c474:	f7ff ff5c 	bl	800c330 <prvInsertTimerInActiveList>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d06c      	beq.n	800c558 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c480:	6a1b      	ldr	r3, [r3, #32]
 800c482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c484:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c48c:	f003 0304 	and.w	r3, r3, #4
 800c490:	2b00      	cmp	r3, #0
 800c492:	d061      	beq.n	800c558 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c494:	68ba      	ldr	r2, [r7, #8]
 800c496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c498:	699b      	ldr	r3, [r3, #24]
 800c49a:	441a      	add	r2, r3
 800c49c:	2300      	movs	r3, #0
 800c49e:	9300      	str	r3, [sp, #0]
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4a6:	f7ff fe01 	bl	800c0ac <xTimerGenericCommand>
 800c4aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c4ac:	6a3b      	ldr	r3, [r7, #32]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d152      	bne.n	800c558 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b6:	f383 8811 	msr	BASEPRI, r3
 800c4ba:	f3bf 8f6f 	isb	sy
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	61bb      	str	r3, [r7, #24]
}
 800c4c4:	bf00      	nop
 800c4c6:	bf00      	nop
 800c4c8:	e7fd      	b.n	800c4c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4d0:	f023 0301 	bic.w	r3, r3, #1
 800c4d4:	b2da      	uxtb	r2, r3
 800c4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c4dc:	e03d      	b.n	800c55a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4e4:	f043 0301 	orr.w	r3, r3, #1
 800c4e8:	b2da      	uxtb	r2, r3
 800c4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f8:	699b      	ldr	r3, [r3, #24]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d10b      	bne.n	800c516 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	617b      	str	r3, [r7, #20]
}
 800c510:	bf00      	nop
 800c512:	bf00      	nop
 800c514:	e7fd      	b.n	800c512 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c518:	699a      	ldr	r2, [r3, #24]
 800c51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51c:	18d1      	adds	r1, r2, r3
 800c51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c524:	f7ff ff04 	bl	800c330 <prvInsertTimerInActiveList>
					break;
 800c528:	e017      	b.n	800c55a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c52c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c530:	f003 0302 	and.w	r3, r3, #2
 800c534:	2b00      	cmp	r3, #0
 800c536:	d103      	bne.n	800c540 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c538:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c53a:	f000 fbe5 	bl	800cd08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c53e:	e00c      	b.n	800c55a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c542:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c546:	f023 0301 	bic.w	r3, r3, #1
 800c54a:	b2da      	uxtb	r2, r3
 800c54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c54e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c552:	e002      	b.n	800c55a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c554:	bf00      	nop
 800c556:	e000      	b.n	800c55a <prvProcessReceivedCommands+0x1a6>
					break;
 800c558:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c55a:	4b08      	ldr	r3, [pc, #32]	@ (800c57c <prvProcessReceivedCommands+0x1c8>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	1d39      	adds	r1, r7, #4
 800c560:	2200      	movs	r2, #0
 800c562:	4618      	mov	r0, r3
 800c564:	f7fe fbfc 	bl	800ad60 <xQueueReceive>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f47f af26 	bne.w	800c3bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c570:	bf00      	nop
 800c572:	bf00      	nop
 800c574:	3730      	adds	r7, #48	@ 0x30
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	2400112c 	.word	0x2400112c

0800c580 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b088      	sub	sp, #32
 800c584:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c586:	e049      	b.n	800c61c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c588:	4b2e      	ldr	r3, [pc, #184]	@ (800c644 <prvSwitchTimerLists+0xc4>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c592:	4b2c      	ldr	r3, [pc, #176]	@ (800c644 <prvSwitchTimerLists+0xc4>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	3304      	adds	r3, #4
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7fe f909 	bl	800a7b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	6a1b      	ldr	r3, [r3, #32]
 800c5aa:	68f8      	ldr	r0, [r7, #12]
 800c5ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5b4:	f003 0304 	and.w	r3, r3, #4
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d02f      	beq.n	800c61c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	699b      	ldr	r3, [r3, #24]
 800c5c0:	693a      	ldr	r2, [r7, #16]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c5c6:	68ba      	ldr	r2, [r7, #8]
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d90e      	bls.n	800c5ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	68ba      	ldr	r2, [r7, #8]
 800c5d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c5da:	4b1a      	ldr	r3, [pc, #104]	@ (800c644 <prvSwitchTimerLists+0xc4>)
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	3304      	adds	r3, #4
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	4610      	mov	r0, r2
 800c5e6:	f7fe f8ae 	bl	800a746 <vListInsert>
 800c5ea:	e017      	b.n	800c61c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	693a      	ldr	r2, [r7, #16]
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	f7ff fd58 	bl	800c0ac <xTimerGenericCommand>
 800c5fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d10b      	bne.n	800c61c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c608:	f383 8811 	msr	BASEPRI, r3
 800c60c:	f3bf 8f6f 	isb	sy
 800c610:	f3bf 8f4f 	dsb	sy
 800c614:	603b      	str	r3, [r7, #0]
}
 800c616:	bf00      	nop
 800c618:	bf00      	nop
 800c61a:	e7fd      	b.n	800c618 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c61c:	4b09      	ldr	r3, [pc, #36]	@ (800c644 <prvSwitchTimerLists+0xc4>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d1b0      	bne.n	800c588 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c626:	4b07      	ldr	r3, [pc, #28]	@ (800c644 <prvSwitchTimerLists+0xc4>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c62c:	4b06      	ldr	r3, [pc, #24]	@ (800c648 <prvSwitchTimerLists+0xc8>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a04      	ldr	r2, [pc, #16]	@ (800c644 <prvSwitchTimerLists+0xc4>)
 800c632:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c634:	4a04      	ldr	r2, [pc, #16]	@ (800c648 <prvSwitchTimerLists+0xc8>)
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	6013      	str	r3, [r2, #0]
}
 800c63a:	bf00      	nop
 800c63c:	3718      	adds	r7, #24
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	24001124 	.word	0x24001124
 800c648:	24001128 	.word	0x24001128

0800c64c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c652:	f000 f969 	bl	800c928 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c656:	4b15      	ldr	r3, [pc, #84]	@ (800c6ac <prvCheckForValidListAndQueue+0x60>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d120      	bne.n	800c6a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c65e:	4814      	ldr	r0, [pc, #80]	@ (800c6b0 <prvCheckForValidListAndQueue+0x64>)
 800c660:	f7fe f820 	bl	800a6a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c664:	4813      	ldr	r0, [pc, #76]	@ (800c6b4 <prvCheckForValidListAndQueue+0x68>)
 800c666:	f7fe f81d 	bl	800a6a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c66a:	4b13      	ldr	r3, [pc, #76]	@ (800c6b8 <prvCheckForValidListAndQueue+0x6c>)
 800c66c:	4a10      	ldr	r2, [pc, #64]	@ (800c6b0 <prvCheckForValidListAndQueue+0x64>)
 800c66e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c670:	4b12      	ldr	r3, [pc, #72]	@ (800c6bc <prvCheckForValidListAndQueue+0x70>)
 800c672:	4a10      	ldr	r2, [pc, #64]	@ (800c6b4 <prvCheckForValidListAndQueue+0x68>)
 800c674:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c676:	2300      	movs	r3, #0
 800c678:	9300      	str	r3, [sp, #0]
 800c67a:	4b11      	ldr	r3, [pc, #68]	@ (800c6c0 <prvCheckForValidListAndQueue+0x74>)
 800c67c:	4a11      	ldr	r2, [pc, #68]	@ (800c6c4 <prvCheckForValidListAndQueue+0x78>)
 800c67e:	2110      	movs	r1, #16
 800c680:	200a      	movs	r0, #10
 800c682:	f7fe f92d 	bl	800a8e0 <xQueueGenericCreateStatic>
 800c686:	4603      	mov	r3, r0
 800c688:	4a08      	ldr	r2, [pc, #32]	@ (800c6ac <prvCheckForValidListAndQueue+0x60>)
 800c68a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c68c:	4b07      	ldr	r3, [pc, #28]	@ (800c6ac <prvCheckForValidListAndQueue+0x60>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d005      	beq.n	800c6a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c694:	4b05      	ldr	r3, [pc, #20]	@ (800c6ac <prvCheckForValidListAndQueue+0x60>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	490b      	ldr	r1, [pc, #44]	@ (800c6c8 <prvCheckForValidListAndQueue+0x7c>)
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7fe fd52 	bl	800b144 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6a0:	f000 f974 	bl	800c98c <vPortExitCritical>
}
 800c6a4:	bf00      	nop
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	2400112c 	.word	0x2400112c
 800c6b0:	240010fc 	.word	0x240010fc
 800c6b4:	24001110 	.word	0x24001110
 800c6b8:	24001124 	.word	0x24001124
 800c6bc:	24001128 	.word	0x24001128
 800c6c0:	240011d8 	.word	0x240011d8
 800c6c4:	24001138 	.word	0x24001138
 800c6c8:	08011ee0 	.word	0x08011ee0

0800c6cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b085      	sub	sp, #20
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	3b04      	subs	r3, #4
 800c6dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c6e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	3b04      	subs	r3, #4
 800c6ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	f023 0201 	bic.w	r2, r3, #1
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	3b04      	subs	r3, #4
 800c6fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c6fc:	4a0c      	ldr	r2, [pc, #48]	@ (800c730 <pxPortInitialiseStack+0x64>)
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	3b14      	subs	r3, #20
 800c706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	3b04      	subs	r3, #4
 800c712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f06f 0202 	mvn.w	r2, #2
 800c71a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	3b20      	subs	r3, #32
 800c720:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c722:	68fb      	ldr	r3, [r7, #12]
}
 800c724:	4618      	mov	r0, r3
 800c726:	3714      	adds	r7, #20
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr
 800c730:	0800c735 	.word	0x0800c735

0800c734 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c73a:	2300      	movs	r3, #0
 800c73c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c73e:	4b13      	ldr	r3, [pc, #76]	@ (800c78c <prvTaskExitError+0x58>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c746:	d00b      	beq.n	800c760 <prvTaskExitError+0x2c>
	__asm volatile
 800c748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c74c:	f383 8811 	msr	BASEPRI, r3
 800c750:	f3bf 8f6f 	isb	sy
 800c754:	f3bf 8f4f 	dsb	sy
 800c758:	60fb      	str	r3, [r7, #12]
}
 800c75a:	bf00      	nop
 800c75c:	bf00      	nop
 800c75e:	e7fd      	b.n	800c75c <prvTaskExitError+0x28>
	__asm volatile
 800c760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c764:	f383 8811 	msr	BASEPRI, r3
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	60bb      	str	r3, [r7, #8]
}
 800c772:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c774:	bf00      	nop
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d0fc      	beq.n	800c776 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c77c:	bf00      	nop
 800c77e:	bf00      	nop
 800c780:	3714      	adds	r7, #20
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	24000010 	.word	0x24000010

0800c790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c790:	4b07      	ldr	r3, [pc, #28]	@ (800c7b0 <pxCurrentTCBConst2>)
 800c792:	6819      	ldr	r1, [r3, #0]
 800c794:	6808      	ldr	r0, [r1, #0]
 800c796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c79a:	f380 8809 	msr	PSP, r0
 800c79e:	f3bf 8f6f 	isb	sy
 800c7a2:	f04f 0000 	mov.w	r0, #0
 800c7a6:	f380 8811 	msr	BASEPRI, r0
 800c7aa:	4770      	bx	lr
 800c7ac:	f3af 8000 	nop.w

0800c7b0 <pxCurrentTCBConst2>:
 800c7b0:	24000bfc 	.word	0x24000bfc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c7b4:	bf00      	nop
 800c7b6:	bf00      	nop

0800c7b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c7b8:	4808      	ldr	r0, [pc, #32]	@ (800c7dc <prvPortStartFirstTask+0x24>)
 800c7ba:	6800      	ldr	r0, [r0, #0]
 800c7bc:	6800      	ldr	r0, [r0, #0]
 800c7be:	f380 8808 	msr	MSP, r0
 800c7c2:	f04f 0000 	mov.w	r0, #0
 800c7c6:	f380 8814 	msr	CONTROL, r0
 800c7ca:	b662      	cpsie	i
 800c7cc:	b661      	cpsie	f
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	f3bf 8f6f 	isb	sy
 800c7d6:	df00      	svc	0
 800c7d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c7da:	bf00      	nop
 800c7dc:	e000ed08 	.word	0xe000ed08

0800c7e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c7e6:	4b47      	ldr	r3, [pc, #284]	@ (800c904 <xPortStartScheduler+0x124>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4a47      	ldr	r2, [pc, #284]	@ (800c908 <xPortStartScheduler+0x128>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d10b      	bne.n	800c808 <xPortStartScheduler+0x28>
	__asm volatile
 800c7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f4:	f383 8811 	msr	BASEPRI, r3
 800c7f8:	f3bf 8f6f 	isb	sy
 800c7fc:	f3bf 8f4f 	dsb	sy
 800c800:	613b      	str	r3, [r7, #16]
}
 800c802:	bf00      	nop
 800c804:	bf00      	nop
 800c806:	e7fd      	b.n	800c804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c808:	4b3e      	ldr	r3, [pc, #248]	@ (800c904 <xPortStartScheduler+0x124>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a3f      	ldr	r2, [pc, #252]	@ (800c90c <xPortStartScheduler+0x12c>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d10b      	bne.n	800c82a <xPortStartScheduler+0x4a>
	__asm volatile
 800c812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c816:	f383 8811 	msr	BASEPRI, r3
 800c81a:	f3bf 8f6f 	isb	sy
 800c81e:	f3bf 8f4f 	dsb	sy
 800c822:	60fb      	str	r3, [r7, #12]
}
 800c824:	bf00      	nop
 800c826:	bf00      	nop
 800c828:	e7fd      	b.n	800c826 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c82a:	4b39      	ldr	r3, [pc, #228]	@ (800c910 <xPortStartScheduler+0x130>)
 800c82c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	b2db      	uxtb	r3, r3
 800c834:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	22ff      	movs	r2, #255	@ 0xff
 800c83a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	b2db      	uxtb	r3, r3
 800c842:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c844:	78fb      	ldrb	r3, [r7, #3]
 800c846:	b2db      	uxtb	r3, r3
 800c848:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c84c:	b2da      	uxtb	r2, r3
 800c84e:	4b31      	ldr	r3, [pc, #196]	@ (800c914 <xPortStartScheduler+0x134>)
 800c850:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c852:	4b31      	ldr	r3, [pc, #196]	@ (800c918 <xPortStartScheduler+0x138>)
 800c854:	2207      	movs	r2, #7
 800c856:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c858:	e009      	b.n	800c86e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c85a:	4b2f      	ldr	r3, [pc, #188]	@ (800c918 <xPortStartScheduler+0x138>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	3b01      	subs	r3, #1
 800c860:	4a2d      	ldr	r2, [pc, #180]	@ (800c918 <xPortStartScheduler+0x138>)
 800c862:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c864:	78fb      	ldrb	r3, [r7, #3]
 800c866:	b2db      	uxtb	r3, r3
 800c868:	005b      	lsls	r3, r3, #1
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c86e:	78fb      	ldrb	r3, [r7, #3]
 800c870:	b2db      	uxtb	r3, r3
 800c872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c876:	2b80      	cmp	r3, #128	@ 0x80
 800c878:	d0ef      	beq.n	800c85a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c87a:	4b27      	ldr	r3, [pc, #156]	@ (800c918 <xPortStartScheduler+0x138>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f1c3 0307 	rsb	r3, r3, #7
 800c882:	2b04      	cmp	r3, #4
 800c884:	d00b      	beq.n	800c89e <xPortStartScheduler+0xbe>
	__asm volatile
 800c886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88a:	f383 8811 	msr	BASEPRI, r3
 800c88e:	f3bf 8f6f 	isb	sy
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	60bb      	str	r3, [r7, #8]
}
 800c898:	bf00      	nop
 800c89a:	bf00      	nop
 800c89c:	e7fd      	b.n	800c89a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c89e:	4b1e      	ldr	r3, [pc, #120]	@ (800c918 <xPortStartScheduler+0x138>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	021b      	lsls	r3, r3, #8
 800c8a4:	4a1c      	ldr	r2, [pc, #112]	@ (800c918 <xPortStartScheduler+0x138>)
 800c8a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c8a8:	4b1b      	ldr	r3, [pc, #108]	@ (800c918 <xPortStartScheduler+0x138>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c8b0:	4a19      	ldr	r2, [pc, #100]	@ (800c918 <xPortStartScheduler+0x138>)
 800c8b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	b2da      	uxtb	r2, r3
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c8bc:	4b17      	ldr	r3, [pc, #92]	@ (800c91c <xPortStartScheduler+0x13c>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a16      	ldr	r2, [pc, #88]	@ (800c91c <xPortStartScheduler+0x13c>)
 800c8c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c8c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c8c8:	4b14      	ldr	r3, [pc, #80]	@ (800c91c <xPortStartScheduler+0x13c>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a13      	ldr	r2, [pc, #76]	@ (800c91c <xPortStartScheduler+0x13c>)
 800c8ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c8d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c8d4:	f000 f8da 	bl	800ca8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c8d8:	4b11      	ldr	r3, [pc, #68]	@ (800c920 <xPortStartScheduler+0x140>)
 800c8da:	2200      	movs	r2, #0
 800c8dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c8de:	f000 f8f9 	bl	800cad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c8e2:	4b10      	ldr	r3, [pc, #64]	@ (800c924 <xPortStartScheduler+0x144>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a0f      	ldr	r2, [pc, #60]	@ (800c924 <xPortStartScheduler+0x144>)
 800c8e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c8ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c8ee:	f7ff ff63 	bl	800c7b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c8f2:	f7ff f83f 	bl	800b974 <vTaskSwitchContext>
	prvTaskExitError();
 800c8f6:	f7ff ff1d 	bl	800c734 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c8fa:	2300      	movs	r3, #0
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3718      	adds	r7, #24
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	e000ed00 	.word	0xe000ed00
 800c908:	410fc271 	.word	0x410fc271
 800c90c:	410fc270 	.word	0x410fc270
 800c910:	e000e400 	.word	0xe000e400
 800c914:	24001228 	.word	0x24001228
 800c918:	2400122c 	.word	0x2400122c
 800c91c:	e000ed20 	.word	0xe000ed20
 800c920:	24000010 	.word	0x24000010
 800c924:	e000ef34 	.word	0xe000ef34

0800c928 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
	__asm volatile
 800c92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c932:	f383 8811 	msr	BASEPRI, r3
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	607b      	str	r3, [r7, #4]
}
 800c940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c942:	4b10      	ldr	r3, [pc, #64]	@ (800c984 <vPortEnterCritical+0x5c>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	3301      	adds	r3, #1
 800c948:	4a0e      	ldr	r2, [pc, #56]	@ (800c984 <vPortEnterCritical+0x5c>)
 800c94a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c94c:	4b0d      	ldr	r3, [pc, #52]	@ (800c984 <vPortEnterCritical+0x5c>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2b01      	cmp	r3, #1
 800c952:	d110      	bne.n	800c976 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c954:	4b0c      	ldr	r3, [pc, #48]	@ (800c988 <vPortEnterCritical+0x60>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00b      	beq.n	800c976 <vPortEnterCritical+0x4e>
	__asm volatile
 800c95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	603b      	str	r3, [r7, #0]
}
 800c970:	bf00      	nop
 800c972:	bf00      	nop
 800c974:	e7fd      	b.n	800c972 <vPortEnterCritical+0x4a>
	}
}
 800c976:	bf00      	nop
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr
 800c982:	bf00      	nop
 800c984:	24000010 	.word	0x24000010
 800c988:	e000ed04 	.word	0xe000ed04

0800c98c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c992:	4b12      	ldr	r3, [pc, #72]	@ (800c9dc <vPortExitCritical+0x50>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d10b      	bne.n	800c9b2 <vPortExitCritical+0x26>
	__asm volatile
 800c99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	607b      	str	r3, [r7, #4]
}
 800c9ac:	bf00      	nop
 800c9ae:	bf00      	nop
 800c9b0:	e7fd      	b.n	800c9ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c9b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c9dc <vPortExitCritical+0x50>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	3b01      	subs	r3, #1
 800c9b8:	4a08      	ldr	r2, [pc, #32]	@ (800c9dc <vPortExitCritical+0x50>)
 800c9ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c9bc:	4b07      	ldr	r3, [pc, #28]	@ (800c9dc <vPortExitCritical+0x50>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d105      	bne.n	800c9d0 <vPortExitCritical+0x44>
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	f383 8811 	msr	BASEPRI, r3
}
 800c9ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c9d0:	bf00      	nop
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr
 800c9dc:	24000010 	.word	0x24000010

0800c9e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c9e0:	f3ef 8009 	mrs	r0, PSP
 800c9e4:	f3bf 8f6f 	isb	sy
 800c9e8:	4b15      	ldr	r3, [pc, #84]	@ (800ca40 <pxCurrentTCBConst>)
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	f01e 0f10 	tst.w	lr, #16
 800c9f0:	bf08      	it	eq
 800c9f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c9f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9fa:	6010      	str	r0, [r2, #0]
 800c9fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ca04:	f380 8811 	msr	BASEPRI, r0
 800ca08:	f3bf 8f4f 	dsb	sy
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	f7fe ffb0 	bl	800b974 <vTaskSwitchContext>
 800ca14:	f04f 0000 	mov.w	r0, #0
 800ca18:	f380 8811 	msr	BASEPRI, r0
 800ca1c:	bc09      	pop	{r0, r3}
 800ca1e:	6819      	ldr	r1, [r3, #0]
 800ca20:	6808      	ldr	r0, [r1, #0]
 800ca22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca26:	f01e 0f10 	tst.w	lr, #16
 800ca2a:	bf08      	it	eq
 800ca2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca30:	f380 8809 	msr	PSP, r0
 800ca34:	f3bf 8f6f 	isb	sy
 800ca38:	4770      	bx	lr
 800ca3a:	bf00      	nop
 800ca3c:	f3af 8000 	nop.w

0800ca40 <pxCurrentTCBConst>:
 800ca40:	24000bfc 	.word	0x24000bfc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca44:	bf00      	nop
 800ca46:	bf00      	nop

0800ca48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	607b      	str	r3, [r7, #4]
}
 800ca60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca62:	f7fe fecd 	bl	800b800 <xTaskIncrementTick>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d003      	beq.n	800ca74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca6c:	4b06      	ldr	r3, [pc, #24]	@ (800ca88 <xPortSysTickHandler+0x40>)
 800ca6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca72:	601a      	str	r2, [r3, #0]
 800ca74:	2300      	movs	r3, #0
 800ca76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	f383 8811 	msr	BASEPRI, r3
}
 800ca7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca80:	bf00      	nop
 800ca82:	3708      	adds	r7, #8
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	e000ed04 	.word	0xe000ed04

0800ca8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ca90:	4b0b      	ldr	r3, [pc, #44]	@ (800cac0 <vPortSetupTimerInterrupt+0x34>)
 800ca92:	2200      	movs	r2, #0
 800ca94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca96:	4b0b      	ldr	r3, [pc, #44]	@ (800cac4 <vPortSetupTimerInterrupt+0x38>)
 800ca98:	2200      	movs	r2, #0
 800ca9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca9c:	4b0a      	ldr	r3, [pc, #40]	@ (800cac8 <vPortSetupTimerInterrupt+0x3c>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a0a      	ldr	r2, [pc, #40]	@ (800cacc <vPortSetupTimerInterrupt+0x40>)
 800caa2:	fba2 2303 	umull	r2, r3, r2, r3
 800caa6:	099b      	lsrs	r3, r3, #6
 800caa8:	4a09      	ldr	r2, [pc, #36]	@ (800cad0 <vPortSetupTimerInterrupt+0x44>)
 800caaa:	3b01      	subs	r3, #1
 800caac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800caae:	4b04      	ldr	r3, [pc, #16]	@ (800cac0 <vPortSetupTimerInterrupt+0x34>)
 800cab0:	2207      	movs	r2, #7
 800cab2:	601a      	str	r2, [r3, #0]
}
 800cab4:	bf00      	nop
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr
 800cabe:	bf00      	nop
 800cac0:	e000e010 	.word	0xe000e010
 800cac4:	e000e018 	.word	0xe000e018
 800cac8:	24000000 	.word	0x24000000
 800cacc:	10624dd3 	.word	0x10624dd3
 800cad0:	e000e014 	.word	0xe000e014

0800cad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cad4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cae4 <vPortEnableVFP+0x10>
 800cad8:	6801      	ldr	r1, [r0, #0]
 800cada:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cade:	6001      	str	r1, [r0, #0]
 800cae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cae2:	bf00      	nop
 800cae4:	e000ed88 	.word	0xe000ed88

0800cae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800caee:	f3ef 8305 	mrs	r3, IPSR
 800caf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2b0f      	cmp	r3, #15
 800caf8:	d915      	bls.n	800cb26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cafa:	4a18      	ldr	r2, [pc, #96]	@ (800cb5c <vPortValidateInterruptPriority+0x74>)
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	4413      	add	r3, r2
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb04:	4b16      	ldr	r3, [pc, #88]	@ (800cb60 <vPortValidateInterruptPriority+0x78>)
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	7afa      	ldrb	r2, [r7, #11]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d20b      	bcs.n	800cb26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb12:	f383 8811 	msr	BASEPRI, r3
 800cb16:	f3bf 8f6f 	isb	sy
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	607b      	str	r3, [r7, #4]
}
 800cb20:	bf00      	nop
 800cb22:	bf00      	nop
 800cb24:	e7fd      	b.n	800cb22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb26:	4b0f      	ldr	r3, [pc, #60]	@ (800cb64 <vPortValidateInterruptPriority+0x7c>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cb2e:	4b0e      	ldr	r3, [pc, #56]	@ (800cb68 <vPortValidateInterruptPriority+0x80>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d90b      	bls.n	800cb4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cb36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb3a:	f383 8811 	msr	BASEPRI, r3
 800cb3e:	f3bf 8f6f 	isb	sy
 800cb42:	f3bf 8f4f 	dsb	sy
 800cb46:	603b      	str	r3, [r7, #0]
}
 800cb48:	bf00      	nop
 800cb4a:	bf00      	nop
 800cb4c:	e7fd      	b.n	800cb4a <vPortValidateInterruptPriority+0x62>
	}
 800cb4e:	bf00      	nop
 800cb50:	3714      	adds	r7, #20
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr
 800cb5a:	bf00      	nop
 800cb5c:	e000e3f0 	.word	0xe000e3f0
 800cb60:	24001228 	.word	0x24001228
 800cb64:	e000ed0c 	.word	0xe000ed0c
 800cb68:	2400122c 	.word	0x2400122c

0800cb6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b08a      	sub	sp, #40	@ 0x28
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cb74:	2300      	movs	r3, #0
 800cb76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cb78:	f7fe fd86 	bl	800b688 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cb7c:	4b5c      	ldr	r3, [pc, #368]	@ (800ccf0 <pvPortMalloc+0x184>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d101      	bne.n	800cb88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb84:	f000 f924 	bl	800cdd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb88:	4b5a      	ldr	r3, [pc, #360]	@ (800ccf4 <pvPortMalloc+0x188>)
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4013      	ands	r3, r2
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	f040 8095 	bne.w	800ccc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d01e      	beq.n	800cbda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cb9c:	2208      	movs	r2, #8
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	4413      	add	r3, r2
 800cba2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f003 0307 	and.w	r3, r3, #7
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d015      	beq.n	800cbda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f023 0307 	bic.w	r3, r3, #7
 800cbb4:	3308      	adds	r3, #8
 800cbb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f003 0307 	and.w	r3, r3, #7
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00b      	beq.n	800cbda <pvPortMalloc+0x6e>
	__asm volatile
 800cbc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbc6:	f383 8811 	msr	BASEPRI, r3
 800cbca:	f3bf 8f6f 	isb	sy
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	617b      	str	r3, [r7, #20]
}
 800cbd4:	bf00      	nop
 800cbd6:	bf00      	nop
 800cbd8:	e7fd      	b.n	800cbd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d06f      	beq.n	800ccc0 <pvPortMalloc+0x154>
 800cbe0:	4b45      	ldr	r3, [pc, #276]	@ (800ccf8 <pvPortMalloc+0x18c>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	687a      	ldr	r2, [r7, #4]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d86a      	bhi.n	800ccc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cbea:	4b44      	ldr	r3, [pc, #272]	@ (800ccfc <pvPortMalloc+0x190>)
 800cbec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cbee:	4b43      	ldr	r3, [pc, #268]	@ (800ccfc <pvPortMalloc+0x190>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbf4:	e004      	b.n	800cc00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d903      	bls.n	800cc12 <pvPortMalloc+0xa6>
 800cc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d1f1      	bne.n	800cbf6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc12:	4b37      	ldr	r3, [pc, #220]	@ (800ccf0 <pvPortMalloc+0x184>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d051      	beq.n	800ccc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc1c:	6a3b      	ldr	r3, [r7, #32]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	2208      	movs	r2, #8
 800cc22:	4413      	add	r3, r2
 800cc24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	6a3b      	ldr	r3, [r7, #32]
 800cc2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc30:	685a      	ldr	r2, [r3, #4]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	1ad2      	subs	r2, r2, r3
 800cc36:	2308      	movs	r3, #8
 800cc38:	005b      	lsls	r3, r3, #1
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d920      	bls.n	800cc80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	4413      	add	r3, r2
 800cc44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc46:	69bb      	ldr	r3, [r7, #24]
 800cc48:	f003 0307 	and.w	r3, r3, #7
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d00b      	beq.n	800cc68 <pvPortMalloc+0xfc>
	__asm volatile
 800cc50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc54:	f383 8811 	msr	BASEPRI, r3
 800cc58:	f3bf 8f6f 	isb	sy
 800cc5c:	f3bf 8f4f 	dsb	sy
 800cc60:	613b      	str	r3, [r7, #16]
}
 800cc62:	bf00      	nop
 800cc64:	bf00      	nop
 800cc66:	e7fd      	b.n	800cc64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cc68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc6a:	685a      	ldr	r2, [r3, #4]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	1ad2      	subs	r2, r2, r3
 800cc70:	69bb      	ldr	r3, [r7, #24]
 800cc72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cc7a:	69b8      	ldr	r0, [r7, #24]
 800cc7c:	f000 f90a 	bl	800ce94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc80:	4b1d      	ldr	r3, [pc, #116]	@ (800ccf8 <pvPortMalloc+0x18c>)
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	1ad3      	subs	r3, r2, r3
 800cc8a:	4a1b      	ldr	r2, [pc, #108]	@ (800ccf8 <pvPortMalloc+0x18c>)
 800cc8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc8e:	4b1a      	ldr	r3, [pc, #104]	@ (800ccf8 <pvPortMalloc+0x18c>)
 800cc90:	681a      	ldr	r2, [r3, #0]
 800cc92:	4b1b      	ldr	r3, [pc, #108]	@ (800cd00 <pvPortMalloc+0x194>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d203      	bcs.n	800cca2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc9a:	4b17      	ldr	r3, [pc, #92]	@ (800ccf8 <pvPortMalloc+0x18c>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4a18      	ldr	r2, [pc, #96]	@ (800cd00 <pvPortMalloc+0x194>)
 800cca0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cca4:	685a      	ldr	r2, [r3, #4]
 800cca6:	4b13      	ldr	r3, [pc, #76]	@ (800ccf4 <pvPortMalloc+0x188>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	431a      	orrs	r2, r3
 800ccac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ccb6:	4b13      	ldr	r3, [pc, #76]	@ (800cd04 <pvPortMalloc+0x198>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	4a11      	ldr	r2, [pc, #68]	@ (800cd04 <pvPortMalloc+0x198>)
 800ccbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ccc0:	f7fe fcf0 	bl	800b6a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccc4:	69fb      	ldr	r3, [r7, #28]
 800ccc6:	f003 0307 	and.w	r3, r3, #7
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d00b      	beq.n	800cce6 <pvPortMalloc+0x17a>
	__asm volatile
 800ccce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd2:	f383 8811 	msr	BASEPRI, r3
 800ccd6:	f3bf 8f6f 	isb	sy
 800ccda:	f3bf 8f4f 	dsb	sy
 800ccde:	60fb      	str	r3, [r7, #12]
}
 800cce0:	bf00      	nop
 800cce2:	bf00      	nop
 800cce4:	e7fd      	b.n	800cce2 <pvPortMalloc+0x176>
	return pvReturn;
 800cce6:	69fb      	ldr	r3, [r7, #28]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3728      	adds	r7, #40	@ 0x28
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	24004e38 	.word	0x24004e38
 800ccf4:	24004e4c 	.word	0x24004e4c
 800ccf8:	24004e3c 	.word	0x24004e3c
 800ccfc:	24004e30 	.word	0x24004e30
 800cd00:	24004e40 	.word	0x24004e40
 800cd04:	24004e44 	.word	0x24004e44

0800cd08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b086      	sub	sp, #24
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d04f      	beq.n	800cdba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cd1a:	2308      	movs	r3, #8
 800cd1c:	425b      	negs	r3, r3
 800cd1e:	697a      	ldr	r2, [r7, #20]
 800cd20:	4413      	add	r3, r2
 800cd22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	685a      	ldr	r2, [r3, #4]
 800cd2c:	4b25      	ldr	r3, [pc, #148]	@ (800cdc4 <vPortFree+0xbc>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4013      	ands	r3, r2
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d10b      	bne.n	800cd4e <vPortFree+0x46>
	__asm volatile
 800cd36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd3a:	f383 8811 	msr	BASEPRI, r3
 800cd3e:	f3bf 8f6f 	isb	sy
 800cd42:	f3bf 8f4f 	dsb	sy
 800cd46:	60fb      	str	r3, [r7, #12]
}
 800cd48:	bf00      	nop
 800cd4a:	bf00      	nop
 800cd4c:	e7fd      	b.n	800cd4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d00b      	beq.n	800cd6e <vPortFree+0x66>
	__asm volatile
 800cd56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd5a:	f383 8811 	msr	BASEPRI, r3
 800cd5e:	f3bf 8f6f 	isb	sy
 800cd62:	f3bf 8f4f 	dsb	sy
 800cd66:	60bb      	str	r3, [r7, #8]
}
 800cd68:	bf00      	nop
 800cd6a:	bf00      	nop
 800cd6c:	e7fd      	b.n	800cd6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	685a      	ldr	r2, [r3, #4]
 800cd72:	4b14      	ldr	r3, [pc, #80]	@ (800cdc4 <vPortFree+0xbc>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4013      	ands	r3, r2
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d01e      	beq.n	800cdba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d11a      	bne.n	800cdba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	685a      	ldr	r2, [r3, #4]
 800cd88:	4b0e      	ldr	r3, [pc, #56]	@ (800cdc4 <vPortFree+0xbc>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	43db      	mvns	r3, r3
 800cd8e:	401a      	ands	r2, r3
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd94:	f7fe fc78 	bl	800b688 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	685a      	ldr	r2, [r3, #4]
 800cd9c:	4b0a      	ldr	r3, [pc, #40]	@ (800cdc8 <vPortFree+0xc0>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4413      	add	r3, r2
 800cda2:	4a09      	ldr	r2, [pc, #36]	@ (800cdc8 <vPortFree+0xc0>)
 800cda4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cda6:	6938      	ldr	r0, [r7, #16]
 800cda8:	f000 f874 	bl	800ce94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cdac:	4b07      	ldr	r3, [pc, #28]	@ (800cdcc <vPortFree+0xc4>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	4a06      	ldr	r2, [pc, #24]	@ (800cdcc <vPortFree+0xc4>)
 800cdb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cdb6:	f7fe fc75 	bl	800b6a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cdba:	bf00      	nop
 800cdbc:	3718      	adds	r7, #24
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	24004e4c 	.word	0x24004e4c
 800cdc8:	24004e3c 	.word	0x24004e3c
 800cdcc:	24004e48 	.word	0x24004e48

0800cdd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b085      	sub	sp, #20
 800cdd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cdd6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cdda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cddc:	4b27      	ldr	r3, [pc, #156]	@ (800ce7c <prvHeapInit+0xac>)
 800cdde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f003 0307 	and.w	r3, r3, #7
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00c      	beq.n	800ce04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	3307      	adds	r3, #7
 800cdee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f023 0307 	bic.w	r3, r3, #7
 800cdf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cdf8:	68ba      	ldr	r2, [r7, #8]
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	4a1f      	ldr	r2, [pc, #124]	@ (800ce7c <prvHeapInit+0xac>)
 800ce00:	4413      	add	r3, r2
 800ce02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce08:	4a1d      	ldr	r2, [pc, #116]	@ (800ce80 <prvHeapInit+0xb0>)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce0e:	4b1c      	ldr	r3, [pc, #112]	@ (800ce80 <prvHeapInit+0xb0>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	68ba      	ldr	r2, [r7, #8]
 800ce18:	4413      	add	r3, r2
 800ce1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ce1c:	2208      	movs	r2, #8
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	1a9b      	subs	r3, r3, r2
 800ce22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f023 0307 	bic.w	r3, r3, #7
 800ce2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	4a15      	ldr	r2, [pc, #84]	@ (800ce84 <prvHeapInit+0xb4>)
 800ce30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce32:	4b14      	ldr	r3, [pc, #80]	@ (800ce84 <prvHeapInit+0xb4>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	2200      	movs	r2, #0
 800ce38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce3a:	4b12      	ldr	r3, [pc, #72]	@ (800ce84 <prvHeapInit+0xb4>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	68fa      	ldr	r2, [r7, #12]
 800ce4a:	1ad2      	subs	r2, r2, r3
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ce50:	4b0c      	ldr	r3, [pc, #48]	@ (800ce84 <prvHeapInit+0xb4>)
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	4a0a      	ldr	r2, [pc, #40]	@ (800ce88 <prvHeapInit+0xb8>)
 800ce5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	4a09      	ldr	r2, [pc, #36]	@ (800ce8c <prvHeapInit+0xbc>)
 800ce66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce68:	4b09      	ldr	r3, [pc, #36]	@ (800ce90 <prvHeapInit+0xc0>)
 800ce6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ce6e:	601a      	str	r2, [r3, #0]
}
 800ce70:	bf00      	nop
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr
 800ce7c:	24001230 	.word	0x24001230
 800ce80:	24004e30 	.word	0x24004e30
 800ce84:	24004e38 	.word	0x24004e38
 800ce88:	24004e40 	.word	0x24004e40
 800ce8c:	24004e3c 	.word	0x24004e3c
 800ce90:	24004e4c 	.word	0x24004e4c

0800ce94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce94:	b480      	push	{r7}
 800ce96:	b085      	sub	sp, #20
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce9c:	4b28      	ldr	r3, [pc, #160]	@ (800cf40 <prvInsertBlockIntoFreeList+0xac>)
 800ce9e:	60fb      	str	r3, [r7, #12]
 800cea0:	e002      	b.n	800cea8 <prvInsertBlockIntoFreeList+0x14>
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	60fb      	str	r3, [r7, #12]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d8f7      	bhi.n	800cea2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	68ba      	ldr	r2, [r7, #8]
 800cebc:	4413      	add	r3, r2
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d108      	bne.n	800ced6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	685a      	ldr	r2, [r3, #4]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	441a      	add	r2, r3
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	68ba      	ldr	r2, [r7, #8]
 800cee0:	441a      	add	r2, r3
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d118      	bne.n	800cf1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	4b15      	ldr	r3, [pc, #84]	@ (800cf44 <prvInsertBlockIntoFreeList+0xb0>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d00d      	beq.n	800cf12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	685a      	ldr	r2, [r3, #4]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	441a      	add	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	601a      	str	r2, [r3, #0]
 800cf10:	e008      	b.n	800cf24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cf12:	4b0c      	ldr	r3, [pc, #48]	@ (800cf44 <prvInsertBlockIntoFreeList+0xb0>)
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	601a      	str	r2, [r3, #0]
 800cf1a:	e003      	b.n	800cf24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681a      	ldr	r2, [r3, #0]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d002      	beq.n	800cf32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf32:	bf00      	nop
 800cf34:	3714      	adds	r7, #20
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr
 800cf3e:	bf00      	nop
 800cf40:	24004e30 	.word	0x24004e30
 800cf44:	24004e38 	.word	0x24004e38

0800cf48 <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	2108      	movs	r1, #8
 800cf50:	480a      	ldr	r0, [pc, #40]	@ (800cf7c <ad7606_Init+0x34>)
 800cf52:	f7f6 fe91 	bl	8003c78 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800cf56:	2001      	movs	r0, #1
 800cf58:	f7f4 fda8 	bl	8001aac <HAL_Delay>
    AD7606_RST_SET();
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	2108      	movs	r1, #8
 800cf60:	4806      	ldr	r0, [pc, #24]	@ (800cf7c <ad7606_Init+0x34>)
 800cf62:	f7f6 fe89 	bl	8003c78 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800cf66:	2001      	movs	r0, #1
 800cf68:	f7f4 fda0 	bl	8001aac <HAL_Delay>
    AD7606_RST_RESET();
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	2108      	movs	r1, #8
 800cf70:	4802      	ldr	r0, [pc, #8]	@ (800cf7c <ad7606_Init+0x34>)
 800cf72:	f7f6 fe81 	bl	8003c78 <HAL_GPIO_WritePin>
}
 800cf76:	bf00      	nop
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	58021800 	.word	0x58021800

0800cf80 <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 800cf8e:	2200      	movs	r2, #0
 800cf90:	2180      	movs	r1, #128	@ 0x80
 800cf92:	4809      	ldr	r0, [pc, #36]	@ (800cfb8 <ad7606_Read+0x38>)
 800cf94:	f7f6 fe70 	bl	8003c78 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 800cf98:	88fa      	ldrh	r2, [r7, #6]
 800cf9a:	2364      	movs	r3, #100	@ 0x64
 800cf9c:	68b9      	ldr	r1, [r7, #8]
 800cf9e:	68f8      	ldr	r0, [r7, #12]
 800cfa0:	f7fb fbd0 	bl	8008744 <HAL_SPI_Receive>
    AD7606_CS_SET();
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	2180      	movs	r1, #128	@ 0x80
 800cfa8:	4803      	ldr	r0, [pc, #12]	@ (800cfb8 <ad7606_Read+0x38>)
 800cfaa:	f7f6 fe65 	bl	8003c78 <HAL_GPIO_WritePin>
}
 800cfae:	bf00      	nop
 800cfb0:	3710      	adds	r7, #16
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	58021800 	.word	0x58021800

0800cfbc <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 800cfc6:	6839      	ldr	r1, [r7, #0]
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f7fc f847 	bl	800905c <HAL_TIM_PWM_Start>
}
 800cfce:	bf00      	nop
 800cfd0:	3708      	adds	r7, #8
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
	...

0800cfd8 <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b087      	sub	sp, #28
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	607a      	str	r2, [r7, #4]
 800cfe4:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	617b      	str	r3, [r7, #20]
 800cfea:	e03d      	b.n	800d068 <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	005b      	lsls	r3, r3, #1
 800cff0:	68fa      	ldr	r2, [r7, #12]
 800cff2:	4413      	add	r3, r2
 800cff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	da0f      	bge.n	800d01c <ad7606_Convert+0x44>
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	005b      	lsls	r3, r3, #1
 800d000:	68fa      	ldr	r2, [r7, #12]
 800d002:	4413      	add	r3, r2
 800d004:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d008:	b29b      	uxth	r3, r3
 800d00a:	425b      	negs	r3, r3
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d012:	b29b      	uxth	r3, r3
 800d014:	425b      	negs	r3, r3
 800d016:	b29b      	uxth	r3, r3
 800d018:	b21b      	sxth	r3, r3
 800d01a:	e005      	b.n	800d028 <ad7606_Convert+0x50>
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	005b      	lsls	r3, r3, #1
 800d020:	68fa      	ldr	r2, [r7, #12]
 800d022:	4413      	add	r3, r2
 800d024:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d028:	697a      	ldr	r2, [r7, #20]
 800d02a:	0052      	lsls	r2, r2, #1
 800d02c:	68f9      	ldr	r1, [r7, #12]
 800d02e:	440a      	add	r2, r1
 800d030:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	005b      	lsls	r3, r3, #1
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	4413      	add	r3, r2
 800d03a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d03e:	ee07 3a90 	vmov	s15, r3
 800d042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d046:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d04a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	4413      	add	r3, r2
 800d056:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800d080 <ad7606_Convert+0xa8>
 800d05a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d05e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	3301      	adds	r3, #1
 800d066:	617b      	str	r3, [r7, #20]
 800d068:	897b      	ldrh	r3, [r7, #10]
 800d06a:	697a      	ldr	r2, [r7, #20]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	dbbd      	blt.n	800cfec <ad7606_Convert+0x14>
    }
}
 800d070:	bf00      	nop
 800d072:	bf00      	nop
 800d074:	371c      	adds	r7, #28
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	47000000 	.word	0x47000000

0800d084 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 800d084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d088:	b087      	sub	sp, #28
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	60f8      	str	r0, [r7, #12]
 800d08e:	460b      	mov	r3, r1
 800d090:	607a      	str	r2, [r7, #4]
 800d092:	817b      	strh	r3, [r7, #10]
 800d094:	466b      	mov	r3, sp
 800d096:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 800d098:	8979      	ldrh	r1, [r7, #10]
 800d09a:	460b      	mov	r3, r1
 800d09c:	3b01      	subs	r3, #1
 800d09e:	617b      	str	r3, [r7, #20]
 800d0a0:	b28b      	uxth	r3, r1
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	4698      	mov	r8, r3
 800d0a6:	4691      	mov	r9, r2
 800d0a8:	f04f 0200 	mov.w	r2, #0
 800d0ac:	f04f 0300 	mov.w	r3, #0
 800d0b0:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800d0b4:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800d0b8:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800d0bc:	b28b      	uxth	r3, r1
 800d0be:	2200      	movs	r2, #0
 800d0c0:	461c      	mov	r4, r3
 800d0c2:	4615      	mov	r5, r2
 800d0c4:	f04f 0200 	mov.w	r2, #0
 800d0c8:	f04f 0300 	mov.w	r3, #0
 800d0cc:	012b      	lsls	r3, r5, #4
 800d0ce:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800d0d2:	0122      	lsls	r2, r4, #4
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	005b      	lsls	r3, r3, #1
 800d0d8:	3307      	adds	r3, #7
 800d0da:	08db      	lsrs	r3, r3, #3
 800d0dc:	00db      	lsls	r3, r3, #3
 800d0de:	ebad 0d03 	sub.w	sp, sp, r3
 800d0e2:	466b      	mov	r3, sp
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	085b      	lsrs	r3, r3, #1
 800d0e8:	005b      	lsls	r3, r3, #1
 800d0ea:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 800d0ec:	897b      	ldrh	r3, [r7, #10]
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	6939      	ldr	r1, [r7, #16]
 800d0f2:	68f8      	ldr	r0, [r7, #12]
 800d0f4:	f7ff ff44 	bl	800cf80 <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 800d0f8:	897b      	ldrh	r3, [r7, #10]
 800d0fa:	687a      	ldr	r2, [r7, #4]
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	6938      	ldr	r0, [r7, #16]
 800d100:	f7ff ff6a 	bl	800cfd8 <ad7606_Convert>
 800d104:	46b5      	mov	sp, r6
}
 800d106:	bf00      	nop
 800d108:	371c      	adds	r7, #28
 800d10a:	46bd      	mov	sp, r7
 800d10c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d110 <INA228_readReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要读取的寄存器地址
 * @return 寄存器中的值
 */
uint64_t INA228_readReg(INA228_Handle sensor, uint8_t regAddr)
{
 800d110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d114:	b08d      	sub	sp, #52	@ 0x34
 800d116:	af04      	add	r7, sp, #16
 800d118:	6078      	str	r0, [r7, #4]
 800d11a:	460b      	mov	r3, r1
 800d11c:	70fb      	strb	r3, [r7, #3]
	uint64_t value;
	int i;

	uint8_t rxBuf[5] = {0}; // max buffer size
 800d11e:	2300      	movs	r3, #0
 800d120:	60fb      	str	r3, [r7, #12]
 800d122:	2300      	movs	r3, #0
 800d124:	743b      	strb	r3, [r7, #16]
	// 读取寄存器值
	HAL_I2C_Mem_Read(sensor->hi2c, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, rxBuf, INA228_regSize[regAddr], 100);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	69d8      	ldr	r0, [r3, #28]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d130:	461e      	mov	r6, r3
 800d132:	78fb      	ldrb	r3, [r7, #3]
 800d134:	b29a      	uxth	r2, r3
 800d136:	78fb      	ldrb	r3, [r7, #3]
 800d138:	4920      	ldr	r1, [pc, #128]	@ (800d1bc <INA228_readReg+0xac>)
 800d13a:	5ccb      	ldrb	r3, [r1, r3]
 800d13c:	4619      	mov	r1, r3
 800d13e:	2364      	movs	r3, #100	@ 0x64
 800d140:	9302      	str	r3, [sp, #8]
 800d142:	9101      	str	r1, [sp, #4]
 800d144:	f107 030c 	add.w	r3, r7, #12
 800d148:	9300      	str	r3, [sp, #0]
 800d14a:	2301      	movs	r3, #1
 800d14c:	4631      	mov	r1, r6
 800d14e:	f7f6 fe7d 	bl	8003e4c <HAL_I2C_Mem_Read>

	// 合并字节
	value = rxBuf[0];
 800d152:	7b3b      	ldrb	r3, [r7, #12]
 800d154:	b2db      	uxtb	r3, r3
 800d156:	2200      	movs	r2, #0
 800d158:	469a      	mov	sl, r3
 800d15a:	4693      	mov	fp, r2
 800d15c:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 800d160:	2301      	movs	r3, #1
 800d162:	617b      	str	r3, [r7, #20]
 800d164:	e01b      	b.n	800d19e <INA228_readReg+0x8e>
	{
		value = (value << 8) | rxBuf[i];
 800d166:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d16a:	f04f 0200 	mov.w	r2, #0
 800d16e:	f04f 0300 	mov.w	r3, #0
 800d172:	020b      	lsls	r3, r1, #8
 800d174:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d178:	0202      	lsls	r2, r0, #8
 800d17a:	f107 000c 	add.w	r0, r7, #12
 800d17e:	6979      	ldr	r1, [r7, #20]
 800d180:	4401      	add	r1, r0
 800d182:	7809      	ldrb	r1, [r1, #0]
 800d184:	b2c9      	uxtb	r1, r1
 800d186:	2000      	movs	r0, #0
 800d188:	460c      	mov	r4, r1
 800d18a:	4605      	mov	r5, r0
 800d18c:	ea42 0804 	orr.w	r8, r2, r4
 800d190:	ea43 0905 	orr.w	r9, r3, r5
 800d194:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	3301      	adds	r3, #1
 800d19c:	617b      	str	r3, [r7, #20]
 800d19e:	78fb      	ldrb	r3, [r7, #3]
 800d1a0:	4a06      	ldr	r2, [pc, #24]	@ (800d1bc <INA228_readReg+0xac>)
 800d1a2:	5cd3      	ldrb	r3, [r2, r3]
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	dbdc      	blt.n	800d166 <INA228_readReg+0x56>
	}

	return value;
 800d1ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800d1b0:	4610      	mov	r0, r2
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	3724      	adds	r7, #36	@ 0x24
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1bc:	0801202c 	.word	0x0801202c

0800d1c0 <INA228_getVBUS_V>:
 * @brief 获取总线电压值（伏特）
 * @param sensor INA228传感器的句柄
 * @return 总线电压值（V）
 */
float INA228_getVBUS_V(INA228_Handle sensor)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b086      	sub	sp, #24
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_vbus_register);
 800d1c8:	2105      	movs	r1, #5
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7ff ffa0 	bl	800d110 <INA228_readReg>
 800d1d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 800d1d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d1d8:	f04f 0200 	mov.w	r2, #0
 800d1dc:	f04f 0300 	mov.w	r3, #0
 800d1e0:	0902      	lsrs	r2, r0, #4
 800d1e2:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800d1e6:	090b      	lsrs	r3, r1, #4
 800d1e8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Convert for 2's compliment and signed value (though always positive)
	if (value > 0x7FFFF)
 800d1ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d1f0:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800d1f4:	f173 0300 	sbcs.w	r3, r3, #0
 800d1f8:	d30c      	bcc.n	800d214 <INA228_getVBUS_V+0x54>
	{
		data = (float)value - 0x100000; // left for redundancy and error checking, should never get used
 800d1fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d1fe:	f7f3 f98f 	bl	8000520 <__aeabi_ul2f>
 800d202:	ee07 0a10 	vmov	s14, r0
 800d206:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800d248 <INA228_getVBUS_V+0x88>
 800d20a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d20e:	edc7 7a05 	vstr	s15, [r7, #20]
 800d212:	e005      	b.n	800d220 <INA228_getVBUS_V+0x60>
	}
	else
	{
		data = (float)value;
 800d214:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d218:	f7f3 f982 	bl	8000520 <__aeabi_ul2f>
 800d21c:	4603      	mov	r3, r0
 800d21e:	617b      	str	r3, [r7, #20]
	}

	// Convert to V
	data = (data * 195.3125f) / 1000000;
 800d220:	edd7 7a05 	vldr	s15, [r7, #20]
 800d224:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800d24c <INA228_getVBUS_V+0x8c>
 800d228:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d22c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800d250 <INA228_getVBUS_V+0x90>
 800d230:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d234:	edc7 7a05 	vstr	s15, [r7, #20]

	return data;
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	ee07 3a90 	vmov	s15, r3
}
 800d23e:	eeb0 0a67 	vmov.f32	s0, s15
 800d242:	3718      	adds	r7, #24
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	49800000 	.word	0x49800000
 800d24c:	43435000 	.word	0x43435000
 800d250:	49742400 	.word	0x49742400

0800d254 <INA228_getCURRENT_signedLSB>:
 * @brief 获取电流值（最低有效位）
 * @param sensor INA228传感器的句柄
 * @return 电流值（signed LSBs）
 */
float INA228_getCURRENT_signedLSB(INA228_Handle sensor)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b086      	sub	sp, #24
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_current_register);
 800d25c:	2107      	movs	r1, #7
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f7ff ff56 	bl	800d110 <INA228_readReg>
 800d264:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 800d268:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d26c:	f04f 0200 	mov.w	r2, #0
 800d270:	f04f 0300 	mov.w	r3, #0
 800d274:	0902      	lsrs	r2, r0, #4
 800d276:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800d27a:	090b      	lsrs	r3, r1, #4
 800d27c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// 转换为 2 的补码和有符号值
	if (value > 0x7FFFF)
 800d280:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d284:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800d288:	f173 0300 	sbcs.w	r3, r3, #0
 800d28c:	d30c      	bcc.n	800d2a8 <INA228_getCURRENT_signedLSB+0x54>
	{
		data = (float)value - 0x100000;
 800d28e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d292:	f7f3 f945 	bl	8000520 <__aeabi_ul2f>
 800d296:	ee07 0a10 	vmov	s14, r0
 800d29a:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800d2c4 <INA228_getCURRENT_signedLSB+0x70>
 800d29e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2a2:	edc7 7a05 	vstr	s15, [r7, #20]
 800d2a6:	e005      	b.n	800d2b4 <INA228_getCURRENT_signedLSB+0x60>
	}
	else
	{
		data = (float)value;
 800d2a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d2ac:	f7f3 f938 	bl	8000520 <__aeabi_ul2f>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	617b      	str	r3, [r7, #20]
	}

	return data;
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	ee07 3a90 	vmov	s15, r3
}
 800d2ba:	eeb0 0a67 	vmov.f32	s0, s15
 800d2be:	3718      	adds	r7, #24
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	49800000 	.word	0x49800000

0800d2c8 <INA228_getCURRENT_A>:
 * @brief 获取电流值（安培）
 * @param sensor INA228传感器的句柄
 * @return 电流值（A）
 */
float INA228_getCURRENT_A(INA228_Handle sensor)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
	float data = INA228_getCURRENT_signedLSB(sensor);
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f7ff ffbf 	bl	800d254 <INA228_getCURRENT_signedLSB>
 800d2d6:	ed87 0a03 	vstr	s0, [r7, #12]

	data = data * sensor->currentlsb;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	edd3 7a06 	vldr	s15, [r3, #24]
 800d2e0:	ed97 7a03 	vldr	s14, [r7, #12]
 800d2e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2e8:	edc7 7a03 	vstr	s15, [r7, #12]

	return data;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	ee07 3a90 	vmov	s15, r3
}
 800d2f2:	eeb0 0a67 	vmov.f32	s0, s15
 800d2f6:	3710      	adds	r7, #16
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <OLED_WR_Byte>:
 * @brief 写入数据
 * @param dat 要写入的数据
 * @param cmd 数据类型 0 写入命令 1 写入数据
 */
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	4603      	mov	r3, r0
 800d304:	460a      	mov	r2, r1
 800d306:	71fb      	strb	r3, [r7, #7]
 800d308:	4613      	mov	r3, r2
 800d30a:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 800d30c:	1dfb      	adds	r3, r7, #7
 800d30e:	60fb      	str	r3, [r7, #12]
	if (cmd)
 800d310:	79bb      	ldrb	r3, [r7, #6]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d005      	beq.n	800d322 <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 800d316:	2201      	movs	r2, #1
 800d318:	2140      	movs	r1, #64	@ 0x40
 800d31a:	4811      	ldr	r0, [pc, #68]	@ (800d360 <OLED_WR_Byte+0x64>)
 800d31c:	f7f6 fcac 	bl	8003c78 <HAL_GPIO_WritePin>
 800d320:	e004      	b.n	800d32c <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 800d322:	2200      	movs	r2, #0
 800d324:	2140      	movs	r1, #64	@ 0x40
 800d326:	480e      	ldr	r0, [pc, #56]	@ (800d360 <OLED_WR_Byte+0x64>)
 800d328:	f7f6 fca6 	bl	8003c78 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 800d32c:	2200      	movs	r2, #0
 800d32e:	2102      	movs	r1, #2
 800d330:	480c      	ldr	r0, [pc, #48]	@ (800d364 <OLED_WR_Byte+0x68>)
 800d332:	f7f6 fca1 	bl	8003c78 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 800d336:	23c8      	movs	r3, #200	@ 0xc8
 800d338:	2201      	movs	r2, #1
 800d33a:	68f9      	ldr	r1, [r7, #12]
 800d33c:	480a      	ldr	r0, [pc, #40]	@ (800d368 <OLED_WR_Byte+0x6c>)
 800d33e:	f7fb f813 	bl	8008368 <HAL_SPI_Transmit>

	OLED_CS_Set();
 800d342:	2201      	movs	r2, #1
 800d344:	2102      	movs	r1, #2
 800d346:	4807      	ldr	r0, [pc, #28]	@ (800d364 <OLED_WR_Byte+0x68>)
 800d348:	f7f6 fc96 	bl	8003c78 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 800d34c:	2201      	movs	r2, #1
 800d34e:	2140      	movs	r1, #64	@ 0x40
 800d350:	4803      	ldr	r0, [pc, #12]	@ (800d360 <OLED_WR_Byte+0x64>)
 800d352:	f7f6 fc91 	bl	8003c78 <HAL_GPIO_WritePin>
}
 800d356:	bf00      	nop
 800d358:	3710      	adds	r7, #16
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	58022000 	.word	0x58022000
 800d364:	58020400 	.word	0x58020400
 800d368:	24000304 	.word	0x24000304

0800d36c <OLED_Refresh>:

/**
 * @brief 更新显存到OLED
 */
void OLED_Refresh(void)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800d372:	2300      	movs	r3, #0
 800d374:	71fb      	strb	r3, [r7, #7]
 800d376:	e026      	b.n	800d3c6 <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 800d378:	79fb      	ldrb	r3, [r7, #7]
 800d37a:	3b50      	subs	r3, #80	@ 0x50
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	2100      	movs	r1, #0
 800d380:	4618      	mov	r0, r3
 800d382:	f7ff ffbb 	bl	800d2fc <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 800d386:	2100      	movs	r1, #0
 800d388:	2000      	movs	r0, #0
 800d38a:	f7ff ffb7 	bl	800d2fc <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 800d38e:	2100      	movs	r1, #0
 800d390:	2010      	movs	r0, #16
 800d392:	f7ff ffb3 	bl	800d2fc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800d396:	2300      	movs	r3, #0
 800d398:	71bb      	strb	r3, [r7, #6]
 800d39a:	e00d      	b.n	800d3b8 <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800d39c:	79ba      	ldrb	r2, [r7, #6]
 800d39e:	79fb      	ldrb	r3, [r7, #7]
 800d3a0:	490d      	ldr	r1, [pc, #52]	@ (800d3d8 <OLED_Refresh+0x6c>)
 800d3a2:	00d2      	lsls	r2, r2, #3
 800d3a4:	440a      	add	r2, r1
 800d3a6:	4413      	add	r3, r2
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	2101      	movs	r1, #1
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7ff ffa5 	bl	800d2fc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800d3b2:	79bb      	ldrb	r3, [r7, #6]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	71bb      	strb	r3, [r7, #6]
 800d3b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	daed      	bge.n	800d39c <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 800d3c0:	79fb      	ldrb	r3, [r7, #7]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	71fb      	strb	r3, [r7, #7]
 800d3c6:	79fb      	ldrb	r3, [r7, #7]
 800d3c8:	2b07      	cmp	r3, #7
 800d3ca:	d9d5      	bls.n	800d378 <OLED_Refresh+0xc>
	}
}
 800d3cc:	bf00      	nop
 800d3ce:	bf00      	nop
 800d3d0:	3708      	adds	r7, #8
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	24004e50 	.word	0x24004e50

0800d3dc <OLED_Clear>:

/**
 * @brief 清屏
 */
void OLED_Clear(void)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	71fb      	strb	r3, [r7, #7]
 800d3e6:	e014      	b.n	800d412 <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	71bb      	strb	r3, [r7, #6]
 800d3ec:	e00a      	b.n	800d404 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 800d3ee:	79ba      	ldrb	r2, [r7, #6]
 800d3f0:	79fb      	ldrb	r3, [r7, #7]
 800d3f2:	490c      	ldr	r1, [pc, #48]	@ (800d424 <OLED_Clear+0x48>)
 800d3f4:	00d2      	lsls	r2, r2, #3
 800d3f6:	440a      	add	r2, r1
 800d3f8:	4413      	add	r3, r2
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800d3fe:	79bb      	ldrb	r3, [r7, #6]
 800d400:	3301      	adds	r3, #1
 800d402:	71bb      	strb	r3, [r7, #6]
 800d404:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	daf0      	bge.n	800d3ee <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800d40c:	79fb      	ldrb	r3, [r7, #7]
 800d40e:	3301      	adds	r3, #1
 800d410:	71fb      	strb	r3, [r7, #7]
 800d412:	79fb      	ldrb	r3, [r7, #7]
 800d414:	2b07      	cmp	r3, #7
 800d416:	d9e7      	bls.n	800d3e8 <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 800d418:	f7ff ffa8 	bl	800d36c <OLED_Refresh>
}
 800d41c:	bf00      	nop
 800d41e:	3708      	adds	r7, #8
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}
 800d424:	24004e50 	.word	0x24004e50

0800d428 <OLED_DrawPoint>:
 * @brief 画点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 800d428:	b480      	push	{r7}
 800d42a:	b085      	sub	sp, #20
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	4603      	mov	r3, r0
 800d430:	460a      	mov	r2, r1
 800d432:	71fb      	strb	r3, [r7, #7]
 800d434:	4613      	mov	r3, r2
 800d436:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800d438:	79bb      	ldrb	r3, [r7, #6]
 800d43a:	08db      	lsrs	r3, r3, #3
 800d43c:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800d43e:	79bb      	ldrb	r3, [r7, #6]
 800d440:	f003 0307 	and.w	r3, r3, #7
 800d444:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800d446:	7bbb      	ldrb	r3, [r7, #14]
 800d448:	2201      	movs	r2, #1
 800d44a:	fa02 f303 	lsl.w	r3, r2, r3
 800d44e:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 800d450:	79fa      	ldrb	r2, [r7, #7]
 800d452:	7bfb      	ldrb	r3, [r7, #15]
 800d454:	490a      	ldr	r1, [pc, #40]	@ (800d480 <OLED_DrawPoint+0x58>)
 800d456:	00d2      	lsls	r2, r2, #3
 800d458:	440a      	add	r2, r1
 800d45a:	4413      	add	r3, r2
 800d45c:	7818      	ldrb	r0, [r3, #0]
 800d45e:	79fa      	ldrb	r2, [r7, #7]
 800d460:	7bfb      	ldrb	r3, [r7, #15]
 800d462:	7b79      	ldrb	r1, [r7, #13]
 800d464:	4301      	orrs	r1, r0
 800d466:	b2c8      	uxtb	r0, r1
 800d468:	4905      	ldr	r1, [pc, #20]	@ (800d480 <OLED_DrawPoint+0x58>)
 800d46a:	00d2      	lsls	r2, r2, #3
 800d46c:	440a      	add	r2, r1
 800d46e:	4413      	add	r3, r2
 800d470:	4602      	mov	r2, r0
 800d472:	701a      	strb	r2, [r3, #0]
}
 800d474:	bf00      	nop
 800d476:	3714      	adds	r7, #20
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr
 800d480:	24004e50 	.word	0x24004e50

0800d484 <OLED_ClearPoint>:
 * @brief 清除一个点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 800d484:	b480      	push	{r7}
 800d486:	b085      	sub	sp, #20
 800d488:	af00      	add	r7, sp, #0
 800d48a:	4603      	mov	r3, r0
 800d48c:	460a      	mov	r2, r1
 800d48e:	71fb      	strb	r3, [r7, #7]
 800d490:	4613      	mov	r3, r2
 800d492:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800d494:	79bb      	ldrb	r3, [r7, #6]
 800d496:	08db      	lsrs	r3, r3, #3
 800d498:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800d49a:	79bb      	ldrb	r3, [r7, #6]
 800d49c:	f003 0307 	and.w	r3, r3, #7
 800d4a0:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800d4a2:	7bbb      	ldrb	r3, [r7, #14]
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d4aa:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800d4ac:	79fa      	ldrb	r2, [r7, #7]
 800d4ae:	7bfb      	ldrb	r3, [r7, #15]
 800d4b0:	491b      	ldr	r1, [pc, #108]	@ (800d520 <OLED_ClearPoint+0x9c>)
 800d4b2:	00d2      	lsls	r2, r2, #3
 800d4b4:	440a      	add	r2, r1
 800d4b6:	4413      	add	r3, r2
 800d4b8:	7819      	ldrb	r1, [r3, #0]
 800d4ba:	79fa      	ldrb	r2, [r7, #7]
 800d4bc:	7bfb      	ldrb	r3, [r7, #15]
 800d4be:	43c9      	mvns	r1, r1
 800d4c0:	b2c8      	uxtb	r0, r1
 800d4c2:	4917      	ldr	r1, [pc, #92]	@ (800d520 <OLED_ClearPoint+0x9c>)
 800d4c4:	00d2      	lsls	r2, r2, #3
 800d4c6:	440a      	add	r2, r1
 800d4c8:	4413      	add	r3, r2
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 800d4ce:	79fa      	ldrb	r2, [r7, #7]
 800d4d0:	7bfb      	ldrb	r3, [r7, #15]
 800d4d2:	4913      	ldr	r1, [pc, #76]	@ (800d520 <OLED_ClearPoint+0x9c>)
 800d4d4:	00d2      	lsls	r2, r2, #3
 800d4d6:	440a      	add	r2, r1
 800d4d8:	4413      	add	r3, r2
 800d4da:	7818      	ldrb	r0, [r3, #0]
 800d4dc:	79fa      	ldrb	r2, [r7, #7]
 800d4de:	7bfb      	ldrb	r3, [r7, #15]
 800d4e0:	7b79      	ldrb	r1, [r7, #13]
 800d4e2:	4301      	orrs	r1, r0
 800d4e4:	b2c8      	uxtb	r0, r1
 800d4e6:	490e      	ldr	r1, [pc, #56]	@ (800d520 <OLED_ClearPoint+0x9c>)
 800d4e8:	00d2      	lsls	r2, r2, #3
 800d4ea:	440a      	add	r2, r1
 800d4ec:	4413      	add	r3, r2
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800d4f2:	79fa      	ldrb	r2, [r7, #7]
 800d4f4:	7bfb      	ldrb	r3, [r7, #15]
 800d4f6:	490a      	ldr	r1, [pc, #40]	@ (800d520 <OLED_ClearPoint+0x9c>)
 800d4f8:	00d2      	lsls	r2, r2, #3
 800d4fa:	440a      	add	r2, r1
 800d4fc:	4413      	add	r3, r2
 800d4fe:	7819      	ldrb	r1, [r3, #0]
 800d500:	79fa      	ldrb	r2, [r7, #7]
 800d502:	7bfb      	ldrb	r3, [r7, #15]
 800d504:	43c9      	mvns	r1, r1
 800d506:	b2c8      	uxtb	r0, r1
 800d508:	4905      	ldr	r1, [pc, #20]	@ (800d520 <OLED_ClearPoint+0x9c>)
 800d50a:	00d2      	lsls	r2, r2, #3
 800d50c:	440a      	add	r2, r1
 800d50e:	4413      	add	r3, r2
 800d510:	4602      	mov	r2, r0
 800d512:	701a      	strb	r2, [r3, #0]
}
 800d514:	bf00      	nop
 800d516:	3714      	adds	r7, #20
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr
 800d520:	24004e50 	.word	0x24004e50

0800d524 <OLED_ShowChar>:
 * @param chr 要显示的字符
 * @param size1 字体大小 12/16/24
 * @note 取模方式 逐列式
 */
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 800d524:	b590      	push	{r4, r7, lr}
 800d526:	b085      	sub	sp, #20
 800d528:	af00      	add	r7, sp, #0
 800d52a:	4604      	mov	r4, r0
 800d52c:	4608      	mov	r0, r1
 800d52e:	4611      	mov	r1, r2
 800d530:	461a      	mov	r2, r3
 800d532:	4623      	mov	r3, r4
 800d534:	71fb      	strb	r3, [r7, #7]
 800d536:	4603      	mov	r3, r0
 800d538:	71bb      	strb	r3, [r7, #6]
 800d53a:	460b      	mov	r3, r1
 800d53c:	717b      	strb	r3, [r7, #5]
 800d53e:	4613      	mov	r3, r2
 800d540:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 800d542:	79bb      	ldrb	r3, [r7, #6]
 800d544:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 800d546:	793b      	ldrb	r3, [r7, #4]
 800d548:	08db      	lsrs	r3, r3, #3
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	461a      	mov	r2, r3
 800d54e:	793b      	ldrb	r3, [r7, #4]
 800d550:	f003 0307 	and.w	r3, r3, #7
 800d554:	b2db      	uxtb	r3, r3
 800d556:	2b00      	cmp	r3, #0
 800d558:	bf14      	ite	ne
 800d55a:	2301      	movne	r3, #1
 800d55c:	2300      	moveq	r3, #0
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	4413      	add	r3, r2
 800d562:	b2da      	uxtb	r2, r3
 800d564:	793b      	ldrb	r3, [r7, #4]
 800d566:	085b      	lsrs	r3, r3, #1
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	fb12 f303 	smulbb	r3, r2, r3
 800d56e:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 800d570:	797b      	ldrb	r3, [r7, #5]
 800d572:	3b20      	subs	r3, #32
 800d574:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 800d576:	2300      	movs	r3, #0
 800d578:	73fb      	strb	r3, [r7, #15]
 800d57a:	e057      	b.n	800d62c <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 800d57c:	793b      	ldrb	r3, [r7, #4]
 800d57e:	2b0c      	cmp	r3, #12
 800d580:	d10b      	bne.n	800d59a <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 800d582:	7aba      	ldrb	r2, [r7, #10]
 800d584:	7bf9      	ldrb	r1, [r7, #15]
 800d586:	482e      	ldr	r0, [pc, #184]	@ (800d640 <OLED_ShowChar+0x11c>)
 800d588:	4613      	mov	r3, r2
 800d58a:	005b      	lsls	r3, r3, #1
 800d58c:	4413      	add	r3, r2
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	4403      	add	r3, r0
 800d592:	440b      	add	r3, r1
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	737b      	strb	r3, [r7, #13]
 800d598:	e019      	b.n	800d5ce <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 800d59a:	793b      	ldrb	r3, [r7, #4]
 800d59c:	2b10      	cmp	r3, #16
 800d59e:	d108      	bne.n	800d5b2 <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 800d5a0:	7aba      	ldrb	r2, [r7, #10]
 800d5a2:	7bfb      	ldrb	r3, [r7, #15]
 800d5a4:	4927      	ldr	r1, [pc, #156]	@ (800d644 <OLED_ShowChar+0x120>)
 800d5a6:	0112      	lsls	r2, r2, #4
 800d5a8:	440a      	add	r2, r1
 800d5aa:	4413      	add	r3, r2
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	737b      	strb	r3, [r7, #13]
 800d5b0:	e00d      	b.n	800d5ce <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 800d5b2:	793b      	ldrb	r3, [r7, #4]
 800d5b4:	2b18      	cmp	r3, #24
 800d5b6:	d13e      	bne.n	800d636 <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 800d5b8:	7aba      	ldrb	r2, [r7, #10]
 800d5ba:	7bf9      	ldrb	r1, [r7, #15]
 800d5bc:	4822      	ldr	r0, [pc, #136]	@ (800d648 <OLED_ShowChar+0x124>)
 800d5be:	4613      	mov	r3, r2
 800d5c0:	00db      	lsls	r3, r3, #3
 800d5c2:	4413      	add	r3, r2
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	4403      	add	r3, r0
 800d5c8:	440b      	add	r3, r1
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	73bb      	strb	r3, [r7, #14]
 800d5d2:	e025      	b.n	800d620 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 800d5d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	da06      	bge.n	800d5ea <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 800d5dc:	79ba      	ldrb	r2, [r7, #6]
 800d5de:	79fb      	ldrb	r3, [r7, #7]
 800d5e0:	4611      	mov	r1, r2
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7ff ff20 	bl	800d428 <OLED_DrawPoint>
 800d5e8:	e005      	b.n	800d5f6 <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 800d5ea:	79ba      	ldrb	r2, [r7, #6]
 800d5ec:	79fb      	ldrb	r3, [r7, #7]
 800d5ee:	4611      	mov	r1, r2
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7ff ff47 	bl	800d484 <OLED_ClearPoint>
			temp <<= 1;
 800d5f6:	7b7b      	ldrb	r3, [r7, #13]
 800d5f8:	005b      	lsls	r3, r3, #1
 800d5fa:	737b      	strb	r3, [r7, #13]
			y++;
 800d5fc:	79bb      	ldrb	r3, [r7, #6]
 800d5fe:	3301      	adds	r3, #1
 800d600:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 800d602:	79ba      	ldrb	r2, [r7, #6]
 800d604:	7b3b      	ldrb	r3, [r7, #12]
 800d606:	1ad2      	subs	r2, r2, r3
 800d608:	793b      	ldrb	r3, [r7, #4]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d105      	bne.n	800d61a <OLED_ShowChar+0xf6>
			{
				y = y0;
 800d60e:	7b3b      	ldrb	r3, [r7, #12]
 800d610:	71bb      	strb	r3, [r7, #6]
				x++;
 800d612:	79fb      	ldrb	r3, [r7, #7]
 800d614:	3301      	adds	r3, #1
 800d616:	71fb      	strb	r3, [r7, #7]
				break;
 800d618:	e005      	b.n	800d626 <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 800d61a:	7bbb      	ldrb	r3, [r7, #14]
 800d61c:	3301      	adds	r3, #1
 800d61e:	73bb      	strb	r3, [r7, #14]
 800d620:	7bbb      	ldrb	r3, [r7, #14]
 800d622:	2b07      	cmp	r3, #7
 800d624:	d9d6      	bls.n	800d5d4 <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 800d626:	7bfb      	ldrb	r3, [r7, #15]
 800d628:	3301      	adds	r3, #1
 800d62a:	73fb      	strb	r3, [r7, #15]
 800d62c:	7bfa      	ldrb	r2, [r7, #15]
 800d62e:	7afb      	ldrb	r3, [r7, #11]
 800d630:	429a      	cmp	r2, r3
 800d632:	d3a3      	bcc.n	800d57c <OLED_ShowChar+0x58>
 800d634:	e000      	b.n	800d638 <OLED_ShowChar+0x114>
			return;
 800d636:	bf00      	nop
			}
		}
	}
}
 800d638:	3714      	adds	r7, #20
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd90      	pop	{r4, r7, pc}
 800d63e:	bf00      	nop
 800d640:	0801206c 	.word	0x0801206c
 800d644:	080124e0 	.word	0x080124e0
 800d648:	08012ad0 	.word	0x08012ad0

0800d64c <OLED_ShowString>:
 *@param y y坐标
 *@param chr 字符串起始地址
 *@param size1 字体大小
 */
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	603a      	str	r2, [r7, #0]
 800d654:	461a      	mov	r2, r3
 800d656:	4603      	mov	r3, r0
 800d658:	71fb      	strb	r3, [r7, #7]
 800d65a:	460b      	mov	r3, r1
 800d65c:	71bb      	strb	r3, [r7, #6]
 800d65e:	4613      	mov	r3, r2
 800d660:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800d662:	e01b      	b.n	800d69c <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	781a      	ldrb	r2, [r3, #0]
 800d668:	797b      	ldrb	r3, [r7, #5]
 800d66a:	79b9      	ldrb	r1, [r7, #6]
 800d66c:	79f8      	ldrb	r0, [r7, #7]
 800d66e:	f7ff ff59 	bl	800d524 <OLED_ShowChar>
		x += size1 / 2;
 800d672:	797b      	ldrb	r3, [r7, #5]
 800d674:	085b      	lsrs	r3, r3, #1
 800d676:	b2da      	uxtb	r2, r3
 800d678:	79fb      	ldrb	r3, [r7, #7]
 800d67a:	4413      	add	r3, r2
 800d67c:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 800d67e:	79fa      	ldrb	r2, [r7, #7]
 800d680:	797b      	ldrb	r3, [r7, #5]
 800d682:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800d686:	429a      	cmp	r2, r3
 800d688:	dd05      	ble.n	800d696 <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 800d68a:	2302      	movs	r3, #2
 800d68c:	71fb      	strb	r3, [r7, #7]
			y += size1;
 800d68e:	79ba      	ldrb	r2, [r7, #6]
 800d690:	797b      	ldrb	r3, [r7, #5]
 800d692:	4413      	add	r3, r2
 800d694:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	3301      	adds	r3, #1
 800d69a:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	2b1f      	cmp	r3, #31
 800d6a2:	d903      	bls.n	800d6ac <OLED_ShowString+0x60>
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	2b7e      	cmp	r3, #126	@ 0x7e
 800d6aa:	d9db      	bls.n	800d664 <OLED_ShowString+0x18>
	}
}
 800d6ac:	bf00      	nop
 800d6ae:	3708      	adds	r7, #8
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <OLED_Init>:

/**
 * @brief OLED初始化
 */
void OLED_Init(void)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	2120      	movs	r1, #32
 800d6bc:	483f      	ldr	r0, [pc, #252]	@ (800d7bc <OLED_Init+0x108>)
 800d6be:	f7f6 fadb 	bl	8003c78 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800d6c2:	20c8      	movs	r0, #200	@ 0xc8
 800d6c4:	f7f4 f9f2 	bl	8001aac <HAL_Delay>
	OLED_RES_Set();
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	2120      	movs	r1, #32
 800d6cc:	483b      	ldr	r0, [pc, #236]	@ (800d7bc <OLED_Init+0x108>)
 800d6ce:	f7f6 fad3 	bl	8003c78 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	20ae      	movs	r0, #174	@ 0xae
 800d6d6:	f7ff fe11 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 800d6da:	2100      	movs	r1, #0
 800d6dc:	2000      	movs	r0, #0
 800d6de:	f7ff fe0d 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	2010      	movs	r0, #16
 800d6e6:	f7ff fe09 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	2040      	movs	r0, #64	@ 0x40
 800d6ee:	f7ff fe05 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 800d6f2:	2100      	movs	r1, #0
 800d6f4:	2081      	movs	r0, #129	@ 0x81
 800d6f6:	f7ff fe01 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 800d6fa:	2100      	movs	r1, #0
 800d6fc:	20cf      	movs	r0, #207	@ 0xcf
 800d6fe:	f7ff fdfd 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 800d702:	2100      	movs	r1, #0
 800d704:	20a1      	movs	r0, #161	@ 0xa1
 800d706:	f7ff fdf9 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 800d70a:	2100      	movs	r1, #0
 800d70c:	20c8      	movs	r0, #200	@ 0xc8
 800d70e:	f7ff fdf5 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 800d712:	2100      	movs	r1, #0
 800d714:	20a6      	movs	r0, #166	@ 0xa6
 800d716:	f7ff fdf1 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 800d71a:	2100      	movs	r1, #0
 800d71c:	20a8      	movs	r0, #168	@ 0xa8
 800d71e:	f7ff fded 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 800d722:	2100      	movs	r1, #0
 800d724:	203f      	movs	r0, #63	@ 0x3f
 800d726:	f7ff fde9 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800d72a:	2100      	movs	r1, #0
 800d72c:	20d3      	movs	r0, #211	@ 0xd3
 800d72e:	f7ff fde5 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 800d732:	2100      	movs	r1, #0
 800d734:	2000      	movs	r0, #0
 800d736:	f7ff fde1 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 800d73a:	2100      	movs	r1, #0
 800d73c:	20d5      	movs	r0, #213	@ 0xd5
 800d73e:	f7ff fddd 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 800d742:	2100      	movs	r1, #0
 800d744:	2080      	movs	r0, #128	@ 0x80
 800d746:	f7ff fdd9 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 800d74a:	2100      	movs	r1, #0
 800d74c:	20d9      	movs	r0, #217	@ 0xd9
 800d74e:	f7ff fdd5 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 800d752:	2100      	movs	r1, #0
 800d754:	20f1      	movs	r0, #241	@ 0xf1
 800d756:	f7ff fdd1 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 800d75a:	2100      	movs	r1, #0
 800d75c:	20da      	movs	r0, #218	@ 0xda
 800d75e:	f7ff fdcd 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 800d762:	2100      	movs	r1, #0
 800d764:	2012      	movs	r0, #18
 800d766:	f7ff fdc9 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 800d76a:	2100      	movs	r1, #0
 800d76c:	20db      	movs	r0, #219	@ 0xdb
 800d76e:	f7ff fdc5 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 800d772:	2100      	movs	r1, #0
 800d774:	2040      	movs	r0, #64	@ 0x40
 800d776:	f7ff fdc1 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 800d77a:	2100      	movs	r1, #0
 800d77c:	2020      	movs	r0, #32
 800d77e:	f7ff fdbd 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 800d782:	2100      	movs	r1, #0
 800d784:	2002      	movs	r0, #2
 800d786:	f7ff fdb9 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 800d78a:	2100      	movs	r1, #0
 800d78c:	208d      	movs	r0, #141	@ 0x8d
 800d78e:	f7ff fdb5 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 800d792:	2100      	movs	r1, #0
 800d794:	2014      	movs	r0, #20
 800d796:	f7ff fdb1 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 800d79a:	2100      	movs	r1, #0
 800d79c:	20a4      	movs	r0, #164	@ 0xa4
 800d79e:	f7ff fdad 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 800d7a2:	2100      	movs	r1, #0
 800d7a4:	20a6      	movs	r0, #166	@ 0xa6
 800d7a6:	f7ff fda9 	bl	800d2fc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 800d7aa:	2100      	movs	r1, #0
 800d7ac:	20af      	movs	r0, #175	@ 0xaf
 800d7ae:	f7ff fda5 	bl	800d2fc <OLED_WR_Byte>
	OLED_Clear();
 800d7b2:	f7ff fe13 	bl	800d3dc <OLED_Clear>
}
 800d7b6:	bf00      	nop
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	58020800 	.word	0x58020800

0800d7c0 <pid_Init>:
 * @param kd 微分系数
 * @param max 输出最大值
 * @param min 输出最小值
 */
void pid_Init(PID *pid, float kp, float ki, float kd, float max, float min) // PID参数初始化
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b087      	sub	sp, #28
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6178      	str	r0, [r7, #20]
 800d7c8:	ed87 0a04 	vstr	s0, [r7, #16]
 800d7cc:	edc7 0a03 	vstr	s1, [r7, #12]
 800d7d0:	ed87 1a02 	vstr	s2, [r7, #8]
 800d7d4:	edc7 1a01 	vstr	s3, [r7, #4]
 800d7d8:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	693a      	ldr	r2, [r7, #16]
 800d7e0:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	68fa      	ldr	r2, [r7, #12]
 800d7e6:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	68ba      	ldr	r2, [r7, #8]
 800d7ec:	609a      	str	r2, [r3, #8]
	pid->Max = max;
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	61da      	str	r2, [r3, #28]
	pid->Min = min;
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	683a      	ldr	r2, [r7, #0]
 800d7f8:	621a      	str	r2, [r3, #32]
	pid->err[0] = 0.f;
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	f04f 0200 	mov.w	r2, #0
 800d800:	60da      	str	r2, [r3, #12]
	pid->err[1] = 0.f;
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	f04f 0200 	mov.w	r2, #0
 800d808:	611a      	str	r2, [r3, #16]
	pid->err[2] = 0.f;
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	f04f 0200 	mov.w	r2, #0
 800d810:	615a      	str	r2, [r3, #20]
	pid->out = 0.f;
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	f04f 0200 	mov.w	r2, #0
 800d818:	619a      	str	r2, [r3, #24]
}
 800d81a:	bf00      	nop
 800d81c:	371c      	adds	r7, #28
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr

0800d826 <pid>:
 * @note e(0)代表本次偏差
 * @note e(1)代表上一次的偏差  以此类推
 * @note result代表增量输出
 */
void pid(PID *pid, float target, float sample)
{
 800d826:	b580      	push	{r7, lr}
 800d828:	ed2d 8b02 	vpush	{d8}
 800d82c:	b084      	sub	sp, #16
 800d82e:	af00      	add	r7, sp, #0
 800d830:	60f8      	str	r0, [r7, #12]
 800d832:	ed87 0a02 	vstr	s0, [r7, #8]
 800d836:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->err[0] = target - sample;
 800d83a:	ed97 7a02 	vldr	s14, [r7, #8]
 800d83e:	edd7 7a01 	vldr	s15, [r7, #4]
 800d842:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->out += pid->kp * (pid->err[0] - pid->err[1]) + pid->ki * pid->err[0] + pid->kd * (pid->err[0] - 2 * pid->err[1] + pid->err[2]);
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	ed93 7a06 	vldr	s14, [r3, #24]
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	edd3 6a00 	vldr	s13, [r3]
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	ed93 6a03 	vldr	s12, [r3, #12]
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	edd3 7a04 	vldr	s15, [r3, #16]
 800d864:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d868:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	ed93 6a01 	vldr	s12, [r3, #4]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	edd3 7a03 	vldr	s15, [r3, #12]
 800d878:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d87c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	ed93 6a02 	vldr	s12, [r3, #8]
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	edd3 5a03 	vldr	s11, [r3, #12]
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	edd3 7a04 	vldr	s15, [r3, #16]
 800d892:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d896:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	edd3 7a05 	vldr	s15, [r3, #20]
 800d8a0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800d8a4:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d8a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->err[2] = pid->err[1];
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	691a      	ldr	r2, [r3, #16]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	615a      	str	r2, [r3, #20]
	pid->err[1] = pid->err[0];
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	68da      	ldr	r2, [r3, #12]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	611a      	str	r2, [r3, #16]
	// 输出限幅
	pid->out = fminf(pid->Max, fmaxf(pid->out, pid->Min));
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	ed93 8a07 	vldr	s16, [r3, #28]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	edd3 7a06 	vldr	s15, [r3, #24]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	ed93 7a08 	vldr	s14, [r3, #32]
 800d8d8:	eef0 0a47 	vmov.f32	s1, s14
 800d8dc:	eeb0 0a67 	vmov.f32	s0, s15
 800d8e0:	f004 f872 	bl	80119c8 <fmaxf>
 800d8e4:	eef0 7a40 	vmov.f32	s15, s0
 800d8e8:	eef0 0a67 	vmov.f32	s1, s15
 800d8ec:	eeb0 0a48 	vmov.f32	s0, s16
 800d8f0:	f004 f887 	bl	8011a02 <fminf>
 800d8f4:	eef0 7a40 	vmov.f32	s15, s0
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800d8fe:	bf00      	nop
 800d900:	3710      	adds	r7, #16
 800d902:	46bd      	mov	sp, r7
 800d904:	ecbd 8b02 	vpop	{d8}
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	0000      	movs	r0, r0
 800d90c:	0000      	movs	r0, r0
	...

0800d910 <pll_Init_V>:
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 * @param Umax 交流电压峰值
 */
void pll_Init_V(pll_Signal_V **signal, float f, uint16_t F)
{
 800d910:	b590      	push	{r4, r7, lr}
 800d912:	b087      	sub	sp, #28
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	ed87 0a02 	vstr	s0, [r7, #8]
 800d91c:	460b      	mov	r3, r1
 800d91e:	80fb      	strh	r3, [r7, #6]
    /* 分配内存空间 */
    (*signal) = (pll_Signal_V *)malloc(sizeof(pll_Signal_V));
 800d920:	200c      	movs	r0, #12
 800d922:	f001 f9e7 	bl	800ecf4 <malloc>
 800d926:	4603      	mov	r3, r0
 800d928:	461a      	mov	r2, r3
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681c      	ldr	r4, [r3, #0]
 800d932:	2024      	movs	r0, #36	@ 0x24
 800d934:	f001 f9de 	bl	800ecf4 <malloc>
 800d938:	4603      	mov	r3, r0
 800d93a:	6023      	str	r3, [r4, #0]
    (*signal)->pid = (PID *)malloc(sizeof(PID));
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681c      	ldr	r4, [r3, #0]
 800d940:	2024      	movs	r0, #36	@ 0x24
 800d942:	f001 f9d7 	bl	800ecf4 <malloc>
 800d946:	4603      	mov	r3, r0
 800d948:	60a3      	str	r3, [r4, #8]
    (*signal)->basic->sogi = (SOGI *)malloc(sizeof(SOGI));
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	681c      	ldr	r4, [r3, #0]
 800d950:	2034      	movs	r0, #52	@ 0x34
 800d952:	f001 f9cf 	bl	800ecf4 <malloc>
 800d956:	4603      	mov	r3, r0
 800d958:	6123      	str	r3, [r4, #16]

    /* 初始化赋值 */
    (*signal)->basic->input[0] = 0.f;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f04f 0200 	mov.w	r2, #0
 800d964:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input[1] = 0.f;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f04f 0200 	mov.w	r2, #0
 800d970:	605a      	str	r2, [r3, #4]
    (*signal)->basic->input[2] = 0.f;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f04f 0200 	mov.w	r2, #0
 800d97c:	609a      	str	r2, [r3, #8]

    (*signal)->basic->rms = 0.f;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f04f 0200 	mov.w	r2, #0
 800d988:	60da      	str	r2, [r3, #12]

    (*signal)->basic->park_d = 0.f;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f04f 0200 	mov.w	r2, #0
 800d994:	615a      	str	r2, [r3, #20]
    (*signal)->basic->park_q = 0.f;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f04f 0200 	mov.w	r2, #0
 800d9a0:	619a      	str	r2, [r3, #24]

    (*signal)->theta = 0.f;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f04f 0200 	mov.w	r2, #0
 800d9aa:	605a      	str	r2, [r3, #4]
    (*signal)->basic->omiga0 = 2 * PI * f; /* f典型值50 */
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	edd7 7a02 	vldr	s15, [r7, #8]
 800d9b6:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 800dbe8 <pll_Init_V+0x2d8>
 800d9ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d9be:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->Ts = 1.f / F;        /* F典型值20000 */
 800d9c2:	88fb      	ldrh	r3, [r7, #6]
 800d9c4:	ee07 3a90 	vmov	s15, r3
 800d9c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9da:	edc3 7a08 	vstr	s15, [r3, #32]

    /* 初始化pid参数 */
    float ki = (*signal)->basic->omiga0 * (*signal)->basic->omiga0;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	ed93 7a07 	vldr	s14, [r3, #28]
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	edd3 7a07 	vldr	s15, [r3, #28]
 800d9f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9f6:	edc7 7a05 	vstr	s15, [r7, #20]
    float kp = sqrt(2) * sqrt(ki);
 800d9fa:	edd7 7a05 	vldr	s15, [r7, #20]
 800d9fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800da02:	eeb0 0b47 	vmov.f64	d0, d7
 800da06:	f003 ff67 	bl	80118d8 <sqrt>
 800da0a:	eeb0 7b40 	vmov.f64	d7, d0
 800da0e:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 800dbe0 <pll_Init_V+0x2d0>
 800da12:	ee27 7b06 	vmul.f64	d7, d7, d6
 800da16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800da1a:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_Init((*signal)->pid, kp, ki, 0, 50 * PI, -20 * PI);
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	689b      	ldr	r3, [r3, #8]
 800da24:	ed9f 2a71 	vldr	s4, [pc, #452]	@ 800dbec <pll_Init_V+0x2dc>
 800da28:	eddf 1a71 	vldr	s3, [pc, #452]	@ 800dbf0 <pll_Init_V+0x2e0>
 800da2c:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 800dbf4 <pll_Init_V+0x2e4>
 800da30:	edd7 0a05 	vldr	s1, [r7, #20]
 800da34:	ed97 0a04 	vldr	s0, [r7, #16]
 800da38:	4618      	mov	r0, r3
 800da3a:	f7ff fec1 	bl	800d7c0 <pid_Init>

    /* 计算sogi中间量 */
    (*signal)->basic->sogi->k = 1.414f;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	691b      	ldr	r3, [r3, #16]
 800da46:	4a6c      	ldr	r2, [pc, #432]	@ (800dbf8 <pll_Init_V+0x2e8>)
 800da48:	619a      	str	r2, [r3, #24]
    (*signal)->basic->sogi->lamda = 0.5f * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	edd3 7a07 	vldr	s15, [r3, #28]
 800da54:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800da58:	ee27 7a87 	vmul.f32	s14, s15, s14
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	edd3 7a08 	vldr	s15, [r3, #32]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	691b      	ldr	r3, [r3, #16]
 800da6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da72:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->sogi->x = 2.f * (*signal)->basic->sogi->k * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	691b      	ldr	r3, [r3, #16]
 800da7e:	edd3 7a06 	vldr	s15, [r3, #24]
 800da82:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	edd3 7a07 	vldr	s15, [r3, #28]
 800da90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	edd3 7a08 	vldr	s15, [r3, #32]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	691b      	ldr	r3, [r3, #16]
 800daa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daaa:	edc3 7a08 	vstr	s15, [r3, #32]
    (*signal)->basic->sogi->y = (*signal)->basic->omiga0 * (*signal)->basic->Ts * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	ed93 7a07 	vldr	s14, [r3, #28]
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	edd3 7a08 	vldr	s15, [r3, #32]
 800dac2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	edd3 7a07 	vldr	s15, [r3, #28]
 800dad0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	edd3 7a08 	vldr	s15, [r3, #32]
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	691b      	ldr	r3, [r3, #16]
 800dae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daea:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    (*signal)->basic->sogi->b0 = (*signal)->basic->sogi->x / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	691b      	ldr	r3, [r3, #16]
 800daf6:	edd3 6a08 	vldr	s13, [r3, #32]
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	691b      	ldr	r3, [r3, #16]
 800db02:	ed93 7a08 	vldr	s14, [r3, #32]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	691b      	ldr	r3, [r3, #16]
 800db0e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800db12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db16:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800db1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	691b      	ldr	r3, [r3, #16]
 800db26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db2a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    (*signal)->basic->sogi->a1 = (8 - 2.f * (*signal)->basic->sogi->y) / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	691b      	ldr	r3, [r3, #16]
 800db36:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800db3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800db3e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800db42:	ee77 6a67 	vsub.f32	s13, s14, s15
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	691b      	ldr	r3, [r3, #16]
 800db4e:	ed93 7a08 	vldr	s14, [r3, #32]
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	691b      	ldr	r3, [r3, #16]
 800db5a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800db5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db62:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800db66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	691b      	ldr	r3, [r3, #16]
 800db72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db76:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    (*signal)->basic->sogi->a2 = ((*signal)->basic->sogi->x - (*signal)->basic->sogi->y - 4) / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	691b      	ldr	r3, [r3, #16]
 800db82:	ed93 7a08 	vldr	s14, [r3, #32]
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	691b      	ldr	r3, [r3, #16]
 800db8e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800db92:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db96:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800db9a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	691b      	ldr	r3, [r3, #16]
 800dba6:	ed93 7a08 	vldr	s14, [r3, #32]
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	691b      	ldr	r3, [r3, #16]
 800dbb2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800dbb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbba:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800dbbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	691b      	ldr	r3, [r3, #16]
 800dbca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbce:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 800dbd2:	bf00      	nop
 800dbd4:	371c      	adds	r7, #28
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd90      	pop	{r4, r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	f3af 8000 	nop.w
 800dbe0:	667f3bcd 	.word	0x667f3bcd
 800dbe4:	3ff6a09e 	.word	0x3ff6a09e
 800dbe8:	40c90fdb 	.word	0x40c90fdb
 800dbec:	c27b53d2 	.word	0xc27b53d2
 800dbf0:	431d1463 	.word	0x431d1463
 800dbf4:	00000000 	.word	0x00000000
 800dbf8:	3fb4fdf4 	.word	0x3fb4fdf4

0800dbfc <pll_Init_I>:
 * @param F 采样频率(典型值:20000)
 * @param pi_kp PI控制器kp参数
 * @param pi_ki PI控制器ki参数
 */
void pll_Init_I(pll_Signal_I **signal, float f, uint16_t F)
{
 800dbfc:	b590      	push	{r4, r7, lr}
 800dbfe:	b085      	sub	sp, #20
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	ed87 0a02 	vstr	s0, [r7, #8]
 800dc08:	460b      	mov	r3, r1
 800dc0a:	80fb      	strh	r3, [r7, #6]
    (*signal) = (pll_Signal_I *)malloc(sizeof(pll_Signal_I));
 800dc0c:	201c      	movs	r0, #28
 800dc0e:	f001 f871 	bl	800ecf4 <malloc>
 800dc12:	4603      	mov	r3, r0
 800dc14:	461a      	mov	r2, r3
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681c      	ldr	r4, [r3, #0]
 800dc1e:	2024      	movs	r0, #36	@ 0x24
 800dc20:	f001 f868 	bl	800ecf4 <malloc>
 800dc24:	4603      	mov	r3, r0
 800dc26:	6023      	str	r3, [r4, #0]
    (*signal)->basic->sogi = (SOGI *)malloc(sizeof(SOGI));
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	681c      	ldr	r4, [r3, #0]
 800dc2e:	2034      	movs	r0, #52	@ 0x34
 800dc30:	f001 f860 	bl	800ecf4 <malloc>
 800dc34:	4603      	mov	r3, r0
 800dc36:	6123      	str	r3, [r4, #16]

    (*signal)->pid_d = (PID *)malloc(sizeof(PID));
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681c      	ldr	r4, [r3, #0]
 800dc3c:	2024      	movs	r0, #36	@ 0x24
 800dc3e:	f001 f859 	bl	800ecf4 <malloc>
 800dc42:	4603      	mov	r3, r0
 800dc44:	6163      	str	r3, [r4, #20]
    (*signal)->pid_q = (PID *)malloc(sizeof(PID));
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681c      	ldr	r4, [r3, #0]
 800dc4a:	2024      	movs	r0, #36	@ 0x24
 800dc4c:	f001 f852 	bl	800ecf4 <malloc>
 800dc50:	4603      	mov	r3, r0
 800dc52:	61a3      	str	r3, [r4, #24]
    /* 初始化赋值 */
    (*signal)->basic->input[0] = 0.f;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f04f 0200 	mov.w	r2, #0
 800dc5e:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input[1] = 0.f;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f04f 0200 	mov.w	r2, #0
 800dc6a:	605a      	str	r2, [r3, #4]
    (*signal)->basic->input[2] = 0.f;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f04f 0200 	mov.w	r2, #0
 800dc76:	609a      	str	r2, [r3, #8]

    (*signal)->basic->rms = 0.f;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f04f 0200 	mov.w	r2, #0
 800dc82:	60da      	str	r2, [r3, #12]

    (*signal)->basic->park_d = 0.f;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f04f 0200 	mov.w	r2, #0
 800dc8e:	615a      	str	r2, [r3, #20]
    (*signal)->basic->park_q = 0.f;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f04f 0200 	mov.w	r2, #0
 800dc9a:	619a      	str	r2, [r3, #24]

    (*signal)->park_inv_alpha = 0.f;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f04f 0200 	mov.w	r2, #0
 800dca4:	605a      	str	r2, [r3, #4]
    (*signal)->park_inv_beta = 0.f;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f04f 0200 	mov.w	r2, #0
 800dcae:	609a      	str	r2, [r3, #8]

    (*signal)->basic->omiga0 = 2.f * PI * f; /* f典型值50 */
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	edd7 7a02 	vldr	s15, [r7, #8]
 800dcba:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 800ded0 <pll_Init_I+0x2d4>
 800dcbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dcc2:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->Ts = 1.f / F;          /* F典型值20000 */
 800dcc6:	88fb      	ldrh	r3, [r7, #6]
 800dcc8:	ee07 3a90 	vmov	s15, r3
 800dccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dcda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dcde:	edc3 7a08 	vstr	s15, [r3, #32]

    (*signal)->CorL = 0;   /* 0:感性 1:容性 */
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2200      	movs	r2, #0
 800dce8:	731a      	strb	r2, [r3, #12]
    (*signal)->L = 0.001f; /* 1mH */
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4a79      	ldr	r2, [pc, #484]	@ (800ded4 <pll_Init_I+0x2d8>)
 800dcf0:	611a      	str	r2, [r3, #16]

    /* 在调整取值范围时看实际输出值逐渐逼近，防止上电瞬间电流过大 */
    pid_Init((*signal)->pid_d, 1.8f, 0.03f, 0, 0.2f, -0.4f);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	695b      	ldr	r3, [r3, #20]
 800dcf8:	ed9f 2a77 	vldr	s4, [pc, #476]	@ 800ded8 <pll_Init_I+0x2dc>
 800dcfc:	eddf 1a77 	vldr	s3, [pc, #476]	@ 800dedc <pll_Init_I+0x2e0>
 800dd00:	ed9f 1a77 	vldr	s2, [pc, #476]	@ 800dee0 <pll_Init_I+0x2e4>
 800dd04:	eddf 0a77 	vldr	s1, [pc, #476]	@ 800dee4 <pll_Init_I+0x2e8>
 800dd08:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 800dee8 <pll_Init_I+0x2ec>
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7ff fd57 	bl	800d7c0 <pid_Init>
    pid_Init((*signal)->pid_q, 1.8f, 0.03f, 0, 0.2f, -0.2f);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	699b      	ldr	r3, [r3, #24]
 800dd18:	ed9f 2a74 	vldr	s4, [pc, #464]	@ 800deec <pll_Init_I+0x2f0>
 800dd1c:	eddf 1a6f 	vldr	s3, [pc, #444]	@ 800dedc <pll_Init_I+0x2e0>
 800dd20:	ed9f 1a6f 	vldr	s2, [pc, #444]	@ 800dee0 <pll_Init_I+0x2e4>
 800dd24:	eddf 0a6f 	vldr	s1, [pc, #444]	@ 800dee4 <pll_Init_I+0x2e8>
 800dd28:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 800dee8 <pll_Init_I+0x2ec>
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7ff fd47 	bl	800d7c0 <pid_Init>

    /* 计算sogi中间量 */
    (*signal)->basic->sogi->k = 1.414f;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	691b      	ldr	r3, [r3, #16]
 800dd3a:	4a6d      	ldr	r2, [pc, #436]	@ (800def0 <pll_Init_I+0x2f4>)
 800dd3c:	619a      	str	r2, [r3, #24]
    (*signal)->basic->sogi->lamda = 0.5f * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	edd3 7a07 	vldr	s15, [r3, #28]
 800dd48:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800dd4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	edd3 7a08 	vldr	s15, [r3, #32]
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	691b      	ldr	r3, [r3, #16]
 800dd62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd66:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->sogi->x = 2.f * (*signal)->basic->sogi->k * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	691b      	ldr	r3, [r3, #16]
 800dd72:	edd3 7a06 	vldr	s15, [r3, #24]
 800dd76:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	edd3 7a07 	vldr	s15, [r3, #28]
 800dd84:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	edd3 7a08 	vldr	s15, [r3, #32]
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	691b      	ldr	r3, [r3, #16]
 800dd9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd9e:	edc3 7a08 	vstr	s15, [r3, #32]
    (*signal)->basic->sogi->y = (*signal)->basic->omiga0 * (*signal)->basic->Ts * (*signal)->basic->omiga0 * (*signal)->basic->Ts;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	ed93 7a07 	vldr	s14, [r3, #28]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	edd3 7a08 	vldr	s15, [r3, #32]
 800ddb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	edd3 7a07 	vldr	s15, [r3, #28]
 800ddc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	edd3 7a08 	vldr	s15, [r3, #32]
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	691b      	ldr	r3, [r3, #16]
 800ddda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddde:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    (*signal)->basic->sogi->b0 = (*signal)->basic->sogi->x / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	691b      	ldr	r3, [r3, #16]
 800ddea:	edd3 6a08 	vldr	s13, [r3, #32]
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	691b      	ldr	r3, [r3, #16]
 800ddf6:	ed93 7a08 	vldr	s14, [r3, #32]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	691b      	ldr	r3, [r3, #16]
 800de02:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800de06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de0a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800de0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	691b      	ldr	r3, [r3, #16]
 800de1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de1e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    (*signal)->basic->sogi->a1 = (8 - 2.f * (*signal)->basic->sogi->y) / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	691b      	ldr	r3, [r3, #16]
 800de2a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800de2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800de32:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800de36:	ee77 6a67 	vsub.f32	s13, s14, s15
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	691b      	ldr	r3, [r3, #16]
 800de42:	ed93 7a08 	vldr	s14, [r3, #32]
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	691b      	ldr	r3, [r3, #16]
 800de4e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800de52:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de56:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800de5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	691b      	ldr	r3, [r3, #16]
 800de66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de6a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    (*signal)->basic->sogi->a2 = ((*signal)->basic->sogi->x - (*signal)->basic->sogi->y - 4) / ((*signal)->basic->sogi->x + (*signal)->basic->sogi->y + 4);
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	691b      	ldr	r3, [r3, #16]
 800de76:	ed93 7a08 	vldr	s14, [r3, #32]
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	691b      	ldr	r3, [r3, #16]
 800de82:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800de86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de8a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800de8e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	691b      	ldr	r3, [r3, #16]
 800de9a:	ed93 7a08 	vldr	s14, [r3, #32]
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	691b      	ldr	r3, [r3, #16]
 800dea6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800deaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800deae:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800deb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	691b      	ldr	r3, [r3, #16]
 800debe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dec2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 800dec6:	bf00      	nop
 800dec8:	3714      	adds	r7, #20
 800deca:	46bd      	mov	sp, r7
 800decc:	bd90      	pop	{r4, r7, pc}
 800dece:	bf00      	nop
 800ded0:	40c90fdb 	.word	0x40c90fdb
 800ded4:	3a83126f 	.word	0x3a83126f
 800ded8:	becccccd 	.word	0xbecccccd
 800dedc:	3e4ccccd 	.word	0x3e4ccccd
 800dee0:	00000000 	.word	0x00000000
 800dee4:	3cf5c28f 	.word	0x3cf5c28f
 800dee8:	3fe66666 	.word	0x3fe66666
 800deec:	be4ccccd 	.word	0xbe4ccccd
 800def0:	3fb4fdf4 	.word	0x3fb4fdf4
 800def4:	00000000 	.word	0x00000000

0800def8 <pll_Control_V>:
/**
 * @brief 电压锁相控制
 * @param signal_V 电压信号指针
 */
void pll_Control_V(pll_Signal_V *signal_V)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b08a      	sub	sp, #40	@ 0x28
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
    /* 对信号先进行sogi变换，得到两个相位相差90度的信号 */
    pll_Sogi(signal_V->basic->sogi, signal_V->basic->input);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	691a      	ldr	r2, [r3, #16]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4619      	mov	r1, r3
 800df0c:	4610      	mov	r0, r2
 800df0e:	f000 f9e1 	bl	800e2d4 <pll_Sogi>

    /* 再对信号sogi变换后的信号进行park变换 */
    float sinTheta = arm_sin_f32(signal_V->theta);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	edd3 7a01 	vldr	s15, [r3, #4]
 800df18:	eeb0 0a67 	vmov.f32	s0, s15
 800df1c:	f000 fe5a 	bl	800ebd4 <arm_sin_f32>
 800df20:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float cosTheta = arm_cos_f32(signal_V->theta);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	edd3 7a01 	vldr	s15, [r3, #4]
 800df2a:	eeb0 0a67 	vmov.f32	s0, s15
 800df2e:	f000 fe97 	bl	800ec60 <arm_cos_f32>
 800df32:	ed87 0a08 	vstr	s0, [r7, #32]
    arm_park_f32(signal_V->basic->sogi->alpha[0], signal_V->basic->sogi->beta[0], &signal_V->basic->park_d, &signal_V->basic->park_q, sinTheta, cosTheta);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	691b      	ldr	r3, [r3, #16]
 800df3c:	6818      	ldr	r0, [r3, #0]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	691b      	ldr	r3, [r3, #16]
 800df44:	68d9      	ldr	r1, [r3, #12]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f103 0214 	add.w	r2, r3, #20
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	3318      	adds	r3, #24
 800df54:	61f8      	str	r0, [r7, #28]
 800df56:	61b9      	str	r1, [r7, #24]
 800df58:	617a      	str	r2, [r7, #20]
 800df5a:	613b      	str	r3, [r7, #16]
 800df5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df5e:	60fb      	str	r3, [r7, #12]
 800df60:	6a3b      	ldr	r3, [r7, #32]
 800df62:	60bb      	str	r3, [r7, #8]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800df64:	ed97 7a07 	vldr	s14, [r7, #28]
 800df68:	edd7 7a02 	vldr	s15, [r7, #8]
 800df6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df70:	edd7 6a06 	vldr	s13, [r7, #24]
 800df74:	edd7 7a03 	vldr	s15, [r7, #12]
 800df78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800df86:	edd7 7a07 	vldr	s15, [r7, #28]
 800df8a:	eeb1 7a67 	vneg.f32	s14, s15
 800df8e:	edd7 7a03 	vldr	s15, [r7, #12]
 800df92:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df96:	edd7 6a06 	vldr	s13, [r7, #24]
 800df9a:	edd7 7a02 	vldr	s15, [r7, #8]
 800df9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dfa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	edc3 7a00 	vstr	s15, [r3]
  }
 800dfac:	bf00      	nop

    /* 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差 */
    pid(signal_V->pid, signal_V->basic->park_q, 0); /* pid的输出值为旋转坐标系角速度 */
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	689a      	ldr	r2, [r3, #8]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	edd3 7a06 	vldr	s15, [r3, #24]
 800dfba:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800e030 <pll_Control_V+0x138>
 800dfbe:	eeb0 0a67 	vmov.f32	s0, s15
 800dfc2:	4610      	mov	r0, r2
 800dfc4:	f7ff fc2f 	bl	800d826 <pid>

    /* 更新theta */
    signal_V->theta += (signal_V->pid->out + signal_V->basic->omiga0) * signal_V->basic->Ts;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	ed93 7a01 	vldr	s14, [r3, #4]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	689b      	ldr	r3, [r3, #8]
 800dfd2:	edd3 6a06 	vldr	s13, [r3, #24]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	edd3 7a07 	vldr	s15, [r3, #28]
 800dfde:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	edd3 7a08 	vldr	s15, [r3, #32]
 800dfea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dfee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_V->theta = (float)fmod(signal_V->theta, 2 * PI);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	edd3 7a01 	vldr	s15, [r3, #4]
 800dffe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e002:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 800e028 <pll_Control_V+0x130>
 800e006:	eeb0 0b47 	vmov.f64	d0, d7
 800e00a:	f003 fc41 	bl	8011890 <fmod>
 800e00e:	eeb0 7b40 	vmov.f64	d7, d0
 800e012:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800e01c:	bf00      	nop
 800e01e:	3728      	adds	r7, #40	@ 0x28
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	f3af 8000 	nop.w
 800e028:	60000000 	.word	0x60000000
 800e02c:	401921fb 	.word	0x401921fb
 800e030:	00000000 	.word	0x00000000

0800e034 <pll_Control_I>:
 * @param signal_V 电压信号指针
 * @param Iset 电流设定值(有效值)
 * @param PF 功率因数
 */
void pll_Control_I(pll_Signal_I *signal_I, pll_Signal_V *signal_V, float Iset, float PF)
{
 800e034:	b590      	push	{r4, r7, lr}
 800e036:	b099      	sub	sp, #100	@ 0x64
 800e038:	af00      	add	r7, sp, #0
 800e03a:	60f8      	str	r0, [r7, #12]
 800e03c:	60b9      	str	r1, [r7, #8]
 800e03e:	ed87 0a01 	vstr	s0, [r7, #4]
 800e042:	edc7 0a00 	vstr	s1, [r7]
    /* 对信号先进行sogi变换，得到两个相位相差90度的信号 */
    pll_Sogi(signal_I->basic->sogi, signal_I->basic->input);
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	691a      	ldr	r2, [r3, #16]
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4619      	mov	r1, r3
 800e052:	4610      	mov	r0, r2
 800e054:	f000 f93e 	bl	800e2d4 <pll_Sogi>

    /* 在电压的系上得出电流的dq值 */
    float sinTheta = arm_sin_f32(signal_V->theta);
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	edd3 7a01 	vldr	s15, [r3, #4]
 800e05e:	eeb0 0a67 	vmov.f32	s0, s15
 800e062:	f000 fdb7 	bl	800ebd4 <arm_sin_f32>
 800e066:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
    float cosTheta = arm_cos_f32(signal_V->theta);
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	edd3 7a01 	vldr	s15, [r3, #4]
 800e070:	eeb0 0a67 	vmov.f32	s0, s15
 800e074:	f000 fdf4 	bl	800ec60 <arm_cos_f32>
 800e078:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58

    arm_park_f32(signal_I->basic->sogi->alpha[0], signal_I->basic->sogi->beta[0], &signal_I->basic->park_d, &signal_I->basic->park_q, sinTheta, cosTheta);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	691b      	ldr	r3, [r3, #16]
 800e082:	6818      	ldr	r0, [r3, #0]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	691b      	ldr	r3, [r3, #16]
 800e08a:	68d9      	ldr	r1, [r3, #12]
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	f103 0214 	add.w	r2, r3, #20
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	3318      	adds	r3, #24
 800e09a:	6438      	str	r0, [r7, #64]	@ 0x40
 800e09c:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800e09e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800e0a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800e0a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e0a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800e0aa:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800e0ae:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800e0b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0b6:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800e0ba:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800e0be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e0c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0c8:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800e0cc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800e0d0:	eeb1 7a67 	vneg.f32	s14, s15
 800e0d4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800e0d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0dc:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800e0e0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800e0e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e0e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0ee:	edc3 7a00 	vstr	s15, [r3]
  }
 800e0f2:	bf00      	nop

    /* PI控制 */
    float PFTheta = asinf(PF);
 800e0f4:	ed97 0a00 	vldr	s0, [r7]
 800e0f8:	f003 fc0e 	bl	8011918 <asinf>
 800e0fc:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54

    float Ivalue = Iset * 1.414f / Ibase;
 800e100:	edd7 7a01 	vldr	s15, [r7, #4]
 800e104:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 800e2c4 <pll_Control_I+0x290>
 800e108:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e10c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800e2c8 <pll_Control_I+0x294>
 800e110:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e114:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    pid(signal_I->pid_d, Ivalue * arm_sin_f32(PFTheta), signal_I->basic->park_d); /* 电流大小 */
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	695c      	ldr	r4, [r3, #20]
 800e11c:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 800e120:	f000 fd58 	bl	800ebd4 <arm_sin_f32>
 800e124:	eeb0 7a40 	vmov.f32	s14, s0
 800e128:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800e12c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	ed93 7a05 	vldr	s14, [r3, #20]
 800e138:	eef0 0a47 	vmov.f32	s1, s14
 800e13c:	eeb0 0a67 	vmov.f32	s0, s15
 800e140:	4620      	mov	r0, r4
 800e142:	f7ff fb70 	bl	800d826 <pid>

    float Iphase = Ivalue * arm_cos_f32(PFTheta) * (signal_I->CorL ? 1 : -1);
 800e146:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 800e14a:	f000 fd89 	bl	800ec60 <arm_cos_f32>
 800e14e:	eeb0 7a40 	vmov.f32	s14, s0
 800e152:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800e156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	7b1b      	ldrb	r3, [r3, #12]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d002      	beq.n	800e168 <pll_Control_I+0x134>
 800e162:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e166:	e001      	b.n	800e16c <pll_Control_I+0x138>
 800e168:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e16c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e170:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    pid(signal_I->pid_q, Iphase, signal_I->basic->park_q); /* 电流相位 */
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	699a      	ldr	r2, [r3, #24]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	edd3 7a06 	vldr	s15, [r3, #24]
 800e180:	eef0 0a67 	vmov.f32	s1, s15
 800e184:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 800e188:	4610      	mov	r0, r2
 800e18a:	f7ff fb4c 	bl	800d826 <pid>

    /* 解耦调制 */
    float Uabd = signal_V->basic->park_d - signal_I->pid_d->out + signal_I->basic->park_q * signal_I->basic->omiga0 * signal_I->L;
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	ed93 7a05 	vldr	s14, [r3, #20]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	695b      	ldr	r3, [r3, #20]
 800e19a:	edd3 7a06 	vldr	s15, [r3, #24]
 800e19e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	edd3 6a06 	vldr	s13, [r3, #24]
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	edd3 7a07 	vldr	s15, [r3, #28]
 800e1b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	edd3 7a04 	vldr	s15, [r3, #16]
 800e1bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1c4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    float Uabq = signal_V->basic->park_q - signal_I->pid_q->out - signal_I->basic->park_d * signal_I->basic->omiga0 * signal_I->L;
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	ed93 7a06 	vldr	s14, [r3, #24]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	699b      	ldr	r3, [r3, #24]
 800e1d4:	edd3 7a06 	vldr	s15, [r3, #24]
 800e1d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	edd3 6a05 	vldr	s13, [r3, #20]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	edd3 7a07 	vldr	s15, [r3, #28]
 800e1ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	edd3 7a04 	vldr	s15, [r3, #16]
 800e1f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1fe:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

    /* park逆变换 */
    arm_inv_park_f32(Uabd, Uabq, &signal_I->park_inv_alpha, &signal_I->park_inv_beta, sinTheta, cosTheta);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	1d1a      	adds	r2, r3, #4
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	3308      	adds	r3, #8
 800e20a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e20c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e20e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e210:	6279      	str	r1, [r7, #36]	@ 0x24
 800e212:	623a      	str	r2, [r7, #32]
 800e214:	61fb      	str	r3, [r7, #28]
 800e216:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e218:	61bb      	str	r3, [r7, #24]
 800e21a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e21c:	617b      	str	r3, [r7, #20]
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 800e21e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800e222:	edd7 7a05 	vldr	s15, [r7, #20]
 800e226:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e22a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800e22e:	edd7 7a06 	vldr	s15, [r7, #24]
 800e232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 800e240:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800e244:	edd7 7a06 	vldr	s15, [r7, #24]
 800e248:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e24c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800e250:	edd7 7a05 	vldr	s15, [r7, #20]
 800e254:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	edc3 7a00 	vstr	s15, [r3]
  }
 800e262:	bf00      	nop

    /* 限幅 */
    signal_I->park_inv_alpha = fmaxf(-0.95f, fminf(0.95f, signal_I->park_inv_alpha));
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	edd3 7a01 	vldr	s15, [r3, #4]
 800e26a:	eddf 0a18 	vldr	s1, [pc, #96]	@ 800e2cc <pll_Control_I+0x298>
 800e26e:	eeb0 0a67 	vmov.f32	s0, s15
 800e272:	f003 fbc6 	bl	8011a02 <fminf>
 800e276:	eef0 7a40 	vmov.f32	s15, s0
 800e27a:	eddf 0a15 	vldr	s1, [pc, #84]	@ 800e2d0 <pll_Control_I+0x29c>
 800e27e:	eeb0 0a67 	vmov.f32	s0, s15
 800e282:	f003 fba1 	bl	80119c8 <fmaxf>
 800e286:	eef0 7a40 	vmov.f32	s15, s0
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_I->park_inv_beta = fmaxf(-0.95f, fminf(0.95f, signal_I->park_inv_beta));
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	edd3 7a02 	vldr	s15, [r3, #8]
 800e296:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 800e2cc <pll_Control_I+0x298>
 800e29a:	eeb0 0a67 	vmov.f32	s0, s15
 800e29e:	f003 fbb0 	bl	8011a02 <fminf>
 800e2a2:	eef0 7a40 	vmov.f32	s15, s0
 800e2a6:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 800e2d0 <pll_Control_I+0x29c>
 800e2aa:	eeb0 0a67 	vmov.f32	s0, s15
 800e2ae:	f003 fb8b 	bl	80119c8 <fmaxf>
 800e2b2:	eef0 7a40 	vmov.f32	s15, s0
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800e2bc:	bf00      	nop
 800e2be:	3764      	adds	r7, #100	@ 0x64
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd90      	pop	{r4, r7, pc}
 800e2c4:	3fb4fdf4 	.word	0x3fb4fdf4
 800e2c8:	4107be77 	.word	0x4107be77
 800e2cc:	3f733333 	.word	0x3f733333
 800e2d0:	bf733333 	.word	0xbf733333

0800e2d4 <pll_Sogi>:
 * @brief Sogi变换
 * @param input 输入信号
 * @param sogi sogi指针
 */
static void pll_Sogi(SOGI *sogi, float *input)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
    sogi->alpha[0] = sogi->b0 * input[0] - sogi->b0 * input[2] + sogi->a1 * sogi->alpha[1] + sogi->a2 * sogi->alpha[2];
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	edd3 7a00 	vldr	s15, [r3]
 800e2ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	3308      	adds	r3, #8
 800e2f8:	edd3 7a00 	vldr	s15, [r3]
 800e2fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e300:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	edd3 7a01 	vldr	s15, [r3, #4]
 800e310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e314:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	edd3 7a02 	vldr	s15, [r3, #8]
 800e324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	edc3 7a00 	vstr	s15, [r3]
    sogi->beta[0] = sogi->lamda * sogi->b0 * (input[0] + 2 * input[1] + input[2]) + sogi->a1 * sogi->beta[1] + sogi->a2 * sogi->beta[2];
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	ed93 7a07 	vldr	s14, [r3, #28]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800e33e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	edd3 6a00 	vldr	s13, [r3]
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	3304      	adds	r3, #4
 800e34c:	edd3 7a00 	vldr	s15, [r3]
 800e350:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e354:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	3308      	adds	r3, #8
 800e35c:	edd3 7a00 	vldr	s15, [r3]
 800e360:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e364:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	edd3 7a04 	vldr	s15, [r3, #16]
 800e374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e378:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	edd3 7a05 	vldr	s15, [r3, #20]
 800e388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e38c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	edc3 7a03 	vstr	s15, [r3, #12]

    input[2] = input[1];
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	3308      	adds	r3, #8
 800e39a:	683a      	ldr	r2, [r7, #0]
 800e39c:	6852      	ldr	r2, [r2, #4]
 800e39e:	601a      	str	r2, [r3, #0]
    input[1] = input[0];
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	3304      	adds	r3, #4
 800e3a4:	683a      	ldr	r2, [r7, #0]
 800e3a6:	6812      	ldr	r2, [r2, #0]
 800e3a8:	601a      	str	r2, [r3, #0]
    sogi->alpha[2] = sogi->alpha[1];
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	685a      	ldr	r2, [r3, #4]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	609a      	str	r2, [r3, #8]
    sogi->alpha[1] = sogi->alpha[0];
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	605a      	str	r2, [r3, #4]
    sogi->beta[2] = sogi->beta[1];
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	691a      	ldr	r2, [r3, #16]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	615a      	str	r2, [r3, #20]
    sogi->beta[1] = sogi->beta[0];
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	68da      	ldr	r2, [r3, #12]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	611a      	str	r2, [r3, #16]
}
 800e3ca:	bf00      	nop
 800e3cc:	370c      	adds	r7, #12
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d4:	4770      	bx	lr
	...

0800e3d8 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief    GPIO触发中断
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b084      	sub	sp, #16
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	4603      	mov	r3, r0
 800e3e0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == AD7606_BUSY_Pin)
 800e3e2:	88fb      	ldrh	r3, [r7, #6]
 800e3e4:	2b40      	cmp	r3, #64	@ 0x40
 800e3e6:	d137      	bne.n	800e458 <HAL_GPIO_EXTI_Callback+0x80>
    {
        getVoltageCurrent();     /* 获取电压电流 */
 800e3e8:	f000 f848 	bl	800e47c <getVoltageCurrent>
        calcEffectiveValue();    /* 计算有效值 */
 800e3ec:	f000 f86a 	bl	800e4c4 <calcEffectiveValue>
        normalize();             /* 标幺化 */
 800e3f0:	f000 f8b0 	bl	800e554 <normalize>
        pll_Control_V(signal_V); /* 锁相控制 */
 800e3f4:	4b1a      	ldr	r3, [pc, #104]	@ (800e460 <HAL_GPIO_EXTI_Callback+0x88>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7ff fd7d 	bl	800def8 <pll_Control_V>

        /* 电流内环控制 */
        if (deviceState == RUN)
 800e3fe:	4b19      	ldr	r3, [pc, #100]	@ (800e464 <HAL_GPIO_EXTI_Callback+0x8c>)
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	2b01      	cmp	r3, #1
 800e404:	d10e      	bne.n	800e424 <HAL_GPIO_EXTI_Callback+0x4c>
            pll_Control_I(signal_I, signal_V, Itarget, 1.f);
 800e406:	4b18      	ldr	r3, [pc, #96]	@ (800e468 <HAL_GPIO_EXTI_Callback+0x90>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4a15      	ldr	r2, [pc, #84]	@ (800e460 <HAL_GPIO_EXTI_Callback+0x88>)
 800e40c:	6812      	ldr	r2, [r2, #0]
 800e40e:	4917      	ldr	r1, [pc, #92]	@ (800e46c <HAL_GPIO_EXTI_Callback+0x94>)
 800e410:	edd1 7a00 	vldr	s15, [r1]
 800e414:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800e418:	eeb0 0a67 	vmov.f32	s0, s15
 800e41c:	4611      	mov	r1, r2
 800e41e:	4618      	mov	r0, r3
 800e420:	f7ff fe08 	bl	800e034 <pll_Control_I>

        /* spwm输出 */
        spwmContral();
 800e424:	f000 f8c2 	bl	800e5ac <spwmContral>

        /* DAC输出 */
        /* uint32_t dacValue = (uint32_t)((__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 3000.f) / 3000.f * 2000.f + 2048.f); */
        uint32_t dacValue = (uint32_t)(signal_V->basic->input[0] * 2000.f + 2048.f);
 800e428:	4b0d      	ldr	r3, [pc, #52]	@ (800e460 <HAL_GPIO_EXTI_Callback+0x88>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	edd3 7a00 	vldr	s15, [r3]
 800e432:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800e470 <HAL_GPIO_EXTI_Callback+0x98>
 800e436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e43a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800e474 <HAL_GPIO_EXTI_Callback+0x9c>
 800e43e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e446:	ee17 3a90 	vmov	r3, s15
 800e44a:	60fb      	str	r3, [r7, #12]
        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacValue);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2200      	movs	r2, #0
 800e450:	2100      	movs	r1, #0
 800e452:	4809      	ldr	r0, [pc, #36]	@ (800e478 <HAL_GPIO_EXTI_Callback+0xa0>)
 800e454:	f7f5 f8df 	bl	8003616 <HAL_DAC_SetValue>
    }
}
 800e458:	bf00      	nop
 800e45a:	3710      	adds	r7, #16
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	240052d0 	.word	0x240052d0
 800e464:	24005f5c 	.word	0x24005f5c
 800e468:	240052d4 	.word	0x240052d4
 800e46c:	24005f6c 	.word	0x24005f6c
 800e470:	44fa0000 	.word	0x44fa0000
 800e474:	45000000 	.word	0x45000000
 800e478:	24000284 	.word	0x24000284

0800e47c <getVoltageCurrent>:

/**
 * @brief    获取相电压和电流
 */
static void getVoltageCurrent(void)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b088      	sub	sp, #32
 800e480:	af00      	add	r7, sp, #0
    /* 读取AD7606数据 */
    float adcValue[8] = {0};
 800e482:	463b      	mov	r3, r7
 800e484:	2220      	movs	r2, #32
 800e486:	2100      	movs	r1, #0
 800e488:	4618      	mov	r0, r3
 800e48a:	f001 fa5a 	bl	800f942 <memset>
    ad7606_GetValue(&hspi2, 3, adcValue);
 800e48e:	463b      	mov	r3, r7
 800e490:	461a      	mov	r2, r3
 800e492:	2103      	movs	r1, #3
 800e494:	4808      	ldr	r0, [pc, #32]	@ (800e4b8 <getVoltageCurrent+0x3c>)
 800e496:	f7fe fdf5 	bl	800d084 <ad7606_GetValue>

    /* 处理电流电压数据 */
    signal_V->basic->input[0] = adcValue[1];
 800e49a:	4b08      	ldr	r3, [pc, #32]	@ (800e4bc <getVoltageCurrent+0x40>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	601a      	str	r2, [r3, #0]
    signal_I->basic->input[0] = adcValue[2];
 800e4a4:	4b06      	ldr	r3, [pc, #24]	@ (800e4c0 <getVoltageCurrent+0x44>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	68ba      	ldr	r2, [r7, #8]
 800e4ac:	601a      	str	r2, [r3, #0]
}
 800e4ae:	bf00      	nop
 800e4b0:	3720      	adds	r7, #32
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	2400038c 	.word	0x2400038c
 800e4bc:	240052d0 	.word	0x240052d0
 800e4c0:	240052d4 	.word	0x240052d4

0800e4c4 <calcEffectiveValue>:

/**
 * @brief    计算电压电流有效值
 */
static void calcEffectiveValue(void)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	af00      	add	r7, sp, #0
    volatile static uint16_t cnt = 0;

    static float Vrms[400] = {0};
    static float Irms[400] = {0};

    Vrms[cnt] = signal_V->basic->input[0];
 800e4c8:	4b1d      	ldr	r3, [pc, #116]	@ (800e540 <calcEffectiveValue+0x7c>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	4a1d      	ldr	r2, [pc, #116]	@ (800e544 <calcEffectiveValue+0x80>)
 800e4d0:	8812      	ldrh	r2, [r2, #0]
 800e4d2:	b292      	uxth	r2, r2
 800e4d4:	4610      	mov	r0, r2
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	491b      	ldr	r1, [pc, #108]	@ (800e548 <calcEffectiveValue+0x84>)
 800e4da:	0083      	lsls	r3, r0, #2
 800e4dc:	440b      	add	r3, r1
 800e4de:	601a      	str	r2, [r3, #0]
    Irms[cnt] = signal_I->basic->input[0];
 800e4e0:	4b1a      	ldr	r3, [pc, #104]	@ (800e54c <calcEffectiveValue+0x88>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4a17      	ldr	r2, [pc, #92]	@ (800e544 <calcEffectiveValue+0x80>)
 800e4e8:	8812      	ldrh	r2, [r2, #0]
 800e4ea:	b292      	uxth	r2, r2
 800e4ec:	4610      	mov	r0, r2
 800e4ee:	681a      	ldr	r2, [r3, #0]
 800e4f0:	4917      	ldr	r1, [pc, #92]	@ (800e550 <calcEffectiveValue+0x8c>)
 800e4f2:	0083      	lsls	r3, r0, #2
 800e4f4:	440b      	add	r3, r1
 800e4f6:	601a      	str	r2, [r3, #0]

    if (++cnt == 400)
 800e4f8:	4b12      	ldr	r3, [pc, #72]	@ (800e544 <calcEffectiveValue+0x80>)
 800e4fa:	881b      	ldrh	r3, [r3, #0]
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	3301      	adds	r3, #1
 800e500:	b29b      	uxth	r3, r3
 800e502:	4a10      	ldr	r2, [pc, #64]	@ (800e544 <calcEffectiveValue+0x80>)
 800e504:	4619      	mov	r1, r3
 800e506:	8011      	strh	r1, [r2, #0]
 800e508:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800e50c:	d116      	bne.n	800e53c <calcEffectiveValue+0x78>
    {
        cnt = 0;
 800e50e:	4b0d      	ldr	r3, [pc, #52]	@ (800e544 <calcEffectiveValue+0x80>)
 800e510:	2200      	movs	r2, #0
 800e512:	801a      	strh	r2, [r3, #0]
        arm_rms_f32(Vrms, 400, &signal_V->basic->rms);
 800e514:	4b0a      	ldr	r3, [pc, #40]	@ (800e540 <calcEffectiveValue+0x7c>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	330c      	adds	r3, #12
 800e51c:	461a      	mov	r2, r3
 800e51e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800e522:	4809      	ldr	r0, [pc, #36]	@ (800e548 <calcEffectiveValue+0x84>)
 800e524:	f000 faee 	bl	800eb04 <arm_rms_f32>
        arm_rms_f32(Irms, 400, &signal_I->basic->rms);
 800e528:	4b08      	ldr	r3, [pc, #32]	@ (800e54c <calcEffectiveValue+0x88>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	330c      	adds	r3, #12
 800e530:	461a      	mov	r2, r3
 800e532:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800e536:	4806      	ldr	r0, [pc, #24]	@ (800e550 <calcEffectiveValue+0x8c>)
 800e538:	f000 fae4 	bl	800eb04 <arm_rms_f32>
    }
}
 800e53c:	bf00      	nop
 800e53e:	bd80      	pop	{r7, pc}
 800e540:	240052d0 	.word	0x240052d0
 800e544:	240052d8 	.word	0x240052d8
 800e548:	240052dc 	.word	0x240052dc
 800e54c:	240052d4 	.word	0x240052d4
 800e550:	2400591c 	.word	0x2400591c

0800e554 <normalize>:

/**
 * @brief    标幺化
 */
static void normalize(void)
{
 800e554:	b480      	push	{r7}
 800e556:	af00      	add	r7, sp, #0
    signal_V->basic->input[0] /= Ubase;
 800e558:	4b10      	ldr	r3, [pc, #64]	@ (800e59c <normalize+0x48>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	ed93 7a00 	vldr	s14, [r3]
 800e562:	4b0e      	ldr	r3, [pc, #56]	@ (800e59c <normalize+0x48>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800e5a0 <normalize+0x4c>
 800e56c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e570:	edc3 7a00 	vstr	s15, [r3]
    signal_I->basic->input[0] /= Ibase;
 800e574:	4b0b      	ldr	r3, [pc, #44]	@ (800e5a4 <normalize+0x50>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	ed93 7a00 	vldr	s14, [r3]
 800e57e:	4b09      	ldr	r3, [pc, #36]	@ (800e5a4 <normalize+0x50>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800e5a8 <normalize+0x54>
 800e588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e58c:	edc3 7a00 	vstr	s15, [r3]
}
 800e590:	bf00      	nop
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr
 800e59a:	bf00      	nop
 800e59c:	240052d0 	.word	0x240052d0
 800e5a0:	41a9ae15 	.word	0x41a9ae15
 800e5a4:	240052d4 	.word	0x240052d4
 800e5a8:	4107be77 	.word	0x4107be77

0800e5ac <spwmContral>:
/**
 * @brief    spwm控制
 * @return
 */
static void spwmContral(void)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	af00      	add	r7, sp, #0
    // 调节SPWM占空比
    if (signal_I->park_inv_alpha > 0)
 800e5b0:	4b1b      	ldr	r3, [pc, #108]	@ (800e620 <spwmContral+0x74>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	edd3 7a01 	vldr	s15, [r3, #4]
 800e5b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5c0:	dd13      	ble.n	800e5ea <spwmContral+0x3e>
    {
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, signal_I->park_inv_alpha * (TIM_PERIOD - 1.f));
 800e5c2:	4b17      	ldr	r3, [pc, #92]	@ (800e620 <spwmContral+0x74>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	edd3 7a01 	vldr	s15, [r3, #4]
 800e5ca:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800e624 <spwmContral+0x78>
 800e5ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e5d2:	4b15      	ldr	r3, [pc, #84]	@ (800e628 <spwmContral+0x7c>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e5da:	ee17 2a90 	vmov	r2, s15
 800e5de:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 800e5e0:	4b11      	ldr	r3, [pc, #68]	@ (800e628 <spwmContral+0x7c>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	639a      	str	r2, [r3, #56]	@ 0x38
    else
    {
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, -signal_I->park_inv_alpha * (TIM_PERIOD - 1.f));
    }
}
 800e5e8:	e014      	b.n	800e614 <spwmContral+0x68>
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 800e5ea:	4b0f      	ldr	r3, [pc, #60]	@ (800e628 <spwmContral+0x7c>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, -signal_I->park_inv_alpha * (TIM_PERIOD - 1.f));
 800e5f2:	4b0b      	ldr	r3, [pc, #44]	@ (800e620 <spwmContral+0x74>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	edd3 7a01 	vldr	s15, [r3, #4]
 800e5fa:	eef1 7a67 	vneg.f32	s15, s15
 800e5fe:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800e624 <spwmContral+0x78>
 800e602:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e606:	4b08      	ldr	r3, [pc, #32]	@ (800e628 <spwmContral+0x7c>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e60e:	ee17 2a90 	vmov	r2, s15
 800e612:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800e614:	bf00      	nop
 800e616:	46bd      	mov	sp, r7
 800e618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61c:	4770      	bx	lr
 800e61e:	bf00      	nop
 800e620:	240052d4 	.word	0x240052d4
 800e624:	45bb7800 	.word	0x45bb7800
 800e628:	240004b0 	.word	0x240004b0

0800e62c <UserInit>:
static float Idc = 0.0f;            /* 直流电流 */
static float Utarget = 40.0f;       /* 目标直流电压 */
float Itarget = 0.0f;               /* 电流参考值 */

void UserInit(void)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	af00      	add	r7, sp, #0
    ad7606_Init();
 800e630:	f7fe fc8a 	bl	800cf48 <ad7606_Init>
    OLED_Init();
 800e634:	f7ff f83e 	bl	800d6b4 <OLED_Init>
    pll_Init_V(&signal_V, 50, 20000);
 800e638:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800e63c:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800e670 <UserInit+0x44>
 800e640:	480c      	ldr	r0, [pc, #48]	@ (800e674 <UserInit+0x48>)
 800e642:	f7ff f965 	bl	800d910 <pll_Init_V>
    pll_Init_I(&signal_I, 50, 20000);
 800e646:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800e64a:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800e670 <UserInit+0x44>
 800e64e:	480a      	ldr	r0, [pc, #40]	@ (800e678 <UserInit+0x4c>)
 800e650:	f7ff fad4 	bl	800dbfc <pll_Init_I>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800e654:	2100      	movs	r1, #0
 800e656:	4809      	ldr	r0, [pc, #36]	@ (800e67c <UserInit+0x50>)
 800e658:	f7fa fd00 	bl	800905c <HAL_TIM_PWM_Start>
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800e65c:	2100      	movs	r1, #0
 800e65e:	4808      	ldr	r0, [pc, #32]	@ (800e680 <UserInit+0x54>)
 800e660:	f7f4 ff2c 	bl	80034bc <HAL_DAC_Start>
    ad7606_Start(&htim2, TIM_CHANNEL_1);
 800e664:	2100      	movs	r1, #0
 800e666:	4807      	ldr	r0, [pc, #28]	@ (800e684 <UserInit+0x58>)
 800e668:	f7fe fca8 	bl	800cfbc <ad7606_Start>
}
 800e66c:	bf00      	nop
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	42480000 	.word	0x42480000
 800e674:	240052d0 	.word	0x240052d0
 800e678:	240052d4 	.word	0x240052d4
 800e67c:	240004b0 	.word	0x240004b0
 800e680:	24000284 	.word	0x24000284
 800e684:	24000464 	.word	0x24000464

0800e688 <StartStateLED>:
 * @brief    状态指示灯控制
 * @param    *argument
 * @return
 */
void StartStateLED(void *argument)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN stateLED */
    /* Infinite loop */
    for (;;)
    {
        switch (deviceState)
 800e690:	4b20      	ldr	r3, [pc, #128]	@ (800e714 <StartStateLED+0x8c>)
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	2b02      	cmp	r3, #2
 800e696:	d032      	beq.n	800e6fe <StartStateLED+0x76>
 800e698:	2b02      	cmp	r3, #2
 800e69a:	dc38      	bgt.n	800e70e <StartStateLED+0x86>
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d002      	beq.n	800e6a6 <StartStateLED+0x1e>
 800e6a0:	2b01      	cmp	r3, #1
 800e6a2:	d006      	beq.n	800e6b2 <StartStateLED+0x2a>
        case FAULT: /* 保护状态 */
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
            osDelay(100);
            break;
        default:
            break;
 800e6a4:	e033      	b.n	800e70e <StartStateLED+0x86>
            HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	2101      	movs	r1, #1
 800e6aa:	481b      	ldr	r0, [pc, #108]	@ (800e718 <StartStateLED+0x90>)
 800e6ac:	f7f5 fae4 	bl	8003c78 <HAL_GPIO_WritePin>
            break;
 800e6b0:	e02e      	b.n	800e710 <StartStateLED+0x88>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800e6b2:	2101      	movs	r1, #1
 800e6b4:	4818      	ldr	r0, [pc, #96]	@ (800e718 <StartStateLED+0x90>)
 800e6b6:	f7f5 faf8 	bl	8003caa <HAL_GPIO_TogglePin>
            osDelay(100);
 800e6ba:	2064      	movs	r0, #100	@ 0x64
 800e6bc:	f7fb ffa2 	bl	800a604 <osDelay>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800e6c0:	2101      	movs	r1, #1
 800e6c2:	4815      	ldr	r0, [pc, #84]	@ (800e718 <StartStateLED+0x90>)
 800e6c4:	f7f5 faf1 	bl	8003caa <HAL_GPIO_TogglePin>
            osDelay(200);
 800e6c8:	20c8      	movs	r0, #200	@ 0xc8
 800e6ca:	f7fb ff9b 	bl	800a604 <osDelay>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800e6ce:	2101      	movs	r1, #1
 800e6d0:	4811      	ldr	r0, [pc, #68]	@ (800e718 <StartStateLED+0x90>)
 800e6d2:	f7f5 faea 	bl	8003caa <HAL_GPIO_TogglePin>
            osDelay(100);
 800e6d6:	2064      	movs	r0, #100	@ 0x64
 800e6d8:	f7fb ff94 	bl	800a604 <osDelay>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800e6dc:	2101      	movs	r1, #1
 800e6de:	480e      	ldr	r0, [pc, #56]	@ (800e718 <StartStateLED+0x90>)
 800e6e0:	f7f5 fae3 	bl	8003caa <HAL_GPIO_TogglePin>
            osDelay(200);
 800e6e4:	20c8      	movs	r0, #200	@ 0xc8
 800e6e6:	f7fb ff8d 	bl	800a604 <osDelay>
            HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	2101      	movs	r1, #1
 800e6ee:	480a      	ldr	r0, [pc, #40]	@ (800e718 <StartStateLED+0x90>)
 800e6f0:	f7f5 fac2 	bl	8003c78 <HAL_GPIO_WritePin>
            osDelay(1000);
 800e6f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e6f8:	f7fb ff84 	bl	800a604 <osDelay>
            break;
 800e6fc:	e008      	b.n	800e710 <StartStateLED+0x88>
            HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800e6fe:	2101      	movs	r1, #1
 800e700:	4805      	ldr	r0, [pc, #20]	@ (800e718 <StartStateLED+0x90>)
 800e702:	f7f5 fad2 	bl	8003caa <HAL_GPIO_TogglePin>
            osDelay(100);
 800e706:	2064      	movs	r0, #100	@ 0x64
 800e708:	f7fb ff7c 	bl	800a604 <osDelay>
            break;
 800e70c:	e000      	b.n	800e710 <StartStateLED+0x88>
            break;
 800e70e:	bf00      	nop
        switch (deviceState)
 800e710:	e7be      	b.n	800e690 <StartStateLED+0x8>
 800e712:	bf00      	nop
 800e714:	24005f5c 	.word	0x24005f5c
 800e718:	58022000 	.word	0x58022000
 800e71c:	00000000 	.word	0x00000000

0800e720 <StartMcuTemperature>:
 * @brief    芯片温度读取
 * @param    *argument
 * @return
 */
void StartMcuTemperature(void *argument)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN mcuTemperature */
    HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED, ADC_CALIB_OFFSET);
 800e728:	2200      	movs	r2, #0
 800e72a:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800e72e:	4822      	ldr	r0, [pc, #136]	@ (800e7b8 <StartMcuTemperature+0x98>)
 800e730:	f7f4 fce6 	bl	8003100 <HAL_ADCEx_Calibration_Start>
    HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED, ADC_CALIB_OFFSET_LINEARITY);
 800e734:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800e738:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800e73c:	481e      	ldr	r0, [pc, #120]	@ (800e7b8 <StartMcuTemperature+0x98>)
 800e73e:	f7f4 fcdf 	bl	8003100 <HAL_ADCEx_Calibration_Start>
    // /* Infinite loop */
    for (;;)
    {
        HAL_ADC_Start(&hadc3);
 800e742:	481d      	ldr	r0, [pc, #116]	@ (800e7b8 <StartMcuTemperature+0x98>)
 800e744:	f7f3 fd8c 	bl	8002260 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc3, 1000) == HAL_OK) /* 判断是否转换完成 */
 800e748:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e74c:	481a      	ldr	r0, [pc, #104]	@ (800e7b8 <StartMcuTemperature+0x98>)
 800e74e:	f7f3 fe51 	bl	80023f4 <HAL_ADC_PollForConversion>
 800e752:	4603      	mov	r3, r0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d125      	bne.n	800e7a4 <StartMcuTemperature+0x84>
        {
            uint16_t temprature = HAL_ADC_GetValue(&hadc3); /* 读出转换结果 */
 800e758:	4817      	ldr	r0, [pc, #92]	@ (800e7b8 <StartMcuTemperature+0x98>)
 800e75a:	f7f3 ff3f 	bl	80025dc <HAL_ADC_GetValue>
 800e75e:	4603      	mov	r3, r0
 800e760:	81fb      	strh	r3, [r7, #14]
            mcuTemperature = ((110.0 - 30.0) / (*(unsigned short *)(0x1FF1E840) - *(unsigned short *)(0x1FF1E820))) * (temprature - *(unsigned short *)(0x1FF1E820)) + 30;
 800e762:	4b16      	ldr	r3, [pc, #88]	@ (800e7bc <StartMcuTemperature+0x9c>)
 800e764:	881b      	ldrh	r3, [r3, #0]
 800e766:	461a      	mov	r2, r3
 800e768:	4b15      	ldr	r3, [pc, #84]	@ (800e7c0 <StartMcuTemperature+0xa0>)
 800e76a:	881b      	ldrh	r3, [r3, #0]
 800e76c:	1ad3      	subs	r3, r2, r3
 800e76e:	ee07 3a90 	vmov	s15, r3
 800e772:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e776:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 800e7b0 <StartMcuTemperature+0x90>
 800e77a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800e77e:	89fb      	ldrh	r3, [r7, #14]
 800e780:	4a0f      	ldr	r2, [pc, #60]	@ (800e7c0 <StartMcuTemperature+0xa0>)
 800e782:	8812      	ldrh	r2, [r2, #0]
 800e784:	1a9b      	subs	r3, r3, r2
 800e786:	ee07 3a90 	vmov	s15, r3
 800e78a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e78e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e792:	eeb3 6b0e 	vmov.f64	d6, #62	@ 0x41f00000  30.0
 800e796:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e79a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e79e:	4b09      	ldr	r3, [pc, #36]	@ (800e7c4 <StartMcuTemperature+0xa4>)
 800e7a0:	edc3 7a00 	vstr	s15, [r3]
        }
        osDelay(500);
 800e7a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800e7a8:	f7fb ff2c 	bl	800a604 <osDelay>
        HAL_ADC_Start(&hadc3);
 800e7ac:	e7c9      	b.n	800e742 <StartMcuTemperature+0x22>
 800e7ae:	bf00      	nop
 800e7b0:	00000000 	.word	0x00000000
 800e7b4:	40540000 	.word	0x40540000
 800e7b8:	24000220 	.word	0x24000220
 800e7bc:	1ff1e840 	.word	0x1ff1e840
 800e7c0:	1ff1e820 	.word	0x1ff1e820
 800e7c4:	24005f60 	.word	0x24005f60

0800e7c8 <StartOledDisplay>:
 * @brief    OLED显示控制
 * @param    *argument
 * @return
 */
void StartOledDisplay(void *argument)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b090      	sub	sp, #64	@ 0x40
 800e7cc:	af04      	add	r7, sp, #16
 800e7ce:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN oledDisplay */
    /* Infinite loop */
    for (;;)
    {
        char oledBuffer[22] = {0};
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	60fb      	str	r3, [r7, #12]
 800e7d4:	f107 0310 	add.w	r3, r7, #16
 800e7d8:	2200      	movs	r2, #0
 800e7da:	601a      	str	r2, [r3, #0]
 800e7dc:	605a      	str	r2, [r3, #4]
 800e7de:	609a      	str	r2, [r3, #8]
 800e7e0:	60da      	str	r2, [r3, #12]
 800e7e2:	821a      	strh	r2, [r3, #16]
        float Uac = signal_V->basic->rms;
 800e7e4:	4b38      	ldr	r3, [pc, #224]	@ (800e8c8 <StartOledDisplay+0x100>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
        float Iac = signal_I->basic->rms;
 800e7ee:	4b37      	ldr	r3, [pc, #220]	@ (800e8cc <StartOledDisplay+0x104>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	68db      	ldr	r3, [r3, #12]
 800e7f6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* 显示直流电压电流 */
        snprintf(oledBuffer, sizeof(oledBuffer), "Udc:%5.2fV Idc:%4.2fA", Udc, Idc);
 800e7f8:	4b35      	ldr	r3, [pc, #212]	@ (800e8d0 <StartOledDisplay+0x108>)
 800e7fa:	edd3 7a00 	vldr	s15, [r3]
 800e7fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e802:	4b34      	ldr	r3, [pc, #208]	@ (800e8d4 <StartOledDisplay+0x10c>)
 800e804:	edd3 6a00 	vldr	s13, [r3]
 800e808:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800e80c:	f107 030c 	add.w	r3, r7, #12
 800e810:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e814:	ed8d 7b00 	vstr	d7, [sp]
 800e818:	4a2f      	ldr	r2, [pc, #188]	@ (800e8d8 <StartOledDisplay+0x110>)
 800e81a:	2116      	movs	r1, #22
 800e81c:	4618      	mov	r0, r3
 800e81e:	f001 f819 	bl	800f854 <sniprintf>
        OLED_ShowString(0, 0, (uint8_t *)oledBuffer, 12);
 800e822:	f107 020c 	add.w	r2, r7, #12
 800e826:	230c      	movs	r3, #12
 800e828:	2100      	movs	r1, #0
 800e82a:	2000      	movs	r0, #0
 800e82c:	f7fe ff0e 	bl	800d64c <OLED_ShowString>

        /* 显示交流电压电流 */
        snprintf(oledBuffer, sizeof(oledBuffer), "Uac:%5.2fV Iac:%4.2fA", Uac, Iac);
 800e830:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800e834:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e838:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800e83c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800e840:	f107 030c 	add.w	r3, r7, #12
 800e844:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e848:	ed8d 7b00 	vstr	d7, [sp]
 800e84c:	4a23      	ldr	r2, [pc, #140]	@ (800e8dc <StartOledDisplay+0x114>)
 800e84e:	2116      	movs	r1, #22
 800e850:	4618      	mov	r0, r3
 800e852:	f000 ffff 	bl	800f854 <sniprintf>
        OLED_ShowString(0, 12, (uint8_t *)oledBuffer, 12);
 800e856:	f107 020c 	add.w	r2, r7, #12
 800e85a:	230c      	movs	r3, #12
 800e85c:	210c      	movs	r1, #12
 800e85e:	2000      	movs	r0, #0
 800e860:	f7fe fef4 	bl	800d64c <OLED_ShowString>

        /* 显示设备状态和温度 */
        const char *stateText;
        switch (deviceState)
 800e864:	4b1e      	ldr	r3, [pc, #120]	@ (800e8e0 <StartOledDisplay+0x118>)
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	2b02      	cmp	r3, #2
 800e86a:	d00c      	beq.n	800e886 <StartOledDisplay+0xbe>
 800e86c:	2b02      	cmp	r3, #2
 800e86e:	dc0d      	bgt.n	800e88c <StartOledDisplay+0xc4>
 800e870:	2b00      	cmp	r3, #0
 800e872:	d002      	beq.n	800e87a <StartOledDisplay+0xb2>
 800e874:	2b01      	cmp	r3, #1
 800e876:	d003      	beq.n	800e880 <StartOledDisplay+0xb8>
 800e878:	e008      	b.n	800e88c <StartOledDisplay+0xc4>
        {
        case START:
            stateText = "START";
 800e87a:	4b1a      	ldr	r3, [pc, #104]	@ (800e8e4 <StartOledDisplay+0x11c>)
 800e87c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800e87e:	e008      	b.n	800e892 <StartOledDisplay+0xca>
        case RUN:
            stateText = "RUN";
 800e880:	4b19      	ldr	r3, [pc, #100]	@ (800e8e8 <StartOledDisplay+0x120>)
 800e882:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800e884:	e005      	b.n	800e892 <StartOledDisplay+0xca>
        case FAULT:
            stateText = "FAULT";
 800e886:	4b19      	ldr	r3, [pc, #100]	@ (800e8ec <StartOledDisplay+0x124>)
 800e888:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800e88a:	e002      	b.n	800e892 <StartOledDisplay+0xca>
        default:
            stateText = "UNKNOWN";
 800e88c:	4b18      	ldr	r3, [pc, #96]	@ (800e8f0 <StartOledDisplay+0x128>)
 800e88e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800e890:	bf00      	nop
        }
        snprintf(oledBuffer, sizeof(oledBuffer), "%s     T:%5.2fC", stateText, mcuTemperature);
 800e892:	4b18      	ldr	r3, [pc, #96]	@ (800e8f4 <StartOledDisplay+0x12c>)
 800e894:	edd3 7a00 	vldr	s15, [r3]
 800e898:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e89c:	f107 000c 	add.w	r0, r7, #12
 800e8a0:	ed8d 7b00 	vstr	d7, [sp]
 800e8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8a6:	4a14      	ldr	r2, [pc, #80]	@ (800e8f8 <StartOledDisplay+0x130>)
 800e8a8:	2116      	movs	r1, #22
 800e8aa:	f000 ffd3 	bl	800f854 <sniprintf>
        OLED_ShowString(0, 48, (uint8_t *)oledBuffer, 12);
 800e8ae:	f107 020c 	add.w	r2, r7, #12
 800e8b2:	230c      	movs	r3, #12
 800e8b4:	2130      	movs	r1, #48	@ 0x30
 800e8b6:	2000      	movs	r0, #0
 800e8b8:	f7fe fec8 	bl	800d64c <OLED_ShowString>

        /* 刷新显示 */
        OLED_Refresh();
 800e8bc:	f7fe fd56 	bl	800d36c <OLED_Refresh>
        osDelay(100);
 800e8c0:	2064      	movs	r0, #100	@ 0x64
 800e8c2:	f7fb fe9f 	bl	800a604 <osDelay>
    {
 800e8c6:	e783      	b.n	800e7d0 <StartOledDisplay+0x8>
 800e8c8:	240052d0 	.word	0x240052d0
 800e8cc:	240052d4 	.word	0x240052d4
 800e8d0:	24005f64 	.word	0x24005f64
 800e8d4:	24005f68 	.word	0x24005f68
 800e8d8:	08011ee8 	.word	0x08011ee8
 800e8dc:	08011f00 	.word	0x08011f00
 800e8e0:	24005f5c 	.word	0x24005f5c
 800e8e4:	08011f18 	.word	0x08011f18
 800e8e8:	08011f20 	.word	0x08011f20
 800e8ec:	08011f24 	.word	0x08011f24
 800e8f0:	08011f2c 	.word	0x08011f2c
 800e8f4:	24005f60 	.word	0x24005f60
 800e8f8:	08011f34 	.word	0x08011f34

0800e8fc <StartDCSampling>:
 * @brief    直流采样
 * @param    *argument
 * @return
 */
void StartDCSampling(void *argument)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
    static const INA228_Handle INA228_0 = &INA228_0_state;

    /* Infinite loop */
    for (;;)
    {
        Udc = INA228_getVBUS_V(INA228_0);
 800e904:	4b0c      	ldr	r3, [pc, #48]	@ (800e938 <StartDCSampling+0x3c>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	4618      	mov	r0, r3
 800e90a:	f7fe fc59 	bl	800d1c0 <INA228_getVBUS_V>
 800e90e:	eef0 7a40 	vmov.f32	s15, s0
 800e912:	4b0a      	ldr	r3, [pc, #40]	@ (800e93c <StartDCSampling+0x40>)
 800e914:	edc3 7a00 	vstr	s15, [r3]
        Idc = INA228_getCURRENT_A(INA228_0);
 800e918:	4b07      	ldr	r3, [pc, #28]	@ (800e938 <StartDCSampling+0x3c>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7fe fcd3 	bl	800d2c8 <INA228_getCURRENT_A>
 800e922:	eef0 7a40 	vmov.f32	s15, s0
 800e926:	4b06      	ldr	r3, [pc, #24]	@ (800e940 <StartDCSampling+0x44>)
 800e928:	edc3 7a00 	vstr	s15, [r3]
        osDelay(10);
 800e92c:	200a      	movs	r0, #10
 800e92e:	f7fb fe69 	bl	800a604 <osDelay>
        Udc = INA228_getVBUS_V(INA228_0);
 800e932:	bf00      	nop
 800e934:	e7e6      	b.n	800e904 <StartDCSampling+0x8>
 800e936:	bf00      	nop
 800e938:	0801382c 	.word	0x0801382c
 800e93c:	24005f64 	.word	0x24005f64
 800e940:	24005f68 	.word	0x24005f68

0800e944 <StartCircuitProtection>:
 * @brief    电路保护控制
 * @param    *argument
 * @return
 */
void StartCircuitProtection(void *argument)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN circuitProtection */
    /* Infinite loop */
    for (;;)
    {
        float Uac = signal_V->basic->rms;
 800e94c:	4b4a      	ldr	r3, [pc, #296]	@ (800ea78 <StartCircuitProtection+0x134>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	68db      	ldr	r3, [r3, #12]
 800e954:	60fb      	str	r3, [r7, #12]
        float Iac = signal_I->basic->rms;
 800e956:	4b49      	ldr	r3, [pc, #292]	@ (800ea7c <StartCircuitProtection+0x138>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	68db      	ldr	r3, [r3, #12]
 800e95e:	60bb      	str	r3, [r7, #8]
        if (Udc > protection_Udc || fabsf(Idc) > protection_Idc || Uac > protection_Uac || Iac > protection_Iac)
 800e960:	4b47      	ldr	r3, [pc, #284]	@ (800ea80 <StartCircuitProtection+0x13c>)
 800e962:	edd3 7a00 	vldr	s15, [r3]
 800e966:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800ea84 <StartCircuitProtection+0x140>
 800e96a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e972:	dc1d      	bgt.n	800e9b0 <StartCircuitProtection+0x6c>
 800e974:	4b44      	ldr	r3, [pc, #272]	@ (800ea88 <StartCircuitProtection+0x144>)
 800e976:	edd3 7a00 	vldr	s15, [r3]
 800e97a:	eef0 7ae7 	vabs.f32	s15, s15
 800e97e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800e982:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e98a:	dc11      	bgt.n	800e9b0 <StartCircuitProtection+0x6c>
 800e98c:	edd7 7a03 	vldr	s15, [r7, #12]
 800e990:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800e994:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e99c:	dc08      	bgt.n	800e9b0 <StartCircuitProtection+0x6c>
 800e99e:	edd7 7a02 	vldr	s15, [r7, #8]
 800e9a2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800e9a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ae:	dd09      	ble.n	800e9c4 <StartCircuitProtection+0x80>
        {
            deviceState = FAULT;
 800e9b0:	4b36      	ldr	r3, [pc, #216]	@ (800ea8c <StartCircuitProtection+0x148>)
 800e9b2:	2202      	movs	r2, #2
 800e9b4:	701a      	strb	r2, [r3, #0]

            HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_RESET); /* 关闭输出 */
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e9bc:	4834      	ldr	r0, [pc, #208]	@ (800ea90 <StartCircuitProtection+0x14c>)
 800e9be:	f7f5 f95b 	bl	8003c78 <HAL_GPIO_WritePin>
 800e9c2:	e054      	b.n	800ea6e <StartCircuitProtection+0x12a>
        }
        else if (deviceState == START && Uac > 10.f && Iac > 0.5f && fabsf(signal_V->basic->park_q) < 0.02f)
 800e9c4:	4b31      	ldr	r3, [pc, #196]	@ (800ea8c <StartCircuitProtection+0x148>)
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d150      	bne.n	800ea6e <StartCircuitProtection+0x12a>
 800e9cc:	edd7 7a03 	vldr	s15, [r7, #12]
 800e9d0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800e9d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e9d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9dc:	dd47      	ble.n	800ea6e <StartCircuitProtection+0x12a>
 800e9de:	edd7 7a02 	vldr	s15, [r7, #8]
 800e9e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e9e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ee:	dd3e      	ble.n	800ea6e <StartCircuitProtection+0x12a>
 800e9f0:	4b21      	ldr	r3, [pc, #132]	@ (800ea78 <StartCircuitProtection+0x134>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	edd3 7a06 	vldr	s15, [r3, #24]
 800e9fa:	eef0 7ae7 	vabs.f32	s15, s15
 800e9fe:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800ea94 <StartCircuitProtection+0x150>
 800ea02:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ea06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea0a:	d530      	bpl.n	800ea6e <StartCircuitProtection+0x12a>
        {
            osDelay(500); /* 防止误判 */
 800ea0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ea10:	f7fb fdf8 	bl	800a604 <osDelay>
            if (deviceState == START && Uac > 10.f && Iac > 0.5f && fabsf(signal_V->basic->park_q) < 0.02f)
 800ea14:	4b1d      	ldr	r3, [pc, #116]	@ (800ea8c <StartCircuitProtection+0x148>)
 800ea16:	781b      	ldrb	r3, [r3, #0]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d128      	bne.n	800ea6e <StartCircuitProtection+0x12a>
 800ea1c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ea20:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800ea24:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ea28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea2c:	dd1f      	ble.n	800ea6e <StartCircuitProtection+0x12a>
 800ea2e:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea32:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ea36:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ea3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea3e:	dd16      	ble.n	800ea6e <StartCircuitProtection+0x12a>
 800ea40:	4b0d      	ldr	r3, [pc, #52]	@ (800ea78 <StartCircuitProtection+0x134>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	edd3 7a06 	vldr	s15, [r3, #24]
 800ea4a:	eef0 7ae7 	vabs.f32	s15, s15
 800ea4e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800ea94 <StartCircuitProtection+0x150>
 800ea52:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ea56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea5a:	d508      	bpl.n	800ea6e <StartCircuitProtection+0x12a>
            {
                deviceState = RUN;
 800ea5c:	4b0b      	ldr	r3, [pc, #44]	@ (800ea8c <StartCircuitProtection+0x148>)
 800ea5e:	2201      	movs	r2, #1
 800ea60:	701a      	strb	r2, [r3, #0]

                HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_SET); /* 打开输出 */
 800ea62:	2201      	movs	r2, #1
 800ea64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ea68:	4809      	ldr	r0, [pc, #36]	@ (800ea90 <StartCircuitProtection+0x14c>)
 800ea6a:	f7f5 f905 	bl	8003c78 <HAL_GPIO_WritePin>
            }
        }
        osDelay(10);
 800ea6e:	200a      	movs	r0, #10
 800ea70:	f7fb fdc8 	bl	800a604 <osDelay>
    {
 800ea74:	e76a      	b.n	800e94c <StartCircuitProtection+0x8>
 800ea76:	bf00      	nop
 800ea78:	240052d0 	.word	0x240052d0
 800ea7c:	240052d4 	.word	0x240052d4
 800ea80:	24005f64 	.word	0x24005f64
 800ea84:	42b40000 	.word	0x42b40000
 800ea88:	24005f68 	.word	0x24005f68
 800ea8c:	24005f5c 	.word	0x24005f5c
 800ea90:	58020000 	.word	0x58020000
 800ea94:	3ca3d70a 	.word	0x3ca3d70a

0800ea98 <StartDCControl>:
 * @brief    直流电压控制
 * @param    *argument
 * @return
 */
void StartDCControl(void *argument)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN dcControl */
    static PID pidDCV;
    pid_Init(&pidDCV, 0.1f, 0.01f, 0, 2.5f, 0.5f);
 800eaa0:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800eaa4:	eef0 1a04 	vmov.f32	s3, #4	@ 0x40200000  2.5
 800eaa8:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 800eae8 <StartDCControl+0x50>
 800eaac:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 800eaec <StartDCControl+0x54>
 800eab0:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800eaf0 <StartDCControl+0x58>
 800eab4:	480f      	ldr	r0, [pc, #60]	@ (800eaf4 <StartDCControl+0x5c>)
 800eab6:	f7fe fe83 	bl	800d7c0 <pid_Init>
    /* Infinite loop */
    for (;;)
    {
        pid(&pidDCV, Utarget, Udc);
 800eaba:	4b0f      	ldr	r3, [pc, #60]	@ (800eaf8 <StartDCControl+0x60>)
 800eabc:	edd3 7a00 	vldr	s15, [r3]
 800eac0:	4b0e      	ldr	r3, [pc, #56]	@ (800eafc <StartDCControl+0x64>)
 800eac2:	ed93 7a00 	vldr	s14, [r3]
 800eac6:	eef0 0a47 	vmov.f32	s1, s14
 800eaca:	eeb0 0a67 	vmov.f32	s0, s15
 800eace:	4809      	ldr	r0, [pc, #36]	@ (800eaf4 <StartDCControl+0x5c>)
 800ead0:	f7fe fea9 	bl	800d826 <pid>
        Itarget = pidDCV.out;
 800ead4:	4b07      	ldr	r3, [pc, #28]	@ (800eaf4 <StartDCControl+0x5c>)
 800ead6:	699b      	ldr	r3, [r3, #24]
 800ead8:	4a09      	ldr	r2, [pc, #36]	@ (800eb00 <StartDCControl+0x68>)
 800eada:	6013      	str	r3, [r2, #0]
        osDelay(20);
 800eadc:	2014      	movs	r0, #20
 800eade:	f7fb fd91 	bl	800a604 <osDelay>
        pid(&pidDCV, Utarget, Udc);
 800eae2:	bf00      	nop
 800eae4:	e7e9      	b.n	800eaba <StartDCControl+0x22>
 800eae6:	bf00      	nop
 800eae8:	00000000 	.word	0x00000000
 800eaec:	3c23d70a 	.word	0x3c23d70a
 800eaf0:	3dcccccd 	.word	0x3dcccccd
 800eaf4:	24005f70 	.word	0x24005f70
 800eaf8:	24000014 	.word	0x24000014
 800eafc:	24005f64 	.word	0x24005f64
 800eb00:	24005f6c 	.word	0x24005f6c

0800eb04 <arm_rms_f32>:
 800eb04:	b530      	push	{r4, r5, lr}
 800eb06:	088d      	lsrs	r5, r1, #2
 800eb08:	ed2d 8b02 	vpush	{d8}
 800eb0c:	b083      	sub	sp, #12
 800eb0e:	d054      	beq.n	800ebba <arm_rms_f32+0xb6>
 800eb10:	f100 0310 	add.w	r3, r0, #16
 800eb14:	462c      	mov	r4, r5
 800eb16:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800ebd0 <arm_rms_f32+0xcc>
 800eb1a:	ed53 6a04 	vldr	s13, [r3, #-16]
 800eb1e:	3c01      	subs	r4, #1
 800eb20:	ed13 7a03 	vldr	s14, [r3, #-12]
 800eb24:	f103 0310 	add.w	r3, r3, #16
 800eb28:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800eb2c:	ed53 7a06 	vldr	s15, [r3, #-24]	@ 0xffffffe8
 800eb30:	ee27 7a07 	vmul.f32	s14, s14, s14
 800eb34:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 800eb38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eb3c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800eb40:	ee26 6a06 	vmul.f32	s12, s12, s12
 800eb44:	ee37 7a26 	vadd.f32	s14, s14, s13
 800eb48:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eb4c:	ee76 5a27 	vadd.f32	s11, s12, s15
 800eb50:	d1e3      	bne.n	800eb1a <arm_rms_f32+0x16>
 800eb52:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800eb56:	f011 0303 	ands.w	r3, r1, #3
 800eb5a:	d015      	beq.n	800eb88 <arm_rms_f32+0x84>
 800eb5c:	edd0 7a00 	vldr	s15, [r0]
 800eb60:	3b01      	subs	r3, #1
 800eb62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eb66:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800eb6a:	d00d      	beq.n	800eb88 <arm_rms_f32+0x84>
 800eb6c:	edd0 7a01 	vldr	s15, [r0, #4]
 800eb70:	2b01      	cmp	r3, #1
 800eb72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eb76:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800eb7a:	d005      	beq.n	800eb88 <arm_rms_f32+0x84>
 800eb7c:	edd0 7a02 	vldr	s15, [r0, #8]
 800eb80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eb84:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800eb88:	ee07 1a90 	vmov	s15, r1
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb92:	ee85 0aa7 	vdiv.f32	s0, s11, s15
 800eb96:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eb9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb9e:	db0f      	blt.n	800ebc0 <arm_rms_f32+0xbc>
 800eba0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800eba4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800eba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebac:	d40a      	bmi.n	800ebc4 <arm_rms_f32+0xc0>
 800ebae:	ed82 8a00 	vstr	s16, [r2]
 800ebb2:	b003      	add	sp, #12
 800ebb4:	ecbd 8b02 	vpop	{d8}
 800ebb8:	bd30      	pop	{r4, r5, pc}
 800ebba:	eddf 5a05 	vldr	s11, [pc, #20]	@ 800ebd0 <arm_rms_f32+0xcc>
 800ebbe:	e7ca      	b.n	800eb56 <arm_rms_f32+0x52>
 800ebc0:	6013      	str	r3, [r2, #0]
 800ebc2:	e7f6      	b.n	800ebb2 <arm_rms_f32+0xae>
 800ebc4:	9201      	str	r2, [sp, #4]
 800ebc6:	f002 fed3 	bl	8011970 <sqrtf>
 800ebca:	9a01      	ldr	r2, [sp, #4]
 800ebcc:	e7ef      	b.n	800ebae <arm_rms_f32+0xaa>
 800ebce:	bf00      	nop
 800ebd0:	00000000 	.word	0x00000000

0800ebd4 <arm_sin_f32>:
 800ebd4:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800ec54 <arm_sin_f32+0x80>
 800ebd8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ebdc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ebe0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ebe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebe8:	d504      	bpl.n	800ebf4 <arm_sin_f32+0x20>
 800ebea:	ee17 3a90 	vmov	r3, s15
 800ebee:	3b01      	subs	r3, #1
 800ebf0:	ee07 3a90 	vmov	s15, r3
 800ebf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebf8:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800ec58 <arm_sin_f32+0x84>
 800ebfc:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ec00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ec04:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ec08:	ee17 3a10 	vmov	r3, s14
 800ec0c:	b29b      	uxth	r3, r3
 800ec0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec12:	d21a      	bcs.n	800ec4a <arm_sin_f32+0x76>
 800ec14:	ee07 3a10 	vmov	s14, r3
 800ec18:	1c59      	adds	r1, r3, #1
 800ec1a:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800ec1e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ec22:	4a0e      	ldr	r2, [pc, #56]	@ (800ec5c <arm_sin_f32+0x88>)
 800ec24:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ec28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ec2c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ec30:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ec34:	edd3 6a00 	vldr	s13, [r3]
 800ec38:	ed92 7a00 	vldr	s14, [r2]
 800ec3c:	ee20 0a26 	vmul.f32	s0, s0, s13
 800ec40:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec44:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ec48:	4770      	bx	lr
 800ec4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ec4e:	2101      	movs	r1, #1
 800ec50:	2300      	movs	r3, #0
 800ec52:	e7e6      	b.n	800ec22 <arm_sin_f32+0x4e>
 800ec54:	3e22f983 	.word	0x3e22f983
 800ec58:	44000000 	.word	0x44000000
 800ec5c:	08013830 	.word	0x08013830

0800ec60 <arm_cos_f32>:
 800ec60:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800ece8 <arm_cos_f32+0x88>
 800ec64:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800ec68:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ec6c:	ee30 0a07 	vadd.f32	s0, s0, s14
 800ec70:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ec74:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ec78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec7c:	d504      	bpl.n	800ec88 <arm_cos_f32+0x28>
 800ec7e:	ee17 3a90 	vmov	r3, s15
 800ec82:	3b01      	subs	r3, #1
 800ec84:	ee07 3a90 	vmov	s15, r3
 800ec88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec8c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800ecec <arm_cos_f32+0x8c>
 800ec90:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ec94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ec98:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ec9c:	ee17 3a10 	vmov	r3, s14
 800eca0:	b29b      	uxth	r3, r3
 800eca2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eca6:	d21a      	bcs.n	800ecde <arm_cos_f32+0x7e>
 800eca8:	ee07 3a10 	vmov	s14, r3
 800ecac:	1c59      	adds	r1, r3, #1
 800ecae:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800ecb2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ecb6:	4a0e      	ldr	r2, [pc, #56]	@ (800ecf0 <arm_cos_f32+0x90>)
 800ecb8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ecbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ecc0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ecc4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ecc8:	edd3 6a00 	vldr	s13, [r3]
 800eccc:	ed92 7a00 	vldr	s14, [r2]
 800ecd0:	ee20 0a26 	vmul.f32	s0, s0, s13
 800ecd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ecd8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ecdc:	4770      	bx	lr
 800ecde:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ece2:	2101      	movs	r1, #1
 800ece4:	2300      	movs	r3, #0
 800ece6:	e7e6      	b.n	800ecb6 <arm_cos_f32+0x56>
 800ece8:	3e22f983 	.word	0x3e22f983
 800ecec:	44000000 	.word	0x44000000
 800ecf0:	08013830 	.word	0x08013830

0800ecf4 <malloc>:
 800ecf4:	4b02      	ldr	r3, [pc, #8]	@ (800ed00 <malloc+0xc>)
 800ecf6:	4601      	mov	r1, r0
 800ecf8:	6818      	ldr	r0, [r3, #0]
 800ecfa:	f000 b825 	b.w	800ed48 <_malloc_r>
 800ecfe:	bf00      	nop
 800ed00:	24000048 	.word	0x24000048

0800ed04 <sbrk_aligned>:
 800ed04:	b570      	push	{r4, r5, r6, lr}
 800ed06:	4e0f      	ldr	r6, [pc, #60]	@ (800ed44 <sbrk_aligned+0x40>)
 800ed08:	460c      	mov	r4, r1
 800ed0a:	6831      	ldr	r1, [r6, #0]
 800ed0c:	4605      	mov	r5, r0
 800ed0e:	b911      	cbnz	r1, 800ed16 <sbrk_aligned+0x12>
 800ed10:	f000 fe58 	bl	800f9c4 <_sbrk_r>
 800ed14:	6030      	str	r0, [r6, #0]
 800ed16:	4621      	mov	r1, r4
 800ed18:	4628      	mov	r0, r5
 800ed1a:	f000 fe53 	bl	800f9c4 <_sbrk_r>
 800ed1e:	1c43      	adds	r3, r0, #1
 800ed20:	d103      	bne.n	800ed2a <sbrk_aligned+0x26>
 800ed22:	f04f 34ff 	mov.w	r4, #4294967295
 800ed26:	4620      	mov	r0, r4
 800ed28:	bd70      	pop	{r4, r5, r6, pc}
 800ed2a:	1cc4      	adds	r4, r0, #3
 800ed2c:	f024 0403 	bic.w	r4, r4, #3
 800ed30:	42a0      	cmp	r0, r4
 800ed32:	d0f8      	beq.n	800ed26 <sbrk_aligned+0x22>
 800ed34:	1a21      	subs	r1, r4, r0
 800ed36:	4628      	mov	r0, r5
 800ed38:	f000 fe44 	bl	800f9c4 <_sbrk_r>
 800ed3c:	3001      	adds	r0, #1
 800ed3e:	d1f2      	bne.n	800ed26 <sbrk_aligned+0x22>
 800ed40:	e7ef      	b.n	800ed22 <sbrk_aligned+0x1e>
 800ed42:	bf00      	nop
 800ed44:	24005f94 	.word	0x24005f94

0800ed48 <_malloc_r>:
 800ed48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed4c:	1ccd      	adds	r5, r1, #3
 800ed4e:	f025 0503 	bic.w	r5, r5, #3
 800ed52:	3508      	adds	r5, #8
 800ed54:	2d0c      	cmp	r5, #12
 800ed56:	bf38      	it	cc
 800ed58:	250c      	movcc	r5, #12
 800ed5a:	2d00      	cmp	r5, #0
 800ed5c:	4606      	mov	r6, r0
 800ed5e:	db01      	blt.n	800ed64 <_malloc_r+0x1c>
 800ed60:	42a9      	cmp	r1, r5
 800ed62:	d904      	bls.n	800ed6e <_malloc_r+0x26>
 800ed64:	230c      	movs	r3, #12
 800ed66:	6033      	str	r3, [r6, #0]
 800ed68:	2000      	movs	r0, #0
 800ed6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ee44 <_malloc_r+0xfc>
 800ed72:	f000 f869 	bl	800ee48 <__malloc_lock>
 800ed76:	f8d8 3000 	ldr.w	r3, [r8]
 800ed7a:	461c      	mov	r4, r3
 800ed7c:	bb44      	cbnz	r4, 800edd0 <_malloc_r+0x88>
 800ed7e:	4629      	mov	r1, r5
 800ed80:	4630      	mov	r0, r6
 800ed82:	f7ff ffbf 	bl	800ed04 <sbrk_aligned>
 800ed86:	1c43      	adds	r3, r0, #1
 800ed88:	4604      	mov	r4, r0
 800ed8a:	d158      	bne.n	800ee3e <_malloc_r+0xf6>
 800ed8c:	f8d8 4000 	ldr.w	r4, [r8]
 800ed90:	4627      	mov	r7, r4
 800ed92:	2f00      	cmp	r7, #0
 800ed94:	d143      	bne.n	800ee1e <_malloc_r+0xd6>
 800ed96:	2c00      	cmp	r4, #0
 800ed98:	d04b      	beq.n	800ee32 <_malloc_r+0xea>
 800ed9a:	6823      	ldr	r3, [r4, #0]
 800ed9c:	4639      	mov	r1, r7
 800ed9e:	4630      	mov	r0, r6
 800eda0:	eb04 0903 	add.w	r9, r4, r3
 800eda4:	f000 fe0e 	bl	800f9c4 <_sbrk_r>
 800eda8:	4581      	cmp	r9, r0
 800edaa:	d142      	bne.n	800ee32 <_malloc_r+0xea>
 800edac:	6821      	ldr	r1, [r4, #0]
 800edae:	1a6d      	subs	r5, r5, r1
 800edb0:	4629      	mov	r1, r5
 800edb2:	4630      	mov	r0, r6
 800edb4:	f7ff ffa6 	bl	800ed04 <sbrk_aligned>
 800edb8:	3001      	adds	r0, #1
 800edba:	d03a      	beq.n	800ee32 <_malloc_r+0xea>
 800edbc:	6823      	ldr	r3, [r4, #0]
 800edbe:	442b      	add	r3, r5
 800edc0:	6023      	str	r3, [r4, #0]
 800edc2:	f8d8 3000 	ldr.w	r3, [r8]
 800edc6:	685a      	ldr	r2, [r3, #4]
 800edc8:	bb62      	cbnz	r2, 800ee24 <_malloc_r+0xdc>
 800edca:	f8c8 7000 	str.w	r7, [r8]
 800edce:	e00f      	b.n	800edf0 <_malloc_r+0xa8>
 800edd0:	6822      	ldr	r2, [r4, #0]
 800edd2:	1b52      	subs	r2, r2, r5
 800edd4:	d420      	bmi.n	800ee18 <_malloc_r+0xd0>
 800edd6:	2a0b      	cmp	r2, #11
 800edd8:	d917      	bls.n	800ee0a <_malloc_r+0xc2>
 800edda:	1961      	adds	r1, r4, r5
 800eddc:	42a3      	cmp	r3, r4
 800edde:	6025      	str	r5, [r4, #0]
 800ede0:	bf18      	it	ne
 800ede2:	6059      	strne	r1, [r3, #4]
 800ede4:	6863      	ldr	r3, [r4, #4]
 800ede6:	bf08      	it	eq
 800ede8:	f8c8 1000 	streq.w	r1, [r8]
 800edec:	5162      	str	r2, [r4, r5]
 800edee:	604b      	str	r3, [r1, #4]
 800edf0:	4630      	mov	r0, r6
 800edf2:	f000 f82f 	bl	800ee54 <__malloc_unlock>
 800edf6:	f104 000b 	add.w	r0, r4, #11
 800edfa:	1d23      	adds	r3, r4, #4
 800edfc:	f020 0007 	bic.w	r0, r0, #7
 800ee00:	1ac2      	subs	r2, r0, r3
 800ee02:	bf1c      	itt	ne
 800ee04:	1a1b      	subne	r3, r3, r0
 800ee06:	50a3      	strne	r3, [r4, r2]
 800ee08:	e7af      	b.n	800ed6a <_malloc_r+0x22>
 800ee0a:	6862      	ldr	r2, [r4, #4]
 800ee0c:	42a3      	cmp	r3, r4
 800ee0e:	bf0c      	ite	eq
 800ee10:	f8c8 2000 	streq.w	r2, [r8]
 800ee14:	605a      	strne	r2, [r3, #4]
 800ee16:	e7eb      	b.n	800edf0 <_malloc_r+0xa8>
 800ee18:	4623      	mov	r3, r4
 800ee1a:	6864      	ldr	r4, [r4, #4]
 800ee1c:	e7ae      	b.n	800ed7c <_malloc_r+0x34>
 800ee1e:	463c      	mov	r4, r7
 800ee20:	687f      	ldr	r7, [r7, #4]
 800ee22:	e7b6      	b.n	800ed92 <_malloc_r+0x4a>
 800ee24:	461a      	mov	r2, r3
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	42a3      	cmp	r3, r4
 800ee2a:	d1fb      	bne.n	800ee24 <_malloc_r+0xdc>
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	6053      	str	r3, [r2, #4]
 800ee30:	e7de      	b.n	800edf0 <_malloc_r+0xa8>
 800ee32:	230c      	movs	r3, #12
 800ee34:	6033      	str	r3, [r6, #0]
 800ee36:	4630      	mov	r0, r6
 800ee38:	f000 f80c 	bl	800ee54 <__malloc_unlock>
 800ee3c:	e794      	b.n	800ed68 <_malloc_r+0x20>
 800ee3e:	6005      	str	r5, [r0, #0]
 800ee40:	e7d6      	b.n	800edf0 <_malloc_r+0xa8>
 800ee42:	bf00      	nop
 800ee44:	24005f98 	.word	0x24005f98

0800ee48 <__malloc_lock>:
 800ee48:	4801      	ldr	r0, [pc, #4]	@ (800ee50 <__malloc_lock+0x8>)
 800ee4a:	f000 be08 	b.w	800fa5e <__retarget_lock_acquire_recursive>
 800ee4e:	bf00      	nop
 800ee50:	240060dc 	.word	0x240060dc

0800ee54 <__malloc_unlock>:
 800ee54:	4801      	ldr	r0, [pc, #4]	@ (800ee5c <__malloc_unlock+0x8>)
 800ee56:	f000 be03 	b.w	800fa60 <__retarget_lock_release_recursive>
 800ee5a:	bf00      	nop
 800ee5c:	240060dc 	.word	0x240060dc

0800ee60 <__cvt>:
 800ee60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee62:	ed2d 8b02 	vpush	{d8}
 800ee66:	eeb0 8b40 	vmov.f64	d8, d0
 800ee6a:	b085      	sub	sp, #20
 800ee6c:	4617      	mov	r7, r2
 800ee6e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800ee70:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ee72:	ee18 2a90 	vmov	r2, s17
 800ee76:	f025 0520 	bic.w	r5, r5, #32
 800ee7a:	2a00      	cmp	r2, #0
 800ee7c:	bfb6      	itet	lt
 800ee7e:	222d      	movlt	r2, #45	@ 0x2d
 800ee80:	2200      	movge	r2, #0
 800ee82:	eeb1 8b40 	vneglt.f64	d8, d0
 800ee86:	2d46      	cmp	r5, #70	@ 0x46
 800ee88:	460c      	mov	r4, r1
 800ee8a:	701a      	strb	r2, [r3, #0]
 800ee8c:	d004      	beq.n	800ee98 <__cvt+0x38>
 800ee8e:	2d45      	cmp	r5, #69	@ 0x45
 800ee90:	d100      	bne.n	800ee94 <__cvt+0x34>
 800ee92:	3401      	adds	r4, #1
 800ee94:	2102      	movs	r1, #2
 800ee96:	e000      	b.n	800ee9a <__cvt+0x3a>
 800ee98:	2103      	movs	r1, #3
 800ee9a:	ab03      	add	r3, sp, #12
 800ee9c:	9301      	str	r3, [sp, #4]
 800ee9e:	ab02      	add	r3, sp, #8
 800eea0:	9300      	str	r3, [sp, #0]
 800eea2:	4622      	mov	r2, r4
 800eea4:	4633      	mov	r3, r6
 800eea6:	eeb0 0b48 	vmov.f64	d0, d8
 800eeaa:	f000 fe71 	bl	800fb90 <_dtoa_r>
 800eeae:	2d47      	cmp	r5, #71	@ 0x47
 800eeb0:	d114      	bne.n	800eedc <__cvt+0x7c>
 800eeb2:	07fb      	lsls	r3, r7, #31
 800eeb4:	d50a      	bpl.n	800eecc <__cvt+0x6c>
 800eeb6:	1902      	adds	r2, r0, r4
 800eeb8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eec0:	bf08      	it	eq
 800eec2:	9203      	streq	r2, [sp, #12]
 800eec4:	2130      	movs	r1, #48	@ 0x30
 800eec6:	9b03      	ldr	r3, [sp, #12]
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d319      	bcc.n	800ef00 <__cvt+0xa0>
 800eecc:	9b03      	ldr	r3, [sp, #12]
 800eece:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eed0:	1a1b      	subs	r3, r3, r0
 800eed2:	6013      	str	r3, [r2, #0]
 800eed4:	b005      	add	sp, #20
 800eed6:	ecbd 8b02 	vpop	{d8}
 800eeda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eedc:	2d46      	cmp	r5, #70	@ 0x46
 800eede:	eb00 0204 	add.w	r2, r0, r4
 800eee2:	d1e9      	bne.n	800eeb8 <__cvt+0x58>
 800eee4:	7803      	ldrb	r3, [r0, #0]
 800eee6:	2b30      	cmp	r3, #48	@ 0x30
 800eee8:	d107      	bne.n	800eefa <__cvt+0x9a>
 800eeea:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eeee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eef2:	bf1c      	itt	ne
 800eef4:	f1c4 0401 	rsbne	r4, r4, #1
 800eef8:	6034      	strne	r4, [r6, #0]
 800eefa:	6833      	ldr	r3, [r6, #0]
 800eefc:	441a      	add	r2, r3
 800eefe:	e7db      	b.n	800eeb8 <__cvt+0x58>
 800ef00:	1c5c      	adds	r4, r3, #1
 800ef02:	9403      	str	r4, [sp, #12]
 800ef04:	7019      	strb	r1, [r3, #0]
 800ef06:	e7de      	b.n	800eec6 <__cvt+0x66>

0800ef08 <__exponent>:
 800ef08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef0a:	2900      	cmp	r1, #0
 800ef0c:	bfba      	itte	lt
 800ef0e:	4249      	neglt	r1, r1
 800ef10:	232d      	movlt	r3, #45	@ 0x2d
 800ef12:	232b      	movge	r3, #43	@ 0x2b
 800ef14:	2909      	cmp	r1, #9
 800ef16:	7002      	strb	r2, [r0, #0]
 800ef18:	7043      	strb	r3, [r0, #1]
 800ef1a:	dd29      	ble.n	800ef70 <__exponent+0x68>
 800ef1c:	f10d 0307 	add.w	r3, sp, #7
 800ef20:	461d      	mov	r5, r3
 800ef22:	270a      	movs	r7, #10
 800ef24:	461a      	mov	r2, r3
 800ef26:	fbb1 f6f7 	udiv	r6, r1, r7
 800ef2a:	fb07 1416 	mls	r4, r7, r6, r1
 800ef2e:	3430      	adds	r4, #48	@ 0x30
 800ef30:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ef34:	460c      	mov	r4, r1
 800ef36:	2c63      	cmp	r4, #99	@ 0x63
 800ef38:	f103 33ff 	add.w	r3, r3, #4294967295
 800ef3c:	4631      	mov	r1, r6
 800ef3e:	dcf1      	bgt.n	800ef24 <__exponent+0x1c>
 800ef40:	3130      	adds	r1, #48	@ 0x30
 800ef42:	1e94      	subs	r4, r2, #2
 800ef44:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ef48:	1c41      	adds	r1, r0, #1
 800ef4a:	4623      	mov	r3, r4
 800ef4c:	42ab      	cmp	r3, r5
 800ef4e:	d30a      	bcc.n	800ef66 <__exponent+0x5e>
 800ef50:	f10d 0309 	add.w	r3, sp, #9
 800ef54:	1a9b      	subs	r3, r3, r2
 800ef56:	42ac      	cmp	r4, r5
 800ef58:	bf88      	it	hi
 800ef5a:	2300      	movhi	r3, #0
 800ef5c:	3302      	adds	r3, #2
 800ef5e:	4403      	add	r3, r0
 800ef60:	1a18      	subs	r0, r3, r0
 800ef62:	b003      	add	sp, #12
 800ef64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef66:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ef6a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ef6e:	e7ed      	b.n	800ef4c <__exponent+0x44>
 800ef70:	2330      	movs	r3, #48	@ 0x30
 800ef72:	3130      	adds	r1, #48	@ 0x30
 800ef74:	7083      	strb	r3, [r0, #2]
 800ef76:	70c1      	strb	r1, [r0, #3]
 800ef78:	1d03      	adds	r3, r0, #4
 800ef7a:	e7f1      	b.n	800ef60 <__exponent+0x58>
 800ef7c:	0000      	movs	r0, r0
	...

0800ef80 <_printf_float>:
 800ef80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef84:	b08d      	sub	sp, #52	@ 0x34
 800ef86:	460c      	mov	r4, r1
 800ef88:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ef8c:	4616      	mov	r6, r2
 800ef8e:	461f      	mov	r7, r3
 800ef90:	4605      	mov	r5, r0
 800ef92:	f000 fcdf 	bl	800f954 <_localeconv_r>
 800ef96:	f8d0 b000 	ldr.w	fp, [r0]
 800ef9a:	4658      	mov	r0, fp
 800ef9c:	f7f1 f9f0 	bl	8000380 <strlen>
 800efa0:	2300      	movs	r3, #0
 800efa2:	930a      	str	r3, [sp, #40]	@ 0x28
 800efa4:	f8d8 3000 	ldr.w	r3, [r8]
 800efa8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800efac:	6822      	ldr	r2, [r4, #0]
 800efae:	9005      	str	r0, [sp, #20]
 800efb0:	3307      	adds	r3, #7
 800efb2:	f023 0307 	bic.w	r3, r3, #7
 800efb6:	f103 0108 	add.w	r1, r3, #8
 800efba:	f8c8 1000 	str.w	r1, [r8]
 800efbe:	ed93 0b00 	vldr	d0, [r3]
 800efc2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800f220 <_printf_float+0x2a0>
 800efc6:	eeb0 7bc0 	vabs.f64	d7, d0
 800efca:	eeb4 7b46 	vcmp.f64	d7, d6
 800efce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efd2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800efd6:	dd24      	ble.n	800f022 <_printf_float+0xa2>
 800efd8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800efdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efe0:	d502      	bpl.n	800efe8 <_printf_float+0x68>
 800efe2:	232d      	movs	r3, #45	@ 0x2d
 800efe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efe8:	498f      	ldr	r1, [pc, #572]	@ (800f228 <_printf_float+0x2a8>)
 800efea:	4b90      	ldr	r3, [pc, #576]	@ (800f22c <_printf_float+0x2ac>)
 800efec:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800eff0:	bf94      	ite	ls
 800eff2:	4688      	movls	r8, r1
 800eff4:	4698      	movhi	r8, r3
 800eff6:	f022 0204 	bic.w	r2, r2, #4
 800effa:	2303      	movs	r3, #3
 800effc:	6123      	str	r3, [r4, #16]
 800effe:	6022      	str	r2, [r4, #0]
 800f000:	f04f 0a00 	mov.w	sl, #0
 800f004:	9700      	str	r7, [sp, #0]
 800f006:	4633      	mov	r3, r6
 800f008:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f00a:	4621      	mov	r1, r4
 800f00c:	4628      	mov	r0, r5
 800f00e:	f000 f9d1 	bl	800f3b4 <_printf_common>
 800f012:	3001      	adds	r0, #1
 800f014:	f040 8089 	bne.w	800f12a <_printf_float+0x1aa>
 800f018:	f04f 30ff 	mov.w	r0, #4294967295
 800f01c:	b00d      	add	sp, #52	@ 0x34
 800f01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f022:	eeb4 0b40 	vcmp.f64	d0, d0
 800f026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f02a:	d709      	bvc.n	800f040 <_printf_float+0xc0>
 800f02c:	ee10 3a90 	vmov	r3, s1
 800f030:	2b00      	cmp	r3, #0
 800f032:	bfbc      	itt	lt
 800f034:	232d      	movlt	r3, #45	@ 0x2d
 800f036:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f03a:	497d      	ldr	r1, [pc, #500]	@ (800f230 <_printf_float+0x2b0>)
 800f03c:	4b7d      	ldr	r3, [pc, #500]	@ (800f234 <_printf_float+0x2b4>)
 800f03e:	e7d5      	b.n	800efec <_printf_float+0x6c>
 800f040:	6863      	ldr	r3, [r4, #4]
 800f042:	1c59      	adds	r1, r3, #1
 800f044:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800f048:	d139      	bne.n	800f0be <_printf_float+0x13e>
 800f04a:	2306      	movs	r3, #6
 800f04c:	6063      	str	r3, [r4, #4]
 800f04e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f052:	2300      	movs	r3, #0
 800f054:	6022      	str	r2, [r4, #0]
 800f056:	9303      	str	r3, [sp, #12]
 800f058:	ab0a      	add	r3, sp, #40	@ 0x28
 800f05a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f05e:	ab09      	add	r3, sp, #36	@ 0x24
 800f060:	9300      	str	r3, [sp, #0]
 800f062:	6861      	ldr	r1, [r4, #4]
 800f064:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f068:	4628      	mov	r0, r5
 800f06a:	f7ff fef9 	bl	800ee60 <__cvt>
 800f06e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f072:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f074:	4680      	mov	r8, r0
 800f076:	d129      	bne.n	800f0cc <_printf_float+0x14c>
 800f078:	1cc8      	adds	r0, r1, #3
 800f07a:	db02      	blt.n	800f082 <_printf_float+0x102>
 800f07c:	6863      	ldr	r3, [r4, #4]
 800f07e:	4299      	cmp	r1, r3
 800f080:	dd41      	ble.n	800f106 <_printf_float+0x186>
 800f082:	f1a9 0902 	sub.w	r9, r9, #2
 800f086:	fa5f f989 	uxtb.w	r9, r9
 800f08a:	3901      	subs	r1, #1
 800f08c:	464a      	mov	r2, r9
 800f08e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f092:	9109      	str	r1, [sp, #36]	@ 0x24
 800f094:	f7ff ff38 	bl	800ef08 <__exponent>
 800f098:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f09a:	1813      	adds	r3, r2, r0
 800f09c:	2a01      	cmp	r2, #1
 800f09e:	4682      	mov	sl, r0
 800f0a0:	6123      	str	r3, [r4, #16]
 800f0a2:	dc02      	bgt.n	800f0aa <_printf_float+0x12a>
 800f0a4:	6822      	ldr	r2, [r4, #0]
 800f0a6:	07d2      	lsls	r2, r2, #31
 800f0a8:	d501      	bpl.n	800f0ae <_printf_float+0x12e>
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	6123      	str	r3, [r4, #16]
 800f0ae:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d0a6      	beq.n	800f004 <_printf_float+0x84>
 800f0b6:	232d      	movs	r3, #45	@ 0x2d
 800f0b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f0bc:	e7a2      	b.n	800f004 <_printf_float+0x84>
 800f0be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f0c2:	d1c4      	bne.n	800f04e <_printf_float+0xce>
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d1c2      	bne.n	800f04e <_printf_float+0xce>
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	e7bf      	b.n	800f04c <_printf_float+0xcc>
 800f0cc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f0d0:	d9db      	bls.n	800f08a <_printf_float+0x10a>
 800f0d2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800f0d6:	d118      	bne.n	800f10a <_printf_float+0x18a>
 800f0d8:	2900      	cmp	r1, #0
 800f0da:	6863      	ldr	r3, [r4, #4]
 800f0dc:	dd0b      	ble.n	800f0f6 <_printf_float+0x176>
 800f0de:	6121      	str	r1, [r4, #16]
 800f0e0:	b913      	cbnz	r3, 800f0e8 <_printf_float+0x168>
 800f0e2:	6822      	ldr	r2, [r4, #0]
 800f0e4:	07d0      	lsls	r0, r2, #31
 800f0e6:	d502      	bpl.n	800f0ee <_printf_float+0x16e>
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	440b      	add	r3, r1
 800f0ec:	6123      	str	r3, [r4, #16]
 800f0ee:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f0f0:	f04f 0a00 	mov.w	sl, #0
 800f0f4:	e7db      	b.n	800f0ae <_printf_float+0x12e>
 800f0f6:	b913      	cbnz	r3, 800f0fe <_printf_float+0x17e>
 800f0f8:	6822      	ldr	r2, [r4, #0]
 800f0fa:	07d2      	lsls	r2, r2, #31
 800f0fc:	d501      	bpl.n	800f102 <_printf_float+0x182>
 800f0fe:	3302      	adds	r3, #2
 800f100:	e7f4      	b.n	800f0ec <_printf_float+0x16c>
 800f102:	2301      	movs	r3, #1
 800f104:	e7f2      	b.n	800f0ec <_printf_float+0x16c>
 800f106:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800f10a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f10c:	4299      	cmp	r1, r3
 800f10e:	db05      	blt.n	800f11c <_printf_float+0x19c>
 800f110:	6823      	ldr	r3, [r4, #0]
 800f112:	6121      	str	r1, [r4, #16]
 800f114:	07d8      	lsls	r0, r3, #31
 800f116:	d5ea      	bpl.n	800f0ee <_printf_float+0x16e>
 800f118:	1c4b      	adds	r3, r1, #1
 800f11a:	e7e7      	b.n	800f0ec <_printf_float+0x16c>
 800f11c:	2900      	cmp	r1, #0
 800f11e:	bfd4      	ite	le
 800f120:	f1c1 0202 	rsble	r2, r1, #2
 800f124:	2201      	movgt	r2, #1
 800f126:	4413      	add	r3, r2
 800f128:	e7e0      	b.n	800f0ec <_printf_float+0x16c>
 800f12a:	6823      	ldr	r3, [r4, #0]
 800f12c:	055a      	lsls	r2, r3, #21
 800f12e:	d407      	bmi.n	800f140 <_printf_float+0x1c0>
 800f130:	6923      	ldr	r3, [r4, #16]
 800f132:	4642      	mov	r2, r8
 800f134:	4631      	mov	r1, r6
 800f136:	4628      	mov	r0, r5
 800f138:	47b8      	blx	r7
 800f13a:	3001      	adds	r0, #1
 800f13c:	d12a      	bne.n	800f194 <_printf_float+0x214>
 800f13e:	e76b      	b.n	800f018 <_printf_float+0x98>
 800f140:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f144:	f240 80e0 	bls.w	800f308 <_printf_float+0x388>
 800f148:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f14c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f154:	d133      	bne.n	800f1be <_printf_float+0x23e>
 800f156:	4a38      	ldr	r2, [pc, #224]	@ (800f238 <_printf_float+0x2b8>)
 800f158:	2301      	movs	r3, #1
 800f15a:	4631      	mov	r1, r6
 800f15c:	4628      	mov	r0, r5
 800f15e:	47b8      	blx	r7
 800f160:	3001      	adds	r0, #1
 800f162:	f43f af59 	beq.w	800f018 <_printf_float+0x98>
 800f166:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f16a:	4543      	cmp	r3, r8
 800f16c:	db02      	blt.n	800f174 <_printf_float+0x1f4>
 800f16e:	6823      	ldr	r3, [r4, #0]
 800f170:	07d8      	lsls	r0, r3, #31
 800f172:	d50f      	bpl.n	800f194 <_printf_float+0x214>
 800f174:	9b05      	ldr	r3, [sp, #20]
 800f176:	465a      	mov	r2, fp
 800f178:	4631      	mov	r1, r6
 800f17a:	4628      	mov	r0, r5
 800f17c:	47b8      	blx	r7
 800f17e:	3001      	adds	r0, #1
 800f180:	f43f af4a 	beq.w	800f018 <_printf_float+0x98>
 800f184:	f04f 0900 	mov.w	r9, #0
 800f188:	f108 38ff 	add.w	r8, r8, #4294967295
 800f18c:	f104 0a1a 	add.w	sl, r4, #26
 800f190:	45c8      	cmp	r8, r9
 800f192:	dc09      	bgt.n	800f1a8 <_printf_float+0x228>
 800f194:	6823      	ldr	r3, [r4, #0]
 800f196:	079b      	lsls	r3, r3, #30
 800f198:	f100 8107 	bmi.w	800f3aa <_printf_float+0x42a>
 800f19c:	68e0      	ldr	r0, [r4, #12]
 800f19e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f1a0:	4298      	cmp	r0, r3
 800f1a2:	bfb8      	it	lt
 800f1a4:	4618      	movlt	r0, r3
 800f1a6:	e739      	b.n	800f01c <_printf_float+0x9c>
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	4652      	mov	r2, sl
 800f1ac:	4631      	mov	r1, r6
 800f1ae:	4628      	mov	r0, r5
 800f1b0:	47b8      	blx	r7
 800f1b2:	3001      	adds	r0, #1
 800f1b4:	f43f af30 	beq.w	800f018 <_printf_float+0x98>
 800f1b8:	f109 0901 	add.w	r9, r9, #1
 800f1bc:	e7e8      	b.n	800f190 <_printf_float+0x210>
 800f1be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	dc3b      	bgt.n	800f23c <_printf_float+0x2bc>
 800f1c4:	4a1c      	ldr	r2, [pc, #112]	@ (800f238 <_printf_float+0x2b8>)
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	4631      	mov	r1, r6
 800f1ca:	4628      	mov	r0, r5
 800f1cc:	47b8      	blx	r7
 800f1ce:	3001      	adds	r0, #1
 800f1d0:	f43f af22 	beq.w	800f018 <_printf_float+0x98>
 800f1d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f1d8:	ea59 0303 	orrs.w	r3, r9, r3
 800f1dc:	d102      	bne.n	800f1e4 <_printf_float+0x264>
 800f1de:	6823      	ldr	r3, [r4, #0]
 800f1e0:	07d9      	lsls	r1, r3, #31
 800f1e2:	d5d7      	bpl.n	800f194 <_printf_float+0x214>
 800f1e4:	9b05      	ldr	r3, [sp, #20]
 800f1e6:	465a      	mov	r2, fp
 800f1e8:	4631      	mov	r1, r6
 800f1ea:	4628      	mov	r0, r5
 800f1ec:	47b8      	blx	r7
 800f1ee:	3001      	adds	r0, #1
 800f1f0:	f43f af12 	beq.w	800f018 <_printf_float+0x98>
 800f1f4:	f04f 0a00 	mov.w	sl, #0
 800f1f8:	f104 0b1a 	add.w	fp, r4, #26
 800f1fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1fe:	425b      	negs	r3, r3
 800f200:	4553      	cmp	r3, sl
 800f202:	dc01      	bgt.n	800f208 <_printf_float+0x288>
 800f204:	464b      	mov	r3, r9
 800f206:	e794      	b.n	800f132 <_printf_float+0x1b2>
 800f208:	2301      	movs	r3, #1
 800f20a:	465a      	mov	r2, fp
 800f20c:	4631      	mov	r1, r6
 800f20e:	4628      	mov	r0, r5
 800f210:	47b8      	blx	r7
 800f212:	3001      	adds	r0, #1
 800f214:	f43f af00 	beq.w	800f018 <_printf_float+0x98>
 800f218:	f10a 0a01 	add.w	sl, sl, #1
 800f21c:	e7ee      	b.n	800f1fc <_printf_float+0x27c>
 800f21e:	bf00      	nop
 800f220:	ffffffff 	.word	0xffffffff
 800f224:	7fefffff 	.word	0x7fefffff
 800f228:	08014034 	.word	0x08014034
 800f22c:	08014038 	.word	0x08014038
 800f230:	0801403c 	.word	0x0801403c
 800f234:	08014040 	.word	0x08014040
 800f238:	08014044 	.word	0x08014044
 800f23c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f23e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f242:	4553      	cmp	r3, sl
 800f244:	bfa8      	it	ge
 800f246:	4653      	movge	r3, sl
 800f248:	2b00      	cmp	r3, #0
 800f24a:	4699      	mov	r9, r3
 800f24c:	dc37      	bgt.n	800f2be <_printf_float+0x33e>
 800f24e:	2300      	movs	r3, #0
 800f250:	9307      	str	r3, [sp, #28]
 800f252:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f256:	f104 021a 	add.w	r2, r4, #26
 800f25a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f25c:	9907      	ldr	r1, [sp, #28]
 800f25e:	9306      	str	r3, [sp, #24]
 800f260:	eba3 0309 	sub.w	r3, r3, r9
 800f264:	428b      	cmp	r3, r1
 800f266:	dc31      	bgt.n	800f2cc <_printf_float+0x34c>
 800f268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f26a:	459a      	cmp	sl, r3
 800f26c:	dc3b      	bgt.n	800f2e6 <_printf_float+0x366>
 800f26e:	6823      	ldr	r3, [r4, #0]
 800f270:	07da      	lsls	r2, r3, #31
 800f272:	d438      	bmi.n	800f2e6 <_printf_float+0x366>
 800f274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f276:	ebaa 0903 	sub.w	r9, sl, r3
 800f27a:	9b06      	ldr	r3, [sp, #24]
 800f27c:	ebaa 0303 	sub.w	r3, sl, r3
 800f280:	4599      	cmp	r9, r3
 800f282:	bfa8      	it	ge
 800f284:	4699      	movge	r9, r3
 800f286:	f1b9 0f00 	cmp.w	r9, #0
 800f28a:	dc34      	bgt.n	800f2f6 <_printf_float+0x376>
 800f28c:	f04f 0800 	mov.w	r8, #0
 800f290:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f294:	f104 0b1a 	add.w	fp, r4, #26
 800f298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f29a:	ebaa 0303 	sub.w	r3, sl, r3
 800f29e:	eba3 0309 	sub.w	r3, r3, r9
 800f2a2:	4543      	cmp	r3, r8
 800f2a4:	f77f af76 	ble.w	800f194 <_printf_float+0x214>
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	465a      	mov	r2, fp
 800f2ac:	4631      	mov	r1, r6
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	47b8      	blx	r7
 800f2b2:	3001      	adds	r0, #1
 800f2b4:	f43f aeb0 	beq.w	800f018 <_printf_float+0x98>
 800f2b8:	f108 0801 	add.w	r8, r8, #1
 800f2bc:	e7ec      	b.n	800f298 <_printf_float+0x318>
 800f2be:	4642      	mov	r2, r8
 800f2c0:	4631      	mov	r1, r6
 800f2c2:	4628      	mov	r0, r5
 800f2c4:	47b8      	blx	r7
 800f2c6:	3001      	adds	r0, #1
 800f2c8:	d1c1      	bne.n	800f24e <_printf_float+0x2ce>
 800f2ca:	e6a5      	b.n	800f018 <_printf_float+0x98>
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	4631      	mov	r1, r6
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	9206      	str	r2, [sp, #24]
 800f2d4:	47b8      	blx	r7
 800f2d6:	3001      	adds	r0, #1
 800f2d8:	f43f ae9e 	beq.w	800f018 <_printf_float+0x98>
 800f2dc:	9b07      	ldr	r3, [sp, #28]
 800f2de:	9a06      	ldr	r2, [sp, #24]
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	9307      	str	r3, [sp, #28]
 800f2e4:	e7b9      	b.n	800f25a <_printf_float+0x2da>
 800f2e6:	9b05      	ldr	r3, [sp, #20]
 800f2e8:	465a      	mov	r2, fp
 800f2ea:	4631      	mov	r1, r6
 800f2ec:	4628      	mov	r0, r5
 800f2ee:	47b8      	blx	r7
 800f2f0:	3001      	adds	r0, #1
 800f2f2:	d1bf      	bne.n	800f274 <_printf_float+0x2f4>
 800f2f4:	e690      	b.n	800f018 <_printf_float+0x98>
 800f2f6:	9a06      	ldr	r2, [sp, #24]
 800f2f8:	464b      	mov	r3, r9
 800f2fa:	4442      	add	r2, r8
 800f2fc:	4631      	mov	r1, r6
 800f2fe:	4628      	mov	r0, r5
 800f300:	47b8      	blx	r7
 800f302:	3001      	adds	r0, #1
 800f304:	d1c2      	bne.n	800f28c <_printf_float+0x30c>
 800f306:	e687      	b.n	800f018 <_printf_float+0x98>
 800f308:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f30c:	f1b9 0f01 	cmp.w	r9, #1
 800f310:	dc01      	bgt.n	800f316 <_printf_float+0x396>
 800f312:	07db      	lsls	r3, r3, #31
 800f314:	d536      	bpl.n	800f384 <_printf_float+0x404>
 800f316:	2301      	movs	r3, #1
 800f318:	4642      	mov	r2, r8
 800f31a:	4631      	mov	r1, r6
 800f31c:	4628      	mov	r0, r5
 800f31e:	47b8      	blx	r7
 800f320:	3001      	adds	r0, #1
 800f322:	f43f ae79 	beq.w	800f018 <_printf_float+0x98>
 800f326:	9b05      	ldr	r3, [sp, #20]
 800f328:	465a      	mov	r2, fp
 800f32a:	4631      	mov	r1, r6
 800f32c:	4628      	mov	r0, r5
 800f32e:	47b8      	blx	r7
 800f330:	3001      	adds	r0, #1
 800f332:	f43f ae71 	beq.w	800f018 <_printf_float+0x98>
 800f336:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f33a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f342:	f109 39ff 	add.w	r9, r9, #4294967295
 800f346:	d018      	beq.n	800f37a <_printf_float+0x3fa>
 800f348:	464b      	mov	r3, r9
 800f34a:	f108 0201 	add.w	r2, r8, #1
 800f34e:	4631      	mov	r1, r6
 800f350:	4628      	mov	r0, r5
 800f352:	47b8      	blx	r7
 800f354:	3001      	adds	r0, #1
 800f356:	d10c      	bne.n	800f372 <_printf_float+0x3f2>
 800f358:	e65e      	b.n	800f018 <_printf_float+0x98>
 800f35a:	2301      	movs	r3, #1
 800f35c:	465a      	mov	r2, fp
 800f35e:	4631      	mov	r1, r6
 800f360:	4628      	mov	r0, r5
 800f362:	47b8      	blx	r7
 800f364:	3001      	adds	r0, #1
 800f366:	f43f ae57 	beq.w	800f018 <_printf_float+0x98>
 800f36a:	f108 0801 	add.w	r8, r8, #1
 800f36e:	45c8      	cmp	r8, r9
 800f370:	dbf3      	blt.n	800f35a <_printf_float+0x3da>
 800f372:	4653      	mov	r3, sl
 800f374:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f378:	e6dc      	b.n	800f134 <_printf_float+0x1b4>
 800f37a:	f04f 0800 	mov.w	r8, #0
 800f37e:	f104 0b1a 	add.w	fp, r4, #26
 800f382:	e7f4      	b.n	800f36e <_printf_float+0x3ee>
 800f384:	2301      	movs	r3, #1
 800f386:	4642      	mov	r2, r8
 800f388:	e7e1      	b.n	800f34e <_printf_float+0x3ce>
 800f38a:	2301      	movs	r3, #1
 800f38c:	464a      	mov	r2, r9
 800f38e:	4631      	mov	r1, r6
 800f390:	4628      	mov	r0, r5
 800f392:	47b8      	blx	r7
 800f394:	3001      	adds	r0, #1
 800f396:	f43f ae3f 	beq.w	800f018 <_printf_float+0x98>
 800f39a:	f108 0801 	add.w	r8, r8, #1
 800f39e:	68e3      	ldr	r3, [r4, #12]
 800f3a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f3a2:	1a5b      	subs	r3, r3, r1
 800f3a4:	4543      	cmp	r3, r8
 800f3a6:	dcf0      	bgt.n	800f38a <_printf_float+0x40a>
 800f3a8:	e6f8      	b.n	800f19c <_printf_float+0x21c>
 800f3aa:	f04f 0800 	mov.w	r8, #0
 800f3ae:	f104 0919 	add.w	r9, r4, #25
 800f3b2:	e7f4      	b.n	800f39e <_printf_float+0x41e>

0800f3b4 <_printf_common>:
 800f3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3b8:	4616      	mov	r6, r2
 800f3ba:	4698      	mov	r8, r3
 800f3bc:	688a      	ldr	r2, [r1, #8]
 800f3be:	690b      	ldr	r3, [r1, #16]
 800f3c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	bfb8      	it	lt
 800f3c8:	4613      	movlt	r3, r2
 800f3ca:	6033      	str	r3, [r6, #0]
 800f3cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f3d0:	4607      	mov	r7, r0
 800f3d2:	460c      	mov	r4, r1
 800f3d4:	b10a      	cbz	r2, 800f3da <_printf_common+0x26>
 800f3d6:	3301      	adds	r3, #1
 800f3d8:	6033      	str	r3, [r6, #0]
 800f3da:	6823      	ldr	r3, [r4, #0]
 800f3dc:	0699      	lsls	r1, r3, #26
 800f3de:	bf42      	ittt	mi
 800f3e0:	6833      	ldrmi	r3, [r6, #0]
 800f3e2:	3302      	addmi	r3, #2
 800f3e4:	6033      	strmi	r3, [r6, #0]
 800f3e6:	6825      	ldr	r5, [r4, #0]
 800f3e8:	f015 0506 	ands.w	r5, r5, #6
 800f3ec:	d106      	bne.n	800f3fc <_printf_common+0x48>
 800f3ee:	f104 0a19 	add.w	sl, r4, #25
 800f3f2:	68e3      	ldr	r3, [r4, #12]
 800f3f4:	6832      	ldr	r2, [r6, #0]
 800f3f6:	1a9b      	subs	r3, r3, r2
 800f3f8:	42ab      	cmp	r3, r5
 800f3fa:	dc26      	bgt.n	800f44a <_printf_common+0x96>
 800f3fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f400:	6822      	ldr	r2, [r4, #0]
 800f402:	3b00      	subs	r3, #0
 800f404:	bf18      	it	ne
 800f406:	2301      	movne	r3, #1
 800f408:	0692      	lsls	r2, r2, #26
 800f40a:	d42b      	bmi.n	800f464 <_printf_common+0xb0>
 800f40c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f410:	4641      	mov	r1, r8
 800f412:	4638      	mov	r0, r7
 800f414:	47c8      	blx	r9
 800f416:	3001      	adds	r0, #1
 800f418:	d01e      	beq.n	800f458 <_printf_common+0xa4>
 800f41a:	6823      	ldr	r3, [r4, #0]
 800f41c:	6922      	ldr	r2, [r4, #16]
 800f41e:	f003 0306 	and.w	r3, r3, #6
 800f422:	2b04      	cmp	r3, #4
 800f424:	bf02      	ittt	eq
 800f426:	68e5      	ldreq	r5, [r4, #12]
 800f428:	6833      	ldreq	r3, [r6, #0]
 800f42a:	1aed      	subeq	r5, r5, r3
 800f42c:	68a3      	ldr	r3, [r4, #8]
 800f42e:	bf0c      	ite	eq
 800f430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f434:	2500      	movne	r5, #0
 800f436:	4293      	cmp	r3, r2
 800f438:	bfc4      	itt	gt
 800f43a:	1a9b      	subgt	r3, r3, r2
 800f43c:	18ed      	addgt	r5, r5, r3
 800f43e:	2600      	movs	r6, #0
 800f440:	341a      	adds	r4, #26
 800f442:	42b5      	cmp	r5, r6
 800f444:	d11a      	bne.n	800f47c <_printf_common+0xc8>
 800f446:	2000      	movs	r0, #0
 800f448:	e008      	b.n	800f45c <_printf_common+0xa8>
 800f44a:	2301      	movs	r3, #1
 800f44c:	4652      	mov	r2, sl
 800f44e:	4641      	mov	r1, r8
 800f450:	4638      	mov	r0, r7
 800f452:	47c8      	blx	r9
 800f454:	3001      	adds	r0, #1
 800f456:	d103      	bne.n	800f460 <_printf_common+0xac>
 800f458:	f04f 30ff 	mov.w	r0, #4294967295
 800f45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f460:	3501      	adds	r5, #1
 800f462:	e7c6      	b.n	800f3f2 <_printf_common+0x3e>
 800f464:	18e1      	adds	r1, r4, r3
 800f466:	1c5a      	adds	r2, r3, #1
 800f468:	2030      	movs	r0, #48	@ 0x30
 800f46a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f46e:	4422      	add	r2, r4
 800f470:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f474:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f478:	3302      	adds	r3, #2
 800f47a:	e7c7      	b.n	800f40c <_printf_common+0x58>
 800f47c:	2301      	movs	r3, #1
 800f47e:	4622      	mov	r2, r4
 800f480:	4641      	mov	r1, r8
 800f482:	4638      	mov	r0, r7
 800f484:	47c8      	blx	r9
 800f486:	3001      	adds	r0, #1
 800f488:	d0e6      	beq.n	800f458 <_printf_common+0xa4>
 800f48a:	3601      	adds	r6, #1
 800f48c:	e7d9      	b.n	800f442 <_printf_common+0x8e>
	...

0800f490 <_printf_i>:
 800f490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f494:	7e0f      	ldrb	r7, [r1, #24]
 800f496:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f498:	2f78      	cmp	r7, #120	@ 0x78
 800f49a:	4691      	mov	r9, r2
 800f49c:	4680      	mov	r8, r0
 800f49e:	460c      	mov	r4, r1
 800f4a0:	469a      	mov	sl, r3
 800f4a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f4a6:	d807      	bhi.n	800f4b8 <_printf_i+0x28>
 800f4a8:	2f62      	cmp	r7, #98	@ 0x62
 800f4aa:	d80a      	bhi.n	800f4c2 <_printf_i+0x32>
 800f4ac:	2f00      	cmp	r7, #0
 800f4ae:	f000 80d2 	beq.w	800f656 <_printf_i+0x1c6>
 800f4b2:	2f58      	cmp	r7, #88	@ 0x58
 800f4b4:	f000 80b9 	beq.w	800f62a <_printf_i+0x19a>
 800f4b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f4bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f4c0:	e03a      	b.n	800f538 <_printf_i+0xa8>
 800f4c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f4c6:	2b15      	cmp	r3, #21
 800f4c8:	d8f6      	bhi.n	800f4b8 <_printf_i+0x28>
 800f4ca:	a101      	add	r1, pc, #4	@ (adr r1, 800f4d0 <_printf_i+0x40>)
 800f4cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f4d0:	0800f529 	.word	0x0800f529
 800f4d4:	0800f53d 	.word	0x0800f53d
 800f4d8:	0800f4b9 	.word	0x0800f4b9
 800f4dc:	0800f4b9 	.word	0x0800f4b9
 800f4e0:	0800f4b9 	.word	0x0800f4b9
 800f4e4:	0800f4b9 	.word	0x0800f4b9
 800f4e8:	0800f53d 	.word	0x0800f53d
 800f4ec:	0800f4b9 	.word	0x0800f4b9
 800f4f0:	0800f4b9 	.word	0x0800f4b9
 800f4f4:	0800f4b9 	.word	0x0800f4b9
 800f4f8:	0800f4b9 	.word	0x0800f4b9
 800f4fc:	0800f63d 	.word	0x0800f63d
 800f500:	0800f567 	.word	0x0800f567
 800f504:	0800f5f7 	.word	0x0800f5f7
 800f508:	0800f4b9 	.word	0x0800f4b9
 800f50c:	0800f4b9 	.word	0x0800f4b9
 800f510:	0800f65f 	.word	0x0800f65f
 800f514:	0800f4b9 	.word	0x0800f4b9
 800f518:	0800f567 	.word	0x0800f567
 800f51c:	0800f4b9 	.word	0x0800f4b9
 800f520:	0800f4b9 	.word	0x0800f4b9
 800f524:	0800f5ff 	.word	0x0800f5ff
 800f528:	6833      	ldr	r3, [r6, #0]
 800f52a:	1d1a      	adds	r2, r3, #4
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	6032      	str	r2, [r6, #0]
 800f530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f534:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f538:	2301      	movs	r3, #1
 800f53a:	e09d      	b.n	800f678 <_printf_i+0x1e8>
 800f53c:	6833      	ldr	r3, [r6, #0]
 800f53e:	6820      	ldr	r0, [r4, #0]
 800f540:	1d19      	adds	r1, r3, #4
 800f542:	6031      	str	r1, [r6, #0]
 800f544:	0606      	lsls	r6, r0, #24
 800f546:	d501      	bpl.n	800f54c <_printf_i+0xbc>
 800f548:	681d      	ldr	r5, [r3, #0]
 800f54a:	e003      	b.n	800f554 <_printf_i+0xc4>
 800f54c:	0645      	lsls	r5, r0, #25
 800f54e:	d5fb      	bpl.n	800f548 <_printf_i+0xb8>
 800f550:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f554:	2d00      	cmp	r5, #0
 800f556:	da03      	bge.n	800f560 <_printf_i+0xd0>
 800f558:	232d      	movs	r3, #45	@ 0x2d
 800f55a:	426d      	negs	r5, r5
 800f55c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f560:	4859      	ldr	r0, [pc, #356]	@ (800f6c8 <_printf_i+0x238>)
 800f562:	230a      	movs	r3, #10
 800f564:	e011      	b.n	800f58a <_printf_i+0xfa>
 800f566:	6821      	ldr	r1, [r4, #0]
 800f568:	6833      	ldr	r3, [r6, #0]
 800f56a:	0608      	lsls	r0, r1, #24
 800f56c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f570:	d402      	bmi.n	800f578 <_printf_i+0xe8>
 800f572:	0649      	lsls	r1, r1, #25
 800f574:	bf48      	it	mi
 800f576:	b2ad      	uxthmi	r5, r5
 800f578:	2f6f      	cmp	r7, #111	@ 0x6f
 800f57a:	4853      	ldr	r0, [pc, #332]	@ (800f6c8 <_printf_i+0x238>)
 800f57c:	6033      	str	r3, [r6, #0]
 800f57e:	bf14      	ite	ne
 800f580:	230a      	movne	r3, #10
 800f582:	2308      	moveq	r3, #8
 800f584:	2100      	movs	r1, #0
 800f586:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f58a:	6866      	ldr	r6, [r4, #4]
 800f58c:	60a6      	str	r6, [r4, #8]
 800f58e:	2e00      	cmp	r6, #0
 800f590:	bfa2      	ittt	ge
 800f592:	6821      	ldrge	r1, [r4, #0]
 800f594:	f021 0104 	bicge.w	r1, r1, #4
 800f598:	6021      	strge	r1, [r4, #0]
 800f59a:	b90d      	cbnz	r5, 800f5a0 <_printf_i+0x110>
 800f59c:	2e00      	cmp	r6, #0
 800f59e:	d04b      	beq.n	800f638 <_printf_i+0x1a8>
 800f5a0:	4616      	mov	r6, r2
 800f5a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800f5a6:	fb03 5711 	mls	r7, r3, r1, r5
 800f5aa:	5dc7      	ldrb	r7, [r0, r7]
 800f5ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f5b0:	462f      	mov	r7, r5
 800f5b2:	42bb      	cmp	r3, r7
 800f5b4:	460d      	mov	r5, r1
 800f5b6:	d9f4      	bls.n	800f5a2 <_printf_i+0x112>
 800f5b8:	2b08      	cmp	r3, #8
 800f5ba:	d10b      	bne.n	800f5d4 <_printf_i+0x144>
 800f5bc:	6823      	ldr	r3, [r4, #0]
 800f5be:	07df      	lsls	r7, r3, #31
 800f5c0:	d508      	bpl.n	800f5d4 <_printf_i+0x144>
 800f5c2:	6923      	ldr	r3, [r4, #16]
 800f5c4:	6861      	ldr	r1, [r4, #4]
 800f5c6:	4299      	cmp	r1, r3
 800f5c8:	bfde      	ittt	le
 800f5ca:	2330      	movle	r3, #48	@ 0x30
 800f5cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f5d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f5d4:	1b92      	subs	r2, r2, r6
 800f5d6:	6122      	str	r2, [r4, #16]
 800f5d8:	f8cd a000 	str.w	sl, [sp]
 800f5dc:	464b      	mov	r3, r9
 800f5de:	aa03      	add	r2, sp, #12
 800f5e0:	4621      	mov	r1, r4
 800f5e2:	4640      	mov	r0, r8
 800f5e4:	f7ff fee6 	bl	800f3b4 <_printf_common>
 800f5e8:	3001      	adds	r0, #1
 800f5ea:	d14a      	bne.n	800f682 <_printf_i+0x1f2>
 800f5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f5f0:	b004      	add	sp, #16
 800f5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5f6:	6823      	ldr	r3, [r4, #0]
 800f5f8:	f043 0320 	orr.w	r3, r3, #32
 800f5fc:	6023      	str	r3, [r4, #0]
 800f5fe:	4833      	ldr	r0, [pc, #204]	@ (800f6cc <_printf_i+0x23c>)
 800f600:	2778      	movs	r7, #120	@ 0x78
 800f602:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f606:	6823      	ldr	r3, [r4, #0]
 800f608:	6831      	ldr	r1, [r6, #0]
 800f60a:	061f      	lsls	r7, r3, #24
 800f60c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f610:	d402      	bmi.n	800f618 <_printf_i+0x188>
 800f612:	065f      	lsls	r7, r3, #25
 800f614:	bf48      	it	mi
 800f616:	b2ad      	uxthmi	r5, r5
 800f618:	6031      	str	r1, [r6, #0]
 800f61a:	07d9      	lsls	r1, r3, #31
 800f61c:	bf44      	itt	mi
 800f61e:	f043 0320 	orrmi.w	r3, r3, #32
 800f622:	6023      	strmi	r3, [r4, #0]
 800f624:	b11d      	cbz	r5, 800f62e <_printf_i+0x19e>
 800f626:	2310      	movs	r3, #16
 800f628:	e7ac      	b.n	800f584 <_printf_i+0xf4>
 800f62a:	4827      	ldr	r0, [pc, #156]	@ (800f6c8 <_printf_i+0x238>)
 800f62c:	e7e9      	b.n	800f602 <_printf_i+0x172>
 800f62e:	6823      	ldr	r3, [r4, #0]
 800f630:	f023 0320 	bic.w	r3, r3, #32
 800f634:	6023      	str	r3, [r4, #0]
 800f636:	e7f6      	b.n	800f626 <_printf_i+0x196>
 800f638:	4616      	mov	r6, r2
 800f63a:	e7bd      	b.n	800f5b8 <_printf_i+0x128>
 800f63c:	6833      	ldr	r3, [r6, #0]
 800f63e:	6825      	ldr	r5, [r4, #0]
 800f640:	6961      	ldr	r1, [r4, #20]
 800f642:	1d18      	adds	r0, r3, #4
 800f644:	6030      	str	r0, [r6, #0]
 800f646:	062e      	lsls	r6, r5, #24
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	d501      	bpl.n	800f650 <_printf_i+0x1c0>
 800f64c:	6019      	str	r1, [r3, #0]
 800f64e:	e002      	b.n	800f656 <_printf_i+0x1c6>
 800f650:	0668      	lsls	r0, r5, #25
 800f652:	d5fb      	bpl.n	800f64c <_printf_i+0x1bc>
 800f654:	8019      	strh	r1, [r3, #0]
 800f656:	2300      	movs	r3, #0
 800f658:	6123      	str	r3, [r4, #16]
 800f65a:	4616      	mov	r6, r2
 800f65c:	e7bc      	b.n	800f5d8 <_printf_i+0x148>
 800f65e:	6833      	ldr	r3, [r6, #0]
 800f660:	1d1a      	adds	r2, r3, #4
 800f662:	6032      	str	r2, [r6, #0]
 800f664:	681e      	ldr	r6, [r3, #0]
 800f666:	6862      	ldr	r2, [r4, #4]
 800f668:	2100      	movs	r1, #0
 800f66a:	4630      	mov	r0, r6
 800f66c:	f7f0 fe38 	bl	80002e0 <memchr>
 800f670:	b108      	cbz	r0, 800f676 <_printf_i+0x1e6>
 800f672:	1b80      	subs	r0, r0, r6
 800f674:	6060      	str	r0, [r4, #4]
 800f676:	6863      	ldr	r3, [r4, #4]
 800f678:	6123      	str	r3, [r4, #16]
 800f67a:	2300      	movs	r3, #0
 800f67c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f680:	e7aa      	b.n	800f5d8 <_printf_i+0x148>
 800f682:	6923      	ldr	r3, [r4, #16]
 800f684:	4632      	mov	r2, r6
 800f686:	4649      	mov	r1, r9
 800f688:	4640      	mov	r0, r8
 800f68a:	47d0      	blx	sl
 800f68c:	3001      	adds	r0, #1
 800f68e:	d0ad      	beq.n	800f5ec <_printf_i+0x15c>
 800f690:	6823      	ldr	r3, [r4, #0]
 800f692:	079b      	lsls	r3, r3, #30
 800f694:	d413      	bmi.n	800f6be <_printf_i+0x22e>
 800f696:	68e0      	ldr	r0, [r4, #12]
 800f698:	9b03      	ldr	r3, [sp, #12]
 800f69a:	4298      	cmp	r0, r3
 800f69c:	bfb8      	it	lt
 800f69e:	4618      	movlt	r0, r3
 800f6a0:	e7a6      	b.n	800f5f0 <_printf_i+0x160>
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	4632      	mov	r2, r6
 800f6a6:	4649      	mov	r1, r9
 800f6a8:	4640      	mov	r0, r8
 800f6aa:	47d0      	blx	sl
 800f6ac:	3001      	adds	r0, #1
 800f6ae:	d09d      	beq.n	800f5ec <_printf_i+0x15c>
 800f6b0:	3501      	adds	r5, #1
 800f6b2:	68e3      	ldr	r3, [r4, #12]
 800f6b4:	9903      	ldr	r1, [sp, #12]
 800f6b6:	1a5b      	subs	r3, r3, r1
 800f6b8:	42ab      	cmp	r3, r5
 800f6ba:	dcf2      	bgt.n	800f6a2 <_printf_i+0x212>
 800f6bc:	e7eb      	b.n	800f696 <_printf_i+0x206>
 800f6be:	2500      	movs	r5, #0
 800f6c0:	f104 0619 	add.w	r6, r4, #25
 800f6c4:	e7f5      	b.n	800f6b2 <_printf_i+0x222>
 800f6c6:	bf00      	nop
 800f6c8:	08014046 	.word	0x08014046
 800f6cc:	08014057 	.word	0x08014057

0800f6d0 <std>:
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	b510      	push	{r4, lr}
 800f6d4:	4604      	mov	r4, r0
 800f6d6:	e9c0 3300 	strd	r3, r3, [r0]
 800f6da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f6de:	6083      	str	r3, [r0, #8]
 800f6e0:	8181      	strh	r1, [r0, #12]
 800f6e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800f6e4:	81c2      	strh	r2, [r0, #14]
 800f6e6:	6183      	str	r3, [r0, #24]
 800f6e8:	4619      	mov	r1, r3
 800f6ea:	2208      	movs	r2, #8
 800f6ec:	305c      	adds	r0, #92	@ 0x5c
 800f6ee:	f000 f928 	bl	800f942 <memset>
 800f6f2:	4b0d      	ldr	r3, [pc, #52]	@ (800f728 <std+0x58>)
 800f6f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800f6f6:	4b0d      	ldr	r3, [pc, #52]	@ (800f72c <std+0x5c>)
 800f6f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f6fa:	4b0d      	ldr	r3, [pc, #52]	@ (800f730 <std+0x60>)
 800f6fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f6fe:	4b0d      	ldr	r3, [pc, #52]	@ (800f734 <std+0x64>)
 800f700:	6323      	str	r3, [r4, #48]	@ 0x30
 800f702:	4b0d      	ldr	r3, [pc, #52]	@ (800f738 <std+0x68>)
 800f704:	6224      	str	r4, [r4, #32]
 800f706:	429c      	cmp	r4, r3
 800f708:	d006      	beq.n	800f718 <std+0x48>
 800f70a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f70e:	4294      	cmp	r4, r2
 800f710:	d002      	beq.n	800f718 <std+0x48>
 800f712:	33d0      	adds	r3, #208	@ 0xd0
 800f714:	429c      	cmp	r4, r3
 800f716:	d105      	bne.n	800f724 <std+0x54>
 800f718:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f720:	f000 b99c 	b.w	800fa5c <__retarget_lock_init_recursive>
 800f724:	bd10      	pop	{r4, pc}
 800f726:	bf00      	nop
 800f728:	0800f8bd 	.word	0x0800f8bd
 800f72c:	0800f8df 	.word	0x0800f8df
 800f730:	0800f917 	.word	0x0800f917
 800f734:	0800f93b 	.word	0x0800f93b
 800f738:	24005f9c 	.word	0x24005f9c

0800f73c <stdio_exit_handler>:
 800f73c:	4a02      	ldr	r2, [pc, #8]	@ (800f748 <stdio_exit_handler+0xc>)
 800f73e:	4903      	ldr	r1, [pc, #12]	@ (800f74c <stdio_exit_handler+0x10>)
 800f740:	4803      	ldr	r0, [pc, #12]	@ (800f750 <stdio_exit_handler+0x14>)
 800f742:	f000 b869 	b.w	800f818 <_fwalk_sglue>
 800f746:	bf00      	nop
 800f748:	2400003c 	.word	0x2400003c
 800f74c:	0801118d 	.word	0x0801118d
 800f750:	2400004c 	.word	0x2400004c

0800f754 <cleanup_stdio>:
 800f754:	6841      	ldr	r1, [r0, #4]
 800f756:	4b0c      	ldr	r3, [pc, #48]	@ (800f788 <cleanup_stdio+0x34>)
 800f758:	4299      	cmp	r1, r3
 800f75a:	b510      	push	{r4, lr}
 800f75c:	4604      	mov	r4, r0
 800f75e:	d001      	beq.n	800f764 <cleanup_stdio+0x10>
 800f760:	f001 fd14 	bl	801118c <_fflush_r>
 800f764:	68a1      	ldr	r1, [r4, #8]
 800f766:	4b09      	ldr	r3, [pc, #36]	@ (800f78c <cleanup_stdio+0x38>)
 800f768:	4299      	cmp	r1, r3
 800f76a:	d002      	beq.n	800f772 <cleanup_stdio+0x1e>
 800f76c:	4620      	mov	r0, r4
 800f76e:	f001 fd0d 	bl	801118c <_fflush_r>
 800f772:	68e1      	ldr	r1, [r4, #12]
 800f774:	4b06      	ldr	r3, [pc, #24]	@ (800f790 <cleanup_stdio+0x3c>)
 800f776:	4299      	cmp	r1, r3
 800f778:	d004      	beq.n	800f784 <cleanup_stdio+0x30>
 800f77a:	4620      	mov	r0, r4
 800f77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f780:	f001 bd04 	b.w	801118c <_fflush_r>
 800f784:	bd10      	pop	{r4, pc}
 800f786:	bf00      	nop
 800f788:	24005f9c 	.word	0x24005f9c
 800f78c:	24006004 	.word	0x24006004
 800f790:	2400606c 	.word	0x2400606c

0800f794 <global_stdio_init.part.0>:
 800f794:	b510      	push	{r4, lr}
 800f796:	4b0b      	ldr	r3, [pc, #44]	@ (800f7c4 <global_stdio_init.part.0+0x30>)
 800f798:	4c0b      	ldr	r4, [pc, #44]	@ (800f7c8 <global_stdio_init.part.0+0x34>)
 800f79a:	4a0c      	ldr	r2, [pc, #48]	@ (800f7cc <global_stdio_init.part.0+0x38>)
 800f79c:	601a      	str	r2, [r3, #0]
 800f79e:	4620      	mov	r0, r4
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	2104      	movs	r1, #4
 800f7a4:	f7ff ff94 	bl	800f6d0 <std>
 800f7a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	2109      	movs	r1, #9
 800f7b0:	f7ff ff8e 	bl	800f6d0 <std>
 800f7b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f7b8:	2202      	movs	r2, #2
 800f7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7be:	2112      	movs	r1, #18
 800f7c0:	f7ff bf86 	b.w	800f6d0 <std>
 800f7c4:	240060d4 	.word	0x240060d4
 800f7c8:	24005f9c 	.word	0x24005f9c
 800f7cc:	0800f73d 	.word	0x0800f73d

0800f7d0 <__sfp_lock_acquire>:
 800f7d0:	4801      	ldr	r0, [pc, #4]	@ (800f7d8 <__sfp_lock_acquire+0x8>)
 800f7d2:	f000 b944 	b.w	800fa5e <__retarget_lock_acquire_recursive>
 800f7d6:	bf00      	nop
 800f7d8:	240060dd 	.word	0x240060dd

0800f7dc <__sfp_lock_release>:
 800f7dc:	4801      	ldr	r0, [pc, #4]	@ (800f7e4 <__sfp_lock_release+0x8>)
 800f7de:	f000 b93f 	b.w	800fa60 <__retarget_lock_release_recursive>
 800f7e2:	bf00      	nop
 800f7e4:	240060dd 	.word	0x240060dd

0800f7e8 <__sinit>:
 800f7e8:	b510      	push	{r4, lr}
 800f7ea:	4604      	mov	r4, r0
 800f7ec:	f7ff fff0 	bl	800f7d0 <__sfp_lock_acquire>
 800f7f0:	6a23      	ldr	r3, [r4, #32]
 800f7f2:	b11b      	cbz	r3, 800f7fc <__sinit+0x14>
 800f7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7f8:	f7ff bff0 	b.w	800f7dc <__sfp_lock_release>
 800f7fc:	4b04      	ldr	r3, [pc, #16]	@ (800f810 <__sinit+0x28>)
 800f7fe:	6223      	str	r3, [r4, #32]
 800f800:	4b04      	ldr	r3, [pc, #16]	@ (800f814 <__sinit+0x2c>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d1f5      	bne.n	800f7f4 <__sinit+0xc>
 800f808:	f7ff ffc4 	bl	800f794 <global_stdio_init.part.0>
 800f80c:	e7f2      	b.n	800f7f4 <__sinit+0xc>
 800f80e:	bf00      	nop
 800f810:	0800f755 	.word	0x0800f755
 800f814:	240060d4 	.word	0x240060d4

0800f818 <_fwalk_sglue>:
 800f818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f81c:	4607      	mov	r7, r0
 800f81e:	4688      	mov	r8, r1
 800f820:	4614      	mov	r4, r2
 800f822:	2600      	movs	r6, #0
 800f824:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f828:	f1b9 0901 	subs.w	r9, r9, #1
 800f82c:	d505      	bpl.n	800f83a <_fwalk_sglue+0x22>
 800f82e:	6824      	ldr	r4, [r4, #0]
 800f830:	2c00      	cmp	r4, #0
 800f832:	d1f7      	bne.n	800f824 <_fwalk_sglue+0xc>
 800f834:	4630      	mov	r0, r6
 800f836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f83a:	89ab      	ldrh	r3, [r5, #12]
 800f83c:	2b01      	cmp	r3, #1
 800f83e:	d907      	bls.n	800f850 <_fwalk_sglue+0x38>
 800f840:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f844:	3301      	adds	r3, #1
 800f846:	d003      	beq.n	800f850 <_fwalk_sglue+0x38>
 800f848:	4629      	mov	r1, r5
 800f84a:	4638      	mov	r0, r7
 800f84c:	47c0      	blx	r8
 800f84e:	4306      	orrs	r6, r0
 800f850:	3568      	adds	r5, #104	@ 0x68
 800f852:	e7e9      	b.n	800f828 <_fwalk_sglue+0x10>

0800f854 <sniprintf>:
 800f854:	b40c      	push	{r2, r3}
 800f856:	b530      	push	{r4, r5, lr}
 800f858:	4b17      	ldr	r3, [pc, #92]	@ (800f8b8 <sniprintf+0x64>)
 800f85a:	1e0c      	subs	r4, r1, #0
 800f85c:	681d      	ldr	r5, [r3, #0]
 800f85e:	b09d      	sub	sp, #116	@ 0x74
 800f860:	da08      	bge.n	800f874 <sniprintf+0x20>
 800f862:	238b      	movs	r3, #139	@ 0x8b
 800f864:	602b      	str	r3, [r5, #0]
 800f866:	f04f 30ff 	mov.w	r0, #4294967295
 800f86a:	b01d      	add	sp, #116	@ 0x74
 800f86c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f870:	b002      	add	sp, #8
 800f872:	4770      	bx	lr
 800f874:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f878:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f87c:	bf14      	ite	ne
 800f87e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f882:	4623      	moveq	r3, r4
 800f884:	9304      	str	r3, [sp, #16]
 800f886:	9307      	str	r3, [sp, #28]
 800f888:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f88c:	9002      	str	r0, [sp, #8]
 800f88e:	9006      	str	r0, [sp, #24]
 800f890:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f894:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f896:	ab21      	add	r3, sp, #132	@ 0x84
 800f898:	a902      	add	r1, sp, #8
 800f89a:	4628      	mov	r0, r5
 800f89c:	9301      	str	r3, [sp, #4]
 800f89e:	f001 faf5 	bl	8010e8c <_svfiprintf_r>
 800f8a2:	1c43      	adds	r3, r0, #1
 800f8a4:	bfbc      	itt	lt
 800f8a6:	238b      	movlt	r3, #139	@ 0x8b
 800f8a8:	602b      	strlt	r3, [r5, #0]
 800f8aa:	2c00      	cmp	r4, #0
 800f8ac:	d0dd      	beq.n	800f86a <sniprintf+0x16>
 800f8ae:	9b02      	ldr	r3, [sp, #8]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	701a      	strb	r2, [r3, #0]
 800f8b4:	e7d9      	b.n	800f86a <sniprintf+0x16>
 800f8b6:	bf00      	nop
 800f8b8:	24000048 	.word	0x24000048

0800f8bc <__sread>:
 800f8bc:	b510      	push	{r4, lr}
 800f8be:	460c      	mov	r4, r1
 800f8c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8c4:	f000 f86c 	bl	800f9a0 <_read_r>
 800f8c8:	2800      	cmp	r0, #0
 800f8ca:	bfab      	itete	ge
 800f8cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f8ce:	89a3      	ldrhlt	r3, [r4, #12]
 800f8d0:	181b      	addge	r3, r3, r0
 800f8d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f8d6:	bfac      	ite	ge
 800f8d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f8da:	81a3      	strhlt	r3, [r4, #12]
 800f8dc:	bd10      	pop	{r4, pc}

0800f8de <__swrite>:
 800f8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8e2:	461f      	mov	r7, r3
 800f8e4:	898b      	ldrh	r3, [r1, #12]
 800f8e6:	05db      	lsls	r3, r3, #23
 800f8e8:	4605      	mov	r5, r0
 800f8ea:	460c      	mov	r4, r1
 800f8ec:	4616      	mov	r6, r2
 800f8ee:	d505      	bpl.n	800f8fc <__swrite+0x1e>
 800f8f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8f4:	2302      	movs	r3, #2
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	f000 f840 	bl	800f97c <_lseek_r>
 800f8fc:	89a3      	ldrh	r3, [r4, #12]
 800f8fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f902:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f906:	81a3      	strh	r3, [r4, #12]
 800f908:	4632      	mov	r2, r6
 800f90a:	463b      	mov	r3, r7
 800f90c:	4628      	mov	r0, r5
 800f90e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f912:	f000 b867 	b.w	800f9e4 <_write_r>

0800f916 <__sseek>:
 800f916:	b510      	push	{r4, lr}
 800f918:	460c      	mov	r4, r1
 800f91a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f91e:	f000 f82d 	bl	800f97c <_lseek_r>
 800f922:	1c43      	adds	r3, r0, #1
 800f924:	89a3      	ldrh	r3, [r4, #12]
 800f926:	bf15      	itete	ne
 800f928:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f92a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f92e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f932:	81a3      	strheq	r3, [r4, #12]
 800f934:	bf18      	it	ne
 800f936:	81a3      	strhne	r3, [r4, #12]
 800f938:	bd10      	pop	{r4, pc}

0800f93a <__sclose>:
 800f93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f93e:	f000 b80d 	b.w	800f95c <_close_r>

0800f942 <memset>:
 800f942:	4402      	add	r2, r0
 800f944:	4603      	mov	r3, r0
 800f946:	4293      	cmp	r3, r2
 800f948:	d100      	bne.n	800f94c <memset+0xa>
 800f94a:	4770      	bx	lr
 800f94c:	f803 1b01 	strb.w	r1, [r3], #1
 800f950:	e7f9      	b.n	800f946 <memset+0x4>
	...

0800f954 <_localeconv_r>:
 800f954:	4800      	ldr	r0, [pc, #0]	@ (800f958 <_localeconv_r+0x4>)
 800f956:	4770      	bx	lr
 800f958:	24000188 	.word	0x24000188

0800f95c <_close_r>:
 800f95c:	b538      	push	{r3, r4, r5, lr}
 800f95e:	4d06      	ldr	r5, [pc, #24]	@ (800f978 <_close_r+0x1c>)
 800f960:	2300      	movs	r3, #0
 800f962:	4604      	mov	r4, r0
 800f964:	4608      	mov	r0, r1
 800f966:	602b      	str	r3, [r5, #0]
 800f968:	f7f1 fd5e 	bl	8001428 <_close>
 800f96c:	1c43      	adds	r3, r0, #1
 800f96e:	d102      	bne.n	800f976 <_close_r+0x1a>
 800f970:	682b      	ldr	r3, [r5, #0]
 800f972:	b103      	cbz	r3, 800f976 <_close_r+0x1a>
 800f974:	6023      	str	r3, [r4, #0]
 800f976:	bd38      	pop	{r3, r4, r5, pc}
 800f978:	240060d8 	.word	0x240060d8

0800f97c <_lseek_r>:
 800f97c:	b538      	push	{r3, r4, r5, lr}
 800f97e:	4d07      	ldr	r5, [pc, #28]	@ (800f99c <_lseek_r+0x20>)
 800f980:	4604      	mov	r4, r0
 800f982:	4608      	mov	r0, r1
 800f984:	4611      	mov	r1, r2
 800f986:	2200      	movs	r2, #0
 800f988:	602a      	str	r2, [r5, #0]
 800f98a:	461a      	mov	r2, r3
 800f98c:	f7f1 fd73 	bl	8001476 <_lseek>
 800f990:	1c43      	adds	r3, r0, #1
 800f992:	d102      	bne.n	800f99a <_lseek_r+0x1e>
 800f994:	682b      	ldr	r3, [r5, #0]
 800f996:	b103      	cbz	r3, 800f99a <_lseek_r+0x1e>
 800f998:	6023      	str	r3, [r4, #0]
 800f99a:	bd38      	pop	{r3, r4, r5, pc}
 800f99c:	240060d8 	.word	0x240060d8

0800f9a0 <_read_r>:
 800f9a0:	b538      	push	{r3, r4, r5, lr}
 800f9a2:	4d07      	ldr	r5, [pc, #28]	@ (800f9c0 <_read_r+0x20>)
 800f9a4:	4604      	mov	r4, r0
 800f9a6:	4608      	mov	r0, r1
 800f9a8:	4611      	mov	r1, r2
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	602a      	str	r2, [r5, #0]
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	f7f1 fd01 	bl	80013b6 <_read>
 800f9b4:	1c43      	adds	r3, r0, #1
 800f9b6:	d102      	bne.n	800f9be <_read_r+0x1e>
 800f9b8:	682b      	ldr	r3, [r5, #0]
 800f9ba:	b103      	cbz	r3, 800f9be <_read_r+0x1e>
 800f9bc:	6023      	str	r3, [r4, #0]
 800f9be:	bd38      	pop	{r3, r4, r5, pc}
 800f9c0:	240060d8 	.word	0x240060d8

0800f9c4 <_sbrk_r>:
 800f9c4:	b538      	push	{r3, r4, r5, lr}
 800f9c6:	4d06      	ldr	r5, [pc, #24]	@ (800f9e0 <_sbrk_r+0x1c>)
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	4604      	mov	r4, r0
 800f9cc:	4608      	mov	r0, r1
 800f9ce:	602b      	str	r3, [r5, #0]
 800f9d0:	f7f1 fd5e 	bl	8001490 <_sbrk>
 800f9d4:	1c43      	adds	r3, r0, #1
 800f9d6:	d102      	bne.n	800f9de <_sbrk_r+0x1a>
 800f9d8:	682b      	ldr	r3, [r5, #0]
 800f9da:	b103      	cbz	r3, 800f9de <_sbrk_r+0x1a>
 800f9dc:	6023      	str	r3, [r4, #0]
 800f9de:	bd38      	pop	{r3, r4, r5, pc}
 800f9e0:	240060d8 	.word	0x240060d8

0800f9e4 <_write_r>:
 800f9e4:	b538      	push	{r3, r4, r5, lr}
 800f9e6:	4d07      	ldr	r5, [pc, #28]	@ (800fa04 <_write_r+0x20>)
 800f9e8:	4604      	mov	r4, r0
 800f9ea:	4608      	mov	r0, r1
 800f9ec:	4611      	mov	r1, r2
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	602a      	str	r2, [r5, #0]
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	f7f1 fcfc 	bl	80013f0 <_write>
 800f9f8:	1c43      	adds	r3, r0, #1
 800f9fa:	d102      	bne.n	800fa02 <_write_r+0x1e>
 800f9fc:	682b      	ldr	r3, [r5, #0]
 800f9fe:	b103      	cbz	r3, 800fa02 <_write_r+0x1e>
 800fa00:	6023      	str	r3, [r4, #0]
 800fa02:	bd38      	pop	{r3, r4, r5, pc}
 800fa04:	240060d8 	.word	0x240060d8

0800fa08 <__errno>:
 800fa08:	4b01      	ldr	r3, [pc, #4]	@ (800fa10 <__errno+0x8>)
 800fa0a:	6818      	ldr	r0, [r3, #0]
 800fa0c:	4770      	bx	lr
 800fa0e:	bf00      	nop
 800fa10:	24000048 	.word	0x24000048

0800fa14 <__libc_init_array>:
 800fa14:	b570      	push	{r4, r5, r6, lr}
 800fa16:	4d0d      	ldr	r5, [pc, #52]	@ (800fa4c <__libc_init_array+0x38>)
 800fa18:	4c0d      	ldr	r4, [pc, #52]	@ (800fa50 <__libc_init_array+0x3c>)
 800fa1a:	1b64      	subs	r4, r4, r5
 800fa1c:	10a4      	asrs	r4, r4, #2
 800fa1e:	2600      	movs	r6, #0
 800fa20:	42a6      	cmp	r6, r4
 800fa22:	d109      	bne.n	800fa38 <__libc_init_array+0x24>
 800fa24:	4d0b      	ldr	r5, [pc, #44]	@ (800fa54 <__libc_init_array+0x40>)
 800fa26:	4c0c      	ldr	r4, [pc, #48]	@ (800fa58 <__libc_init_array+0x44>)
 800fa28:	f002 fa1c 	bl	8011e64 <_init>
 800fa2c:	1b64      	subs	r4, r4, r5
 800fa2e:	10a4      	asrs	r4, r4, #2
 800fa30:	2600      	movs	r6, #0
 800fa32:	42a6      	cmp	r6, r4
 800fa34:	d105      	bne.n	800fa42 <__libc_init_array+0x2e>
 800fa36:	bd70      	pop	{r4, r5, r6, pc}
 800fa38:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa3c:	4798      	blx	r3
 800fa3e:	3601      	adds	r6, #1
 800fa40:	e7ee      	b.n	800fa20 <__libc_init_array+0xc>
 800fa42:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa46:	4798      	blx	r3
 800fa48:	3601      	adds	r6, #1
 800fa4a:	e7f2      	b.n	800fa32 <__libc_init_array+0x1e>
 800fa4c:	080143c0 	.word	0x080143c0
 800fa50:	080143c0 	.word	0x080143c0
 800fa54:	080143c0 	.word	0x080143c0
 800fa58:	080143c4 	.word	0x080143c4

0800fa5c <__retarget_lock_init_recursive>:
 800fa5c:	4770      	bx	lr

0800fa5e <__retarget_lock_acquire_recursive>:
 800fa5e:	4770      	bx	lr

0800fa60 <__retarget_lock_release_recursive>:
 800fa60:	4770      	bx	lr

0800fa62 <memcpy>:
 800fa62:	440a      	add	r2, r1
 800fa64:	4291      	cmp	r1, r2
 800fa66:	f100 33ff 	add.w	r3, r0, #4294967295
 800fa6a:	d100      	bne.n	800fa6e <memcpy+0xc>
 800fa6c:	4770      	bx	lr
 800fa6e:	b510      	push	{r4, lr}
 800fa70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa78:	4291      	cmp	r1, r2
 800fa7a:	d1f9      	bne.n	800fa70 <memcpy+0xe>
 800fa7c:	bd10      	pop	{r4, pc}

0800fa7e <quorem>:
 800fa7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa82:	6903      	ldr	r3, [r0, #16]
 800fa84:	690c      	ldr	r4, [r1, #16]
 800fa86:	42a3      	cmp	r3, r4
 800fa88:	4607      	mov	r7, r0
 800fa8a:	db7e      	blt.n	800fb8a <quorem+0x10c>
 800fa8c:	3c01      	subs	r4, #1
 800fa8e:	f101 0814 	add.w	r8, r1, #20
 800fa92:	00a3      	lsls	r3, r4, #2
 800fa94:	f100 0514 	add.w	r5, r0, #20
 800fa98:	9300      	str	r3, [sp, #0]
 800fa9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa9e:	9301      	str	r3, [sp, #4]
 800faa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800faa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800faa8:	3301      	adds	r3, #1
 800faaa:	429a      	cmp	r2, r3
 800faac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fab0:	fbb2 f6f3 	udiv	r6, r2, r3
 800fab4:	d32e      	bcc.n	800fb14 <quorem+0x96>
 800fab6:	f04f 0a00 	mov.w	sl, #0
 800faba:	46c4      	mov	ip, r8
 800fabc:	46ae      	mov	lr, r5
 800fabe:	46d3      	mov	fp, sl
 800fac0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fac4:	b298      	uxth	r0, r3
 800fac6:	fb06 a000 	mla	r0, r6, r0, sl
 800faca:	0c02      	lsrs	r2, r0, #16
 800facc:	0c1b      	lsrs	r3, r3, #16
 800face:	fb06 2303 	mla	r3, r6, r3, r2
 800fad2:	f8de 2000 	ldr.w	r2, [lr]
 800fad6:	b280      	uxth	r0, r0
 800fad8:	b292      	uxth	r2, r2
 800fada:	1a12      	subs	r2, r2, r0
 800fadc:	445a      	add	r2, fp
 800fade:	f8de 0000 	ldr.w	r0, [lr]
 800fae2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800faec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800faf0:	b292      	uxth	r2, r2
 800faf2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800faf6:	45e1      	cmp	r9, ip
 800faf8:	f84e 2b04 	str.w	r2, [lr], #4
 800fafc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fb00:	d2de      	bcs.n	800fac0 <quorem+0x42>
 800fb02:	9b00      	ldr	r3, [sp, #0]
 800fb04:	58eb      	ldr	r3, [r5, r3]
 800fb06:	b92b      	cbnz	r3, 800fb14 <quorem+0x96>
 800fb08:	9b01      	ldr	r3, [sp, #4]
 800fb0a:	3b04      	subs	r3, #4
 800fb0c:	429d      	cmp	r5, r3
 800fb0e:	461a      	mov	r2, r3
 800fb10:	d32f      	bcc.n	800fb72 <quorem+0xf4>
 800fb12:	613c      	str	r4, [r7, #16]
 800fb14:	4638      	mov	r0, r7
 800fb16:	f001 f855 	bl	8010bc4 <__mcmp>
 800fb1a:	2800      	cmp	r0, #0
 800fb1c:	db25      	blt.n	800fb6a <quorem+0xec>
 800fb1e:	4629      	mov	r1, r5
 800fb20:	2000      	movs	r0, #0
 800fb22:	f858 2b04 	ldr.w	r2, [r8], #4
 800fb26:	f8d1 c000 	ldr.w	ip, [r1]
 800fb2a:	fa1f fe82 	uxth.w	lr, r2
 800fb2e:	fa1f f38c 	uxth.w	r3, ip
 800fb32:	eba3 030e 	sub.w	r3, r3, lr
 800fb36:	4403      	add	r3, r0
 800fb38:	0c12      	lsrs	r2, r2, #16
 800fb3a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fb3e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb48:	45c1      	cmp	r9, r8
 800fb4a:	f841 3b04 	str.w	r3, [r1], #4
 800fb4e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fb52:	d2e6      	bcs.n	800fb22 <quorem+0xa4>
 800fb54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb5c:	b922      	cbnz	r2, 800fb68 <quorem+0xea>
 800fb5e:	3b04      	subs	r3, #4
 800fb60:	429d      	cmp	r5, r3
 800fb62:	461a      	mov	r2, r3
 800fb64:	d30b      	bcc.n	800fb7e <quorem+0x100>
 800fb66:	613c      	str	r4, [r7, #16]
 800fb68:	3601      	adds	r6, #1
 800fb6a:	4630      	mov	r0, r6
 800fb6c:	b003      	add	sp, #12
 800fb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb72:	6812      	ldr	r2, [r2, #0]
 800fb74:	3b04      	subs	r3, #4
 800fb76:	2a00      	cmp	r2, #0
 800fb78:	d1cb      	bne.n	800fb12 <quorem+0x94>
 800fb7a:	3c01      	subs	r4, #1
 800fb7c:	e7c6      	b.n	800fb0c <quorem+0x8e>
 800fb7e:	6812      	ldr	r2, [r2, #0]
 800fb80:	3b04      	subs	r3, #4
 800fb82:	2a00      	cmp	r2, #0
 800fb84:	d1ef      	bne.n	800fb66 <quorem+0xe8>
 800fb86:	3c01      	subs	r4, #1
 800fb88:	e7ea      	b.n	800fb60 <quorem+0xe2>
 800fb8a:	2000      	movs	r0, #0
 800fb8c:	e7ee      	b.n	800fb6c <quorem+0xee>
	...

0800fb90 <_dtoa_r>:
 800fb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb94:	ed2d 8b02 	vpush	{d8}
 800fb98:	69c7      	ldr	r7, [r0, #28]
 800fb9a:	b091      	sub	sp, #68	@ 0x44
 800fb9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fba0:	ec55 4b10 	vmov	r4, r5, d0
 800fba4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800fba6:	9107      	str	r1, [sp, #28]
 800fba8:	4681      	mov	r9, r0
 800fbaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800fbac:	930d      	str	r3, [sp, #52]	@ 0x34
 800fbae:	b97f      	cbnz	r7, 800fbd0 <_dtoa_r+0x40>
 800fbb0:	2010      	movs	r0, #16
 800fbb2:	f7ff f89f 	bl	800ecf4 <malloc>
 800fbb6:	4602      	mov	r2, r0
 800fbb8:	f8c9 001c 	str.w	r0, [r9, #28]
 800fbbc:	b920      	cbnz	r0, 800fbc8 <_dtoa_r+0x38>
 800fbbe:	4ba0      	ldr	r3, [pc, #640]	@ (800fe40 <_dtoa_r+0x2b0>)
 800fbc0:	21ef      	movs	r1, #239	@ 0xef
 800fbc2:	48a0      	ldr	r0, [pc, #640]	@ (800fe44 <_dtoa_r+0x2b4>)
 800fbc4:	f001 fb24 	bl	8011210 <__assert_func>
 800fbc8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fbcc:	6007      	str	r7, [r0, #0]
 800fbce:	60c7      	str	r7, [r0, #12]
 800fbd0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fbd4:	6819      	ldr	r1, [r3, #0]
 800fbd6:	b159      	cbz	r1, 800fbf0 <_dtoa_r+0x60>
 800fbd8:	685a      	ldr	r2, [r3, #4]
 800fbda:	604a      	str	r2, [r1, #4]
 800fbdc:	2301      	movs	r3, #1
 800fbde:	4093      	lsls	r3, r2
 800fbe0:	608b      	str	r3, [r1, #8]
 800fbe2:	4648      	mov	r0, r9
 800fbe4:	f000 fdb4 	bl	8010750 <_Bfree>
 800fbe8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fbec:	2200      	movs	r2, #0
 800fbee:	601a      	str	r2, [r3, #0]
 800fbf0:	1e2b      	subs	r3, r5, #0
 800fbf2:	bfbb      	ittet	lt
 800fbf4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fbf8:	9303      	strlt	r3, [sp, #12]
 800fbfa:	2300      	movge	r3, #0
 800fbfc:	2201      	movlt	r2, #1
 800fbfe:	bfac      	ite	ge
 800fc00:	6033      	strge	r3, [r6, #0]
 800fc02:	6032      	strlt	r2, [r6, #0]
 800fc04:	4b90      	ldr	r3, [pc, #576]	@ (800fe48 <_dtoa_r+0x2b8>)
 800fc06:	9e03      	ldr	r6, [sp, #12]
 800fc08:	43b3      	bics	r3, r6
 800fc0a:	d110      	bne.n	800fc2e <_dtoa_r+0x9e>
 800fc0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fc0e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fc12:	6013      	str	r3, [r2, #0]
 800fc14:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800fc18:	4323      	orrs	r3, r4
 800fc1a:	f000 84de 	beq.w	80105da <_dtoa_r+0xa4a>
 800fc1e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc20:	4f8a      	ldr	r7, [pc, #552]	@ (800fe4c <_dtoa_r+0x2bc>)
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	f000 84e0 	beq.w	80105e8 <_dtoa_r+0xa58>
 800fc28:	1cfb      	adds	r3, r7, #3
 800fc2a:	f000 bcdb 	b.w	80105e4 <_dtoa_r+0xa54>
 800fc2e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fc32:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc3a:	d10a      	bne.n	800fc52 <_dtoa_r+0xc2>
 800fc3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fc3e:	2301      	movs	r3, #1
 800fc40:	6013      	str	r3, [r2, #0]
 800fc42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc44:	b113      	cbz	r3, 800fc4c <_dtoa_r+0xbc>
 800fc46:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fc48:	4b81      	ldr	r3, [pc, #516]	@ (800fe50 <_dtoa_r+0x2c0>)
 800fc4a:	6013      	str	r3, [r2, #0]
 800fc4c:	4f81      	ldr	r7, [pc, #516]	@ (800fe54 <_dtoa_r+0x2c4>)
 800fc4e:	f000 bccb 	b.w	80105e8 <_dtoa_r+0xa58>
 800fc52:	aa0e      	add	r2, sp, #56	@ 0x38
 800fc54:	a90f      	add	r1, sp, #60	@ 0x3c
 800fc56:	4648      	mov	r0, r9
 800fc58:	eeb0 0b48 	vmov.f64	d0, d8
 800fc5c:	f001 f862 	bl	8010d24 <__d2b>
 800fc60:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800fc64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc66:	9001      	str	r0, [sp, #4]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d045      	beq.n	800fcf8 <_dtoa_r+0x168>
 800fc6c:	eeb0 7b48 	vmov.f64	d7, d8
 800fc70:	ee18 1a90 	vmov	r1, s17
 800fc74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fc78:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800fc7c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800fc80:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fc84:	2500      	movs	r5, #0
 800fc86:	ee07 1a90 	vmov	s15, r1
 800fc8a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800fc8e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800fe28 <_dtoa_r+0x298>
 800fc92:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fc96:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800fe30 <_dtoa_r+0x2a0>
 800fc9a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800fc9e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800fe38 <_dtoa_r+0x2a8>
 800fca2:	ee07 3a90 	vmov	s15, r3
 800fca6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fcaa:	eeb0 7b46 	vmov.f64	d7, d6
 800fcae:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fcb2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fcb6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fcba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcbe:	ee16 8a90 	vmov	r8, s13
 800fcc2:	d508      	bpl.n	800fcd6 <_dtoa_r+0x146>
 800fcc4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fcc8:	eeb4 6b47 	vcmp.f64	d6, d7
 800fccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcd0:	bf18      	it	ne
 800fcd2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800fcd6:	f1b8 0f16 	cmp.w	r8, #22
 800fcda:	d82b      	bhi.n	800fd34 <_dtoa_r+0x1a4>
 800fcdc:	495e      	ldr	r1, [pc, #376]	@ (800fe58 <_dtoa_r+0x2c8>)
 800fcde:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800fce2:	ed91 7b00 	vldr	d7, [r1]
 800fce6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fcea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcee:	d501      	bpl.n	800fcf4 <_dtoa_r+0x164>
 800fcf0:	f108 38ff 	add.w	r8, r8, #4294967295
 800fcf4:	2100      	movs	r1, #0
 800fcf6:	e01e      	b.n	800fd36 <_dtoa_r+0x1a6>
 800fcf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcfa:	4413      	add	r3, r2
 800fcfc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800fd00:	2920      	cmp	r1, #32
 800fd02:	bfc1      	itttt	gt
 800fd04:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800fd08:	408e      	lslgt	r6, r1
 800fd0a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800fd0e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800fd12:	bfd6      	itet	le
 800fd14:	f1c1 0120 	rsble	r1, r1, #32
 800fd18:	4331      	orrgt	r1, r6
 800fd1a:	fa04 f101 	lslle.w	r1, r4, r1
 800fd1e:	ee07 1a90 	vmov	s15, r1
 800fd22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fd26:	3b01      	subs	r3, #1
 800fd28:	ee17 1a90 	vmov	r1, s15
 800fd2c:	2501      	movs	r5, #1
 800fd2e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800fd32:	e7a8      	b.n	800fc86 <_dtoa_r+0xf6>
 800fd34:	2101      	movs	r1, #1
 800fd36:	1ad2      	subs	r2, r2, r3
 800fd38:	1e53      	subs	r3, r2, #1
 800fd3a:	9306      	str	r3, [sp, #24]
 800fd3c:	bf45      	ittet	mi
 800fd3e:	f1c2 0301 	rsbmi	r3, r2, #1
 800fd42:	9305      	strmi	r3, [sp, #20]
 800fd44:	2300      	movpl	r3, #0
 800fd46:	2300      	movmi	r3, #0
 800fd48:	bf4c      	ite	mi
 800fd4a:	9306      	strmi	r3, [sp, #24]
 800fd4c:	9305      	strpl	r3, [sp, #20]
 800fd4e:	f1b8 0f00 	cmp.w	r8, #0
 800fd52:	910c      	str	r1, [sp, #48]	@ 0x30
 800fd54:	db18      	blt.n	800fd88 <_dtoa_r+0x1f8>
 800fd56:	9b06      	ldr	r3, [sp, #24]
 800fd58:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800fd5c:	4443      	add	r3, r8
 800fd5e:	9306      	str	r3, [sp, #24]
 800fd60:	2300      	movs	r3, #0
 800fd62:	9a07      	ldr	r2, [sp, #28]
 800fd64:	2a09      	cmp	r2, #9
 800fd66:	d849      	bhi.n	800fdfc <_dtoa_r+0x26c>
 800fd68:	2a05      	cmp	r2, #5
 800fd6a:	bfc4      	itt	gt
 800fd6c:	3a04      	subgt	r2, #4
 800fd6e:	9207      	strgt	r2, [sp, #28]
 800fd70:	9a07      	ldr	r2, [sp, #28]
 800fd72:	f1a2 0202 	sub.w	r2, r2, #2
 800fd76:	bfcc      	ite	gt
 800fd78:	2400      	movgt	r4, #0
 800fd7a:	2401      	movle	r4, #1
 800fd7c:	2a03      	cmp	r2, #3
 800fd7e:	d848      	bhi.n	800fe12 <_dtoa_r+0x282>
 800fd80:	e8df f002 	tbb	[pc, r2]
 800fd84:	3a2c2e0b 	.word	0x3a2c2e0b
 800fd88:	9b05      	ldr	r3, [sp, #20]
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	eba3 0308 	sub.w	r3, r3, r8
 800fd90:	9305      	str	r3, [sp, #20]
 800fd92:	920a      	str	r2, [sp, #40]	@ 0x28
 800fd94:	f1c8 0300 	rsb	r3, r8, #0
 800fd98:	e7e3      	b.n	800fd62 <_dtoa_r+0x1d2>
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	9208      	str	r2, [sp, #32]
 800fd9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fda0:	2a00      	cmp	r2, #0
 800fda2:	dc39      	bgt.n	800fe18 <_dtoa_r+0x288>
 800fda4:	f04f 0b01 	mov.w	fp, #1
 800fda8:	46da      	mov	sl, fp
 800fdaa:	465a      	mov	r2, fp
 800fdac:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800fdb0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800fdb4:	2100      	movs	r1, #0
 800fdb6:	2004      	movs	r0, #4
 800fdb8:	f100 0614 	add.w	r6, r0, #20
 800fdbc:	4296      	cmp	r6, r2
 800fdbe:	d930      	bls.n	800fe22 <_dtoa_r+0x292>
 800fdc0:	6079      	str	r1, [r7, #4]
 800fdc2:	4648      	mov	r0, r9
 800fdc4:	9304      	str	r3, [sp, #16]
 800fdc6:	f000 fc83 	bl	80106d0 <_Balloc>
 800fdca:	9b04      	ldr	r3, [sp, #16]
 800fdcc:	4607      	mov	r7, r0
 800fdce:	2800      	cmp	r0, #0
 800fdd0:	d146      	bne.n	800fe60 <_dtoa_r+0x2d0>
 800fdd2:	4b22      	ldr	r3, [pc, #136]	@ (800fe5c <_dtoa_r+0x2cc>)
 800fdd4:	4602      	mov	r2, r0
 800fdd6:	f240 11af 	movw	r1, #431	@ 0x1af
 800fdda:	e6f2      	b.n	800fbc2 <_dtoa_r+0x32>
 800fddc:	2201      	movs	r2, #1
 800fdde:	e7dd      	b.n	800fd9c <_dtoa_r+0x20c>
 800fde0:	2200      	movs	r2, #0
 800fde2:	9208      	str	r2, [sp, #32]
 800fde4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fde6:	eb08 0b02 	add.w	fp, r8, r2
 800fdea:	f10b 0a01 	add.w	sl, fp, #1
 800fdee:	4652      	mov	r2, sl
 800fdf0:	2a01      	cmp	r2, #1
 800fdf2:	bfb8      	it	lt
 800fdf4:	2201      	movlt	r2, #1
 800fdf6:	e7db      	b.n	800fdb0 <_dtoa_r+0x220>
 800fdf8:	2201      	movs	r2, #1
 800fdfa:	e7f2      	b.n	800fde2 <_dtoa_r+0x252>
 800fdfc:	2401      	movs	r4, #1
 800fdfe:	2200      	movs	r2, #0
 800fe00:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800fe04:	f04f 3bff 	mov.w	fp, #4294967295
 800fe08:	2100      	movs	r1, #0
 800fe0a:	46da      	mov	sl, fp
 800fe0c:	2212      	movs	r2, #18
 800fe0e:	9109      	str	r1, [sp, #36]	@ 0x24
 800fe10:	e7ce      	b.n	800fdb0 <_dtoa_r+0x220>
 800fe12:	2201      	movs	r2, #1
 800fe14:	9208      	str	r2, [sp, #32]
 800fe16:	e7f5      	b.n	800fe04 <_dtoa_r+0x274>
 800fe18:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800fe1c:	46da      	mov	sl, fp
 800fe1e:	465a      	mov	r2, fp
 800fe20:	e7c6      	b.n	800fdb0 <_dtoa_r+0x220>
 800fe22:	3101      	adds	r1, #1
 800fe24:	0040      	lsls	r0, r0, #1
 800fe26:	e7c7      	b.n	800fdb8 <_dtoa_r+0x228>
 800fe28:	636f4361 	.word	0x636f4361
 800fe2c:	3fd287a7 	.word	0x3fd287a7
 800fe30:	8b60c8b3 	.word	0x8b60c8b3
 800fe34:	3fc68a28 	.word	0x3fc68a28
 800fe38:	509f79fb 	.word	0x509f79fb
 800fe3c:	3fd34413 	.word	0x3fd34413
 800fe40:	08014075 	.word	0x08014075
 800fe44:	0801408c 	.word	0x0801408c
 800fe48:	7ff00000 	.word	0x7ff00000
 800fe4c:	08014071 	.word	0x08014071
 800fe50:	08014045 	.word	0x08014045
 800fe54:	08014044 	.word	0x08014044
 800fe58:	08014188 	.word	0x08014188
 800fe5c:	080140e4 	.word	0x080140e4
 800fe60:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800fe64:	f1ba 0f0e 	cmp.w	sl, #14
 800fe68:	6010      	str	r0, [r2, #0]
 800fe6a:	d86f      	bhi.n	800ff4c <_dtoa_r+0x3bc>
 800fe6c:	2c00      	cmp	r4, #0
 800fe6e:	d06d      	beq.n	800ff4c <_dtoa_r+0x3bc>
 800fe70:	f1b8 0f00 	cmp.w	r8, #0
 800fe74:	f340 80c2 	ble.w	800fffc <_dtoa_r+0x46c>
 800fe78:	4aca      	ldr	r2, [pc, #808]	@ (80101a4 <_dtoa_r+0x614>)
 800fe7a:	f008 010f 	and.w	r1, r8, #15
 800fe7e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800fe82:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800fe86:	ed92 7b00 	vldr	d7, [r2]
 800fe8a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800fe8e:	f000 80a9 	beq.w	800ffe4 <_dtoa_r+0x454>
 800fe92:	4ac5      	ldr	r2, [pc, #788]	@ (80101a8 <_dtoa_r+0x618>)
 800fe94:	ed92 6b08 	vldr	d6, [r2, #32]
 800fe98:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800fe9c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fea0:	f001 010f 	and.w	r1, r1, #15
 800fea4:	2203      	movs	r2, #3
 800fea6:	48c0      	ldr	r0, [pc, #768]	@ (80101a8 <_dtoa_r+0x618>)
 800fea8:	2900      	cmp	r1, #0
 800feaa:	f040 809d 	bne.w	800ffe8 <_dtoa_r+0x458>
 800feae:	ed9d 6b02 	vldr	d6, [sp, #8]
 800feb2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800feb6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800feba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800febc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fec0:	2900      	cmp	r1, #0
 800fec2:	f000 80c1 	beq.w	8010048 <_dtoa_r+0x4b8>
 800fec6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800feca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fed2:	f140 80b9 	bpl.w	8010048 <_dtoa_r+0x4b8>
 800fed6:	f1ba 0f00 	cmp.w	sl, #0
 800feda:	f000 80b5 	beq.w	8010048 <_dtoa_r+0x4b8>
 800fede:	f1bb 0f00 	cmp.w	fp, #0
 800fee2:	dd31      	ble.n	800ff48 <_dtoa_r+0x3b8>
 800fee4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800fee8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800feec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fef0:	f108 31ff 	add.w	r1, r8, #4294967295
 800fef4:	9104      	str	r1, [sp, #16]
 800fef6:	3201      	adds	r2, #1
 800fef8:	465c      	mov	r4, fp
 800fefa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fefe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ff02:	ee07 2a90 	vmov	s15, r2
 800ff06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ff0a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ff0e:	ee15 2a90 	vmov	r2, s11
 800ff12:	ec51 0b15 	vmov	r0, r1, d5
 800ff16:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ff1a:	2c00      	cmp	r4, #0
 800ff1c:	f040 8098 	bne.w	8010050 <_dtoa_r+0x4c0>
 800ff20:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ff24:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ff28:	ec41 0b17 	vmov	d7, r0, r1
 800ff2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ff30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff34:	f300 8261 	bgt.w	80103fa <_dtoa_r+0x86a>
 800ff38:	eeb1 7b47 	vneg.f64	d7, d7
 800ff3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ff40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff44:	f100 80f5 	bmi.w	8010132 <_dtoa_r+0x5a2>
 800ff48:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ff4c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ff4e:	2a00      	cmp	r2, #0
 800ff50:	f2c0 812c 	blt.w	80101ac <_dtoa_r+0x61c>
 800ff54:	f1b8 0f0e 	cmp.w	r8, #14
 800ff58:	f300 8128 	bgt.w	80101ac <_dtoa_r+0x61c>
 800ff5c:	4b91      	ldr	r3, [pc, #580]	@ (80101a4 <_dtoa_r+0x614>)
 800ff5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ff62:	ed93 6b00 	vldr	d6, [r3]
 800ff66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	da03      	bge.n	800ff74 <_dtoa_r+0x3e4>
 800ff6c:	f1ba 0f00 	cmp.w	sl, #0
 800ff70:	f340 80d2 	ble.w	8010118 <_dtoa_r+0x588>
 800ff74:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800ff78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff7c:	463e      	mov	r6, r7
 800ff7e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ff82:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ff86:	ee15 3a10 	vmov	r3, s10
 800ff8a:	3330      	adds	r3, #48	@ 0x30
 800ff8c:	f806 3b01 	strb.w	r3, [r6], #1
 800ff90:	1bf3      	subs	r3, r6, r7
 800ff92:	459a      	cmp	sl, r3
 800ff94:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ff98:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ff9c:	f040 80f8 	bne.w	8010190 <_dtoa_r+0x600>
 800ffa0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ffa4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ffa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffac:	f300 80dd 	bgt.w	801016a <_dtoa_r+0x5da>
 800ffb0:	eeb4 7b46 	vcmp.f64	d7, d6
 800ffb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffb8:	d104      	bne.n	800ffc4 <_dtoa_r+0x434>
 800ffba:	ee15 3a10 	vmov	r3, s10
 800ffbe:	07db      	lsls	r3, r3, #31
 800ffc0:	f100 80d3 	bmi.w	801016a <_dtoa_r+0x5da>
 800ffc4:	9901      	ldr	r1, [sp, #4]
 800ffc6:	4648      	mov	r0, r9
 800ffc8:	f000 fbc2 	bl	8010750 <_Bfree>
 800ffcc:	2300      	movs	r3, #0
 800ffce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ffd0:	7033      	strb	r3, [r6, #0]
 800ffd2:	f108 0301 	add.w	r3, r8, #1
 800ffd6:	6013      	str	r3, [r2, #0]
 800ffd8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	f000 8304 	beq.w	80105e8 <_dtoa_r+0xa58>
 800ffe0:	601e      	str	r6, [r3, #0]
 800ffe2:	e301      	b.n	80105e8 <_dtoa_r+0xa58>
 800ffe4:	2202      	movs	r2, #2
 800ffe6:	e75e      	b.n	800fea6 <_dtoa_r+0x316>
 800ffe8:	07cc      	lsls	r4, r1, #31
 800ffea:	d504      	bpl.n	800fff6 <_dtoa_r+0x466>
 800ffec:	ed90 6b00 	vldr	d6, [r0]
 800fff0:	3201      	adds	r2, #1
 800fff2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fff6:	1049      	asrs	r1, r1, #1
 800fff8:	3008      	adds	r0, #8
 800fffa:	e755      	b.n	800fea8 <_dtoa_r+0x318>
 800fffc:	d022      	beq.n	8010044 <_dtoa_r+0x4b4>
 800fffe:	f1c8 0100 	rsb	r1, r8, #0
 8010002:	4a68      	ldr	r2, [pc, #416]	@ (80101a4 <_dtoa_r+0x614>)
 8010004:	f001 000f 	and.w	r0, r1, #15
 8010008:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801000c:	ed92 7b00 	vldr	d7, [r2]
 8010010:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010014:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010018:	4863      	ldr	r0, [pc, #396]	@ (80101a8 <_dtoa_r+0x618>)
 801001a:	1109      	asrs	r1, r1, #4
 801001c:	2400      	movs	r4, #0
 801001e:	2202      	movs	r2, #2
 8010020:	b929      	cbnz	r1, 801002e <_dtoa_r+0x49e>
 8010022:	2c00      	cmp	r4, #0
 8010024:	f43f af49 	beq.w	800feba <_dtoa_r+0x32a>
 8010028:	ed8d 7b02 	vstr	d7, [sp, #8]
 801002c:	e745      	b.n	800feba <_dtoa_r+0x32a>
 801002e:	07ce      	lsls	r6, r1, #31
 8010030:	d505      	bpl.n	801003e <_dtoa_r+0x4ae>
 8010032:	ed90 6b00 	vldr	d6, [r0]
 8010036:	3201      	adds	r2, #1
 8010038:	2401      	movs	r4, #1
 801003a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801003e:	1049      	asrs	r1, r1, #1
 8010040:	3008      	adds	r0, #8
 8010042:	e7ed      	b.n	8010020 <_dtoa_r+0x490>
 8010044:	2202      	movs	r2, #2
 8010046:	e738      	b.n	800feba <_dtoa_r+0x32a>
 8010048:	f8cd 8010 	str.w	r8, [sp, #16]
 801004c:	4654      	mov	r4, sl
 801004e:	e754      	b.n	800fefa <_dtoa_r+0x36a>
 8010050:	4a54      	ldr	r2, [pc, #336]	@ (80101a4 <_dtoa_r+0x614>)
 8010052:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010056:	ed12 4b02 	vldr	d4, [r2, #-8]
 801005a:	9a08      	ldr	r2, [sp, #32]
 801005c:	ec41 0b17 	vmov	d7, r0, r1
 8010060:	443c      	add	r4, r7
 8010062:	b34a      	cbz	r2, 80100b8 <_dtoa_r+0x528>
 8010064:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010068:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801006c:	463e      	mov	r6, r7
 801006e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010072:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010076:	ee35 7b47 	vsub.f64	d7, d5, d7
 801007a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801007e:	ee14 2a90 	vmov	r2, s9
 8010082:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010086:	3230      	adds	r2, #48	@ 0x30
 8010088:	ee36 6b45 	vsub.f64	d6, d6, d5
 801008c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010094:	f806 2b01 	strb.w	r2, [r6], #1
 8010098:	d438      	bmi.n	801010c <_dtoa_r+0x57c>
 801009a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801009e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80100a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100a6:	d462      	bmi.n	801016e <_dtoa_r+0x5de>
 80100a8:	42a6      	cmp	r6, r4
 80100aa:	f43f af4d 	beq.w	800ff48 <_dtoa_r+0x3b8>
 80100ae:	ee27 7b03 	vmul.f64	d7, d7, d3
 80100b2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80100b6:	e7e0      	b.n	801007a <_dtoa_r+0x4ea>
 80100b8:	4621      	mov	r1, r4
 80100ba:	463e      	mov	r6, r7
 80100bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80100c0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80100c4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80100c8:	ee14 2a90 	vmov	r2, s9
 80100cc:	3230      	adds	r2, #48	@ 0x30
 80100ce:	f806 2b01 	strb.w	r2, [r6], #1
 80100d2:	42a6      	cmp	r6, r4
 80100d4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80100d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80100dc:	d119      	bne.n	8010112 <_dtoa_r+0x582>
 80100de:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80100e2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80100e6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80100ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ee:	dc3e      	bgt.n	801016e <_dtoa_r+0x5de>
 80100f0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80100f4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80100f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100fc:	f57f af24 	bpl.w	800ff48 <_dtoa_r+0x3b8>
 8010100:	460e      	mov	r6, r1
 8010102:	3901      	subs	r1, #1
 8010104:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010108:	2b30      	cmp	r3, #48	@ 0x30
 801010a:	d0f9      	beq.n	8010100 <_dtoa_r+0x570>
 801010c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010110:	e758      	b.n	800ffc4 <_dtoa_r+0x434>
 8010112:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010116:	e7d5      	b.n	80100c4 <_dtoa_r+0x534>
 8010118:	d10b      	bne.n	8010132 <_dtoa_r+0x5a2>
 801011a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801011e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010122:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010126:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801012a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801012e:	f2c0 8161 	blt.w	80103f4 <_dtoa_r+0x864>
 8010132:	2400      	movs	r4, #0
 8010134:	4625      	mov	r5, r4
 8010136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010138:	43db      	mvns	r3, r3
 801013a:	9304      	str	r3, [sp, #16]
 801013c:	463e      	mov	r6, r7
 801013e:	f04f 0800 	mov.w	r8, #0
 8010142:	4621      	mov	r1, r4
 8010144:	4648      	mov	r0, r9
 8010146:	f000 fb03 	bl	8010750 <_Bfree>
 801014a:	2d00      	cmp	r5, #0
 801014c:	d0de      	beq.n	801010c <_dtoa_r+0x57c>
 801014e:	f1b8 0f00 	cmp.w	r8, #0
 8010152:	d005      	beq.n	8010160 <_dtoa_r+0x5d0>
 8010154:	45a8      	cmp	r8, r5
 8010156:	d003      	beq.n	8010160 <_dtoa_r+0x5d0>
 8010158:	4641      	mov	r1, r8
 801015a:	4648      	mov	r0, r9
 801015c:	f000 faf8 	bl	8010750 <_Bfree>
 8010160:	4629      	mov	r1, r5
 8010162:	4648      	mov	r0, r9
 8010164:	f000 faf4 	bl	8010750 <_Bfree>
 8010168:	e7d0      	b.n	801010c <_dtoa_r+0x57c>
 801016a:	f8cd 8010 	str.w	r8, [sp, #16]
 801016e:	4633      	mov	r3, r6
 8010170:	461e      	mov	r6, r3
 8010172:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010176:	2a39      	cmp	r2, #57	@ 0x39
 8010178:	d106      	bne.n	8010188 <_dtoa_r+0x5f8>
 801017a:	429f      	cmp	r7, r3
 801017c:	d1f8      	bne.n	8010170 <_dtoa_r+0x5e0>
 801017e:	9a04      	ldr	r2, [sp, #16]
 8010180:	3201      	adds	r2, #1
 8010182:	9204      	str	r2, [sp, #16]
 8010184:	2230      	movs	r2, #48	@ 0x30
 8010186:	703a      	strb	r2, [r7, #0]
 8010188:	781a      	ldrb	r2, [r3, #0]
 801018a:	3201      	adds	r2, #1
 801018c:	701a      	strb	r2, [r3, #0]
 801018e:	e7bd      	b.n	801010c <_dtoa_r+0x57c>
 8010190:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010194:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801019c:	f47f aeef 	bne.w	800ff7e <_dtoa_r+0x3ee>
 80101a0:	e710      	b.n	800ffc4 <_dtoa_r+0x434>
 80101a2:	bf00      	nop
 80101a4:	08014188 	.word	0x08014188
 80101a8:	08014160 	.word	0x08014160
 80101ac:	9908      	ldr	r1, [sp, #32]
 80101ae:	2900      	cmp	r1, #0
 80101b0:	f000 80e3 	beq.w	801037a <_dtoa_r+0x7ea>
 80101b4:	9907      	ldr	r1, [sp, #28]
 80101b6:	2901      	cmp	r1, #1
 80101b8:	f300 80c8 	bgt.w	801034c <_dtoa_r+0x7bc>
 80101bc:	2d00      	cmp	r5, #0
 80101be:	f000 80c1 	beq.w	8010344 <_dtoa_r+0x7b4>
 80101c2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80101c6:	9e05      	ldr	r6, [sp, #20]
 80101c8:	461c      	mov	r4, r3
 80101ca:	9304      	str	r3, [sp, #16]
 80101cc:	9b05      	ldr	r3, [sp, #20]
 80101ce:	4413      	add	r3, r2
 80101d0:	9305      	str	r3, [sp, #20]
 80101d2:	9b06      	ldr	r3, [sp, #24]
 80101d4:	2101      	movs	r1, #1
 80101d6:	4413      	add	r3, r2
 80101d8:	4648      	mov	r0, r9
 80101da:	9306      	str	r3, [sp, #24]
 80101dc:	f000 fb6c 	bl	80108b8 <__i2b>
 80101e0:	9b04      	ldr	r3, [sp, #16]
 80101e2:	4605      	mov	r5, r0
 80101e4:	b166      	cbz	r6, 8010200 <_dtoa_r+0x670>
 80101e6:	9a06      	ldr	r2, [sp, #24]
 80101e8:	2a00      	cmp	r2, #0
 80101ea:	dd09      	ble.n	8010200 <_dtoa_r+0x670>
 80101ec:	42b2      	cmp	r2, r6
 80101ee:	9905      	ldr	r1, [sp, #20]
 80101f0:	bfa8      	it	ge
 80101f2:	4632      	movge	r2, r6
 80101f4:	1a89      	subs	r1, r1, r2
 80101f6:	9105      	str	r1, [sp, #20]
 80101f8:	9906      	ldr	r1, [sp, #24]
 80101fa:	1ab6      	subs	r6, r6, r2
 80101fc:	1a8a      	subs	r2, r1, r2
 80101fe:	9206      	str	r2, [sp, #24]
 8010200:	b1fb      	cbz	r3, 8010242 <_dtoa_r+0x6b2>
 8010202:	9a08      	ldr	r2, [sp, #32]
 8010204:	2a00      	cmp	r2, #0
 8010206:	f000 80bc 	beq.w	8010382 <_dtoa_r+0x7f2>
 801020a:	b19c      	cbz	r4, 8010234 <_dtoa_r+0x6a4>
 801020c:	4629      	mov	r1, r5
 801020e:	4622      	mov	r2, r4
 8010210:	4648      	mov	r0, r9
 8010212:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010214:	f000 fc10 	bl	8010a38 <__pow5mult>
 8010218:	9a01      	ldr	r2, [sp, #4]
 801021a:	4601      	mov	r1, r0
 801021c:	4605      	mov	r5, r0
 801021e:	4648      	mov	r0, r9
 8010220:	f000 fb60 	bl	80108e4 <__multiply>
 8010224:	9901      	ldr	r1, [sp, #4]
 8010226:	9004      	str	r0, [sp, #16]
 8010228:	4648      	mov	r0, r9
 801022a:	f000 fa91 	bl	8010750 <_Bfree>
 801022e:	9a04      	ldr	r2, [sp, #16]
 8010230:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010232:	9201      	str	r2, [sp, #4]
 8010234:	1b1a      	subs	r2, r3, r4
 8010236:	d004      	beq.n	8010242 <_dtoa_r+0x6b2>
 8010238:	9901      	ldr	r1, [sp, #4]
 801023a:	4648      	mov	r0, r9
 801023c:	f000 fbfc 	bl	8010a38 <__pow5mult>
 8010240:	9001      	str	r0, [sp, #4]
 8010242:	2101      	movs	r1, #1
 8010244:	4648      	mov	r0, r9
 8010246:	f000 fb37 	bl	80108b8 <__i2b>
 801024a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801024c:	4604      	mov	r4, r0
 801024e:	2b00      	cmp	r3, #0
 8010250:	f000 81d0 	beq.w	80105f4 <_dtoa_r+0xa64>
 8010254:	461a      	mov	r2, r3
 8010256:	4601      	mov	r1, r0
 8010258:	4648      	mov	r0, r9
 801025a:	f000 fbed 	bl	8010a38 <__pow5mult>
 801025e:	9b07      	ldr	r3, [sp, #28]
 8010260:	2b01      	cmp	r3, #1
 8010262:	4604      	mov	r4, r0
 8010264:	f300 8095 	bgt.w	8010392 <_dtoa_r+0x802>
 8010268:	9b02      	ldr	r3, [sp, #8]
 801026a:	2b00      	cmp	r3, #0
 801026c:	f040 808b 	bne.w	8010386 <_dtoa_r+0x7f6>
 8010270:	9b03      	ldr	r3, [sp, #12]
 8010272:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010276:	2a00      	cmp	r2, #0
 8010278:	f040 8087 	bne.w	801038a <_dtoa_r+0x7fa>
 801027c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010280:	0d12      	lsrs	r2, r2, #20
 8010282:	0512      	lsls	r2, r2, #20
 8010284:	2a00      	cmp	r2, #0
 8010286:	f000 8082 	beq.w	801038e <_dtoa_r+0x7fe>
 801028a:	9b05      	ldr	r3, [sp, #20]
 801028c:	3301      	adds	r3, #1
 801028e:	9305      	str	r3, [sp, #20]
 8010290:	9b06      	ldr	r3, [sp, #24]
 8010292:	3301      	adds	r3, #1
 8010294:	9306      	str	r3, [sp, #24]
 8010296:	2301      	movs	r3, #1
 8010298:	930b      	str	r3, [sp, #44]	@ 0x2c
 801029a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801029c:	2b00      	cmp	r3, #0
 801029e:	f000 81af 	beq.w	8010600 <_dtoa_r+0xa70>
 80102a2:	6922      	ldr	r2, [r4, #16]
 80102a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80102a8:	6910      	ldr	r0, [r2, #16]
 80102aa:	f000 fab9 	bl	8010820 <__hi0bits>
 80102ae:	f1c0 0020 	rsb	r0, r0, #32
 80102b2:	9b06      	ldr	r3, [sp, #24]
 80102b4:	4418      	add	r0, r3
 80102b6:	f010 001f 	ands.w	r0, r0, #31
 80102ba:	d076      	beq.n	80103aa <_dtoa_r+0x81a>
 80102bc:	f1c0 0220 	rsb	r2, r0, #32
 80102c0:	2a04      	cmp	r2, #4
 80102c2:	dd69      	ble.n	8010398 <_dtoa_r+0x808>
 80102c4:	9b05      	ldr	r3, [sp, #20]
 80102c6:	f1c0 001c 	rsb	r0, r0, #28
 80102ca:	4403      	add	r3, r0
 80102cc:	9305      	str	r3, [sp, #20]
 80102ce:	9b06      	ldr	r3, [sp, #24]
 80102d0:	4406      	add	r6, r0
 80102d2:	4403      	add	r3, r0
 80102d4:	9306      	str	r3, [sp, #24]
 80102d6:	9b05      	ldr	r3, [sp, #20]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	dd05      	ble.n	80102e8 <_dtoa_r+0x758>
 80102dc:	9901      	ldr	r1, [sp, #4]
 80102de:	461a      	mov	r2, r3
 80102e0:	4648      	mov	r0, r9
 80102e2:	f000 fc03 	bl	8010aec <__lshift>
 80102e6:	9001      	str	r0, [sp, #4]
 80102e8:	9b06      	ldr	r3, [sp, #24]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	dd05      	ble.n	80102fa <_dtoa_r+0x76a>
 80102ee:	4621      	mov	r1, r4
 80102f0:	461a      	mov	r2, r3
 80102f2:	4648      	mov	r0, r9
 80102f4:	f000 fbfa 	bl	8010aec <__lshift>
 80102f8:	4604      	mov	r4, r0
 80102fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d056      	beq.n	80103ae <_dtoa_r+0x81e>
 8010300:	9801      	ldr	r0, [sp, #4]
 8010302:	4621      	mov	r1, r4
 8010304:	f000 fc5e 	bl	8010bc4 <__mcmp>
 8010308:	2800      	cmp	r0, #0
 801030a:	da50      	bge.n	80103ae <_dtoa_r+0x81e>
 801030c:	f108 33ff 	add.w	r3, r8, #4294967295
 8010310:	9304      	str	r3, [sp, #16]
 8010312:	9901      	ldr	r1, [sp, #4]
 8010314:	2300      	movs	r3, #0
 8010316:	220a      	movs	r2, #10
 8010318:	4648      	mov	r0, r9
 801031a:	f000 fa3b 	bl	8010794 <__multadd>
 801031e:	9b08      	ldr	r3, [sp, #32]
 8010320:	9001      	str	r0, [sp, #4]
 8010322:	2b00      	cmp	r3, #0
 8010324:	f000 816e 	beq.w	8010604 <_dtoa_r+0xa74>
 8010328:	4629      	mov	r1, r5
 801032a:	2300      	movs	r3, #0
 801032c:	220a      	movs	r2, #10
 801032e:	4648      	mov	r0, r9
 8010330:	f000 fa30 	bl	8010794 <__multadd>
 8010334:	f1bb 0f00 	cmp.w	fp, #0
 8010338:	4605      	mov	r5, r0
 801033a:	dc64      	bgt.n	8010406 <_dtoa_r+0x876>
 801033c:	9b07      	ldr	r3, [sp, #28]
 801033e:	2b02      	cmp	r3, #2
 8010340:	dc3e      	bgt.n	80103c0 <_dtoa_r+0x830>
 8010342:	e060      	b.n	8010406 <_dtoa_r+0x876>
 8010344:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010346:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801034a:	e73c      	b.n	80101c6 <_dtoa_r+0x636>
 801034c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010350:	42a3      	cmp	r3, r4
 8010352:	bfbf      	itttt	lt
 8010354:	1ae2      	sublt	r2, r4, r3
 8010356:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010358:	189b      	addlt	r3, r3, r2
 801035a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801035c:	bfae      	itee	ge
 801035e:	1b1c      	subge	r4, r3, r4
 8010360:	4623      	movlt	r3, r4
 8010362:	2400      	movlt	r4, #0
 8010364:	f1ba 0f00 	cmp.w	sl, #0
 8010368:	bfb5      	itete	lt
 801036a:	9a05      	ldrlt	r2, [sp, #20]
 801036c:	9e05      	ldrge	r6, [sp, #20]
 801036e:	eba2 060a 	sublt.w	r6, r2, sl
 8010372:	4652      	movge	r2, sl
 8010374:	bfb8      	it	lt
 8010376:	2200      	movlt	r2, #0
 8010378:	e727      	b.n	80101ca <_dtoa_r+0x63a>
 801037a:	9e05      	ldr	r6, [sp, #20]
 801037c:	9d08      	ldr	r5, [sp, #32]
 801037e:	461c      	mov	r4, r3
 8010380:	e730      	b.n	80101e4 <_dtoa_r+0x654>
 8010382:	461a      	mov	r2, r3
 8010384:	e758      	b.n	8010238 <_dtoa_r+0x6a8>
 8010386:	2300      	movs	r3, #0
 8010388:	e786      	b.n	8010298 <_dtoa_r+0x708>
 801038a:	9b02      	ldr	r3, [sp, #8]
 801038c:	e784      	b.n	8010298 <_dtoa_r+0x708>
 801038e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010390:	e783      	b.n	801029a <_dtoa_r+0x70a>
 8010392:	2300      	movs	r3, #0
 8010394:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010396:	e784      	b.n	80102a2 <_dtoa_r+0x712>
 8010398:	d09d      	beq.n	80102d6 <_dtoa_r+0x746>
 801039a:	9b05      	ldr	r3, [sp, #20]
 801039c:	321c      	adds	r2, #28
 801039e:	4413      	add	r3, r2
 80103a0:	9305      	str	r3, [sp, #20]
 80103a2:	9b06      	ldr	r3, [sp, #24]
 80103a4:	4416      	add	r6, r2
 80103a6:	4413      	add	r3, r2
 80103a8:	e794      	b.n	80102d4 <_dtoa_r+0x744>
 80103aa:	4602      	mov	r2, r0
 80103ac:	e7f5      	b.n	801039a <_dtoa_r+0x80a>
 80103ae:	f1ba 0f00 	cmp.w	sl, #0
 80103b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80103b6:	46d3      	mov	fp, sl
 80103b8:	dc21      	bgt.n	80103fe <_dtoa_r+0x86e>
 80103ba:	9b07      	ldr	r3, [sp, #28]
 80103bc:	2b02      	cmp	r3, #2
 80103be:	dd1e      	ble.n	80103fe <_dtoa_r+0x86e>
 80103c0:	f1bb 0f00 	cmp.w	fp, #0
 80103c4:	f47f aeb7 	bne.w	8010136 <_dtoa_r+0x5a6>
 80103c8:	4621      	mov	r1, r4
 80103ca:	465b      	mov	r3, fp
 80103cc:	2205      	movs	r2, #5
 80103ce:	4648      	mov	r0, r9
 80103d0:	f000 f9e0 	bl	8010794 <__multadd>
 80103d4:	4601      	mov	r1, r0
 80103d6:	4604      	mov	r4, r0
 80103d8:	9801      	ldr	r0, [sp, #4]
 80103da:	f000 fbf3 	bl	8010bc4 <__mcmp>
 80103de:	2800      	cmp	r0, #0
 80103e0:	f77f aea9 	ble.w	8010136 <_dtoa_r+0x5a6>
 80103e4:	463e      	mov	r6, r7
 80103e6:	2331      	movs	r3, #49	@ 0x31
 80103e8:	f806 3b01 	strb.w	r3, [r6], #1
 80103ec:	9b04      	ldr	r3, [sp, #16]
 80103ee:	3301      	adds	r3, #1
 80103f0:	9304      	str	r3, [sp, #16]
 80103f2:	e6a4      	b.n	801013e <_dtoa_r+0x5ae>
 80103f4:	f8cd 8010 	str.w	r8, [sp, #16]
 80103f8:	4654      	mov	r4, sl
 80103fa:	4625      	mov	r5, r4
 80103fc:	e7f2      	b.n	80103e4 <_dtoa_r+0x854>
 80103fe:	9b08      	ldr	r3, [sp, #32]
 8010400:	2b00      	cmp	r3, #0
 8010402:	f000 8103 	beq.w	801060c <_dtoa_r+0xa7c>
 8010406:	2e00      	cmp	r6, #0
 8010408:	dd05      	ble.n	8010416 <_dtoa_r+0x886>
 801040a:	4629      	mov	r1, r5
 801040c:	4632      	mov	r2, r6
 801040e:	4648      	mov	r0, r9
 8010410:	f000 fb6c 	bl	8010aec <__lshift>
 8010414:	4605      	mov	r5, r0
 8010416:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010418:	2b00      	cmp	r3, #0
 801041a:	d058      	beq.n	80104ce <_dtoa_r+0x93e>
 801041c:	6869      	ldr	r1, [r5, #4]
 801041e:	4648      	mov	r0, r9
 8010420:	f000 f956 	bl	80106d0 <_Balloc>
 8010424:	4606      	mov	r6, r0
 8010426:	b928      	cbnz	r0, 8010434 <_dtoa_r+0x8a4>
 8010428:	4b82      	ldr	r3, [pc, #520]	@ (8010634 <_dtoa_r+0xaa4>)
 801042a:	4602      	mov	r2, r0
 801042c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010430:	f7ff bbc7 	b.w	800fbc2 <_dtoa_r+0x32>
 8010434:	692a      	ldr	r2, [r5, #16]
 8010436:	3202      	adds	r2, #2
 8010438:	0092      	lsls	r2, r2, #2
 801043a:	f105 010c 	add.w	r1, r5, #12
 801043e:	300c      	adds	r0, #12
 8010440:	f7ff fb0f 	bl	800fa62 <memcpy>
 8010444:	2201      	movs	r2, #1
 8010446:	4631      	mov	r1, r6
 8010448:	4648      	mov	r0, r9
 801044a:	f000 fb4f 	bl	8010aec <__lshift>
 801044e:	1c7b      	adds	r3, r7, #1
 8010450:	9305      	str	r3, [sp, #20]
 8010452:	eb07 030b 	add.w	r3, r7, fp
 8010456:	9309      	str	r3, [sp, #36]	@ 0x24
 8010458:	9b02      	ldr	r3, [sp, #8]
 801045a:	f003 0301 	and.w	r3, r3, #1
 801045e:	46a8      	mov	r8, r5
 8010460:	9308      	str	r3, [sp, #32]
 8010462:	4605      	mov	r5, r0
 8010464:	9b05      	ldr	r3, [sp, #20]
 8010466:	9801      	ldr	r0, [sp, #4]
 8010468:	4621      	mov	r1, r4
 801046a:	f103 3bff 	add.w	fp, r3, #4294967295
 801046e:	f7ff fb06 	bl	800fa7e <quorem>
 8010472:	4641      	mov	r1, r8
 8010474:	9002      	str	r0, [sp, #8]
 8010476:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801047a:	9801      	ldr	r0, [sp, #4]
 801047c:	f000 fba2 	bl	8010bc4 <__mcmp>
 8010480:	462a      	mov	r2, r5
 8010482:	9006      	str	r0, [sp, #24]
 8010484:	4621      	mov	r1, r4
 8010486:	4648      	mov	r0, r9
 8010488:	f000 fbb8 	bl	8010bfc <__mdiff>
 801048c:	68c2      	ldr	r2, [r0, #12]
 801048e:	4606      	mov	r6, r0
 8010490:	b9fa      	cbnz	r2, 80104d2 <_dtoa_r+0x942>
 8010492:	4601      	mov	r1, r0
 8010494:	9801      	ldr	r0, [sp, #4]
 8010496:	f000 fb95 	bl	8010bc4 <__mcmp>
 801049a:	4602      	mov	r2, r0
 801049c:	4631      	mov	r1, r6
 801049e:	4648      	mov	r0, r9
 80104a0:	920a      	str	r2, [sp, #40]	@ 0x28
 80104a2:	f000 f955 	bl	8010750 <_Bfree>
 80104a6:	9b07      	ldr	r3, [sp, #28]
 80104a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80104aa:	9e05      	ldr	r6, [sp, #20]
 80104ac:	ea43 0102 	orr.w	r1, r3, r2
 80104b0:	9b08      	ldr	r3, [sp, #32]
 80104b2:	4319      	orrs	r1, r3
 80104b4:	d10f      	bne.n	80104d6 <_dtoa_r+0x946>
 80104b6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80104ba:	d028      	beq.n	801050e <_dtoa_r+0x97e>
 80104bc:	9b06      	ldr	r3, [sp, #24]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	dd02      	ble.n	80104c8 <_dtoa_r+0x938>
 80104c2:	9b02      	ldr	r3, [sp, #8]
 80104c4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80104c8:	f88b a000 	strb.w	sl, [fp]
 80104cc:	e639      	b.n	8010142 <_dtoa_r+0x5b2>
 80104ce:	4628      	mov	r0, r5
 80104d0:	e7bd      	b.n	801044e <_dtoa_r+0x8be>
 80104d2:	2201      	movs	r2, #1
 80104d4:	e7e2      	b.n	801049c <_dtoa_r+0x90c>
 80104d6:	9b06      	ldr	r3, [sp, #24]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	db04      	blt.n	80104e6 <_dtoa_r+0x956>
 80104dc:	9907      	ldr	r1, [sp, #28]
 80104de:	430b      	orrs	r3, r1
 80104e0:	9908      	ldr	r1, [sp, #32]
 80104e2:	430b      	orrs	r3, r1
 80104e4:	d120      	bne.n	8010528 <_dtoa_r+0x998>
 80104e6:	2a00      	cmp	r2, #0
 80104e8:	ddee      	ble.n	80104c8 <_dtoa_r+0x938>
 80104ea:	9901      	ldr	r1, [sp, #4]
 80104ec:	2201      	movs	r2, #1
 80104ee:	4648      	mov	r0, r9
 80104f0:	f000 fafc 	bl	8010aec <__lshift>
 80104f4:	4621      	mov	r1, r4
 80104f6:	9001      	str	r0, [sp, #4]
 80104f8:	f000 fb64 	bl	8010bc4 <__mcmp>
 80104fc:	2800      	cmp	r0, #0
 80104fe:	dc03      	bgt.n	8010508 <_dtoa_r+0x978>
 8010500:	d1e2      	bne.n	80104c8 <_dtoa_r+0x938>
 8010502:	f01a 0f01 	tst.w	sl, #1
 8010506:	d0df      	beq.n	80104c8 <_dtoa_r+0x938>
 8010508:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801050c:	d1d9      	bne.n	80104c2 <_dtoa_r+0x932>
 801050e:	2339      	movs	r3, #57	@ 0x39
 8010510:	f88b 3000 	strb.w	r3, [fp]
 8010514:	4633      	mov	r3, r6
 8010516:	461e      	mov	r6, r3
 8010518:	3b01      	subs	r3, #1
 801051a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801051e:	2a39      	cmp	r2, #57	@ 0x39
 8010520:	d053      	beq.n	80105ca <_dtoa_r+0xa3a>
 8010522:	3201      	adds	r2, #1
 8010524:	701a      	strb	r2, [r3, #0]
 8010526:	e60c      	b.n	8010142 <_dtoa_r+0x5b2>
 8010528:	2a00      	cmp	r2, #0
 801052a:	dd07      	ble.n	801053c <_dtoa_r+0x9ac>
 801052c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010530:	d0ed      	beq.n	801050e <_dtoa_r+0x97e>
 8010532:	f10a 0301 	add.w	r3, sl, #1
 8010536:	f88b 3000 	strb.w	r3, [fp]
 801053a:	e602      	b.n	8010142 <_dtoa_r+0x5b2>
 801053c:	9b05      	ldr	r3, [sp, #20]
 801053e:	9a05      	ldr	r2, [sp, #20]
 8010540:	f803 ac01 	strb.w	sl, [r3, #-1]
 8010544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010546:	4293      	cmp	r3, r2
 8010548:	d029      	beq.n	801059e <_dtoa_r+0xa0e>
 801054a:	9901      	ldr	r1, [sp, #4]
 801054c:	2300      	movs	r3, #0
 801054e:	220a      	movs	r2, #10
 8010550:	4648      	mov	r0, r9
 8010552:	f000 f91f 	bl	8010794 <__multadd>
 8010556:	45a8      	cmp	r8, r5
 8010558:	9001      	str	r0, [sp, #4]
 801055a:	f04f 0300 	mov.w	r3, #0
 801055e:	f04f 020a 	mov.w	r2, #10
 8010562:	4641      	mov	r1, r8
 8010564:	4648      	mov	r0, r9
 8010566:	d107      	bne.n	8010578 <_dtoa_r+0x9e8>
 8010568:	f000 f914 	bl	8010794 <__multadd>
 801056c:	4680      	mov	r8, r0
 801056e:	4605      	mov	r5, r0
 8010570:	9b05      	ldr	r3, [sp, #20]
 8010572:	3301      	adds	r3, #1
 8010574:	9305      	str	r3, [sp, #20]
 8010576:	e775      	b.n	8010464 <_dtoa_r+0x8d4>
 8010578:	f000 f90c 	bl	8010794 <__multadd>
 801057c:	4629      	mov	r1, r5
 801057e:	4680      	mov	r8, r0
 8010580:	2300      	movs	r3, #0
 8010582:	220a      	movs	r2, #10
 8010584:	4648      	mov	r0, r9
 8010586:	f000 f905 	bl	8010794 <__multadd>
 801058a:	4605      	mov	r5, r0
 801058c:	e7f0      	b.n	8010570 <_dtoa_r+0x9e0>
 801058e:	f1bb 0f00 	cmp.w	fp, #0
 8010592:	bfcc      	ite	gt
 8010594:	465e      	movgt	r6, fp
 8010596:	2601      	movle	r6, #1
 8010598:	443e      	add	r6, r7
 801059a:	f04f 0800 	mov.w	r8, #0
 801059e:	9901      	ldr	r1, [sp, #4]
 80105a0:	2201      	movs	r2, #1
 80105a2:	4648      	mov	r0, r9
 80105a4:	f000 faa2 	bl	8010aec <__lshift>
 80105a8:	4621      	mov	r1, r4
 80105aa:	9001      	str	r0, [sp, #4]
 80105ac:	f000 fb0a 	bl	8010bc4 <__mcmp>
 80105b0:	2800      	cmp	r0, #0
 80105b2:	dcaf      	bgt.n	8010514 <_dtoa_r+0x984>
 80105b4:	d102      	bne.n	80105bc <_dtoa_r+0xa2c>
 80105b6:	f01a 0f01 	tst.w	sl, #1
 80105ba:	d1ab      	bne.n	8010514 <_dtoa_r+0x984>
 80105bc:	4633      	mov	r3, r6
 80105be:	461e      	mov	r6, r3
 80105c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80105c4:	2a30      	cmp	r2, #48	@ 0x30
 80105c6:	d0fa      	beq.n	80105be <_dtoa_r+0xa2e>
 80105c8:	e5bb      	b.n	8010142 <_dtoa_r+0x5b2>
 80105ca:	429f      	cmp	r7, r3
 80105cc:	d1a3      	bne.n	8010516 <_dtoa_r+0x986>
 80105ce:	9b04      	ldr	r3, [sp, #16]
 80105d0:	3301      	adds	r3, #1
 80105d2:	9304      	str	r3, [sp, #16]
 80105d4:	2331      	movs	r3, #49	@ 0x31
 80105d6:	703b      	strb	r3, [r7, #0]
 80105d8:	e5b3      	b.n	8010142 <_dtoa_r+0x5b2>
 80105da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80105dc:	4f16      	ldr	r7, [pc, #88]	@ (8010638 <_dtoa_r+0xaa8>)
 80105de:	b11b      	cbz	r3, 80105e8 <_dtoa_r+0xa58>
 80105e0:	f107 0308 	add.w	r3, r7, #8
 80105e4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80105e6:	6013      	str	r3, [r2, #0]
 80105e8:	4638      	mov	r0, r7
 80105ea:	b011      	add	sp, #68	@ 0x44
 80105ec:	ecbd 8b02 	vpop	{d8}
 80105f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105f4:	9b07      	ldr	r3, [sp, #28]
 80105f6:	2b01      	cmp	r3, #1
 80105f8:	f77f ae36 	ble.w	8010268 <_dtoa_r+0x6d8>
 80105fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010600:	2001      	movs	r0, #1
 8010602:	e656      	b.n	80102b2 <_dtoa_r+0x722>
 8010604:	f1bb 0f00 	cmp.w	fp, #0
 8010608:	f77f aed7 	ble.w	80103ba <_dtoa_r+0x82a>
 801060c:	463e      	mov	r6, r7
 801060e:	9801      	ldr	r0, [sp, #4]
 8010610:	4621      	mov	r1, r4
 8010612:	f7ff fa34 	bl	800fa7e <quorem>
 8010616:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801061a:	f806 ab01 	strb.w	sl, [r6], #1
 801061e:	1bf2      	subs	r2, r6, r7
 8010620:	4593      	cmp	fp, r2
 8010622:	ddb4      	ble.n	801058e <_dtoa_r+0x9fe>
 8010624:	9901      	ldr	r1, [sp, #4]
 8010626:	2300      	movs	r3, #0
 8010628:	220a      	movs	r2, #10
 801062a:	4648      	mov	r0, r9
 801062c:	f000 f8b2 	bl	8010794 <__multadd>
 8010630:	9001      	str	r0, [sp, #4]
 8010632:	e7ec      	b.n	801060e <_dtoa_r+0xa7e>
 8010634:	080140e4 	.word	0x080140e4
 8010638:	08014068 	.word	0x08014068

0801063c <_free_r>:
 801063c:	b538      	push	{r3, r4, r5, lr}
 801063e:	4605      	mov	r5, r0
 8010640:	2900      	cmp	r1, #0
 8010642:	d041      	beq.n	80106c8 <_free_r+0x8c>
 8010644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010648:	1f0c      	subs	r4, r1, #4
 801064a:	2b00      	cmp	r3, #0
 801064c:	bfb8      	it	lt
 801064e:	18e4      	addlt	r4, r4, r3
 8010650:	f7fe fbfa 	bl	800ee48 <__malloc_lock>
 8010654:	4a1d      	ldr	r2, [pc, #116]	@ (80106cc <_free_r+0x90>)
 8010656:	6813      	ldr	r3, [r2, #0]
 8010658:	b933      	cbnz	r3, 8010668 <_free_r+0x2c>
 801065a:	6063      	str	r3, [r4, #4]
 801065c:	6014      	str	r4, [r2, #0]
 801065e:	4628      	mov	r0, r5
 8010660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010664:	f7fe bbf6 	b.w	800ee54 <__malloc_unlock>
 8010668:	42a3      	cmp	r3, r4
 801066a:	d908      	bls.n	801067e <_free_r+0x42>
 801066c:	6820      	ldr	r0, [r4, #0]
 801066e:	1821      	adds	r1, r4, r0
 8010670:	428b      	cmp	r3, r1
 8010672:	bf01      	itttt	eq
 8010674:	6819      	ldreq	r1, [r3, #0]
 8010676:	685b      	ldreq	r3, [r3, #4]
 8010678:	1809      	addeq	r1, r1, r0
 801067a:	6021      	streq	r1, [r4, #0]
 801067c:	e7ed      	b.n	801065a <_free_r+0x1e>
 801067e:	461a      	mov	r2, r3
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	b10b      	cbz	r3, 8010688 <_free_r+0x4c>
 8010684:	42a3      	cmp	r3, r4
 8010686:	d9fa      	bls.n	801067e <_free_r+0x42>
 8010688:	6811      	ldr	r1, [r2, #0]
 801068a:	1850      	adds	r0, r2, r1
 801068c:	42a0      	cmp	r0, r4
 801068e:	d10b      	bne.n	80106a8 <_free_r+0x6c>
 8010690:	6820      	ldr	r0, [r4, #0]
 8010692:	4401      	add	r1, r0
 8010694:	1850      	adds	r0, r2, r1
 8010696:	4283      	cmp	r3, r0
 8010698:	6011      	str	r1, [r2, #0]
 801069a:	d1e0      	bne.n	801065e <_free_r+0x22>
 801069c:	6818      	ldr	r0, [r3, #0]
 801069e:	685b      	ldr	r3, [r3, #4]
 80106a0:	6053      	str	r3, [r2, #4]
 80106a2:	4408      	add	r0, r1
 80106a4:	6010      	str	r0, [r2, #0]
 80106a6:	e7da      	b.n	801065e <_free_r+0x22>
 80106a8:	d902      	bls.n	80106b0 <_free_r+0x74>
 80106aa:	230c      	movs	r3, #12
 80106ac:	602b      	str	r3, [r5, #0]
 80106ae:	e7d6      	b.n	801065e <_free_r+0x22>
 80106b0:	6820      	ldr	r0, [r4, #0]
 80106b2:	1821      	adds	r1, r4, r0
 80106b4:	428b      	cmp	r3, r1
 80106b6:	bf04      	itt	eq
 80106b8:	6819      	ldreq	r1, [r3, #0]
 80106ba:	685b      	ldreq	r3, [r3, #4]
 80106bc:	6063      	str	r3, [r4, #4]
 80106be:	bf04      	itt	eq
 80106c0:	1809      	addeq	r1, r1, r0
 80106c2:	6021      	streq	r1, [r4, #0]
 80106c4:	6054      	str	r4, [r2, #4]
 80106c6:	e7ca      	b.n	801065e <_free_r+0x22>
 80106c8:	bd38      	pop	{r3, r4, r5, pc}
 80106ca:	bf00      	nop
 80106cc:	24005f98 	.word	0x24005f98

080106d0 <_Balloc>:
 80106d0:	b570      	push	{r4, r5, r6, lr}
 80106d2:	69c6      	ldr	r6, [r0, #28]
 80106d4:	4604      	mov	r4, r0
 80106d6:	460d      	mov	r5, r1
 80106d8:	b976      	cbnz	r6, 80106f8 <_Balloc+0x28>
 80106da:	2010      	movs	r0, #16
 80106dc:	f7fe fb0a 	bl	800ecf4 <malloc>
 80106e0:	4602      	mov	r2, r0
 80106e2:	61e0      	str	r0, [r4, #28]
 80106e4:	b920      	cbnz	r0, 80106f0 <_Balloc+0x20>
 80106e6:	4b18      	ldr	r3, [pc, #96]	@ (8010748 <_Balloc+0x78>)
 80106e8:	4818      	ldr	r0, [pc, #96]	@ (801074c <_Balloc+0x7c>)
 80106ea:	216b      	movs	r1, #107	@ 0x6b
 80106ec:	f000 fd90 	bl	8011210 <__assert_func>
 80106f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80106f4:	6006      	str	r6, [r0, #0]
 80106f6:	60c6      	str	r6, [r0, #12]
 80106f8:	69e6      	ldr	r6, [r4, #28]
 80106fa:	68f3      	ldr	r3, [r6, #12]
 80106fc:	b183      	cbz	r3, 8010720 <_Balloc+0x50>
 80106fe:	69e3      	ldr	r3, [r4, #28]
 8010700:	68db      	ldr	r3, [r3, #12]
 8010702:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010706:	b9b8      	cbnz	r0, 8010738 <_Balloc+0x68>
 8010708:	2101      	movs	r1, #1
 801070a:	fa01 f605 	lsl.w	r6, r1, r5
 801070e:	1d72      	adds	r2, r6, #5
 8010710:	0092      	lsls	r2, r2, #2
 8010712:	4620      	mov	r0, r4
 8010714:	f000 fd9a 	bl	801124c <_calloc_r>
 8010718:	b160      	cbz	r0, 8010734 <_Balloc+0x64>
 801071a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801071e:	e00e      	b.n	801073e <_Balloc+0x6e>
 8010720:	2221      	movs	r2, #33	@ 0x21
 8010722:	2104      	movs	r1, #4
 8010724:	4620      	mov	r0, r4
 8010726:	f000 fd91 	bl	801124c <_calloc_r>
 801072a:	69e3      	ldr	r3, [r4, #28]
 801072c:	60f0      	str	r0, [r6, #12]
 801072e:	68db      	ldr	r3, [r3, #12]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d1e4      	bne.n	80106fe <_Balloc+0x2e>
 8010734:	2000      	movs	r0, #0
 8010736:	bd70      	pop	{r4, r5, r6, pc}
 8010738:	6802      	ldr	r2, [r0, #0]
 801073a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801073e:	2300      	movs	r3, #0
 8010740:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010744:	e7f7      	b.n	8010736 <_Balloc+0x66>
 8010746:	bf00      	nop
 8010748:	08014075 	.word	0x08014075
 801074c:	080140f5 	.word	0x080140f5

08010750 <_Bfree>:
 8010750:	b570      	push	{r4, r5, r6, lr}
 8010752:	69c6      	ldr	r6, [r0, #28]
 8010754:	4605      	mov	r5, r0
 8010756:	460c      	mov	r4, r1
 8010758:	b976      	cbnz	r6, 8010778 <_Bfree+0x28>
 801075a:	2010      	movs	r0, #16
 801075c:	f7fe faca 	bl	800ecf4 <malloc>
 8010760:	4602      	mov	r2, r0
 8010762:	61e8      	str	r0, [r5, #28]
 8010764:	b920      	cbnz	r0, 8010770 <_Bfree+0x20>
 8010766:	4b09      	ldr	r3, [pc, #36]	@ (801078c <_Bfree+0x3c>)
 8010768:	4809      	ldr	r0, [pc, #36]	@ (8010790 <_Bfree+0x40>)
 801076a:	218f      	movs	r1, #143	@ 0x8f
 801076c:	f000 fd50 	bl	8011210 <__assert_func>
 8010770:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010774:	6006      	str	r6, [r0, #0]
 8010776:	60c6      	str	r6, [r0, #12]
 8010778:	b13c      	cbz	r4, 801078a <_Bfree+0x3a>
 801077a:	69eb      	ldr	r3, [r5, #28]
 801077c:	6862      	ldr	r2, [r4, #4]
 801077e:	68db      	ldr	r3, [r3, #12]
 8010780:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010784:	6021      	str	r1, [r4, #0]
 8010786:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	08014075 	.word	0x08014075
 8010790:	080140f5 	.word	0x080140f5

08010794 <__multadd>:
 8010794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010798:	690d      	ldr	r5, [r1, #16]
 801079a:	4607      	mov	r7, r0
 801079c:	460c      	mov	r4, r1
 801079e:	461e      	mov	r6, r3
 80107a0:	f101 0c14 	add.w	ip, r1, #20
 80107a4:	2000      	movs	r0, #0
 80107a6:	f8dc 3000 	ldr.w	r3, [ip]
 80107aa:	b299      	uxth	r1, r3
 80107ac:	fb02 6101 	mla	r1, r2, r1, r6
 80107b0:	0c1e      	lsrs	r6, r3, #16
 80107b2:	0c0b      	lsrs	r3, r1, #16
 80107b4:	fb02 3306 	mla	r3, r2, r6, r3
 80107b8:	b289      	uxth	r1, r1
 80107ba:	3001      	adds	r0, #1
 80107bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80107c0:	4285      	cmp	r5, r0
 80107c2:	f84c 1b04 	str.w	r1, [ip], #4
 80107c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80107ca:	dcec      	bgt.n	80107a6 <__multadd+0x12>
 80107cc:	b30e      	cbz	r6, 8010812 <__multadd+0x7e>
 80107ce:	68a3      	ldr	r3, [r4, #8]
 80107d0:	42ab      	cmp	r3, r5
 80107d2:	dc19      	bgt.n	8010808 <__multadd+0x74>
 80107d4:	6861      	ldr	r1, [r4, #4]
 80107d6:	4638      	mov	r0, r7
 80107d8:	3101      	adds	r1, #1
 80107da:	f7ff ff79 	bl	80106d0 <_Balloc>
 80107de:	4680      	mov	r8, r0
 80107e0:	b928      	cbnz	r0, 80107ee <__multadd+0x5a>
 80107e2:	4602      	mov	r2, r0
 80107e4:	4b0c      	ldr	r3, [pc, #48]	@ (8010818 <__multadd+0x84>)
 80107e6:	480d      	ldr	r0, [pc, #52]	@ (801081c <__multadd+0x88>)
 80107e8:	21ba      	movs	r1, #186	@ 0xba
 80107ea:	f000 fd11 	bl	8011210 <__assert_func>
 80107ee:	6922      	ldr	r2, [r4, #16]
 80107f0:	3202      	adds	r2, #2
 80107f2:	f104 010c 	add.w	r1, r4, #12
 80107f6:	0092      	lsls	r2, r2, #2
 80107f8:	300c      	adds	r0, #12
 80107fa:	f7ff f932 	bl	800fa62 <memcpy>
 80107fe:	4621      	mov	r1, r4
 8010800:	4638      	mov	r0, r7
 8010802:	f7ff ffa5 	bl	8010750 <_Bfree>
 8010806:	4644      	mov	r4, r8
 8010808:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801080c:	3501      	adds	r5, #1
 801080e:	615e      	str	r6, [r3, #20]
 8010810:	6125      	str	r5, [r4, #16]
 8010812:	4620      	mov	r0, r4
 8010814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010818:	080140e4 	.word	0x080140e4
 801081c:	080140f5 	.word	0x080140f5

08010820 <__hi0bits>:
 8010820:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010824:	4603      	mov	r3, r0
 8010826:	bf36      	itet	cc
 8010828:	0403      	lslcc	r3, r0, #16
 801082a:	2000      	movcs	r0, #0
 801082c:	2010      	movcc	r0, #16
 801082e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010832:	bf3c      	itt	cc
 8010834:	021b      	lslcc	r3, r3, #8
 8010836:	3008      	addcc	r0, #8
 8010838:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801083c:	bf3c      	itt	cc
 801083e:	011b      	lslcc	r3, r3, #4
 8010840:	3004      	addcc	r0, #4
 8010842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010846:	bf3c      	itt	cc
 8010848:	009b      	lslcc	r3, r3, #2
 801084a:	3002      	addcc	r0, #2
 801084c:	2b00      	cmp	r3, #0
 801084e:	db05      	blt.n	801085c <__hi0bits+0x3c>
 8010850:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010854:	f100 0001 	add.w	r0, r0, #1
 8010858:	bf08      	it	eq
 801085a:	2020      	moveq	r0, #32
 801085c:	4770      	bx	lr

0801085e <__lo0bits>:
 801085e:	6803      	ldr	r3, [r0, #0]
 8010860:	4602      	mov	r2, r0
 8010862:	f013 0007 	ands.w	r0, r3, #7
 8010866:	d00b      	beq.n	8010880 <__lo0bits+0x22>
 8010868:	07d9      	lsls	r1, r3, #31
 801086a:	d421      	bmi.n	80108b0 <__lo0bits+0x52>
 801086c:	0798      	lsls	r0, r3, #30
 801086e:	bf49      	itett	mi
 8010870:	085b      	lsrmi	r3, r3, #1
 8010872:	089b      	lsrpl	r3, r3, #2
 8010874:	2001      	movmi	r0, #1
 8010876:	6013      	strmi	r3, [r2, #0]
 8010878:	bf5c      	itt	pl
 801087a:	6013      	strpl	r3, [r2, #0]
 801087c:	2002      	movpl	r0, #2
 801087e:	4770      	bx	lr
 8010880:	b299      	uxth	r1, r3
 8010882:	b909      	cbnz	r1, 8010888 <__lo0bits+0x2a>
 8010884:	0c1b      	lsrs	r3, r3, #16
 8010886:	2010      	movs	r0, #16
 8010888:	b2d9      	uxtb	r1, r3
 801088a:	b909      	cbnz	r1, 8010890 <__lo0bits+0x32>
 801088c:	3008      	adds	r0, #8
 801088e:	0a1b      	lsrs	r3, r3, #8
 8010890:	0719      	lsls	r1, r3, #28
 8010892:	bf04      	itt	eq
 8010894:	091b      	lsreq	r3, r3, #4
 8010896:	3004      	addeq	r0, #4
 8010898:	0799      	lsls	r1, r3, #30
 801089a:	bf04      	itt	eq
 801089c:	089b      	lsreq	r3, r3, #2
 801089e:	3002      	addeq	r0, #2
 80108a0:	07d9      	lsls	r1, r3, #31
 80108a2:	d403      	bmi.n	80108ac <__lo0bits+0x4e>
 80108a4:	085b      	lsrs	r3, r3, #1
 80108a6:	f100 0001 	add.w	r0, r0, #1
 80108aa:	d003      	beq.n	80108b4 <__lo0bits+0x56>
 80108ac:	6013      	str	r3, [r2, #0]
 80108ae:	4770      	bx	lr
 80108b0:	2000      	movs	r0, #0
 80108b2:	4770      	bx	lr
 80108b4:	2020      	movs	r0, #32
 80108b6:	4770      	bx	lr

080108b8 <__i2b>:
 80108b8:	b510      	push	{r4, lr}
 80108ba:	460c      	mov	r4, r1
 80108bc:	2101      	movs	r1, #1
 80108be:	f7ff ff07 	bl	80106d0 <_Balloc>
 80108c2:	4602      	mov	r2, r0
 80108c4:	b928      	cbnz	r0, 80108d2 <__i2b+0x1a>
 80108c6:	4b05      	ldr	r3, [pc, #20]	@ (80108dc <__i2b+0x24>)
 80108c8:	4805      	ldr	r0, [pc, #20]	@ (80108e0 <__i2b+0x28>)
 80108ca:	f240 1145 	movw	r1, #325	@ 0x145
 80108ce:	f000 fc9f 	bl	8011210 <__assert_func>
 80108d2:	2301      	movs	r3, #1
 80108d4:	6144      	str	r4, [r0, #20]
 80108d6:	6103      	str	r3, [r0, #16]
 80108d8:	bd10      	pop	{r4, pc}
 80108da:	bf00      	nop
 80108dc:	080140e4 	.word	0x080140e4
 80108e0:	080140f5 	.word	0x080140f5

080108e4 <__multiply>:
 80108e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e8:	4614      	mov	r4, r2
 80108ea:	690a      	ldr	r2, [r1, #16]
 80108ec:	6923      	ldr	r3, [r4, #16]
 80108ee:	429a      	cmp	r2, r3
 80108f0:	bfa8      	it	ge
 80108f2:	4623      	movge	r3, r4
 80108f4:	460f      	mov	r7, r1
 80108f6:	bfa4      	itt	ge
 80108f8:	460c      	movge	r4, r1
 80108fa:	461f      	movge	r7, r3
 80108fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010900:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010904:	68a3      	ldr	r3, [r4, #8]
 8010906:	6861      	ldr	r1, [r4, #4]
 8010908:	eb0a 0609 	add.w	r6, sl, r9
 801090c:	42b3      	cmp	r3, r6
 801090e:	b085      	sub	sp, #20
 8010910:	bfb8      	it	lt
 8010912:	3101      	addlt	r1, #1
 8010914:	f7ff fedc 	bl	80106d0 <_Balloc>
 8010918:	b930      	cbnz	r0, 8010928 <__multiply+0x44>
 801091a:	4602      	mov	r2, r0
 801091c:	4b44      	ldr	r3, [pc, #272]	@ (8010a30 <__multiply+0x14c>)
 801091e:	4845      	ldr	r0, [pc, #276]	@ (8010a34 <__multiply+0x150>)
 8010920:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010924:	f000 fc74 	bl	8011210 <__assert_func>
 8010928:	f100 0514 	add.w	r5, r0, #20
 801092c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010930:	462b      	mov	r3, r5
 8010932:	2200      	movs	r2, #0
 8010934:	4543      	cmp	r3, r8
 8010936:	d321      	bcc.n	801097c <__multiply+0x98>
 8010938:	f107 0114 	add.w	r1, r7, #20
 801093c:	f104 0214 	add.w	r2, r4, #20
 8010940:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010944:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010948:	9302      	str	r3, [sp, #8]
 801094a:	1b13      	subs	r3, r2, r4
 801094c:	3b15      	subs	r3, #21
 801094e:	f023 0303 	bic.w	r3, r3, #3
 8010952:	3304      	adds	r3, #4
 8010954:	f104 0715 	add.w	r7, r4, #21
 8010958:	42ba      	cmp	r2, r7
 801095a:	bf38      	it	cc
 801095c:	2304      	movcc	r3, #4
 801095e:	9301      	str	r3, [sp, #4]
 8010960:	9b02      	ldr	r3, [sp, #8]
 8010962:	9103      	str	r1, [sp, #12]
 8010964:	428b      	cmp	r3, r1
 8010966:	d80c      	bhi.n	8010982 <__multiply+0x9e>
 8010968:	2e00      	cmp	r6, #0
 801096a:	dd03      	ble.n	8010974 <__multiply+0x90>
 801096c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010970:	2b00      	cmp	r3, #0
 8010972:	d05b      	beq.n	8010a2c <__multiply+0x148>
 8010974:	6106      	str	r6, [r0, #16]
 8010976:	b005      	add	sp, #20
 8010978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801097c:	f843 2b04 	str.w	r2, [r3], #4
 8010980:	e7d8      	b.n	8010934 <__multiply+0x50>
 8010982:	f8b1 a000 	ldrh.w	sl, [r1]
 8010986:	f1ba 0f00 	cmp.w	sl, #0
 801098a:	d024      	beq.n	80109d6 <__multiply+0xf2>
 801098c:	f104 0e14 	add.w	lr, r4, #20
 8010990:	46a9      	mov	r9, r5
 8010992:	f04f 0c00 	mov.w	ip, #0
 8010996:	f85e 7b04 	ldr.w	r7, [lr], #4
 801099a:	f8d9 3000 	ldr.w	r3, [r9]
 801099e:	fa1f fb87 	uxth.w	fp, r7
 80109a2:	b29b      	uxth	r3, r3
 80109a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80109a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80109ac:	f8d9 7000 	ldr.w	r7, [r9]
 80109b0:	4463      	add	r3, ip
 80109b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80109b6:	fb0a c70b 	mla	r7, sl, fp, ip
 80109ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80109be:	b29b      	uxth	r3, r3
 80109c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80109c4:	4572      	cmp	r2, lr
 80109c6:	f849 3b04 	str.w	r3, [r9], #4
 80109ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80109ce:	d8e2      	bhi.n	8010996 <__multiply+0xb2>
 80109d0:	9b01      	ldr	r3, [sp, #4]
 80109d2:	f845 c003 	str.w	ip, [r5, r3]
 80109d6:	9b03      	ldr	r3, [sp, #12]
 80109d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80109dc:	3104      	adds	r1, #4
 80109de:	f1b9 0f00 	cmp.w	r9, #0
 80109e2:	d021      	beq.n	8010a28 <__multiply+0x144>
 80109e4:	682b      	ldr	r3, [r5, #0]
 80109e6:	f104 0c14 	add.w	ip, r4, #20
 80109ea:	46ae      	mov	lr, r5
 80109ec:	f04f 0a00 	mov.w	sl, #0
 80109f0:	f8bc b000 	ldrh.w	fp, [ip]
 80109f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80109f8:	fb09 770b 	mla	r7, r9, fp, r7
 80109fc:	4457      	add	r7, sl
 80109fe:	b29b      	uxth	r3, r3
 8010a00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010a04:	f84e 3b04 	str.w	r3, [lr], #4
 8010a08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010a0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010a10:	f8be 3000 	ldrh.w	r3, [lr]
 8010a14:	fb09 330a 	mla	r3, r9, sl, r3
 8010a18:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010a1c:	4562      	cmp	r2, ip
 8010a1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010a22:	d8e5      	bhi.n	80109f0 <__multiply+0x10c>
 8010a24:	9f01      	ldr	r7, [sp, #4]
 8010a26:	51eb      	str	r3, [r5, r7]
 8010a28:	3504      	adds	r5, #4
 8010a2a:	e799      	b.n	8010960 <__multiply+0x7c>
 8010a2c:	3e01      	subs	r6, #1
 8010a2e:	e79b      	b.n	8010968 <__multiply+0x84>
 8010a30:	080140e4 	.word	0x080140e4
 8010a34:	080140f5 	.word	0x080140f5

08010a38 <__pow5mult>:
 8010a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a3c:	4615      	mov	r5, r2
 8010a3e:	f012 0203 	ands.w	r2, r2, #3
 8010a42:	4607      	mov	r7, r0
 8010a44:	460e      	mov	r6, r1
 8010a46:	d007      	beq.n	8010a58 <__pow5mult+0x20>
 8010a48:	4c25      	ldr	r4, [pc, #148]	@ (8010ae0 <__pow5mult+0xa8>)
 8010a4a:	3a01      	subs	r2, #1
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a52:	f7ff fe9f 	bl	8010794 <__multadd>
 8010a56:	4606      	mov	r6, r0
 8010a58:	10ad      	asrs	r5, r5, #2
 8010a5a:	d03d      	beq.n	8010ad8 <__pow5mult+0xa0>
 8010a5c:	69fc      	ldr	r4, [r7, #28]
 8010a5e:	b97c      	cbnz	r4, 8010a80 <__pow5mult+0x48>
 8010a60:	2010      	movs	r0, #16
 8010a62:	f7fe f947 	bl	800ecf4 <malloc>
 8010a66:	4602      	mov	r2, r0
 8010a68:	61f8      	str	r0, [r7, #28]
 8010a6a:	b928      	cbnz	r0, 8010a78 <__pow5mult+0x40>
 8010a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8010ae4 <__pow5mult+0xac>)
 8010a6e:	481e      	ldr	r0, [pc, #120]	@ (8010ae8 <__pow5mult+0xb0>)
 8010a70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010a74:	f000 fbcc 	bl	8011210 <__assert_func>
 8010a78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a7c:	6004      	str	r4, [r0, #0]
 8010a7e:	60c4      	str	r4, [r0, #12]
 8010a80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010a84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a88:	b94c      	cbnz	r4, 8010a9e <__pow5mult+0x66>
 8010a8a:	f240 2171 	movw	r1, #625	@ 0x271
 8010a8e:	4638      	mov	r0, r7
 8010a90:	f7ff ff12 	bl	80108b8 <__i2b>
 8010a94:	2300      	movs	r3, #0
 8010a96:	f8c8 0008 	str.w	r0, [r8, #8]
 8010a9a:	4604      	mov	r4, r0
 8010a9c:	6003      	str	r3, [r0, #0]
 8010a9e:	f04f 0900 	mov.w	r9, #0
 8010aa2:	07eb      	lsls	r3, r5, #31
 8010aa4:	d50a      	bpl.n	8010abc <__pow5mult+0x84>
 8010aa6:	4631      	mov	r1, r6
 8010aa8:	4622      	mov	r2, r4
 8010aaa:	4638      	mov	r0, r7
 8010aac:	f7ff ff1a 	bl	80108e4 <__multiply>
 8010ab0:	4631      	mov	r1, r6
 8010ab2:	4680      	mov	r8, r0
 8010ab4:	4638      	mov	r0, r7
 8010ab6:	f7ff fe4b 	bl	8010750 <_Bfree>
 8010aba:	4646      	mov	r6, r8
 8010abc:	106d      	asrs	r5, r5, #1
 8010abe:	d00b      	beq.n	8010ad8 <__pow5mult+0xa0>
 8010ac0:	6820      	ldr	r0, [r4, #0]
 8010ac2:	b938      	cbnz	r0, 8010ad4 <__pow5mult+0x9c>
 8010ac4:	4622      	mov	r2, r4
 8010ac6:	4621      	mov	r1, r4
 8010ac8:	4638      	mov	r0, r7
 8010aca:	f7ff ff0b 	bl	80108e4 <__multiply>
 8010ace:	6020      	str	r0, [r4, #0]
 8010ad0:	f8c0 9000 	str.w	r9, [r0]
 8010ad4:	4604      	mov	r4, r0
 8010ad6:	e7e4      	b.n	8010aa2 <__pow5mult+0x6a>
 8010ad8:	4630      	mov	r0, r6
 8010ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ade:	bf00      	nop
 8010ae0:	08014150 	.word	0x08014150
 8010ae4:	08014075 	.word	0x08014075
 8010ae8:	080140f5 	.word	0x080140f5

08010aec <__lshift>:
 8010aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010af0:	460c      	mov	r4, r1
 8010af2:	6849      	ldr	r1, [r1, #4]
 8010af4:	6923      	ldr	r3, [r4, #16]
 8010af6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010afa:	68a3      	ldr	r3, [r4, #8]
 8010afc:	4607      	mov	r7, r0
 8010afe:	4691      	mov	r9, r2
 8010b00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010b04:	f108 0601 	add.w	r6, r8, #1
 8010b08:	42b3      	cmp	r3, r6
 8010b0a:	db0b      	blt.n	8010b24 <__lshift+0x38>
 8010b0c:	4638      	mov	r0, r7
 8010b0e:	f7ff fddf 	bl	80106d0 <_Balloc>
 8010b12:	4605      	mov	r5, r0
 8010b14:	b948      	cbnz	r0, 8010b2a <__lshift+0x3e>
 8010b16:	4602      	mov	r2, r0
 8010b18:	4b28      	ldr	r3, [pc, #160]	@ (8010bbc <__lshift+0xd0>)
 8010b1a:	4829      	ldr	r0, [pc, #164]	@ (8010bc0 <__lshift+0xd4>)
 8010b1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010b20:	f000 fb76 	bl	8011210 <__assert_func>
 8010b24:	3101      	adds	r1, #1
 8010b26:	005b      	lsls	r3, r3, #1
 8010b28:	e7ee      	b.n	8010b08 <__lshift+0x1c>
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	f100 0114 	add.w	r1, r0, #20
 8010b30:	f100 0210 	add.w	r2, r0, #16
 8010b34:	4618      	mov	r0, r3
 8010b36:	4553      	cmp	r3, sl
 8010b38:	db33      	blt.n	8010ba2 <__lshift+0xb6>
 8010b3a:	6920      	ldr	r0, [r4, #16]
 8010b3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b40:	f104 0314 	add.w	r3, r4, #20
 8010b44:	f019 091f 	ands.w	r9, r9, #31
 8010b48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010b50:	d02b      	beq.n	8010baa <__lshift+0xbe>
 8010b52:	f1c9 0e20 	rsb	lr, r9, #32
 8010b56:	468a      	mov	sl, r1
 8010b58:	2200      	movs	r2, #0
 8010b5a:	6818      	ldr	r0, [r3, #0]
 8010b5c:	fa00 f009 	lsl.w	r0, r0, r9
 8010b60:	4310      	orrs	r0, r2
 8010b62:	f84a 0b04 	str.w	r0, [sl], #4
 8010b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b6a:	459c      	cmp	ip, r3
 8010b6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010b70:	d8f3      	bhi.n	8010b5a <__lshift+0x6e>
 8010b72:	ebac 0304 	sub.w	r3, ip, r4
 8010b76:	3b15      	subs	r3, #21
 8010b78:	f023 0303 	bic.w	r3, r3, #3
 8010b7c:	3304      	adds	r3, #4
 8010b7e:	f104 0015 	add.w	r0, r4, #21
 8010b82:	4584      	cmp	ip, r0
 8010b84:	bf38      	it	cc
 8010b86:	2304      	movcc	r3, #4
 8010b88:	50ca      	str	r2, [r1, r3]
 8010b8a:	b10a      	cbz	r2, 8010b90 <__lshift+0xa4>
 8010b8c:	f108 0602 	add.w	r6, r8, #2
 8010b90:	3e01      	subs	r6, #1
 8010b92:	4638      	mov	r0, r7
 8010b94:	612e      	str	r6, [r5, #16]
 8010b96:	4621      	mov	r1, r4
 8010b98:	f7ff fdda 	bl	8010750 <_Bfree>
 8010b9c:	4628      	mov	r0, r5
 8010b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ba2:	f842 0f04 	str.w	r0, [r2, #4]!
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	e7c5      	b.n	8010b36 <__lshift+0x4a>
 8010baa:	3904      	subs	r1, #4
 8010bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8010bb4:	459c      	cmp	ip, r3
 8010bb6:	d8f9      	bhi.n	8010bac <__lshift+0xc0>
 8010bb8:	e7ea      	b.n	8010b90 <__lshift+0xa4>
 8010bba:	bf00      	nop
 8010bbc:	080140e4 	.word	0x080140e4
 8010bc0:	080140f5 	.word	0x080140f5

08010bc4 <__mcmp>:
 8010bc4:	690a      	ldr	r2, [r1, #16]
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	6900      	ldr	r0, [r0, #16]
 8010bca:	1a80      	subs	r0, r0, r2
 8010bcc:	b530      	push	{r4, r5, lr}
 8010bce:	d10e      	bne.n	8010bee <__mcmp+0x2a>
 8010bd0:	3314      	adds	r3, #20
 8010bd2:	3114      	adds	r1, #20
 8010bd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010bd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010bdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010be0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010be4:	4295      	cmp	r5, r2
 8010be6:	d003      	beq.n	8010bf0 <__mcmp+0x2c>
 8010be8:	d205      	bcs.n	8010bf6 <__mcmp+0x32>
 8010bea:	f04f 30ff 	mov.w	r0, #4294967295
 8010bee:	bd30      	pop	{r4, r5, pc}
 8010bf0:	42a3      	cmp	r3, r4
 8010bf2:	d3f3      	bcc.n	8010bdc <__mcmp+0x18>
 8010bf4:	e7fb      	b.n	8010bee <__mcmp+0x2a>
 8010bf6:	2001      	movs	r0, #1
 8010bf8:	e7f9      	b.n	8010bee <__mcmp+0x2a>
	...

08010bfc <__mdiff>:
 8010bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c00:	4689      	mov	r9, r1
 8010c02:	4606      	mov	r6, r0
 8010c04:	4611      	mov	r1, r2
 8010c06:	4648      	mov	r0, r9
 8010c08:	4614      	mov	r4, r2
 8010c0a:	f7ff ffdb 	bl	8010bc4 <__mcmp>
 8010c0e:	1e05      	subs	r5, r0, #0
 8010c10:	d112      	bne.n	8010c38 <__mdiff+0x3c>
 8010c12:	4629      	mov	r1, r5
 8010c14:	4630      	mov	r0, r6
 8010c16:	f7ff fd5b 	bl	80106d0 <_Balloc>
 8010c1a:	4602      	mov	r2, r0
 8010c1c:	b928      	cbnz	r0, 8010c2a <__mdiff+0x2e>
 8010c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8010d1c <__mdiff+0x120>)
 8010c20:	f240 2137 	movw	r1, #567	@ 0x237
 8010c24:	483e      	ldr	r0, [pc, #248]	@ (8010d20 <__mdiff+0x124>)
 8010c26:	f000 faf3 	bl	8011210 <__assert_func>
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010c30:	4610      	mov	r0, r2
 8010c32:	b003      	add	sp, #12
 8010c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c38:	bfbc      	itt	lt
 8010c3a:	464b      	movlt	r3, r9
 8010c3c:	46a1      	movlt	r9, r4
 8010c3e:	4630      	mov	r0, r6
 8010c40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010c44:	bfba      	itte	lt
 8010c46:	461c      	movlt	r4, r3
 8010c48:	2501      	movlt	r5, #1
 8010c4a:	2500      	movge	r5, #0
 8010c4c:	f7ff fd40 	bl	80106d0 <_Balloc>
 8010c50:	4602      	mov	r2, r0
 8010c52:	b918      	cbnz	r0, 8010c5c <__mdiff+0x60>
 8010c54:	4b31      	ldr	r3, [pc, #196]	@ (8010d1c <__mdiff+0x120>)
 8010c56:	f240 2145 	movw	r1, #581	@ 0x245
 8010c5a:	e7e3      	b.n	8010c24 <__mdiff+0x28>
 8010c5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010c60:	6926      	ldr	r6, [r4, #16]
 8010c62:	60c5      	str	r5, [r0, #12]
 8010c64:	f109 0310 	add.w	r3, r9, #16
 8010c68:	f109 0514 	add.w	r5, r9, #20
 8010c6c:	f104 0e14 	add.w	lr, r4, #20
 8010c70:	f100 0b14 	add.w	fp, r0, #20
 8010c74:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010c78:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010c7c:	9301      	str	r3, [sp, #4]
 8010c7e:	46d9      	mov	r9, fp
 8010c80:	f04f 0c00 	mov.w	ip, #0
 8010c84:	9b01      	ldr	r3, [sp, #4]
 8010c86:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010c8a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010c8e:	9301      	str	r3, [sp, #4]
 8010c90:	fa1f f38a 	uxth.w	r3, sl
 8010c94:	4619      	mov	r1, r3
 8010c96:	b283      	uxth	r3, r0
 8010c98:	1acb      	subs	r3, r1, r3
 8010c9a:	0c00      	lsrs	r0, r0, #16
 8010c9c:	4463      	add	r3, ip
 8010c9e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010ca2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010ca6:	b29b      	uxth	r3, r3
 8010ca8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010cac:	4576      	cmp	r6, lr
 8010cae:	f849 3b04 	str.w	r3, [r9], #4
 8010cb2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010cb6:	d8e5      	bhi.n	8010c84 <__mdiff+0x88>
 8010cb8:	1b33      	subs	r3, r6, r4
 8010cba:	3b15      	subs	r3, #21
 8010cbc:	f023 0303 	bic.w	r3, r3, #3
 8010cc0:	3415      	adds	r4, #21
 8010cc2:	3304      	adds	r3, #4
 8010cc4:	42a6      	cmp	r6, r4
 8010cc6:	bf38      	it	cc
 8010cc8:	2304      	movcc	r3, #4
 8010cca:	441d      	add	r5, r3
 8010ccc:	445b      	add	r3, fp
 8010cce:	461e      	mov	r6, r3
 8010cd0:	462c      	mov	r4, r5
 8010cd2:	4544      	cmp	r4, r8
 8010cd4:	d30e      	bcc.n	8010cf4 <__mdiff+0xf8>
 8010cd6:	f108 0103 	add.w	r1, r8, #3
 8010cda:	1b49      	subs	r1, r1, r5
 8010cdc:	f021 0103 	bic.w	r1, r1, #3
 8010ce0:	3d03      	subs	r5, #3
 8010ce2:	45a8      	cmp	r8, r5
 8010ce4:	bf38      	it	cc
 8010ce6:	2100      	movcc	r1, #0
 8010ce8:	440b      	add	r3, r1
 8010cea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010cee:	b191      	cbz	r1, 8010d16 <__mdiff+0x11a>
 8010cf0:	6117      	str	r7, [r2, #16]
 8010cf2:	e79d      	b.n	8010c30 <__mdiff+0x34>
 8010cf4:	f854 1b04 	ldr.w	r1, [r4], #4
 8010cf8:	46e6      	mov	lr, ip
 8010cfa:	0c08      	lsrs	r0, r1, #16
 8010cfc:	fa1c fc81 	uxtah	ip, ip, r1
 8010d00:	4471      	add	r1, lr
 8010d02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010d06:	b289      	uxth	r1, r1
 8010d08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010d0c:	f846 1b04 	str.w	r1, [r6], #4
 8010d10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010d14:	e7dd      	b.n	8010cd2 <__mdiff+0xd6>
 8010d16:	3f01      	subs	r7, #1
 8010d18:	e7e7      	b.n	8010cea <__mdiff+0xee>
 8010d1a:	bf00      	nop
 8010d1c:	080140e4 	.word	0x080140e4
 8010d20:	080140f5 	.word	0x080140f5

08010d24 <__d2b>:
 8010d24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010d28:	460f      	mov	r7, r1
 8010d2a:	2101      	movs	r1, #1
 8010d2c:	ec59 8b10 	vmov	r8, r9, d0
 8010d30:	4616      	mov	r6, r2
 8010d32:	f7ff fccd 	bl	80106d0 <_Balloc>
 8010d36:	4604      	mov	r4, r0
 8010d38:	b930      	cbnz	r0, 8010d48 <__d2b+0x24>
 8010d3a:	4602      	mov	r2, r0
 8010d3c:	4b23      	ldr	r3, [pc, #140]	@ (8010dcc <__d2b+0xa8>)
 8010d3e:	4824      	ldr	r0, [pc, #144]	@ (8010dd0 <__d2b+0xac>)
 8010d40:	f240 310f 	movw	r1, #783	@ 0x30f
 8010d44:	f000 fa64 	bl	8011210 <__assert_func>
 8010d48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010d4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010d50:	b10d      	cbz	r5, 8010d56 <__d2b+0x32>
 8010d52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010d56:	9301      	str	r3, [sp, #4]
 8010d58:	f1b8 0300 	subs.w	r3, r8, #0
 8010d5c:	d023      	beq.n	8010da6 <__d2b+0x82>
 8010d5e:	4668      	mov	r0, sp
 8010d60:	9300      	str	r3, [sp, #0]
 8010d62:	f7ff fd7c 	bl	801085e <__lo0bits>
 8010d66:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010d6a:	b1d0      	cbz	r0, 8010da2 <__d2b+0x7e>
 8010d6c:	f1c0 0320 	rsb	r3, r0, #32
 8010d70:	fa02 f303 	lsl.w	r3, r2, r3
 8010d74:	430b      	orrs	r3, r1
 8010d76:	40c2      	lsrs	r2, r0
 8010d78:	6163      	str	r3, [r4, #20]
 8010d7a:	9201      	str	r2, [sp, #4]
 8010d7c:	9b01      	ldr	r3, [sp, #4]
 8010d7e:	61a3      	str	r3, [r4, #24]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	bf0c      	ite	eq
 8010d84:	2201      	moveq	r2, #1
 8010d86:	2202      	movne	r2, #2
 8010d88:	6122      	str	r2, [r4, #16]
 8010d8a:	b1a5      	cbz	r5, 8010db6 <__d2b+0x92>
 8010d8c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010d90:	4405      	add	r5, r0
 8010d92:	603d      	str	r5, [r7, #0]
 8010d94:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010d98:	6030      	str	r0, [r6, #0]
 8010d9a:	4620      	mov	r0, r4
 8010d9c:	b003      	add	sp, #12
 8010d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010da2:	6161      	str	r1, [r4, #20]
 8010da4:	e7ea      	b.n	8010d7c <__d2b+0x58>
 8010da6:	a801      	add	r0, sp, #4
 8010da8:	f7ff fd59 	bl	801085e <__lo0bits>
 8010dac:	9b01      	ldr	r3, [sp, #4]
 8010dae:	6163      	str	r3, [r4, #20]
 8010db0:	3020      	adds	r0, #32
 8010db2:	2201      	movs	r2, #1
 8010db4:	e7e8      	b.n	8010d88 <__d2b+0x64>
 8010db6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010dba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010dbe:	6038      	str	r0, [r7, #0]
 8010dc0:	6918      	ldr	r0, [r3, #16]
 8010dc2:	f7ff fd2d 	bl	8010820 <__hi0bits>
 8010dc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010dca:	e7e5      	b.n	8010d98 <__d2b+0x74>
 8010dcc:	080140e4 	.word	0x080140e4
 8010dd0:	080140f5 	.word	0x080140f5

08010dd4 <__ssputs_r>:
 8010dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dd8:	688e      	ldr	r6, [r1, #8]
 8010dda:	461f      	mov	r7, r3
 8010ddc:	42be      	cmp	r6, r7
 8010dde:	680b      	ldr	r3, [r1, #0]
 8010de0:	4682      	mov	sl, r0
 8010de2:	460c      	mov	r4, r1
 8010de4:	4690      	mov	r8, r2
 8010de6:	d82d      	bhi.n	8010e44 <__ssputs_r+0x70>
 8010de8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010dec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010df0:	d026      	beq.n	8010e40 <__ssputs_r+0x6c>
 8010df2:	6965      	ldr	r5, [r4, #20]
 8010df4:	6909      	ldr	r1, [r1, #16]
 8010df6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010dfa:	eba3 0901 	sub.w	r9, r3, r1
 8010dfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010e02:	1c7b      	adds	r3, r7, #1
 8010e04:	444b      	add	r3, r9
 8010e06:	106d      	asrs	r5, r5, #1
 8010e08:	429d      	cmp	r5, r3
 8010e0a:	bf38      	it	cc
 8010e0c:	461d      	movcc	r5, r3
 8010e0e:	0553      	lsls	r3, r2, #21
 8010e10:	d527      	bpl.n	8010e62 <__ssputs_r+0x8e>
 8010e12:	4629      	mov	r1, r5
 8010e14:	f7fd ff98 	bl	800ed48 <_malloc_r>
 8010e18:	4606      	mov	r6, r0
 8010e1a:	b360      	cbz	r0, 8010e76 <__ssputs_r+0xa2>
 8010e1c:	6921      	ldr	r1, [r4, #16]
 8010e1e:	464a      	mov	r2, r9
 8010e20:	f7fe fe1f 	bl	800fa62 <memcpy>
 8010e24:	89a3      	ldrh	r3, [r4, #12]
 8010e26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e2e:	81a3      	strh	r3, [r4, #12]
 8010e30:	6126      	str	r6, [r4, #16]
 8010e32:	6165      	str	r5, [r4, #20]
 8010e34:	444e      	add	r6, r9
 8010e36:	eba5 0509 	sub.w	r5, r5, r9
 8010e3a:	6026      	str	r6, [r4, #0]
 8010e3c:	60a5      	str	r5, [r4, #8]
 8010e3e:	463e      	mov	r6, r7
 8010e40:	42be      	cmp	r6, r7
 8010e42:	d900      	bls.n	8010e46 <__ssputs_r+0x72>
 8010e44:	463e      	mov	r6, r7
 8010e46:	6820      	ldr	r0, [r4, #0]
 8010e48:	4632      	mov	r2, r6
 8010e4a:	4641      	mov	r1, r8
 8010e4c:	f000 f9c6 	bl	80111dc <memmove>
 8010e50:	68a3      	ldr	r3, [r4, #8]
 8010e52:	1b9b      	subs	r3, r3, r6
 8010e54:	60a3      	str	r3, [r4, #8]
 8010e56:	6823      	ldr	r3, [r4, #0]
 8010e58:	4433      	add	r3, r6
 8010e5a:	6023      	str	r3, [r4, #0]
 8010e5c:	2000      	movs	r0, #0
 8010e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e62:	462a      	mov	r2, r5
 8010e64:	f000 fa18 	bl	8011298 <_realloc_r>
 8010e68:	4606      	mov	r6, r0
 8010e6a:	2800      	cmp	r0, #0
 8010e6c:	d1e0      	bne.n	8010e30 <__ssputs_r+0x5c>
 8010e6e:	6921      	ldr	r1, [r4, #16]
 8010e70:	4650      	mov	r0, sl
 8010e72:	f7ff fbe3 	bl	801063c <_free_r>
 8010e76:	230c      	movs	r3, #12
 8010e78:	f8ca 3000 	str.w	r3, [sl]
 8010e7c:	89a3      	ldrh	r3, [r4, #12]
 8010e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e82:	81a3      	strh	r3, [r4, #12]
 8010e84:	f04f 30ff 	mov.w	r0, #4294967295
 8010e88:	e7e9      	b.n	8010e5e <__ssputs_r+0x8a>
	...

08010e8c <_svfiprintf_r>:
 8010e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e90:	4698      	mov	r8, r3
 8010e92:	898b      	ldrh	r3, [r1, #12]
 8010e94:	061b      	lsls	r3, r3, #24
 8010e96:	b09d      	sub	sp, #116	@ 0x74
 8010e98:	4607      	mov	r7, r0
 8010e9a:	460d      	mov	r5, r1
 8010e9c:	4614      	mov	r4, r2
 8010e9e:	d510      	bpl.n	8010ec2 <_svfiprintf_r+0x36>
 8010ea0:	690b      	ldr	r3, [r1, #16]
 8010ea2:	b973      	cbnz	r3, 8010ec2 <_svfiprintf_r+0x36>
 8010ea4:	2140      	movs	r1, #64	@ 0x40
 8010ea6:	f7fd ff4f 	bl	800ed48 <_malloc_r>
 8010eaa:	6028      	str	r0, [r5, #0]
 8010eac:	6128      	str	r0, [r5, #16]
 8010eae:	b930      	cbnz	r0, 8010ebe <_svfiprintf_r+0x32>
 8010eb0:	230c      	movs	r3, #12
 8010eb2:	603b      	str	r3, [r7, #0]
 8010eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8010eb8:	b01d      	add	sp, #116	@ 0x74
 8010eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ebe:	2340      	movs	r3, #64	@ 0x40
 8010ec0:	616b      	str	r3, [r5, #20]
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ec6:	2320      	movs	r3, #32
 8010ec8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ecc:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ed0:	2330      	movs	r3, #48	@ 0x30
 8010ed2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011070 <_svfiprintf_r+0x1e4>
 8010ed6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010eda:	f04f 0901 	mov.w	r9, #1
 8010ede:	4623      	mov	r3, r4
 8010ee0:	469a      	mov	sl, r3
 8010ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ee6:	b10a      	cbz	r2, 8010eec <_svfiprintf_r+0x60>
 8010ee8:	2a25      	cmp	r2, #37	@ 0x25
 8010eea:	d1f9      	bne.n	8010ee0 <_svfiprintf_r+0x54>
 8010eec:	ebba 0b04 	subs.w	fp, sl, r4
 8010ef0:	d00b      	beq.n	8010f0a <_svfiprintf_r+0x7e>
 8010ef2:	465b      	mov	r3, fp
 8010ef4:	4622      	mov	r2, r4
 8010ef6:	4629      	mov	r1, r5
 8010ef8:	4638      	mov	r0, r7
 8010efa:	f7ff ff6b 	bl	8010dd4 <__ssputs_r>
 8010efe:	3001      	adds	r0, #1
 8010f00:	f000 80a7 	beq.w	8011052 <_svfiprintf_r+0x1c6>
 8010f04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f06:	445a      	add	r2, fp
 8010f08:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	f000 809f 	beq.w	8011052 <_svfiprintf_r+0x1c6>
 8010f14:	2300      	movs	r3, #0
 8010f16:	f04f 32ff 	mov.w	r2, #4294967295
 8010f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f1e:	f10a 0a01 	add.w	sl, sl, #1
 8010f22:	9304      	str	r3, [sp, #16]
 8010f24:	9307      	str	r3, [sp, #28]
 8010f26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010f2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8010f2c:	4654      	mov	r4, sl
 8010f2e:	2205      	movs	r2, #5
 8010f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f34:	484e      	ldr	r0, [pc, #312]	@ (8011070 <_svfiprintf_r+0x1e4>)
 8010f36:	f7ef f9d3 	bl	80002e0 <memchr>
 8010f3a:	9a04      	ldr	r2, [sp, #16]
 8010f3c:	b9d8      	cbnz	r0, 8010f76 <_svfiprintf_r+0xea>
 8010f3e:	06d0      	lsls	r0, r2, #27
 8010f40:	bf44      	itt	mi
 8010f42:	2320      	movmi	r3, #32
 8010f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f48:	0711      	lsls	r1, r2, #28
 8010f4a:	bf44      	itt	mi
 8010f4c:	232b      	movmi	r3, #43	@ 0x2b
 8010f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f52:	f89a 3000 	ldrb.w	r3, [sl]
 8010f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f58:	d015      	beq.n	8010f86 <_svfiprintf_r+0xfa>
 8010f5a:	9a07      	ldr	r2, [sp, #28]
 8010f5c:	4654      	mov	r4, sl
 8010f5e:	2000      	movs	r0, #0
 8010f60:	f04f 0c0a 	mov.w	ip, #10
 8010f64:	4621      	mov	r1, r4
 8010f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f6a:	3b30      	subs	r3, #48	@ 0x30
 8010f6c:	2b09      	cmp	r3, #9
 8010f6e:	d94b      	bls.n	8011008 <_svfiprintf_r+0x17c>
 8010f70:	b1b0      	cbz	r0, 8010fa0 <_svfiprintf_r+0x114>
 8010f72:	9207      	str	r2, [sp, #28]
 8010f74:	e014      	b.n	8010fa0 <_svfiprintf_r+0x114>
 8010f76:	eba0 0308 	sub.w	r3, r0, r8
 8010f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8010f7e:	4313      	orrs	r3, r2
 8010f80:	9304      	str	r3, [sp, #16]
 8010f82:	46a2      	mov	sl, r4
 8010f84:	e7d2      	b.n	8010f2c <_svfiprintf_r+0xa0>
 8010f86:	9b03      	ldr	r3, [sp, #12]
 8010f88:	1d19      	adds	r1, r3, #4
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	9103      	str	r1, [sp, #12]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	bfbb      	ittet	lt
 8010f92:	425b      	neglt	r3, r3
 8010f94:	f042 0202 	orrlt.w	r2, r2, #2
 8010f98:	9307      	strge	r3, [sp, #28]
 8010f9a:	9307      	strlt	r3, [sp, #28]
 8010f9c:	bfb8      	it	lt
 8010f9e:	9204      	strlt	r2, [sp, #16]
 8010fa0:	7823      	ldrb	r3, [r4, #0]
 8010fa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8010fa4:	d10a      	bne.n	8010fbc <_svfiprintf_r+0x130>
 8010fa6:	7863      	ldrb	r3, [r4, #1]
 8010fa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8010faa:	d132      	bne.n	8011012 <_svfiprintf_r+0x186>
 8010fac:	9b03      	ldr	r3, [sp, #12]
 8010fae:	1d1a      	adds	r2, r3, #4
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	9203      	str	r2, [sp, #12]
 8010fb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010fb8:	3402      	adds	r4, #2
 8010fba:	9305      	str	r3, [sp, #20]
 8010fbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011080 <_svfiprintf_r+0x1f4>
 8010fc0:	7821      	ldrb	r1, [r4, #0]
 8010fc2:	2203      	movs	r2, #3
 8010fc4:	4650      	mov	r0, sl
 8010fc6:	f7ef f98b 	bl	80002e0 <memchr>
 8010fca:	b138      	cbz	r0, 8010fdc <_svfiprintf_r+0x150>
 8010fcc:	9b04      	ldr	r3, [sp, #16]
 8010fce:	eba0 000a 	sub.w	r0, r0, sl
 8010fd2:	2240      	movs	r2, #64	@ 0x40
 8010fd4:	4082      	lsls	r2, r0
 8010fd6:	4313      	orrs	r3, r2
 8010fd8:	3401      	adds	r4, #1
 8010fda:	9304      	str	r3, [sp, #16]
 8010fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fe0:	4824      	ldr	r0, [pc, #144]	@ (8011074 <_svfiprintf_r+0x1e8>)
 8010fe2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010fe6:	2206      	movs	r2, #6
 8010fe8:	f7ef f97a 	bl	80002e0 <memchr>
 8010fec:	2800      	cmp	r0, #0
 8010fee:	d036      	beq.n	801105e <_svfiprintf_r+0x1d2>
 8010ff0:	4b21      	ldr	r3, [pc, #132]	@ (8011078 <_svfiprintf_r+0x1ec>)
 8010ff2:	bb1b      	cbnz	r3, 801103c <_svfiprintf_r+0x1b0>
 8010ff4:	9b03      	ldr	r3, [sp, #12]
 8010ff6:	3307      	adds	r3, #7
 8010ff8:	f023 0307 	bic.w	r3, r3, #7
 8010ffc:	3308      	adds	r3, #8
 8010ffe:	9303      	str	r3, [sp, #12]
 8011000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011002:	4433      	add	r3, r6
 8011004:	9309      	str	r3, [sp, #36]	@ 0x24
 8011006:	e76a      	b.n	8010ede <_svfiprintf_r+0x52>
 8011008:	fb0c 3202 	mla	r2, ip, r2, r3
 801100c:	460c      	mov	r4, r1
 801100e:	2001      	movs	r0, #1
 8011010:	e7a8      	b.n	8010f64 <_svfiprintf_r+0xd8>
 8011012:	2300      	movs	r3, #0
 8011014:	3401      	adds	r4, #1
 8011016:	9305      	str	r3, [sp, #20]
 8011018:	4619      	mov	r1, r3
 801101a:	f04f 0c0a 	mov.w	ip, #10
 801101e:	4620      	mov	r0, r4
 8011020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011024:	3a30      	subs	r2, #48	@ 0x30
 8011026:	2a09      	cmp	r2, #9
 8011028:	d903      	bls.n	8011032 <_svfiprintf_r+0x1a6>
 801102a:	2b00      	cmp	r3, #0
 801102c:	d0c6      	beq.n	8010fbc <_svfiprintf_r+0x130>
 801102e:	9105      	str	r1, [sp, #20]
 8011030:	e7c4      	b.n	8010fbc <_svfiprintf_r+0x130>
 8011032:	fb0c 2101 	mla	r1, ip, r1, r2
 8011036:	4604      	mov	r4, r0
 8011038:	2301      	movs	r3, #1
 801103a:	e7f0      	b.n	801101e <_svfiprintf_r+0x192>
 801103c:	ab03      	add	r3, sp, #12
 801103e:	9300      	str	r3, [sp, #0]
 8011040:	462a      	mov	r2, r5
 8011042:	4b0e      	ldr	r3, [pc, #56]	@ (801107c <_svfiprintf_r+0x1f0>)
 8011044:	a904      	add	r1, sp, #16
 8011046:	4638      	mov	r0, r7
 8011048:	f7fd ff9a 	bl	800ef80 <_printf_float>
 801104c:	1c42      	adds	r2, r0, #1
 801104e:	4606      	mov	r6, r0
 8011050:	d1d6      	bne.n	8011000 <_svfiprintf_r+0x174>
 8011052:	89ab      	ldrh	r3, [r5, #12]
 8011054:	065b      	lsls	r3, r3, #25
 8011056:	f53f af2d 	bmi.w	8010eb4 <_svfiprintf_r+0x28>
 801105a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801105c:	e72c      	b.n	8010eb8 <_svfiprintf_r+0x2c>
 801105e:	ab03      	add	r3, sp, #12
 8011060:	9300      	str	r3, [sp, #0]
 8011062:	462a      	mov	r2, r5
 8011064:	4b05      	ldr	r3, [pc, #20]	@ (801107c <_svfiprintf_r+0x1f0>)
 8011066:	a904      	add	r1, sp, #16
 8011068:	4638      	mov	r0, r7
 801106a:	f7fe fa11 	bl	800f490 <_printf_i>
 801106e:	e7ed      	b.n	801104c <_svfiprintf_r+0x1c0>
 8011070:	08014250 	.word	0x08014250
 8011074:	0801425a 	.word	0x0801425a
 8011078:	0800ef81 	.word	0x0800ef81
 801107c:	08010dd5 	.word	0x08010dd5
 8011080:	08014256 	.word	0x08014256

08011084 <__sflush_r>:
 8011084:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801108c:	0716      	lsls	r6, r2, #28
 801108e:	4605      	mov	r5, r0
 8011090:	460c      	mov	r4, r1
 8011092:	d454      	bmi.n	801113e <__sflush_r+0xba>
 8011094:	684b      	ldr	r3, [r1, #4]
 8011096:	2b00      	cmp	r3, #0
 8011098:	dc02      	bgt.n	80110a0 <__sflush_r+0x1c>
 801109a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801109c:	2b00      	cmp	r3, #0
 801109e:	dd48      	ble.n	8011132 <__sflush_r+0xae>
 80110a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80110a2:	2e00      	cmp	r6, #0
 80110a4:	d045      	beq.n	8011132 <__sflush_r+0xae>
 80110a6:	2300      	movs	r3, #0
 80110a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80110ac:	682f      	ldr	r7, [r5, #0]
 80110ae:	6a21      	ldr	r1, [r4, #32]
 80110b0:	602b      	str	r3, [r5, #0]
 80110b2:	d030      	beq.n	8011116 <__sflush_r+0x92>
 80110b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80110b6:	89a3      	ldrh	r3, [r4, #12]
 80110b8:	0759      	lsls	r1, r3, #29
 80110ba:	d505      	bpl.n	80110c8 <__sflush_r+0x44>
 80110bc:	6863      	ldr	r3, [r4, #4]
 80110be:	1ad2      	subs	r2, r2, r3
 80110c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80110c2:	b10b      	cbz	r3, 80110c8 <__sflush_r+0x44>
 80110c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80110c6:	1ad2      	subs	r2, r2, r3
 80110c8:	2300      	movs	r3, #0
 80110ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80110cc:	6a21      	ldr	r1, [r4, #32]
 80110ce:	4628      	mov	r0, r5
 80110d0:	47b0      	blx	r6
 80110d2:	1c43      	adds	r3, r0, #1
 80110d4:	89a3      	ldrh	r3, [r4, #12]
 80110d6:	d106      	bne.n	80110e6 <__sflush_r+0x62>
 80110d8:	6829      	ldr	r1, [r5, #0]
 80110da:	291d      	cmp	r1, #29
 80110dc:	d82b      	bhi.n	8011136 <__sflush_r+0xb2>
 80110de:	4a2a      	ldr	r2, [pc, #168]	@ (8011188 <__sflush_r+0x104>)
 80110e0:	410a      	asrs	r2, r1
 80110e2:	07d6      	lsls	r6, r2, #31
 80110e4:	d427      	bmi.n	8011136 <__sflush_r+0xb2>
 80110e6:	2200      	movs	r2, #0
 80110e8:	6062      	str	r2, [r4, #4]
 80110ea:	04d9      	lsls	r1, r3, #19
 80110ec:	6922      	ldr	r2, [r4, #16]
 80110ee:	6022      	str	r2, [r4, #0]
 80110f0:	d504      	bpl.n	80110fc <__sflush_r+0x78>
 80110f2:	1c42      	adds	r2, r0, #1
 80110f4:	d101      	bne.n	80110fa <__sflush_r+0x76>
 80110f6:	682b      	ldr	r3, [r5, #0]
 80110f8:	b903      	cbnz	r3, 80110fc <__sflush_r+0x78>
 80110fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80110fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80110fe:	602f      	str	r7, [r5, #0]
 8011100:	b1b9      	cbz	r1, 8011132 <__sflush_r+0xae>
 8011102:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011106:	4299      	cmp	r1, r3
 8011108:	d002      	beq.n	8011110 <__sflush_r+0x8c>
 801110a:	4628      	mov	r0, r5
 801110c:	f7ff fa96 	bl	801063c <_free_r>
 8011110:	2300      	movs	r3, #0
 8011112:	6363      	str	r3, [r4, #52]	@ 0x34
 8011114:	e00d      	b.n	8011132 <__sflush_r+0xae>
 8011116:	2301      	movs	r3, #1
 8011118:	4628      	mov	r0, r5
 801111a:	47b0      	blx	r6
 801111c:	4602      	mov	r2, r0
 801111e:	1c50      	adds	r0, r2, #1
 8011120:	d1c9      	bne.n	80110b6 <__sflush_r+0x32>
 8011122:	682b      	ldr	r3, [r5, #0]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d0c6      	beq.n	80110b6 <__sflush_r+0x32>
 8011128:	2b1d      	cmp	r3, #29
 801112a:	d001      	beq.n	8011130 <__sflush_r+0xac>
 801112c:	2b16      	cmp	r3, #22
 801112e:	d11e      	bne.n	801116e <__sflush_r+0xea>
 8011130:	602f      	str	r7, [r5, #0]
 8011132:	2000      	movs	r0, #0
 8011134:	e022      	b.n	801117c <__sflush_r+0xf8>
 8011136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801113a:	b21b      	sxth	r3, r3
 801113c:	e01b      	b.n	8011176 <__sflush_r+0xf2>
 801113e:	690f      	ldr	r7, [r1, #16]
 8011140:	2f00      	cmp	r7, #0
 8011142:	d0f6      	beq.n	8011132 <__sflush_r+0xae>
 8011144:	0793      	lsls	r3, r2, #30
 8011146:	680e      	ldr	r6, [r1, #0]
 8011148:	bf08      	it	eq
 801114a:	694b      	ldreq	r3, [r1, #20]
 801114c:	600f      	str	r7, [r1, #0]
 801114e:	bf18      	it	ne
 8011150:	2300      	movne	r3, #0
 8011152:	eba6 0807 	sub.w	r8, r6, r7
 8011156:	608b      	str	r3, [r1, #8]
 8011158:	f1b8 0f00 	cmp.w	r8, #0
 801115c:	dde9      	ble.n	8011132 <__sflush_r+0xae>
 801115e:	6a21      	ldr	r1, [r4, #32]
 8011160:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011162:	4643      	mov	r3, r8
 8011164:	463a      	mov	r2, r7
 8011166:	4628      	mov	r0, r5
 8011168:	47b0      	blx	r6
 801116a:	2800      	cmp	r0, #0
 801116c:	dc08      	bgt.n	8011180 <__sflush_r+0xfc>
 801116e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011176:	81a3      	strh	r3, [r4, #12]
 8011178:	f04f 30ff 	mov.w	r0, #4294967295
 801117c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011180:	4407      	add	r7, r0
 8011182:	eba8 0800 	sub.w	r8, r8, r0
 8011186:	e7e7      	b.n	8011158 <__sflush_r+0xd4>
 8011188:	dfbffffe 	.word	0xdfbffffe

0801118c <_fflush_r>:
 801118c:	b538      	push	{r3, r4, r5, lr}
 801118e:	690b      	ldr	r3, [r1, #16]
 8011190:	4605      	mov	r5, r0
 8011192:	460c      	mov	r4, r1
 8011194:	b913      	cbnz	r3, 801119c <_fflush_r+0x10>
 8011196:	2500      	movs	r5, #0
 8011198:	4628      	mov	r0, r5
 801119a:	bd38      	pop	{r3, r4, r5, pc}
 801119c:	b118      	cbz	r0, 80111a6 <_fflush_r+0x1a>
 801119e:	6a03      	ldr	r3, [r0, #32]
 80111a0:	b90b      	cbnz	r3, 80111a6 <_fflush_r+0x1a>
 80111a2:	f7fe fb21 	bl	800f7e8 <__sinit>
 80111a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d0f3      	beq.n	8011196 <_fflush_r+0xa>
 80111ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80111b0:	07d0      	lsls	r0, r2, #31
 80111b2:	d404      	bmi.n	80111be <_fflush_r+0x32>
 80111b4:	0599      	lsls	r1, r3, #22
 80111b6:	d402      	bmi.n	80111be <_fflush_r+0x32>
 80111b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80111ba:	f7fe fc50 	bl	800fa5e <__retarget_lock_acquire_recursive>
 80111be:	4628      	mov	r0, r5
 80111c0:	4621      	mov	r1, r4
 80111c2:	f7ff ff5f 	bl	8011084 <__sflush_r>
 80111c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80111c8:	07da      	lsls	r2, r3, #31
 80111ca:	4605      	mov	r5, r0
 80111cc:	d4e4      	bmi.n	8011198 <_fflush_r+0xc>
 80111ce:	89a3      	ldrh	r3, [r4, #12]
 80111d0:	059b      	lsls	r3, r3, #22
 80111d2:	d4e1      	bmi.n	8011198 <_fflush_r+0xc>
 80111d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80111d6:	f7fe fc43 	bl	800fa60 <__retarget_lock_release_recursive>
 80111da:	e7dd      	b.n	8011198 <_fflush_r+0xc>

080111dc <memmove>:
 80111dc:	4288      	cmp	r0, r1
 80111de:	b510      	push	{r4, lr}
 80111e0:	eb01 0402 	add.w	r4, r1, r2
 80111e4:	d902      	bls.n	80111ec <memmove+0x10>
 80111e6:	4284      	cmp	r4, r0
 80111e8:	4623      	mov	r3, r4
 80111ea:	d807      	bhi.n	80111fc <memmove+0x20>
 80111ec:	1e43      	subs	r3, r0, #1
 80111ee:	42a1      	cmp	r1, r4
 80111f0:	d008      	beq.n	8011204 <memmove+0x28>
 80111f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80111f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80111fa:	e7f8      	b.n	80111ee <memmove+0x12>
 80111fc:	4402      	add	r2, r0
 80111fe:	4601      	mov	r1, r0
 8011200:	428a      	cmp	r2, r1
 8011202:	d100      	bne.n	8011206 <memmove+0x2a>
 8011204:	bd10      	pop	{r4, pc}
 8011206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801120a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801120e:	e7f7      	b.n	8011200 <memmove+0x24>

08011210 <__assert_func>:
 8011210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011212:	4614      	mov	r4, r2
 8011214:	461a      	mov	r2, r3
 8011216:	4b09      	ldr	r3, [pc, #36]	@ (801123c <__assert_func+0x2c>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	4605      	mov	r5, r0
 801121c:	68d8      	ldr	r0, [r3, #12]
 801121e:	b954      	cbnz	r4, 8011236 <__assert_func+0x26>
 8011220:	4b07      	ldr	r3, [pc, #28]	@ (8011240 <__assert_func+0x30>)
 8011222:	461c      	mov	r4, r3
 8011224:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011228:	9100      	str	r1, [sp, #0]
 801122a:	462b      	mov	r3, r5
 801122c:	4905      	ldr	r1, [pc, #20]	@ (8011244 <__assert_func+0x34>)
 801122e:	f000 f86f 	bl	8011310 <fiprintf>
 8011232:	f000 f87f 	bl	8011334 <abort>
 8011236:	4b04      	ldr	r3, [pc, #16]	@ (8011248 <__assert_func+0x38>)
 8011238:	e7f4      	b.n	8011224 <__assert_func+0x14>
 801123a:	bf00      	nop
 801123c:	24000048 	.word	0x24000048
 8011240:	080142a6 	.word	0x080142a6
 8011244:	08014278 	.word	0x08014278
 8011248:	0801426b 	.word	0x0801426b

0801124c <_calloc_r>:
 801124c:	b570      	push	{r4, r5, r6, lr}
 801124e:	fba1 5402 	umull	r5, r4, r1, r2
 8011252:	b93c      	cbnz	r4, 8011264 <_calloc_r+0x18>
 8011254:	4629      	mov	r1, r5
 8011256:	f7fd fd77 	bl	800ed48 <_malloc_r>
 801125a:	4606      	mov	r6, r0
 801125c:	b928      	cbnz	r0, 801126a <_calloc_r+0x1e>
 801125e:	2600      	movs	r6, #0
 8011260:	4630      	mov	r0, r6
 8011262:	bd70      	pop	{r4, r5, r6, pc}
 8011264:	220c      	movs	r2, #12
 8011266:	6002      	str	r2, [r0, #0]
 8011268:	e7f9      	b.n	801125e <_calloc_r+0x12>
 801126a:	462a      	mov	r2, r5
 801126c:	4621      	mov	r1, r4
 801126e:	f7fe fb68 	bl	800f942 <memset>
 8011272:	e7f5      	b.n	8011260 <_calloc_r+0x14>

08011274 <__ascii_mbtowc>:
 8011274:	b082      	sub	sp, #8
 8011276:	b901      	cbnz	r1, 801127a <__ascii_mbtowc+0x6>
 8011278:	a901      	add	r1, sp, #4
 801127a:	b142      	cbz	r2, 801128e <__ascii_mbtowc+0x1a>
 801127c:	b14b      	cbz	r3, 8011292 <__ascii_mbtowc+0x1e>
 801127e:	7813      	ldrb	r3, [r2, #0]
 8011280:	600b      	str	r3, [r1, #0]
 8011282:	7812      	ldrb	r2, [r2, #0]
 8011284:	1e10      	subs	r0, r2, #0
 8011286:	bf18      	it	ne
 8011288:	2001      	movne	r0, #1
 801128a:	b002      	add	sp, #8
 801128c:	4770      	bx	lr
 801128e:	4610      	mov	r0, r2
 8011290:	e7fb      	b.n	801128a <__ascii_mbtowc+0x16>
 8011292:	f06f 0001 	mvn.w	r0, #1
 8011296:	e7f8      	b.n	801128a <__ascii_mbtowc+0x16>

08011298 <_realloc_r>:
 8011298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801129c:	4680      	mov	r8, r0
 801129e:	4615      	mov	r5, r2
 80112a0:	460c      	mov	r4, r1
 80112a2:	b921      	cbnz	r1, 80112ae <_realloc_r+0x16>
 80112a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112a8:	4611      	mov	r1, r2
 80112aa:	f7fd bd4d 	b.w	800ed48 <_malloc_r>
 80112ae:	b92a      	cbnz	r2, 80112bc <_realloc_r+0x24>
 80112b0:	f7ff f9c4 	bl	801063c <_free_r>
 80112b4:	2400      	movs	r4, #0
 80112b6:	4620      	mov	r0, r4
 80112b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112bc:	f000 f841 	bl	8011342 <_malloc_usable_size_r>
 80112c0:	4285      	cmp	r5, r0
 80112c2:	4606      	mov	r6, r0
 80112c4:	d802      	bhi.n	80112cc <_realloc_r+0x34>
 80112c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80112ca:	d8f4      	bhi.n	80112b6 <_realloc_r+0x1e>
 80112cc:	4629      	mov	r1, r5
 80112ce:	4640      	mov	r0, r8
 80112d0:	f7fd fd3a 	bl	800ed48 <_malloc_r>
 80112d4:	4607      	mov	r7, r0
 80112d6:	2800      	cmp	r0, #0
 80112d8:	d0ec      	beq.n	80112b4 <_realloc_r+0x1c>
 80112da:	42b5      	cmp	r5, r6
 80112dc:	462a      	mov	r2, r5
 80112de:	4621      	mov	r1, r4
 80112e0:	bf28      	it	cs
 80112e2:	4632      	movcs	r2, r6
 80112e4:	f7fe fbbd 	bl	800fa62 <memcpy>
 80112e8:	4621      	mov	r1, r4
 80112ea:	4640      	mov	r0, r8
 80112ec:	f7ff f9a6 	bl	801063c <_free_r>
 80112f0:	463c      	mov	r4, r7
 80112f2:	e7e0      	b.n	80112b6 <_realloc_r+0x1e>

080112f4 <__ascii_wctomb>:
 80112f4:	4603      	mov	r3, r0
 80112f6:	4608      	mov	r0, r1
 80112f8:	b141      	cbz	r1, 801130c <__ascii_wctomb+0x18>
 80112fa:	2aff      	cmp	r2, #255	@ 0xff
 80112fc:	d904      	bls.n	8011308 <__ascii_wctomb+0x14>
 80112fe:	228a      	movs	r2, #138	@ 0x8a
 8011300:	601a      	str	r2, [r3, #0]
 8011302:	f04f 30ff 	mov.w	r0, #4294967295
 8011306:	4770      	bx	lr
 8011308:	700a      	strb	r2, [r1, #0]
 801130a:	2001      	movs	r0, #1
 801130c:	4770      	bx	lr
	...

08011310 <fiprintf>:
 8011310:	b40e      	push	{r1, r2, r3}
 8011312:	b503      	push	{r0, r1, lr}
 8011314:	4601      	mov	r1, r0
 8011316:	ab03      	add	r3, sp, #12
 8011318:	4805      	ldr	r0, [pc, #20]	@ (8011330 <fiprintf+0x20>)
 801131a:	f853 2b04 	ldr.w	r2, [r3], #4
 801131e:	6800      	ldr	r0, [r0, #0]
 8011320:	9301      	str	r3, [sp, #4]
 8011322:	f000 f83f 	bl	80113a4 <_vfiprintf_r>
 8011326:	b002      	add	sp, #8
 8011328:	f85d eb04 	ldr.w	lr, [sp], #4
 801132c:	b003      	add	sp, #12
 801132e:	4770      	bx	lr
 8011330:	24000048 	.word	0x24000048

08011334 <abort>:
 8011334:	b508      	push	{r3, lr}
 8011336:	2006      	movs	r0, #6
 8011338:	f000 fa08 	bl	801174c <raise>
 801133c:	2001      	movs	r0, #1
 801133e:	f7f0 f82f 	bl	80013a0 <_exit>

08011342 <_malloc_usable_size_r>:
 8011342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011346:	1f18      	subs	r0, r3, #4
 8011348:	2b00      	cmp	r3, #0
 801134a:	bfbc      	itt	lt
 801134c:	580b      	ldrlt	r3, [r1, r0]
 801134e:	18c0      	addlt	r0, r0, r3
 8011350:	4770      	bx	lr

08011352 <__sfputc_r>:
 8011352:	6893      	ldr	r3, [r2, #8]
 8011354:	3b01      	subs	r3, #1
 8011356:	2b00      	cmp	r3, #0
 8011358:	b410      	push	{r4}
 801135a:	6093      	str	r3, [r2, #8]
 801135c:	da08      	bge.n	8011370 <__sfputc_r+0x1e>
 801135e:	6994      	ldr	r4, [r2, #24]
 8011360:	42a3      	cmp	r3, r4
 8011362:	db01      	blt.n	8011368 <__sfputc_r+0x16>
 8011364:	290a      	cmp	r1, #10
 8011366:	d103      	bne.n	8011370 <__sfputc_r+0x1e>
 8011368:	f85d 4b04 	ldr.w	r4, [sp], #4
 801136c:	f000 b932 	b.w	80115d4 <__swbuf_r>
 8011370:	6813      	ldr	r3, [r2, #0]
 8011372:	1c58      	adds	r0, r3, #1
 8011374:	6010      	str	r0, [r2, #0]
 8011376:	7019      	strb	r1, [r3, #0]
 8011378:	4608      	mov	r0, r1
 801137a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801137e:	4770      	bx	lr

08011380 <__sfputs_r>:
 8011380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011382:	4606      	mov	r6, r0
 8011384:	460f      	mov	r7, r1
 8011386:	4614      	mov	r4, r2
 8011388:	18d5      	adds	r5, r2, r3
 801138a:	42ac      	cmp	r4, r5
 801138c:	d101      	bne.n	8011392 <__sfputs_r+0x12>
 801138e:	2000      	movs	r0, #0
 8011390:	e007      	b.n	80113a2 <__sfputs_r+0x22>
 8011392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011396:	463a      	mov	r2, r7
 8011398:	4630      	mov	r0, r6
 801139a:	f7ff ffda 	bl	8011352 <__sfputc_r>
 801139e:	1c43      	adds	r3, r0, #1
 80113a0:	d1f3      	bne.n	801138a <__sfputs_r+0xa>
 80113a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080113a4 <_vfiprintf_r>:
 80113a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113a8:	460d      	mov	r5, r1
 80113aa:	b09d      	sub	sp, #116	@ 0x74
 80113ac:	4614      	mov	r4, r2
 80113ae:	4698      	mov	r8, r3
 80113b0:	4606      	mov	r6, r0
 80113b2:	b118      	cbz	r0, 80113bc <_vfiprintf_r+0x18>
 80113b4:	6a03      	ldr	r3, [r0, #32]
 80113b6:	b90b      	cbnz	r3, 80113bc <_vfiprintf_r+0x18>
 80113b8:	f7fe fa16 	bl	800f7e8 <__sinit>
 80113bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80113be:	07d9      	lsls	r1, r3, #31
 80113c0:	d405      	bmi.n	80113ce <_vfiprintf_r+0x2a>
 80113c2:	89ab      	ldrh	r3, [r5, #12]
 80113c4:	059a      	lsls	r2, r3, #22
 80113c6:	d402      	bmi.n	80113ce <_vfiprintf_r+0x2a>
 80113c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80113ca:	f7fe fb48 	bl	800fa5e <__retarget_lock_acquire_recursive>
 80113ce:	89ab      	ldrh	r3, [r5, #12]
 80113d0:	071b      	lsls	r3, r3, #28
 80113d2:	d501      	bpl.n	80113d8 <_vfiprintf_r+0x34>
 80113d4:	692b      	ldr	r3, [r5, #16]
 80113d6:	b99b      	cbnz	r3, 8011400 <_vfiprintf_r+0x5c>
 80113d8:	4629      	mov	r1, r5
 80113da:	4630      	mov	r0, r6
 80113dc:	f000 f938 	bl	8011650 <__swsetup_r>
 80113e0:	b170      	cbz	r0, 8011400 <_vfiprintf_r+0x5c>
 80113e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80113e4:	07dc      	lsls	r4, r3, #31
 80113e6:	d504      	bpl.n	80113f2 <_vfiprintf_r+0x4e>
 80113e8:	f04f 30ff 	mov.w	r0, #4294967295
 80113ec:	b01d      	add	sp, #116	@ 0x74
 80113ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113f2:	89ab      	ldrh	r3, [r5, #12]
 80113f4:	0598      	lsls	r0, r3, #22
 80113f6:	d4f7      	bmi.n	80113e8 <_vfiprintf_r+0x44>
 80113f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80113fa:	f7fe fb31 	bl	800fa60 <__retarget_lock_release_recursive>
 80113fe:	e7f3      	b.n	80113e8 <_vfiprintf_r+0x44>
 8011400:	2300      	movs	r3, #0
 8011402:	9309      	str	r3, [sp, #36]	@ 0x24
 8011404:	2320      	movs	r3, #32
 8011406:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801140a:	f8cd 800c 	str.w	r8, [sp, #12]
 801140e:	2330      	movs	r3, #48	@ 0x30
 8011410:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80115c0 <_vfiprintf_r+0x21c>
 8011414:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011418:	f04f 0901 	mov.w	r9, #1
 801141c:	4623      	mov	r3, r4
 801141e:	469a      	mov	sl, r3
 8011420:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011424:	b10a      	cbz	r2, 801142a <_vfiprintf_r+0x86>
 8011426:	2a25      	cmp	r2, #37	@ 0x25
 8011428:	d1f9      	bne.n	801141e <_vfiprintf_r+0x7a>
 801142a:	ebba 0b04 	subs.w	fp, sl, r4
 801142e:	d00b      	beq.n	8011448 <_vfiprintf_r+0xa4>
 8011430:	465b      	mov	r3, fp
 8011432:	4622      	mov	r2, r4
 8011434:	4629      	mov	r1, r5
 8011436:	4630      	mov	r0, r6
 8011438:	f7ff ffa2 	bl	8011380 <__sfputs_r>
 801143c:	3001      	adds	r0, #1
 801143e:	f000 80a7 	beq.w	8011590 <_vfiprintf_r+0x1ec>
 8011442:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011444:	445a      	add	r2, fp
 8011446:	9209      	str	r2, [sp, #36]	@ 0x24
 8011448:	f89a 3000 	ldrb.w	r3, [sl]
 801144c:	2b00      	cmp	r3, #0
 801144e:	f000 809f 	beq.w	8011590 <_vfiprintf_r+0x1ec>
 8011452:	2300      	movs	r3, #0
 8011454:	f04f 32ff 	mov.w	r2, #4294967295
 8011458:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801145c:	f10a 0a01 	add.w	sl, sl, #1
 8011460:	9304      	str	r3, [sp, #16]
 8011462:	9307      	str	r3, [sp, #28]
 8011464:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011468:	931a      	str	r3, [sp, #104]	@ 0x68
 801146a:	4654      	mov	r4, sl
 801146c:	2205      	movs	r2, #5
 801146e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011472:	4853      	ldr	r0, [pc, #332]	@ (80115c0 <_vfiprintf_r+0x21c>)
 8011474:	f7ee ff34 	bl	80002e0 <memchr>
 8011478:	9a04      	ldr	r2, [sp, #16]
 801147a:	b9d8      	cbnz	r0, 80114b4 <_vfiprintf_r+0x110>
 801147c:	06d1      	lsls	r1, r2, #27
 801147e:	bf44      	itt	mi
 8011480:	2320      	movmi	r3, #32
 8011482:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011486:	0713      	lsls	r3, r2, #28
 8011488:	bf44      	itt	mi
 801148a:	232b      	movmi	r3, #43	@ 0x2b
 801148c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011490:	f89a 3000 	ldrb.w	r3, [sl]
 8011494:	2b2a      	cmp	r3, #42	@ 0x2a
 8011496:	d015      	beq.n	80114c4 <_vfiprintf_r+0x120>
 8011498:	9a07      	ldr	r2, [sp, #28]
 801149a:	4654      	mov	r4, sl
 801149c:	2000      	movs	r0, #0
 801149e:	f04f 0c0a 	mov.w	ip, #10
 80114a2:	4621      	mov	r1, r4
 80114a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114a8:	3b30      	subs	r3, #48	@ 0x30
 80114aa:	2b09      	cmp	r3, #9
 80114ac:	d94b      	bls.n	8011546 <_vfiprintf_r+0x1a2>
 80114ae:	b1b0      	cbz	r0, 80114de <_vfiprintf_r+0x13a>
 80114b0:	9207      	str	r2, [sp, #28]
 80114b2:	e014      	b.n	80114de <_vfiprintf_r+0x13a>
 80114b4:	eba0 0308 	sub.w	r3, r0, r8
 80114b8:	fa09 f303 	lsl.w	r3, r9, r3
 80114bc:	4313      	orrs	r3, r2
 80114be:	9304      	str	r3, [sp, #16]
 80114c0:	46a2      	mov	sl, r4
 80114c2:	e7d2      	b.n	801146a <_vfiprintf_r+0xc6>
 80114c4:	9b03      	ldr	r3, [sp, #12]
 80114c6:	1d19      	adds	r1, r3, #4
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	9103      	str	r1, [sp, #12]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	bfbb      	ittet	lt
 80114d0:	425b      	neglt	r3, r3
 80114d2:	f042 0202 	orrlt.w	r2, r2, #2
 80114d6:	9307      	strge	r3, [sp, #28]
 80114d8:	9307      	strlt	r3, [sp, #28]
 80114da:	bfb8      	it	lt
 80114dc:	9204      	strlt	r2, [sp, #16]
 80114de:	7823      	ldrb	r3, [r4, #0]
 80114e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80114e2:	d10a      	bne.n	80114fa <_vfiprintf_r+0x156>
 80114e4:	7863      	ldrb	r3, [r4, #1]
 80114e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80114e8:	d132      	bne.n	8011550 <_vfiprintf_r+0x1ac>
 80114ea:	9b03      	ldr	r3, [sp, #12]
 80114ec:	1d1a      	adds	r2, r3, #4
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	9203      	str	r2, [sp, #12]
 80114f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80114f6:	3402      	adds	r4, #2
 80114f8:	9305      	str	r3, [sp, #20]
 80114fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80115d0 <_vfiprintf_r+0x22c>
 80114fe:	7821      	ldrb	r1, [r4, #0]
 8011500:	2203      	movs	r2, #3
 8011502:	4650      	mov	r0, sl
 8011504:	f7ee feec 	bl	80002e0 <memchr>
 8011508:	b138      	cbz	r0, 801151a <_vfiprintf_r+0x176>
 801150a:	9b04      	ldr	r3, [sp, #16]
 801150c:	eba0 000a 	sub.w	r0, r0, sl
 8011510:	2240      	movs	r2, #64	@ 0x40
 8011512:	4082      	lsls	r2, r0
 8011514:	4313      	orrs	r3, r2
 8011516:	3401      	adds	r4, #1
 8011518:	9304      	str	r3, [sp, #16]
 801151a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801151e:	4829      	ldr	r0, [pc, #164]	@ (80115c4 <_vfiprintf_r+0x220>)
 8011520:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011524:	2206      	movs	r2, #6
 8011526:	f7ee fedb 	bl	80002e0 <memchr>
 801152a:	2800      	cmp	r0, #0
 801152c:	d03f      	beq.n	80115ae <_vfiprintf_r+0x20a>
 801152e:	4b26      	ldr	r3, [pc, #152]	@ (80115c8 <_vfiprintf_r+0x224>)
 8011530:	bb1b      	cbnz	r3, 801157a <_vfiprintf_r+0x1d6>
 8011532:	9b03      	ldr	r3, [sp, #12]
 8011534:	3307      	adds	r3, #7
 8011536:	f023 0307 	bic.w	r3, r3, #7
 801153a:	3308      	adds	r3, #8
 801153c:	9303      	str	r3, [sp, #12]
 801153e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011540:	443b      	add	r3, r7
 8011542:	9309      	str	r3, [sp, #36]	@ 0x24
 8011544:	e76a      	b.n	801141c <_vfiprintf_r+0x78>
 8011546:	fb0c 3202 	mla	r2, ip, r2, r3
 801154a:	460c      	mov	r4, r1
 801154c:	2001      	movs	r0, #1
 801154e:	e7a8      	b.n	80114a2 <_vfiprintf_r+0xfe>
 8011550:	2300      	movs	r3, #0
 8011552:	3401      	adds	r4, #1
 8011554:	9305      	str	r3, [sp, #20]
 8011556:	4619      	mov	r1, r3
 8011558:	f04f 0c0a 	mov.w	ip, #10
 801155c:	4620      	mov	r0, r4
 801155e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011562:	3a30      	subs	r2, #48	@ 0x30
 8011564:	2a09      	cmp	r2, #9
 8011566:	d903      	bls.n	8011570 <_vfiprintf_r+0x1cc>
 8011568:	2b00      	cmp	r3, #0
 801156a:	d0c6      	beq.n	80114fa <_vfiprintf_r+0x156>
 801156c:	9105      	str	r1, [sp, #20]
 801156e:	e7c4      	b.n	80114fa <_vfiprintf_r+0x156>
 8011570:	fb0c 2101 	mla	r1, ip, r1, r2
 8011574:	4604      	mov	r4, r0
 8011576:	2301      	movs	r3, #1
 8011578:	e7f0      	b.n	801155c <_vfiprintf_r+0x1b8>
 801157a:	ab03      	add	r3, sp, #12
 801157c:	9300      	str	r3, [sp, #0]
 801157e:	462a      	mov	r2, r5
 8011580:	4b12      	ldr	r3, [pc, #72]	@ (80115cc <_vfiprintf_r+0x228>)
 8011582:	a904      	add	r1, sp, #16
 8011584:	4630      	mov	r0, r6
 8011586:	f7fd fcfb 	bl	800ef80 <_printf_float>
 801158a:	4607      	mov	r7, r0
 801158c:	1c78      	adds	r0, r7, #1
 801158e:	d1d6      	bne.n	801153e <_vfiprintf_r+0x19a>
 8011590:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011592:	07d9      	lsls	r1, r3, #31
 8011594:	d405      	bmi.n	80115a2 <_vfiprintf_r+0x1fe>
 8011596:	89ab      	ldrh	r3, [r5, #12]
 8011598:	059a      	lsls	r2, r3, #22
 801159a:	d402      	bmi.n	80115a2 <_vfiprintf_r+0x1fe>
 801159c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801159e:	f7fe fa5f 	bl	800fa60 <__retarget_lock_release_recursive>
 80115a2:	89ab      	ldrh	r3, [r5, #12]
 80115a4:	065b      	lsls	r3, r3, #25
 80115a6:	f53f af1f 	bmi.w	80113e8 <_vfiprintf_r+0x44>
 80115aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80115ac:	e71e      	b.n	80113ec <_vfiprintf_r+0x48>
 80115ae:	ab03      	add	r3, sp, #12
 80115b0:	9300      	str	r3, [sp, #0]
 80115b2:	462a      	mov	r2, r5
 80115b4:	4b05      	ldr	r3, [pc, #20]	@ (80115cc <_vfiprintf_r+0x228>)
 80115b6:	a904      	add	r1, sp, #16
 80115b8:	4630      	mov	r0, r6
 80115ba:	f7fd ff69 	bl	800f490 <_printf_i>
 80115be:	e7e4      	b.n	801158a <_vfiprintf_r+0x1e6>
 80115c0:	08014250 	.word	0x08014250
 80115c4:	0801425a 	.word	0x0801425a
 80115c8:	0800ef81 	.word	0x0800ef81
 80115cc:	08011381 	.word	0x08011381
 80115d0:	08014256 	.word	0x08014256

080115d4 <__swbuf_r>:
 80115d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115d6:	460e      	mov	r6, r1
 80115d8:	4614      	mov	r4, r2
 80115da:	4605      	mov	r5, r0
 80115dc:	b118      	cbz	r0, 80115e6 <__swbuf_r+0x12>
 80115de:	6a03      	ldr	r3, [r0, #32]
 80115e0:	b90b      	cbnz	r3, 80115e6 <__swbuf_r+0x12>
 80115e2:	f7fe f901 	bl	800f7e8 <__sinit>
 80115e6:	69a3      	ldr	r3, [r4, #24]
 80115e8:	60a3      	str	r3, [r4, #8]
 80115ea:	89a3      	ldrh	r3, [r4, #12]
 80115ec:	071a      	lsls	r2, r3, #28
 80115ee:	d501      	bpl.n	80115f4 <__swbuf_r+0x20>
 80115f0:	6923      	ldr	r3, [r4, #16]
 80115f2:	b943      	cbnz	r3, 8011606 <__swbuf_r+0x32>
 80115f4:	4621      	mov	r1, r4
 80115f6:	4628      	mov	r0, r5
 80115f8:	f000 f82a 	bl	8011650 <__swsetup_r>
 80115fc:	b118      	cbz	r0, 8011606 <__swbuf_r+0x32>
 80115fe:	f04f 37ff 	mov.w	r7, #4294967295
 8011602:	4638      	mov	r0, r7
 8011604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011606:	6823      	ldr	r3, [r4, #0]
 8011608:	6922      	ldr	r2, [r4, #16]
 801160a:	1a98      	subs	r0, r3, r2
 801160c:	6963      	ldr	r3, [r4, #20]
 801160e:	b2f6      	uxtb	r6, r6
 8011610:	4283      	cmp	r3, r0
 8011612:	4637      	mov	r7, r6
 8011614:	dc05      	bgt.n	8011622 <__swbuf_r+0x4e>
 8011616:	4621      	mov	r1, r4
 8011618:	4628      	mov	r0, r5
 801161a:	f7ff fdb7 	bl	801118c <_fflush_r>
 801161e:	2800      	cmp	r0, #0
 8011620:	d1ed      	bne.n	80115fe <__swbuf_r+0x2a>
 8011622:	68a3      	ldr	r3, [r4, #8]
 8011624:	3b01      	subs	r3, #1
 8011626:	60a3      	str	r3, [r4, #8]
 8011628:	6823      	ldr	r3, [r4, #0]
 801162a:	1c5a      	adds	r2, r3, #1
 801162c:	6022      	str	r2, [r4, #0]
 801162e:	701e      	strb	r6, [r3, #0]
 8011630:	6962      	ldr	r2, [r4, #20]
 8011632:	1c43      	adds	r3, r0, #1
 8011634:	429a      	cmp	r2, r3
 8011636:	d004      	beq.n	8011642 <__swbuf_r+0x6e>
 8011638:	89a3      	ldrh	r3, [r4, #12]
 801163a:	07db      	lsls	r3, r3, #31
 801163c:	d5e1      	bpl.n	8011602 <__swbuf_r+0x2e>
 801163e:	2e0a      	cmp	r6, #10
 8011640:	d1df      	bne.n	8011602 <__swbuf_r+0x2e>
 8011642:	4621      	mov	r1, r4
 8011644:	4628      	mov	r0, r5
 8011646:	f7ff fda1 	bl	801118c <_fflush_r>
 801164a:	2800      	cmp	r0, #0
 801164c:	d0d9      	beq.n	8011602 <__swbuf_r+0x2e>
 801164e:	e7d6      	b.n	80115fe <__swbuf_r+0x2a>

08011650 <__swsetup_r>:
 8011650:	b538      	push	{r3, r4, r5, lr}
 8011652:	4b29      	ldr	r3, [pc, #164]	@ (80116f8 <__swsetup_r+0xa8>)
 8011654:	4605      	mov	r5, r0
 8011656:	6818      	ldr	r0, [r3, #0]
 8011658:	460c      	mov	r4, r1
 801165a:	b118      	cbz	r0, 8011664 <__swsetup_r+0x14>
 801165c:	6a03      	ldr	r3, [r0, #32]
 801165e:	b90b      	cbnz	r3, 8011664 <__swsetup_r+0x14>
 8011660:	f7fe f8c2 	bl	800f7e8 <__sinit>
 8011664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011668:	0719      	lsls	r1, r3, #28
 801166a:	d422      	bmi.n	80116b2 <__swsetup_r+0x62>
 801166c:	06da      	lsls	r2, r3, #27
 801166e:	d407      	bmi.n	8011680 <__swsetup_r+0x30>
 8011670:	2209      	movs	r2, #9
 8011672:	602a      	str	r2, [r5, #0]
 8011674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011678:	81a3      	strh	r3, [r4, #12]
 801167a:	f04f 30ff 	mov.w	r0, #4294967295
 801167e:	e033      	b.n	80116e8 <__swsetup_r+0x98>
 8011680:	0758      	lsls	r0, r3, #29
 8011682:	d512      	bpl.n	80116aa <__swsetup_r+0x5a>
 8011684:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011686:	b141      	cbz	r1, 801169a <__swsetup_r+0x4a>
 8011688:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801168c:	4299      	cmp	r1, r3
 801168e:	d002      	beq.n	8011696 <__swsetup_r+0x46>
 8011690:	4628      	mov	r0, r5
 8011692:	f7fe ffd3 	bl	801063c <_free_r>
 8011696:	2300      	movs	r3, #0
 8011698:	6363      	str	r3, [r4, #52]	@ 0x34
 801169a:	89a3      	ldrh	r3, [r4, #12]
 801169c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80116a0:	81a3      	strh	r3, [r4, #12]
 80116a2:	2300      	movs	r3, #0
 80116a4:	6063      	str	r3, [r4, #4]
 80116a6:	6923      	ldr	r3, [r4, #16]
 80116a8:	6023      	str	r3, [r4, #0]
 80116aa:	89a3      	ldrh	r3, [r4, #12]
 80116ac:	f043 0308 	orr.w	r3, r3, #8
 80116b0:	81a3      	strh	r3, [r4, #12]
 80116b2:	6923      	ldr	r3, [r4, #16]
 80116b4:	b94b      	cbnz	r3, 80116ca <__swsetup_r+0x7a>
 80116b6:	89a3      	ldrh	r3, [r4, #12]
 80116b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80116bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80116c0:	d003      	beq.n	80116ca <__swsetup_r+0x7a>
 80116c2:	4621      	mov	r1, r4
 80116c4:	4628      	mov	r0, r5
 80116c6:	f000 f883 	bl	80117d0 <__smakebuf_r>
 80116ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116ce:	f013 0201 	ands.w	r2, r3, #1
 80116d2:	d00a      	beq.n	80116ea <__swsetup_r+0x9a>
 80116d4:	2200      	movs	r2, #0
 80116d6:	60a2      	str	r2, [r4, #8]
 80116d8:	6962      	ldr	r2, [r4, #20]
 80116da:	4252      	negs	r2, r2
 80116dc:	61a2      	str	r2, [r4, #24]
 80116de:	6922      	ldr	r2, [r4, #16]
 80116e0:	b942      	cbnz	r2, 80116f4 <__swsetup_r+0xa4>
 80116e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80116e6:	d1c5      	bne.n	8011674 <__swsetup_r+0x24>
 80116e8:	bd38      	pop	{r3, r4, r5, pc}
 80116ea:	0799      	lsls	r1, r3, #30
 80116ec:	bf58      	it	pl
 80116ee:	6962      	ldrpl	r2, [r4, #20]
 80116f0:	60a2      	str	r2, [r4, #8]
 80116f2:	e7f4      	b.n	80116de <__swsetup_r+0x8e>
 80116f4:	2000      	movs	r0, #0
 80116f6:	e7f7      	b.n	80116e8 <__swsetup_r+0x98>
 80116f8:	24000048 	.word	0x24000048

080116fc <_raise_r>:
 80116fc:	291f      	cmp	r1, #31
 80116fe:	b538      	push	{r3, r4, r5, lr}
 8011700:	4605      	mov	r5, r0
 8011702:	460c      	mov	r4, r1
 8011704:	d904      	bls.n	8011710 <_raise_r+0x14>
 8011706:	2316      	movs	r3, #22
 8011708:	6003      	str	r3, [r0, #0]
 801170a:	f04f 30ff 	mov.w	r0, #4294967295
 801170e:	bd38      	pop	{r3, r4, r5, pc}
 8011710:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011712:	b112      	cbz	r2, 801171a <_raise_r+0x1e>
 8011714:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011718:	b94b      	cbnz	r3, 801172e <_raise_r+0x32>
 801171a:	4628      	mov	r0, r5
 801171c:	f000 f830 	bl	8011780 <_getpid_r>
 8011720:	4622      	mov	r2, r4
 8011722:	4601      	mov	r1, r0
 8011724:	4628      	mov	r0, r5
 8011726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801172a:	f000 b817 	b.w	801175c <_kill_r>
 801172e:	2b01      	cmp	r3, #1
 8011730:	d00a      	beq.n	8011748 <_raise_r+0x4c>
 8011732:	1c59      	adds	r1, r3, #1
 8011734:	d103      	bne.n	801173e <_raise_r+0x42>
 8011736:	2316      	movs	r3, #22
 8011738:	6003      	str	r3, [r0, #0]
 801173a:	2001      	movs	r0, #1
 801173c:	e7e7      	b.n	801170e <_raise_r+0x12>
 801173e:	2100      	movs	r1, #0
 8011740:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011744:	4620      	mov	r0, r4
 8011746:	4798      	blx	r3
 8011748:	2000      	movs	r0, #0
 801174a:	e7e0      	b.n	801170e <_raise_r+0x12>

0801174c <raise>:
 801174c:	4b02      	ldr	r3, [pc, #8]	@ (8011758 <raise+0xc>)
 801174e:	4601      	mov	r1, r0
 8011750:	6818      	ldr	r0, [r3, #0]
 8011752:	f7ff bfd3 	b.w	80116fc <_raise_r>
 8011756:	bf00      	nop
 8011758:	24000048 	.word	0x24000048

0801175c <_kill_r>:
 801175c:	b538      	push	{r3, r4, r5, lr}
 801175e:	4d07      	ldr	r5, [pc, #28]	@ (801177c <_kill_r+0x20>)
 8011760:	2300      	movs	r3, #0
 8011762:	4604      	mov	r4, r0
 8011764:	4608      	mov	r0, r1
 8011766:	4611      	mov	r1, r2
 8011768:	602b      	str	r3, [r5, #0]
 801176a:	f7ef fe09 	bl	8001380 <_kill>
 801176e:	1c43      	adds	r3, r0, #1
 8011770:	d102      	bne.n	8011778 <_kill_r+0x1c>
 8011772:	682b      	ldr	r3, [r5, #0]
 8011774:	b103      	cbz	r3, 8011778 <_kill_r+0x1c>
 8011776:	6023      	str	r3, [r4, #0]
 8011778:	bd38      	pop	{r3, r4, r5, pc}
 801177a:	bf00      	nop
 801177c:	240060d8 	.word	0x240060d8

08011780 <_getpid_r>:
 8011780:	f7ef bdf6 	b.w	8001370 <_getpid>

08011784 <__swhatbuf_r>:
 8011784:	b570      	push	{r4, r5, r6, lr}
 8011786:	460c      	mov	r4, r1
 8011788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801178c:	2900      	cmp	r1, #0
 801178e:	b096      	sub	sp, #88	@ 0x58
 8011790:	4615      	mov	r5, r2
 8011792:	461e      	mov	r6, r3
 8011794:	da0d      	bge.n	80117b2 <__swhatbuf_r+0x2e>
 8011796:	89a3      	ldrh	r3, [r4, #12]
 8011798:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801179c:	f04f 0100 	mov.w	r1, #0
 80117a0:	bf14      	ite	ne
 80117a2:	2340      	movne	r3, #64	@ 0x40
 80117a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80117a8:	2000      	movs	r0, #0
 80117aa:	6031      	str	r1, [r6, #0]
 80117ac:	602b      	str	r3, [r5, #0]
 80117ae:	b016      	add	sp, #88	@ 0x58
 80117b0:	bd70      	pop	{r4, r5, r6, pc}
 80117b2:	466a      	mov	r2, sp
 80117b4:	f000 f848 	bl	8011848 <_fstat_r>
 80117b8:	2800      	cmp	r0, #0
 80117ba:	dbec      	blt.n	8011796 <__swhatbuf_r+0x12>
 80117bc:	9901      	ldr	r1, [sp, #4]
 80117be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80117c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80117c6:	4259      	negs	r1, r3
 80117c8:	4159      	adcs	r1, r3
 80117ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80117ce:	e7eb      	b.n	80117a8 <__swhatbuf_r+0x24>

080117d0 <__smakebuf_r>:
 80117d0:	898b      	ldrh	r3, [r1, #12]
 80117d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80117d4:	079d      	lsls	r5, r3, #30
 80117d6:	4606      	mov	r6, r0
 80117d8:	460c      	mov	r4, r1
 80117da:	d507      	bpl.n	80117ec <__smakebuf_r+0x1c>
 80117dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80117e0:	6023      	str	r3, [r4, #0]
 80117e2:	6123      	str	r3, [r4, #16]
 80117e4:	2301      	movs	r3, #1
 80117e6:	6163      	str	r3, [r4, #20]
 80117e8:	b003      	add	sp, #12
 80117ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117ec:	ab01      	add	r3, sp, #4
 80117ee:	466a      	mov	r2, sp
 80117f0:	f7ff ffc8 	bl	8011784 <__swhatbuf_r>
 80117f4:	9f00      	ldr	r7, [sp, #0]
 80117f6:	4605      	mov	r5, r0
 80117f8:	4639      	mov	r1, r7
 80117fa:	4630      	mov	r0, r6
 80117fc:	f7fd faa4 	bl	800ed48 <_malloc_r>
 8011800:	b948      	cbnz	r0, 8011816 <__smakebuf_r+0x46>
 8011802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011806:	059a      	lsls	r2, r3, #22
 8011808:	d4ee      	bmi.n	80117e8 <__smakebuf_r+0x18>
 801180a:	f023 0303 	bic.w	r3, r3, #3
 801180e:	f043 0302 	orr.w	r3, r3, #2
 8011812:	81a3      	strh	r3, [r4, #12]
 8011814:	e7e2      	b.n	80117dc <__smakebuf_r+0xc>
 8011816:	89a3      	ldrh	r3, [r4, #12]
 8011818:	6020      	str	r0, [r4, #0]
 801181a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801181e:	81a3      	strh	r3, [r4, #12]
 8011820:	9b01      	ldr	r3, [sp, #4]
 8011822:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011826:	b15b      	cbz	r3, 8011840 <__smakebuf_r+0x70>
 8011828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801182c:	4630      	mov	r0, r6
 801182e:	f000 f81d 	bl	801186c <_isatty_r>
 8011832:	b128      	cbz	r0, 8011840 <__smakebuf_r+0x70>
 8011834:	89a3      	ldrh	r3, [r4, #12]
 8011836:	f023 0303 	bic.w	r3, r3, #3
 801183a:	f043 0301 	orr.w	r3, r3, #1
 801183e:	81a3      	strh	r3, [r4, #12]
 8011840:	89a3      	ldrh	r3, [r4, #12]
 8011842:	431d      	orrs	r5, r3
 8011844:	81a5      	strh	r5, [r4, #12]
 8011846:	e7cf      	b.n	80117e8 <__smakebuf_r+0x18>

08011848 <_fstat_r>:
 8011848:	b538      	push	{r3, r4, r5, lr}
 801184a:	4d07      	ldr	r5, [pc, #28]	@ (8011868 <_fstat_r+0x20>)
 801184c:	2300      	movs	r3, #0
 801184e:	4604      	mov	r4, r0
 8011850:	4608      	mov	r0, r1
 8011852:	4611      	mov	r1, r2
 8011854:	602b      	str	r3, [r5, #0]
 8011856:	f7ef fdf3 	bl	8001440 <_fstat>
 801185a:	1c43      	adds	r3, r0, #1
 801185c:	d102      	bne.n	8011864 <_fstat_r+0x1c>
 801185e:	682b      	ldr	r3, [r5, #0]
 8011860:	b103      	cbz	r3, 8011864 <_fstat_r+0x1c>
 8011862:	6023      	str	r3, [r4, #0]
 8011864:	bd38      	pop	{r3, r4, r5, pc}
 8011866:	bf00      	nop
 8011868:	240060d8 	.word	0x240060d8

0801186c <_isatty_r>:
 801186c:	b538      	push	{r3, r4, r5, lr}
 801186e:	4d06      	ldr	r5, [pc, #24]	@ (8011888 <_isatty_r+0x1c>)
 8011870:	2300      	movs	r3, #0
 8011872:	4604      	mov	r4, r0
 8011874:	4608      	mov	r0, r1
 8011876:	602b      	str	r3, [r5, #0]
 8011878:	f7ef fdf2 	bl	8001460 <_isatty>
 801187c:	1c43      	adds	r3, r0, #1
 801187e:	d102      	bne.n	8011886 <_isatty_r+0x1a>
 8011880:	682b      	ldr	r3, [r5, #0]
 8011882:	b103      	cbz	r3, 8011886 <_isatty_r+0x1a>
 8011884:	6023      	str	r3, [r4, #0]
 8011886:	bd38      	pop	{r3, r4, r5, pc}
 8011888:	240060d8 	.word	0x240060d8
 801188c:	00000000 	.word	0x00000000

08011890 <fmod>:
 8011890:	b508      	push	{r3, lr}
 8011892:	ed2d 8b04 	vpush	{d8-d9}
 8011896:	eeb0 9b40 	vmov.f64	d9, d0
 801189a:	eeb0 8b41 	vmov.f64	d8, d1
 801189e:	f000 f8ef 	bl	8011a80 <__ieee754_fmod>
 80118a2:	eeb4 9b48 	vcmp.f64	d9, d8
 80118a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118aa:	d60c      	bvs.n	80118c6 <fmod+0x36>
 80118ac:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 80118d0 <fmod+0x40>
 80118b0:	eeb4 8b49 	vcmp.f64	d8, d9
 80118b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118b8:	d105      	bne.n	80118c6 <fmod+0x36>
 80118ba:	f7fe f8a5 	bl	800fa08 <__errno>
 80118be:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80118c2:	2321      	movs	r3, #33	@ 0x21
 80118c4:	6003      	str	r3, [r0, #0]
 80118c6:	ecbd 8b04 	vpop	{d8-d9}
 80118ca:	bd08      	pop	{r3, pc}
 80118cc:	f3af 8000 	nop.w
	...

080118d8 <sqrt>:
 80118d8:	b508      	push	{r3, lr}
 80118da:	ed2d 8b04 	vpush	{d8-d9}
 80118de:	eeb0 8b40 	vmov.f64	d8, d0
 80118e2:	f000 f8c7 	bl	8011a74 <__ieee754_sqrt>
 80118e6:	eeb4 8b48 	vcmp.f64	d8, d8
 80118ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ee:	d60c      	bvs.n	801190a <sqrt+0x32>
 80118f0:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8011910 <sqrt+0x38>
 80118f4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80118f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118fc:	d505      	bpl.n	801190a <sqrt+0x32>
 80118fe:	f7fe f883 	bl	800fa08 <__errno>
 8011902:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8011906:	2321      	movs	r3, #33	@ 0x21
 8011908:	6003      	str	r3, [r0, #0]
 801190a:	ecbd 8b04 	vpop	{d8-d9}
 801190e:	bd08      	pop	{r3, pc}
	...

08011918 <asinf>:
 8011918:	b508      	push	{r3, lr}
 801191a:	ed2d 8b02 	vpush	{d8}
 801191e:	eeb0 8a40 	vmov.f32	s16, s0
 8011922:	f000 f9b9 	bl	8011c98 <__ieee754_asinf>
 8011926:	eeb4 8a48 	vcmp.f32	s16, s16
 801192a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801192e:	eef0 8a40 	vmov.f32	s17, s0
 8011932:	d615      	bvs.n	8011960 <asinf+0x48>
 8011934:	eeb0 0a48 	vmov.f32	s0, s16
 8011938:	f000 f838 	bl	80119ac <fabsf>
 801193c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011940:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011948:	dd0a      	ble.n	8011960 <asinf+0x48>
 801194a:	f7fe f85d 	bl	800fa08 <__errno>
 801194e:	ecbd 8b02 	vpop	{d8}
 8011952:	2321      	movs	r3, #33	@ 0x21
 8011954:	6003      	str	r3, [r0, #0]
 8011956:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801195a:	4804      	ldr	r0, [pc, #16]	@ (801196c <asinf+0x54>)
 801195c:	f000 b82e 	b.w	80119bc <nanf>
 8011960:	eeb0 0a68 	vmov.f32	s0, s17
 8011964:	ecbd 8b02 	vpop	{d8}
 8011968:	bd08      	pop	{r3, pc}
 801196a:	bf00      	nop
 801196c:	080142a6 	.word	0x080142a6

08011970 <sqrtf>:
 8011970:	b508      	push	{r3, lr}
 8011972:	ed2d 8b02 	vpush	{d8}
 8011976:	eeb0 8a40 	vmov.f32	s16, s0
 801197a:	f000 f87e 	bl	8011a7a <__ieee754_sqrtf>
 801197e:	eeb4 8a48 	vcmp.f32	s16, s16
 8011982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011986:	d60c      	bvs.n	80119a2 <sqrtf+0x32>
 8011988:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80119a8 <sqrtf+0x38>
 801198c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011994:	d505      	bpl.n	80119a2 <sqrtf+0x32>
 8011996:	f7fe f837 	bl	800fa08 <__errno>
 801199a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801199e:	2321      	movs	r3, #33	@ 0x21
 80119a0:	6003      	str	r3, [r0, #0]
 80119a2:	ecbd 8b02 	vpop	{d8}
 80119a6:	bd08      	pop	{r3, pc}
 80119a8:	00000000 	.word	0x00000000

080119ac <fabsf>:
 80119ac:	ee10 3a10 	vmov	r3, s0
 80119b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80119b4:	ee00 3a10 	vmov	s0, r3
 80119b8:	4770      	bx	lr
	...

080119bc <nanf>:
 80119bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80119c4 <nanf+0x8>
 80119c0:	4770      	bx	lr
 80119c2:	bf00      	nop
 80119c4:	7fc00000 	.word	0x7fc00000

080119c8 <fmaxf>:
 80119c8:	b508      	push	{r3, lr}
 80119ca:	ed2d 8b02 	vpush	{d8}
 80119ce:	eeb0 8a40 	vmov.f32	s16, s0
 80119d2:	eef0 8a60 	vmov.f32	s17, s1
 80119d6:	f000 f831 	bl	8011a3c <__fpclassifyf>
 80119da:	b930      	cbnz	r0, 80119ea <fmaxf+0x22>
 80119dc:	eeb0 8a68 	vmov.f32	s16, s17
 80119e0:	eeb0 0a48 	vmov.f32	s0, s16
 80119e4:	ecbd 8b02 	vpop	{d8}
 80119e8:	bd08      	pop	{r3, pc}
 80119ea:	eeb0 0a68 	vmov.f32	s0, s17
 80119ee:	f000 f825 	bl	8011a3c <__fpclassifyf>
 80119f2:	2800      	cmp	r0, #0
 80119f4:	d0f4      	beq.n	80119e0 <fmaxf+0x18>
 80119f6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80119fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119fe:	dded      	ble.n	80119dc <fmaxf+0x14>
 8011a00:	e7ee      	b.n	80119e0 <fmaxf+0x18>

08011a02 <fminf>:
 8011a02:	b508      	push	{r3, lr}
 8011a04:	ed2d 8b02 	vpush	{d8}
 8011a08:	eeb0 8a40 	vmov.f32	s16, s0
 8011a0c:	eef0 8a60 	vmov.f32	s17, s1
 8011a10:	f000 f814 	bl	8011a3c <__fpclassifyf>
 8011a14:	b930      	cbnz	r0, 8011a24 <fminf+0x22>
 8011a16:	eeb0 8a68 	vmov.f32	s16, s17
 8011a1a:	eeb0 0a48 	vmov.f32	s0, s16
 8011a1e:	ecbd 8b02 	vpop	{d8}
 8011a22:	bd08      	pop	{r3, pc}
 8011a24:	eeb0 0a68 	vmov.f32	s0, s17
 8011a28:	f000 f808 	bl	8011a3c <__fpclassifyf>
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	d0f4      	beq.n	8011a1a <fminf+0x18>
 8011a30:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a38:	d5ed      	bpl.n	8011a16 <fminf+0x14>
 8011a3a:	e7ee      	b.n	8011a1a <fminf+0x18>

08011a3c <__fpclassifyf>:
 8011a3c:	ee10 3a10 	vmov	r3, s0
 8011a40:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8011a44:	d00d      	beq.n	8011a62 <__fpclassifyf+0x26>
 8011a46:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8011a4a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8011a4e:	d30a      	bcc.n	8011a66 <__fpclassifyf+0x2a>
 8011a50:	4b07      	ldr	r3, [pc, #28]	@ (8011a70 <__fpclassifyf+0x34>)
 8011a52:	1e42      	subs	r2, r0, #1
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d908      	bls.n	8011a6a <__fpclassifyf+0x2e>
 8011a58:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8011a5c:	4258      	negs	r0, r3
 8011a5e:	4158      	adcs	r0, r3
 8011a60:	4770      	bx	lr
 8011a62:	2002      	movs	r0, #2
 8011a64:	4770      	bx	lr
 8011a66:	2004      	movs	r0, #4
 8011a68:	4770      	bx	lr
 8011a6a:	2003      	movs	r0, #3
 8011a6c:	4770      	bx	lr
 8011a6e:	bf00      	nop
 8011a70:	007ffffe 	.word	0x007ffffe

08011a74 <__ieee754_sqrt>:
 8011a74:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8011a78:	4770      	bx	lr

08011a7a <__ieee754_sqrtf>:
 8011a7a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011a7e:	4770      	bx	lr

08011a80 <__ieee754_fmod>:
 8011a80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a84:	ed8d 1b00 	vstr	d1, [sp]
 8011a88:	e9dd 6500 	ldrd	r6, r5, [sp]
 8011a8c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8011a90:	ea56 0307 	orrs.w	r3, r6, r7
 8011a94:	46b6      	mov	lr, r6
 8011a96:	d00d      	beq.n	8011ab4 <__ieee754_fmod+0x34>
 8011a98:	ee10 ca90 	vmov	ip, s1
 8011a9c:	4b78      	ldr	r3, [pc, #480]	@ (8011c80 <__ieee754_fmod+0x200>)
 8011a9e:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 8011aa2:	4598      	cmp	r8, r3
 8011aa4:	d806      	bhi.n	8011ab4 <__ieee754_fmod+0x34>
 8011aa6:	4273      	negs	r3, r6
 8011aa8:	4a76      	ldr	r2, [pc, #472]	@ (8011c84 <__ieee754_fmod+0x204>)
 8011aaa:	4333      	orrs	r3, r6
 8011aac:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8011ab0:	4293      	cmp	r3, r2
 8011ab2:	d908      	bls.n	8011ac6 <__ieee754_fmod+0x46>
 8011ab4:	ed9d 7b00 	vldr	d7, [sp]
 8011ab8:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011abc:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8011ac0:	b003      	add	sp, #12
 8011ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ac6:	ee10 9a10 	vmov	r9, s0
 8011aca:	45b8      	cmp	r8, r7
 8011acc:	4649      	mov	r1, r9
 8011ace:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 8011ad2:	dc09      	bgt.n	8011ae8 <__ieee754_fmod+0x68>
 8011ad4:	dbf4      	blt.n	8011ac0 <__ieee754_fmod+0x40>
 8011ad6:	454e      	cmp	r6, r9
 8011ad8:	d8f2      	bhi.n	8011ac0 <__ieee754_fmod+0x40>
 8011ada:	d105      	bne.n	8011ae8 <__ieee754_fmod+0x68>
 8011adc:	4b6a      	ldr	r3, [pc, #424]	@ (8011c88 <__ieee754_fmod+0x208>)
 8011ade:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8011ae2:	ed93 0b00 	vldr	d0, [r3]
 8011ae6:	e7eb      	b.n	8011ac0 <__ieee754_fmod+0x40>
 8011ae8:	4a66      	ldr	r2, [pc, #408]	@ (8011c84 <__ieee754_fmod+0x204>)
 8011aea:	ea1c 0f02 	tst.w	ip, r2
 8011aee:	d14a      	bne.n	8011b86 <__ieee754_fmod+0x106>
 8011af0:	f1b8 0f00 	cmp.w	r8, #0
 8011af4:	d13f      	bne.n	8011b76 <__ieee754_fmod+0xf6>
 8011af6:	4865      	ldr	r0, [pc, #404]	@ (8011c8c <__ieee754_fmod+0x20c>)
 8011af8:	464b      	mov	r3, r9
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	dc38      	bgt.n	8011b70 <__ieee754_fmod+0xf0>
 8011afe:	4215      	tst	r5, r2
 8011b00:	d150      	bne.n	8011ba4 <__ieee754_fmod+0x124>
 8011b02:	2f00      	cmp	r7, #0
 8011b04:	d147      	bne.n	8011b96 <__ieee754_fmod+0x116>
 8011b06:	4a61      	ldr	r2, [pc, #388]	@ (8011c8c <__ieee754_fmod+0x20c>)
 8011b08:	4633      	mov	r3, r6
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	dc40      	bgt.n	8011b90 <__ieee754_fmod+0x110>
 8011b0e:	4b60      	ldr	r3, [pc, #384]	@ (8011c90 <__ieee754_fmod+0x210>)
 8011b10:	4298      	cmp	r0, r3
 8011b12:	db4b      	blt.n	8011bac <__ieee754_fmod+0x12c>
 8011b14:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8011b18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011b1c:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8011c90 <__ieee754_fmod+0x210>
 8011b20:	4562      	cmp	r2, ip
 8011b22:	db58      	blt.n	8011bd6 <__ieee754_fmod+0x156>
 8011b24:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8011b28:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 8011b2c:	1a80      	subs	r0, r0, r2
 8011b2e:	1b5e      	subs	r6, r3, r5
 8011b30:	eba1 070e 	sub.w	r7, r1, lr
 8011b34:	2800      	cmp	r0, #0
 8011b36:	d164      	bne.n	8011c02 <__ieee754_fmod+0x182>
 8011b38:	4571      	cmp	r1, lr
 8011b3a:	bf38      	it	cc
 8011b3c:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8011b40:	2e00      	cmp	r6, #0
 8011b42:	bfa4      	itt	ge
 8011b44:	4639      	movge	r1, r7
 8011b46:	4633      	movge	r3, r6
 8011b48:	ea53 0001 	orrs.w	r0, r3, r1
 8011b4c:	d0c6      	beq.n	8011adc <__ieee754_fmod+0x5c>
 8011b4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011b52:	db6b      	blt.n	8011c2c <__ieee754_fmod+0x1ac>
 8011b54:	484e      	ldr	r0, [pc, #312]	@ (8011c90 <__ieee754_fmod+0x210>)
 8011b56:	4282      	cmp	r2, r0
 8011b58:	db6e      	blt.n	8011c38 <__ieee754_fmod+0x1b8>
 8011b5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011b5e:	4323      	orrs	r3, r4
 8011b60:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8011b64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011b68:	460c      	mov	r4, r1
 8011b6a:	ec45 4b10 	vmov	d0, r4, r5
 8011b6e:	e7a7      	b.n	8011ac0 <__ieee754_fmod+0x40>
 8011b70:	3801      	subs	r0, #1
 8011b72:	005b      	lsls	r3, r3, #1
 8011b74:	e7c1      	b.n	8011afa <__ieee754_fmod+0x7a>
 8011b76:	4846      	ldr	r0, [pc, #280]	@ (8011c90 <__ieee754_fmod+0x210>)
 8011b78:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	ddbe      	ble.n	8011afe <__ieee754_fmod+0x7e>
 8011b80:	3801      	subs	r0, #1
 8011b82:	005b      	lsls	r3, r3, #1
 8011b84:	e7fa      	b.n	8011b7c <__ieee754_fmod+0xfc>
 8011b86:	ea4f 5028 	mov.w	r0, r8, asr #20
 8011b8a:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8011b8e:	e7b6      	b.n	8011afe <__ieee754_fmod+0x7e>
 8011b90:	3a01      	subs	r2, #1
 8011b92:	005b      	lsls	r3, r3, #1
 8011b94:	e7b9      	b.n	8011b0a <__ieee754_fmod+0x8a>
 8011b96:	4a3e      	ldr	r2, [pc, #248]	@ (8011c90 <__ieee754_fmod+0x210>)
 8011b98:	02fb      	lsls	r3, r7, #11
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	ddb7      	ble.n	8011b0e <__ieee754_fmod+0x8e>
 8011b9e:	3a01      	subs	r2, #1
 8011ba0:	005b      	lsls	r3, r3, #1
 8011ba2:	e7fa      	b.n	8011b9a <__ieee754_fmod+0x11a>
 8011ba4:	153a      	asrs	r2, r7, #20
 8011ba6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8011baa:	e7b0      	b.n	8011b0e <__ieee754_fmod+0x8e>
 8011bac:	eba3 0c00 	sub.w	ip, r3, r0
 8011bb0:	f1bc 0f1f 	cmp.w	ip, #31
 8011bb4:	dc09      	bgt.n	8011bca <__ieee754_fmod+0x14a>
 8011bb6:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 8011bba:	fa08 f10c 	lsl.w	r1, r8, ip
 8011bbe:	fa29 f303 	lsr.w	r3, r9, r3
 8011bc2:	430b      	orrs	r3, r1
 8011bc4:	fa09 f10c 	lsl.w	r1, r9, ip
 8011bc8:	e7a8      	b.n	8011b1c <__ieee754_fmod+0x9c>
 8011bca:	4b32      	ldr	r3, [pc, #200]	@ (8011c94 <__ieee754_fmod+0x214>)
 8011bcc:	1a1b      	subs	r3, r3, r0
 8011bce:	fa09 f303 	lsl.w	r3, r9, r3
 8011bd2:	2100      	movs	r1, #0
 8011bd4:	e7a2      	b.n	8011b1c <__ieee754_fmod+0x9c>
 8011bd6:	ebac 0c02 	sub.w	ip, ip, r2
 8011bda:	f1bc 0f1f 	cmp.w	ip, #31
 8011bde:	dc09      	bgt.n	8011bf4 <__ieee754_fmod+0x174>
 8011be0:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 8011be4:	fa07 f70c 	lsl.w	r7, r7, ip
 8011be8:	fa26 f505 	lsr.w	r5, r6, r5
 8011bec:	433d      	orrs	r5, r7
 8011bee:	fa06 fe0c 	lsl.w	lr, r6, ip
 8011bf2:	e79b      	b.n	8011b2c <__ieee754_fmod+0xac>
 8011bf4:	4d27      	ldr	r5, [pc, #156]	@ (8011c94 <__ieee754_fmod+0x214>)
 8011bf6:	1aad      	subs	r5, r5, r2
 8011bf8:	fa06 f505 	lsl.w	r5, r6, r5
 8011bfc:	f04f 0e00 	mov.w	lr, #0
 8011c00:	e794      	b.n	8011b2c <__ieee754_fmod+0xac>
 8011c02:	4571      	cmp	r1, lr
 8011c04:	bf38      	it	cc
 8011c06:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8011c0a:	2e00      	cmp	r6, #0
 8011c0c:	da05      	bge.n	8011c1a <__ieee754_fmod+0x19a>
 8011c0e:	0fce      	lsrs	r6, r1, #31
 8011c10:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8011c14:	0049      	lsls	r1, r1, #1
 8011c16:	3801      	subs	r0, #1
 8011c18:	e789      	b.n	8011b2e <__ieee754_fmod+0xae>
 8011c1a:	ea56 0307 	orrs.w	r3, r6, r7
 8011c1e:	f43f af5d 	beq.w	8011adc <__ieee754_fmod+0x5c>
 8011c22:	0ffb      	lsrs	r3, r7, #31
 8011c24:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8011c28:	0079      	lsls	r1, r7, #1
 8011c2a:	e7f4      	b.n	8011c16 <__ieee754_fmod+0x196>
 8011c2c:	0fc8      	lsrs	r0, r1, #31
 8011c2e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011c32:	0049      	lsls	r1, r1, #1
 8011c34:	3a01      	subs	r2, #1
 8011c36:	e78a      	b.n	8011b4e <__ieee754_fmod+0xce>
 8011c38:	1a80      	subs	r0, r0, r2
 8011c3a:	2814      	cmp	r0, #20
 8011c3c:	dc0c      	bgt.n	8011c58 <__ieee754_fmod+0x1d8>
 8011c3e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8011c42:	fa03 f202 	lsl.w	r2, r3, r2
 8011c46:	40c1      	lsrs	r1, r0
 8011c48:	430a      	orrs	r2, r1
 8011c4a:	4103      	asrs	r3, r0
 8011c4c:	ea43 0104 	orr.w	r1, r3, r4
 8011c50:	4610      	mov	r0, r2
 8011c52:	ec41 0b10 	vmov	d0, r0, r1
 8011c56:	e733      	b.n	8011ac0 <__ieee754_fmod+0x40>
 8011c58:	281f      	cmp	r0, #31
 8011c5a:	dc07      	bgt.n	8011c6c <__ieee754_fmod+0x1ec>
 8011c5c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8011c60:	40c1      	lsrs	r1, r0
 8011c62:	fa03 f202 	lsl.w	r2, r3, r2
 8011c66:	430a      	orrs	r2, r1
 8011c68:	4623      	mov	r3, r4
 8011c6a:	e7ef      	b.n	8011c4c <__ieee754_fmod+0x1cc>
 8011c6c:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8011c70:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8011c74:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8011c78:	32e2      	adds	r2, #226	@ 0xe2
 8011c7a:	fa43 f202 	asr.w	r2, r3, r2
 8011c7e:	e7f3      	b.n	8011c68 <__ieee754_fmod+0x1e8>
 8011c80:	7fefffff 	.word	0x7fefffff
 8011c84:	7ff00000 	.word	0x7ff00000
 8011c88:	080143a8 	.word	0x080143a8
 8011c8c:	fffffbed 	.word	0xfffffbed
 8011c90:	fffffc02 	.word	0xfffffc02
 8011c94:	fffffbe2 	.word	0xfffffbe2

08011c98 <__ieee754_asinf>:
 8011c98:	b538      	push	{r3, r4, r5, lr}
 8011c9a:	ee10 5a10 	vmov	r5, s0
 8011c9e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8011ca2:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8011ca6:	ed2d 8b04 	vpush	{d8-d9}
 8011caa:	d10c      	bne.n	8011cc6 <__ieee754_asinf+0x2e>
 8011cac:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8011e24 <__ieee754_asinf+0x18c>
 8011cb0:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8011e28 <__ieee754_asinf+0x190>
 8011cb4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011cb8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8011cc0:	ecbd 8b04 	vpop	{d8-d9}
 8011cc4:	bd38      	pop	{r3, r4, r5, pc}
 8011cc6:	d904      	bls.n	8011cd2 <__ieee754_asinf+0x3a>
 8011cc8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011ccc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011cd0:	e7f6      	b.n	8011cc0 <__ieee754_asinf+0x28>
 8011cd2:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8011cd6:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8011cda:	d20b      	bcs.n	8011cf4 <__ieee754_asinf+0x5c>
 8011cdc:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8011ce0:	d252      	bcs.n	8011d88 <__ieee754_asinf+0xf0>
 8011ce2:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8011e2c <__ieee754_asinf+0x194>
 8011ce6:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011cea:	eef4 7ae8 	vcmpe.f32	s15, s17
 8011cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cf2:	dce5      	bgt.n	8011cc0 <__ieee754_asinf+0x28>
 8011cf4:	f7ff fe5a 	bl	80119ac <fabsf>
 8011cf8:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8011cfc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011d00:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011d04:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8011e30 <__ieee754_asinf+0x198>
 8011d08:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8011e34 <__ieee754_asinf+0x19c>
 8011d0c:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8011e38 <__ieee754_asinf+0x1a0>
 8011d10:	eea8 7a27 	vfma.f32	s14, s16, s15
 8011d14:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8011e3c <__ieee754_asinf+0x1a4>
 8011d18:	eee7 7a08 	vfma.f32	s15, s14, s16
 8011d1c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8011e40 <__ieee754_asinf+0x1a8>
 8011d20:	eea7 7a88 	vfma.f32	s14, s15, s16
 8011d24:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8011e44 <__ieee754_asinf+0x1ac>
 8011d28:	eee7 7a08 	vfma.f32	s15, s14, s16
 8011d2c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8011e48 <__ieee754_asinf+0x1b0>
 8011d30:	eea7 9a88 	vfma.f32	s18, s15, s16
 8011d34:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8011e4c <__ieee754_asinf+0x1b4>
 8011d38:	eee8 7a07 	vfma.f32	s15, s16, s14
 8011d3c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8011e50 <__ieee754_asinf+0x1b8>
 8011d40:	eea7 7a88 	vfma.f32	s14, s15, s16
 8011d44:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8011e54 <__ieee754_asinf+0x1bc>
 8011d48:	eee7 7a08 	vfma.f32	s15, s14, s16
 8011d4c:	eeb0 0a48 	vmov.f32	s0, s16
 8011d50:	eee7 8a88 	vfma.f32	s17, s15, s16
 8011d54:	f7ff fe91 	bl	8011a7a <__ieee754_sqrtf>
 8011d58:	4b3f      	ldr	r3, [pc, #252]	@ (8011e58 <__ieee754_asinf+0x1c0>)
 8011d5a:	ee29 9a08 	vmul.f32	s18, s18, s16
 8011d5e:	429c      	cmp	r4, r3
 8011d60:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8011d64:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011d68:	d93d      	bls.n	8011de6 <__ieee754_asinf+0x14e>
 8011d6a:	eea0 0a06 	vfma.f32	s0, s0, s12
 8011d6e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8011e5c <__ieee754_asinf+0x1c4>
 8011d72:	eee0 7a26 	vfma.f32	s15, s0, s13
 8011d76:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8011e28 <__ieee754_asinf+0x190>
 8011d7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011d7e:	2d00      	cmp	r5, #0
 8011d80:	bfd8      	it	le
 8011d82:	eeb1 0a40 	vnegle.f32	s0, s0
 8011d86:	e79b      	b.n	8011cc0 <__ieee754_asinf+0x28>
 8011d88:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011d8c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8011e34 <__ieee754_asinf+0x19c>
 8011d90:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8011e30 <__ieee754_asinf+0x198>
 8011d94:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8011e48 <__ieee754_asinf+0x1b0>
 8011d98:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011d9c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8011e3c <__ieee754_asinf+0x1a4>
 8011da0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011da4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8011e40 <__ieee754_asinf+0x1a8>
 8011da8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011dac:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8011e44 <__ieee754_asinf+0x1ac>
 8011db0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011db4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8011e38 <__ieee754_asinf+0x1a0>
 8011db8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011dbc:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8011e4c <__ieee754_asinf+0x1b4>
 8011dc0:	eee7 6a86 	vfma.f32	s13, s15, s12
 8011dc4:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8011e50 <__ieee754_asinf+0x1b8>
 8011dc8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011dcc:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8011e54 <__ieee754_asinf+0x1bc>
 8011dd0:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011dd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011dd8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8011ddc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8011de0:	eea0 0a27 	vfma.f32	s0, s0, s15
 8011de4:	e76c      	b.n	8011cc0 <__ieee754_asinf+0x28>
 8011de6:	ee10 3a10 	vmov	r3, s0
 8011dea:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8011dee:	f023 030f 	bic.w	r3, r3, #15
 8011df2:	ee07 3a10 	vmov	s14, r3
 8011df6:	eea7 8a47 	vfms.f32	s16, s14, s14
 8011dfa:	ee70 5a00 	vadd.f32	s11, s0, s0
 8011dfe:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011e02:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011e24 <__ieee754_asinf+0x18c>
 8011e06:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8011e0a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8011e60 <__ieee754_asinf+0x1c8>
 8011e0e:	eee5 7a66 	vfms.f32	s15, s10, s13
 8011e12:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8011e16:	eeb0 6a40 	vmov.f32	s12, s0
 8011e1a:	eea7 6a66 	vfms.f32	s12, s14, s13
 8011e1e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011e22:	e7aa      	b.n	8011d7a <__ieee754_asinf+0xe2>
 8011e24:	b33bbd2e 	.word	0xb33bbd2e
 8011e28:	3fc90fdb 	.word	0x3fc90fdb
 8011e2c:	7149f2ca 	.word	0x7149f2ca
 8011e30:	3a4f7f04 	.word	0x3a4f7f04
 8011e34:	3811ef08 	.word	0x3811ef08
 8011e38:	3e2aaaab 	.word	0x3e2aaaab
 8011e3c:	bd241146 	.word	0xbd241146
 8011e40:	3e4e0aa8 	.word	0x3e4e0aa8
 8011e44:	bea6b090 	.word	0xbea6b090
 8011e48:	3d9dc62e 	.word	0x3d9dc62e
 8011e4c:	bf303361 	.word	0xbf303361
 8011e50:	4001572d 	.word	0x4001572d
 8011e54:	c019d139 	.word	0xc019d139
 8011e58:	3f799999 	.word	0x3f799999
 8011e5c:	333bbd2e 	.word	0x333bbd2e
 8011e60:	3f490fdb 	.word	0x3f490fdb

08011e64 <_init>:
 8011e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e66:	bf00      	nop
 8011e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e6a:	bc08      	pop	{r3}
 8011e6c:	469e      	mov	lr, r3
 8011e6e:	4770      	bx	lr

08011e70 <_fini>:
 8011e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e72:	bf00      	nop
 8011e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e76:	bc08      	pop	{r3}
 8011e78:	469e      	mov	lr, r3
 8011e7a:	4770      	bx	lr
