
EX_SH8601Z_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062b4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800654c  0800654c  0001654c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800655c  0800655c  0001655c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006560  08006560  00016560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08006564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000011c  24000010  08006574  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400012c  08006574  0002012c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013f58  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002833  00000000  00000000  00033fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001088  00000000  00000000  00036810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000cb1  00000000  00000000  00037898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038c07  00000000  00000000  00038549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001656a  00000000  00000000  00071150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171154  00000000  00000000  000876ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00004584  00000000  00000000  001f8810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000069  00000000  00000000  001fcd94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006534 	.word	0x08006534

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08006534 	.word	0x08006534

080002d8 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
 80002ec:	615a      	str	r2, [r3, #20]
 80002ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80002f0:	4b27      	ldr	r3, [pc, #156]	; (8000390 <MX_ADC3_Init+0xb8>)
 80002f2:	4a28      	ldr	r2, [pc, #160]	; (8000394 <MX_ADC3_Init+0xbc>)
 80002f4:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80002f6:	4b26      	ldr	r3, [pc, #152]	; (8000390 <MX_ADC3_Init+0xb8>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fc:	4b24      	ldr	r3, [pc, #144]	; (8000390 <MX_ADC3_Init+0xb8>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000302:	4b23      	ldr	r3, [pc, #140]	; (8000390 <MX_ADC3_Init+0xb8>)
 8000304:	2204      	movs	r2, #4
 8000306:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000308:	4b21      	ldr	r3, [pc, #132]	; (8000390 <MX_ADC3_Init+0xb8>)
 800030a:	2200      	movs	r2, #0
 800030c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800030e:	4b20      	ldr	r3, [pc, #128]	; (8000390 <MX_ADC3_Init+0xb8>)
 8000310:	2200      	movs	r2, #0
 8000312:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000314:	4b1e      	ldr	r3, [pc, #120]	; (8000390 <MX_ADC3_Init+0xb8>)
 8000316:	2201      	movs	r2, #1
 8000318:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800031a:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <MX_ADC3_Init+0xb8>)
 800031c:	2200      	movs	r2, #0
 800031e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000320:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <MX_ADC3_Init+0xb8>)
 8000322:	2200      	movs	r2, #0
 8000324:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000326:	4b1a      	ldr	r3, [pc, #104]	; (8000390 <MX_ADC3_Init+0xb8>)
 8000328:	2200      	movs	r2, #0
 800032a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800032c:	4b18      	ldr	r3, [pc, #96]	; (8000390 <MX_ADC3_Init+0xb8>)
 800032e:	2200      	movs	r2, #0
 8000330:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000332:	4b17      	ldr	r3, [pc, #92]	; (8000390 <MX_ADC3_Init+0xb8>)
 8000334:	2200      	movs	r2, #0
 8000336:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <MX_ADC3_Init+0xb8>)
 800033a:	2200      	movs	r2, #0
 800033c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <MX_ADC3_Init+0xb8>)
 8000340:	2200      	movs	r2, #0
 8000342:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000346:	4812      	ldr	r0, [pc, #72]	; (8000390 <MX_ADC3_Init+0xb8>)
 8000348:	f000 feb0 	bl	80010ac <HAL_ADC_Init>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000352:	f000 fa43 	bl	80007dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000356:	4b10      	ldr	r3, [pc, #64]	; (8000398 <MX_ADC3_Init+0xc0>)
 8000358:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800035a:	2306      	movs	r3, #6
 800035c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800035e:	2307      	movs	r3, #7
 8000360:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000362:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000366:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000368:	2304      	movs	r3, #4
 800036a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000370:	2300      	movs	r3, #0
 8000372:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	4619      	mov	r1, r3
 8000378:	4805      	ldr	r0, [pc, #20]	; (8000390 <MX_ADC3_Init+0xb8>)
 800037a:	f001 f839 	bl	80013f0 <HAL_ADC_ConfigChannel>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000384:	f000 fa2a 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000388:	bf00      	nop
 800038a:	3720      	adds	r7, #32
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	2400002c 	.word	0x2400002c
 8000394:	58026000 	.word	0x58026000
 8000398:	cb840000 	.word	0xcb840000

0800039c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b0b4      	sub	sp, #208	; 0xd0
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003a4:	f107 0310 	add.w	r3, r7, #16
 80003a8:	22c0      	movs	r2, #192	; 0xc0
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f006 f895 	bl	80064dc <memset>
  if(adcHandle->Instance==ADC3)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a1c      	ldr	r2, [pc, #112]	; (8000428 <HAL_ADC_MspInit+0x8c>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d131      	bne.n	8000420 <HAL_ADC_MspInit+0x84>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80003c0:	f04f 0300 	mov.w	r3, #0
 80003c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 80003c8:	2302      	movs	r3, #2
 80003ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80003cc:	230c      	movs	r3, #12
 80003ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80003d0:	2302      	movs	r3, #2
 80003d2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80003d4:	2302      	movs	r3, #2
 80003d6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80003d8:	2302      	movs	r3, #2
 80003da:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80003dc:	23c0      	movs	r3, #192	; 0xc0
 80003de:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80003e0:	2320      	movs	r3, #32
 80003e2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80003e8:	2300      	movs	r3, #0
 80003ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	4618      	mov	r0, r3
 80003f4:	f003 f89a 	bl	800352c <HAL_RCCEx_PeriphCLKConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80003fe:	f000 f9ed 	bl	80007dc <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <HAL_ADC_MspInit+0x90>)
 8000404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000408:	4a08      	ldr	r2, [pc, #32]	; (800042c <HAL_ADC_MspInit+0x90>)
 800040a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800040e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <HAL_ADC_MspInit+0x90>)
 8000414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000420:	bf00      	nop
 8000422:	37d0      	adds	r7, #208	; 0xd0
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	58026000 	.word	0x58026000
 800042c:	58024400 	.word	0x58024400

08000430 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	; 0x28
 8000434:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
 8000444:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000446:	4b31      	ldr	r3, [pc, #196]	; (800050c <MX_GPIO_Init+0xdc>)
 8000448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800044c:	4a2f      	ldr	r2, [pc, #188]	; (800050c <MX_GPIO_Init+0xdc>)
 800044e:	f043 0304 	orr.w	r3, r3, #4
 8000452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000456:	4b2d      	ldr	r3, [pc, #180]	; (800050c <MX_GPIO_Init+0xdc>)
 8000458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	613b      	str	r3, [r7, #16]
 8000462:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000464:	4b29      	ldr	r3, [pc, #164]	; (800050c <MX_GPIO_Init+0xdc>)
 8000466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800046a:	4a28      	ldr	r2, [pc, #160]	; (800050c <MX_GPIO_Init+0xdc>)
 800046c:	f043 0320 	orr.w	r3, r3, #32
 8000470:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000474:	4b25      	ldr	r3, [pc, #148]	; (800050c <MX_GPIO_Init+0xdc>)
 8000476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800047a:	f003 0320 	and.w	r3, r3, #32
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000482:	4b22      	ldr	r3, [pc, #136]	; (800050c <MX_GPIO_Init+0xdc>)
 8000484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000488:	4a20      	ldr	r2, [pc, #128]	; (800050c <MX_GPIO_Init+0xdc>)
 800048a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800048e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000492:	4b1e      	ldr	r3, [pc, #120]	; (800050c <MX_GPIO_Init+0xdc>)
 8000494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	4b1a      	ldr	r3, [pc, #104]	; (800050c <MX_GPIO_Init+0xdc>)
 80004a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004a6:	4a19      	ldr	r2, [pc, #100]	; (800050c <MX_GPIO_Init+0xdc>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004b0:	4b16      	ldr	r3, [pc, #88]	; (800050c <MX_GPIO_Init+0xdc>)
 80004b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004be:	4b13      	ldr	r3, [pc, #76]	; (800050c <MX_GPIO_Init+0xdc>)
 80004c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c4:	4a11      	ldr	r2, [pc, #68]	; (800050c <MX_GPIO_Init+0xdc>)
 80004c6:	f043 0310 	orr.w	r3, r3, #16
 80004ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_GPIO_Init+0xdc>)
 80004d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d4:	f003 0310 	and.w	r3, r3, #16
 80004d8:	603b      	str	r3, [r7, #0]
 80004da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AMOLED_TE_Pin|AMOLED_IM_Pin|AMOLED_PWR_Pin|AMOLED_RST_Pin, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2139      	movs	r1, #57	; 0x39
 80004e0:	480b      	ldr	r0, [pc, #44]	; (8000510 <MX_GPIO_Init+0xe0>)
 80004e2:	f001 feed 	bl	80022c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = AMOLED_TE_Pin|AMOLED_IM_Pin|AMOLED_PWR_Pin|AMOLED_RST_Pin;
 80004e6:	2339      	movs	r3, #57	; 0x39
 80004e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ea:	2301      	movs	r3, #1
 80004ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004f2:	2303      	movs	r3, #3
 80004f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	4619      	mov	r1, r3
 80004fc:	4804      	ldr	r0, [pc, #16]	; (8000510 <MX_GPIO_Init+0xe0>)
 80004fe:	f001 fd2f 	bl	8001f60 <HAL_GPIO_Init>

}
 8000502:	bf00      	nop
 8000504:	3728      	adds	r7, #40	; 0x28
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	58024400 	.word	0x58024400
 8000510:	58020000 	.word	0x58020000

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800051a:	f000 f91f 	bl	800075c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800051e:	4b37      	ldr	r3, [pc, #220]	; (80005fc <main+0xe8>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000526:	2b00      	cmp	r3, #0
 8000528:	d11b      	bne.n	8000562 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800052a:	f3bf 8f4f 	dsb	sy
}
 800052e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000530:	f3bf 8f6f 	isb	sy
}
 8000534:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000536:	4b31      	ldr	r3, [pc, #196]	; (80005fc <main+0xe8>)
 8000538:	2200      	movs	r2, #0
 800053a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800053e:	f3bf 8f4f 	dsb	sy
}
 8000542:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000544:	f3bf 8f6f 	isb	sy
}
 8000548:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800054a:	4b2c      	ldr	r3, [pc, #176]	; (80005fc <main+0xe8>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a2b      	ldr	r2, [pc, #172]	; (80005fc <main+0xe8>)
 8000550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000554:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000556:	f3bf 8f4f 	dsb	sy
}
 800055a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055c:	f3bf 8f6f 	isb	sy
}
 8000560:	e000      	b.n	8000564 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000562:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <main+0xe8>)
 8000566:	695b      	ldr	r3, [r3, #20]
 8000568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800056c:	2b00      	cmp	r3, #0
 800056e:	d138      	bne.n	80005e2 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <main+0xe8>)
 8000572:	2200      	movs	r2, #0
 8000574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000578:	f3bf 8f4f 	dsb	sy
}
 800057c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800057e:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <main+0xe8>)
 8000580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000584:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	0b5b      	lsrs	r3, r3, #13
 800058a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800058e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	08db      	lsrs	r3, r3, #3
 8000594:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000598:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	015a      	lsls	r2, r3, #5
 800059e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005a2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005a8:	4914      	ldr	r1, [pc, #80]	; (80005fc <main+0xe8>)
 80005aa:	4313      	orrs	r3, r2
 80005ac:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	1e5a      	subs	r2, r3, #1
 80005b4:	607a      	str	r2, [r7, #4]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d1ef      	bne.n	800059a <main+0x86>
    } while(sets-- != 0U);
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	1e5a      	subs	r2, r3, #1
 80005be:	60ba      	str	r2, [r7, #8]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1e5      	bne.n	8000590 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80005c4:	f3bf 8f4f 	dsb	sy
}
 80005c8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <main+0xe8>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <main+0xe8>)
 80005d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005d6:	f3bf 8f4f 	dsb	sy
}
 80005da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005dc:	f3bf 8f6f 	isb	sy
}
 80005e0:	e000      	b.n	80005e4 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80005e2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fb6e 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f80a 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f7ff ff20 	bl	8000430 <MX_GPIO_Init>
  MX_ADC3_Init();
 80005f0:	f7ff fe72 	bl	80002d8 <MX_ADC3_Init>
  MX_QUADSPI_Init();
 80005f4:	f000 f8f8 	bl	80007e8 <MX_QUADSPI_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <main+0xe4>
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b09e      	sub	sp, #120	; 0x78
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800060a:	224c      	movs	r2, #76	; 0x4c
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f005 ff64 	bl	80064dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2220      	movs	r2, #32
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f005 ff5d 	bl	80064dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000622:	2002      	movs	r0, #2
 8000624:	f001 fe66 	bl	80022f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b48      	ldr	r3, [pc, #288]	; (8000750 <SystemClock_Config+0x150>)
 800062e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000630:	4a47      	ldr	r2, [pc, #284]	; (8000750 <SystemClock_Config+0x150>)
 8000632:	f023 0301 	bic.w	r3, r3, #1
 8000636:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000638:	4b45      	ldr	r3, [pc, #276]	; (8000750 <SystemClock_Config+0x150>)
 800063a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	4b44      	ldr	r3, [pc, #272]	; (8000754 <SystemClock_Config+0x154>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	4a43      	ldr	r2, [pc, #268]	; (8000754 <SystemClock_Config+0x154>)
 8000648:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064c:	6193      	str	r3, [r2, #24]
 800064e:	4b41      	ldr	r3, [pc, #260]	; (8000754 <SystemClock_Config+0x154>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800065a:	bf00      	nop
 800065c:	4b3d      	ldr	r3, [pc, #244]	; (8000754 <SystemClock_Config+0x154>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000668:	d1f8      	bne.n	800065c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066a:	4b3b      	ldr	r3, [pc, #236]	; (8000758 <SystemClock_Config+0x158>)
 800066c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000670:	4a39      	ldr	r2, [pc, #228]	; (8000758 <SystemClock_Config+0x158>)
 8000672:	f043 0302 	orr.w	r3, r3, #2
 8000676:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800067a:	4b37      	ldr	r3, [pc, #220]	; (8000758 <SystemClock_Config+0x158>)
 800067c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000680:	f003 0302 	and.w	r3, r3, #2
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000688:	2300      	movs	r3, #0
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	4b31      	ldr	r3, [pc, #196]	; (8000754 <SystemClock_Config+0x154>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a30      	ldr	r2, [pc, #192]	; (8000754 <SystemClock_Config+0x154>)
 8000692:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b2e      	ldr	r3, [pc, #184]	; (8000754 <SystemClock_Config+0x154>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <SystemClock_Config+0x150>)
 80006a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006a6:	4a2a      	ldr	r2, [pc, #168]	; (8000750 <SystemClock_Config+0x150>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006ae:	4b28      	ldr	r3, [pc, #160]	; (8000750 <SystemClock_Config+0x150>)
 80006b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ba:	bf00      	nop
 80006bc:	4b25      	ldr	r3, [pc, #148]	; (8000754 <SystemClock_Config+0x154>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006c8:	d1f8      	bne.n	80006bc <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ca:	2301      	movs	r3, #1
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d4:	2302      	movs	r3, #2
 80006d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d8:	2302      	movs	r3, #2
 80006da:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006dc:	2305      	movs	r3, #5
 80006de:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006e0:	23c0      	movs	r3, #192	; 0xc0
 80006e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80006f0:	2308      	movs	r3, #8
 80006f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000700:	4618      	mov	r0, r3
 8000702:	f001 feeb 	bl	80024dc <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800070c:	f000 f866 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	233f      	movs	r3, #63	; 0x3f
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2303      	movs	r3, #3
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800071c:	2308      	movs	r3, #8
 800071e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000720:	2340      	movs	r3, #64	; 0x40
 8000722:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000724:	2340      	movs	r3, #64	; 0x40
 8000726:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800072e:	2340      	movs	r3, #64	; 0x40
 8000730:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	2104      	movs	r1, #4
 8000738:	4618      	mov	r0, r3
 800073a:	f002 fb29 	bl	8002d90 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000744:	f000 f84a 	bl	80007dc <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3778      	adds	r7, #120	; 0x78
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	58000400 	.word	0x58000400
 8000754:	58024800 	.word	0x58024800
 8000758:	58024400 	.word	0x58024400

0800075c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000762:	463b      	mov	r3, r7
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800076e:	f001 fb7b 	bl	8001e68 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000772:	2301      	movs	r3, #1
 8000774:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000776:	2300      	movs	r3, #0
 8000778:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800077a:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800077e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000780:	2312      	movs	r3, #18
 8000782:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000784:	2300      	movs	r3, #0
 8000786:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000788:	2301      	movs	r3, #1
 800078a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800078c:	2303      	movs	r3, #3
 800078e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000798:	2301      	movs	r3, #1
 800079a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800079c:	2301      	movs	r3, #1
 800079e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007a0:	463b      	mov	r3, r7
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fb98 	bl	8001ed8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007a8:	2004      	movs	r0, #4
 80007aa:	f001 fb75 	bl	8001e98 <HAL_MPU_Enable>

}
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d101      	bne.n	80007ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ca:	f000 fab7 	bl	8000d3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40010000 	.word	0x40010000

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_QUADSPI_Init+0x50>)
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <MX_QUADSPI_Init+0x54>)
 80007f0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 5;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_QUADSPI_Init+0x50>)
 80007f4:	2205      	movs	r2, #5
 80007f6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_QUADSPI_Init+0x50>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_QUADSPI_Init+0x50>)
 8000800:	2210      	movs	r2, #16
 8000802:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_QUADSPI_Init+0x50>)
 8000806:	2201      	movs	r2, #1
 8000808:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_QUADSPI_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_QUADSPI_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_QUADSPI_Init+0x50>)
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_QUADSPI_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_QUADSPI_Init+0x50>)
 8000824:	f001 fda0 	bl	8002368 <HAL_QSPI_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800082e:	f7ff ffd5 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	24000090 	.word	0x24000090
 800083c:	52005000 	.word	0x52005000

08000840 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b0be      	sub	sp, #248	; 0xf8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000858:	f107 0320 	add.w	r3, r7, #32
 800085c:	22c0      	movs	r2, #192	; 0xc0
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f005 fe3b 	bl	80064dc <memset>
  if(qspiHandle->Instance==QUADSPI)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a5e      	ldr	r2, [pc, #376]	; (80009e4 <HAL_QSPI_MspInit+0x1a4>)
 800086c:	4293      	cmp	r3, r2
 800086e:	f040 80b4 	bne.w	80009da <HAL_QSPI_MspInit+0x19a>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000872:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000876:	f04f 0300 	mov.w	r3, #0
 800087a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800087e:	2300      	movs	r3, #0
 8000880:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000882:	f107 0320 	add.w	r3, r7, #32
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fe50 	bl	800352c <HAL_RCCEx_PeriphCLKConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8000892:	f7ff ffa3 	bl	80007dc <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000896:	4b54      	ldr	r3, [pc, #336]	; (80009e8 <HAL_QSPI_MspInit+0x1a8>)
 8000898:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800089c:	4a52      	ldr	r2, [pc, #328]	; (80009e8 <HAL_QSPI_MspInit+0x1a8>)
 800089e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80008a6:	4b50      	ldr	r3, [pc, #320]	; (80009e8 <HAL_QSPI_MspInit+0x1a8>)
 80008a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80008ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b0:	61fb      	str	r3, [r7, #28]
 80008b2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b4:	4b4c      	ldr	r3, [pc, #304]	; (80009e8 <HAL_QSPI_MspInit+0x1a8>)
 80008b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ba:	4a4b      	ldr	r2, [pc, #300]	; (80009e8 <HAL_QSPI_MspInit+0x1a8>)
 80008bc:	f043 0320 	orr.w	r3, r3, #32
 80008c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c4:	4b48      	ldr	r3, [pc, #288]	; (80009e8 <HAL_QSPI_MspInit+0x1a8>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	f003 0320 	and.w	r3, r3, #32
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	4b45      	ldr	r3, [pc, #276]	; (80009e8 <HAL_QSPI_MspInit+0x1a8>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d8:	4a43      	ldr	r2, [pc, #268]	; (80009e8 <HAL_QSPI_MspInit+0x1a8>)
 80008da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e2:	4b41      	ldr	r3, [pc, #260]	; (80009e8 <HAL_QSPI_MspInit+0x1a8>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f0:	4b3d      	ldr	r3, [pc, #244]	; (80009e8 <HAL_QSPI_MspInit+0x1a8>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	4a3c      	ldr	r2, [pc, #240]	; (80009e8 <HAL_QSPI_MspInit+0x1a8>)
 80008f8:	f043 0310 	orr.w	r3, r3, #16
 80008fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000900:	4b39      	ldr	r3, [pc, #228]	; (80009e8 <HAL_QSPI_MspInit+0x1a8>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	4b36      	ldr	r3, [pc, #216]	; (80009e8 <HAL_QSPI_MspInit+0x1a8>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	4a34      	ldr	r2, [pc, #208]	; (80009e8 <HAL_QSPI_MspInit+0x1a8>)
 8000916:	f043 0304 	orr.w	r3, r3, #4
 800091a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091e:	4b32      	ldr	r3, [pc, #200]	; (80009e8 <HAL_QSPI_MspInit+0x1a8>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
    PH3     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = AMOLED_CLK_Pin;
 800092c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000930:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000946:	2309      	movs	r3, #9
 8000948:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(AMOLED_CLK_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000950:	4619      	mov	r1, r3
 8000952:	4826      	ldr	r0, [pc, #152]	; (80009ec <HAL_QSPI_MspInit+0x1ac>)
 8000954:	f001 fb04 	bl	8001f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AMOLED_IO0_Pin|AMOLED_IO1_Pin;
 8000958:	230c      	movs	r3, #12
 800095a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000970:	2309      	movs	r3, #9
 8000972:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000976:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800097a:	4619      	mov	r1, r3
 800097c:	481c      	ldr	r0, [pc, #112]	; (80009f0 <HAL_QSPI_MspInit+0x1b0>)
 800097e:	f001 faef 	bl	8001f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AMOLED_IO2_Pin|AMOLED_IO3_Pin;
 8000982:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800099c:	230a      	movs	r3, #10
 800099e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009a6:	4619      	mov	r1, r3
 80009a8:	4812      	ldr	r0, [pc, #72]	; (80009f4 <HAL_QSPI_MspInit+0x1b4>)
 80009aa:	f001 fad9 	bl	8001f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AMOLED_CS_Pin;
 80009ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80009c8:	2309      	movs	r3, #9
 80009ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(AMOLED_CS_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009d2:	4619      	mov	r1, r3
 80009d4:	4808      	ldr	r0, [pc, #32]	; (80009f8 <HAL_QSPI_MspInit+0x1b8>)
 80009d6:	f001 fac3 	bl	8001f60 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80009da:	bf00      	nop
 80009dc:	37f8      	adds	r7, #248	; 0xf8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	52005000 	.word	0x52005000
 80009e8:	58024400 	.word	0x58024400
 80009ec:	58021400 	.word	0x58021400
 80009f0:	58021c00 	.word	0x58021c00
 80009f4:	58021000 	.word	0x58021000
 80009f8:	58020800 	.word	0x58020800

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <HAL_MspInit+0x30>)
 8000a04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a08:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_MspInit+0x30>)
 8000a0a:	f043 0302 	orr.w	r3, r3, #2
 8000a0e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_MspInit+0x30>)
 8000a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a18:	f003 0302 	and.w	r3, r3, #2
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	58024400 	.word	0x58024400

08000a30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	; 0x38
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b0f      	cmp	r3, #15
 8000a3c:	d844      	bhi.n	8000ac8 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	6879      	ldr	r1, [r7, #4]
 8000a42:	2019      	movs	r0, #25
 8000a44:	f001 f9e8 	bl	8001e18 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a48:	2019      	movs	r0, #25
 8000a4a:	f001 f9ff 	bl	8001e4c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000a4e:	4a24      	ldr	r2, [pc, #144]	; (8000ae0 <HAL_InitTick+0xb0>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <HAL_InitTick+0xb4>)
 8000a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a5a:	4a22      	ldr	r2, [pc, #136]	; (8000ae4 <HAL_InitTick+0xb4>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <HAL_InitTick+0xb4>)
 8000a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a72:	f107 020c 	add.w	r2, r7, #12
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 fd13 	bl	80034a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a82:	f002 fcfb 	bl	800347c <HAL_RCC_GetPCLK2Freq>
 8000a86:	4603      	mov	r3, r0
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a8e:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <HAL_InitTick+0xb8>)
 8000a90:	fba2 2303 	umull	r2, r3, r2, r3
 8000a94:	0c9b      	lsrs	r3, r3, #18
 8000a96:	3b01      	subs	r3, #1
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_InitTick+0xbc>)
 8000a9c:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <HAL_InitTick+0xc0>)
 8000a9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0xbc>)
 8000aa2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000aa8:	4a10      	ldr	r2, [pc, #64]	; (8000aec <HAL_InitTick+0xbc>)
 8000aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aac:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_InitTick+0xbc>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <HAL_InitTick+0xbc>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000aba:	480c      	ldr	r0, [pc, #48]	; (8000aec <HAL_InitTick+0xbc>)
 8000abc:	f005 fa34 	bl	8005f28 <HAL_TIM_Base_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d107      	bne.n	8000ad6 <HAL_InitTick+0xa6>
 8000ac6:	e001      	b.n	8000acc <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e005      	b.n	8000ad8 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000acc:	4807      	ldr	r0, [pc, #28]	; (8000aec <HAL_InitTick+0xbc>)
 8000ace:	f005 fa8d 	bl	8005fec <HAL_TIM_Base_Start_IT>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	e000      	b.n	8000ad8 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3738      	adds	r7, #56	; 0x38
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	24000008 	.word	0x24000008
 8000ae4:	58024400 	.word	0x58024400
 8000ae8:	431bde83 	.word	0x431bde83
 8000aec:	240000dc 	.word	0x240000dc
 8000af0:	40010000 	.word	0x40010000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <TIM1_UP_IRQHandler+0x10>)
 8000b52:	f005 fac3 	bl	80060dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	240000dc 	.word	0x240000dc

08000b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b64:	4b37      	ldr	r3, [pc, #220]	; (8000c44 <SystemInit+0xe4>)
 8000b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6a:	4a36      	ldr	r2, [pc, #216]	; (8000c44 <SystemInit+0xe4>)
 8000b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b74:	4b34      	ldr	r3, [pc, #208]	; (8000c48 <SystemInit+0xe8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f003 030f 	and.w	r3, r3, #15
 8000b7c:	2b06      	cmp	r3, #6
 8000b7e:	d807      	bhi.n	8000b90 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b80:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <SystemInit+0xe8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f023 030f 	bic.w	r3, r3, #15
 8000b88:	4a2f      	ldr	r2, [pc, #188]	; (8000c48 <SystemInit+0xe8>)
 8000b8a:	f043 0307 	orr.w	r3, r3, #7
 8000b8e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b90:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <SystemInit+0xec>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a2d      	ldr	r2, [pc, #180]	; (8000c4c <SystemInit+0xec>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <SystemInit+0xec>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ba2:	4b2a      	ldr	r3, [pc, #168]	; (8000c4c <SystemInit+0xec>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	4929      	ldr	r1, [pc, #164]	; (8000c4c <SystemInit+0xec>)
 8000ba8:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <SystemInit+0xf0>)
 8000baa:	4013      	ands	r3, r2
 8000bac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bae:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <SystemInit+0xe8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 0308 	and.w	r3, r3, #8
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d007      	beq.n	8000bca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bba:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <SystemInit+0xe8>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f023 030f 	bic.w	r3, r3, #15
 8000bc2:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <SystemInit+0xe8>)
 8000bc4:	f043 0307 	orr.w	r3, r3, #7
 8000bc8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <SystemInit+0xec>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <SystemInit+0xec>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <SystemInit+0xec>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <SystemInit+0xec>)
 8000bde:	4a1d      	ldr	r2, [pc, #116]	; (8000c54 <SystemInit+0xf4>)
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000be2:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <SystemInit+0xec>)
 8000be4:	4a1c      	ldr	r2, [pc, #112]	; (8000c58 <SystemInit+0xf8>)
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <SystemInit+0xec>)
 8000bea:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <SystemInit+0xfc>)
 8000bec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <SystemInit+0xec>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <SystemInit+0xec>)
 8000bf6:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <SystemInit+0xfc>)
 8000bf8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <SystemInit+0xec>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <SystemInit+0xec>)
 8000c02:	4a16      	ldr	r2, [pc, #88]	; (8000c5c <SystemInit+0xfc>)
 8000c04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <SystemInit+0xec>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <SystemInit+0xec>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <SystemInit+0xec>)
 8000c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <SystemInit+0xec>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <SystemInit+0x100>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <SystemInit+0x104>)
 8000c24:	4013      	ands	r3, r2
 8000c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c2a:	d202      	bcs.n	8000c32 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <SystemInit+0x108>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <SystemInit+0x10c>)
 8000c34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c38:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00
 8000c48:	52002000 	.word	0x52002000
 8000c4c:	58024400 	.word	0x58024400
 8000c50:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c54:	02020200 	.word	0x02020200
 8000c58:	01ff0000 	.word	0x01ff0000
 8000c5c:	01010280 	.word	0x01010280
 8000c60:	5c001000 	.word	0x5c001000
 8000c64:	ffff0000 	.word	0xffff0000
 8000c68:	51008108 	.word	0x51008108
 8000c6c:	52004000 	.word	0x52004000

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c74:	f7ff ff74 	bl	8000b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c7a:	490d      	ldr	r1, [pc, #52]	; (8000cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c90:	4c0a      	ldr	r4, [pc, #40]	; (8000cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f005 fc25 	bl	80064ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fc37 	bl	8000514 <main>
  bx  lr
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ca8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000cac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cb0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000cb4:	08006564 	.word	0x08006564
  ldr r2, =_sbss
 8000cb8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000cbc:	2400012c 	.word	0x2400012c

08000cc0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC3_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cca:	2003      	movs	r0, #3
 8000ccc:	f001 f899 	bl	8001e02 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cd0:	f002 fa14 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_Init+0x68>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	0a1b      	lsrs	r3, r3, #8
 8000cdc:	f003 030f 	and.w	r3, r3, #15
 8000ce0:	4913      	ldr	r1, [pc, #76]	; (8000d30 <HAL_Init+0x6c>)
 8000ce2:	5ccb      	ldrb	r3, [r1, r3]
 8000ce4:	f003 031f 	and.w	r3, r3, #31
 8000ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_Init+0x68>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <HAL_Init+0x6c>)
 8000cf8:	5cd3      	ldrb	r3, [r2, r3]
 8000cfa:	f003 031f 	and.w	r3, r3, #31
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	fa22 f303 	lsr.w	r3, r2, r3
 8000d04:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <HAL_Init+0x70>)
 8000d06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d08:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <HAL_Init+0x74>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d0e:	200f      	movs	r0, #15
 8000d10:	f7ff fe8e 	bl	8000a30 <HAL_InitTick>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e002      	b.n	8000d24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1e:	f7ff fe6d 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	58024400 	.word	0x58024400
 8000d30:	0800654c 	.word	0x0800654c
 8000d34:	24000004 	.word	0x24000004
 8000d38:	24000000 	.word	0x24000000

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	2400000c 	.word	0x2400000c
 8000d60:	24000128 	.word	0x24000128

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	24000128 	.word	0x24000128

08000d7c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GetREVID+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	0c1b      	lsrs	r3, r3, #16
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	5c001000 	.word	0x5c001000

08000d94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	431a      	orrs	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	609a      	str	r2, [r3, #8]
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
 8000e08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3360      	adds	r3, #96	; 0x60
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000e30:	bf00      	nop
 8000e32:	371c      	adds	r7, #28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	f003 031f 	and.w	r3, r3, #31
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	611a      	str	r2, [r3, #16]
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b087      	sub	sp, #28
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	3360      	adds	r3, #96	; 0x60
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	431a      	orrs	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	601a      	str	r2, [r3, #0]
  }
}
 8000e98:	bf00      	nop
 8000e9a:	371c      	adds	r7, #28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3330      	adds	r3, #48	; 0x30
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	f003 030c 	and.w	r3, r3, #12
 8000ec0:	4413      	add	r3, r2
 8000ec2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	f003 031f 	and.w	r3, r3, #31
 8000ece:	211f      	movs	r1, #31
 8000ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	0e9b      	lsrs	r3, r3, #26
 8000edc:	f003 011f 	and.w	r1, r3, #31
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	f003 031f 	and.w	r3, r3, #31
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	431a      	orrs	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ef0:	bf00      	nop
 8000ef2:	371c      	adds	r7, #28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3314      	adds	r3, #20
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	0e5b      	lsrs	r3, r3, #25
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	4413      	add	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	0d1b      	lsrs	r3, r3, #20
 8000f24:	f003 031f 	and.w	r3, r3, #31
 8000f28:	2107      	movs	r1, #7
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	401a      	ands	r2, r3
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	0d1b      	lsrs	r3, r3, #20
 8000f36:	f003 031f 	and.w	r3, r3, #31
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f40:	431a      	orrs	r2, r3
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f46:	bf00      	nop
 8000f48:	371c      	adds	r7, #28
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	401a      	ands	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0318 	and.w	r3, r3, #24
 8000f76:	4908      	ldr	r1, [pc, #32]	; (8000f98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f78:	40d9      	lsrs	r1, r3
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	400b      	ands	r3, r1
 8000f7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f82:	431a      	orrs	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8000f8a:	bf00      	nop
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	000fffff 	.word	0x000fffff

08000f9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <LL_ADC_DisableDeepPowerDown+0x20>)
 8000faa:	4013      	ands	r3, r2
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	6093      	str	r3, [r2, #8]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	5fffffc0 	.word	0x5fffffc0

08000fc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fd4:	d101      	bne.n	8000fda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <LL_ADC_EnableInternalRegulator+0x24>)
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	6fffffc0 	.word	0x6fffffc0

08001010 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001020:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001024:	d101      	bne.n	800102a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b01      	cmp	r3, #1
 800104a:	d101      	bne.n	8001050 <LL_ADC_IsEnabled+0x18>
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <LL_ADC_IsEnabled+0x1a>
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	2b04      	cmp	r3, #4
 8001070:	d101      	bne.n	8001076 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	2b08      	cmp	r3, #8
 8001096:	d101      	bne.n	800109c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e18f      	b.n	80013e6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d109      	bne.n	80010e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff f961 	bl	800039c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff67 	bl	8000fc0 <LL_ADC_IsDeepPowerDownEnabled>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d004      	beq.n	8001102 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff4d 	bl	8000f9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff82 	bl	8001010 <LL_ADC_IsInternalRegulatorEnabled>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d114      	bne.n	800113c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff66 	bl	8000fe8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800111c:	4b87      	ldr	r3, [pc, #540]	; (800133c <HAL_ADC_Init+0x290>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	099b      	lsrs	r3, r3, #6
 8001122:	4a87      	ldr	r2, [pc, #540]	; (8001340 <HAL_ADC_Init+0x294>)
 8001124:	fba2 2303 	umull	r2, r3, r2, r3
 8001128:	099b      	lsrs	r3, r3, #6
 800112a:	3301      	adds	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800112e:	e002      	b.n	8001136 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	3b01      	subs	r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f9      	bne.n	8001130 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff65 	bl	8001010 <LL_ADC_IsInternalRegulatorEnabled>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10d      	bne.n	8001168 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001150:	f043 0210 	orr.w	r2, r3, #16
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115c:	f043 0201 	orr.w	r2, r3, #1
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff76 	bl	800105e <LL_ADC_REG_IsConversionOngoing>
 8001172:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001178:	f003 0310 	and.w	r3, r3, #16
 800117c:	2b00      	cmp	r3, #0
 800117e:	f040 8129 	bne.w	80013d4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2b00      	cmp	r3, #0
 8001186:	f040 8125 	bne.w	80013d4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800118e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001192:	f043 0202 	orr.w	r2, r3, #2
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff4a 	bl	8001038 <LL_ADC_IsEnabled>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d136      	bne.n	8001218 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a65      	ldr	r2, [pc, #404]	; (8001344 <HAL_ADC_Init+0x298>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d004      	beq.n	80011be <HAL_ADC_Init+0x112>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a63      	ldr	r2, [pc, #396]	; (8001348 <HAL_ADC_Init+0x29c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d10e      	bne.n	80011dc <HAL_ADC_Init+0x130>
 80011be:	4861      	ldr	r0, [pc, #388]	; (8001344 <HAL_ADC_Init+0x298>)
 80011c0:	f7ff ff3a 	bl	8001038 <LL_ADC_IsEnabled>
 80011c4:	4604      	mov	r4, r0
 80011c6:	4860      	ldr	r0, [pc, #384]	; (8001348 <HAL_ADC_Init+0x29c>)
 80011c8:	f7ff ff36 	bl	8001038 <LL_ADC_IsEnabled>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4323      	orrs	r3, r4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf0c      	ite	eq
 80011d4:	2301      	moveq	r3, #1
 80011d6:	2300      	movne	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	e008      	b.n	80011ee <HAL_ADC_Init+0x142>
 80011dc:	485b      	ldr	r0, [pc, #364]	; (800134c <HAL_ADC_Init+0x2a0>)
 80011de:	f7ff ff2b 	bl	8001038 <LL_ADC_IsEnabled>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	bf0c      	ite	eq
 80011e8:	2301      	moveq	r3, #1
 80011ea:	2300      	movne	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d012      	beq.n	8001218 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a53      	ldr	r2, [pc, #332]	; (8001344 <HAL_ADC_Init+0x298>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d004      	beq.n	8001206 <HAL_ADC_Init+0x15a>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a51      	ldr	r2, [pc, #324]	; (8001348 <HAL_ADC_Init+0x29c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <HAL_ADC_Init+0x15e>
 8001206:	4a52      	ldr	r2, [pc, #328]	; (8001350 <HAL_ADC_Init+0x2a4>)
 8001208:	e000      	b.n	800120c <HAL_ADC_Init+0x160>
 800120a:	4a52      	ldr	r2, [pc, #328]	; (8001354 <HAL_ADC_Init+0x2a8>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4619      	mov	r1, r3
 8001212:	4610      	mov	r0, r2
 8001214:	f7ff fdbe 	bl	8000d94 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001218:	f7ff fdb0 	bl	8000d7c <HAL_GetREVID>
 800121c:	4603      	mov	r3, r0
 800121e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001222:	4293      	cmp	r3, r2
 8001224:	d914      	bls.n	8001250 <HAL_ADC_Init+0x1a4>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b10      	cmp	r3, #16
 800122c:	d110      	bne.n	8001250 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7d5b      	ldrb	r3, [r3, #21]
 8001232:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001238:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800123e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7f1b      	ldrb	r3, [r3, #28]
 8001244:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001246:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001248:	f043 030c 	orr.w	r3, r3, #12
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	e00d      	b.n	800126c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7d5b      	ldrb	r3, [r3, #21]
 8001254:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800125a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001260:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	7f1b      	ldrb	r3, [r3, #28]
 8001266:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7f1b      	ldrb	r3, [r3, #28]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d106      	bne.n	8001282 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	3b01      	subs	r3, #1
 800127a:	045b      	lsls	r3, r3, #17
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	2b00      	cmp	r3, #0
 8001288:	d009      	beq.n	800129e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001296:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <HAL_ADC_Init+0x2ac>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	69b9      	ldr	r1, [r7, #24]
 80012ae:	430b      	orrs	r3, r1
 80012b0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fed1 	bl	800105e <LL_ADC_REG_IsConversionOngoing>
 80012bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fede 	bl	8001084 <LL_ADC_INJ_IsConversionOngoing>
 80012c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d15f      	bne.n	8001390 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d15c      	bne.n	8001390 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7d1b      	ldrb	r3, [r3, #20]
 80012da:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <HAL_ADC_Init+0x2b0>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	69b9      	ldr	r1, [r7, #24]
 80012f4:	430b      	orrs	r3, r1
 80012f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d130      	bne.n	8001364 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	691a      	ldr	r2, [r3, #16]
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_ADC_Init+0x2b4>)
 8001310:	4013      	ands	r3, r2
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001316:	3a01      	subs	r2, #1
 8001318:	0411      	lsls	r1, r2, #16
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800131e:	4311      	orrs	r1, r2
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001324:	4311      	orrs	r1, r2
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800132a:	430a      	orrs	r2, r1
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0201 	orr.w	r2, r2, #1
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	e01c      	b.n	8001374 <HAL_ADC_Init+0x2c8>
 800133a:	bf00      	nop
 800133c:	24000000 	.word	0x24000000
 8001340:	053e2d63 	.word	0x053e2d63
 8001344:	40022000 	.word	0x40022000
 8001348:	40022100 	.word	0x40022100
 800134c:	58026000 	.word	0x58026000
 8001350:	40022300 	.word	0x40022300
 8001354:	58026300 	.word	0x58026300
 8001358:	fff0c003 	.word	0xfff0c003
 800135c:	ffffbffc 	.word	0xffffbffc
 8001360:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	691a      	ldr	r2, [r3, #16]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 fb80 	bl	8001a90 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d10c      	bne.n	80013b2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f023 010f 	bic.w	r1, r3, #15
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	1e5a      	subs	r2, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	631a      	str	r2, [r3, #48]	; 0x30
 80013b0:	e007      	b.n	80013c2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 020f 	bic.w	r2, r2, #15
 80013c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c6:	f023 0303 	bic.w	r3, r3, #3
 80013ca:	f043 0201 	orr.w	r2, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	655a      	str	r2, [r3, #84]	; 0x54
 80013d2:	e007      	b.n	80013e4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d8:	f043 0210 	orr.w	r2, r3, #16
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd90      	pop	{r4, r7, pc}
 80013ee:	bf00      	nop

080013f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b0a1      	sub	sp, #132	; 0x84
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	4a9d      	ldr	r2, [pc, #628]	; (8001680 <HAL_ADC_ConfigChannel+0x290>)
 800140a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001412:	2b01      	cmp	r3, #1
 8001414:	d101      	bne.n	800141a <HAL_ADC_ConfigChannel+0x2a>
 8001416:	2302      	movs	r3, #2
 8001418:	e321      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x66e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fe19 	bl	800105e <LL_ADC_REG_IsConversionOngoing>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	f040 8306 	bne.w	8001a40 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800143c:	2b00      	cmp	r3, #0
 800143e:	d108      	bne.n	8001452 <HAL_ADC_ConfigChannel+0x62>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	0e9b      	lsrs	r3, r3, #26
 8001446:	f003 031f 	and.w	r3, r3, #31
 800144a:	2201      	movs	r2, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	e016      	b.n	8001480 <HAL_ADC_ConfigChannel+0x90>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800145a:	fa93 f3a3 	rbit	r3, r3
 800145e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001460:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001462:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800146a:	2320      	movs	r3, #32
 800146c:	e003      	b.n	8001476 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800146e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001470:	fab3 f383 	clz	r3, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f003 031f 	and.w	r3, r3, #31
 800147a:	2201      	movs	r2, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	69d1      	ldr	r1, [r2, #28]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	430b      	orrs	r3, r1
 800148c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	6859      	ldr	r1, [r3, #4]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	f7ff fd02 	bl	8000ea4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fdda 	bl	800105e <LL_ADC_REG_IsConversionOngoing>
 80014aa:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fde7 	bl	8001084 <LL_ADC_INJ_IsConversionOngoing>
 80014b6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f040 80b3 	bne.w	8001626 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f040 80af 	bne.w	8001626 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	6819      	ldr	r1, [r3, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	461a      	mov	r2, r3
 80014d6:	f7ff fd11 	bl	8000efc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80014da:	4b6a      	ldr	r3, [pc, #424]	; (8001684 <HAL_ADC_ConfigChannel+0x294>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80014e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014e6:	d10b      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x110>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	e01d      	b.n	800153c <HAL_ADC_ConfigChannel+0x14c>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10b      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x136>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	695a      	ldr	r2, [r3, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	e00a      	b.n	800153c <HAL_ADC_ConfigChannel+0x14c>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	089b      	lsrs	r3, r3, #2
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2b04      	cmp	r3, #4
 8001544:	d027      	beq.n	8001596 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	6919      	ldr	r1, [r3, #16]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001554:	f7ff fc52 	bl	8000dfc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	6919      	ldr	r1, [r3, #16]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	7e5b      	ldrb	r3, [r3, #25]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d102      	bne.n	800156e <HAL_ADC_ConfigChannel+0x17e>
 8001568:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800156c:	e000      	b.n	8001570 <HAL_ADC_ConfigChannel+0x180>
 800156e:	2300      	movs	r3, #0
 8001570:	461a      	mov	r2, r3
 8001572:	f7ff fc7c 	bl	8000e6e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	6919      	ldr	r1, [r3, #16]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	7e1b      	ldrb	r3, [r3, #24]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d102      	bne.n	800158c <HAL_ADC_ConfigChannel+0x19c>
 8001586:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800158a:	e000      	b.n	800158e <HAL_ADC_ConfigChannel+0x19e>
 800158c:	2300      	movs	r3, #0
 800158e:	461a      	mov	r2, r3
 8001590:	f7ff fc54 	bl	8000e3c <LL_ADC_SetDataRightShift>
 8001594:	e047      	b.n	8001626 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	069b      	lsls	r3, r3, #26
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d107      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015b8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	069b      	lsls	r3, r3, #26
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d107      	bne.n	80015de <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015dc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	069b      	lsls	r3, r3, #26
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d107      	bne.n	8001602 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001600:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001608:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	069b      	lsls	r3, r3, #26
 8001612:	429a      	cmp	r2, r3
 8001614:	d107      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001624:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fd04 	bl	8001038 <LL_ADC_IsEnabled>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	f040 820d 	bne.w	8001a52 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	6819      	ldr	r1, [r3, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	461a      	mov	r2, r3
 8001646:	f7ff fc85 	bl	8000f54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <HAL_ADC_ConfigChannel+0x290>)
 8001650:	4293      	cmp	r3, r2
 8001652:	f040 8133 	bne.w	80018bc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001662:	2b00      	cmp	r3, #0
 8001664:	d110      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x298>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	0e9b      	lsrs	r3, r3, #26
 800166c:	3301      	adds	r3, #1
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	2b09      	cmp	r3, #9
 8001674:	bf94      	ite	ls
 8001676:	2301      	movls	r3, #1
 8001678:	2300      	movhi	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	e01e      	b.n	80016bc <HAL_ADC_ConfigChannel+0x2cc>
 800167e:	bf00      	nop
 8001680:	47ff0000 	.word	0x47ff0000
 8001684:	5c001000 	.word	0x5c001000
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001690:	fa93 f3a3 	rbit	r3, r3
 8001694:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001698:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800169a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80016a0:	2320      	movs	r3, #32
 80016a2:	e003      	b.n	80016ac <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80016a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016a6:	fab3 f383 	clz	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	3301      	adds	r3, #1
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	2b09      	cmp	r3, #9
 80016b4:	bf94      	ite	ls
 80016b6:	2301      	movls	r3, #1
 80016b8:	2300      	movhi	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d079      	beq.n	80017b4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d107      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x2ec>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0e9b      	lsrs	r3, r3, #26
 80016d2:	3301      	adds	r3, #1
 80016d4:	069b      	lsls	r3, r3, #26
 80016d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016da:	e015      	b.n	8001708 <HAL_ADC_ConfigChannel+0x318>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016e4:	fa93 f3a3 	rbit	r3, r3
 80016e8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80016ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016ec:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80016ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80016f4:	2320      	movs	r3, #32
 80016f6:	e003      	b.n	8001700 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80016f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016fa:	fab3 f383 	clz	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	3301      	adds	r3, #1
 8001702:	069b      	lsls	r3, r3, #26
 8001704:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001710:	2b00      	cmp	r3, #0
 8001712:	d109      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x338>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0e9b      	lsrs	r3, r3, #26
 800171a:	3301      	adds	r3, #1
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	2101      	movs	r1, #1
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	e017      	b.n	8001758 <HAL_ADC_ConfigChannel+0x368>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001738:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800173a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001740:	2320      	movs	r3, #32
 8001742:	e003      	b.n	800174c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	3301      	adds	r3, #1
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	2101      	movs	r1, #1
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	ea42 0103 	orr.w	r1, r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10a      	bne.n	800177e <HAL_ADC_ConfigChannel+0x38e>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	0e9b      	lsrs	r3, r3, #26
 800176e:	3301      	adds	r3, #1
 8001770:	f003 021f 	and.w	r2, r3, #31
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	051b      	lsls	r3, r3, #20
 800177c:	e018      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x3c0>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800178c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001796:	2320      	movs	r3, #32
 8001798:	e003      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800179a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	3301      	adds	r3, #1
 80017a4:	f003 021f 	and.w	r2, r3, #31
 80017a8:	4613      	mov	r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4413      	add	r3, r2
 80017ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017b0:	430b      	orrs	r3, r1
 80017b2:	e07e      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x3e0>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	0e9b      	lsrs	r3, r3, #26
 80017c6:	3301      	adds	r3, #1
 80017c8:	069b      	lsls	r3, r3, #26
 80017ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017ce:	e015      	b.n	80017fc <HAL_ADC_ConfigChannel+0x40c>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d8:	fa93 f3a3 	rbit	r3, r3
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80017e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80017e8:	2320      	movs	r3, #32
 80017ea:	e003      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80017ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ee:	fab3 f383 	clz	r3, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	3301      	adds	r3, #1
 80017f6:	069b      	lsls	r3, r3, #26
 80017f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001804:	2b00      	cmp	r3, #0
 8001806:	d109      	bne.n	800181c <HAL_ADC_ConfigChannel+0x42c>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0e9b      	lsrs	r3, r3, #26
 800180e:	3301      	adds	r3, #1
 8001810:	f003 031f 	and.w	r3, r3, #31
 8001814:	2101      	movs	r1, #1
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	e017      	b.n	800184c <HAL_ADC_ConfigChannel+0x45c>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa93 f3a3 	rbit	r3, r3
 8001828:	61bb      	str	r3, [r7, #24]
  return result;
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001834:	2320      	movs	r3, #32
 8001836:	e003      	b.n	8001840 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	fab3 f383 	clz	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	3301      	adds	r3, #1
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	ea42 0103 	orr.w	r1, r2, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10d      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x488>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	0e9b      	lsrs	r3, r3, #26
 8001862:	3301      	adds	r3, #1
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	3b1e      	subs	r3, #30
 8001870:	051b      	lsls	r3, r3, #20
 8001872:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001876:	e01b      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x4c0>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	fa93 f3a3 	rbit	r3, r3
 8001884:	60fb      	str	r3, [r7, #12]
  return result;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001890:	2320      	movs	r3, #32
 8001892:	e003      	b.n	800189c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	3301      	adds	r3, #1
 800189e:	f003 021f 	and.w	r2, r3, #31
 80018a2:	4613      	mov	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	3b1e      	subs	r3, #30
 80018aa:	051b      	lsls	r3, r3, #20
 80018ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018b0:	430b      	orrs	r3, r1
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	6892      	ldr	r2, [r2, #8]
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff fb20 	bl	8000efc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f280 80c6 	bge.w	8001a52 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a67      	ldr	r2, [pc, #412]	; (8001a68 <HAL_ADC_ConfigChannel+0x678>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d004      	beq.n	80018da <HAL_ADC_ConfigChannel+0x4ea>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a65      	ldr	r2, [pc, #404]	; (8001a6c <HAL_ADC_ConfigChannel+0x67c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d101      	bne.n	80018de <HAL_ADC_ConfigChannel+0x4ee>
 80018da:	4b65      	ldr	r3, [pc, #404]	; (8001a70 <HAL_ADC_ConfigChannel+0x680>)
 80018dc:	e000      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x4f0>
 80018de:	4b65      	ldr	r3, [pc, #404]	; (8001a74 <HAL_ADC_ConfigChannel+0x684>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fa7d 	bl	8000de0 <LL_ADC_GetCommonPathInternalCh>
 80018e6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a5e      	ldr	r2, [pc, #376]	; (8001a68 <HAL_ADC_ConfigChannel+0x678>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d004      	beq.n	80018fc <HAL_ADC_ConfigChannel+0x50c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a5d      	ldr	r2, [pc, #372]	; (8001a6c <HAL_ADC_ConfigChannel+0x67c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d10e      	bne.n	800191a <HAL_ADC_ConfigChannel+0x52a>
 80018fc:	485a      	ldr	r0, [pc, #360]	; (8001a68 <HAL_ADC_ConfigChannel+0x678>)
 80018fe:	f7ff fb9b 	bl	8001038 <LL_ADC_IsEnabled>
 8001902:	4604      	mov	r4, r0
 8001904:	4859      	ldr	r0, [pc, #356]	; (8001a6c <HAL_ADC_ConfigChannel+0x67c>)
 8001906:	f7ff fb97 	bl	8001038 <LL_ADC_IsEnabled>
 800190a:	4603      	mov	r3, r0
 800190c:	4323      	orrs	r3, r4
 800190e:	2b00      	cmp	r3, #0
 8001910:	bf0c      	ite	eq
 8001912:	2301      	moveq	r3, #1
 8001914:	2300      	movne	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	e008      	b.n	800192c <HAL_ADC_ConfigChannel+0x53c>
 800191a:	4857      	ldr	r0, [pc, #348]	; (8001a78 <HAL_ADC_ConfigChannel+0x688>)
 800191c:	f7ff fb8c 	bl	8001038 <LL_ADC_IsEnabled>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	bf0c      	ite	eq
 8001926:	2301      	moveq	r3, #1
 8001928:	2300      	movne	r3, #0
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d07d      	beq.n	8001a2c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a51      	ldr	r2, [pc, #324]	; (8001a7c <HAL_ADC_ConfigChannel+0x68c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d130      	bne.n	800199c <HAL_ADC_ConfigChannel+0x5ac>
 800193a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800193c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d12b      	bne.n	800199c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a4b      	ldr	r2, [pc, #300]	; (8001a78 <HAL_ADC_ConfigChannel+0x688>)
 800194a:	4293      	cmp	r3, r2
 800194c:	f040 8081 	bne.w	8001a52 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a44      	ldr	r2, [pc, #272]	; (8001a68 <HAL_ADC_ConfigChannel+0x678>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d004      	beq.n	8001964 <HAL_ADC_ConfigChannel+0x574>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a43      	ldr	r2, [pc, #268]	; (8001a6c <HAL_ADC_ConfigChannel+0x67c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d101      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x578>
 8001964:	4a42      	ldr	r2, [pc, #264]	; (8001a70 <HAL_ADC_ConfigChannel+0x680>)
 8001966:	e000      	b.n	800196a <HAL_ADC_ConfigChannel+0x57a>
 8001968:	4a42      	ldr	r2, [pc, #264]	; (8001a74 <HAL_ADC_ConfigChannel+0x684>)
 800196a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800196c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001970:	4619      	mov	r1, r3
 8001972:	4610      	mov	r0, r2
 8001974:	f7ff fa21 	bl	8000dba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001978:	4b41      	ldr	r3, [pc, #260]	; (8001a80 <HAL_ADC_ConfigChannel+0x690>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	099b      	lsrs	r3, r3, #6
 800197e:	4a41      	ldr	r2, [pc, #260]	; (8001a84 <HAL_ADC_ConfigChannel+0x694>)
 8001980:	fba2 2303 	umull	r2, r3, r2, r3
 8001984:	099b      	lsrs	r3, r3, #6
 8001986:	3301      	adds	r3, #1
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800198c:	e002      	b.n	8001994 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	3b01      	subs	r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f9      	bne.n	800198e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800199a:	e05a      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a39      	ldr	r2, [pc, #228]	; (8001a88 <HAL_ADC_ConfigChannel+0x698>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d11e      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x5f4>
 80019a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d119      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a30      	ldr	r2, [pc, #192]	; (8001a78 <HAL_ADC_ConfigChannel+0x688>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d14b      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a2a      	ldr	r2, [pc, #168]	; (8001a68 <HAL_ADC_ConfigChannel+0x678>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d004      	beq.n	80019ce <HAL_ADC_ConfigChannel+0x5de>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a28      	ldr	r2, [pc, #160]	; (8001a6c <HAL_ADC_ConfigChannel+0x67c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x5e2>
 80019ce:	4a28      	ldr	r2, [pc, #160]	; (8001a70 <HAL_ADC_ConfigChannel+0x680>)
 80019d0:	e000      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x5e4>
 80019d2:	4a28      	ldr	r2, [pc, #160]	; (8001a74 <HAL_ADC_ConfigChannel+0x684>)
 80019d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019da:	4619      	mov	r1, r3
 80019dc:	4610      	mov	r0, r2
 80019de:	f7ff f9ec 	bl	8000dba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019e2:	e036      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a28      	ldr	r2, [pc, #160]	; (8001a8c <HAL_ADC_ConfigChannel+0x69c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d131      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x662>
 80019ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d12c      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a1e      	ldr	r2, [pc, #120]	; (8001a78 <HAL_ADC_ConfigChannel+0x688>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d127      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a18      	ldr	r2, [pc, #96]	; (8001a68 <HAL_ADC_ConfigChannel+0x678>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d004      	beq.n	8001a16 <HAL_ADC_ConfigChannel+0x626>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a16      	ldr	r2, [pc, #88]	; (8001a6c <HAL_ADC_ConfigChannel+0x67c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d101      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x62a>
 8001a16:	4a16      	ldr	r2, [pc, #88]	; (8001a70 <HAL_ADC_ConfigChannel+0x680>)
 8001a18:	e000      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x62c>
 8001a1a:	4a16      	ldr	r2, [pc, #88]	; (8001a74 <HAL_ADC_ConfigChannel+0x684>)
 8001a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a22:	4619      	mov	r1, r3
 8001a24:	4610      	mov	r0, r2
 8001a26:	f7ff f9c8 	bl	8000dba <LL_ADC_SetCommonPathInternalCh>
 8001a2a:	e012      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a30:	f043 0220 	orr.w	r2, r3, #32
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001a3e:	e008      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a44:	f043 0220 	orr.w	r2, r3, #32
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a5a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3784      	adds	r7, #132	; 0x84
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd90      	pop	{r4, r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40022000 	.word	0x40022000
 8001a6c:	40022100 	.word	0x40022100
 8001a70:	40022300 	.word	0x40022300
 8001a74:	58026300 	.word	0x58026300
 8001a78:	58026000 	.word	0x58026000
 8001a7c:	cb840000 	.word	0xcb840000
 8001a80:	24000000 	.word	0x24000000
 8001a84:	053e2d63 	.word	0x053e2d63
 8001a88:	c7520000 	.word	0xc7520000
 8001a8c:	cfb80000 	.word	0xcfb80000

08001a90 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a7a      	ldr	r2, [pc, #488]	; (8001c88 <ADC_ConfigureBoostMode+0x1f8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d004      	beq.n	8001aac <ADC_ConfigureBoostMode+0x1c>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a79      	ldr	r2, [pc, #484]	; (8001c8c <ADC_ConfigureBoostMode+0x1fc>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d109      	bne.n	8001ac0 <ADC_ConfigureBoostMode+0x30>
 8001aac:	4b78      	ldr	r3, [pc, #480]	; (8001c90 <ADC_ConfigureBoostMode+0x200>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf14      	ite	ne
 8001ab8:	2301      	movne	r3, #1
 8001aba:	2300      	moveq	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	e008      	b.n	8001ad2 <ADC_ConfigureBoostMode+0x42>
 8001ac0:	4b74      	ldr	r3, [pc, #464]	; (8001c94 <ADC_ConfigureBoostMode+0x204>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bf14      	ite	ne
 8001acc:	2301      	movne	r3, #1
 8001ace:	2300      	moveq	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d01c      	beq.n	8001b10 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001ad6:	f001 fc8b 	bl	80033f0 <HAL_RCC_GetHCLKFreq>
 8001ada:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ae4:	d010      	beq.n	8001b08 <ADC_ConfigureBoostMode+0x78>
 8001ae6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001aea:	d873      	bhi.n	8001bd4 <ADC_ConfigureBoostMode+0x144>
 8001aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af0:	d002      	beq.n	8001af8 <ADC_ConfigureBoostMode+0x68>
 8001af2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001af6:	d16d      	bne.n	8001bd4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b04:	60fb      	str	r3, [r7, #12]
        break;
 8001b06:	e068      	b.n	8001bda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	60fb      	str	r3, [r7, #12]
        break;
 8001b0e:	e064      	b.n	8001bda <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001b10:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b14:	f04f 0100 	mov.w	r1, #0
 8001b18:	f002 ff12 	bl	8004940 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b1c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001b26:	d051      	beq.n	8001bcc <ADC_ConfigureBoostMode+0x13c>
 8001b28:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001b2c:	d854      	bhi.n	8001bd8 <ADC_ConfigureBoostMode+0x148>
 8001b2e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001b32:	d047      	beq.n	8001bc4 <ADC_ConfigureBoostMode+0x134>
 8001b34:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001b38:	d84e      	bhi.n	8001bd8 <ADC_ConfigureBoostMode+0x148>
 8001b3a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001b3e:	d03d      	beq.n	8001bbc <ADC_ConfigureBoostMode+0x12c>
 8001b40:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001b44:	d848      	bhi.n	8001bd8 <ADC_ConfigureBoostMode+0x148>
 8001b46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b4a:	d033      	beq.n	8001bb4 <ADC_ConfigureBoostMode+0x124>
 8001b4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b50:	d842      	bhi.n	8001bd8 <ADC_ConfigureBoostMode+0x148>
 8001b52:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001b56:	d029      	beq.n	8001bac <ADC_ConfigureBoostMode+0x11c>
 8001b58:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001b5c:	d83c      	bhi.n	8001bd8 <ADC_ConfigureBoostMode+0x148>
 8001b5e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001b62:	d01a      	beq.n	8001b9a <ADC_ConfigureBoostMode+0x10a>
 8001b64:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001b68:	d836      	bhi.n	8001bd8 <ADC_ConfigureBoostMode+0x148>
 8001b6a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001b6e:	d014      	beq.n	8001b9a <ADC_ConfigureBoostMode+0x10a>
 8001b70:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001b74:	d830      	bhi.n	8001bd8 <ADC_ConfigureBoostMode+0x148>
 8001b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b7a:	d00e      	beq.n	8001b9a <ADC_ConfigureBoostMode+0x10a>
 8001b7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b80:	d82a      	bhi.n	8001bd8 <ADC_ConfigureBoostMode+0x148>
 8001b82:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001b86:	d008      	beq.n	8001b9a <ADC_ConfigureBoostMode+0x10a>
 8001b88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001b8c:	d824      	bhi.n	8001bd8 <ADC_ConfigureBoostMode+0x148>
 8001b8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b92:	d002      	beq.n	8001b9a <ADC_ConfigureBoostMode+0x10a>
 8001b94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b98:	d11e      	bne.n	8001bd8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	0c9b      	lsrs	r3, r3, #18
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	60fb      	str	r3, [r7, #12]
        break;
 8001baa:	e016      	b.n	8001bda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	60fb      	str	r3, [r7, #12]
        break;
 8001bb2:	e012      	b.n	8001bda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	60fb      	str	r3, [r7, #12]
        break;
 8001bba:	e00e      	b.n	8001bda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	099b      	lsrs	r3, r3, #6
 8001bc0:	60fb      	str	r3, [r7, #12]
        break;
 8001bc2:	e00a      	b.n	8001bda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	09db      	lsrs	r3, r3, #7
 8001bc8:	60fb      	str	r3, [r7, #12]
        break;
 8001bca:	e006      	b.n	8001bda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	0a1b      	lsrs	r3, r3, #8
 8001bd0:	60fb      	str	r3, [r7, #12]
        break;
 8001bd2:	e002      	b.n	8001bda <ADC_ConfigureBoostMode+0x14a>
        break;
 8001bd4:	bf00      	nop
 8001bd6:	e000      	b.n	8001bda <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8001bd8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001bda:	f7ff f8cf 	bl	8000d7c <HAL_GetREVID>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f241 0203 	movw	r2, #4099	; 0x1003
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d815      	bhi.n	8001c14 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4a2b      	ldr	r2, [pc, #172]	; (8001c98 <ADC_ConfigureBoostMode+0x208>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d908      	bls.n	8001c02 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bfe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001c00:	e03e      	b.n	8001c80 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c10:	609a      	str	r2, [r3, #8]
}
 8001c12:	e035      	b.n	8001c80 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	085b      	lsrs	r3, r3, #1
 8001c18:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4a1f      	ldr	r2, [pc, #124]	; (8001c9c <ADC_ConfigureBoostMode+0x20c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d808      	bhi.n	8001c34 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001c30:	609a      	str	r2, [r3, #8]
}
 8001c32:	e025      	b.n	8001c80 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4a1a      	ldr	r2, [pc, #104]	; (8001ca0 <ADC_ConfigureBoostMode+0x210>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d80a      	bhi.n	8001c52 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c4e:	609a      	str	r2, [r3, #8]
}
 8001c50:	e016      	b.n	8001c80 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4a13      	ldr	r2, [pc, #76]	; (8001ca4 <ADC_ConfigureBoostMode+0x214>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d80a      	bhi.n	8001c70 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c6c:	609a      	str	r2, [r3, #8]
}
 8001c6e:	e007      	b.n	8001c80 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001c7e:	609a      	str	r2, [r3, #8]
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40022000 	.word	0x40022000
 8001c8c:	40022100 	.word	0x40022100
 8001c90:	40022300 	.word	0x40022300
 8001c94:	58026300 	.word	0x58026300
 8001c98:	01312d00 	.word	0x01312d00
 8001c9c:	005f5e10 	.word	0x005f5e10
 8001ca0:	00bebc20 	.word	0x00bebc20
 8001ca4:	017d7840 	.word	0x017d7840

08001ca8 <__NVIC_SetPriorityGrouping>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00
 8001cec:	05fa0000 	.word	0x05fa0000

08001cf0 <__NVIC_GetPriorityGrouping>:
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <__NVIC_EnableIRQ+0x38>)
 8001d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	; (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	; (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ff4c 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e26:	f7ff ff63 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001e2a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	68b9      	ldr	r1, [r7, #8]
 8001e30:	6978      	ldr	r0, [r7, #20]
 8001e32:	f7ff ffb3 	bl	8001d9c <NVIC_EncodePriority>
 8001e36:	4602      	mov	r2, r0
 8001e38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff82 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e44:	bf00      	nop
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ff56 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8001e6c:	f3bf 8f5f 	dmb	sy
}
 8001e70:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <HAL_MPU_Disable+0x28>)
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	4a06      	ldr	r2, [pc, #24]	; (8001e90 <HAL_MPU_Disable+0x28>)
 8001e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_MPU_Disable+0x2c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	605a      	str	r2, [r3, #4]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000ed00 	.word	0xe000ed00
 8001e94:	e000ed90 	.word	0xe000ed90

08001e98 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ea0:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <HAL_MPU_Enable+0x38>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_MPU_Enable+0x3c>)
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <HAL_MPU_Enable+0x3c>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001eb6:	f3bf 8f4f 	dsb	sy
}
 8001eba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ebc:	f3bf 8f6f 	isb	sy
}
 8001ec0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000ed90 	.word	0xe000ed90
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	785a      	ldrb	r2, [r3, #1]
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_MPU_ConfigRegion+0x84>)
 8001ee6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d029      	beq.n	8001f44 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001ef0:	4a1a      	ldr	r2, [pc, #104]	; (8001f5c <HAL_MPU_ConfigRegion+0x84>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7b1b      	ldrb	r3, [r3, #12]
 8001efc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7adb      	ldrb	r3, [r3, #11]
 8001f02:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f04:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	7a9b      	ldrb	r3, [r3, #10]
 8001f0a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f0c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7b5b      	ldrb	r3, [r3, #13]
 8001f12:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f14:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7b9b      	ldrb	r3, [r3, #14]
 8001f1a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f1c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7bdb      	ldrb	r3, [r3, #15]
 8001f22:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f24:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	7a5b      	ldrb	r3, [r3, #9]
 8001f2a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f2c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	7a1b      	ldrb	r3, [r3, #8]
 8001f32:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f34:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	7812      	ldrb	r2, [r2, #0]
 8001f3a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f3e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f40:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001f42:	e005      	b.n	8001f50 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_MPU_ConfigRegion+0x84>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001f4a:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <HAL_MPU_ConfigRegion+0x84>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed90 	.word	0xe000ed90

08001f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f6e:	4b89      	ldr	r3, [pc, #548]	; (8002194 <HAL_GPIO_Init+0x234>)
 8001f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f72:	e194      	b.n	800229e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2101      	movs	r1, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8186 	beq.w	8002298 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d005      	beq.n	8001fa4 <HAL_GPIO_Init+0x44>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d130      	bne.n	8002006 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fda:	2201      	movs	r2, #1
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f003 0201 	and.w	r2, r3, #1
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b03      	cmp	r3, #3
 8002010:	d017      	beq.n	8002042 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d123      	bne.n	8002096 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	08da      	lsrs	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3208      	adds	r2, #8
 8002056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	220f      	movs	r2, #15
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	08da      	lsrs	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3208      	adds	r2, #8
 8002090:	69b9      	ldr	r1, [r7, #24]
 8002092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2203      	movs	r2, #3
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0203 	and.w	r2, r3, #3
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80e0 	beq.w	8002298 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d8:	4b2f      	ldr	r3, [pc, #188]	; (8002198 <HAL_GPIO_Init+0x238>)
 80020da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020de:	4a2e      	ldr	r2, [pc, #184]	; (8002198 <HAL_GPIO_Init+0x238>)
 80020e0:	f043 0302 	orr.w	r3, r3, #2
 80020e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020e8:	4b2b      	ldr	r3, [pc, #172]	; (8002198 <HAL_GPIO_Init+0x238>)
 80020ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020f6:	4a29      	ldr	r2, [pc, #164]	; (800219c <HAL_GPIO_Init+0x23c>)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	089b      	lsrs	r3, r3, #2
 80020fc:	3302      	adds	r3, #2
 80020fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	220f      	movs	r2, #15
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a20      	ldr	r2, [pc, #128]	; (80021a0 <HAL_GPIO_Init+0x240>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d052      	beq.n	80021c8 <HAL_GPIO_Init+0x268>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a1f      	ldr	r2, [pc, #124]	; (80021a4 <HAL_GPIO_Init+0x244>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d031      	beq.n	800218e <HAL_GPIO_Init+0x22e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a1e      	ldr	r2, [pc, #120]	; (80021a8 <HAL_GPIO_Init+0x248>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d02b      	beq.n	800218a <HAL_GPIO_Init+0x22a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <HAL_GPIO_Init+0x24c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d025      	beq.n	8002186 <HAL_GPIO_Init+0x226>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a1c      	ldr	r2, [pc, #112]	; (80021b0 <HAL_GPIO_Init+0x250>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d01f      	beq.n	8002182 <HAL_GPIO_Init+0x222>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <HAL_GPIO_Init+0x254>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d019      	beq.n	800217e <HAL_GPIO_Init+0x21e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a1a      	ldr	r2, [pc, #104]	; (80021b8 <HAL_GPIO_Init+0x258>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d013      	beq.n	800217a <HAL_GPIO_Init+0x21a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a19      	ldr	r2, [pc, #100]	; (80021bc <HAL_GPIO_Init+0x25c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00d      	beq.n	8002176 <HAL_GPIO_Init+0x216>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <HAL_GPIO_Init+0x260>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d007      	beq.n	8002172 <HAL_GPIO_Init+0x212>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a17      	ldr	r2, [pc, #92]	; (80021c4 <HAL_GPIO_Init+0x264>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d101      	bne.n	800216e <HAL_GPIO_Init+0x20e>
 800216a:	2309      	movs	r3, #9
 800216c:	e02d      	b.n	80021ca <HAL_GPIO_Init+0x26a>
 800216e:	230a      	movs	r3, #10
 8002170:	e02b      	b.n	80021ca <HAL_GPIO_Init+0x26a>
 8002172:	2308      	movs	r3, #8
 8002174:	e029      	b.n	80021ca <HAL_GPIO_Init+0x26a>
 8002176:	2307      	movs	r3, #7
 8002178:	e027      	b.n	80021ca <HAL_GPIO_Init+0x26a>
 800217a:	2306      	movs	r3, #6
 800217c:	e025      	b.n	80021ca <HAL_GPIO_Init+0x26a>
 800217e:	2305      	movs	r3, #5
 8002180:	e023      	b.n	80021ca <HAL_GPIO_Init+0x26a>
 8002182:	2304      	movs	r3, #4
 8002184:	e021      	b.n	80021ca <HAL_GPIO_Init+0x26a>
 8002186:	2303      	movs	r3, #3
 8002188:	e01f      	b.n	80021ca <HAL_GPIO_Init+0x26a>
 800218a:	2302      	movs	r3, #2
 800218c:	e01d      	b.n	80021ca <HAL_GPIO_Init+0x26a>
 800218e:	2301      	movs	r3, #1
 8002190:	e01b      	b.n	80021ca <HAL_GPIO_Init+0x26a>
 8002192:	bf00      	nop
 8002194:	58000080 	.word	0x58000080
 8002198:	58024400 	.word	0x58024400
 800219c:	58000400 	.word	0x58000400
 80021a0:	58020000 	.word	0x58020000
 80021a4:	58020400 	.word	0x58020400
 80021a8:	58020800 	.word	0x58020800
 80021ac:	58020c00 	.word	0x58020c00
 80021b0:	58021000 	.word	0x58021000
 80021b4:	58021400 	.word	0x58021400
 80021b8:	58021800 	.word	0x58021800
 80021bc:	58021c00 	.word	0x58021c00
 80021c0:	58022000 	.word	0x58022000
 80021c4:	58022400 	.word	0x58022400
 80021c8:	2300      	movs	r3, #0
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	f002 0203 	and.w	r2, r2, #3
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	4093      	lsls	r3, r2
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021da:	4938      	ldr	r1, [pc, #224]	; (80022bc <HAL_GPIO_Init+0x35c>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800220e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800223c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	3301      	adds	r3, #1
 800229c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f47f ae63 	bne.w	8001f74 <HAL_GPIO_Init+0x14>
  }
}
 80022ae:	bf00      	nop
 80022b0:	bf00      	nop
 80022b2:	3724      	adds	r7, #36	; 0x24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	58000400 	.word	0x58000400

080022c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	807b      	strh	r3, [r7, #2]
 80022cc:	4613      	mov	r3, r2
 80022ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022d0:	787b      	ldrb	r3, [r7, #1]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022d6:	887a      	ldrh	r2, [r7, #2]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80022dc:	e003      	b.n	80022e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022de:	887b      	ldrh	r3, [r7, #2]
 80022e0:	041a      	lsls	r2, r3, #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	619a      	str	r2, [r3, #24]
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80022fc:	4b19      	ldr	r3, [pc, #100]	; (8002364 <HAL_PWREx_ConfigSupply+0x70>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b04      	cmp	r3, #4
 8002306:	d00a      	beq.n	800231e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002308:	4b16      	ldr	r3, [pc, #88]	; (8002364 <HAL_PWREx_ConfigSupply+0x70>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	429a      	cmp	r2, r3
 8002314:	d001      	beq.n	800231a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e01f      	b.n	800235a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e01d      	b.n	800235a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800231e:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_PWREx_ConfigSupply+0x70>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f023 0207 	bic.w	r2, r3, #7
 8002326:	490f      	ldr	r1, [pc, #60]	; (8002364 <HAL_PWREx_ConfigSupply+0x70>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4313      	orrs	r3, r2
 800232c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800232e:	f7fe fd19 	bl	8000d64 <HAL_GetTick>
 8002332:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002334:	e009      	b.n	800234a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002336:	f7fe fd15 	bl	8000d64 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002344:	d901      	bls.n	800234a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e007      	b.n	800235a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_PWREx_ConfigSupply+0x70>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002356:	d1ee      	bne.n	8002336 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	58024800 	.word	0x58024800

08002368 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af02      	add	r7, sp, #8
 800236e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7fe fcf8 	bl	8000d64 <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e05f      	b.n	8002440 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d107      	bne.n	800239c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7fe fa57 	bl	8000840 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002392:	f241 3188 	movw	r1, #5000	; 0x1388
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f85a 	bl	8002450 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	021a      	lsls	r2, r3, #8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	2120      	movs	r1, #32
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f852 	bl	800246c <QSPI_WaitFlagStateUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80023cc:	7afb      	ldrb	r3, [r7, #11]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d135      	bne.n	800243e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_QSPI_Init+0xe0>)
 80023da:	4013      	ands	r3, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6852      	ldr	r2, [r2, #4]
 80023e0:	0611      	lsls	r1, r2, #24
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68d2      	ldr	r2, [r2, #12]
 80023e6:	4311      	orrs	r1, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	69d2      	ldr	r2, [r2, #28]
 80023ec:	4311      	orrs	r1, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6a12      	ldr	r2, [r2, #32]
 80023f2:	4311      	orrs	r1, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	430b      	orrs	r3, r1
 80023fa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_QSPI_Init+0xe4>)
 8002404:	4013      	ands	r3, r2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6912      	ldr	r2, [r2, #16]
 800240a:	0411      	lsls	r1, r2, #16
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6952      	ldr	r2, [r2, #20]
 8002410:	4311      	orrs	r1, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6992      	ldr	r2, [r2, #24]
 8002416:	4311      	orrs	r1, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	430b      	orrs	r3, r1
 800241e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800243e:	7afb      	ldrb	r3, [r7, #11]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	00ffff2f 	.word	0x00ffff2f
 800244c:	ffe0f8fe 	.word	0xffe0f8fe

08002450 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800247c:	e01a      	b.n	80024b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002484:	d016      	beq.n	80024b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002486:	f7fe fc6d 	bl	8000d64 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	429a      	cmp	r2, r3
 8002494:	d302      	bcc.n	800249c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10b      	bne.n	80024b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2204      	movs	r2, #4
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a8:	f043 0201 	orr.w	r2, r3, #1
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e00e      	b.n	80024d2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	4013      	ands	r3, r2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	bf14      	ite	ne
 80024c2:	2301      	movne	r3, #1
 80024c4:	2300      	moveq	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d1d6      	bne.n	800247e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08c      	sub	sp, #48	; 0x30
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d102      	bne.n	80024f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f000 bc48 	b.w	8002d80 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 8088 	beq.w	800260e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fe:	4b99      	ldr	r3, [pc, #612]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002508:	4b96      	ldr	r3, [pc, #600]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002510:	2b10      	cmp	r3, #16
 8002512:	d007      	beq.n	8002524 <HAL_RCC_OscConfig+0x48>
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	2b18      	cmp	r3, #24
 8002518:	d111      	bne.n	800253e <HAL_RCC_OscConfig+0x62>
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d10c      	bne.n	800253e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	4b8f      	ldr	r3, [pc, #572]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d06d      	beq.n	800260c <HAL_RCC_OscConfig+0x130>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d169      	bne.n	800260c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	f000 bc21 	b.w	8002d80 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x7a>
 8002548:	4b86      	ldr	r3, [pc, #536]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a85      	ldr	r2, [pc, #532]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 800254e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	e02e      	b.n	80025b4 <HAL_RCC_OscConfig+0xd8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x9c>
 800255e:	4b81      	ldr	r3, [pc, #516]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a80      	ldr	r2, [pc, #512]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 8002564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b7e      	ldr	r3, [pc, #504]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a7d      	ldr	r2, [pc, #500]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 8002570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e01d      	b.n	80025b4 <HAL_RCC_OscConfig+0xd8>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0xc0>
 8002582:	4b78      	ldr	r3, [pc, #480]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a77      	ldr	r2, [pc, #476]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 8002588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4b75      	ldr	r3, [pc, #468]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a74      	ldr	r2, [pc, #464]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e00b      	b.n	80025b4 <HAL_RCC_OscConfig+0xd8>
 800259c:	4b71      	ldr	r3, [pc, #452]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a70      	ldr	r2, [pc, #448]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4b6e      	ldr	r3, [pc, #440]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a6d      	ldr	r2, [pc, #436]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 80025ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe fbd2 	bl	8000d64 <HAL_GetTick>
 80025c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c4:	f7fe fbce 	bl	8000d64 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	; 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e3d4      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025d6:	4b63      	ldr	r3, [pc, #396]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0xe8>
 80025e2:	e014      	b.n	800260e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7fe fbbe 	bl	8000d64 <HAL_GetTick>
 80025e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ec:	f7fe fbba 	bl	8000d64 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e3c0      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025fe:	4b59      	ldr	r3, [pc, #356]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x110>
 800260a:	e000      	b.n	800260e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 80ca 	beq.w	80027b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800261c:	4b51      	ldr	r3, [pc, #324]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002624:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002626:	4b4f      	ldr	r3, [pc, #316]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d007      	beq.n	8002642 <HAL_RCC_OscConfig+0x166>
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	2b18      	cmp	r3, #24
 8002636:	d156      	bne.n	80026e6 <HAL_RCC_OscConfig+0x20a>
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d151      	bne.n	80026e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002642:	4b48      	ldr	r3, [pc, #288]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_RCC_OscConfig+0x17e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e392      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800265a:	4b42      	ldr	r3, [pc, #264]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 0219 	bic.w	r2, r3, #25
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	493f      	ldr	r1, [pc, #252]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 8002668:	4313      	orrs	r3, r2
 800266a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe fb7a 	bl	8000d64 <HAL_GetTick>
 8002670:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002674:	f7fe fb76 	bl	8000d64 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e37c      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002692:	f7fe fb73 	bl	8000d7c <HAL_GetREVID>
 8002696:	4603      	mov	r3, r0
 8002698:	f241 0203 	movw	r2, #4099	; 0x1003
 800269c:	4293      	cmp	r3, r2
 800269e:	d817      	bhi.n	80026d0 <HAL_RCC_OscConfig+0x1f4>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	2b40      	cmp	r3, #64	; 0x40
 80026a6:	d108      	bne.n	80026ba <HAL_RCC_OscConfig+0x1de>
 80026a8:	4b2e      	ldr	r3, [pc, #184]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80026b0:	4a2c      	ldr	r2, [pc, #176]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 80026b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b8:	e07a      	b.n	80027b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ba:	4b2a      	ldr	r3, [pc, #168]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	031b      	lsls	r3, r3, #12
 80026c8:	4926      	ldr	r1, [pc, #152]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ce:	e06f      	b.n	80027b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d0:	4b24      	ldr	r3, [pc, #144]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	4921      	ldr	r1, [pc, #132]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e4:	e064      	b.n	80027b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d047      	beq.n	800277e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 0219 	bic.w	r2, r3, #25
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	491a      	ldr	r1, [pc, #104]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7fe fb30 	bl	8000d64 <HAL_GetTick>
 8002704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002708:	f7fe fb2c 	bl	8000d64 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e332      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002726:	f7fe fb29 	bl	8000d7c <HAL_GetREVID>
 800272a:	4603      	mov	r3, r0
 800272c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002730:	4293      	cmp	r3, r2
 8002732:	d819      	bhi.n	8002768 <HAL_RCC_OscConfig+0x28c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b40      	cmp	r3, #64	; 0x40
 800273a:	d108      	bne.n	800274e <HAL_RCC_OscConfig+0x272>
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002744:	4a07      	ldr	r2, [pc, #28]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 8002746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274a:	6053      	str	r3, [r2, #4]
 800274c:	e030      	b.n	80027b0 <HAL_RCC_OscConfig+0x2d4>
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	031b      	lsls	r3, r3, #12
 800275c:	4901      	ldr	r1, [pc, #4]	; (8002764 <HAL_RCC_OscConfig+0x288>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
 8002762:	e025      	b.n	80027b0 <HAL_RCC_OscConfig+0x2d4>
 8002764:	58024400 	.word	0x58024400
 8002768:	4b9a      	ldr	r3, [pc, #616]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	061b      	lsls	r3, r3, #24
 8002776:	4997      	ldr	r1, [pc, #604]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 8002778:	4313      	orrs	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
 800277c:	e018      	b.n	80027b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277e:	4b95      	ldr	r3, [pc, #596]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a94      	ldr	r2, [pc, #592]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 8002784:	f023 0301 	bic.w	r3, r3, #1
 8002788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278a:	f7fe faeb 	bl	8000d64 <HAL_GetTick>
 800278e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002792:	f7fe fae7 	bl	8000d64 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e2ed      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027a4:	4b8b      	ldr	r3, [pc, #556]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1f0      	bne.n	8002792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80a9 	beq.w	8002910 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027be:	4b85      	ldr	r3, [pc, #532]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027c8:	4b82      	ldr	r3, [pc, #520]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d007      	beq.n	80027e4 <HAL_RCC_OscConfig+0x308>
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	2b18      	cmp	r3, #24
 80027d8:	d13a      	bne.n	8002850 <HAL_RCC_OscConfig+0x374>
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d135      	bne.n	8002850 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027e4:	4b7b      	ldr	r3, [pc, #492]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_OscConfig+0x320>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	2b80      	cmp	r3, #128	; 0x80
 80027f6:	d001      	beq.n	80027fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e2c1      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027fc:	f7fe fabe 	bl	8000d7c <HAL_GetREVID>
 8002800:	4603      	mov	r3, r0
 8002802:	f241 0203 	movw	r2, #4099	; 0x1003
 8002806:	4293      	cmp	r3, r2
 8002808:	d817      	bhi.n	800283a <HAL_RCC_OscConfig+0x35e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	2b20      	cmp	r3, #32
 8002810:	d108      	bne.n	8002824 <HAL_RCC_OscConfig+0x348>
 8002812:	4b70      	ldr	r3, [pc, #448]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800281a:	4a6e      	ldr	r2, [pc, #440]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 800281c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002820:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002822:	e075      	b.n	8002910 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002824:	4b6b      	ldr	r3, [pc, #428]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	069b      	lsls	r3, r3, #26
 8002832:	4968      	ldr	r1, [pc, #416]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002838:	e06a      	b.n	8002910 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800283a:	4b66      	ldr	r3, [pc, #408]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	061b      	lsls	r3, r3, #24
 8002848:	4962      	ldr	r1, [pc, #392]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 800284a:	4313      	orrs	r3, r2
 800284c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800284e:	e05f      	b.n	8002910 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d042      	beq.n	80028de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002858:	4b5e      	ldr	r3, [pc, #376]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a5d      	ldr	r2, [pc, #372]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 800285e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fa7e 	bl	8000d64 <HAL_GetTick>
 8002868:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800286c:	f7fe fa7a 	bl	8000d64 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e280      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800287e:	4b55      	ldr	r3, [pc, #340]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800288a:	f7fe fa77 	bl	8000d7c <HAL_GetREVID>
 800288e:	4603      	mov	r3, r0
 8002890:	f241 0203 	movw	r2, #4099	; 0x1003
 8002894:	4293      	cmp	r3, r2
 8002896:	d817      	bhi.n	80028c8 <HAL_RCC_OscConfig+0x3ec>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	2b20      	cmp	r3, #32
 800289e:	d108      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3d6>
 80028a0:	4b4c      	ldr	r3, [pc, #304]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028a8:	4a4a      	ldr	r2, [pc, #296]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80028aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028ae:	6053      	str	r3, [r2, #4]
 80028b0:	e02e      	b.n	8002910 <HAL_RCC_OscConfig+0x434>
 80028b2:	4b48      	ldr	r3, [pc, #288]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	069b      	lsls	r3, r3, #26
 80028c0:	4944      	ldr	r1, [pc, #272]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
 80028c6:	e023      	b.n	8002910 <HAL_RCC_OscConfig+0x434>
 80028c8:	4b42      	ldr	r3, [pc, #264]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	493f      	ldr	r1, [pc, #252]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	60cb      	str	r3, [r1, #12]
 80028dc:	e018      	b.n	8002910 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a3c      	ldr	r2, [pc, #240]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80028e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ea:	f7fe fa3b 	bl	8000d64 <HAL_GetTick>
 80028ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028f2:	f7fe fa37 	bl	8000d64 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e23d      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002904:	4b33      	ldr	r3, [pc, #204]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f0      	bne.n	80028f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b00      	cmp	r3, #0
 800291a:	d036      	beq.n	800298a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d019      	beq.n	8002958 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002924:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 8002926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002928:	4a2a      	ldr	r2, [pc, #168]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002930:	f7fe fa18 	bl	8000d64 <HAL_GetTick>
 8002934:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002938:	f7fe fa14 	bl	8000d64 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e21a      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800294a:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 800294c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x45c>
 8002956:	e018      	b.n	800298a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002958:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 800295a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295c:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 800295e:	f023 0301 	bic.w	r3, r3, #1
 8002962:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe f9fe 	bl	8000d64 <HAL_GetTick>
 8002968:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296c:	f7fe f9fa 	bl	8000d64 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e200      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 8002980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	2b00      	cmp	r3, #0
 8002994:	d039      	beq.n	8002a0a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d01c      	beq.n	80029d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a0c      	ldr	r2, [pc, #48]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80029a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029aa:	f7fe f9db 	bl	8000d64 <HAL_GetTick>
 80029ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029b2:	f7fe f9d7 	bl	8000d64 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e1dd      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x4d6>
 80029d0:	e01b      	b.n	8002a0a <HAL_RCC_OscConfig+0x52e>
 80029d2:	bf00      	nop
 80029d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029d8:	4b9b      	ldr	r3, [pc, #620]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a9a      	ldr	r2, [pc, #616]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 80029de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029e4:	f7fe f9be 	bl	8000d64 <HAL_GetTick>
 80029e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029ec:	f7fe f9ba 	bl	8000d64 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e1c0      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029fe:	4b92      	ldr	r3, [pc, #584]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 8081 	beq.w	8002b1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a18:	4b8c      	ldr	r3, [pc, #560]	; (8002c4c <HAL_RCC_OscConfig+0x770>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a8b      	ldr	r2, [pc, #556]	; (8002c4c <HAL_RCC_OscConfig+0x770>)
 8002a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a24:	f7fe f99e 	bl	8000d64 <HAL_GetTick>
 8002a28:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2c:	f7fe f99a 	bl	8000d64 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	; 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e1a0      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a3e:	4b83      	ldr	r3, [pc, #524]	; (8002c4c <HAL_RCC_OscConfig+0x770>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d106      	bne.n	8002a60 <HAL_RCC_OscConfig+0x584>
 8002a52:	4b7d      	ldr	r3, [pc, #500]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	4a7c      	ldr	r2, [pc, #496]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5e:	e02d      	b.n	8002abc <HAL_RCC_OscConfig+0x5e0>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10c      	bne.n	8002a82 <HAL_RCC_OscConfig+0x5a6>
 8002a68:	4b77      	ldr	r3, [pc, #476]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	4a76      	ldr	r2, [pc, #472]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
 8002a72:	6713      	str	r3, [r2, #112]	; 0x70
 8002a74:	4b74      	ldr	r3, [pc, #464]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	4a73      	ldr	r2, [pc, #460]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002a7a:	f023 0304 	bic.w	r3, r3, #4
 8002a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a80:	e01c      	b.n	8002abc <HAL_RCC_OscConfig+0x5e0>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b05      	cmp	r3, #5
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x5c8>
 8002a8a:	4b6f      	ldr	r3, [pc, #444]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	4a6e      	ldr	r2, [pc, #440]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002a90:	f043 0304 	orr.w	r3, r3, #4
 8002a94:	6713      	str	r3, [r2, #112]	; 0x70
 8002a96:	4b6c      	ldr	r3, [pc, #432]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	4a6b      	ldr	r2, [pc, #428]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa2:	e00b      	b.n	8002abc <HAL_RCC_OscConfig+0x5e0>
 8002aa4:	4b68      	ldr	r3, [pc, #416]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	4a67      	ldr	r2, [pc, #412]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab0:	4b65      	ldr	r3, [pc, #404]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	4a64      	ldr	r2, [pc, #400]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002ab6:	f023 0304 	bic.w	r3, r3, #4
 8002aba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d015      	beq.n	8002af0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac4:	f7fe f94e 	bl	8000d64 <HAL_GetTick>
 8002ac8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002acc:	f7fe f94a 	bl	8000d64 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e14e      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ae2:	4b59      	ldr	r3, [pc, #356]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0ee      	beq.n	8002acc <HAL_RCC_OscConfig+0x5f0>
 8002aee:	e014      	b.n	8002b1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af0:	f7fe f938 	bl	8000d64 <HAL_GetTick>
 8002af4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002af6:	e00a      	b.n	8002b0e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af8:	f7fe f934 	bl	8000d64 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e138      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b0e:	4b4e      	ldr	r3, [pc, #312]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1ee      	bne.n	8002af8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 812d 	beq.w	8002d7e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b24:	4b48      	ldr	r3, [pc, #288]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b2c:	2b18      	cmp	r3, #24
 8002b2e:	f000 80bd 	beq.w	8002cac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	f040 809e 	bne.w	8002c78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3c:	4b42      	ldr	r3, [pc, #264]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a41      	ldr	r2, [pc, #260]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe f90c 	bl	8000d64 <HAL_GetTick>
 8002b4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b50:	f7fe f908 	bl	8000d64 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e10e      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b62:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b6e:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b72:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <HAL_RCC_OscConfig+0x774>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b7e:	0112      	lsls	r2, r2, #4
 8002b80:	430a      	orrs	r2, r1
 8002b82:	4931      	ldr	r1, [pc, #196]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	628b      	str	r3, [r1, #40]	; 0x28
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b96:	3b01      	subs	r3, #1
 8002b98:	025b      	lsls	r3, r3, #9
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	041b      	lsls	r3, r3, #16
 8002ba6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	061b      	lsls	r3, r3, #24
 8002bb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002bb8:	4923      	ldr	r1, [pc, #140]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002bbe:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	4a21      	ldr	r2, [pc, #132]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bca:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bce:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bd6:	00d2      	lsls	r2, r2, #3
 8002bd8:	491b      	ldr	r1, [pc, #108]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bde:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	f023 020c 	bic.w	r2, r3, #12
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	4917      	ldr	r1, [pc, #92]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bf0:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	f023 0202 	bic.w	r2, r3, #2
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfc:	4912      	ldr	r1, [pc, #72]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c02:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	4a10      	ldr	r2, [pc, #64]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	4a0d      	ldr	r2, [pc, #52]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c26:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	4a07      	ldr	r2, [pc, #28]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <HAL_RCC_OscConfig+0x76c>)
 8002c38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3e:	f7fe f891 	bl	8000d64 <HAL_GetTick>
 8002c42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c44:	e011      	b.n	8002c6a <HAL_RCC_OscConfig+0x78e>
 8002c46:	bf00      	nop
 8002c48:	58024400 	.word	0x58024400
 8002c4c:	58024800 	.word	0x58024800
 8002c50:	fffffc0c 	.word	0xfffffc0c
 8002c54:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe f884 	bl	8000d64 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e08a      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c6a:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <HAL_RCC_OscConfig+0x8ac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x77c>
 8002c76:	e082      	b.n	8002d7e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c78:	4b43      	ldr	r3, [pc, #268]	; (8002d88 <HAL_RCC_OscConfig+0x8ac>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a42      	ldr	r2, [pc, #264]	; (8002d88 <HAL_RCC_OscConfig+0x8ac>)
 8002c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe f86e 	bl	8000d64 <HAL_GetTick>
 8002c88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fe f86a 	bl	8000d64 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e070      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c9e:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <HAL_RCC_OscConfig+0x8ac>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x7b0>
 8002caa:	e068      	b.n	8002d7e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002cac:	4b36      	ldr	r3, [pc, #216]	; (8002d88 <HAL_RCC_OscConfig+0x8ac>)
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cb2:	4b35      	ldr	r3, [pc, #212]	; (8002d88 <HAL_RCC_OscConfig+0x8ac>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d031      	beq.n	8002d24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f003 0203 	and.w	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d12a      	bne.n	8002d24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d122      	bne.n	8002d24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d11a      	bne.n	8002d24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	0a5b      	lsrs	r3, r3, #9
 8002cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d111      	bne.n	8002d24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	0c1b      	lsrs	r3, r3, #16
 8002d04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d108      	bne.n	8002d24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	0e1b      	lsrs	r3, r3, #24
 8002d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e02b      	b.n	8002d80 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d28:	4b17      	ldr	r3, [pc, #92]	; (8002d88 <HAL_RCC_OscConfig+0x8ac>)
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2c:	08db      	lsrs	r3, r3, #3
 8002d2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d32:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d01f      	beq.n	8002d7e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_RCC_OscConfig+0x8ac>)
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	4a11      	ldr	r2, [pc, #68]	; (8002d88 <HAL_RCC_OscConfig+0x8ac>)
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d4a:	f7fe f80b 	bl	8000d64 <HAL_GetTick>
 8002d4e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d50:	bf00      	nop
 8002d52:	f7fe f807 	bl	8000d64 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d0f9      	beq.n	8002d52 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_RCC_OscConfig+0x8ac>)
 8002d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <HAL_RCC_OscConfig+0x8b0>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d6a:	00d2      	lsls	r2, r2, #3
 8002d6c:	4906      	ldr	r1, [pc, #24]	; (8002d88 <HAL_RCC_OscConfig+0x8ac>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d72:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_RCC_OscConfig+0x8ac>)
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <HAL_RCC_OscConfig+0x8ac>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3730      	adds	r7, #48	; 0x30
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	58024400 	.word	0x58024400
 8002d8c:	ffff0007 	.word	0xffff0007

08002d90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e19c      	b.n	80030de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002da4:	4b8a      	ldr	r3, [pc, #552]	; (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d910      	bls.n	8002dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db2:	4b87      	ldr	r3, [pc, #540]	; (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 020f 	bic.w	r2, r3, #15
 8002dba:	4985      	ldr	r1, [pc, #532]	; (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b83      	ldr	r3, [pc, #524]	; (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e184      	b.n	80030de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d010      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	4b7b      	ldr	r3, [pc, #492]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d908      	bls.n	8002e02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002df0:	4b78      	ldr	r3, [pc, #480]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	4975      	ldr	r1, [pc, #468]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d010      	beq.n	8002e30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	4b70      	ldr	r3, [pc, #448]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d908      	bls.n	8002e30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e1e:	4b6d      	ldr	r3, [pc, #436]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	496a      	ldr	r1, [pc, #424]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d010      	beq.n	8002e5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699a      	ldr	r2, [r3, #24]
 8002e40:	4b64      	ldr	r3, [pc, #400]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d908      	bls.n	8002e5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e4c:	4b61      	ldr	r3, [pc, #388]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	495e      	ldr	r1, [pc, #376]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d010      	beq.n	8002e8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69da      	ldr	r2, [r3, #28]
 8002e6e:	4b59      	ldr	r3, [pc, #356]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d908      	bls.n	8002e8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e7a:	4b56      	ldr	r3, [pc, #344]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	4953      	ldr	r1, [pc, #332]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d010      	beq.n	8002eba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	4b4d      	ldr	r3, [pc, #308]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d908      	bls.n	8002eba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea8:	4b4a      	ldr	r3, [pc, #296]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f023 020f 	bic.w	r2, r3, #15
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4947      	ldr	r1, [pc, #284]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d055      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ec6:	4b43      	ldr	r3, [pc, #268]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	4940      	ldr	r1, [pc, #256]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d107      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ee0:	4b3c      	ldr	r3, [pc, #240]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d121      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0f6      	b.n	80030de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ef8:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d115      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0ea      	b.n	80030de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d107      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f10:	4b30      	ldr	r3, [pc, #192]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d109      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0de      	b.n	80030de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f20:	4b2c      	ldr	r3, [pc, #176]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0d6      	b.n	80030de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f30:	4b28      	ldr	r3, [pc, #160]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f023 0207 	bic.w	r2, r3, #7
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	4925      	ldr	r1, [pc, #148]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f42:	f7fd ff0f 	bl	8000d64 <HAL_GetTick>
 8002f46:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4a:	f7fd ff0b 	bl	8000d64 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e0be      	b.n	80030de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f60:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d1eb      	bne.n	8002f4a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d010      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d208      	bcs.n	8002fa0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f8e:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f023 020f 	bic.w	r2, r3, #15
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	490e      	ldr	r1, [pc, #56]	; (8002fd4 <HAL_RCC_ClockConfig+0x244>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d214      	bcs.n	8002fd8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 020f 	bic.w	r2, r3, #15
 8002fb6:	4906      	ldr	r1, [pc, #24]	; (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <HAL_RCC_ClockConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e086      	b.n	80030de <HAL_RCC_ClockConfig+0x34e>
 8002fd0:	52002000 	.word	0x52002000
 8002fd4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d010      	beq.n	8003006 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	4b3f      	ldr	r3, [pc, #252]	; (80030e8 <HAL_RCC_ClockConfig+0x358>)
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d208      	bcs.n	8003006 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ff4:	4b3c      	ldr	r3, [pc, #240]	; (80030e8 <HAL_RCC_ClockConfig+0x358>)
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	4939      	ldr	r1, [pc, #228]	; (80030e8 <HAL_RCC_ClockConfig+0x358>)
 8003002:	4313      	orrs	r3, r2
 8003004:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d010      	beq.n	8003034 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	4b34      	ldr	r3, [pc, #208]	; (80030e8 <HAL_RCC_ClockConfig+0x358>)
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800301e:	429a      	cmp	r2, r3
 8003020:	d208      	bcs.n	8003034 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003022:	4b31      	ldr	r3, [pc, #196]	; (80030e8 <HAL_RCC_ClockConfig+0x358>)
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	492e      	ldr	r1, [pc, #184]	; (80030e8 <HAL_RCC_ClockConfig+0x358>)
 8003030:	4313      	orrs	r3, r2
 8003032:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b00      	cmp	r3, #0
 800303e:	d010      	beq.n	8003062 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699a      	ldr	r2, [r3, #24]
 8003044:	4b28      	ldr	r3, [pc, #160]	; (80030e8 <HAL_RCC_ClockConfig+0x358>)
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800304c:	429a      	cmp	r2, r3
 800304e:	d208      	bcs.n	8003062 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003050:	4b25      	ldr	r3, [pc, #148]	; (80030e8 <HAL_RCC_ClockConfig+0x358>)
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	4922      	ldr	r1, [pc, #136]	; (80030e8 <HAL_RCC_ClockConfig+0x358>)
 800305e:	4313      	orrs	r3, r2
 8003060:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b00      	cmp	r3, #0
 800306c:	d010      	beq.n	8003090 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69da      	ldr	r2, [r3, #28]
 8003072:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_RCC_ClockConfig+0x358>)
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800307a:	429a      	cmp	r2, r3
 800307c:	d208      	bcs.n	8003090 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800307e:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <HAL_RCC_ClockConfig+0x358>)
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	4917      	ldr	r1, [pc, #92]	; (80030e8 <HAL_RCC_ClockConfig+0x358>)
 800308c:	4313      	orrs	r3, r2
 800308e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003090:	f000 f834 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 8003094:	4602      	mov	r2, r0
 8003096:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <HAL_RCC_ClockConfig+0x358>)
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	4912      	ldr	r1, [pc, #72]	; (80030ec <HAL_RCC_ClockConfig+0x35c>)
 80030a2:	5ccb      	ldrb	r3, [r1, r3]
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
 80030ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030ae:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <HAL_RCC_ClockConfig+0x358>)
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	4a0d      	ldr	r2, [pc, #52]	; (80030ec <HAL_RCC_ClockConfig+0x35c>)
 80030b8:	5cd3      	ldrb	r3, [r2, r3]
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
 80030c4:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <HAL_RCC_ClockConfig+0x360>)
 80030c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030c8:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <HAL_RCC_ClockConfig+0x364>)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80030ce:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <HAL_RCC_ClockConfig+0x368>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd fcac 	bl	8000a30 <HAL_InitTick>
 80030d8:	4603      	mov	r3, r0
 80030da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	58024400 	.word	0x58024400
 80030ec:	0800654c 	.word	0x0800654c
 80030f0:	24000004 	.word	0x24000004
 80030f4:	24000000 	.word	0x24000000
 80030f8:	24000008 	.word	0x24000008

080030fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b089      	sub	sp, #36	; 0x24
 8003100:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003102:	4bb3      	ldr	r3, [pc, #716]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800310a:	2b18      	cmp	r3, #24
 800310c:	f200 8155 	bhi.w	80033ba <HAL_RCC_GetSysClockFreq+0x2be>
 8003110:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	0800317d 	.word	0x0800317d
 800311c:	080033bb 	.word	0x080033bb
 8003120:	080033bb 	.word	0x080033bb
 8003124:	080033bb 	.word	0x080033bb
 8003128:	080033bb 	.word	0x080033bb
 800312c:	080033bb 	.word	0x080033bb
 8003130:	080033bb 	.word	0x080033bb
 8003134:	080033bb 	.word	0x080033bb
 8003138:	080031a3 	.word	0x080031a3
 800313c:	080033bb 	.word	0x080033bb
 8003140:	080033bb 	.word	0x080033bb
 8003144:	080033bb 	.word	0x080033bb
 8003148:	080033bb 	.word	0x080033bb
 800314c:	080033bb 	.word	0x080033bb
 8003150:	080033bb 	.word	0x080033bb
 8003154:	080033bb 	.word	0x080033bb
 8003158:	080031a9 	.word	0x080031a9
 800315c:	080033bb 	.word	0x080033bb
 8003160:	080033bb 	.word	0x080033bb
 8003164:	080033bb 	.word	0x080033bb
 8003168:	080033bb 	.word	0x080033bb
 800316c:	080033bb 	.word	0x080033bb
 8003170:	080033bb 	.word	0x080033bb
 8003174:	080033bb 	.word	0x080033bb
 8003178:	080031af 	.word	0x080031af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800317c:	4b94      	ldr	r3, [pc, #592]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003188:	4b91      	ldr	r3, [pc, #580]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	08db      	lsrs	r3, r3, #3
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	4a90      	ldr	r2, [pc, #576]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
 8003198:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800319a:	e111      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800319c:	4b8d      	ldr	r3, [pc, #564]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800319e:	61bb      	str	r3, [r7, #24]
      break;
 80031a0:	e10e      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80031a2:	4b8d      	ldr	r3, [pc, #564]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031a4:	61bb      	str	r3, [r7, #24]
      break;
 80031a6:	e10b      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80031a8:	4b8c      	ldr	r3, [pc, #560]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031aa:	61bb      	str	r3, [r7, #24]
      break;
 80031ac:	e108      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031ae:	4b88      	ldr	r3, [pc, #544]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80031b8:	4b85      	ldr	r3, [pc, #532]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031c4:	4b82      	ldr	r3, [pc, #520]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80031ce:	4b80      	ldr	r3, [pc, #512]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d2:	08db      	lsrs	r3, r3, #3
 80031d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	ee07 3a90 	vmov	s15, r3
 80031e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80e1 	beq.w	80033b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	f000 8083 	beq.w	8003300 <HAL_RCC_GetSysClockFreq+0x204>
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	f200 80a1 	bhi.w	8003344 <HAL_RCC_GetSysClockFreq+0x248>
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_RCC_GetSysClockFreq+0x114>
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d056      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800320e:	e099      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003210:	4b6f      	ldr	r3, [pc, #444]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d02d      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800321c:	4b6c      	ldr	r3, [pc, #432]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	08db      	lsrs	r3, r3, #3
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	4a6b      	ldr	r2, [pc, #428]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
 800322c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	ee07 3a90 	vmov	s15, r3
 8003234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	ee07 3a90 	vmov	s15, r3
 800323e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003246:	4b62      	ldr	r3, [pc, #392]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800324e:	ee07 3a90 	vmov	s15, r3
 8003252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003256:	ed97 6a02 	vldr	s12, [r7, #8]
 800325a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80033e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800325e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800326a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800326e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003272:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003276:	e087      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	ee07 3a90 	vmov	s15, r3
 800327e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003282:	eddf 6a58 	vldr	s13, [pc, #352]	; 80033e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800328a:	4b51      	ldr	r3, [pc, #324]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800329a:	ed97 6a02 	vldr	s12, [r7, #8]
 800329e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80033e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032ba:	e065      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80033e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ce:	4b40      	ldr	r3, [pc, #256]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032de:	ed97 6a02 	vldr	s12, [r7, #8]
 80032e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80033e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032fe:	e043      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80033ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800330e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003312:	4b2f      	ldr	r3, [pc, #188]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003322:	ed97 6a02 	vldr	s12, [r7, #8]
 8003326:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80033e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800332a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800332e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800333a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003342:	e021      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80033e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003356:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003366:	ed97 6a02 	vldr	s12, [r7, #8]
 800336a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80033e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800336e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800337a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800337e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003382:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003386:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003388:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	0a5b      	lsrs	r3, r3, #9
 800338e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003392:	3301      	adds	r3, #1
 8003394:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	ee07 3a90 	vmov	s15, r3
 800339c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80033a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ac:	ee17 3a90 	vmov	r3, s15
 80033b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80033b2:	e005      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	61bb      	str	r3, [r7, #24]
      break;
 80033b8:	e002      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033bc:	61bb      	str	r3, [r7, #24]
      break;
 80033be:	bf00      	nop
  }

  return sysclockfreq;
 80033c0:	69bb      	ldr	r3, [r7, #24]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3724      	adds	r7, #36	; 0x24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	58024400 	.word	0x58024400
 80033d4:	03d09000 	.word	0x03d09000
 80033d8:	003d0900 	.word	0x003d0900
 80033dc:	017d7840 	.word	0x017d7840
 80033e0:	46000000 	.word	0x46000000
 80033e4:	4c742400 	.word	0x4c742400
 80033e8:	4a742400 	.word	0x4a742400
 80033ec:	4bbebc20 	.word	0x4bbebc20

080033f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80033f6:	f7ff fe81 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 80033fa:	4602      	mov	r2, r0
 80033fc:	4b10      	ldr	r3, [pc, #64]	; (8003440 <HAL_RCC_GetHCLKFreq+0x50>)
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	0a1b      	lsrs	r3, r3, #8
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	490f      	ldr	r1, [pc, #60]	; (8003444 <HAL_RCC_GetHCLKFreq+0x54>)
 8003408:	5ccb      	ldrb	r3, [r1, r3]
 800340a:	f003 031f 	and.w	r3, r3, #31
 800340e:	fa22 f303 	lsr.w	r3, r2, r3
 8003412:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003414:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <HAL_RCC_GetHCLKFreq+0x50>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	4a09      	ldr	r2, [pc, #36]	; (8003444 <HAL_RCC_GetHCLKFreq+0x54>)
 800341e:	5cd3      	ldrb	r3, [r2, r3]
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	fa22 f303 	lsr.w	r3, r2, r3
 800342a:	4a07      	ldr	r2, [pc, #28]	; (8003448 <HAL_RCC_GetHCLKFreq+0x58>)
 800342c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800342e:	4a07      	ldr	r2, [pc, #28]	; (800344c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003434:	4b04      	ldr	r3, [pc, #16]	; (8003448 <HAL_RCC_GetHCLKFreq+0x58>)
 8003436:	681b      	ldr	r3, [r3, #0]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	58024400 	.word	0x58024400
 8003444:	0800654c 	.word	0x0800654c
 8003448:	24000004 	.word	0x24000004
 800344c:	24000000 	.word	0x24000000

08003450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003454:	f7ff ffcc 	bl	80033f0 <HAL_RCC_GetHCLKFreq>
 8003458:	4602      	mov	r2, r0
 800345a:	4b06      	ldr	r3, [pc, #24]	; (8003474 <HAL_RCC_GetPCLK1Freq+0x24>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	4904      	ldr	r1, [pc, #16]	; (8003478 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003466:	5ccb      	ldrb	r3, [r1, r3]
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	58024400 	.word	0x58024400
 8003478:	0800654c 	.word	0x0800654c

0800347c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003480:	f7ff ffb6 	bl	80033f0 <HAL_RCC_GetHCLKFreq>
 8003484:	4602      	mov	r2, r0
 8003486:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	0a1b      	lsrs	r3, r3, #8
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	4904      	ldr	r1, [pc, #16]	; (80034a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003492:	5ccb      	ldrb	r3, [r1, r3]
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	58024400 	.word	0x58024400
 80034a4:	0800654c 	.word	0x0800654c

080034a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	223f      	movs	r2, #63	; 0x3f
 80034b6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034b8:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <HAL_RCC_GetClockConfig+0x7c>)
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f003 0207 	and.w	r2, r3, #7
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80034c4:	4b17      	ldr	r3, [pc, #92]	; (8003524 <HAL_RCC_GetClockConfig+0x7c>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80034d0:	4b14      	ldr	r3, [pc, #80]	; (8003524 <HAL_RCC_GetClockConfig+0x7c>)
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f003 020f 	and.w	r2, r3, #15
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_RCC_GetClockConfig+0x7c>)
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80034e8:	4b0e      	ldr	r3, [pc, #56]	; (8003524 <HAL_RCC_GetClockConfig+0x7c>)
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_RCC_GetClockConfig+0x7c>)
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003500:	4b08      	ldr	r3, [pc, #32]	; (8003524 <HAL_RCC_GetClockConfig+0x7c>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_RCC_GetClockConfig+0x80>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 020f 	and.w	r2, r3, #15
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	601a      	str	r2, [r3, #0]
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	58024400 	.word	0x58024400
 8003528:	52002000 	.word	0x52002000

0800352c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800352c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003530:	b0ca      	sub	sp, #296	; 0x128
 8003532:	af00      	add	r7, sp, #0
 8003534:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003538:	2300      	movs	r3, #0
 800353a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800353e:	2300      	movs	r3, #0
 8003540:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003550:	2500      	movs	r5, #0
 8003552:	ea54 0305 	orrs.w	r3, r4, r5
 8003556:	d049      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800355c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800355e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003562:	d02f      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003564:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003568:	d828      	bhi.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800356a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800356e:	d01a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003570:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003574:	d822      	bhi.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800357a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800357e:	d007      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003580:	e01c      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003582:	4bb8      	ldr	r3, [pc, #736]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	4ab7      	ldr	r2, [pc, #732]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800358c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800358e:	e01a      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003594:	3308      	adds	r3, #8
 8003596:	2102      	movs	r1, #2
 8003598:	4618      	mov	r0, r3
 800359a:	f002 fb61 	bl	8005c60 <RCCEx_PLL2_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035a4:	e00f      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035aa:	3328      	adds	r3, #40	; 0x28
 80035ac:	2102      	movs	r1, #2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f002 fc08 	bl	8005dc4 <RCCEx_PLL3_Config>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035ba:	e004      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035c2:	e000      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80035c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10a      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80035ce:	4ba5      	ldr	r3, [pc, #660]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80035d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035dc:	4aa1      	ldr	r2, [pc, #644]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035de:	430b      	orrs	r3, r1
 80035e0:	6513      	str	r3, [r2, #80]	; 0x50
 80035e2:	e003      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80035f8:	f04f 0900 	mov.w	r9, #0
 80035fc:	ea58 0309 	orrs.w	r3, r8, r9
 8003600:	d047      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003608:	2b04      	cmp	r3, #4
 800360a:	d82a      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800360c:	a201      	add	r2, pc, #4	; (adr r2, 8003614 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800360e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003612:	bf00      	nop
 8003614:	08003629 	.word	0x08003629
 8003618:	08003637 	.word	0x08003637
 800361c:	0800364d 	.word	0x0800364d
 8003620:	0800366b 	.word	0x0800366b
 8003624:	0800366b 	.word	0x0800366b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003628:	4b8e      	ldr	r3, [pc, #568]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	4a8d      	ldr	r2, [pc, #564]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800362e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003632:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003634:	e01a      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800363a:	3308      	adds	r3, #8
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f002 fb0e 	bl	8005c60 <RCCEx_PLL2_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800364a:	e00f      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800364c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003650:	3328      	adds	r3, #40	; 0x28
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f002 fbb5 	bl	8005dc4 <RCCEx_PLL3_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003660:	e004      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003668:	e000      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800366a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800366c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10a      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003674:	4b7b      	ldr	r3, [pc, #492]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003678:	f023 0107 	bic.w	r1, r3, #7
 800367c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003682:	4a78      	ldr	r2, [pc, #480]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003684:	430b      	orrs	r3, r1
 8003686:	6513      	str	r3, [r2, #80]	; 0x50
 8003688:	e003      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800368e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800369e:	f04f 0b00 	mov.w	fp, #0
 80036a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80036a6:	d04c      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80036a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b2:	d030      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80036b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b8:	d829      	bhi.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036ba:	2bc0      	cmp	r3, #192	; 0xc0
 80036bc:	d02d      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80036be:	2bc0      	cmp	r3, #192	; 0xc0
 80036c0:	d825      	bhi.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036c2:	2b80      	cmp	r3, #128	; 0x80
 80036c4:	d018      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80036c6:	2b80      	cmp	r3, #128	; 0x80
 80036c8:	d821      	bhi.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	d007      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80036d2:	e01c      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d4:	4b63      	ldr	r3, [pc, #396]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	4a62      	ldr	r2, [pc, #392]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036e0:	e01c      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036e6:	3308      	adds	r3, #8
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f002 fab8 	bl	8005c60 <RCCEx_PLL2_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036f6:	e011      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036fc:	3328      	adds	r3, #40	; 0x28
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f002 fb5f 	bl	8005dc4 <RCCEx_PLL3_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800370c:	e006      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003714:	e002      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800371a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800371c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10a      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003724:	4b4f      	ldr	r3, [pc, #316]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003728:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800372c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003732:	4a4c      	ldr	r2, [pc, #304]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003734:	430b      	orrs	r3, r1
 8003736:	6513      	str	r3, [r2, #80]	; 0x50
 8003738:	e003      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800373e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800374e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003752:	2300      	movs	r3, #0
 8003754:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003758:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800375c:	460b      	mov	r3, r1
 800375e:	4313      	orrs	r3, r2
 8003760:	d053      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003766:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800376a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800376e:	d035      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003770:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003774:	d82e      	bhi.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003776:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800377a:	d031      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800377c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003780:	d828      	bhi.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003786:	d01a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800378c:	d822      	bhi.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003792:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003796:	d007      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003798:	e01c      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800379a:	4b32      	ldr	r3, [pc, #200]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800379c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379e:	4a31      	ldr	r2, [pc, #196]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037a6:	e01c      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ac:	3308      	adds	r3, #8
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f002 fa55 	bl	8005c60 <RCCEx_PLL2_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037bc:	e011      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c2:	3328      	adds	r3, #40	; 0x28
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f002 fafc 	bl	8005dc4 <RCCEx_PLL3_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037d2:	e006      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037da:	e002      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037dc:	bf00      	nop
 80037de:	e000      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10b      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037ea:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ee:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037fa:	4a1a      	ldr	r2, [pc, #104]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003800:	e003      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003806:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800380a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003812:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003816:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800381a:	2300      	movs	r3, #0
 800381c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003820:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003824:	460b      	mov	r3, r1
 8003826:	4313      	orrs	r3, r2
 8003828:	d056      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800382a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800382e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003832:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003836:	d038      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003838:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800383c:	d831      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800383e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003842:	d034      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003844:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003848:	d82b      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800384a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800384e:	d01d      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003854:	d825      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003856:	2b00      	cmp	r3, #0
 8003858:	d006      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800385a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800385e:	d00a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003860:	e01f      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003862:	bf00      	nop
 8003864:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003868:	4ba2      	ldr	r3, [pc, #648]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	4aa1      	ldr	r2, [pc, #644]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800386e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003874:	e01c      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800387a:	3308      	adds	r3, #8
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f002 f9ee 	bl	8005c60 <RCCEx_PLL2_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800388a:	e011      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003890:	3328      	adds	r3, #40	; 0x28
 8003892:	2100      	movs	r1, #0
 8003894:	4618      	mov	r0, r3
 8003896:	f002 fa95 	bl	8005dc4 <RCCEx_PLL3_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038a0:	e006      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038a8:	e002      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80038aa:	bf00      	nop
 80038ac:	e000      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80038ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10b      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038b8:	4b8e      	ldr	r3, [pc, #568]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038bc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038c8:	4a8a      	ldr	r2, [pc, #552]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ca:	430b      	orrs	r3, r1
 80038cc:	6593      	str	r3, [r2, #88]	; 0x58
 80038ce:	e003      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80038e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80038ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80038f2:	460b      	mov	r3, r1
 80038f4:	4313      	orrs	r3, r2
 80038f6:	d03a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80038f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fe:	2b30      	cmp	r3, #48	; 0x30
 8003900:	d01f      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003902:	2b30      	cmp	r3, #48	; 0x30
 8003904:	d819      	bhi.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003906:	2b20      	cmp	r3, #32
 8003908:	d00c      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800390a:	2b20      	cmp	r3, #32
 800390c:	d815      	bhi.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800390e:	2b00      	cmp	r3, #0
 8003910:	d019      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003912:	2b10      	cmp	r3, #16
 8003914:	d111      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003916:	4b77      	ldr	r3, [pc, #476]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	4a76      	ldr	r2, [pc, #472]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800391c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003920:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003922:	e011      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003928:	3308      	adds	r3, #8
 800392a:	2102      	movs	r1, #2
 800392c:	4618      	mov	r0, r3
 800392e:	f002 f997 	bl	8005c60 <RCCEx_PLL2_Config>
 8003932:	4603      	mov	r3, r0
 8003934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003938:	e006      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003940:	e002      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003942:	bf00      	nop
 8003944:	e000      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003948:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003950:	4b68      	ldr	r3, [pc, #416]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003954:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800395c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395e:	4a65      	ldr	r2, [pc, #404]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003960:	430b      	orrs	r3, r1
 8003962:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003964:	e003      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800396a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800396e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003976:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800397a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800397e:	2300      	movs	r3, #0
 8003980:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003984:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003988:	460b      	mov	r3, r1
 800398a:	4313      	orrs	r3, r2
 800398c:	d051      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800398e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003998:	d035      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800399a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800399e:	d82e      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039a4:	d031      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80039a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039aa:	d828      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b0:	d01a      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80039b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b6:	d822      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80039bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c0:	d007      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80039c2:	e01c      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c4:	4b4b      	ldr	r3, [pc, #300]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	4a4a      	ldr	r2, [pc, #296]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039d0:	e01c      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d6:	3308      	adds	r3, #8
 80039d8:	2100      	movs	r1, #0
 80039da:	4618      	mov	r0, r3
 80039dc:	f002 f940 	bl	8005c60 <RCCEx_PLL2_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039e6:	e011      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ec:	3328      	adds	r3, #40	; 0x28
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f002 f9e7 	bl	8005dc4 <RCCEx_PLL3_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039fc:	e006      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a04:	e002      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a06:	bf00      	nop
 8003a08:	e000      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a14:	4b37      	ldr	r3, [pc, #220]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a18:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a22:	4a34      	ldr	r2, [pc, #208]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a24:	430b      	orrs	r3, r1
 8003a26:	6513      	str	r3, [r2, #80]	; 0x50
 8003a28:	e003      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003a3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a42:	2300      	movs	r3, #0
 8003a44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003a48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	d056      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a5c:	d033      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a62:	d82c      	bhi.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a68:	d02f      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a6e:	d826      	bhi.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a74:	d02b      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a7a:	d820      	bhi.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a80:	d012      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a86:	d81a      	bhi.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d022      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a90:	d115      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a96:	3308      	adds	r3, #8
 8003a98:	2101      	movs	r1, #1
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f002 f8e0 	bl	8005c60 <RCCEx_PLL2_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003aa6:	e015      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aac:	3328      	adds	r3, #40	; 0x28
 8003aae:	2101      	movs	r1, #1
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f002 f987 	bl	8005dc4 <RCCEx_PLL3_Config>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003abc:	e00a      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ac4:	e006      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ac6:	bf00      	nop
 8003ac8:	e004      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003aca:	bf00      	nop
 8003acc:	e002      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ace:	bf00      	nop
 8003ad0:	e000      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10d      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aea:	4a02      	ldr	r2, [pc, #8]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aec:	430b      	orrs	r3, r1
 8003aee:	6513      	str	r3, [r2, #80]	; 0x50
 8003af0:	e006      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003af2:	bf00      	nop
 8003af4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003afc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b10:	2300      	movs	r3, #0
 8003b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b16:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	d055      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b2c:	d033      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b32:	d82c      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b38:	d02f      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3e:	d826      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b44:	d02b      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b4a:	d820      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b50:	d012      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b56:	d81a      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d022      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003b5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b60:	d115      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b66:	3308      	adds	r3, #8
 8003b68:	2101      	movs	r1, #1
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f002 f878 	bl	8005c60 <RCCEx_PLL2_Config>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b76:	e015      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b7c:	3328      	adds	r3, #40	; 0x28
 8003b7e:	2101      	movs	r1, #1
 8003b80:	4618      	mov	r0, r3
 8003b82:	f002 f91f 	bl	8005dc4 <RCCEx_PLL3_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b94:	e006      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b96:	bf00      	nop
 8003b98:	e004      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b9a:	bf00      	nop
 8003b9c:	e002      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b9e:	bf00      	nop
 8003ba0:	e000      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10b      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bac:	4ba3      	ldr	r3, [pc, #652]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bbc:	4a9f      	ldr	r2, [pc, #636]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8003bc2:	e003      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003bd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003be2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003be6:	460b      	mov	r3, r1
 8003be8:	4313      	orrs	r3, r2
 8003bea:	d037      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bf6:	d00e      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bfc:	d816      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d018      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003c02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c06:	d111      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c08:	4b8c      	ldr	r3, [pc, #560]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	4a8b      	ldr	r2, [pc, #556]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c14:	e00f      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c1a:	3308      	adds	r3, #8
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f002 f81e 	bl	8005c60 <RCCEx_PLL2_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c2a:	e004      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c32:	e000      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c3e:	4b7f      	ldr	r3, [pc, #508]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c42:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	4a7b      	ldr	r2, [pc, #492]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	6513      	str	r3, [r2, #80]	; 0x50
 8003c52:	e003      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003c72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	d039      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d81c      	bhi.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003c86:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8c:	08003cc9 	.word	0x08003cc9
 8003c90:	08003c9d 	.word	0x08003c9d
 8003c94:	08003cab 	.word	0x08003cab
 8003c98:	08003cc9 	.word	0x08003cc9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c9c:	4b67      	ldr	r3, [pc, #412]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	4a66      	ldr	r2, [pc, #408]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ca8:	e00f      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cae:	3308      	adds	r3, #8
 8003cb0:	2102      	movs	r1, #2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f001 ffd4 	bl	8005c60 <RCCEx_PLL2_Config>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cbe:	e004      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cc6:	e000      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10a      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003cd2:	4b5a      	ldr	r3, [pc, #360]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd6:	f023 0103 	bic.w	r1, r3, #3
 8003cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce0:	4a56      	ldr	r2, [pc, #344]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ce2:	430b      	orrs	r3, r1
 8003ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ce6:	e003      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d00:	2300      	movs	r3, #0
 8003d02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f000 809f 	beq.w	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d12:	4b4b      	ldr	r3, [pc, #300]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a4a      	ldr	r2, [pc, #296]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d1e:	f7fd f821 	bl	8000d64 <HAL_GetTick>
 8003d22:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d26:	e00b      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d28:	f7fd f81c 	bl	8000d64 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b64      	cmp	r3, #100	; 0x64
 8003d36:	d903      	bls.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d3e:	e005      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d40:	4b3f      	ldr	r3, [pc, #252]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0ed      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d179      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d54:	4b39      	ldr	r3, [pc, #228]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d60:	4053      	eors	r3, r2
 8003d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d015      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d6a:	4b34      	ldr	r3, [pc, #208]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d76:	4b31      	ldr	r3, [pc, #196]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	4a30      	ldr	r2, [pc, #192]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d80:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d82:	4b2e      	ldr	r3, [pc, #184]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	4a2d      	ldr	r2, [pc, #180]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d8e:	4a2b      	ldr	r2, [pc, #172]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d94:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003da2:	d118      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fc ffde 	bl	8000d64 <HAL_GetTick>
 8003da8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dac:	e00d      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dae:	f7fc ffd9 	bl	8000d64 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003db8:	1ad2      	subs	r2, r2, r3
 8003dba:	f241 3388 	movw	r3, #5000	; 0x1388
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d903      	bls.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003dc8:	e005      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dca:	4b1c      	ldr	r3, [pc, #112]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0eb      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d129      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dee:	d10e      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003df0:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e00:	091a      	lsrs	r2, r3, #4
 8003e02:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	4a0d      	ldr	r2, [pc, #52]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	6113      	str	r3, [r2, #16]
 8003e0c:	e005      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e14:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e18:	6113      	str	r3, [r2, #16]
 8003e1a:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e1c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e2a:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e30:	e00e      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003e3a:	e009      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003e3c:	58024400 	.word	0x58024400
 8003e40:	58024800 	.word	0x58024800
 8003e44:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e58:	f002 0301 	and.w	r3, r2, #1
 8003e5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e66:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f000 8089 	beq.w	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e78:	2b28      	cmp	r3, #40	; 0x28
 8003e7a:	d86b      	bhi.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e7c:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e82:	bf00      	nop
 8003e84:	08003f5d 	.word	0x08003f5d
 8003e88:	08003f55 	.word	0x08003f55
 8003e8c:	08003f55 	.word	0x08003f55
 8003e90:	08003f55 	.word	0x08003f55
 8003e94:	08003f55 	.word	0x08003f55
 8003e98:	08003f55 	.word	0x08003f55
 8003e9c:	08003f55 	.word	0x08003f55
 8003ea0:	08003f55 	.word	0x08003f55
 8003ea4:	08003f29 	.word	0x08003f29
 8003ea8:	08003f55 	.word	0x08003f55
 8003eac:	08003f55 	.word	0x08003f55
 8003eb0:	08003f55 	.word	0x08003f55
 8003eb4:	08003f55 	.word	0x08003f55
 8003eb8:	08003f55 	.word	0x08003f55
 8003ebc:	08003f55 	.word	0x08003f55
 8003ec0:	08003f55 	.word	0x08003f55
 8003ec4:	08003f3f 	.word	0x08003f3f
 8003ec8:	08003f55 	.word	0x08003f55
 8003ecc:	08003f55 	.word	0x08003f55
 8003ed0:	08003f55 	.word	0x08003f55
 8003ed4:	08003f55 	.word	0x08003f55
 8003ed8:	08003f55 	.word	0x08003f55
 8003edc:	08003f55 	.word	0x08003f55
 8003ee0:	08003f55 	.word	0x08003f55
 8003ee4:	08003f5d 	.word	0x08003f5d
 8003ee8:	08003f55 	.word	0x08003f55
 8003eec:	08003f55 	.word	0x08003f55
 8003ef0:	08003f55 	.word	0x08003f55
 8003ef4:	08003f55 	.word	0x08003f55
 8003ef8:	08003f55 	.word	0x08003f55
 8003efc:	08003f55 	.word	0x08003f55
 8003f00:	08003f55 	.word	0x08003f55
 8003f04:	08003f5d 	.word	0x08003f5d
 8003f08:	08003f55 	.word	0x08003f55
 8003f0c:	08003f55 	.word	0x08003f55
 8003f10:	08003f55 	.word	0x08003f55
 8003f14:	08003f55 	.word	0x08003f55
 8003f18:	08003f55 	.word	0x08003f55
 8003f1c:	08003f55 	.word	0x08003f55
 8003f20:	08003f55 	.word	0x08003f55
 8003f24:	08003f5d 	.word	0x08003f5d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	2101      	movs	r1, #1
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 fe95 	bl	8005c60 <RCCEx_PLL2_Config>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f3c:	e00f      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f42:	3328      	adds	r3, #40	; 0x28
 8003f44:	2101      	movs	r1, #1
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 ff3c 	bl	8005dc4 <RCCEx_PLL3_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f52:	e004      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f5a:	e000      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10a      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f66:	4bbf      	ldr	r3, [pc, #764]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f74:	4abb      	ldr	r2, [pc, #748]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f76:	430b      	orrs	r3, r1
 8003f78:	6553      	str	r3, [r2, #84]	; 0x54
 8003f7a:	e003      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	f002 0302 	and.w	r3, r2, #2
 8003f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f94:	2300      	movs	r3, #0
 8003f96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003f9a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	d041      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003faa:	2b05      	cmp	r3, #5
 8003fac:	d824      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003fae:	a201      	add	r2, pc, #4	; (adr r2, 8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb4:	08004001 	.word	0x08004001
 8003fb8:	08003fcd 	.word	0x08003fcd
 8003fbc:	08003fe3 	.word	0x08003fe3
 8003fc0:	08004001 	.word	0x08004001
 8003fc4:	08004001 	.word	0x08004001
 8003fc8:	08004001 	.word	0x08004001
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f001 fe43 	bl	8005c60 <RCCEx_PLL2_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fe0:	e00f      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe6:	3328      	adds	r3, #40	; 0x28
 8003fe8:	2101      	movs	r1, #1
 8003fea:	4618      	mov	r0, r3
 8003fec:	f001 feea 	bl	8005dc4 <RCCEx_PLL3_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ff6:	e004      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ffe:	e000      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10a      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800400a:	4b96      	ldr	r3, [pc, #600]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800400c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400e:	f023 0107 	bic.w	r1, r3, #7
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004018:	4a92      	ldr	r2, [pc, #584]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800401a:	430b      	orrs	r3, r1
 800401c:	6553      	str	r3, [r2, #84]	; 0x54
 800401e:	e003      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004024:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004030:	f002 0304 	and.w	r3, r2, #4
 8004034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004038:	2300      	movs	r3, #0
 800403a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800403e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004042:	460b      	mov	r3, r1
 8004044:	4313      	orrs	r3, r2
 8004046:	d044      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800404c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004050:	2b05      	cmp	r3, #5
 8004052:	d825      	bhi.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004054:	a201      	add	r2, pc, #4	; (adr r2, 800405c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405a:	bf00      	nop
 800405c:	080040a9 	.word	0x080040a9
 8004060:	08004075 	.word	0x08004075
 8004064:	0800408b 	.word	0x0800408b
 8004068:	080040a9 	.word	0x080040a9
 800406c:	080040a9 	.word	0x080040a9
 8004070:	080040a9 	.word	0x080040a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004078:	3308      	adds	r3, #8
 800407a:	2101      	movs	r1, #1
 800407c:	4618      	mov	r0, r3
 800407e:	f001 fdef 	bl	8005c60 <RCCEx_PLL2_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004088:	e00f      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800408a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800408e:	3328      	adds	r3, #40	; 0x28
 8004090:	2101      	movs	r1, #1
 8004092:	4618      	mov	r0, r3
 8004094:	f001 fe96 	bl	8005dc4 <RCCEx_PLL3_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800409e:	e004      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040a6:	e000      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80040a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10b      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040b2:	4b6c      	ldr	r3, [pc, #432]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b6:	f023 0107 	bic.w	r1, r3, #7
 80040ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c2:	4a68      	ldr	r2, [pc, #416]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040c4:	430b      	orrs	r3, r1
 80040c6:	6593      	str	r3, [r2, #88]	; 0x58
 80040c8:	e003      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040da:	f002 0320 	and.w	r3, r2, #32
 80040de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040e2:	2300      	movs	r3, #0
 80040e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040ec:	460b      	mov	r3, r1
 80040ee:	4313      	orrs	r3, r2
 80040f0:	d055      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040fe:	d033      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004104:	d82c      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410a:	d02f      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800410c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004110:	d826      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004112:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004116:	d02b      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004118:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800411c:	d820      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800411e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004122:	d012      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004128:	d81a      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d022      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800412e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004132:	d115      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004138:	3308      	adds	r3, #8
 800413a:	2100      	movs	r1, #0
 800413c:	4618      	mov	r0, r3
 800413e:	f001 fd8f 	bl	8005c60 <RCCEx_PLL2_Config>
 8004142:	4603      	mov	r3, r0
 8004144:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004148:	e015      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800414a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800414e:	3328      	adds	r3, #40	; 0x28
 8004150:	2102      	movs	r1, #2
 8004152:	4618      	mov	r0, r3
 8004154:	f001 fe36 	bl	8005dc4 <RCCEx_PLL3_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800415e:	e00a      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004166:	e006      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004168:	bf00      	nop
 800416a:	e004      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800416c:	bf00      	nop
 800416e:	e002      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004170:	bf00      	nop
 8004172:	e000      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10b      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800417e:	4b39      	ldr	r3, [pc, #228]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418e:	4a35      	ldr	r2, [pc, #212]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004190:	430b      	orrs	r3, r1
 8004192:	6553      	str	r3, [r2, #84]	; 0x54
 8004194:	e003      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004196:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800419a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800419e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80041aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041ae:	2300      	movs	r3, #0
 80041b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80041b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80041b8:	460b      	mov	r3, r1
 80041ba:	4313      	orrs	r3, r2
 80041bc:	d058      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041ca:	d033      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80041cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041d0:	d82c      	bhi.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d6:	d02f      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80041d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041dc:	d826      	bhi.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041e2:	d02b      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80041e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041e8:	d820      	bhi.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ee:	d012      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80041f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f4:	d81a      	bhi.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d022      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80041fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fe:	d115      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004204:	3308      	adds	r3, #8
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f001 fd29 	bl	8005c60 <RCCEx_PLL2_Config>
 800420e:	4603      	mov	r3, r0
 8004210:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004214:	e015      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421a:	3328      	adds	r3, #40	; 0x28
 800421c:	2102      	movs	r1, #2
 800421e:	4618      	mov	r0, r3
 8004220:	f001 fdd0 	bl	8005dc4 <RCCEx_PLL3_Config>
 8004224:	4603      	mov	r3, r0
 8004226:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800422a:	e00a      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004232:	e006      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004234:	bf00      	nop
 8004236:	e004      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004238:	bf00      	nop
 800423a:	e002      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800423c:	bf00      	nop
 800423e:	e000      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004242:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10e      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004256:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800425a:	4a02      	ldr	r2, [pc, #8]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800425c:	430b      	orrs	r3, r1
 800425e:	6593      	str	r3, [r2, #88]	; 0x58
 8004260:	e006      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004262:	bf00      	nop
 8004264:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004268:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800426c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004278:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800427c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004280:	2300      	movs	r3, #0
 8004282:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004286:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800428a:	460b      	mov	r3, r1
 800428c:	4313      	orrs	r3, r2
 800428e:	d055      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004294:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004298:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800429c:	d033      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800429e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042a2:	d82c      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a8:	d02f      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80042aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ae:	d826      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042b4:	d02b      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80042b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042ba:	d820      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042c0:	d012      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80042c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042c6:	d81a      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d022      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80042cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d0:	d115      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d6:	3308      	adds	r3, #8
 80042d8:	2100      	movs	r1, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f001 fcc0 	bl	8005c60 <RCCEx_PLL2_Config>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042e6:	e015      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ec:	3328      	adds	r3, #40	; 0x28
 80042ee:	2102      	movs	r1, #2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f001 fd67 	bl	8005dc4 <RCCEx_PLL3_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042fc:	e00a      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004304:	e006      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004306:	bf00      	nop
 8004308:	e004      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800430a:	bf00      	nop
 800430c:	e002      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800430e:	bf00      	nop
 8004310:	e000      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004312:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004314:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10b      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800431c:	4ba1      	ldr	r3, [pc, #644]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004328:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800432c:	4a9d      	ldr	r2, [pc, #628]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800432e:	430b      	orrs	r3, r1
 8004330:	6593      	str	r3, [r2, #88]	; 0x58
 8004332:	e003      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004334:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004338:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004344:	f002 0308 	and.w	r3, r2, #8
 8004348:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800434c:	2300      	movs	r3, #0
 800434e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004352:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004356:	460b      	mov	r3, r1
 8004358:	4313      	orrs	r3, r2
 800435a:	d01e      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004368:	d10c      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800436a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800436e:	3328      	adds	r3, #40	; 0x28
 8004370:	2102      	movs	r1, #2
 8004372:	4618      	mov	r0, r3
 8004374:	f001 fd26 	bl	8005dc4 <RCCEx_PLL3_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004384:	4b87      	ldr	r3, [pc, #540]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004388:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800438c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004394:	4a83      	ldr	r2, [pc, #524]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004396:	430b      	orrs	r3, r1
 8004398:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	f002 0310 	and.w	r3, r2, #16
 80043a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043aa:	2300      	movs	r3, #0
 80043ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80043b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80043b4:	460b      	mov	r3, r1
 80043b6:	4313      	orrs	r3, r2
 80043b8:	d01e      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80043ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c6:	d10c      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043cc:	3328      	adds	r3, #40	; 0x28
 80043ce:	2102      	movs	r1, #2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f001 fcf7 	bl	8005dc4 <RCCEx_PLL3_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043e2:	4b70      	ldr	r3, [pc, #448]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043f2:	4a6c      	ldr	r2, [pc, #432]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043f4:	430b      	orrs	r3, r1
 80043f6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004404:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004408:	2300      	movs	r3, #0
 800440a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800440e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004412:	460b      	mov	r3, r1
 8004414:	4313      	orrs	r3, r2
 8004416:	d03e      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800441c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004424:	d022      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800442a:	d81b      	bhi.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004434:	d00b      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004436:	e015      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800443c:	3308      	adds	r3, #8
 800443e:	2100      	movs	r1, #0
 8004440:	4618      	mov	r0, r3
 8004442:	f001 fc0d 	bl	8005c60 <RCCEx_PLL2_Config>
 8004446:	4603      	mov	r3, r0
 8004448:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800444c:	e00f      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800444e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004452:	3328      	adds	r3, #40	; 0x28
 8004454:	2102      	movs	r1, #2
 8004456:	4618      	mov	r0, r3
 8004458:	f001 fcb4 	bl	8005dc4 <RCCEx_PLL3_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004462:	e004      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800446a:	e000      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800446c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800446e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10b      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004476:	4b4b      	ldr	r3, [pc, #300]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800447e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004482:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004486:	4a47      	ldr	r2, [pc, #284]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004488:	430b      	orrs	r3, r1
 800448a:	6593      	str	r3, [r2, #88]	; 0x58
 800448c:	e003      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004492:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80044a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80044a4:	2300      	movs	r3, #0
 80044a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80044ac:	460b      	mov	r3, r1
 80044ae:	4313      	orrs	r3, r2
 80044b0:	d03b      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044be:	d01f      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80044c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044c4:	d818      	bhi.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80044c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ca:	d003      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80044cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044d0:	d007      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80044d2:	e011      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d4:	4b33      	ldr	r3, [pc, #204]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	4a32      	ldr	r2, [pc, #200]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80044e0:	e00f      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e6:	3328      	adds	r3, #40	; 0x28
 80044e8:	2101      	movs	r1, #1
 80044ea:	4618      	mov	r0, r3
 80044ec:	f001 fc6a 	bl	8005dc4 <RCCEx_PLL3_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80044f6:	e004      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044fe:	e000      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800450a:	4b26      	ldr	r3, [pc, #152]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451a:	4a22      	ldr	r2, [pc, #136]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800451c:	430b      	orrs	r3, r1
 800451e:	6553      	str	r3, [r2, #84]	; 0x54
 8004520:	e003      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004522:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004526:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800452a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004532:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004536:	673b      	str	r3, [r7, #112]	; 0x70
 8004538:	2300      	movs	r3, #0
 800453a:	677b      	str	r3, [r7, #116]	; 0x74
 800453c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004540:	460b      	mov	r3, r1
 8004542:	4313      	orrs	r3, r2
 8004544:	d034      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800454a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004554:	d007      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004556:	e011      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004558:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	4a11      	ldr	r2, [pc, #68]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800455e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004564:	e00e      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456a:	3308      	adds	r3, #8
 800456c:	2102      	movs	r1, #2
 800456e:	4618      	mov	r0, r3
 8004570:	f001 fb76 	bl	8005c60 <RCCEx_PLL2_Config>
 8004574:	4603      	mov	r3, r0
 8004576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800457a:	e003      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004584:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10d      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800458e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004590:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800459a:	4a02      	ldr	r2, [pc, #8]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800459c:	430b      	orrs	r3, r1
 800459e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045a0:	e006      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80045a2:	bf00      	nop
 80045a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80045bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80045be:	2300      	movs	r3, #0
 80045c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80045c6:	460b      	mov	r3, r1
 80045c8:	4313      	orrs	r3, r2
 80045ca:	d00c      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d0:	3328      	adds	r3, #40	; 0x28
 80045d2:	2102      	movs	r1, #2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 fbf5 	bl	8005dc4 <RCCEx_PLL3_Config>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80045f2:	663b      	str	r3, [r7, #96]	; 0x60
 80045f4:	2300      	movs	r3, #0
 80045f6:	667b      	str	r3, [r7, #100]	; 0x64
 80045f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80045fc:	460b      	mov	r3, r1
 80045fe:	4313      	orrs	r3, r2
 8004600:	d038      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800460a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800460e:	d018      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004614:	d811      	bhi.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800461a:	d014      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800461c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004620:	d80b      	bhi.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d011      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462a:	d106      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800462c:	4bc3      	ldr	r3, [pc, #780]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	4ac2      	ldr	r2, [pc, #776]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004636:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004638:	e008      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004640:	e004      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004642:	bf00      	nop
 8004644:	e002      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004646:	bf00      	nop
 8004648:	e000      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800464a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800464c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10b      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004654:	4bb9      	ldr	r3, [pc, #740]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004658:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800465c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004664:	4ab5      	ldr	r2, [pc, #724]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004666:	430b      	orrs	r3, r1
 8004668:	6553      	str	r3, [r2, #84]	; 0x54
 800466a:	e003      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004670:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004680:	65bb      	str	r3, [r7, #88]	; 0x58
 8004682:	2300      	movs	r3, #0
 8004684:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004686:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800468a:	460b      	mov	r3, r1
 800468c:	4313      	orrs	r3, r2
 800468e:	d009      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004690:	4baa      	ldr	r3, [pc, #680]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004694:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800469e:	4aa7      	ldr	r2, [pc, #668]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046a0:	430b      	orrs	r3, r1
 80046a2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80046a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80046b0:	653b      	str	r3, [r7, #80]	; 0x50
 80046b2:	2300      	movs	r3, #0
 80046b4:	657b      	str	r3, [r7, #84]	; 0x54
 80046b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80046ba:	460b      	mov	r3, r1
 80046bc:	4313      	orrs	r3, r2
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80046c0:	4b9e      	ldr	r3, [pc, #632]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80046c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80046d0:	4a9a      	ldr	r2, [pc, #616]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046d2:	430b      	orrs	r3, r1
 80046d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80046e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80046e4:	2300      	movs	r3, #0
 80046e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80046ec:	460b      	mov	r3, r1
 80046ee:	4313      	orrs	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046f2:	4b92      	ldr	r3, [pc, #584]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80046fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004700:	4a8e      	ldr	r2, [pc, #568]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004702:	430b      	orrs	r3, r1
 8004704:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004712:	643b      	str	r3, [r7, #64]	; 0x40
 8004714:	2300      	movs	r3, #0
 8004716:	647b      	str	r3, [r7, #68]	; 0x44
 8004718:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800471c:	460b      	mov	r3, r1
 800471e:	4313      	orrs	r3, r2
 8004720:	d00e      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004722:	4b86      	ldr	r3, [pc, #536]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	4a85      	ldr	r2, [pc, #532]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004728:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800472c:	6113      	str	r3, [r2, #16]
 800472e:	4b83      	ldr	r3, [pc, #524]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004730:	6919      	ldr	r1, [r3, #16]
 8004732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004736:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800473a:	4a80      	ldr	r2, [pc, #512]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800473c:	430b      	orrs	r3, r1
 800473e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800474c:	63bb      	str	r3, [r7, #56]	; 0x38
 800474e:	2300      	movs	r3, #0
 8004750:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004752:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004756:	460b      	mov	r3, r1
 8004758:	4313      	orrs	r3, r2
 800475a:	d009      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800475c:	4b77      	ldr	r3, [pc, #476]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800475e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004760:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476a:	4a74      	ldr	r2, [pc, #464]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800476c:	430b      	orrs	r3, r1
 800476e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800477c:	633b      	str	r3, [r7, #48]	; 0x30
 800477e:	2300      	movs	r3, #0
 8004780:	637b      	str	r3, [r7, #52]	; 0x34
 8004782:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004786:	460b      	mov	r3, r1
 8004788:	4313      	orrs	r3, r2
 800478a:	d00a      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800478c:	4b6b      	ldr	r3, [pc, #428]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004790:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800479c:	4a67      	ldr	r2, [pc, #412]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800479e:	430b      	orrs	r3, r1
 80047a0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80047a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	2100      	movs	r1, #0
 80047ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80047b8:	460b      	mov	r3, r1
 80047ba:	4313      	orrs	r3, r2
 80047bc:	d011      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c2:	3308      	adds	r3, #8
 80047c4:	2100      	movs	r1, #0
 80047c6:	4618      	mov	r0, r3
 80047c8:	f001 fa4a 	bl	8005c60 <RCCEx_PLL2_Config>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80047d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80047e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ea:	2100      	movs	r1, #0
 80047ec:	6239      	str	r1, [r7, #32]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
 80047f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80047f8:	460b      	mov	r3, r1
 80047fa:	4313      	orrs	r3, r2
 80047fc:	d011      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004802:	3308      	adds	r3, #8
 8004804:	2101      	movs	r1, #1
 8004806:	4618      	mov	r0, r3
 8004808:	f001 fa2a 	bl	8005c60 <RCCEx_PLL2_Config>
 800480c:	4603      	mov	r3, r0
 800480e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800481e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482a:	2100      	movs	r1, #0
 800482c:	61b9      	str	r1, [r7, #24]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	61fb      	str	r3, [r7, #28]
 8004834:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004838:	460b      	mov	r3, r1
 800483a:	4313      	orrs	r3, r2
 800483c:	d011      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800483e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004842:	3308      	adds	r3, #8
 8004844:	2102      	movs	r1, #2
 8004846:	4618      	mov	r0, r3
 8004848:	f001 fa0a 	bl	8005c60 <RCCEx_PLL2_Config>
 800484c:	4603      	mov	r3, r0
 800484e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004852:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800485e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	2100      	movs	r1, #0
 800486c:	6139      	str	r1, [r7, #16]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004878:	460b      	mov	r3, r1
 800487a:	4313      	orrs	r3, r2
 800487c:	d011      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800487e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004882:	3328      	adds	r3, #40	; 0x28
 8004884:	2100      	movs	r1, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f001 fa9c 	bl	8005dc4 <RCCEx_PLL3_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800489e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80048a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	2100      	movs	r1, #0
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	f003 0310 	and.w	r3, r3, #16
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80048b8:	460b      	mov	r3, r1
 80048ba:	4313      	orrs	r3, r2
 80048bc:	d011      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c2:	3328      	adds	r3, #40	; 0x28
 80048c4:	2101      	movs	r1, #1
 80048c6:	4618      	mov	r0, r3
 80048c8:	f001 fa7c 	bl	8005dc4 <RCCEx_PLL3_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	2100      	movs	r1, #0
 80048ec:	6039      	str	r1, [r7, #0]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	607b      	str	r3, [r7, #4]
 80048f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80048f8:	460b      	mov	r3, r1
 80048fa:	4313      	orrs	r3, r2
 80048fc:	d011      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004902:	3328      	adds	r3, #40	; 0x28
 8004904:	2102      	movs	r1, #2
 8004906:	4618      	mov	r0, r3
 8004908:	f001 fa5c 	bl	8005dc4 <RCCEx_PLL3_Config>
 800490c:	4603      	mov	r3, r0
 800490e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004912:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800491e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004922:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e000      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
}
 8004930:	4618      	mov	r0, r3
 8004932:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004936:	46bd      	mov	sp, r7
 8004938:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800493c:	58024400 	.word	0x58024400

08004940 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b090      	sub	sp, #64	; 0x40
 8004944:	af00      	add	r7, sp, #0
 8004946:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800494a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800494e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004952:	430b      	orrs	r3, r1
 8004954:	f040 8094 	bne.w	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004958:	4b9e      	ldr	r3, [pc, #632]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800495a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	2b04      	cmp	r3, #4
 8004966:	f200 8087 	bhi.w	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800496a:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	08004985 	.word	0x08004985
 8004974:	080049ad 	.word	0x080049ad
 8004978:	080049d5 	.word	0x080049d5
 800497c:	08004a71 	.word	0x08004a71
 8004980:	080049fd 	.word	0x080049fd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004984:	4b93      	ldr	r3, [pc, #588]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004990:	d108      	bne.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004996:	4618      	mov	r0, r3
 8004998:	f001 f810 	bl	80059bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049a0:	f000 bd45 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049a8:	f000 bd41 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80049ac:	4b89      	ldr	r3, [pc, #548]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b8:	d108      	bne.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049ba:	f107 0318 	add.w	r3, r7, #24
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fd54 	bl	800546c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049c8:	f000 bd31 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049d0:	f000 bd2d 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80049d4:	4b7f      	ldr	r3, [pc, #508]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e0:	d108      	bne.n	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049e2:	f107 030c 	add.w	r3, r7, #12
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fe94 	bl	8005714 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049f0:	f000 bd1d 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049f8:	f000 bd19 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80049fc:	4b75      	ldr	r3, [pc, #468]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80049fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a04:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a06:	4b73      	ldr	r3, [pc, #460]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d10c      	bne.n	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d109      	bne.n	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a18:	4b6e      	ldr	r3, [pc, #440]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	08db      	lsrs	r3, r3, #3
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	4a6d      	ldr	r2, [pc, #436]	; (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004a24:	fa22 f303 	lsr.w	r3, r2, r3
 8004a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a2a:	e01f      	b.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a2c:	4b69      	ldr	r3, [pc, #420]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a38:	d106      	bne.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a40:	d102      	bne.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004a42:	4b66      	ldr	r3, [pc, #408]	; (8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a46:	e011      	b.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a48:	4b62      	ldr	r3, [pc, #392]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a54:	d106      	bne.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a5c:	d102      	bne.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004a5e:	4b60      	ldr	r3, [pc, #384]	; (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a62:	e003      	b.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004a68:	f000 bce1 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004a6c:	f000 bcdf 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004a70:	4b5c      	ldr	r3, [pc, #368]	; (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a74:	f000 bcdb 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a7c:	f000 bcd7 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a84:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	f040 80ad 	bne.w	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004a8e:	4b51      	ldr	r3, [pc, #324]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a92:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004a96:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a9e:	d056      	beq.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa6:	f200 8090 	bhi.w	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	2bc0      	cmp	r3, #192	; 0xc0
 8004aae:	f000 8088 	beq.w	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	2bc0      	cmp	r3, #192	; 0xc0
 8004ab6:	f200 8088 	bhi.w	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	2b80      	cmp	r3, #128	; 0x80
 8004abe:	d032      	beq.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	2b80      	cmp	r3, #128	; 0x80
 8004ac4:	f200 8081 	bhi.w	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8004ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad0:	2b40      	cmp	r3, #64	; 0x40
 8004ad2:	d014      	beq.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004ad4:	e079      	b.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ad6:	4b3f      	ldr	r3, [pc, #252]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ae2:	d108      	bne.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 ff67 	bl	80059bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004af2:	f000 bc9c 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004afa:	f000 bc98 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004afe:	4b35      	ldr	r3, [pc, #212]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b0a:	d108      	bne.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b0c:	f107 0318 	add.w	r3, r7, #24
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fcab 	bl	800546c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b1a:	f000 bc88 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b22:	f000 bc84 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b26:	4b2b      	ldr	r3, [pc, #172]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b32:	d108      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b34:	f107 030c 	add.w	r3, r7, #12
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fdeb 	bl	8005714 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b42:	f000 bc74 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b4a:	f000 bc70 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004b4e:	4b21      	ldr	r3, [pc, #132]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b56:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b58:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d10c      	bne.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d109      	bne.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b6a:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	08db      	lsrs	r3, r3, #3
 8004b70:	f003 0303 	and.w	r3, r3, #3
 8004b74:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004b76:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b7c:	e01f      	b.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b7e:	4b15      	ldr	r3, [pc, #84]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b8a:	d106      	bne.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b92:	d102      	bne.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004b94:	4b11      	ldr	r3, [pc, #68]	; (8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b98:	e011      	b.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b9a:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ba6:	d106      	bne.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8004ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bae:	d102      	bne.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bb4:	e003      	b.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004bba:	f000 bc38 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004bbe:	f000 bc36 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004bc2:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bc6:	f000 bc32 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bce:	f000 bc2e 	b.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004bd2:	bf00      	nop
 8004bd4:	58024400 	.word	0x58024400
 8004bd8:	03d09000 	.word	0x03d09000
 8004bdc:	003d0900 	.word	0x003d0900
 8004be0:	017d7840 	.word	0x017d7840
 8004be4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bec:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	f040 809c 	bne.w	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8004bf6:	4b9e      	ldr	r3, [pc, #632]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004bfe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c06:	d054      	beq.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c0e:	f200 808b 	bhi.w	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c18:	f000 8083 	beq.w	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c22:	f200 8081 	bhi.w	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2c:	d02f      	beq.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c34:	d878      	bhi.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d004      	beq.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c42:	d012      	beq.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004c44:	e070      	b.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c46:	4b8a      	ldr	r3, [pc, #552]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c52:	d107      	bne.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 feaf 	bl	80059bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c62:	e3e4      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c68:	e3e1      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c6a:	4b81      	ldr	r3, [pc, #516]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c76:	d107      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c78:	f107 0318 	add.w	r3, r7, #24
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fbf5 	bl	800546c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c86:	e3d2      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c8c:	e3cf      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c8e:	4b78      	ldr	r3, [pc, #480]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c9a:	d107      	bne.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c9c:	f107 030c 	add.w	r3, r7, #12
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fd37 	bl	8005714 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004caa:	e3c0      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cb0:	e3bd      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004cb2:	4b6f      	ldr	r3, [pc, #444]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004cbc:	4b6c      	ldr	r3, [pc, #432]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d10c      	bne.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cce:	4b68      	ldr	r3, [pc, #416]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	08db      	lsrs	r3, r3, #3
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	4a66      	ldr	r2, [pc, #408]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004cda:	fa22 f303 	lsr.w	r3, r2, r3
 8004cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ce0:	e01e      	b.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ce2:	4b63      	ldr	r3, [pc, #396]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cee:	d106      	bne.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cf6:	d102      	bne.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004cf8:	4b5f      	ldr	r3, [pc, #380]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cfc:	e010      	b.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004cfe:	4b5c      	ldr	r3, [pc, #368]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d0a:	d106      	bne.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8004d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d12:	d102      	bne.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004d14:	4b59      	ldr	r3, [pc, #356]	; (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8004d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d18:	e002      	b.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004d1e:	e386      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004d20:	e385      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004d22:	4b57      	ldr	r3, [pc, #348]	; (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d26:	e382      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d2c:	e37f      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004d2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d32:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8004d36:	430b      	orrs	r3, r1
 8004d38:	f040 80a7 	bne.w	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8004d3c:	4b4c      	ldr	r3, [pc, #304]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d40:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004d44:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d4c:	d055      	beq.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d54:	f200 8096 	bhi.w	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d5e:	f000 8084 	beq.w	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d68:	f200 808c 	bhi.w	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d72:	d030      	beq.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d7a:	f200 8083 	bhi.w	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d004      	beq.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d8a:	d012      	beq.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004d8c:	e07a      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d8e:	4b38      	ldr	r3, [pc, #224]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d9a:	d107      	bne.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 fe0b 	bl	80059bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004daa:	e340      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004db0:	e33d      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004db2:	4b2f      	ldr	r3, [pc, #188]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dbe:	d107      	bne.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dc0:	f107 0318 	add.w	r3, r7, #24
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fb51 	bl	800546c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004dce:	e32e      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dd4:	e32b      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004dd6:	4b26      	ldr	r3, [pc, #152]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004de2:	d107      	bne.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004de4:	f107 030c 	add.w	r3, r7, #12
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fc93 	bl	8005714 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004df2:	e31c      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004df8:	e319      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004dfa:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e02:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e04:	4b1a      	ldr	r3, [pc, #104]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d10c      	bne.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d109      	bne.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e16:	4b16      	ldr	r3, [pc, #88]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	08db      	lsrs	r3, r3, #3
 8004e1c:	f003 0303 	and.w	r3, r3, #3
 8004e20:	4a14      	ldr	r2, [pc, #80]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004e22:	fa22 f303 	lsr.w	r3, r2, r3
 8004e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e28:	e01e      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e2a:	4b11      	ldr	r3, [pc, #68]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e36:	d106      	bne.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8004e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e3e:	d102      	bne.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004e40:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8004e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e44:	e010      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e46:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e52:	d106      	bne.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8004e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e5a:	d102      	bne.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004e5c:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8004e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e60:	e002      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004e62:	2300      	movs	r3, #0
 8004e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004e66:	e2e2      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004e68:	e2e1      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e6e:	e2de      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004e70:	58024400 	.word	0x58024400
 8004e74:	03d09000 	.word	0x03d09000
 8004e78:	003d0900 	.word	0x003d0900
 8004e7c:	017d7840 	.word	0x017d7840
 8004e80:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e88:	e2d1      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004e8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e8e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004e92:	430b      	orrs	r3, r1
 8004e94:	f040 809c 	bne.w	8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004e98:	4b93      	ldr	r3, [pc, #588]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004ea0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea8:	d054      	beq.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eb0:	f200 808b 	bhi.w	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004eba:	f000 8083 	beq.w	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ec4:	f200 8081 	bhi.w	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ece:	d02f      	beq.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed6:	d878      	bhi.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d004      	beq.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee4:	d012      	beq.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8004ee6:	e070      	b.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ee8:	4b7f      	ldr	r3, [pc, #508]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ef4:	d107      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fd5e 	bl	80059bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f04:	e293      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f0a:	e290      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f0c:	4b76      	ldr	r3, [pc, #472]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f18:	d107      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f1a:	f107 0318 	add.w	r3, r7, #24
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 faa4 	bl	800546c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f28:	e281      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f2e:	e27e      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f30:	4b6d      	ldr	r3, [pc, #436]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f3c:	d107      	bne.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f3e:	f107 030c 	add.w	r3, r7, #12
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fbe6 	bl	8005714 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f4c:	e26f      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f52:	e26c      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f54:	4b64      	ldr	r3, [pc, #400]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f5c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f5e:	4b62      	ldr	r3, [pc, #392]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d109      	bne.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f70:	4b5d      	ldr	r3, [pc, #372]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	08db      	lsrs	r3, r3, #3
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	4a5c      	ldr	r2, [pc, #368]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f82:	e01e      	b.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f84:	4b58      	ldr	r3, [pc, #352]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f90:	d106      	bne.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8004f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f98:	d102      	bne.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004f9a:	4b55      	ldr	r3, [pc, #340]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f9e:	e010      	b.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004fa0:	4b51      	ldr	r3, [pc, #324]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fac:	d106      	bne.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8004fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb4:	d102      	bne.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004fb6:	4b4f      	ldr	r3, [pc, #316]	; (80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fba:	e002      	b.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004fc0:	e235      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004fc2:	e234      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004fc4:	4b4c      	ldr	r3, [pc, #304]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8004fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fc8:	e231      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fce:	e22e      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fd4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	f040 808f 	bne.w	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004fde:	4b42      	ldr	r3, [pc, #264]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004fe6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fee:	d06b      	beq.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ff6:	d874      	bhi.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ffe:	d056      	beq.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005002:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005006:	d86c      	bhi.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800500e:	d03b      	beq.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005012:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005016:	d864      	bhi.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800501e:	d021      	beq.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005022:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005026:	d85c      	bhi.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502a:	2b00      	cmp	r3, #0
 800502c:	d004      	beq.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800502e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005034:	d004      	beq.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005036:	e054      	b.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005038:	f7fe fa0a 	bl	8003450 <HAL_RCC_GetPCLK1Freq>
 800503c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800503e:	e1f6      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005040:	4b29      	ldr	r3, [pc, #164]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800504c:	d107      	bne.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800504e:	f107 0318 	add.w	r3, r7, #24
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fa0a 	bl	800546c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800505c:	e1e7      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005062:	e1e4      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005064:	4b20      	ldr	r3, [pc, #128]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800506c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005070:	d107      	bne.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005072:	f107 030c 	add.w	r3, r7, #12
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fb4c 	bl	8005714 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005080:	e1d5      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005086:	e1d2      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005088:	4b17      	ldr	r3, [pc, #92]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b04      	cmp	r3, #4
 8005092:	d109      	bne.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005094:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	08db      	lsrs	r3, r3, #3
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	4a13      	ldr	r2, [pc, #76]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80050a0:	fa22 f303 	lsr.w	r3, r2, r3
 80050a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050a6:	e1c2      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80050a8:	2300      	movs	r3, #0
 80050aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050ac:	e1bf      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80050ae:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ba:	d102      	bne.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80050bc:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80050be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050c0:	e1b5      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050c6:	e1b2      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80050c8:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050d4:	d102      	bne.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80050d6:	4b07      	ldr	r3, [pc, #28]	; (80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80050d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050da:	e1a8      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050e0:	e1a5      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80050e2:	2300      	movs	r3, #0
 80050e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050e6:	e1a2      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80050e8:	58024400 	.word	0x58024400
 80050ec:	03d09000 	.word	0x03d09000
 80050f0:	003d0900 	.word	0x003d0900
 80050f4:	017d7840 	.word	0x017d7840
 80050f8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80050fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005100:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005104:	430b      	orrs	r3, r1
 8005106:	d173      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005108:	4b9c      	ldr	r3, [pc, #624]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800510a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005110:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005114:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005118:	d02f      	beq.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005120:	d863      	bhi.n	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005124:	2b00      	cmp	r3, #0
 8005126:	d004      	beq.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800512e:	d012      	beq.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005130:	e05b      	b.n	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005132:	4b92      	ldr	r3, [pc, #584]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800513a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800513e:	d107      	bne.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005140:	f107 0318 	add.w	r3, r7, #24
 8005144:	4618      	mov	r0, r3
 8005146:	f000 f991 	bl	800546c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800514e:	e16e      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005150:	2300      	movs	r3, #0
 8005152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005154:	e16b      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005156:	4b89      	ldr	r3, [pc, #548]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800515e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005162:	d107      	bne.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005164:	f107 030c 	add.w	r3, r7, #12
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fad3 	bl	8005714 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005172:	e15c      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005178:	e159      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800517a:	4b80      	ldr	r3, [pc, #512]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800517c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005182:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005184:	4b7d      	ldr	r3, [pc, #500]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b04      	cmp	r3, #4
 800518e:	d10c      	bne.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005192:	2b00      	cmp	r3, #0
 8005194:	d109      	bne.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005196:	4b79      	ldr	r3, [pc, #484]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	08db      	lsrs	r3, r3, #3
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	4a77      	ldr	r2, [pc, #476]	; (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80051a2:	fa22 f303 	lsr.w	r3, r2, r3
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051a8:	e01e      	b.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051aa:	4b74      	ldr	r3, [pc, #464]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b6:	d106      	bne.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80051b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051be:	d102      	bne.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80051c0:	4b70      	ldr	r3, [pc, #448]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80051c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051c4:	e010      	b.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051c6:	4b6d      	ldr	r3, [pc, #436]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051d2:	d106      	bne.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80051d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051da:	d102      	bne.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80051dc:	4b6a      	ldr	r3, [pc, #424]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e0:	e002      	b.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80051e6:	e122      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80051e8:	e121      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051ee:	e11e      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80051f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051f4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80051f8:	430b      	orrs	r3, r1
 80051fa:	d133      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80051fc:	4b5f      	ldr	r3, [pc, #380]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80051fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005204:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005212:	d012      	beq.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005214:	e023      	b.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005216:	4b59      	ldr	r3, [pc, #356]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005222:	d107      	bne.n	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fbc7 	bl	80059bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005230:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005232:	e0fc      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005238:	e0f9      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800523a:	4b50      	ldr	r3, [pc, #320]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005246:	d107      	bne.n	8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005248:	f107 0318 	add.w	r3, r7, #24
 800524c:	4618      	mov	r0, r3
 800524e:	f000 f90d 	bl	800546c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005256:	e0ea      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800525c:	e0e7      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005262:	e0e4      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005268:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800526c:	430b      	orrs	r3, r1
 800526e:	f040 808d 	bne.w	800538c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005272:	4b42      	ldr	r3, [pc, #264]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005276:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800527a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800527c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005282:	d06b      	beq.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800528a:	d874      	bhi.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005292:	d056      	beq.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529a:	d86c      	bhi.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800529c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052a2:	d03b      	beq.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052aa:	d864      	bhi.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80052ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052b2:	d021      	beq.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ba:	d85c      	bhi.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80052bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d004      	beq.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052c8:	d004      	beq.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80052ca:	e054      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80052cc:	f000 f8b8 	bl	8005440 <HAL_RCCEx_GetD3PCLK1Freq>
 80052d0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80052d2:	e0ac      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052d4:	4b29      	ldr	r3, [pc, #164]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052e0:	d107      	bne.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052e2:	f107 0318 	add.w	r3, r7, #24
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 f8c0 	bl	800546c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052f0:	e09d      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052f6:	e09a      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052f8:	4b20      	ldr	r3, [pc, #128]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005304:	d107      	bne.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005306:	f107 030c 	add.w	r3, r7, #12
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fa02 	bl	8005714 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005314:	e08b      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800531a:	e088      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800531c:	4b17      	ldr	r3, [pc, #92]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b04      	cmp	r3, #4
 8005326:	d109      	bne.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005328:	4b14      	ldr	r3, [pc, #80]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	08db      	lsrs	r3, r3, #3
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	4a13      	ldr	r2, [pc, #76]	; (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005334:	fa22 f303 	lsr.w	r3, r2, r3
 8005338:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800533a:	e078      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005340:	e075      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005342:	4b0e      	ldr	r3, [pc, #56]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534e:	d102      	bne.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005350:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005352:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005354:	e06b      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800535a:	e068      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800535c:	4b07      	ldr	r3, [pc, #28]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005364:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005368:	d102      	bne.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800536a:	4b07      	ldr	r3, [pc, #28]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800536c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800536e:	e05e      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005370:	2300      	movs	r3, #0
 8005372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005374:	e05b      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005376:	2300      	movs	r3, #0
 8005378:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800537a:	e058      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800537c:	58024400 	.word	0x58024400
 8005380:	03d09000 	.word	0x03d09000
 8005384:	003d0900 	.word	0x003d0900
 8005388:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800538c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005390:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005394:	430b      	orrs	r3, r1
 8005396:	d148      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005398:	4b27      	ldr	r3, [pc, #156]	; (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800539a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80053a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053a8:	d02a      	beq.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053b0:	d838      	bhi.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d004      	beq.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053be:	d00d      	beq.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80053c0:	e030      	b.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80053c2:	4b1d      	ldr	r3, [pc, #116]	; (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053ce:	d102      	bne.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80053d0:	4b1a      	ldr	r3, [pc, #104]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053d4:	e02b      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053da:	e028      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053dc:	4b16      	ldr	r3, [pc, #88]	; (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053e8:	d107      	bne.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fae4 	bl	80059bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053f8:	e019      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053fe:	e016      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005400:	4b0d      	ldr	r3, [pc, #52]	; (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005408:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800540c:	d107      	bne.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800540e:	f107 0318 	add.w	r3, r7, #24
 8005412:	4618      	mov	r0, r3
 8005414:	f000 f82a 	bl	800546c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800541c:	e007      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005422:	e004      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005428:	e001      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800542e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005430:	4618      	mov	r0, r3
 8005432:	3740      	adds	r7, #64	; 0x40
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	58024400 	.word	0x58024400
 800543c:	017d7840 	.word	0x017d7840

08005440 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005444:	f7fd ffd4 	bl	80033f0 <HAL_RCC_GetHCLKFreq>
 8005448:	4602      	mov	r2, r0
 800544a:	4b06      	ldr	r3, [pc, #24]	; (8005464 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	091b      	lsrs	r3, r3, #4
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	4904      	ldr	r1, [pc, #16]	; (8005468 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005456:	5ccb      	ldrb	r3, [r1, r3]
 8005458:	f003 031f 	and.w	r3, r3, #31
 800545c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005460:	4618      	mov	r0, r3
 8005462:	bd80      	pop	{r7, pc}
 8005464:	58024400 	.word	0x58024400
 8005468:	0800654c 	.word	0x0800654c

0800546c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800546c:	b480      	push	{r7}
 800546e:	b089      	sub	sp, #36	; 0x24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005474:	4ba1      	ldr	r3, [pc, #644]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	f003 0303 	and.w	r3, r3, #3
 800547c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800547e:	4b9f      	ldr	r3, [pc, #636]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	0b1b      	lsrs	r3, r3, #12
 8005484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005488:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800548a:	4b9c      	ldr	r3, [pc, #624]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800548c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548e:	091b      	lsrs	r3, r3, #4
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005496:	4b99      	ldr	r3, [pc, #612]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549a:	08db      	lsrs	r3, r3, #3
 800549c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	fb02 f303 	mul.w	r3, r2, r3
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8111 	beq.w	80056dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	f000 8083 	beq.w	80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	f200 80a1 	bhi.w	800560c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d003      	beq.n	80054d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d056      	beq.n	8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80054d6:	e099      	b.n	800560c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054d8:	4b88      	ldr	r3, [pc, #544]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0320 	and.w	r3, r3, #32
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d02d      	beq.n	8005540 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054e4:	4b85      	ldr	r3, [pc, #532]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	08db      	lsrs	r3, r3, #3
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	4a84      	ldr	r2, [pc, #528]	; (8005700 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80054f0:	fa22 f303 	lsr.w	r3, r2, r3
 80054f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	ee07 3a90 	vmov	s15, r3
 80054fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	ee07 3a90 	vmov	s15, r3
 8005506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800550e:	4b7b      	ldr	r3, [pc, #492]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005516:	ee07 3a90 	vmov	s15, r3
 800551a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800551e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005522:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005704 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800552a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800552e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800553e:	e087      	b.n	8005650 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800554e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005552:	4b6a      	ldr	r3, [pc, #424]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555a:	ee07 3a90 	vmov	s15, r3
 800555e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005562:	ed97 6a03 	vldr	s12, [r7, #12]
 8005566:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005704 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800556a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800556e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800557a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005582:	e065      	b.n	8005650 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800570c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005596:	4b59      	ldr	r3, [pc, #356]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559e:	ee07 3a90 	vmov	s15, r3
 80055a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005704 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055c6:	e043      	b.n	8005650 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	ee07 3a90 	vmov	s15, r3
 80055ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80055d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055da:	4b48      	ldr	r3, [pc, #288]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e2:	ee07 3a90 	vmov	s15, r3
 80055e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005704 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800560a:	e021      	b.n	8005650 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005616:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800570c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800561a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800561e:	4b37      	ldr	r3, [pc, #220]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800562e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005632:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005704 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800563a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800563e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800564a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800564e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005650:	4b2a      	ldr	r3, [pc, #168]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	0a5b      	lsrs	r3, r3, #9
 8005656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005662:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005666:	ee37 7a87 	vadd.f32	s14, s15, s14
 800566a:	edd7 6a07 	vldr	s13, [r7, #28]
 800566e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005676:	ee17 2a90 	vmov	r2, s15
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800567e:	4b1f      	ldr	r3, [pc, #124]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	0c1b      	lsrs	r3, r3, #16
 8005684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005688:	ee07 3a90 	vmov	s15, r3
 800568c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005690:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005694:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005698:	edd7 6a07 	vldr	s13, [r7, #28]
 800569c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056a4:	ee17 2a90 	vmov	r2, s15
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80056ac:	4b13      	ldr	r3, [pc, #76]	; (80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	0e1b      	lsrs	r3, r3, #24
 80056b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80056ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056d2:	ee17 2a90 	vmov	r2, s15
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80056da:	e008      	b.n	80056ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	609a      	str	r2, [r3, #8]
}
 80056ee:	bf00      	nop
 80056f0:	3724      	adds	r7, #36	; 0x24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	58024400 	.word	0x58024400
 8005700:	03d09000 	.word	0x03d09000
 8005704:	46000000 	.word	0x46000000
 8005708:	4c742400 	.word	0x4c742400
 800570c:	4a742400 	.word	0x4a742400
 8005710:	4bbebc20 	.word	0x4bbebc20

08005714 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005714:	b480      	push	{r7}
 8005716:	b089      	sub	sp, #36	; 0x24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800571c:	4ba1      	ldr	r3, [pc, #644]	; (80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005720:	f003 0303 	and.w	r3, r3, #3
 8005724:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005726:	4b9f      	ldr	r3, [pc, #636]	; (80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	0d1b      	lsrs	r3, r3, #20
 800572c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005730:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005732:	4b9c      	ldr	r3, [pc, #624]	; (80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005736:	0a1b      	lsrs	r3, r3, #8
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800573e:	4b99      	ldr	r3, [pc, #612]	; (80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005742:	08db      	lsrs	r3, r3, #3
 8005744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	fb02 f303 	mul.w	r3, r2, r3
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005756:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 8111 	beq.w	8005984 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	2b02      	cmp	r3, #2
 8005766:	f000 8083 	beq.w	8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	2b02      	cmp	r3, #2
 800576e:	f200 80a1 	bhi.w	80058b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d056      	beq.n	800582c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800577e:	e099      	b.n	80058b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005780:	4b88      	ldr	r3, [pc, #544]	; (80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b00      	cmp	r3, #0
 800578a:	d02d      	beq.n	80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800578c:	4b85      	ldr	r3, [pc, #532]	; (80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	08db      	lsrs	r3, r3, #3
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	4a84      	ldr	r2, [pc, #528]	; (80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
 800579c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	ee07 3a90 	vmov	s15, r3
 80057a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057b6:	4b7b      	ldr	r3, [pc, #492]	; (80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80057ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80059ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80057e6:	e087      	b.n	80058f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	ee07 3a90 	vmov	s15, r3
 80057ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80057f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057fa:	4b6a      	ldr	r3, [pc, #424]	; (80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800580a:	ed97 6a03 	vldr	s12, [r7, #12]
 800580e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80059ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800581a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800581e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800582a:	e065      	b.n	80058f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005836:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80059b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800583a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800583e:	4b59      	ldr	r3, [pc, #356]	; (80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800584e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005852:	eddf 5a56 	vldr	s11, [pc, #344]	; 80059ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800585a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800585e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800586e:	e043      	b.n	80058f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800587e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005882:	4b48      	ldr	r3, [pc, #288]	; (80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005892:	ed97 6a03 	vldr	s12, [r7, #12]
 8005896:	eddf 5a45 	vldr	s11, [pc, #276]	; 80059ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800589a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800589e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058b2:	e021      	b.n	80058f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80059b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80058c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058c6:	4b37      	ldr	r3, [pc, #220]	; (80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80059ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80058f8:	4b2a      	ldr	r3, [pc, #168]	; (80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	0a5b      	lsrs	r3, r3, #9
 80058fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800590e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005912:	edd7 6a07 	vldr	s13, [r7, #28]
 8005916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800591a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800591e:	ee17 2a90 	vmov	r2, s15
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005926:	4b1f      	ldr	r3, [pc, #124]	; (80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	0c1b      	lsrs	r3, r3, #16
 800592c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005930:	ee07 3a90 	vmov	s15, r3
 8005934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800593c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005940:	edd7 6a07 	vldr	s13, [r7, #28]
 8005944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800594c:	ee17 2a90 	vmov	r2, s15
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005954:	4b13      	ldr	r3, [pc, #76]	; (80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	0e1b      	lsrs	r3, r3, #24
 800595a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005966:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800596a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800596e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800597a:	ee17 2a90 	vmov	r2, s15
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005982:	e008      	b.n	8005996 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	609a      	str	r2, [r3, #8]
}
 8005996:	bf00      	nop
 8005998:	3724      	adds	r7, #36	; 0x24
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	58024400 	.word	0x58024400
 80059a8:	03d09000 	.word	0x03d09000
 80059ac:	46000000 	.word	0x46000000
 80059b0:	4c742400 	.word	0x4c742400
 80059b4:	4a742400 	.word	0x4a742400
 80059b8:	4bbebc20 	.word	0x4bbebc20

080059bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80059bc:	b480      	push	{r7}
 80059be:	b089      	sub	sp, #36	; 0x24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059c4:	4ba0      	ldr	r3, [pc, #640]	; (8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c8:	f003 0303 	and.w	r3, r3, #3
 80059cc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80059ce:	4b9e      	ldr	r3, [pc, #632]	; (8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d2:	091b      	lsrs	r3, r3, #4
 80059d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059d8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80059da:	4b9b      	ldr	r3, [pc, #620]	; (8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80059e4:	4b98      	ldr	r3, [pc, #608]	; (8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e8:	08db      	lsrs	r3, r3, #3
 80059ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	fb02 f303 	mul.w	r3, r2, r3
 80059f4:	ee07 3a90 	vmov	s15, r3
 80059f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 8111 	beq.w	8005c2a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	f000 8083 	beq.w	8005b16 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	f200 80a1 	bhi.w	8005b5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d056      	beq.n	8005ad2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005a24:	e099      	b.n	8005b5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a26:	4b88      	ldr	r3, [pc, #544]	; (8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d02d      	beq.n	8005a8e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a32:	4b85      	ldr	r3, [pc, #532]	; (8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	08db      	lsrs	r3, r3, #3
 8005a38:	f003 0303 	and.w	r3, r3, #3
 8005a3c:	4a83      	ldr	r2, [pc, #524]	; (8005c4c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a42:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	ee07 3a90 	vmov	s15, r3
 8005a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	ee07 3a90 	vmov	s15, r3
 8005a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a5c:	4b7a      	ldr	r3, [pc, #488]	; (8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a64:	ee07 3a90 	vmov	s15, r3
 8005a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a70:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005c50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a88:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005a8c:	e087      	b.n	8005b9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	ee07 3a90 	vmov	s15, r3
 8005a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a98:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005c54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005a9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aa0:	4b69      	ldr	r3, [pc, #420]	; (8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aa8:	ee07 3a90 	vmov	s15, r3
 8005aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ab0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ab4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005c50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ab8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005abc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ac0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005acc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ad0:	e065      	b.n	8005b9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	ee07 3a90 	vmov	s15, r3
 8005ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005adc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005c58 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005ae0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ae4:	4b58      	ldr	r3, [pc, #352]	; (8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aec:	ee07 3a90 	vmov	s15, r3
 8005af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005af4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005af8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005c50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005afc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b14:	e043      	b.n	8005b9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b20:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005c5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005b24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b28:	4b47      	ldr	r3, [pc, #284]	; (8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b30:	ee07 3a90 	vmov	s15, r3
 8005b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b38:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b3c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005c50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005b40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b58:	e021      	b.n	8005b9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	ee07 3a90 	vmov	s15, r3
 8005b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b64:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005c54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005b68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b6c:	4b36      	ldr	r3, [pc, #216]	; (8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b74:	ee07 3a90 	vmov	s15, r3
 8005b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b80:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005c50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005b84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b9c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005b9e:	4b2a      	ldr	r3, [pc, #168]	; (8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	0a5b      	lsrs	r3, r3, #9
 8005ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ba8:	ee07 3a90 	vmov	s15, r3
 8005bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bc4:	ee17 2a90 	vmov	r2, s15
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005bcc:	4b1e      	ldr	r3, [pc, #120]	; (8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd0:	0c1b      	lsrs	r3, r3, #16
 8005bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005be2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005be6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bf2:	ee17 2a90 	vmov	r2, s15
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005bfa:	4b13      	ldr	r3, [pc, #76]	; (8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	0e1b      	lsrs	r3, r3, #24
 8005c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c04:	ee07 3a90 	vmov	s15, r3
 8005c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c14:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c20:	ee17 2a90 	vmov	r2, s15
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005c28:	e008      	b.n	8005c3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	609a      	str	r2, [r3, #8]
}
 8005c3c:	bf00      	nop
 8005c3e:	3724      	adds	r7, #36	; 0x24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	58024400 	.word	0x58024400
 8005c4c:	03d09000 	.word	0x03d09000
 8005c50:	46000000 	.word	0x46000000
 8005c54:	4c742400 	.word	0x4c742400
 8005c58:	4a742400 	.word	0x4a742400
 8005c5c:	4bbebc20 	.word	0x4bbebc20

08005c60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c6e:	4b53      	ldr	r3, [pc, #332]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c72:	f003 0303 	and.w	r3, r3, #3
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d101      	bne.n	8005c7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e099      	b.n	8005db2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005c7e:	4b4f      	ldr	r3, [pc, #316]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a4e      	ldr	r2, [pc, #312]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005c84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c8a:	f7fb f86b 	bl	8000d64 <HAL_GetTick>
 8005c8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c90:	e008      	b.n	8005ca4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c92:	f7fb f867 	bl	8000d64 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d901      	bls.n	8005ca4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e086      	b.n	8005db2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ca4:	4b45      	ldr	r3, [pc, #276]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1f0      	bne.n	8005c92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005cb0:	4b42      	ldr	r3, [pc, #264]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	031b      	lsls	r3, r3, #12
 8005cbe:	493f      	ldr	r1, [pc, #252]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	628b      	str	r3, [r1, #40]	; 0x28
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	025b      	lsls	r3, r3, #9
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	041b      	lsls	r3, r3, #16
 8005ce2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	061b      	lsls	r3, r3, #24
 8005cf0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005cf4:	4931      	ldr	r1, [pc, #196]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005cfa:	4b30      	ldr	r3, [pc, #192]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	492d      	ldr	r1, [pc, #180]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005d0c:	4b2b      	ldr	r3, [pc, #172]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	f023 0220 	bic.w	r2, r3, #32
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	4928      	ldr	r1, [pc, #160]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005d1e:	4b27      	ldr	r3, [pc, #156]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d22:	4a26      	ldr	r2, [pc, #152]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005d24:	f023 0310 	bic.w	r3, r3, #16
 8005d28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005d2a:	4b24      	ldr	r3, [pc, #144]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005d2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d2e:	4b24      	ldr	r3, [pc, #144]	; (8005dc0 <RCCEx_PLL2_Config+0x160>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	69d2      	ldr	r2, [r2, #28]
 8005d36:	00d2      	lsls	r2, r2, #3
 8005d38:	4920      	ldr	r1, [pc, #128]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005d3e:	4b1f      	ldr	r3, [pc, #124]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d42:	4a1e      	ldr	r2, [pc, #120]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005d44:	f043 0310 	orr.w	r3, r3, #16
 8005d48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d106      	bne.n	8005d5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005d50:	4b1a      	ldr	r3, [pc, #104]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	4a19      	ldr	r2, [pc, #100]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005d56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d5c:	e00f      	b.n	8005d7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d106      	bne.n	8005d72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005d64:	4b15      	ldr	r3, [pc, #84]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	4a14      	ldr	r2, [pc, #80]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005d6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d70:	e005      	b.n	8005d7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005d72:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d76:	4a11      	ldr	r2, [pc, #68]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005d78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005d7e:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a0e      	ldr	r2, [pc, #56]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005d84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d8a:	f7fa ffeb 	bl	8000d64 <HAL_GetTick>
 8005d8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d90:	e008      	b.n	8005da4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d92:	f7fa ffe7 	bl	8000d64 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d901      	bls.n	8005da4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e006      	b.n	8005db2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005da4:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <RCCEx_PLL2_Config+0x15c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0f0      	beq.n	8005d92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	58024400 	.word	0x58024400
 8005dc0:	ffff0007 	.word	0xffff0007

08005dc4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005dd2:	4b53      	ldr	r3, [pc, #332]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d101      	bne.n	8005de2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e099      	b.n	8005f16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005de2:	4b4f      	ldr	r3, [pc, #316]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a4e      	ldr	r2, [pc, #312]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dee:	f7fa ffb9 	bl	8000d64 <HAL_GetTick>
 8005df2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005df4:	e008      	b.n	8005e08 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005df6:	f7fa ffb5 	bl	8000d64 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d901      	bls.n	8005e08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e086      	b.n	8005f16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e08:	4b45      	ldr	r3, [pc, #276]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1f0      	bne.n	8005df6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005e14:	4b42      	ldr	r3, [pc, #264]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e18:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	051b      	lsls	r3, r3, #20
 8005e22:	493f      	ldr	r1, [pc, #252]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	628b      	str	r3, [r1, #40]	; 0x28
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	025b      	lsls	r3, r3, #9
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	041b      	lsls	r3, r3, #16
 8005e46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	3b01      	subs	r3, #1
 8005e52:	061b      	lsls	r3, r3, #24
 8005e54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e58:	4931      	ldr	r1, [pc, #196]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e5e:	4b30      	ldr	r3, [pc, #192]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	492d      	ldr	r1, [pc, #180]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005e70:	4b2b      	ldr	r3, [pc, #172]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	4928      	ldr	r1, [pc, #160]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005e82:	4b27      	ldr	r3, [pc, #156]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e86:	4a26      	ldr	r2, [pc, #152]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005e8e:	4b24      	ldr	r3, [pc, #144]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e92:	4b24      	ldr	r3, [pc, #144]	; (8005f24 <RCCEx_PLL3_Config+0x160>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	69d2      	ldr	r2, [r2, #28]
 8005e9a:	00d2      	lsls	r2, r2, #3
 8005e9c:	4920      	ldr	r1, [pc, #128]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005ea2:	4b1f      	ldr	r3, [pc, #124]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea6:	4a1e      	ldr	r2, [pc, #120]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d106      	bne.n	8005ec2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005eb4:	4b1a      	ldr	r3, [pc, #104]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	4a19      	ldr	r2, [pc, #100]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005eba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ebe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ec0:	e00f      	b.n	8005ee2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d106      	bne.n	8005ed6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ec8:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	4a14      	ldr	r2, [pc, #80]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005ece:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ed2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ed4:	e005      	b.n	8005ee2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005ed6:	4b12      	ldr	r3, [pc, #72]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eda:	4a11      	ldr	r2, [pc, #68]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005edc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ee0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005ee2:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a0e      	ldr	r2, [pc, #56]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eee:	f7fa ff39 	bl	8000d64 <HAL_GetTick>
 8005ef2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ef4:	e008      	b.n	8005f08 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ef6:	f7fa ff35 	bl	8000d64 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e006      	b.n	8005f16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f08:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <RCCEx_PLL3_Config+0x15c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0f0      	beq.n	8005ef6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	58024400 	.word	0x58024400
 8005f24:	ffff0007 	.word	0xffff0007

08005f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e049      	b.n	8005fce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d106      	bne.n	8005f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f841 	bl	8005fd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	3304      	adds	r3, #4
 8005f64:	4619      	mov	r1, r3
 8005f66:	4610      	mov	r0, r2
 8005f68:	f000 fa00 	bl	800636c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
	...

08005fec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d001      	beq.n	8006004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e054      	b.n	80060ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a26      	ldr	r2, [pc, #152]	; (80060bc <HAL_TIM_Base_Start_IT+0xd0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d022      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800602e:	d01d      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a22      	ldr	r2, [pc, #136]	; (80060c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d018      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a21      	ldr	r2, [pc, #132]	; (80060c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d013      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1f      	ldr	r2, [pc, #124]	; (80060c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00e      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a1e      	ldr	r2, [pc, #120]	; (80060cc <HAL_TIM_Base_Start_IT+0xe0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a1c      	ldr	r2, [pc, #112]	; (80060d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d004      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a1b      	ldr	r2, [pc, #108]	; (80060d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d115      	bne.n	8006098 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	4b19      	ldr	r3, [pc, #100]	; (80060d8 <HAL_TIM_Base_Start_IT+0xec>)
 8006074:	4013      	ands	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2b06      	cmp	r3, #6
 800607c:	d015      	beq.n	80060aa <HAL_TIM_Base_Start_IT+0xbe>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006084:	d011      	beq.n	80060aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0201 	orr.w	r2, r2, #1
 8006094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006096:	e008      	b.n	80060aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0201 	orr.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	e000      	b.n	80060ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40000400 	.word	0x40000400
 80060c4:	40000800 	.word	0x40000800
 80060c8:	40000c00 	.word	0x40000c00
 80060cc:	40010400 	.word	0x40010400
 80060d0:	40001800 	.word	0x40001800
 80060d4:	40014000 	.word	0x40014000
 80060d8:	00010007 	.word	0x00010007

080060dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d122      	bne.n	8006138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d11b      	bne.n	8006138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0202 	mvn.w	r2, #2
 8006108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f905 	bl	800632e <HAL_TIM_IC_CaptureCallback>
 8006124:	e005      	b.n	8006132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f8f7 	bl	800631a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f908 	bl	8006342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b04      	cmp	r3, #4
 8006144:	d122      	bne.n	800618c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b04      	cmp	r3, #4
 8006152:	d11b      	bne.n	800618c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f06f 0204 	mvn.w	r2, #4
 800615c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2202      	movs	r2, #2
 8006162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f8db 	bl	800632e <HAL_TIM_IC_CaptureCallback>
 8006178:	e005      	b.n	8006186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f8cd 	bl	800631a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f8de 	bl	8006342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0308 	and.w	r3, r3, #8
 8006196:	2b08      	cmp	r3, #8
 8006198:	d122      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f003 0308 	and.w	r3, r3, #8
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d11b      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0208 	mvn.w	r2, #8
 80061b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2204      	movs	r2, #4
 80061b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f8b1 	bl	800632e <HAL_TIM_IC_CaptureCallback>
 80061cc:	e005      	b.n	80061da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f8a3 	bl	800631a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f8b4 	bl	8006342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0310 	and.w	r3, r3, #16
 80061ea:	2b10      	cmp	r3, #16
 80061ec:	d122      	bne.n	8006234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0310 	and.w	r3, r3, #16
 80061f8:	2b10      	cmp	r3, #16
 80061fa:	d11b      	bne.n	8006234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0210 	mvn.w	r2, #16
 8006204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2208      	movs	r2, #8
 800620a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f887 	bl	800632e <HAL_TIM_IC_CaptureCallback>
 8006220:	e005      	b.n	800622e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f879 	bl	800631a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f88a 	bl	8006342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b01      	cmp	r3, #1
 8006240:	d10e      	bne.n	8006260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b01      	cmp	r3, #1
 800624e:	d107      	bne.n	8006260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f06f 0201 	mvn.w	r2, #1
 8006258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fa faac 	bl	80007b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626a:	2b80      	cmp	r3, #128	; 0x80
 800626c:	d10e      	bne.n	800628c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006278:	2b80      	cmp	r3, #128	; 0x80
 800627a:	d107      	bne.n	800628c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f914 	bl	80064b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800629a:	d10e      	bne.n	80062ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a6:	2b80      	cmp	r3, #128	; 0x80
 80062a8:	d107      	bne.n	80062ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f907 	bl	80064c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c4:	2b40      	cmp	r3, #64	; 0x40
 80062c6:	d10e      	bne.n	80062e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d2:	2b40      	cmp	r3, #64	; 0x40
 80062d4:	d107      	bne.n	80062e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f838 	bl	8006356 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f003 0320 	and.w	r3, r3, #32
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	d10e      	bne.n	8006312 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f003 0320 	and.w	r3, r3, #32
 80062fe:	2b20      	cmp	r3, #32
 8006300:	d107      	bne.n	8006312 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f06f 0220 	mvn.w	r2, #32
 800630a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f8c7 	bl	80064a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006312:	bf00      	nop
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006322:	bf00      	nop
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800632e:	b480      	push	{r7}
 8006330:	b083      	sub	sp, #12
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
	...

0800636c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a40      	ldr	r2, [pc, #256]	; (8006480 <TIM_Base_SetConfig+0x114>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d013      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638a:	d00f      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a3d      	ldr	r2, [pc, #244]	; (8006484 <TIM_Base_SetConfig+0x118>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00b      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a3c      	ldr	r2, [pc, #240]	; (8006488 <TIM_Base_SetConfig+0x11c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d007      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a3b      	ldr	r2, [pc, #236]	; (800648c <TIM_Base_SetConfig+0x120>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d003      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a3a      	ldr	r2, [pc, #232]	; (8006490 <TIM_Base_SetConfig+0x124>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d108      	bne.n	80063be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a2f      	ldr	r2, [pc, #188]	; (8006480 <TIM_Base_SetConfig+0x114>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d01f      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063cc:	d01b      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a2c      	ldr	r2, [pc, #176]	; (8006484 <TIM_Base_SetConfig+0x118>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d017      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a2b      	ldr	r2, [pc, #172]	; (8006488 <TIM_Base_SetConfig+0x11c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d013      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a2a      	ldr	r2, [pc, #168]	; (800648c <TIM_Base_SetConfig+0x120>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00f      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a29      	ldr	r2, [pc, #164]	; (8006490 <TIM_Base_SetConfig+0x124>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d00b      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a28      	ldr	r2, [pc, #160]	; (8006494 <TIM_Base_SetConfig+0x128>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d007      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a27      	ldr	r2, [pc, #156]	; (8006498 <TIM_Base_SetConfig+0x12c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d003      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a26      	ldr	r2, [pc, #152]	; (800649c <TIM_Base_SetConfig+0x130>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d108      	bne.n	8006418 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800640c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4313      	orrs	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a10      	ldr	r2, [pc, #64]	; (8006480 <TIM_Base_SetConfig+0x114>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00f      	beq.n	8006464 <TIM_Base_SetConfig+0xf8>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a12      	ldr	r2, [pc, #72]	; (8006490 <TIM_Base_SetConfig+0x124>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00b      	beq.n	8006464 <TIM_Base_SetConfig+0xf8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a11      	ldr	r2, [pc, #68]	; (8006494 <TIM_Base_SetConfig+0x128>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d007      	beq.n	8006464 <TIM_Base_SetConfig+0xf8>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a10      	ldr	r2, [pc, #64]	; (8006498 <TIM_Base_SetConfig+0x12c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d003      	beq.n	8006464 <TIM_Base_SetConfig+0xf8>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a0f      	ldr	r2, [pc, #60]	; (800649c <TIM_Base_SetConfig+0x130>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d103      	bne.n	800646c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	615a      	str	r2, [r3, #20]
}
 8006472:	bf00      	nop
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40010000 	.word	0x40010000
 8006484:	40000400 	.word	0x40000400
 8006488:	40000800 	.word	0x40000800
 800648c:	40000c00 	.word	0x40000c00
 8006490:	40010400 	.word	0x40010400
 8006494:	40014000 	.word	0x40014000
 8006498:	40014400 	.word	0x40014400
 800649c:	40014800 	.word	0x40014800

080064a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <memset>:
 80064dc:	4402      	add	r2, r0
 80064de:	4603      	mov	r3, r0
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d100      	bne.n	80064e6 <memset+0xa>
 80064e4:	4770      	bx	lr
 80064e6:	f803 1b01 	strb.w	r1, [r3], #1
 80064ea:	e7f9      	b.n	80064e0 <memset+0x4>

080064ec <__libc_init_array>:
 80064ec:	b570      	push	{r4, r5, r6, lr}
 80064ee:	4d0d      	ldr	r5, [pc, #52]	; (8006524 <__libc_init_array+0x38>)
 80064f0:	4c0d      	ldr	r4, [pc, #52]	; (8006528 <__libc_init_array+0x3c>)
 80064f2:	1b64      	subs	r4, r4, r5
 80064f4:	10a4      	asrs	r4, r4, #2
 80064f6:	2600      	movs	r6, #0
 80064f8:	42a6      	cmp	r6, r4
 80064fa:	d109      	bne.n	8006510 <__libc_init_array+0x24>
 80064fc:	4d0b      	ldr	r5, [pc, #44]	; (800652c <__libc_init_array+0x40>)
 80064fe:	4c0c      	ldr	r4, [pc, #48]	; (8006530 <__libc_init_array+0x44>)
 8006500:	f000 f818 	bl	8006534 <_init>
 8006504:	1b64      	subs	r4, r4, r5
 8006506:	10a4      	asrs	r4, r4, #2
 8006508:	2600      	movs	r6, #0
 800650a:	42a6      	cmp	r6, r4
 800650c:	d105      	bne.n	800651a <__libc_init_array+0x2e>
 800650e:	bd70      	pop	{r4, r5, r6, pc}
 8006510:	f855 3b04 	ldr.w	r3, [r5], #4
 8006514:	4798      	blx	r3
 8006516:	3601      	adds	r6, #1
 8006518:	e7ee      	b.n	80064f8 <__libc_init_array+0xc>
 800651a:	f855 3b04 	ldr.w	r3, [r5], #4
 800651e:	4798      	blx	r3
 8006520:	3601      	adds	r6, #1
 8006522:	e7f2      	b.n	800650a <__libc_init_array+0x1e>
 8006524:	0800655c 	.word	0x0800655c
 8006528:	0800655c 	.word	0x0800655c
 800652c:	0800655c 	.word	0x0800655c
 8006530:	08006560 	.word	0x08006560

08006534 <_init>:
 8006534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006536:	bf00      	nop
 8006538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653a:	bc08      	pop	{r3}
 800653c:	469e      	mov	lr, r3
 800653e:	4770      	bx	lr

08006540 <_fini>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	bf00      	nop
 8006544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006546:	bc08      	pop	{r3}
 8006548:	469e      	mov	lr, r3
 800654a:	4770      	bx	lr
