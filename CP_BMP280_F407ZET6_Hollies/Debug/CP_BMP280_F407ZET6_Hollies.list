
CP_BMP280_F407ZET6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009af8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08009c88  08009c88  00019c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a120  0800a120  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a120  0800a120  0001a120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a128  0800a128  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a128  0800a128  0001a128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a12c  0800a12c  0001a12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000344  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000518  20000518  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001149f  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002732  00000000  00000000  000316e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fd0  00000000  00000000  00033e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c67  00000000  00000000  00034de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022f95  00000000  00000000  00035a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014e7e  00000000  00000000  000589e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cfb07  00000000  00000000  0006d862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005840  00000000  00000000  0013d36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00142bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c70 	.word	0x08009c70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009c70 	.word	0x08009c70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	; 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_ldivmod>:
 8000ea4:	b97b      	cbnz	r3, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea6:	b972      	cbnz	r2, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bfbe      	ittt	lt
 8000eac:	2000      	movlt	r0, #0
 8000eae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000eb2:	e006      	blt.n	8000ec2 <__aeabi_ldivmod+0x1e>
 8000eb4:	bf08      	it	eq
 8000eb6:	2800      	cmpeq	r0, #0
 8000eb8:	bf1c      	itt	ne
 8000eba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ebe:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec2:	f000 ba25 	b.w	8001310 <__aeabi_idiv0>
 8000ec6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	db09      	blt.n	8000ee6 <__aeabi_ldivmod+0x42>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db1a      	blt.n	8000f0c <__aeabi_ldivmod+0x68>
 8000ed6:	f000 f8b7 	bl	8001048 <__udivmoddi4>
 8000eda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	4240      	negs	r0, r0
 8000ee8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db1b      	blt.n	8000f28 <__aeabi_ldivmod+0x84>
 8000ef0:	f000 f8aa 	bl	8001048 <__udivmoddi4>
 8000ef4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efc:	b004      	add	sp, #16
 8000efe:	4240      	negs	r0, r0
 8000f00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f04:	4252      	negs	r2, r2
 8000f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f0a:	4770      	bx	lr
 8000f0c:	4252      	negs	r2, r2
 8000f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f12:	f000 f899 	bl	8001048 <__udivmoddi4>
 8000f16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1e:	b004      	add	sp, #16
 8000f20:	4240      	negs	r0, r0
 8000f22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f26:	4770      	bx	lr
 8000f28:	4252      	negs	r2, r2
 8000f2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2e:	f000 f88b 	bl	8001048 <__udivmoddi4>
 8000f32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3a:	b004      	add	sp, #16
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	4770      	bx	lr

08000f44 <__aeabi_uldivmod>:
 8000f44:	b953      	cbnz	r3, 8000f5c <__aeabi_uldivmod+0x18>
 8000f46:	b94a      	cbnz	r2, 8000f5c <__aeabi_uldivmod+0x18>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bf08      	it	eq
 8000f4c:	2800      	cmpeq	r0, #0
 8000f4e:	bf1c      	itt	ne
 8000f50:	f04f 31ff 	movne.w	r1, #4294967295
 8000f54:	f04f 30ff 	movne.w	r0, #4294967295
 8000f58:	f000 b9da 	b.w	8001310 <__aeabi_idiv0>
 8000f5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f64:	f000 f870 	bl	8001048 <__udivmoddi4>
 8000f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <__aeabi_f2lz>:
 8000f74:	ee07 0a90 	vmov	s15, r0
 8000f78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f80:	d401      	bmi.n	8000f86 <__aeabi_f2lz+0x12>
 8000f82:	f000 b823 	b.w	8000fcc <__aeabi_f2ulz>
 8000f86:	eef1 7a67 	vneg.f32	s15, s15
 8000f8a:	b508      	push	{r3, lr}
 8000f8c:	ee17 0a90 	vmov	r0, s15
 8000f90:	f000 f81c 	bl	8000fcc <__aeabi_f2ulz>
 8000f94:	4240      	negs	r0, r0
 8000f96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f9a:	bd08      	pop	{r3, pc}

08000f9c <__aeabi_d2lz>:
 8000f9c:	b538      	push	{r3, r4, r5, lr}
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	460d      	mov	r5, r1
 8000fa6:	f7ff fd99 	bl	8000adc <__aeabi_dcmplt>
 8000faa:	b928      	cbnz	r0, 8000fb8 <__aeabi_d2lz+0x1c>
 8000fac:	4620      	mov	r0, r4
 8000fae:	4629      	mov	r1, r5
 8000fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fb4:	f000 b82a 	b.w	800100c <__aeabi_d2ulz>
 8000fb8:	4620      	mov	r0, r4
 8000fba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000fbe:	f000 f825 	bl	800100c <__aeabi_d2ulz>
 8000fc2:	4240      	negs	r0, r0
 8000fc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fc8:	bd38      	pop	{r3, r4, r5, pc}
 8000fca:	bf00      	nop

08000fcc <__aeabi_f2ulz>:
 8000fcc:	b5d0      	push	{r4, r6, r7, lr}
 8000fce:	f7ff fabb 	bl	8000548 <__aeabi_f2d>
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <__aeabi_f2ulz+0x38>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	4606      	mov	r6, r0
 8000fd8:	460f      	mov	r7, r1
 8000fda:	f7ff fb0d 	bl	80005f8 <__aeabi_dmul>
 8000fde:	f7ff fde3 	bl	8000ba8 <__aeabi_d2uiz>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	f7ff fa8e 	bl	8000504 <__aeabi_ui2d>
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <__aeabi_f2ulz+0x3c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	f7ff fb04 	bl	80005f8 <__aeabi_dmul>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	4639      	mov	r1, r7
 8000ff8:	f7ff f946 	bl	8000288 <__aeabi_dsub>
 8000ffc:	f7ff fdd4 	bl	8000ba8 <__aeabi_d2uiz>
 8001000:	4621      	mov	r1, r4
 8001002:	bdd0      	pop	{r4, r6, r7, pc}
 8001004:	3df00000 	.word	0x3df00000
 8001008:	41f00000 	.word	0x41f00000

0800100c <__aeabi_d2ulz>:
 800100c:	b5d0      	push	{r4, r6, r7, lr}
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <__aeabi_d2ulz+0x34>)
 8001010:	2200      	movs	r2, #0
 8001012:	4606      	mov	r6, r0
 8001014:	460f      	mov	r7, r1
 8001016:	f7ff faef 	bl	80005f8 <__aeabi_dmul>
 800101a:	f7ff fdc5 	bl	8000ba8 <__aeabi_d2uiz>
 800101e:	4604      	mov	r4, r0
 8001020:	f7ff fa70 	bl	8000504 <__aeabi_ui2d>
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <__aeabi_d2ulz+0x38>)
 8001026:	2200      	movs	r2, #0
 8001028:	f7ff fae6 	bl	80005f8 <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4630      	mov	r0, r6
 8001032:	4639      	mov	r1, r7
 8001034:	f7ff f928 	bl	8000288 <__aeabi_dsub>
 8001038:	f7ff fdb6 	bl	8000ba8 <__aeabi_d2uiz>
 800103c:	4621      	mov	r1, r4
 800103e:	bdd0      	pop	{r4, r6, r7, pc}
 8001040:	3df00000 	.word	0x3df00000
 8001044:	41f00000 	.word	0x41f00000

08001048 <__udivmoddi4>:
 8001048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800104c:	9e08      	ldr	r6, [sp, #32]
 800104e:	460d      	mov	r5, r1
 8001050:	4604      	mov	r4, r0
 8001052:	460f      	mov	r7, r1
 8001054:	2b00      	cmp	r3, #0
 8001056:	d14a      	bne.n	80010ee <__udivmoddi4+0xa6>
 8001058:	428a      	cmp	r2, r1
 800105a:	4694      	mov	ip, r2
 800105c:	d965      	bls.n	800112a <__udivmoddi4+0xe2>
 800105e:	fab2 f382 	clz	r3, r2
 8001062:	b143      	cbz	r3, 8001076 <__udivmoddi4+0x2e>
 8001064:	fa02 fc03 	lsl.w	ip, r2, r3
 8001068:	f1c3 0220 	rsb	r2, r3, #32
 800106c:	409f      	lsls	r7, r3
 800106e:	fa20 f202 	lsr.w	r2, r0, r2
 8001072:	4317      	orrs	r7, r2
 8001074:	409c      	lsls	r4, r3
 8001076:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800107a:	fa1f f58c 	uxth.w	r5, ip
 800107e:	fbb7 f1fe 	udiv	r1, r7, lr
 8001082:	0c22      	lsrs	r2, r4, #16
 8001084:	fb0e 7711 	mls	r7, lr, r1, r7
 8001088:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800108c:	fb01 f005 	mul.w	r0, r1, r5
 8001090:	4290      	cmp	r0, r2
 8001092:	d90a      	bls.n	80010aa <__udivmoddi4+0x62>
 8001094:	eb1c 0202 	adds.w	r2, ip, r2
 8001098:	f101 37ff 	add.w	r7, r1, #4294967295
 800109c:	f080 811c 	bcs.w	80012d8 <__udivmoddi4+0x290>
 80010a0:	4290      	cmp	r0, r2
 80010a2:	f240 8119 	bls.w	80012d8 <__udivmoddi4+0x290>
 80010a6:	3902      	subs	r1, #2
 80010a8:	4462      	add	r2, ip
 80010aa:	1a12      	subs	r2, r2, r0
 80010ac:	b2a4      	uxth	r4, r4
 80010ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80010b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80010b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80010ba:	fb00 f505 	mul.w	r5, r0, r5
 80010be:	42a5      	cmp	r5, r4
 80010c0:	d90a      	bls.n	80010d8 <__udivmoddi4+0x90>
 80010c2:	eb1c 0404 	adds.w	r4, ip, r4
 80010c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80010ca:	f080 8107 	bcs.w	80012dc <__udivmoddi4+0x294>
 80010ce:	42a5      	cmp	r5, r4
 80010d0:	f240 8104 	bls.w	80012dc <__udivmoddi4+0x294>
 80010d4:	4464      	add	r4, ip
 80010d6:	3802      	subs	r0, #2
 80010d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80010dc:	1b64      	subs	r4, r4, r5
 80010de:	2100      	movs	r1, #0
 80010e0:	b11e      	cbz	r6, 80010ea <__udivmoddi4+0xa2>
 80010e2:	40dc      	lsrs	r4, r3
 80010e4:	2300      	movs	r3, #0
 80010e6:	e9c6 4300 	strd	r4, r3, [r6]
 80010ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ee:	428b      	cmp	r3, r1
 80010f0:	d908      	bls.n	8001104 <__udivmoddi4+0xbc>
 80010f2:	2e00      	cmp	r6, #0
 80010f4:	f000 80ed 	beq.w	80012d2 <__udivmoddi4+0x28a>
 80010f8:	2100      	movs	r1, #0
 80010fa:	e9c6 0500 	strd	r0, r5, [r6]
 80010fe:	4608      	mov	r0, r1
 8001100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001104:	fab3 f183 	clz	r1, r3
 8001108:	2900      	cmp	r1, #0
 800110a:	d149      	bne.n	80011a0 <__udivmoddi4+0x158>
 800110c:	42ab      	cmp	r3, r5
 800110e:	d302      	bcc.n	8001116 <__udivmoddi4+0xce>
 8001110:	4282      	cmp	r2, r0
 8001112:	f200 80f8 	bhi.w	8001306 <__udivmoddi4+0x2be>
 8001116:	1a84      	subs	r4, r0, r2
 8001118:	eb65 0203 	sbc.w	r2, r5, r3
 800111c:	2001      	movs	r0, #1
 800111e:	4617      	mov	r7, r2
 8001120:	2e00      	cmp	r6, #0
 8001122:	d0e2      	beq.n	80010ea <__udivmoddi4+0xa2>
 8001124:	e9c6 4700 	strd	r4, r7, [r6]
 8001128:	e7df      	b.n	80010ea <__udivmoddi4+0xa2>
 800112a:	b902      	cbnz	r2, 800112e <__udivmoddi4+0xe6>
 800112c:	deff      	udf	#255	; 0xff
 800112e:	fab2 f382 	clz	r3, r2
 8001132:	2b00      	cmp	r3, #0
 8001134:	f040 8090 	bne.w	8001258 <__udivmoddi4+0x210>
 8001138:	1a8a      	subs	r2, r1, r2
 800113a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800113e:	fa1f fe8c 	uxth.w	lr, ip
 8001142:	2101      	movs	r1, #1
 8001144:	fbb2 f5f7 	udiv	r5, r2, r7
 8001148:	fb07 2015 	mls	r0, r7, r5, r2
 800114c:	0c22      	lsrs	r2, r4, #16
 800114e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001152:	fb0e f005 	mul.w	r0, lr, r5
 8001156:	4290      	cmp	r0, r2
 8001158:	d908      	bls.n	800116c <__udivmoddi4+0x124>
 800115a:	eb1c 0202 	adds.w	r2, ip, r2
 800115e:	f105 38ff 	add.w	r8, r5, #4294967295
 8001162:	d202      	bcs.n	800116a <__udivmoddi4+0x122>
 8001164:	4290      	cmp	r0, r2
 8001166:	f200 80cb 	bhi.w	8001300 <__udivmoddi4+0x2b8>
 800116a:	4645      	mov	r5, r8
 800116c:	1a12      	subs	r2, r2, r0
 800116e:	b2a4      	uxth	r4, r4
 8001170:	fbb2 f0f7 	udiv	r0, r2, r7
 8001174:	fb07 2210 	mls	r2, r7, r0, r2
 8001178:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800117c:	fb0e fe00 	mul.w	lr, lr, r0
 8001180:	45a6      	cmp	lr, r4
 8001182:	d908      	bls.n	8001196 <__udivmoddi4+0x14e>
 8001184:	eb1c 0404 	adds.w	r4, ip, r4
 8001188:	f100 32ff 	add.w	r2, r0, #4294967295
 800118c:	d202      	bcs.n	8001194 <__udivmoddi4+0x14c>
 800118e:	45a6      	cmp	lr, r4
 8001190:	f200 80bb 	bhi.w	800130a <__udivmoddi4+0x2c2>
 8001194:	4610      	mov	r0, r2
 8001196:	eba4 040e 	sub.w	r4, r4, lr
 800119a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800119e:	e79f      	b.n	80010e0 <__udivmoddi4+0x98>
 80011a0:	f1c1 0720 	rsb	r7, r1, #32
 80011a4:	408b      	lsls	r3, r1
 80011a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80011aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80011ae:	fa05 f401 	lsl.w	r4, r5, r1
 80011b2:	fa20 f307 	lsr.w	r3, r0, r7
 80011b6:	40fd      	lsrs	r5, r7
 80011b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80011bc:	4323      	orrs	r3, r4
 80011be:	fbb5 f8f9 	udiv	r8, r5, r9
 80011c2:	fa1f fe8c 	uxth.w	lr, ip
 80011c6:	fb09 5518 	mls	r5, r9, r8, r5
 80011ca:	0c1c      	lsrs	r4, r3, #16
 80011cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80011d0:	fb08 f50e 	mul.w	r5, r8, lr
 80011d4:	42a5      	cmp	r5, r4
 80011d6:	fa02 f201 	lsl.w	r2, r2, r1
 80011da:	fa00 f001 	lsl.w	r0, r0, r1
 80011de:	d90b      	bls.n	80011f8 <__udivmoddi4+0x1b0>
 80011e0:	eb1c 0404 	adds.w	r4, ip, r4
 80011e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80011e8:	f080 8088 	bcs.w	80012fc <__udivmoddi4+0x2b4>
 80011ec:	42a5      	cmp	r5, r4
 80011ee:	f240 8085 	bls.w	80012fc <__udivmoddi4+0x2b4>
 80011f2:	f1a8 0802 	sub.w	r8, r8, #2
 80011f6:	4464      	add	r4, ip
 80011f8:	1b64      	subs	r4, r4, r5
 80011fa:	b29d      	uxth	r5, r3
 80011fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8001200:	fb09 4413 	mls	r4, r9, r3, r4
 8001204:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001208:	fb03 fe0e 	mul.w	lr, r3, lr
 800120c:	45a6      	cmp	lr, r4
 800120e:	d908      	bls.n	8001222 <__udivmoddi4+0x1da>
 8001210:	eb1c 0404 	adds.w	r4, ip, r4
 8001214:	f103 35ff 	add.w	r5, r3, #4294967295
 8001218:	d26c      	bcs.n	80012f4 <__udivmoddi4+0x2ac>
 800121a:	45a6      	cmp	lr, r4
 800121c:	d96a      	bls.n	80012f4 <__udivmoddi4+0x2ac>
 800121e:	3b02      	subs	r3, #2
 8001220:	4464      	add	r4, ip
 8001222:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001226:	fba3 9502 	umull	r9, r5, r3, r2
 800122a:	eba4 040e 	sub.w	r4, r4, lr
 800122e:	42ac      	cmp	r4, r5
 8001230:	46c8      	mov	r8, r9
 8001232:	46ae      	mov	lr, r5
 8001234:	d356      	bcc.n	80012e4 <__udivmoddi4+0x29c>
 8001236:	d053      	beq.n	80012e0 <__udivmoddi4+0x298>
 8001238:	b156      	cbz	r6, 8001250 <__udivmoddi4+0x208>
 800123a:	ebb0 0208 	subs.w	r2, r0, r8
 800123e:	eb64 040e 	sbc.w	r4, r4, lr
 8001242:	fa04 f707 	lsl.w	r7, r4, r7
 8001246:	40ca      	lsrs	r2, r1
 8001248:	40cc      	lsrs	r4, r1
 800124a:	4317      	orrs	r7, r2
 800124c:	e9c6 7400 	strd	r7, r4, [r6]
 8001250:	4618      	mov	r0, r3
 8001252:	2100      	movs	r1, #0
 8001254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001258:	f1c3 0120 	rsb	r1, r3, #32
 800125c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001260:	fa20 f201 	lsr.w	r2, r0, r1
 8001264:	fa25 f101 	lsr.w	r1, r5, r1
 8001268:	409d      	lsls	r5, r3
 800126a:	432a      	orrs	r2, r5
 800126c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001270:	fa1f fe8c 	uxth.w	lr, ip
 8001274:	fbb1 f0f7 	udiv	r0, r1, r7
 8001278:	fb07 1510 	mls	r5, r7, r0, r1
 800127c:	0c11      	lsrs	r1, r2, #16
 800127e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001282:	fb00 f50e 	mul.w	r5, r0, lr
 8001286:	428d      	cmp	r5, r1
 8001288:	fa04 f403 	lsl.w	r4, r4, r3
 800128c:	d908      	bls.n	80012a0 <__udivmoddi4+0x258>
 800128e:	eb1c 0101 	adds.w	r1, ip, r1
 8001292:	f100 38ff 	add.w	r8, r0, #4294967295
 8001296:	d22f      	bcs.n	80012f8 <__udivmoddi4+0x2b0>
 8001298:	428d      	cmp	r5, r1
 800129a:	d92d      	bls.n	80012f8 <__udivmoddi4+0x2b0>
 800129c:	3802      	subs	r0, #2
 800129e:	4461      	add	r1, ip
 80012a0:	1b49      	subs	r1, r1, r5
 80012a2:	b292      	uxth	r2, r2
 80012a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80012a8:	fb07 1115 	mls	r1, r7, r5, r1
 80012ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012b0:	fb05 f10e 	mul.w	r1, r5, lr
 80012b4:	4291      	cmp	r1, r2
 80012b6:	d908      	bls.n	80012ca <__udivmoddi4+0x282>
 80012b8:	eb1c 0202 	adds.w	r2, ip, r2
 80012bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80012c0:	d216      	bcs.n	80012f0 <__udivmoddi4+0x2a8>
 80012c2:	4291      	cmp	r1, r2
 80012c4:	d914      	bls.n	80012f0 <__udivmoddi4+0x2a8>
 80012c6:	3d02      	subs	r5, #2
 80012c8:	4462      	add	r2, ip
 80012ca:	1a52      	subs	r2, r2, r1
 80012cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80012d0:	e738      	b.n	8001144 <__udivmoddi4+0xfc>
 80012d2:	4631      	mov	r1, r6
 80012d4:	4630      	mov	r0, r6
 80012d6:	e708      	b.n	80010ea <__udivmoddi4+0xa2>
 80012d8:	4639      	mov	r1, r7
 80012da:	e6e6      	b.n	80010aa <__udivmoddi4+0x62>
 80012dc:	4610      	mov	r0, r2
 80012de:	e6fb      	b.n	80010d8 <__udivmoddi4+0x90>
 80012e0:	4548      	cmp	r0, r9
 80012e2:	d2a9      	bcs.n	8001238 <__udivmoddi4+0x1f0>
 80012e4:	ebb9 0802 	subs.w	r8, r9, r2
 80012e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80012ec:	3b01      	subs	r3, #1
 80012ee:	e7a3      	b.n	8001238 <__udivmoddi4+0x1f0>
 80012f0:	4645      	mov	r5, r8
 80012f2:	e7ea      	b.n	80012ca <__udivmoddi4+0x282>
 80012f4:	462b      	mov	r3, r5
 80012f6:	e794      	b.n	8001222 <__udivmoddi4+0x1da>
 80012f8:	4640      	mov	r0, r8
 80012fa:	e7d1      	b.n	80012a0 <__udivmoddi4+0x258>
 80012fc:	46d0      	mov	r8, sl
 80012fe:	e77b      	b.n	80011f8 <__udivmoddi4+0x1b0>
 8001300:	3d02      	subs	r5, #2
 8001302:	4462      	add	r2, ip
 8001304:	e732      	b.n	800116c <__udivmoddi4+0x124>
 8001306:	4608      	mov	r0, r1
 8001308:	e70a      	b.n	8001120 <__udivmoddi4+0xd8>
 800130a:	4464      	add	r4, ip
 800130c:	3802      	subs	r0, #2
 800130e:	e742      	b.n	8001196 <__udivmoddi4+0x14e>

08001310 <__aeabi_idiv0>:
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop

08001314 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <MX_GPIO_Init+0x84>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <MX_GPIO_Init+0x84>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <MX_GPIO_Init+0x84>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_GPIO_Init+0x84>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a16      	ldr	r2, [pc, #88]	; (8001398 <MX_GPIO_Init+0x84>)
 8001340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_GPIO_Init+0x84>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_GPIO_Init+0x84>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <MX_GPIO_Init+0x84>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <MX_GPIO_Init+0x84>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_GPIO_Init+0x84>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <MX_GPIO_Init+0x84>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_GPIO_Init+0x84>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]

}
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_I2C1_Init+0x50>)
 80013a2:	4a13      	ldr	r2, [pc, #76]	; (80013f0 <MX_I2C1_Init+0x54>)
 80013a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_I2C1_Init+0x50>)
 80013a8:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <MX_I2C1_Init+0x58>)
 80013aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_I2C1_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_I2C1_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_I2C1_Init+0x50>)
 80013ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <MX_I2C1_Init+0x50>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_I2C1_Init+0x50>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <MX_I2C1_Init+0x50>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_I2C1_Init+0x50>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_I2C1_Init+0x50>)
 80013da:	f000 fed5 	bl	8002188 <HAL_I2C_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013e4:	f000 f92e 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200001f0 	.word	0x200001f0
 80013f0:	40005400 	.word	0x40005400
 80013f4:	000186a0 	.word	0x000186a0

080013f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a19      	ldr	r2, [pc, #100]	; (800147c <HAL_I2C_MspInit+0x84>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d12b      	bne.n	8001472 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_I2C_MspInit+0x88>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a17      	ldr	r2, [pc, #92]	; (8001480 <HAL_I2C_MspInit+0x88>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_I2C_MspInit+0x88>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001436:	23c0      	movs	r3, #192	; 0xc0
 8001438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800143a:	2312      	movs	r3, #18
 800143c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001446:	2304      	movs	r3, #4
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <HAL_I2C_MspInit+0x8c>)
 8001452:	f000 fcfd 	bl	8001e50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_I2C_MspInit+0x88>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <HAL_I2C_MspInit+0x88>)
 8001460:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_I2C_MspInit+0x88>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	; 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40005400 	.word	0x40005400
 8001480:	40023800 	.word	0x40023800
 8001484:	40020400 	.word	0x40020400

08001488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001488:	b5b0      	push	{r4, r5, r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148e:	f000 fb97 	bl	8001bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001492:	f000 f85b 	bl	800154c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001496:	f7ff ff3d 	bl	8001314 <MX_GPIO_Init>
  MX_TIM8_Init();
 800149a:	f000 fa83 	bl	80019a4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800149e:	f000 faf3 	bl	8001a88 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80014a2:	f7ff ff7b 	bl	800139c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if(bmp280_init(&bmp280, &hi2c1) == HAL_OK)
 80014a6:	4922      	ldr	r1, [pc, #136]	; (8001530 <main+0xa8>)
 80014a8:	4822      	ldr	r0, [pc, #136]	; (8001534 <main+0xac>)
 80014aa:	f003 fbe9 	bl	8004c80 <bmp280_init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10a      	bne.n	80014ca <main+0x42>
  {
    sprintf((char *)pData, "BMP280 initialization OK");
 80014b4:	4920      	ldr	r1, [pc, #128]	; (8001538 <main+0xb0>)
 80014b6:	4821      	ldr	r0, [pc, #132]	; (800153c <main+0xb4>)
 80014b8:	f004 ff3c 	bl	8006334 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)pData, sizeof(pData), 100);
 80014bc:	2364      	movs	r3, #100	; 0x64
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	491e      	ldr	r1, [pc, #120]	; (800153c <main+0xb4>)
 80014c2:	481f      	ldr	r0, [pc, #124]	; (8001540 <main+0xb8>)
 80014c4:	f002 ffb9 	bl	800443a <HAL_UART_Transmit>
 80014c8:	e009      	b.n	80014de <main+0x56>
  }
  else
  {
    sprintf((char *)pData, "BMP280 initialization FAIL");
 80014ca:	491e      	ldr	r1, [pc, #120]	; (8001544 <main+0xbc>)
 80014cc:	481b      	ldr	r0, [pc, #108]	; (800153c <main+0xb4>)
 80014ce:	f004 ff31 	bl	8006334 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)pData, sizeof(pData), 100);
 80014d2:	2364      	movs	r3, #100	; 0x64
 80014d4:	2280      	movs	r2, #128	; 0x80
 80014d6:	4919      	ldr	r1, [pc, #100]	; (800153c <main+0xb4>)
 80014d8:	4819      	ldr	r0, [pc, #100]	; (8001540 <main+0xb8>)
 80014da:	f002 ffae 	bl	800443a <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    sprintf((char *)pData, "Temperature: %.2f ℃, p= %.2f", bmp280_getTemprature(&bmp280, &hi2c1), bmp280_getPressure(&bmp280, &hi2c1));
 80014de:	4914      	ldr	r1, [pc, #80]	; (8001530 <main+0xa8>)
 80014e0:	4814      	ldr	r0, [pc, #80]	; (8001534 <main+0xac>)
 80014e2:	f003 ff67 	bl	80053b4 <bmp280_getTemprature>
 80014e6:	ee10 3a10 	vmov	r3, s0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f82c 	bl	8000548 <__aeabi_f2d>
 80014f0:	4604      	mov	r4, r0
 80014f2:	460d      	mov	r5, r1
 80014f4:	490e      	ldr	r1, [pc, #56]	; (8001530 <main+0xa8>)
 80014f6:	480f      	ldr	r0, [pc, #60]	; (8001534 <main+0xac>)
 80014f8:	f003 ffa9 	bl	800544e <bmp280_getPressure>
 80014fc:	ee10 3a10 	vmov	r3, s0
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f821 	bl	8000548 <__aeabi_f2d>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	e9cd 2300 	strd	r2, r3, [sp]
 800150e:	4622      	mov	r2, r4
 8001510:	462b      	mov	r3, r5
 8001512:	490d      	ldr	r1, [pc, #52]	; (8001548 <main+0xc0>)
 8001514:	4809      	ldr	r0, [pc, #36]	; (800153c <main+0xb4>)
 8001516:	f004 ff0d 	bl	8006334 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)pData, sizeof(pData), 100);
 800151a:	2364      	movs	r3, #100	; 0x64
 800151c:	2280      	movs	r2, #128	; 0x80
 800151e:	4907      	ldr	r1, [pc, #28]	; (800153c <main+0xb4>)
 8001520:	4807      	ldr	r0, [pc, #28]	; (8001540 <main+0xb8>)
 8001522:	f002 ff8a 	bl	800443a <HAL_UART_Transmit>
    HAL_Delay(1000);
 8001526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800152a:	f000 fb8b 	bl	8001c44 <HAL_Delay>
    sprintf((char *)pData, "Temperature: %.2f ℃, p= %.2f", bmp280_getTemprature(&bmp280, &hi2c1), bmp280_getPressure(&bmp280, &hi2c1));
 800152e:	e7d6      	b.n	80014de <main+0x56>
 8001530:	200001f0 	.word	0x200001f0
 8001534:	20000244 	.word	0x20000244
 8001538:	08009c88 	.word	0x08009c88
 800153c:	20000270 	.word	0x20000270
 8001540:	20000384 	.word	0x20000384
 8001544:	08009ca4 	.word	0x08009ca4
 8001548:	08009cc0 	.word	0x08009cc0

0800154c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b094      	sub	sp, #80	; 0x50
 8001550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001552:	f107 0320 	add.w	r3, r7, #32
 8001556:	2230      	movs	r2, #48	; 0x30
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f004 ff4d 	bl	80063fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	4b28      	ldr	r3, [pc, #160]	; (8001618 <SystemClock_Config+0xcc>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	4a27      	ldr	r2, [pc, #156]	; (8001618 <SystemClock_Config+0xcc>)
 800157a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157e:	6413      	str	r3, [r2, #64]	; 0x40
 8001580:	4b25      	ldr	r3, [pc, #148]	; (8001618 <SystemClock_Config+0xcc>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	4b22      	ldr	r3, [pc, #136]	; (800161c <SystemClock_Config+0xd0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a21      	ldr	r2, [pc, #132]	; (800161c <SystemClock_Config+0xd0>)
 8001596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <SystemClock_Config+0xd0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015a8:	2301      	movs	r3, #1
 80015aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b2:	2302      	movs	r3, #2
 80015b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015bc:	2304      	movs	r3, #4
 80015be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015c0:	23a8      	movs	r3, #168	; 0xa8
 80015c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c4:	2302      	movs	r3, #2
 80015c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015c8:	2304      	movs	r3, #4
 80015ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015cc:	f107 0320 	add.w	r3, r7, #32
 80015d0:	4618      	mov	r0, r3
 80015d2:	f001 fd99 	bl	8003108 <HAL_RCC_OscConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015dc:	f000 f832 	bl	8001644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e0:	230f      	movs	r3, #15
 80015e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e4:	2302      	movs	r3, #2
 80015e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	2105      	movs	r1, #5
 80015fe:	4618      	mov	r0, r3
 8001600:	f001 fffa 	bl	80035f8 <HAL_RCC_ClockConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800160a:	f000 f81b 	bl	8001644 <Error_Handler>
  }
}
 800160e:	bf00      	nop
 8001610:	3750      	adds	r7, #80	; 0x50
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40007000 	.word	0x40007000

08001620 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d101      	bne.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001632:	f000 fae7 	bl	8001c04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40010000 	.word	0x40010000

08001644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
}
 800164a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800164c:	e7fe      	b.n	800164c <Error_Handler+0x8>
	...

08001650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_MspInit+0x4c>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a0f      	ldr	r2, [pc, #60]	; (800169c <HAL_MspInit+0x4c>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_MspInit+0x4c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_MspInit+0x4c>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a08      	ldr	r2, [pc, #32]	; (800169c <HAL_MspInit+0x4c>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_MspInit+0x4c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	; 0x30
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <HAL_InitTick+0xd4>)
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	4a2e      	ldr	r2, [pc, #184]	; (8001774 <HAL_InitTick+0xd4>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6453      	str	r3, [r2, #68]	; 0x44
 80016c0:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <HAL_InitTick+0xd4>)
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016cc:	f107 020c 	add.w	r2, r7, #12
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	4611      	mov	r1, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 f9ae 	bl	8003a38 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80016dc:	f002 f998 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 80016e0:	4603      	mov	r3, r0
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e8:	4a23      	ldr	r2, [pc, #140]	; (8001778 <HAL_InitTick+0xd8>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	0c9b      	lsrs	r3, r3, #18
 80016f0:	3b01      	subs	r3, #1
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <HAL_InitTick+0xdc>)
 80016f6:	4a22      	ldr	r2, [pc, #136]	; (8001780 <HAL_InitTick+0xe0>)
 80016f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_InitTick+0xdc>)
 80016fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001700:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001702:	4a1e      	ldr	r2, [pc, #120]	; (800177c <HAL_InitTick+0xdc>)
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <HAL_InitTick+0xdc>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_InitTick+0xdc>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_InitTick+0xdc>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800171a:	4818      	ldr	r0, [pc, #96]	; (800177c <HAL_InitTick+0xdc>)
 800171c:	f002 f9be 	bl	8003a9c <HAL_TIM_Base_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800172a:	2b00      	cmp	r3, #0
 800172c:	d11b      	bne.n	8001766 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800172e:	4813      	ldr	r0, [pc, #76]	; (800177c <HAL_InitTick+0xdc>)
 8001730:	f002 fa04 	bl	8003b3c <HAL_TIM_Base_Start_IT>
 8001734:	4603      	mov	r3, r0
 8001736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800173a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800173e:	2b00      	cmp	r3, #0
 8001740:	d111      	bne.n	8001766 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001742:	2019      	movs	r0, #25
 8001744:	f000 fb76 	bl	8001e34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b0f      	cmp	r3, #15
 800174c:	d808      	bhi.n	8001760 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800174e:	2200      	movs	r2, #0
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	2019      	movs	r0, #25
 8001754:	f000 fb52 	bl	8001dfc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001758:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_InitTick+0xe4>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e002      	b.n	8001766 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001766:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800176a:	4618      	mov	r0, r3
 800176c:	3730      	adds	r7, #48	; 0x30
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	431bde83 	.word	0x431bde83
 800177c:	200002f0 	.word	0x200002f0
 8001780:	40010000 	.word	0x40010000
 8001784:	20000004 	.word	0x20000004

08001788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800178c:	e7fe      	b.n	800178c <NMI_Handler+0x4>

0800178e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <HardFault_Handler+0x4>

08001794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <MemManage_Handler+0x4>

0800179a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <BusFault_Handler+0x4>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <UsageFault_Handler+0x4>

080017a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017e6:	f002 fa19 	bl	8003c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200002f0 	.word	0x200002f0

080017f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return 1;
 80017f8:	2301      	movs	r3, #1
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_kill>:

int _kill(int pid, int sig)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800180e:	f004 fe47 	bl	80064a0 <__errno>
 8001812:	4603      	mov	r3, r0
 8001814:	2216      	movs	r2, #22
 8001816:	601a      	str	r2, [r3, #0]
  return -1;
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_exit>:

void _exit (int status)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800182c:	f04f 31ff 	mov.w	r1, #4294967295
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ffe7 	bl	8001804 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001836:	e7fe      	b.n	8001836 <_exit+0x12>

08001838 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	e00a      	b.n	8001860 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800184a:	f3af 8000 	nop.w
 800184e:	4601      	mov	r1, r0
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	60ba      	str	r2, [r7, #8]
 8001856:	b2ca      	uxtb	r2, r1
 8001858:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	3301      	adds	r3, #1
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	429a      	cmp	r2, r3
 8001866:	dbf0      	blt.n	800184a <_read+0x12>
  }

  return len;
 8001868:	687b      	ldr	r3, [r7, #4]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	e009      	b.n	8001898 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	60ba      	str	r2, [r7, #8]
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3301      	adds	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	429a      	cmp	r2, r3
 800189e:	dbf1      	blt.n	8001884 <_write+0x12>
  }
  return len;
 80018a0:	687b      	ldr	r3, [r7, #4]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_close>:

int _close(int file)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018d2:	605a      	str	r2, [r3, #4]
  return 0;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <_isatty>:

int _isatty(int file)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800191c:	4a14      	ldr	r2, [pc, #80]	; (8001970 <_sbrk+0x5c>)
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <_sbrk+0x60>)
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <_sbrk+0x64>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <_sbrk+0x64>)
 8001932:	4a12      	ldr	r2, [pc, #72]	; (800197c <_sbrk+0x68>)
 8001934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	429a      	cmp	r2, r3
 8001942:	d207      	bcs.n	8001954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001944:	f004 fdac 	bl	80064a0 <__errno>
 8001948:	4603      	mov	r3, r0
 800194a:	220c      	movs	r2, #12
 800194c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
 8001952:	e009      	b.n	8001968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195a:	4b07      	ldr	r3, [pc, #28]	; (8001978 <_sbrk+0x64>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <_sbrk+0x64>)
 8001964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001966:	68fb      	ldr	r3, [r7, #12]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20020000 	.word	0x20020000
 8001974:	00000400 	.word	0x00000400
 8001978:	20000338 	.word	0x20000338
 800197c:	20000518 	.word	0x20000518

08001980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <SystemInit+0x20>)
 8001986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <SystemInit+0x20>)
 800198c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019aa:	f107 0308 	add.w	r3, r7, #8
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b8:	463b      	mov	r3, r7
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <MX_TIM8_Init+0x98>)
 80019c2:	4a1f      	ldr	r2, [pc, #124]	; (8001a40 <MX_TIM8_Init+0x9c>)
 80019c4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80019c6:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <MX_TIM8_Init+0x98>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <MX_TIM8_Init+0x98>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <MX_TIM8_Init+0x98>)
 80019d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <MX_TIM8_Init+0x98>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019e0:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <MX_TIM8_Init+0x98>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <MX_TIM8_Init+0x98>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80019ec:	4813      	ldr	r0, [pc, #76]	; (8001a3c <MX_TIM8_Init+0x98>)
 80019ee:	f002 f855 	bl	8003a9c <HAL_TIM_Base_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80019f8:	f7ff fe24 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	4619      	mov	r1, r3
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <MX_TIM8_Init+0x98>)
 8001a0a:	f002 fa0f 	bl	8003e2c <HAL_TIM_ConfigClockSource>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001a14:	f7ff fe16 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a20:	463b      	mov	r3, r7
 8001a22:	4619      	mov	r1, r3
 8001a24:	4805      	ldr	r0, [pc, #20]	; (8001a3c <MX_TIM8_Init+0x98>)
 8001a26:	f002 fc2b 	bl	8004280 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001a30:	f7ff fe08 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	2000033c 	.word	0x2000033c
 8001a40:	40010400 	.word	0x40010400

08001a44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <HAL_TIM_Base_MspInit+0x3c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d10d      	bne.n	8001a72 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_TIM_Base_MspInit+0x40>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_TIM_Base_MspInit+0x40>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_TIM_Base_MspInit+0x40>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40010400 	.word	0x40010400
 8001a84:	40023800 	.word	0x40023800

08001a88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_USART1_UART_Init+0x4c>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <MX_USART1_UART_Init+0x50>)
 8001a90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <MX_USART1_UART_Init+0x4c>)
 8001a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <MX_USART1_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_USART1_UART_Init+0x4c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <MX_USART1_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_USART1_UART_Init+0x4c>)
 8001aae:	220c      	movs	r2, #12
 8001ab0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <MX_USART1_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_USART1_UART_Init+0x4c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_USART1_UART_Init+0x4c>)
 8001ac0:	f002 fc6e 	bl	80043a0 <HAL_UART_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001aca:	f7ff fdbb 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000384 	.word	0x20000384
 8001ad8:	40011000 	.word	0x40011000

08001adc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a19      	ldr	r2, [pc, #100]	; (8001b60 <HAL_UART_MspInit+0x84>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d12c      	bne.n	8001b58 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_UART_MspInit+0x88>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <HAL_UART_MspInit+0x88>)
 8001b08:	f043 0310 	orr.w	r3, r3, #16
 8001b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_UART_MspInit+0x88>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_UART_MspInit+0x88>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <HAL_UART_MspInit+0x88>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_UART_MspInit+0x88>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b44:	2303      	movs	r3, #3
 8001b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b48:	2307      	movs	r3, #7
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4619      	mov	r1, r3
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <HAL_UART_MspInit+0x8c>)
 8001b54:	f000 f97c 	bl	8001e50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b58:	bf00      	nop
 8001b5a:	3728      	adds	r7, #40	; 0x28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40011000 	.word	0x40011000
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020000 	.word	0x40020000

08001b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b70:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b72:	490e      	ldr	r1, [pc, #56]	; (8001bac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b74:	4a0e      	ldr	r2, [pc, #56]	; (8001bb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b88:	4c0b      	ldr	r4, [pc, #44]	; (8001bb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b96:	f7ff fef3 	bl	8001980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f004 fc87 	bl	80064ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9e:	f7ff fc73 	bl	8001488 <main>
  bx  lr    
 8001ba2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bac:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001bb0:	0800a130 	.word	0x0800a130
  ldr r2, =_sbss
 8001bb4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001bb8:	20000518 	.word	0x20000518

08001bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC_IRQHandler>
	...

08001bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <HAL_Init+0x40>)
 8001bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_Init+0x40>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <HAL_Init+0x40>)
 8001bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HAL_Init+0x40>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <HAL_Init+0x40>)
 8001be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be8:	2003      	movs	r0, #3
 8001bea:	f000 f8fc 	bl	8001de6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bee:	200f      	movs	r0, #15
 8001bf0:	f7ff fd56 	bl	80016a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf4:	f7ff fd2c 	bl	8001650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023c00 	.word	0x40023c00

08001c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_IncTick+0x20>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_IncTick+0x24>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <HAL_IncTick+0x24>)
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000008 	.word	0x20000008
 8001c28:	200003c8 	.word	0x200003c8

08001c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <HAL_GetTick+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	200003c8 	.word	0x200003c8

08001c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c4c:	f7ff ffee 	bl	8001c2c <HAL_GetTick>
 8001c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d005      	beq.n	8001c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_Delay+0x44>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c6a:	bf00      	nop
 8001c6c:	f7ff ffde 	bl	8001c2c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d8f7      	bhi.n	8001c6c <HAL_Delay+0x28>
  {
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000008 	.word	0x20000008

08001c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cbe:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	60d3      	str	r3, [r2, #12]
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <__NVIC_GetPriorityGrouping+0x18>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	f003 0307 	and.w	r3, r3, #7
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	db0b      	blt.n	8001d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	f003 021f 	and.w	r2, r3, #31
 8001d08:	4907      	ldr	r1, [pc, #28]	; (8001d28 <__NVIC_EnableIRQ+0x38>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	2001      	movs	r0, #1
 8001d12:	fa00 f202 	lsl.w	r2, r0, r2
 8001d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000e100 	.word	0xe000e100

08001d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	db0a      	blt.n	8001d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	490c      	ldr	r1, [pc, #48]	; (8001d78 <__NVIC_SetPriority+0x4c>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	0112      	lsls	r2, r2, #4
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	440b      	add	r3, r1
 8001d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d54:	e00a      	b.n	8001d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	4908      	ldr	r1, [pc, #32]	; (8001d7c <__NVIC_SetPriority+0x50>)
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	3b04      	subs	r3, #4
 8001d64:	0112      	lsls	r2, r2, #4
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	440b      	add	r3, r1
 8001d6a:	761a      	strb	r2, [r3, #24]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000e100 	.word	0xe000e100
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	; 0x24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f1c3 0307 	rsb	r3, r3, #7
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	bf28      	it	cs
 8001d9e:	2304      	movcs	r3, #4
 8001da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3304      	adds	r3, #4
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d902      	bls.n	8001db0 <NVIC_EncodePriority+0x30>
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3b03      	subs	r3, #3
 8001dae:	e000      	b.n	8001db2 <NVIC_EncodePriority+0x32>
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	f04f 32ff 	mov.w	r2, #4294967295
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	43d9      	mvns	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	4313      	orrs	r3, r2
         );
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3724      	adds	r7, #36	; 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ff4c 	bl	8001c8c <__NVIC_SetPriorityGrouping>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e0e:	f7ff ff61 	bl	8001cd4 <__NVIC_GetPriorityGrouping>
 8001e12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	68b9      	ldr	r1, [r7, #8]
 8001e18:	6978      	ldr	r0, [r7, #20]
 8001e1a:	f7ff ffb1 	bl	8001d80 <NVIC_EncodePriority>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e24:	4611      	mov	r1, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff80 	bl	8001d2c <__NVIC_SetPriority>
}
 8001e2c:	bf00      	nop
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff54 	bl	8001cf0 <__NVIC_EnableIRQ>
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b089      	sub	sp, #36	; 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	e16b      	b.n	8002144 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	f040 815a 	bne.w	800213e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d005      	beq.n	8001ea2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d130      	bne.n	8001f04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	2203      	movs	r2, #3
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed8:	2201      	movs	r2, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 0201 	and.w	r2, r3, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d017      	beq.n	8001f40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d123      	bne.n	8001f94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	08da      	lsrs	r2, r3, #3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3208      	adds	r2, #8
 8001f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	08da      	lsrs	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3208      	adds	r2, #8
 8001f8e:	69b9      	ldr	r1, [r7, #24]
 8001f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0203 	and.w	r2, r3, #3
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80b4 	beq.w	800213e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b60      	ldr	r3, [pc, #384]	; (800215c <HAL_GPIO_Init+0x30c>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	4a5f      	ldr	r2, [pc, #380]	; (800215c <HAL_GPIO_Init+0x30c>)
 8001fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe6:	4b5d      	ldr	r3, [pc, #372]	; (800215c <HAL_GPIO_Init+0x30c>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ff2:	4a5b      	ldr	r2, [pc, #364]	; (8002160 <HAL_GPIO_Init+0x310>)
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	220f      	movs	r2, #15
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a52      	ldr	r2, [pc, #328]	; (8002164 <HAL_GPIO_Init+0x314>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d02b      	beq.n	8002076 <HAL_GPIO_Init+0x226>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a51      	ldr	r2, [pc, #324]	; (8002168 <HAL_GPIO_Init+0x318>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d025      	beq.n	8002072 <HAL_GPIO_Init+0x222>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a50      	ldr	r2, [pc, #320]	; (800216c <HAL_GPIO_Init+0x31c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d01f      	beq.n	800206e <HAL_GPIO_Init+0x21e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4f      	ldr	r2, [pc, #316]	; (8002170 <HAL_GPIO_Init+0x320>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d019      	beq.n	800206a <HAL_GPIO_Init+0x21a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4e      	ldr	r2, [pc, #312]	; (8002174 <HAL_GPIO_Init+0x324>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <HAL_GPIO_Init+0x216>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4d      	ldr	r2, [pc, #308]	; (8002178 <HAL_GPIO_Init+0x328>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00d      	beq.n	8002062 <HAL_GPIO_Init+0x212>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4c      	ldr	r2, [pc, #304]	; (800217c <HAL_GPIO_Init+0x32c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d007      	beq.n	800205e <HAL_GPIO_Init+0x20e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4b      	ldr	r2, [pc, #300]	; (8002180 <HAL_GPIO_Init+0x330>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d101      	bne.n	800205a <HAL_GPIO_Init+0x20a>
 8002056:	2307      	movs	r3, #7
 8002058:	e00e      	b.n	8002078 <HAL_GPIO_Init+0x228>
 800205a:	2308      	movs	r3, #8
 800205c:	e00c      	b.n	8002078 <HAL_GPIO_Init+0x228>
 800205e:	2306      	movs	r3, #6
 8002060:	e00a      	b.n	8002078 <HAL_GPIO_Init+0x228>
 8002062:	2305      	movs	r3, #5
 8002064:	e008      	b.n	8002078 <HAL_GPIO_Init+0x228>
 8002066:	2304      	movs	r3, #4
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x228>
 800206a:	2303      	movs	r3, #3
 800206c:	e004      	b.n	8002078 <HAL_GPIO_Init+0x228>
 800206e:	2302      	movs	r3, #2
 8002070:	e002      	b.n	8002078 <HAL_GPIO_Init+0x228>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_GPIO_Init+0x228>
 8002076:	2300      	movs	r3, #0
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	f002 0203 	and.w	r2, r2, #3
 800207e:	0092      	lsls	r2, r2, #2
 8002080:	4093      	lsls	r3, r2
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002088:	4935      	ldr	r1, [pc, #212]	; (8002160 <HAL_GPIO_Init+0x310>)
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	3302      	adds	r3, #2
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002096:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <HAL_GPIO_Init+0x334>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ba:	4a32      	ldr	r2, [pc, #200]	; (8002184 <HAL_GPIO_Init+0x334>)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c0:	4b30      	ldr	r3, [pc, #192]	; (8002184 <HAL_GPIO_Init+0x334>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e4:	4a27      	ldr	r2, [pc, #156]	; (8002184 <HAL_GPIO_Init+0x334>)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ea:	4b26      	ldr	r3, [pc, #152]	; (8002184 <HAL_GPIO_Init+0x334>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800210e:	4a1d      	ldr	r2, [pc, #116]	; (8002184 <HAL_GPIO_Init+0x334>)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <HAL_GPIO_Init+0x334>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002138:	4a12      	ldr	r2, [pc, #72]	; (8002184 <HAL_GPIO_Init+0x334>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3301      	adds	r3, #1
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	2b0f      	cmp	r3, #15
 8002148:	f67f ae90 	bls.w	8001e6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3724      	adds	r7, #36	; 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
 8002160:	40013800 	.word	0x40013800
 8002164:	40020000 	.word	0x40020000
 8002168:	40020400 	.word	0x40020400
 800216c:	40020800 	.word	0x40020800
 8002170:	40020c00 	.word	0x40020c00
 8002174:	40021000 	.word	0x40021000
 8002178:	40021400 	.word	0x40021400
 800217c:	40021800 	.word	0x40021800
 8002180:	40021c00 	.word	0x40021c00
 8002184:	40013c00 	.word	0x40013c00

08002188 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e12b      	b.n	80023f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff f922 	bl	80013f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2224      	movs	r2, #36	; 0x24
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021ec:	f001 fbfc 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 80021f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4a81      	ldr	r2, [pc, #516]	; (80023fc <HAL_I2C_Init+0x274>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d807      	bhi.n	800220c <HAL_I2C_Init+0x84>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4a80      	ldr	r2, [pc, #512]	; (8002400 <HAL_I2C_Init+0x278>)
 8002200:	4293      	cmp	r3, r2
 8002202:	bf94      	ite	ls
 8002204:	2301      	movls	r3, #1
 8002206:	2300      	movhi	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	e006      	b.n	800221a <HAL_I2C_Init+0x92>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4a7d      	ldr	r2, [pc, #500]	; (8002404 <HAL_I2C_Init+0x27c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	bf94      	ite	ls
 8002214:	2301      	movls	r3, #1
 8002216:	2300      	movhi	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e0e7      	b.n	80023f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4a78      	ldr	r2, [pc, #480]	; (8002408 <HAL_I2C_Init+0x280>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	0c9b      	lsrs	r3, r3, #18
 800222c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	430a      	orrs	r2, r1
 8002240:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4a6a      	ldr	r2, [pc, #424]	; (80023fc <HAL_I2C_Init+0x274>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d802      	bhi.n	800225c <HAL_I2C_Init+0xd4>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	3301      	adds	r3, #1
 800225a:	e009      	b.n	8002270 <HAL_I2C_Init+0xe8>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	4a69      	ldr	r2, [pc, #420]	; (800240c <HAL_I2C_Init+0x284>)
 8002268:	fba2 2303 	umull	r2, r3, r2, r3
 800226c:	099b      	lsrs	r3, r3, #6
 800226e:	3301      	adds	r3, #1
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	430b      	orrs	r3, r1
 8002276:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002282:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	495c      	ldr	r1, [pc, #368]	; (80023fc <HAL_I2C_Init+0x274>)
 800228c:	428b      	cmp	r3, r1
 800228e:	d819      	bhi.n	80022c4 <HAL_I2C_Init+0x13c>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1e59      	subs	r1, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	fbb1 f3f3 	udiv	r3, r1, r3
 800229e:	1c59      	adds	r1, r3, #1
 80022a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022a4:	400b      	ands	r3, r1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_I2C_Init+0x138>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1e59      	subs	r1, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022b8:	3301      	adds	r3, #1
 80022ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022be:	e051      	b.n	8002364 <HAL_I2C_Init+0x1dc>
 80022c0:	2304      	movs	r3, #4
 80022c2:	e04f      	b.n	8002364 <HAL_I2C_Init+0x1dc>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d111      	bne.n	80022f0 <HAL_I2C_Init+0x168>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1e58      	subs	r0, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	440b      	add	r3, r1
 80022da:	fbb0 f3f3 	udiv	r3, r0, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	e012      	b.n	8002316 <HAL_I2C_Init+0x18e>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1e58      	subs	r0, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	0099      	lsls	r1, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	fbb0 f3f3 	udiv	r3, r0, r3
 8002306:	3301      	adds	r3, #1
 8002308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_I2C_Init+0x196>
 800231a:	2301      	movs	r3, #1
 800231c:	e022      	b.n	8002364 <HAL_I2C_Init+0x1dc>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10e      	bne.n	8002344 <HAL_I2C_Init+0x1bc>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1e58      	subs	r0, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6859      	ldr	r1, [r3, #4]
 800232e:	460b      	mov	r3, r1
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	440b      	add	r3, r1
 8002334:	fbb0 f3f3 	udiv	r3, r0, r3
 8002338:	3301      	adds	r3, #1
 800233a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002342:	e00f      	b.n	8002364 <HAL_I2C_Init+0x1dc>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1e58      	subs	r0, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	0099      	lsls	r1, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	fbb0 f3f3 	udiv	r3, r0, r3
 800235a:	3301      	adds	r3, #1
 800235c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002360:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	6809      	ldr	r1, [r1, #0]
 8002368:	4313      	orrs	r3, r2
 800236a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69da      	ldr	r2, [r3, #28]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002392:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6911      	ldr	r1, [r2, #16]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68d2      	ldr	r2, [r2, #12]
 800239e:	4311      	orrs	r1, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695a      	ldr	r2, [r3, #20]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0201 	orr.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2220      	movs	r2, #32
 80023de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	000186a0 	.word	0x000186a0
 8002400:	001e847f 	.word	0x001e847f
 8002404:	003d08ff 	.word	0x003d08ff
 8002408:	431bde83 	.word	0x431bde83
 800240c:	10624dd3 	.word	0x10624dd3

08002410 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	4608      	mov	r0, r1
 800241a:	4611      	mov	r1, r2
 800241c:	461a      	mov	r2, r3
 800241e:	4603      	mov	r3, r0
 8002420:	817b      	strh	r3, [r7, #10]
 8002422:	460b      	mov	r3, r1
 8002424:	813b      	strh	r3, [r7, #8]
 8002426:	4613      	mov	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800242a:	f7ff fbff 	bl	8001c2c <HAL_GetTick>
 800242e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b20      	cmp	r3, #32
 800243a:	f040 80d9 	bne.w	80025f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2319      	movs	r3, #25
 8002444:	2201      	movs	r2, #1
 8002446:	496d      	ldr	r1, [pc, #436]	; (80025fc <HAL_I2C_Mem_Write+0x1ec>)
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fc7f 	bl	8002d4c <I2C_WaitOnFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002454:	2302      	movs	r3, #2
 8002456:	e0cc      	b.n	80025f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_I2C_Mem_Write+0x56>
 8002462:	2302      	movs	r3, #2
 8002464:	e0c5      	b.n	80025f2 <HAL_I2C_Mem_Write+0x1e2>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b01      	cmp	r3, #1
 800247a:	d007      	beq.n	800248c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800249a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2221      	movs	r2, #33	; 0x21
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2240      	movs	r2, #64	; 0x40
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a3a      	ldr	r2, [r7, #32]
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4a4d      	ldr	r2, [pc, #308]	; (8002600 <HAL_I2C_Mem_Write+0x1f0>)
 80024cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024ce:	88f8      	ldrh	r0, [r7, #6]
 80024d0:	893a      	ldrh	r2, [r7, #8]
 80024d2:	8979      	ldrh	r1, [r7, #10]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	4603      	mov	r3, r0
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 fab6 	bl	8002a50 <I2C_RequestMemoryWrite>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d052      	beq.n	8002590 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e081      	b.n	80025f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fd00 	bl	8002ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00d      	beq.n	800251a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	2b04      	cmp	r3, #4
 8002504:	d107      	bne.n	8002516 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002514:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e06b      	b.n	80025f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	781a      	ldrb	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002540:	b29b      	uxth	r3, r3
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b04      	cmp	r3, #4
 8002556:	d11b      	bne.n	8002590 <HAL_I2C_Mem_Write+0x180>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255c:	2b00      	cmp	r3, #0
 800255e:	d017      	beq.n	8002590 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1aa      	bne.n	80024ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 fcec 	bl	8002f7a <I2C_WaitOnBTFFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00d      	beq.n	80025c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d107      	bne.n	80025c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e016      	b.n	80025f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	e000      	b.n	80025f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025f0:	2302      	movs	r3, #2
  }
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	00100002 	.word	0x00100002
 8002600:	ffff0000 	.word	0xffff0000

08002604 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08c      	sub	sp, #48	; 0x30
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	4608      	mov	r0, r1
 800260e:	4611      	mov	r1, r2
 8002610:	461a      	mov	r2, r3
 8002612:	4603      	mov	r3, r0
 8002614:	817b      	strh	r3, [r7, #10]
 8002616:	460b      	mov	r3, r1
 8002618:	813b      	strh	r3, [r7, #8]
 800261a:	4613      	mov	r3, r2
 800261c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800261e:	f7ff fb05 	bl	8001c2c <HAL_GetTick>
 8002622:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b20      	cmp	r3, #32
 800262e:	f040 8208 	bne.w	8002a42 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	2319      	movs	r3, #25
 8002638:	2201      	movs	r2, #1
 800263a:	497b      	ldr	r1, [pc, #492]	; (8002828 <HAL_I2C_Mem_Read+0x224>)
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 fb85 	bl	8002d4c <I2C_WaitOnFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002648:	2302      	movs	r3, #2
 800264a:	e1fb      	b.n	8002a44 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_I2C_Mem_Read+0x56>
 8002656:	2302      	movs	r3, #2
 8002658:	e1f4      	b.n	8002a44 <HAL_I2C_Mem_Read+0x440>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b01      	cmp	r3, #1
 800266e:	d007      	beq.n	8002680 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800268e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2222      	movs	r2, #34	; 0x22
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2240      	movs	r2, #64	; 0x40
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4a5b      	ldr	r2, [pc, #364]	; (800282c <HAL_I2C_Mem_Read+0x228>)
 80026c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026c2:	88f8      	ldrh	r0, [r7, #6]
 80026c4:	893a      	ldrh	r2, [r7, #8]
 80026c6:	8979      	ldrh	r1, [r7, #10]
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	4603      	mov	r3, r0
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 fa52 	bl	8002b7c <I2C_RequestMemoryRead>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e1b0      	b.n	8002a44 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d113      	bne.n	8002712 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ea:	2300      	movs	r3, #0
 80026ec:	623b      	str	r3, [r7, #32]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	623b      	str	r3, [r7, #32]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	623b      	str	r3, [r7, #32]
 80026fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	e184      	b.n	8002a1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002716:	2b01      	cmp	r3, #1
 8002718:	d11b      	bne.n	8002752 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002728:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e164      	b.n	8002a1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002756:	2b02      	cmp	r3, #2
 8002758:	d11b      	bne.n	8002792 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002768:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002778:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	e144      	b.n	8002a1c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027a8:	e138      	b.n	8002a1c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	f200 80f1 	bhi.w	8002996 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d123      	bne.n	8002804 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fc1b 	bl	8002ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e139      	b.n	8002a44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002802:	e10b      	b.n	8002a1c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002808:	2b02      	cmp	r3, #2
 800280a:	d14e      	bne.n	80028aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002812:	2200      	movs	r2, #0
 8002814:	4906      	ldr	r1, [pc, #24]	; (8002830 <HAL_I2C_Mem_Read+0x22c>)
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 fa98 	bl	8002d4c <I2C_WaitOnFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d008      	beq.n	8002834 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e10e      	b.n	8002a44 <HAL_I2C_Mem_Read+0x440>
 8002826:	bf00      	nop
 8002828:	00100002 	.word	0x00100002
 800282c:	ffff0000 	.word	0xffff0000
 8002830:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028a8:	e0b8      	b.n	8002a1c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b0:	2200      	movs	r2, #0
 80028b2:	4966      	ldr	r1, [pc, #408]	; (8002a4c <HAL_I2C_Mem_Read+0x448>)
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fa49 	bl	8002d4c <I2C_WaitOnFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0bf      	b.n	8002a44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290c:	2200      	movs	r2, #0
 800290e:	494f      	ldr	r1, [pc, #316]	; (8002a4c <HAL_I2C_Mem_Read+0x448>)
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 fa1b 	bl	8002d4c <I2C_WaitOnFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e091      	b.n	8002a44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002994:	e042      	b.n	8002a1c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002998:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 fb2e 	bl	8002ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e04c      	b.n	8002a44 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d118      	bne.n	8002a1c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f47f aec2 	bne.w	80027aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e000      	b.n	8002a44 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a42:	2302      	movs	r3, #2
  }
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3728      	adds	r7, #40	; 0x28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	00010004 	.word	0x00010004

08002a50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	4608      	mov	r0, r1
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4603      	mov	r3, r0
 8002a60:	817b      	strh	r3, [r7, #10]
 8002a62:	460b      	mov	r3, r1
 8002a64:	813b      	strh	r3, [r7, #8]
 8002a66:	4613      	mov	r3, r2
 8002a68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f960 	bl	8002d4c <I2C_WaitOnFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00d      	beq.n	8002aae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aa0:	d103      	bne.n	8002aaa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e05f      	b.n	8002b6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aae:	897b      	ldrh	r3, [r7, #10]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002abc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	6a3a      	ldr	r2, [r7, #32]
 8002ac2:	492d      	ldr	r1, [pc, #180]	; (8002b78 <I2C_RequestMemoryWrite+0x128>)
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f998 	bl	8002dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e04c      	b.n	8002b6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aec:	6a39      	ldr	r1, [r7, #32]
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 fa02 	bl	8002ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00d      	beq.n	8002b16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d107      	bne.n	8002b12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e02b      	b.n	8002b6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d105      	bne.n	8002b28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b1c:	893b      	ldrh	r3, [r7, #8]
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	611a      	str	r2, [r3, #16]
 8002b26:	e021      	b.n	8002b6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b28:	893b      	ldrh	r3, [r7, #8]
 8002b2a:	0a1b      	lsrs	r3, r3, #8
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b38:	6a39      	ldr	r1, [r7, #32]
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f9dc 	bl	8002ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d107      	bne.n	8002b5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e005      	b.n	8002b6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b62:	893b      	ldrh	r3, [r7, #8]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	00010002 	.word	0x00010002

08002b7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	4608      	mov	r0, r1
 8002b86:	4611      	mov	r1, r2
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	817b      	strh	r3, [r7, #10]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	813b      	strh	r3, [r7, #8]
 8002b92:	4613      	mov	r3, r2
 8002b94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ba4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f8c2 	bl	8002d4c <I2C_WaitOnFlagUntilTimeout>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00d      	beq.n	8002bea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bdc:	d103      	bne.n	8002be6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e0aa      	b.n	8002d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bea:	897b      	ldrh	r3, [r7, #10]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	6a3a      	ldr	r2, [r7, #32]
 8002bfe:	4952      	ldr	r1, [pc, #328]	; (8002d48 <I2C_RequestMemoryRead+0x1cc>)
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 f8fa 	bl	8002dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e097      	b.n	8002d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c28:	6a39      	ldr	r1, [r7, #32]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f964 	bl	8002ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00d      	beq.n	8002c52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d107      	bne.n	8002c4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e076      	b.n	8002d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d105      	bne.n	8002c64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c58:	893b      	ldrh	r3, [r7, #8]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	611a      	str	r2, [r3, #16]
 8002c62:	e021      	b.n	8002ca8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c64:	893b      	ldrh	r3, [r7, #8]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c74:	6a39      	ldr	r1, [r7, #32]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f93e 	bl	8002ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d107      	bne.n	8002c9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e050      	b.n	8002d40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c9e:	893b      	ldrh	r3, [r7, #8]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002caa:	6a39      	ldr	r1, [r7, #32]
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f923 	bl	8002ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00d      	beq.n	8002cd4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d107      	bne.n	8002cd0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e035      	b.n	8002d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f82b 	bl	8002d4c <I2C_WaitOnFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00d      	beq.n	8002d18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0a:	d103      	bne.n	8002d14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e013      	b.n	8002d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d18:	897b      	ldrh	r3, [r7, #10]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	6a3a      	ldr	r2, [r7, #32]
 8002d2c:	4906      	ldr	r1, [pc, #24]	; (8002d48 <I2C_RequestMemoryRead+0x1cc>)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f863 	bl	8002dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	00010002 	.word	0x00010002

08002d4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d5c:	e025      	b.n	8002daa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d021      	beq.n	8002daa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d66:	f7fe ff61 	bl	8001c2c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d302      	bcc.n	8002d7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d116      	bne.n	8002daa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f043 0220 	orr.w	r2, r3, #32
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e023      	b.n	8002df2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	0c1b      	lsrs	r3, r3, #16
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d10d      	bne.n	8002dd0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	43da      	mvns	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2301      	moveq	r3, #1
 8002dc8:	2300      	movne	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	e00c      	b.n	8002dea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	43da      	mvns	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bf0c      	ite	eq
 8002de2:	2301      	moveq	r3, #1
 8002de4:	2300      	movne	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d0b6      	beq.n	8002d5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
 8002e06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e08:	e051      	b.n	8002eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e18:	d123      	bne.n	8002e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f043 0204 	orr.w	r2, r3, #4
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e046      	b.n	8002ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d021      	beq.n	8002eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6a:	f7fe fedf 	bl	8001c2c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d302      	bcc.n	8002e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d116      	bne.n	8002eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f043 0220 	orr.w	r2, r3, #32
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e020      	b.n	8002ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	0c1b      	lsrs	r3, r3, #16
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d10c      	bne.n	8002ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf14      	ite	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	2300      	moveq	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	e00b      	b.n	8002eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	43da      	mvns	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4013      	ands	r3, r2
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf14      	ite	ne
 8002ee4:	2301      	movne	r3, #1
 8002ee6:	2300      	moveq	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d18d      	bne.n	8002e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f04:	e02d      	b.n	8002f62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f8ce 	bl	80030a8 <I2C_IsAcknowledgeFailed>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e02d      	b.n	8002f72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d021      	beq.n	8002f62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1e:	f7fe fe85 	bl	8001c2c <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d302      	bcc.n	8002f34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d116      	bne.n	8002f62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f043 0220 	orr.w	r2, r3, #32
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e007      	b.n	8002f72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6c:	2b80      	cmp	r3, #128	; 0x80
 8002f6e:	d1ca      	bne.n	8002f06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f86:	e02d      	b.n	8002fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 f88d 	bl	80030a8 <I2C_IsAcknowledgeFailed>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e02d      	b.n	8002ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9e:	d021      	beq.n	8002fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa0:	f7fe fe44 	bl	8001c2c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d302      	bcc.n	8002fb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d116      	bne.n	8002fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e007      	b.n	8002ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d1ca      	bne.n	8002f88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003008:	e042      	b.n	8003090 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b10      	cmp	r3, #16
 8003016:	d119      	bne.n	800304c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0210 	mvn.w	r2, #16
 8003020:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e029      	b.n	80030a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304c:	f7fe fdee 	bl	8001c2c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	429a      	cmp	r2, r3
 800305a:	d302      	bcc.n	8003062 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d116      	bne.n	8003090 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	f043 0220 	orr.w	r2, r3, #32
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e007      	b.n	80030a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309a:	2b40      	cmp	r3, #64	; 0x40
 800309c:	d1b5      	bne.n	800300a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030be:	d11b      	bne.n	80030f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	f043 0204 	orr.w	r2, r3, #4
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e267      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d075      	beq.n	8003212 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003126:	4b88      	ldr	r3, [pc, #544]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b04      	cmp	r3, #4
 8003130:	d00c      	beq.n	800314c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003132:	4b85      	ldr	r3, [pc, #532]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800313a:	2b08      	cmp	r3, #8
 800313c:	d112      	bne.n	8003164 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800313e:	4b82      	ldr	r3, [pc, #520]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800314a:	d10b      	bne.n	8003164 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314c:	4b7e      	ldr	r3, [pc, #504]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d05b      	beq.n	8003210 <HAL_RCC_OscConfig+0x108>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d157      	bne.n	8003210 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e242      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316c:	d106      	bne.n	800317c <HAL_RCC_OscConfig+0x74>
 800316e:	4b76      	ldr	r3, [pc, #472]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a75      	ldr	r2, [pc, #468]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 8003174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	e01d      	b.n	80031b8 <HAL_RCC_OscConfig+0xb0>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x98>
 8003186:	4b70      	ldr	r3, [pc, #448]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a6f      	ldr	r2, [pc, #444]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 800318c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	4b6d      	ldr	r3, [pc, #436]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a6c      	ldr	r2, [pc, #432]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e00b      	b.n	80031b8 <HAL_RCC_OscConfig+0xb0>
 80031a0:	4b69      	ldr	r3, [pc, #420]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a68      	ldr	r2, [pc, #416]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 80031a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	4b66      	ldr	r3, [pc, #408]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a65      	ldr	r2, [pc, #404]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 80031b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d013      	beq.n	80031e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7fe fd34 	bl	8001c2c <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c8:	f7fe fd30 	bl	8001c2c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e207      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	4b5b      	ldr	r3, [pc, #364]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0xc0>
 80031e6:	e014      	b.n	8003212 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fe fd20 	bl	8001c2c <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f0:	f7fe fd1c 	bl	8001c2c <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	; 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e1f3      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003202:	4b51      	ldr	r3, [pc, #324]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0xe8>
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d063      	beq.n	80032e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800321e:	4b4a      	ldr	r3, [pc, #296]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00b      	beq.n	8003242 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800322a:	4b47      	ldr	r3, [pc, #284]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003232:	2b08      	cmp	r3, #8
 8003234:	d11c      	bne.n	8003270 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003236:	4b44      	ldr	r3, [pc, #272]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d116      	bne.n	8003270 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003242:	4b41      	ldr	r3, [pc, #260]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_RCC_OscConfig+0x152>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d001      	beq.n	800325a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e1c7      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325a:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4937      	ldr	r1, [pc, #220]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326e:	e03a      	b.n	80032e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d020      	beq.n	80032ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003278:	4b34      	ldr	r3, [pc, #208]	; (800334c <HAL_RCC_OscConfig+0x244>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327e:	f7fe fcd5 	bl	8001c2c <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003286:	f7fe fcd1 	bl	8001c2c <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e1a8      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003298:	4b2b      	ldr	r3, [pc, #172]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a4:	4b28      	ldr	r3, [pc, #160]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4925      	ldr	r1, [pc, #148]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	600b      	str	r3, [r1, #0]
 80032b8:	e015      	b.n	80032e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ba:	4b24      	ldr	r3, [pc, #144]	; (800334c <HAL_RCC_OscConfig+0x244>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe fcb4 	bl	8001c2c <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c8:	f7fe fcb0 	bl	8001c2c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e187      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032da:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d036      	beq.n	8003360 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d016      	beq.n	8003328 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fa:	4b15      	ldr	r3, [pc, #84]	; (8003350 <HAL_RCC_OscConfig+0x248>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003300:	f7fe fc94 	bl	8001c2c <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003308:	f7fe fc90 	bl	8001c2c <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e167      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331a:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_OscConfig+0x240>)
 800331c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x200>
 8003326:	e01b      	b.n	8003360 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003328:	4b09      	ldr	r3, [pc, #36]	; (8003350 <HAL_RCC_OscConfig+0x248>)
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332e:	f7fe fc7d 	bl	8001c2c <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003334:	e00e      	b.n	8003354 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003336:	f7fe fc79 	bl	8001c2c <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d907      	bls.n	8003354 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e150      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
 8003348:	40023800 	.word	0x40023800
 800334c:	42470000 	.word	0x42470000
 8003350:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003354:	4b88      	ldr	r3, [pc, #544]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 8003356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1ea      	bne.n	8003336 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 8097 	beq.w	800349c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336e:	2300      	movs	r3, #0
 8003370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003372:	4b81      	ldr	r3, [pc, #516]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10f      	bne.n	800339e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	4b7d      	ldr	r3, [pc, #500]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	4a7c      	ldr	r2, [pc, #496]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 8003388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338c:	6413      	str	r3, [r2, #64]	; 0x40
 800338e:	4b7a      	ldr	r3, [pc, #488]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339a:	2301      	movs	r3, #1
 800339c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339e:	4b77      	ldr	r3, [pc, #476]	; (800357c <HAL_RCC_OscConfig+0x474>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d118      	bne.n	80033dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033aa:	4b74      	ldr	r3, [pc, #464]	; (800357c <HAL_RCC_OscConfig+0x474>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a73      	ldr	r2, [pc, #460]	; (800357c <HAL_RCC_OscConfig+0x474>)
 80033b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b6:	f7fe fc39 	bl	8001c2c <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033be:	f7fe fc35 	bl	8001c2c <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e10c      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d0:	4b6a      	ldr	r3, [pc, #424]	; (800357c <HAL_RCC_OscConfig+0x474>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d106      	bne.n	80033f2 <HAL_RCC_OscConfig+0x2ea>
 80033e4:	4b64      	ldr	r3, [pc, #400]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	4a63      	ldr	r2, [pc, #396]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6713      	str	r3, [r2, #112]	; 0x70
 80033f0:	e01c      	b.n	800342c <HAL_RCC_OscConfig+0x324>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b05      	cmp	r3, #5
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0x30c>
 80033fa:	4b5f      	ldr	r3, [pc, #380]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	4a5e      	ldr	r2, [pc, #376]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 8003400:	f043 0304 	orr.w	r3, r3, #4
 8003404:	6713      	str	r3, [r2, #112]	; 0x70
 8003406:	4b5c      	ldr	r3, [pc, #368]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	4a5b      	ldr	r2, [pc, #364]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	6713      	str	r3, [r2, #112]	; 0x70
 8003412:	e00b      	b.n	800342c <HAL_RCC_OscConfig+0x324>
 8003414:	4b58      	ldr	r3, [pc, #352]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	4a57      	ldr	r2, [pc, #348]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 800341a:	f023 0301 	bic.w	r3, r3, #1
 800341e:	6713      	str	r3, [r2, #112]	; 0x70
 8003420:	4b55      	ldr	r3, [pc, #340]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	4a54      	ldr	r2, [pc, #336]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 8003426:	f023 0304 	bic.w	r3, r3, #4
 800342a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d015      	beq.n	8003460 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003434:	f7fe fbfa 	bl	8001c2c <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343a:	e00a      	b.n	8003452 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800343c:	f7fe fbf6 	bl	8001c2c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	; 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e0cb      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003452:	4b49      	ldr	r3, [pc, #292]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0ee      	beq.n	800343c <HAL_RCC_OscConfig+0x334>
 800345e:	e014      	b.n	800348a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003460:	f7fe fbe4 	bl	8001c2c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003466:	e00a      	b.n	800347e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003468:	f7fe fbe0 	bl	8001c2c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e0b5      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800347e:	4b3e      	ldr	r3, [pc, #248]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1ee      	bne.n	8003468 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800348a:	7dfb      	ldrb	r3, [r7, #23]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d105      	bne.n	800349c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003490:	4b39      	ldr	r3, [pc, #228]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	4a38      	ldr	r2, [pc, #224]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 8003496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800349a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80a1 	beq.w	80035e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034a6:	4b34      	ldr	r3, [pc, #208]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d05c      	beq.n	800356c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d141      	bne.n	800353e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ba:	4b31      	ldr	r3, [pc, #196]	; (8003580 <HAL_RCC_OscConfig+0x478>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fe fbb4 	bl	8001c2c <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c8:	f7fe fbb0 	bl	8001c2c <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e087      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034da:	4b27      	ldr	r3, [pc, #156]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69da      	ldr	r2, [r3, #28]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	019b      	lsls	r3, r3, #6
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	085b      	lsrs	r3, r3, #1
 80034fe:	3b01      	subs	r3, #1
 8003500:	041b      	lsls	r3, r3, #16
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	061b      	lsls	r3, r3, #24
 800350a:	491b      	ldr	r1, [pc, #108]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 800350c:	4313      	orrs	r3, r2
 800350e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <HAL_RCC_OscConfig+0x478>)
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003516:	f7fe fb89 	bl	8001c2c <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351e:	f7fe fb85 	bl	8001c2c <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e05c      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003530:	4b11      	ldr	r3, [pc, #68]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f0      	beq.n	800351e <HAL_RCC_OscConfig+0x416>
 800353c:	e054      	b.n	80035e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353e:	4b10      	ldr	r3, [pc, #64]	; (8003580 <HAL_RCC_OscConfig+0x478>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7fe fb72 	bl	8001c2c <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354c:	f7fe fb6e 	bl	8001c2c <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e045      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_RCC_OscConfig+0x470>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x444>
 800356a:	e03d      	b.n	80035e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d107      	bne.n	8003584 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e038      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
 8003578:	40023800 	.word	0x40023800
 800357c:	40007000 	.word	0x40007000
 8003580:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <HAL_RCC_OscConfig+0x4ec>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d028      	beq.n	80035e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d121      	bne.n	80035e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d11a      	bne.n	80035e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035b4:	4013      	ands	r3, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035bc:	4293      	cmp	r3, r2
 80035be:	d111      	bne.n	80035e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	085b      	lsrs	r3, r3, #1
 80035cc:	3b01      	subs	r3, #1
 80035ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d107      	bne.n	80035e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800

080035f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0cc      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800360c:	4b68      	ldr	r3, [pc, #416]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d90c      	bls.n	8003634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361a:	4b65      	ldr	r3, [pc, #404]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b63      	ldr	r3, [pc, #396]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0b8      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d020      	beq.n	8003682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800364c:	4b59      	ldr	r3, [pc, #356]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	4a58      	ldr	r2, [pc, #352]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003656:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003664:	4b53      	ldr	r3, [pc, #332]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4a52      	ldr	r2, [pc, #328]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800366e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003670:	4b50      	ldr	r3, [pc, #320]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	494d      	ldr	r1, [pc, #308]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d044      	beq.n	8003718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d107      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003696:	4b47      	ldr	r3, [pc, #284]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d119      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e07f      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d003      	beq.n	80036b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d107      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b6:	4b3f      	ldr	r3, [pc, #252]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e06f      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c6:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e067      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d6:	4b37      	ldr	r3, [pc, #220]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f023 0203 	bic.w	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4934      	ldr	r1, [pc, #208]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e8:	f7fe faa0 	bl	8001c2c <HAL_GetTick>
 80036ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f0:	f7fe fa9c 	bl	8001c2c <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e04f      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003706:	4b2b      	ldr	r3, [pc, #172]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 020c 	and.w	r2, r3, #12
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	429a      	cmp	r2, r3
 8003716:	d1eb      	bne.n	80036f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003718:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d20c      	bcs.n	8003740 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003726:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e032      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800374c:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4916      	ldr	r1, [pc, #88]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	4313      	orrs	r3, r2
 800375c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800376a:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	490e      	ldr	r1, [pc, #56]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800377e:	f000 f821 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8003782:	4602      	mov	r2, r0
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	490a      	ldr	r1, [pc, #40]	; (80037b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003790:	5ccb      	ldrb	r3, [r1, r3]
 8003792:	fa22 f303 	lsr.w	r3, r2, r3
 8003796:	4a09      	ldr	r2, [pc, #36]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 8003798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800379a:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <HAL_RCC_ClockConfig+0x1c8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fd ff7e 	bl	80016a0 <HAL_InitTick>

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40023c00 	.word	0x40023c00
 80037b4:	40023800 	.word	0x40023800
 80037b8:	08009ce0 	.word	0x08009ce0
 80037bc:	20000000 	.word	0x20000000
 80037c0:	20000004 	.word	0x20000004

080037c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c8:	b094      	sub	sp, #80	; 0x50
 80037ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	647b      	str	r3, [r7, #68]	; 0x44
 80037d0:	2300      	movs	r3, #0
 80037d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037d4:	2300      	movs	r3, #0
 80037d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037dc:	4b79      	ldr	r3, [pc, #484]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 030c 	and.w	r3, r3, #12
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d00d      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0x40>
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	f200 80e1 	bhi.w	80039b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_RCC_GetSysClockFreq+0x34>
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d003      	beq.n	80037fe <HAL_RCC_GetSysClockFreq+0x3a>
 80037f6:	e0db      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037f8:	4b73      	ldr	r3, [pc, #460]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80037fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80037fc:	e0db      	b.n	80039b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037fe:	4b73      	ldr	r3, [pc, #460]	; (80039cc <HAL_RCC_GetSysClockFreq+0x208>)
 8003800:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003802:	e0d8      	b.n	80039b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003804:	4b6f      	ldr	r3, [pc, #444]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800380c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800380e:	4b6d      	ldr	r3, [pc, #436]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d063      	beq.n	80038e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800381a:	4b6a      	ldr	r3, [pc, #424]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	099b      	lsrs	r3, r3, #6
 8003820:	2200      	movs	r2, #0
 8003822:	63bb      	str	r3, [r7, #56]	; 0x38
 8003824:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800382c:	633b      	str	r3, [r7, #48]	; 0x30
 800382e:	2300      	movs	r3, #0
 8003830:	637b      	str	r3, [r7, #52]	; 0x34
 8003832:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003836:	4622      	mov	r2, r4
 8003838:	462b      	mov	r3, r5
 800383a:	f04f 0000 	mov.w	r0, #0
 800383e:	f04f 0100 	mov.w	r1, #0
 8003842:	0159      	lsls	r1, r3, #5
 8003844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003848:	0150      	lsls	r0, r2, #5
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4621      	mov	r1, r4
 8003850:	1a51      	subs	r1, r2, r1
 8003852:	6139      	str	r1, [r7, #16]
 8003854:	4629      	mov	r1, r5
 8003856:	eb63 0301 	sbc.w	r3, r3, r1
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003868:	4659      	mov	r1, fp
 800386a:	018b      	lsls	r3, r1, #6
 800386c:	4651      	mov	r1, sl
 800386e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003872:	4651      	mov	r1, sl
 8003874:	018a      	lsls	r2, r1, #6
 8003876:	4651      	mov	r1, sl
 8003878:	ebb2 0801 	subs.w	r8, r2, r1
 800387c:	4659      	mov	r1, fp
 800387e:	eb63 0901 	sbc.w	r9, r3, r1
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800388e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003892:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003896:	4690      	mov	r8, r2
 8003898:	4699      	mov	r9, r3
 800389a:	4623      	mov	r3, r4
 800389c:	eb18 0303 	adds.w	r3, r8, r3
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	462b      	mov	r3, r5
 80038a4:	eb49 0303 	adc.w	r3, r9, r3
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038b6:	4629      	mov	r1, r5
 80038b8:	024b      	lsls	r3, r1, #9
 80038ba:	4621      	mov	r1, r4
 80038bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038c0:	4621      	mov	r1, r4
 80038c2:	024a      	lsls	r2, r1, #9
 80038c4:	4610      	mov	r0, r2
 80038c6:	4619      	mov	r1, r3
 80038c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ca:	2200      	movs	r2, #0
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038d4:	f7fd fb36 	bl	8000f44 <__aeabi_uldivmod>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4613      	mov	r3, r2
 80038de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e0:	e058      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e2:	4b38      	ldr	r3, [pc, #224]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	099b      	lsrs	r3, r3, #6
 80038e8:	2200      	movs	r2, #0
 80038ea:	4618      	mov	r0, r3
 80038ec:	4611      	mov	r1, r2
 80038ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038f2:	623b      	str	r3, [r7, #32]
 80038f4:	2300      	movs	r3, #0
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
 80038f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038fc:	4642      	mov	r2, r8
 80038fe:	464b      	mov	r3, r9
 8003900:	f04f 0000 	mov.w	r0, #0
 8003904:	f04f 0100 	mov.w	r1, #0
 8003908:	0159      	lsls	r1, r3, #5
 800390a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800390e:	0150      	lsls	r0, r2, #5
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4641      	mov	r1, r8
 8003916:	ebb2 0a01 	subs.w	sl, r2, r1
 800391a:	4649      	mov	r1, r9
 800391c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800392c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003930:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003934:	ebb2 040a 	subs.w	r4, r2, sl
 8003938:	eb63 050b 	sbc.w	r5, r3, fp
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	f04f 0300 	mov.w	r3, #0
 8003944:	00eb      	lsls	r3, r5, #3
 8003946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800394a:	00e2      	lsls	r2, r4, #3
 800394c:	4614      	mov	r4, r2
 800394e:	461d      	mov	r5, r3
 8003950:	4643      	mov	r3, r8
 8003952:	18e3      	adds	r3, r4, r3
 8003954:	603b      	str	r3, [r7, #0]
 8003956:	464b      	mov	r3, r9
 8003958:	eb45 0303 	adc.w	r3, r5, r3
 800395c:	607b      	str	r3, [r7, #4]
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	e9d7 4500 	ldrd	r4, r5, [r7]
 800396a:	4629      	mov	r1, r5
 800396c:	028b      	lsls	r3, r1, #10
 800396e:	4621      	mov	r1, r4
 8003970:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003974:	4621      	mov	r1, r4
 8003976:	028a      	lsls	r2, r1, #10
 8003978:	4610      	mov	r0, r2
 800397a:	4619      	mov	r1, r3
 800397c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800397e:	2200      	movs	r2, #0
 8003980:	61bb      	str	r3, [r7, #24]
 8003982:	61fa      	str	r2, [r7, #28]
 8003984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003988:	f7fd fadc 	bl	8000f44 <__aeabi_uldivmod>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4613      	mov	r3, r2
 8003992:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	0c1b      	lsrs	r3, r3, #16
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	3301      	adds	r3, #1
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80039a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039ae:	e002      	b.n	80039b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80039b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3750      	adds	r7, #80	; 0x50
 80039bc:	46bd      	mov	sp, r7
 80039be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c2:	bf00      	nop
 80039c4:	40023800 	.word	0x40023800
 80039c8:	00f42400 	.word	0x00f42400
 80039cc:	007a1200 	.word	0x007a1200

080039d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d4:	4b03      	ldr	r3, [pc, #12]	; (80039e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039d6:	681b      	ldr	r3, [r3, #0]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20000000 	.word	0x20000000

080039e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039ec:	f7ff fff0 	bl	80039d0 <HAL_RCC_GetHCLKFreq>
 80039f0:	4602      	mov	r2, r0
 80039f2:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	0a9b      	lsrs	r3, r3, #10
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	4903      	ldr	r1, [pc, #12]	; (8003a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80039fe:	5ccb      	ldrb	r3, [r1, r3]
 8003a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	08009cf0 	.word	0x08009cf0

08003a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a14:	f7ff ffdc 	bl	80039d0 <HAL_RCC_GetHCLKFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	0b5b      	lsrs	r3, r3, #13
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	4903      	ldr	r1, [pc, #12]	; (8003a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40023800 	.word	0x40023800
 8003a34:	08009cf0 	.word	0x08009cf0

08003a38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	220f      	movs	r2, #15
 8003a46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a48:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <HAL_RCC_GetClockConfig+0x5c>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 0203 	and.w	r2, r3, #3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a54:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <HAL_RCC_GetClockConfig+0x5c>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <HAL_RCC_GetClockConfig+0x5c>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a6c:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <HAL_RCC_GetClockConfig+0x5c>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	08db      	lsrs	r3, r3, #3
 8003a72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <HAL_RCC_GetClockConfig+0x60>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0207 	and.w	r2, r3, #7
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	601a      	str	r2, [r3, #0]
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40023c00 	.word	0x40023c00

08003a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e041      	b.n	8003b32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fd ffbe 	bl	8001a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4610      	mov	r0, r2
 8003adc:	f000 fa96 	bl	800400c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d001      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e04e      	b.n	8003bf2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a23      	ldr	r2, [pc, #140]	; (8003c00 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d022      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x80>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7e:	d01d      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x80>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1f      	ldr	r2, [pc, #124]	; (8003c04 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d018      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x80>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1e      	ldr	r2, [pc, #120]	; (8003c08 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d013      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x80>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1c      	ldr	r2, [pc, #112]	; (8003c0c <HAL_TIM_Base_Start_IT+0xd0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00e      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x80>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a1b      	ldr	r2, [pc, #108]	; (8003c10 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d009      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x80>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a19      	ldr	r2, [pc, #100]	; (8003c14 <HAL_TIM_Base_Start_IT+0xd8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d004      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x80>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a18      	ldr	r2, [pc, #96]	; (8003c18 <HAL_TIM_Base_Start_IT+0xdc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d111      	bne.n	8003be0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b06      	cmp	r3, #6
 8003bcc:	d010      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0201 	orr.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bde:	e007      	b.n	8003bf0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40010000 	.word	0x40010000
 8003c04:	40000400 	.word	0x40000400
 8003c08:	40000800 	.word	0x40000800
 8003c0c:	40000c00 	.word	0x40000c00
 8003c10:	40010400 	.word	0x40010400
 8003c14:	40014000 	.word	0x40014000
 8003c18:	40001800 	.word	0x40001800

08003c1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d122      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d11b      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f06f 0202 	mvn.w	r2, #2
 8003c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f9b5 	bl	8003fce <HAL_TIM_IC_CaptureCallback>
 8003c64:	e005      	b.n	8003c72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f9a7 	bl	8003fba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f9b8 	bl	8003fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d122      	bne.n	8003ccc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d11b      	bne.n	8003ccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0204 	mvn.w	r2, #4
 8003c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f98b 	bl	8003fce <HAL_TIM_IC_CaptureCallback>
 8003cb8:	e005      	b.n	8003cc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f97d 	bl	8003fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f98e 	bl	8003fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d122      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d11b      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0208 	mvn.w	r2, #8
 8003cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f961 	bl	8003fce <HAL_TIM_IC_CaptureCallback>
 8003d0c:	e005      	b.n	8003d1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f953 	bl	8003fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f964 	bl	8003fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	2b10      	cmp	r3, #16
 8003d2c:	d122      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d11b      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0210 	mvn.w	r2, #16
 8003d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2208      	movs	r2, #8
 8003d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f937 	bl	8003fce <HAL_TIM_IC_CaptureCallback>
 8003d60:	e005      	b.n	8003d6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f929 	bl	8003fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f93a 	bl	8003fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d10e      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d107      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0201 	mvn.w	r2, #1
 8003d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fd fc40 	bl	8001620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	2b80      	cmp	r3, #128	; 0x80
 8003dac:	d10e      	bne.n	8003dcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db8:	2b80      	cmp	r3, #128	; 0x80
 8003dba:	d107      	bne.n	8003dcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fae0 	bl	800438c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	d10e      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	d107      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f8ff 	bl	8003ff6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d10e      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d107      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0220 	mvn.w	r2, #32
 8003e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 faaa 	bl	8004378 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e24:	bf00      	nop
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_TIM_ConfigClockSource+0x1c>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e0b4      	b.n	8003fb2 <HAL_TIM_ConfigClockSource+0x186>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e80:	d03e      	beq.n	8003f00 <HAL_TIM_ConfigClockSource+0xd4>
 8003e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e86:	f200 8087 	bhi.w	8003f98 <HAL_TIM_ConfigClockSource+0x16c>
 8003e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8e:	f000 8086 	beq.w	8003f9e <HAL_TIM_ConfigClockSource+0x172>
 8003e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e96:	d87f      	bhi.n	8003f98 <HAL_TIM_ConfigClockSource+0x16c>
 8003e98:	2b70      	cmp	r3, #112	; 0x70
 8003e9a:	d01a      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0xa6>
 8003e9c:	2b70      	cmp	r3, #112	; 0x70
 8003e9e:	d87b      	bhi.n	8003f98 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea0:	2b60      	cmp	r3, #96	; 0x60
 8003ea2:	d050      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0x11a>
 8003ea4:	2b60      	cmp	r3, #96	; 0x60
 8003ea6:	d877      	bhi.n	8003f98 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea8:	2b50      	cmp	r3, #80	; 0x50
 8003eaa:	d03c      	beq.n	8003f26 <HAL_TIM_ConfigClockSource+0xfa>
 8003eac:	2b50      	cmp	r3, #80	; 0x50
 8003eae:	d873      	bhi.n	8003f98 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb0:	2b40      	cmp	r3, #64	; 0x40
 8003eb2:	d058      	beq.n	8003f66 <HAL_TIM_ConfigClockSource+0x13a>
 8003eb4:	2b40      	cmp	r3, #64	; 0x40
 8003eb6:	d86f      	bhi.n	8003f98 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb8:	2b30      	cmp	r3, #48	; 0x30
 8003eba:	d064      	beq.n	8003f86 <HAL_TIM_ConfigClockSource+0x15a>
 8003ebc:	2b30      	cmp	r3, #48	; 0x30
 8003ebe:	d86b      	bhi.n	8003f98 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d060      	beq.n	8003f86 <HAL_TIM_ConfigClockSource+0x15a>
 8003ec4:	2b20      	cmp	r3, #32
 8003ec6:	d867      	bhi.n	8003f98 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d05c      	beq.n	8003f86 <HAL_TIM_ConfigClockSource+0x15a>
 8003ecc:	2b10      	cmp	r3, #16
 8003ece:	d05a      	beq.n	8003f86 <HAL_TIM_ConfigClockSource+0x15a>
 8003ed0:	e062      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6899      	ldr	r1, [r3, #8]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f000 f9ad 	bl	8004240 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ef4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	609a      	str	r2, [r3, #8]
      break;
 8003efe:	e04f      	b.n	8003fa0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	6899      	ldr	r1, [r3, #8]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f000 f996 	bl	8004240 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f22:	609a      	str	r2, [r3, #8]
      break;
 8003f24:	e03c      	b.n	8003fa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6859      	ldr	r1, [r3, #4]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	461a      	mov	r2, r3
 8003f34:	f000 f90a 	bl	800414c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2150      	movs	r1, #80	; 0x50
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f963 	bl	800420a <TIM_ITRx_SetConfig>
      break;
 8003f44:	e02c      	b.n	8003fa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6859      	ldr	r1, [r3, #4]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	461a      	mov	r2, r3
 8003f54:	f000 f929 	bl	80041aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2160      	movs	r1, #96	; 0x60
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 f953 	bl	800420a <TIM_ITRx_SetConfig>
      break;
 8003f64:	e01c      	b.n	8003fa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	6859      	ldr	r1, [r3, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f000 f8ea 	bl	800414c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2140      	movs	r1, #64	; 0x40
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 f943 	bl	800420a <TIM_ITRx_SetConfig>
      break;
 8003f84:	e00c      	b.n	8003fa0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4610      	mov	r0, r2
 8003f92:	f000 f93a 	bl	800420a <TIM_ITRx_SetConfig>
      break;
 8003f96:	e003      	b.n	8003fa0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f9c:	e000      	b.n	8003fa0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a40      	ldr	r2, [pc, #256]	; (8004120 <TIM_Base_SetConfig+0x114>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d013      	beq.n	800404c <TIM_Base_SetConfig+0x40>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800402a:	d00f      	beq.n	800404c <TIM_Base_SetConfig+0x40>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a3d      	ldr	r2, [pc, #244]	; (8004124 <TIM_Base_SetConfig+0x118>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00b      	beq.n	800404c <TIM_Base_SetConfig+0x40>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a3c      	ldr	r2, [pc, #240]	; (8004128 <TIM_Base_SetConfig+0x11c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d007      	beq.n	800404c <TIM_Base_SetConfig+0x40>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a3b      	ldr	r2, [pc, #236]	; (800412c <TIM_Base_SetConfig+0x120>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d003      	beq.n	800404c <TIM_Base_SetConfig+0x40>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a3a      	ldr	r2, [pc, #232]	; (8004130 <TIM_Base_SetConfig+0x124>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d108      	bne.n	800405e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2f      	ldr	r2, [pc, #188]	; (8004120 <TIM_Base_SetConfig+0x114>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d02b      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406c:	d027      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a2c      	ldr	r2, [pc, #176]	; (8004124 <TIM_Base_SetConfig+0x118>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d023      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a2b      	ldr	r2, [pc, #172]	; (8004128 <TIM_Base_SetConfig+0x11c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d01f      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a2a      	ldr	r2, [pc, #168]	; (800412c <TIM_Base_SetConfig+0x120>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d01b      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a29      	ldr	r2, [pc, #164]	; (8004130 <TIM_Base_SetConfig+0x124>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d017      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a28      	ldr	r2, [pc, #160]	; (8004134 <TIM_Base_SetConfig+0x128>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d013      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a27      	ldr	r2, [pc, #156]	; (8004138 <TIM_Base_SetConfig+0x12c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00f      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a26      	ldr	r2, [pc, #152]	; (800413c <TIM_Base_SetConfig+0x130>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00b      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a25      	ldr	r2, [pc, #148]	; (8004140 <TIM_Base_SetConfig+0x134>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d007      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a24      	ldr	r2, [pc, #144]	; (8004144 <TIM_Base_SetConfig+0x138>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a23      	ldr	r2, [pc, #140]	; (8004148 <TIM_Base_SetConfig+0x13c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d108      	bne.n	80040d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a0a      	ldr	r2, [pc, #40]	; (8004120 <TIM_Base_SetConfig+0x114>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_Base_SetConfig+0xf8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a0c      	ldr	r2, [pc, #48]	; (8004130 <TIM_Base_SetConfig+0x124>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d103      	bne.n	800410c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	615a      	str	r2, [r3, #20]
}
 8004112:	bf00      	nop
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40010000 	.word	0x40010000
 8004124:	40000400 	.word	0x40000400
 8004128:	40000800 	.word	0x40000800
 800412c:	40000c00 	.word	0x40000c00
 8004130:	40010400 	.word	0x40010400
 8004134:	40014000 	.word	0x40014000
 8004138:	40014400 	.word	0x40014400
 800413c:	40014800 	.word	0x40014800
 8004140:	40001800 	.word	0x40001800
 8004144:	40001c00 	.word	0x40001c00
 8004148:	40002000 	.word	0x40002000

0800414c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f023 0201 	bic.w	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f023 030a 	bic.w	r3, r3, #10
 8004188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	621a      	str	r2, [r3, #32]
}
 800419e:	bf00      	nop
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b087      	sub	sp, #28
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	f023 0210 	bic.w	r2, r3, #16
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	031b      	lsls	r3, r3, #12
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	621a      	str	r2, [r3, #32]
}
 80041fe:	bf00      	nop
 8004200:	371c      	adds	r7, #28
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800420a:	b480      	push	{r7}
 800420c:	b085      	sub	sp, #20
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004220:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	f043 0307 	orr.w	r3, r3, #7
 800422c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800425a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	021a      	lsls	r2, r3, #8
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	431a      	orrs	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4313      	orrs	r3, r2
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	609a      	str	r2, [r3, #8]
}
 8004274:	bf00      	nop
 8004276:	371c      	adds	r7, #28
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004294:	2302      	movs	r3, #2
 8004296:	e05a      	b.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a21      	ldr	r2, [pc, #132]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d022      	beq.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e4:	d01d      	beq.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d018      	beq.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1b      	ldr	r2, [pc, #108]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d013      	beq.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1a      	ldr	r2, [pc, #104]	; (8004368 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00e      	beq.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a18      	ldr	r2, [pc, #96]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d009      	beq.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a17      	ldr	r2, [pc, #92]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d004      	beq.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a15      	ldr	r2, [pc, #84]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d10c      	bne.n	800433c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004328:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	4313      	orrs	r3, r2
 8004332:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40010000 	.word	0x40010000
 8004360:	40000400 	.word	0x40000400
 8004364:	40000800 	.word	0x40000800
 8004368:	40000c00 	.word	0x40000c00
 800436c:	40010400 	.word	0x40010400
 8004370:	40014000 	.word	0x40014000
 8004374:	40001800 	.word	0x40001800

08004378 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e03f      	b.n	8004432 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fd fb88 	bl	8001adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2224      	movs	r2, #36	; 0x24
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f929 	bl	800463c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695a      	ldr	r2, [r3, #20]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004408:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004418:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b08a      	sub	sp, #40	; 0x28
 800443e:	af02      	add	r7, sp, #8
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	603b      	str	r3, [r7, #0]
 8004446:	4613      	mov	r3, r2
 8004448:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b20      	cmp	r3, #32
 8004458:	d17c      	bne.n	8004554 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_UART_Transmit+0x2c>
 8004460:	88fb      	ldrh	r3, [r7, #6]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e075      	b.n	8004556 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_UART_Transmit+0x3e>
 8004474:	2302      	movs	r3, #2
 8004476:	e06e      	b.n	8004556 <HAL_UART_Transmit+0x11c>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2221      	movs	r2, #33	; 0x21
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800448e:	f7fd fbcd 	bl	8001c2c <HAL_GetTick>
 8004492:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	88fa      	ldrh	r2, [r7, #6]
 8004498:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	88fa      	ldrh	r2, [r7, #6]
 800449e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a8:	d108      	bne.n	80044bc <HAL_UART_Transmit+0x82>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d104      	bne.n	80044bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	e003      	b.n	80044c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044cc:	e02a      	b.n	8004524 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2200      	movs	r2, #0
 80044d6:	2180      	movs	r1, #128	; 0x80
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f840 	bl	800455e <UART_WaitOnFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e036      	b.n	8004556 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10b      	bne.n	8004506 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	3302      	adds	r3, #2
 8004502:	61bb      	str	r3, [r7, #24]
 8004504:	e007      	b.n	8004516 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	781a      	ldrb	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	3301      	adds	r3, #1
 8004514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800451a:	b29b      	uxth	r3, r3
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1cf      	bne.n	80044ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2200      	movs	r2, #0
 8004536:	2140      	movs	r1, #64	; 0x40
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f810 	bl	800455e <UART_WaitOnFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e006      	b.n	8004556 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	e000      	b.n	8004556 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004554:	2302      	movs	r3, #2
  }
}
 8004556:	4618      	mov	r0, r3
 8004558:	3720      	adds	r7, #32
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b090      	sub	sp, #64	; 0x40
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	603b      	str	r3, [r7, #0]
 800456a:	4613      	mov	r3, r2
 800456c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800456e:	e050      	b.n	8004612 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004576:	d04c      	beq.n	8004612 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800457a:	2b00      	cmp	r3, #0
 800457c:	d007      	beq.n	800458e <UART_WaitOnFlagUntilTimeout+0x30>
 800457e:	f7fd fb55 	bl	8001c2c <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800458a:	429a      	cmp	r2, r3
 800458c:	d241      	bcs.n	8004612 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	330c      	adds	r3, #12
 8004594:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	330c      	adds	r3, #12
 80045ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045ae:	637a      	str	r2, [r7, #52]	; 0x34
 80045b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e5      	bne.n	800458e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3314      	adds	r3, #20
 80045c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	613b      	str	r3, [r7, #16]
   return(result);
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f023 0301 	bic.w	r3, r3, #1
 80045d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3314      	adds	r3, #20
 80045e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045e2:	623a      	str	r2, [r7, #32]
 80045e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	69f9      	ldr	r1, [r7, #28]
 80045e8:	6a3a      	ldr	r2, [r7, #32]
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e5      	bne.n	80045c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e00f      	b.n	8004632 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4013      	ands	r3, r2
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	429a      	cmp	r2, r3
 8004620:	bf0c      	ite	eq
 8004622:	2301      	moveq	r3, #1
 8004624:	2300      	movne	r3, #0
 8004626:	b2db      	uxtb	r3, r3
 8004628:	461a      	mov	r2, r3
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	429a      	cmp	r2, r3
 800462e:	d09f      	beq.n	8004570 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3740      	adds	r7, #64	; 0x40
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800463c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004640:	b0c0      	sub	sp, #256	; 0x100
 8004642:	af00      	add	r7, sp, #0
 8004644:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004658:	68d9      	ldr	r1, [r3, #12]
 800465a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	ea40 0301 	orr.w	r3, r0, r1
 8004664:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	431a      	orrs	r2, r3
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	431a      	orrs	r2, r3
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004694:	f021 010c 	bic.w	r1, r1, #12
 8004698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046a2:	430b      	orrs	r3, r1
 80046a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b6:	6999      	ldr	r1, [r3, #24]
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	ea40 0301 	orr.w	r3, r0, r1
 80046c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4b8f      	ldr	r3, [pc, #572]	; (8004908 <UART_SetConfig+0x2cc>)
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d005      	beq.n	80046dc <UART_SetConfig+0xa0>
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	4b8d      	ldr	r3, [pc, #564]	; (800490c <UART_SetConfig+0x2d0>)
 80046d8:	429a      	cmp	r2, r3
 80046da:	d104      	bne.n	80046e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046dc:	f7ff f998 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 80046e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046e4:	e003      	b.n	80046ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046e6:	f7ff f97f 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 80046ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046f8:	f040 810c 	bne.w	8004914 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004700:	2200      	movs	r2, #0
 8004702:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004706:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800470a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800470e:	4622      	mov	r2, r4
 8004710:	462b      	mov	r3, r5
 8004712:	1891      	adds	r1, r2, r2
 8004714:	65b9      	str	r1, [r7, #88]	; 0x58
 8004716:	415b      	adcs	r3, r3
 8004718:	65fb      	str	r3, [r7, #92]	; 0x5c
 800471a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800471e:	4621      	mov	r1, r4
 8004720:	eb12 0801 	adds.w	r8, r2, r1
 8004724:	4629      	mov	r1, r5
 8004726:	eb43 0901 	adc.w	r9, r3, r1
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004736:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800473a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800473e:	4690      	mov	r8, r2
 8004740:	4699      	mov	r9, r3
 8004742:	4623      	mov	r3, r4
 8004744:	eb18 0303 	adds.w	r3, r8, r3
 8004748:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800474c:	462b      	mov	r3, r5
 800474e:	eb49 0303 	adc.w	r3, r9, r3
 8004752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004762:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004766:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800476a:	460b      	mov	r3, r1
 800476c:	18db      	adds	r3, r3, r3
 800476e:	653b      	str	r3, [r7, #80]	; 0x50
 8004770:	4613      	mov	r3, r2
 8004772:	eb42 0303 	adc.w	r3, r2, r3
 8004776:	657b      	str	r3, [r7, #84]	; 0x54
 8004778:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800477c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004780:	f7fc fbe0 	bl	8000f44 <__aeabi_uldivmod>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4b61      	ldr	r3, [pc, #388]	; (8004910 <UART_SetConfig+0x2d4>)
 800478a:	fba3 2302 	umull	r2, r3, r3, r2
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	011c      	lsls	r4, r3, #4
 8004792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004796:	2200      	movs	r2, #0
 8004798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800479c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047a4:	4642      	mov	r2, r8
 80047a6:	464b      	mov	r3, r9
 80047a8:	1891      	adds	r1, r2, r2
 80047aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80047ac:	415b      	adcs	r3, r3
 80047ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047b4:	4641      	mov	r1, r8
 80047b6:	eb12 0a01 	adds.w	sl, r2, r1
 80047ba:	4649      	mov	r1, r9
 80047bc:	eb43 0b01 	adc.w	fp, r3, r1
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047d4:	4692      	mov	sl, r2
 80047d6:	469b      	mov	fp, r3
 80047d8:	4643      	mov	r3, r8
 80047da:	eb1a 0303 	adds.w	r3, sl, r3
 80047de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047e2:	464b      	mov	r3, r9
 80047e4:	eb4b 0303 	adc.w	r3, fp, r3
 80047e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004800:	460b      	mov	r3, r1
 8004802:	18db      	adds	r3, r3, r3
 8004804:	643b      	str	r3, [r7, #64]	; 0x40
 8004806:	4613      	mov	r3, r2
 8004808:	eb42 0303 	adc.w	r3, r2, r3
 800480c:	647b      	str	r3, [r7, #68]	; 0x44
 800480e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004812:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004816:	f7fc fb95 	bl	8000f44 <__aeabi_uldivmod>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	4611      	mov	r1, r2
 8004820:	4b3b      	ldr	r3, [pc, #236]	; (8004910 <UART_SetConfig+0x2d4>)
 8004822:	fba3 2301 	umull	r2, r3, r3, r1
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	2264      	movs	r2, #100	; 0x64
 800482a:	fb02 f303 	mul.w	r3, r2, r3
 800482e:	1acb      	subs	r3, r1, r3
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004836:	4b36      	ldr	r3, [pc, #216]	; (8004910 <UART_SetConfig+0x2d4>)
 8004838:	fba3 2302 	umull	r2, r3, r3, r2
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004844:	441c      	add	r4, r3
 8004846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800484a:	2200      	movs	r2, #0
 800484c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004850:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004854:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004858:	4642      	mov	r2, r8
 800485a:	464b      	mov	r3, r9
 800485c:	1891      	adds	r1, r2, r2
 800485e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004860:	415b      	adcs	r3, r3
 8004862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004864:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004868:	4641      	mov	r1, r8
 800486a:	1851      	adds	r1, r2, r1
 800486c:	6339      	str	r1, [r7, #48]	; 0x30
 800486e:	4649      	mov	r1, r9
 8004870:	414b      	adcs	r3, r1
 8004872:	637b      	str	r3, [r7, #52]	; 0x34
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004880:	4659      	mov	r1, fp
 8004882:	00cb      	lsls	r3, r1, #3
 8004884:	4651      	mov	r1, sl
 8004886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800488a:	4651      	mov	r1, sl
 800488c:	00ca      	lsls	r2, r1, #3
 800488e:	4610      	mov	r0, r2
 8004890:	4619      	mov	r1, r3
 8004892:	4603      	mov	r3, r0
 8004894:	4642      	mov	r2, r8
 8004896:	189b      	adds	r3, r3, r2
 8004898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800489c:	464b      	mov	r3, r9
 800489e:	460a      	mov	r2, r1
 80048a0:	eb42 0303 	adc.w	r3, r2, r3
 80048a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048bc:	460b      	mov	r3, r1
 80048be:	18db      	adds	r3, r3, r3
 80048c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048c2:	4613      	mov	r3, r2
 80048c4:	eb42 0303 	adc.w	r3, r2, r3
 80048c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80048d2:	f7fc fb37 	bl	8000f44 <__aeabi_uldivmod>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4b0d      	ldr	r3, [pc, #52]	; (8004910 <UART_SetConfig+0x2d4>)
 80048dc:	fba3 1302 	umull	r1, r3, r3, r2
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	2164      	movs	r1, #100	; 0x64
 80048e4:	fb01 f303 	mul.w	r3, r1, r3
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	3332      	adds	r3, #50	; 0x32
 80048ee:	4a08      	ldr	r2, [pc, #32]	; (8004910 <UART_SetConfig+0x2d4>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	095b      	lsrs	r3, r3, #5
 80048f6:	f003 0207 	and.w	r2, r3, #7
 80048fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4422      	add	r2, r4
 8004902:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004904:	e106      	b.n	8004b14 <UART_SetConfig+0x4d8>
 8004906:	bf00      	nop
 8004908:	40011000 	.word	0x40011000
 800490c:	40011400 	.word	0x40011400
 8004910:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004918:	2200      	movs	r2, #0
 800491a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800491e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004922:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004926:	4642      	mov	r2, r8
 8004928:	464b      	mov	r3, r9
 800492a:	1891      	adds	r1, r2, r2
 800492c:	6239      	str	r1, [r7, #32]
 800492e:	415b      	adcs	r3, r3
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
 8004932:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004936:	4641      	mov	r1, r8
 8004938:	1854      	adds	r4, r2, r1
 800493a:	4649      	mov	r1, r9
 800493c:	eb43 0501 	adc.w	r5, r3, r1
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	00eb      	lsls	r3, r5, #3
 800494a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800494e:	00e2      	lsls	r2, r4, #3
 8004950:	4614      	mov	r4, r2
 8004952:	461d      	mov	r5, r3
 8004954:	4643      	mov	r3, r8
 8004956:	18e3      	adds	r3, r4, r3
 8004958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800495c:	464b      	mov	r3, r9
 800495e:	eb45 0303 	adc.w	r3, r5, r3
 8004962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004972:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004982:	4629      	mov	r1, r5
 8004984:	008b      	lsls	r3, r1, #2
 8004986:	4621      	mov	r1, r4
 8004988:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800498c:	4621      	mov	r1, r4
 800498e:	008a      	lsls	r2, r1, #2
 8004990:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004994:	f7fc fad6 	bl	8000f44 <__aeabi_uldivmod>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4b60      	ldr	r3, [pc, #384]	; (8004b20 <UART_SetConfig+0x4e4>)
 800499e:	fba3 2302 	umull	r2, r3, r3, r2
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	011c      	lsls	r4, r3, #4
 80049a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049aa:	2200      	movs	r2, #0
 80049ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049b8:	4642      	mov	r2, r8
 80049ba:	464b      	mov	r3, r9
 80049bc:	1891      	adds	r1, r2, r2
 80049be:	61b9      	str	r1, [r7, #24]
 80049c0:	415b      	adcs	r3, r3
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049c8:	4641      	mov	r1, r8
 80049ca:	1851      	adds	r1, r2, r1
 80049cc:	6139      	str	r1, [r7, #16]
 80049ce:	4649      	mov	r1, r9
 80049d0:	414b      	adcs	r3, r1
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049e0:	4659      	mov	r1, fp
 80049e2:	00cb      	lsls	r3, r1, #3
 80049e4:	4651      	mov	r1, sl
 80049e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ea:	4651      	mov	r1, sl
 80049ec:	00ca      	lsls	r2, r1, #3
 80049ee:	4610      	mov	r0, r2
 80049f0:	4619      	mov	r1, r3
 80049f2:	4603      	mov	r3, r0
 80049f4:	4642      	mov	r2, r8
 80049f6:	189b      	adds	r3, r3, r2
 80049f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049fc:	464b      	mov	r3, r9
 80049fe:	460a      	mov	r2, r1
 8004a00:	eb42 0303 	adc.w	r3, r2, r3
 8004a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a20:	4649      	mov	r1, r9
 8004a22:	008b      	lsls	r3, r1, #2
 8004a24:	4641      	mov	r1, r8
 8004a26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a2a:	4641      	mov	r1, r8
 8004a2c:	008a      	lsls	r2, r1, #2
 8004a2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a32:	f7fc fa87 	bl	8000f44 <__aeabi_uldivmod>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	4b38      	ldr	r3, [pc, #224]	; (8004b20 <UART_SetConfig+0x4e4>)
 8004a3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	2264      	movs	r2, #100	; 0x64
 8004a46:	fb02 f303 	mul.w	r3, r2, r3
 8004a4a:	1acb      	subs	r3, r1, r3
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	3332      	adds	r3, #50	; 0x32
 8004a50:	4a33      	ldr	r2, [pc, #204]	; (8004b20 <UART_SetConfig+0x4e4>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a5c:	441c      	add	r4, r3
 8004a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a62:	2200      	movs	r2, #0
 8004a64:	673b      	str	r3, [r7, #112]	; 0x70
 8004a66:	677a      	str	r2, [r7, #116]	; 0x74
 8004a68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a6c:	4642      	mov	r2, r8
 8004a6e:	464b      	mov	r3, r9
 8004a70:	1891      	adds	r1, r2, r2
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	415b      	adcs	r3, r3
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a7c:	4641      	mov	r1, r8
 8004a7e:	1851      	adds	r1, r2, r1
 8004a80:	6039      	str	r1, [r7, #0]
 8004a82:	4649      	mov	r1, r9
 8004a84:	414b      	adcs	r3, r1
 8004a86:	607b      	str	r3, [r7, #4]
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	f04f 0300 	mov.w	r3, #0
 8004a90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a94:	4659      	mov	r1, fp
 8004a96:	00cb      	lsls	r3, r1, #3
 8004a98:	4651      	mov	r1, sl
 8004a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a9e:	4651      	mov	r1, sl
 8004aa0:	00ca      	lsls	r2, r1, #3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	4642      	mov	r2, r8
 8004aaa:	189b      	adds	r3, r3, r2
 8004aac:	66bb      	str	r3, [r7, #104]	; 0x68
 8004aae:	464b      	mov	r3, r9
 8004ab0:	460a      	mov	r2, r1
 8004ab2:	eb42 0303 	adc.w	r3, r2, r3
 8004ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ac2:	667a      	str	r2, [r7, #100]	; 0x64
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ad0:	4649      	mov	r1, r9
 8004ad2:	008b      	lsls	r3, r1, #2
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ada:	4641      	mov	r1, r8
 8004adc:	008a      	lsls	r2, r1, #2
 8004ade:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ae2:	f7fc fa2f 	bl	8000f44 <__aeabi_uldivmod>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <UART_SetConfig+0x4e4>)
 8004aec:	fba3 1302 	umull	r1, r3, r3, r2
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	2164      	movs	r1, #100	; 0x64
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	3332      	adds	r3, #50	; 0x32
 8004afe:	4a08      	ldr	r2, [pc, #32]	; (8004b20 <UART_SetConfig+0x4e4>)
 8004b00:	fba2 2303 	umull	r2, r3, r2, r3
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	f003 020f 	and.w	r2, r3, #15
 8004b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4422      	add	r2, r4
 8004b12:	609a      	str	r2, [r3, #8]
}
 8004b14:	bf00      	nop
 8004b16:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b20:	51eb851f 	.word	0x51eb851f

08004b24 <bmp280_read_calib_>:
#include "bmp280.h"
#include "math.h"
//
HAL_StatusTypeDef bmp280_read_calib_(I2C_HandleTypeDef *hi2c,uint16_t MemAddress, uint16_t *value)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08a      	sub	sp, #40	; 0x28
 8004b28:	af04      	add	r7, sp, #16
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	817b      	strh	r3, [r7, #10]
    uint8_t temp[2];
    if(HAL_I2C_Mem_Read(hi2c, (BMP280_ADDRESS_READ << 1), MemAddress, I2C_MEMADD_SIZE_8BIT, temp, 2, 5000) == HAL_OK)
 8004b32:	897a      	ldrh	r2, [r7, #10]
 8004b34:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b38:	9302      	str	r3, [sp, #8]
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	f107 0314 	add.w	r3, r7, #20
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	2301      	movs	r3, #1
 8004b46:	21ec      	movs	r1, #236	; 0xec
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f7fd fd5b 	bl	8002604 <HAL_I2C_Mem_Read>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10b      	bne.n	8004b6c <bmp280_read_calib_+0x48>
    {
        *value = (uint16_t)(((uint16_t)temp[1] << 8) | temp[0]);
 8004b54:	7d7b      	ldrb	r3, [r7, #21]
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	b21a      	sxth	r2, r3
 8004b5a:	7d3b      	ldrb	r3, [r7, #20]
 8004b5c:	b21b      	sxth	r3, r3
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	b21b      	sxth	r3, r3
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	801a      	strh	r2, [r3, #0]
        return HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	e000      	b.n	8004b6e <bmp280_read_calib_+0x4a>
    }
    else
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <bmp280_read_calib>:
// 读取校准系数
HAL_StatusTypeDef bmp280_read_calib(BMP280 *bmp280, I2C_HandleTypeDef *hi2c)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b082      	sub	sp, #8
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	6039      	str	r1, [r7, #0]
    return (bmp280_read_calib_(hi2c, BMP280_DIG_T1_LSB, (uint16_t *)&bmp280->dig_T1) \
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3314      	adds	r3, #20
 8004b84:	461a      	mov	r2, r3
 8004b86:	2188      	movs	r1, #136	; 0x88
 8004b88:	6838      	ldr	r0, [r7, #0]
 8004b8a:	f7ff ffcb 	bl	8004b24 <bmp280_read_calib_>
 8004b8e:	4603      	mov	r3, r0
    && bmp280_read_calib_(hi2c, BMP280_DIG_P4_LSB, (uint16_t *)&bmp280->dig_P4) \
    && bmp280_read_calib_(hi2c, BMP280_DIG_P5_LSB, (uint16_t *)&bmp280->dig_P5) \
    && bmp280_read_calib_(hi2c, BMP280_DIG_P6_LSB, (uint16_t *)&bmp280->dig_P6) \
    && bmp280_read_calib_(hi2c, BMP280_DIG_P7_LSB, (uint16_t *)&bmp280->dig_P7) \
    && bmp280_read_calib_(hi2c, BMP280_DIG_P8_LSB, (uint16_t *)&bmp280->dig_P8) \
    && bmp280_read_calib_(hi2c, BMP280_DIG_P9_LSB, (uint16_t *)&bmp280->dig_P9));
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d06f      	beq.n	8004c74 <bmp280_read_calib+0xfe>
    && bmp280_read_calib_(hi2c, BMP280_DIG_T2_LSB, (uint16_t *)&bmp280->dig_T2) \
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3316      	adds	r3, #22
 8004b98:	461a      	mov	r2, r3
 8004b9a:	218a      	movs	r1, #138	; 0x8a
 8004b9c:	6838      	ldr	r0, [r7, #0]
 8004b9e:	f7ff ffc1 	bl	8004b24 <bmp280_read_calib_>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d065      	beq.n	8004c74 <bmp280_read_calib+0xfe>
    && bmp280_read_calib_(hi2c, BMP280_DIG_T3_LSB, (uint16_t *)&bmp280->dig_T3) \
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3318      	adds	r3, #24
 8004bac:	461a      	mov	r2, r3
 8004bae:	218c      	movs	r1, #140	; 0x8c
 8004bb0:	6838      	ldr	r0, [r7, #0]
 8004bb2:	f7ff ffb7 	bl	8004b24 <bmp280_read_calib_>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d05b      	beq.n	8004c74 <bmp280_read_calib+0xfe>
    && bmp280_read_calib_(hi2c, BMP280_DIG_P1_LSB, (uint16_t *)&bmp280->dig_P1) \
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	331a      	adds	r3, #26
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	218e      	movs	r1, #142	; 0x8e
 8004bc4:	6838      	ldr	r0, [r7, #0]
 8004bc6:	f7ff ffad 	bl	8004b24 <bmp280_read_calib_>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d051      	beq.n	8004c74 <bmp280_read_calib+0xfe>
    && bmp280_read_calib_(hi2c, BMP280_DIG_P2_LSB, (uint16_t *)&bmp280->dig_P2) \
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	331c      	adds	r3, #28
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	2190      	movs	r1, #144	; 0x90
 8004bd8:	6838      	ldr	r0, [r7, #0]
 8004bda:	f7ff ffa3 	bl	8004b24 <bmp280_read_calib_>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d047      	beq.n	8004c74 <bmp280_read_calib+0xfe>
    && bmp280_read_calib_(hi2c, BMP280_DIG_P3_LSB, (uint16_t *)&bmp280->dig_P3) \
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	331e      	adds	r3, #30
 8004be8:	461a      	mov	r2, r3
 8004bea:	2192      	movs	r1, #146	; 0x92
 8004bec:	6838      	ldr	r0, [r7, #0]
 8004bee:	f7ff ff99 	bl	8004b24 <bmp280_read_calib_>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d03d      	beq.n	8004c74 <bmp280_read_calib+0xfe>
    && bmp280_read_calib_(hi2c, BMP280_DIG_P4_LSB, (uint16_t *)&bmp280->dig_P4) \
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3320      	adds	r3, #32
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	2194      	movs	r1, #148	; 0x94
 8004c00:	6838      	ldr	r0, [r7, #0]
 8004c02:	f7ff ff8f 	bl	8004b24 <bmp280_read_calib_>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d033      	beq.n	8004c74 <bmp280_read_calib+0xfe>
    && bmp280_read_calib_(hi2c, BMP280_DIG_P5_LSB, (uint16_t *)&bmp280->dig_P5) \
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3322      	adds	r3, #34	; 0x22
 8004c10:	461a      	mov	r2, r3
 8004c12:	2196      	movs	r1, #150	; 0x96
 8004c14:	6838      	ldr	r0, [r7, #0]
 8004c16:	f7ff ff85 	bl	8004b24 <bmp280_read_calib_>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d029      	beq.n	8004c74 <bmp280_read_calib+0xfe>
    && bmp280_read_calib_(hi2c, BMP280_DIG_P6_LSB, (uint16_t *)&bmp280->dig_P6) \
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3324      	adds	r3, #36	; 0x24
 8004c24:	461a      	mov	r2, r3
 8004c26:	2198      	movs	r1, #152	; 0x98
 8004c28:	6838      	ldr	r0, [r7, #0]
 8004c2a:	f7ff ff7b 	bl	8004b24 <bmp280_read_calib_>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01f      	beq.n	8004c74 <bmp280_read_calib+0xfe>
    && bmp280_read_calib_(hi2c, BMP280_DIG_P7_LSB, (uint16_t *)&bmp280->dig_P7) \
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3326      	adds	r3, #38	; 0x26
 8004c38:	461a      	mov	r2, r3
 8004c3a:	219a      	movs	r1, #154	; 0x9a
 8004c3c:	6838      	ldr	r0, [r7, #0]
 8004c3e:	f7ff ff71 	bl	8004b24 <bmp280_read_calib_>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d015      	beq.n	8004c74 <bmp280_read_calib+0xfe>
    && bmp280_read_calib_(hi2c, BMP280_DIG_P8_LSB, (uint16_t *)&bmp280->dig_P8) \
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3328      	adds	r3, #40	; 0x28
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	219c      	movs	r1, #156	; 0x9c
 8004c50:	6838      	ldr	r0, [r7, #0]
 8004c52:	f7ff ff67 	bl	8004b24 <bmp280_read_calib_>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00b      	beq.n	8004c74 <bmp280_read_calib+0xfe>
    && bmp280_read_calib_(hi2c, BMP280_DIG_P9_LSB, (uint16_t *)&bmp280->dig_P9));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	332a      	adds	r3, #42	; 0x2a
 8004c60:	461a      	mov	r2, r3
 8004c62:	219e      	movs	r1, #158	; 0x9e
 8004c64:	6838      	ldr	r0, [r7, #0]
 8004c66:	f7ff ff5d 	bl	8004b24 <bmp280_read_calib_>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <bmp280_read_calib+0xfe>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <bmp280_read_calib+0x100>
 8004c74:	2300      	movs	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <bmp280_init>:
// bmp280初始化
HAL_StatusTypeDef bmp280_init(BMP280 *bmp280, I2C_HandleTypeDef *hi2c)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af04      	add	r7, sp, #16
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
    uint8_t temp = 0;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &temp, 1, 5000);
 8004c8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c92:	9302      	str	r3, [sp, #8]
 8004c94:	2301      	movs	r3, #1
 8004c96:	9301      	str	r3, [sp, #4]
 8004c98:	f107 030f 	add.w	r3, r7, #15
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	22d0      	movs	r2, #208	; 0xd0
 8004ca2:	21ec      	movs	r1, #236	; 0xec
 8004ca4:	6838      	ldr	r0, [r7, #0]
 8004ca6:	f7fd fcad 	bl	8002604 <HAL_I2C_Mem_Read>
    if (temp != 0x58) // 未识别到芯片，报错
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	2b58      	cmp	r3, #88	; 0x58
 8004cae:	d001      	beq.n	8004cb4 <bmp280_init+0x34>
        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e053      	b.n	8004d5c <bmp280_init+0xdc>
    // 识别到芯片，先重置
    temp = 0xB6;
 8004cb4:	23b6      	movs	r3, #182	; 0xb6
 8004cb6:	73fb      	strb	r3, [r7, #15]
    if(HAL_I2C_Mem_Write(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_RESET, I2C_MEMADD_SIZE_8BIT, &temp, 1, 10000) != HAL_OK)
 8004cb8:	f242 7310 	movw	r3, #10000	; 0x2710
 8004cbc:	9302      	str	r3, [sp, #8]
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	f107 030f 	add.w	r3, r7, #15
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	2301      	movs	r3, #1
 8004cca:	22e0      	movs	r2, #224	; 0xe0
 8004ccc:	21ec      	movs	r1, #236	; 0xec
 8004cce:	6838      	ldr	r0, [r7, #0]
 8004cd0:	f7fd fb9e 	bl	8002410 <HAL_I2C_Mem_Write>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <bmp280_init+0x5e>
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e03e      	b.n	8004d5c <bmp280_init+0xdc>
    switch (BMP280_MODE) {
        case 1:
            temp = BMP280_MODE_1_CTRL;
            break;
        case 2:
            temp = BMP280_MODE_2_CTRL;
 8004cde:	232f      	movs	r3, #47	; 0x2f
 8004ce0:	73fb      	strb	r3, [r7, #15]
            break;
 8004ce2:	bf00      	nop
            temp = BMP280_MODE_6_CTRL;
            break;
        default:
            return HAL_ERROR;
    }
    if(HAL_I2C_Mem_Write(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &temp, 1, 10000) != HAL_OK)
 8004ce4:	f242 7310 	movw	r3, #10000	; 0x2710
 8004ce8:	9302      	str	r3, [sp, #8]
 8004cea:	2301      	movs	r3, #1
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	f107 030f 	add.w	r3, r7, #15
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	22f4      	movs	r2, #244	; 0xf4
 8004cf8:	21ec      	movs	r1, #236	; 0xec
 8004cfa:	6838      	ldr	r0, [r7, #0]
 8004cfc:	f7fd fb88 	bl	8002410 <HAL_I2C_Mem_Write>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <bmp280_init+0x8a>
        return HAL_ERROR; // 写入失败
 8004d06:	2301      	movs	r3, #1
 8004d08:	e028      	b.n	8004d5c <bmp280_init+0xdc>
    HAL_Delay(100);
 8004d0a:	2064      	movs	r0, #100	; 0x64
 8004d0c:	f7fc ff9a 	bl	8001c44 <HAL_Delay>
    switch (BMP280_MODE) {
        case 1:
            temp = BMP280_MODE_1_CONFIG;
            break;
        case 2:
            temp = BMP280_MODE_2_CONFIG;
 8004d10:	2314      	movs	r3, #20
 8004d12:	73fb      	strb	r3, [r7, #15]
            break;
 8004d14:	bf00      	nop
            temp = BMP280_MODE_6_CONFIG;
            break;
        default:
            return HAL_ERROR;
    }
    if(HAL_I2C_Mem_Write(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_CONFIG, I2C_MEMADD_SIZE_8BIT, &temp, 1, 10000) != HAL_OK)
 8004d16:	f242 7310 	movw	r3, #10000	; 0x2710
 8004d1a:	9302      	str	r3, [sp, #8]
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	9301      	str	r3, [sp, #4]
 8004d20:	f107 030f 	add.w	r3, r7, #15
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	2301      	movs	r3, #1
 8004d28:	22f5      	movs	r2, #245	; 0xf5
 8004d2a:	21ec      	movs	r1, #236	; 0xec
 8004d2c:	6838      	ldr	r0, [r7, #0]
 8004d2e:	f7fd fb6f 	bl	8002410 <HAL_I2C_Mem_Write>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <bmp280_init+0xbc>
        return HAL_ERROR; // 写入失败
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e00f      	b.n	8004d5c <bmp280_init+0xdc>
    HAL_Delay(100);
 8004d3c:	2064      	movs	r0, #100	; 0x64
 8004d3e:	f7fc ff81 	bl	8001c44 <HAL_Delay>
    if(bmp280_read_calib(bmp280, hi2c) != HAL_OK)
 8004d42:	6839      	ldr	r1, [r7, #0]
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7ff ff16 	bl	8004b76 <bmp280_read_calib>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <bmp280_init+0xd4>
        return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e003      	b.n	8004d5c <bmp280_init+0xdc>
    HAL_Delay(100);
 8004d54:	2064      	movs	r0, #100	; 0x64
 8004d56:	f7fc ff75 	bl	8001c44 <HAL_Delay>
    return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <bmp280_compensate_T_int32>:
// 转换温度采样值
float bmp280_compensate_T_int32(BMP280 *bmp280, int32_t t_raw)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
    int32_t var1, var2, T;
    var1           = ((((t_raw >> 3) - ((int32_t)bmp280->dig_T1 << 1))) * ((int32_t)bmp280->dig_T2)) >> 11;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	10da      	asrs	r2, r3, #3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	8a9b      	ldrh	r3, [r3, #20]
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8004d80:	fb02 f303 	mul.w	r3, r2, r3
 8004d84:	12db      	asrs	r3, r3, #11
 8004d86:	617b      	str	r3, [r7, #20]
    var2           = (((((t_raw >> 4) - ((int32_t)bmp280->dig_T1)) * ((t_raw >> 4) - ((int32_t)bmp280->dig_T1))) >> 12) * ((int32_t)bmp280->dig_T3)) >> 14;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	111b      	asrs	r3, r3, #4
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	8a92      	ldrh	r2, [r2, #20]
 8004d90:	1a9b      	subs	r3, r3, r2
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	1112      	asrs	r2, r2, #4
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	8a89      	ldrh	r1, [r1, #20]
 8004d9a:	1a52      	subs	r2, r2, r1
 8004d9c:	fb02 f303 	mul.w	r3, r2, r3
 8004da0:	131b      	asrs	r3, r3, #12
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8004da8:	fb02 f303 	mul.w	r3, r2, r3
 8004dac:	139b      	asrs	r3, r3, #14
 8004dae:	613b      	str	r3, [r7, #16]
    bmp280->t_fine = var1 + var2;
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	441a      	add	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	611a      	str	r2, [r3, #16]
    T              = (bmp280->t_fine * 5 + 128) >> 8;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	3380      	adds	r3, #128	; 0x80
 8004dc6:	121b      	asrs	r3, r3, #8
 8004dc8:	60fb      	str	r3, [r7, #12]
    T              = T / 100.0f;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	ee07 3a90 	vmov	s15, r3
 8004dd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dd4:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004e00 <bmp280_compensate_T_int32+0x9c>
 8004dd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004de0:	ee17 3a90 	vmov	r3, s15
 8004de4:	60fb      	str	r3, [r7, #12]
    return T;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	ee07 3a90 	vmov	s15, r3
 8004dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8004df0:	eeb0 0a67 	vmov.f32	s0, s15
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	42c80000 	.word	0x42c80000

08004e04 <bmp280_compensate_P_int64>:
// 转换气压原始值
float bmp280_compensate_P_int64(BMP280 *bmp280, int32_t p_raw)
{
 8004e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e08:	b0ca      	sub	sp, #296	; 0x128
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8004e10:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
    int64_t var1, var2, p;
    var1 = ((int64_t)bmp280->t_fine) - 128000;
 8004e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	17da      	asrs	r2, r3, #31
 8004e1c:	461c      	mov	r4, r3
 8004e1e:	4615      	mov	r5, r2
 8004e20:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8004e24:	f145 3bff 	adc.w	fp, r5, #4294967295
 8004e28:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
    var2 = var1 * var1 * (int64_t)bmp280->dig_P6;
 8004e2c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004e30:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e34:	fb03 f102 	mul.w	r1, r3, r2
 8004e38:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004e3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e40:	fb02 f303 	mul.w	r3, r2, r3
 8004e44:	18ca      	adds	r2, r1, r3
 8004e46:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e4a:	fba3 8903 	umull	r8, r9, r3, r3
 8004e4e:	eb02 0309 	add.w	r3, r2, r9
 8004e52:	4699      	mov	r9, r3
 8004e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e58:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004e5c:	b21b      	sxth	r3, r3
 8004e5e:	17da      	asrs	r2, r3, #31
 8004e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e68:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	fb03 f209 	mul.w	r2, r3, r9
 8004e72:	460b      	mov	r3, r1
 8004e74:	fb08 f303 	mul.w	r3, r8, r3
 8004e78:	4413      	add	r3, r2
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	fba8 1202 	umull	r1, r2, r8, r2
 8004e80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e84:	460a      	mov	r2, r1
 8004e86:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8004e8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e8e:	4413      	add	r3, r2
 8004e90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e94:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8004e98:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8004e9c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
    var2 = var2 + ((var1 * (int64_t)bmp280->dig_P5) << 17);
 8004ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8004ea8:	b21b      	sxth	r3, r3
 8004eaa:	17da      	asrs	r2, r3, #31
 8004eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004eb0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004eb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004eb8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8004ebc:	462a      	mov	r2, r5
 8004ebe:	fb02 f203 	mul.w	r2, r2, r3
 8004ec2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	441a      	add	r2, r3
 8004ece:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	fba3 1301 	umull	r1, r3, r3, r1
 8004ed8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004edc:	460b      	mov	r3, r1
 8004ede:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ee6:	18d3      	adds	r3, r2, r3
 8004ee8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004eec:	f04f 0000 	mov.w	r0, #0
 8004ef0:	f04f 0100 	mov.w	r1, #0
 8004ef4:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8004ef8:	462b      	mov	r3, r5
 8004efa:	0459      	lsls	r1, r3, #17
 8004efc:	4623      	mov	r3, r4
 8004efe:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8004f02:	4623      	mov	r3, r4
 8004f04:	0458      	lsls	r0, r3, #17
 8004f06:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8004f0a:	1814      	adds	r4, r2, r0
 8004f0c:	643c      	str	r4, [r7, #64]	; 0x40
 8004f0e:	414b      	adcs	r3, r1
 8004f10:	647b      	str	r3, [r7, #68]	; 0x44
 8004f12:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004f16:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
    var2 = var2 + (((int64_t)bmp280->dig_P4) << 35);
 8004f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f1e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004f22:	b21b      	sxth	r3, r3
 8004f24:	17da      	asrs	r2, r3, #31
 8004f26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f2a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f2e:	f04f 0000 	mov.w	r0, #0
 8004f32:	f04f 0100 	mov.w	r1, #0
 8004f36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f3a:	00d9      	lsls	r1, r3, #3
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8004f42:	1814      	adds	r4, r2, r0
 8004f44:	63bc      	str	r4, [r7, #56]	; 0x38
 8004f46:	414b      	adcs	r3, r1
 8004f48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f4a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8004f4e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
    var1 = ((var1 * var1 * (int64_t)bmp280->dig_P3) >> 8) + ((var1 * (int64_t)bmp280->dig_P2) << 12);
 8004f52:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004f56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f5a:	fb03 f102 	mul.w	r1, r3, r2
 8004f5e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004f62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f66:	fb02 f303 	mul.w	r3, r2, r3
 8004f6a:	18ca      	adds	r2, r1, r3
 8004f6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f70:	fba3 1303 	umull	r1, r3, r3, r3
 8004f74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f78:	460b      	mov	r3, r1
 8004f7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f82:	18d3      	adds	r3, r2, r3
 8004f84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f8c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004f90:	b21b      	sxth	r3, r3
 8004f92:	17da      	asrs	r2, r3, #31
 8004f94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f98:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f9c:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8004fa0:	462b      	mov	r3, r5
 8004fa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fa6:	4642      	mov	r2, r8
 8004fa8:	fb02 f203 	mul.w	r2, r2, r3
 8004fac:	464b      	mov	r3, r9
 8004fae:	4621      	mov	r1, r4
 8004fb0:	fb01 f303 	mul.w	r3, r1, r3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	4622      	mov	r2, r4
 8004fb8:	4641      	mov	r1, r8
 8004fba:	fba2 1201 	umull	r1, r2, r2, r1
 8004fbe:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004fc2:	460a      	mov	r2, r1
 8004fc4:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8004fc8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004fcc:	4413      	add	r3, r2
 8004fce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f04f 0100 	mov.w	r1, #0
 8004fda:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8004fde:	4623      	mov	r3, r4
 8004fe0:	0a18      	lsrs	r0, r3, #8
 8004fe2:	462b      	mov	r3, r5
 8004fe4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004fe8:	462b      	mov	r3, r5
 8004fea:	1219      	asrs	r1, r3, #8
 8004fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004ff4:	b21b      	sxth	r3, r3
 8004ff6:	17da      	asrs	r2, r3, #31
 8004ff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ffc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005000:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005004:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8005008:	464a      	mov	r2, r9
 800500a:	fb02 f203 	mul.w	r2, r2, r3
 800500e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005012:	4644      	mov	r4, r8
 8005014:	fb04 f303 	mul.w	r3, r4, r3
 8005018:	441a      	add	r2, r3
 800501a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800501e:	4644      	mov	r4, r8
 8005020:	fba3 4304 	umull	r4, r3, r3, r4
 8005024:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005028:	4623      	mov	r3, r4
 800502a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800502e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005032:	18d3      	adds	r3, r2, r3
 8005034:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8005044:	464c      	mov	r4, r9
 8005046:	0323      	lsls	r3, r4, #12
 8005048:	4644      	mov	r4, r8
 800504a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800504e:	4644      	mov	r4, r8
 8005050:	0322      	lsls	r2, r4, #12
 8005052:	1884      	adds	r4, r0, r2
 8005054:	633c      	str	r4, [r7, #48]	; 0x30
 8005056:	eb41 0303 	adc.w	r3, r1, r3
 800505a:	637b      	str	r3, [r7, #52]	; 0x34
 800505c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005060:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)bmp280->dig_P1) >> 33;
 8005064:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8005068:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800506c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8005070:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8005074:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005078:	8b5b      	ldrh	r3, [r3, #26]
 800507a:	b29b      	uxth	r3, r3
 800507c:	2200      	movs	r2, #0
 800507e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005082:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800508a:	462b      	mov	r3, r5
 800508c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005090:	4642      	mov	r2, r8
 8005092:	fb02 f203 	mul.w	r2, r2, r3
 8005096:	464b      	mov	r3, r9
 8005098:	4621      	mov	r1, r4
 800509a:	fb01 f303 	mul.w	r3, r1, r3
 800509e:	4413      	add	r3, r2
 80050a0:	4622      	mov	r2, r4
 80050a2:	4641      	mov	r1, r8
 80050a4:	fba2 1201 	umull	r1, r2, r2, r1
 80050a8:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80050ac:	460a      	mov	r2, r1
 80050ae:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80050b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80050b6:	4413      	add	r3, r2
 80050b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80050c8:	4629      	mov	r1, r5
 80050ca:	104a      	asrs	r2, r1, #1
 80050cc:	4629      	mov	r1, r5
 80050ce:	17cb      	asrs	r3, r1, #31
 80050d0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
    if (var1 == 0) {
 80050d4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80050d8:	4313      	orrs	r3, r2
 80050da:	d102      	bne.n	80050e2 <bmp280_compensate_P_int64+0x2de>
        return 0; // 避免除零引起的异常
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	e15d      	b.n	800539e <bmp280_compensate_P_int64+0x59a>
    }
    p    = 1048576 - p_raw;
 80050e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050e6:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80050ea:	17da      	asrs	r2, r3, #31
 80050ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050f0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80050f4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
    p    = (((p << 31) - var2) * 3125) / var1;
 80050f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050fc:	105b      	asrs	r3, r3, #1
 80050fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005102:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005106:	07db      	lsls	r3, r3, #31
 8005108:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800510c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8005110:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8005114:	4621      	mov	r1, r4
 8005116:	1a89      	subs	r1, r1, r2
 8005118:	67b9      	str	r1, [r7, #120]	; 0x78
 800511a:	4629      	mov	r1, r5
 800511c:	eb61 0303 	sbc.w	r3, r1, r3
 8005120:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005122:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005126:	4622      	mov	r2, r4
 8005128:	462b      	mov	r3, r5
 800512a:	1891      	adds	r1, r2, r2
 800512c:	6239      	str	r1, [r7, #32]
 800512e:	415b      	adcs	r3, r3
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
 8005132:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005136:	4621      	mov	r1, r4
 8005138:	1851      	adds	r1, r2, r1
 800513a:	61b9      	str	r1, [r7, #24]
 800513c:	4629      	mov	r1, r5
 800513e:	414b      	adcs	r3, r1
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	f04f 0200 	mov.w	r2, #0
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800514e:	4649      	mov	r1, r9
 8005150:	018b      	lsls	r3, r1, #6
 8005152:	4641      	mov	r1, r8
 8005154:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005158:	4641      	mov	r1, r8
 800515a:	018a      	lsls	r2, r1, #6
 800515c:	4641      	mov	r1, r8
 800515e:	1889      	adds	r1, r1, r2
 8005160:	6139      	str	r1, [r7, #16]
 8005162:	4649      	mov	r1, r9
 8005164:	eb43 0101 	adc.w	r1, r3, r1
 8005168:	6179      	str	r1, [r7, #20]
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	f04f 0300 	mov.w	r3, #0
 8005172:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8005176:	4649      	mov	r1, r9
 8005178:	008b      	lsls	r3, r1, #2
 800517a:	4641      	mov	r1, r8
 800517c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005180:	4641      	mov	r1, r8
 8005182:	008a      	lsls	r2, r1, #2
 8005184:	4610      	mov	r0, r2
 8005186:	4619      	mov	r1, r3
 8005188:	4603      	mov	r3, r0
 800518a:	4622      	mov	r2, r4
 800518c:	189b      	adds	r3, r3, r2
 800518e:	60bb      	str	r3, [r7, #8]
 8005190:	460b      	mov	r3, r1
 8005192:	462a      	mov	r2, r5
 8005194:	eb42 0303 	adc.w	r3, r2, r3
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	f04f 0200 	mov.w	r2, #0
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80051a6:	4649      	mov	r1, r9
 80051a8:	008b      	lsls	r3, r1, #2
 80051aa:	4641      	mov	r1, r8
 80051ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051b0:	4641      	mov	r1, r8
 80051b2:	008a      	lsls	r2, r1, #2
 80051b4:	4610      	mov	r0, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	4603      	mov	r3, r0
 80051ba:	4622      	mov	r2, r4
 80051bc:	189b      	adds	r3, r3, r2
 80051be:	673b      	str	r3, [r7, #112]	; 0x70
 80051c0:	462b      	mov	r3, r5
 80051c2:	460a      	mov	r2, r1
 80051c4:	eb42 0303 	adc.w	r3, r2, r3
 80051c8:	677b      	str	r3, [r7, #116]	; 0x74
 80051ca:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80051ce:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80051d2:	f7fb fe67 	bl	8000ea4 <__aeabi_ldivmod>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    var1 = (((int64_t)bmp280->dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 80051de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80051e6:	b21b      	sxth	r3, r3
 80051e8:	17da      	asrs	r2, r3, #31
 80051ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80051ec:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051ee:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80051f2:	f04f 0000 	mov.w	r0, #0
 80051f6:	f04f 0100 	mov.w	r1, #0
 80051fa:	0b50      	lsrs	r0, r2, #13
 80051fc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8005200:	1359      	asrs	r1, r3, #13
 8005202:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8005206:	462b      	mov	r3, r5
 8005208:	fb00 f203 	mul.w	r2, r0, r3
 800520c:	4623      	mov	r3, r4
 800520e:	fb03 f301 	mul.w	r3, r3, r1
 8005212:	4413      	add	r3, r2
 8005214:	4622      	mov	r2, r4
 8005216:	fba2 1200 	umull	r1, r2, r2, r0
 800521a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800521e:	460a      	mov	r2, r1
 8005220:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8005224:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005228:	4413      	add	r3, r2
 800522a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800522e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8005232:	f04f 0000 	mov.w	r0, #0
 8005236:	f04f 0100 	mov.w	r1, #0
 800523a:	0b50      	lsrs	r0, r2, #13
 800523c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8005240:	1359      	asrs	r1, r3, #13
 8005242:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8005246:	462b      	mov	r3, r5
 8005248:	fb00 f203 	mul.w	r2, r0, r3
 800524c:	4623      	mov	r3, r4
 800524e:	fb03 f301 	mul.w	r3, r3, r1
 8005252:	4413      	add	r3, r2
 8005254:	4622      	mov	r2, r4
 8005256:	fba2 1200 	umull	r1, r2, r2, r0
 800525a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800525e:	460a      	mov	r2, r1
 8005260:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8005264:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005268:	4413      	add	r3, r2
 800526a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800527a:	4621      	mov	r1, r4
 800527c:	0e4a      	lsrs	r2, r1, #25
 800527e:	4629      	mov	r1, r5
 8005280:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8005284:	4629      	mov	r1, r5
 8005286:	164b      	asrs	r3, r1, #25
 8005288:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
    var2 = (((int64_t)bmp280->dig_P8) * p) >> 19;
 800528c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005290:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8005294:	b21b      	sxth	r3, r3
 8005296:	17da      	asrs	r2, r3, #31
 8005298:	663b      	str	r3, [r7, #96]	; 0x60
 800529a:	667a      	str	r2, [r7, #100]	; 0x64
 800529c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80052a4:	462a      	mov	r2, r5
 80052a6:	fb02 f203 	mul.w	r2, r2, r3
 80052aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ae:	4621      	mov	r1, r4
 80052b0:	fb01 f303 	mul.w	r3, r1, r3
 80052b4:	4413      	add	r3, r2
 80052b6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80052ba:	4621      	mov	r1, r4
 80052bc:	fba2 1201 	umull	r1, r2, r2, r1
 80052c0:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80052c4:	460a      	mov	r2, r1
 80052c6:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80052ca:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80052ce:	4413      	add	r3, r2
 80052d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80052e0:	4621      	mov	r1, r4
 80052e2:	0cca      	lsrs	r2, r1, #19
 80052e4:	4629      	mov	r1, r5
 80052e6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80052ea:	4629      	mov	r1, r5
 80052ec:	14cb      	asrs	r3, r1, #19
 80052ee:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
    p    = ((p + var1 + var2) >> 8) + (((int64_t)bmp280->dig_P7) << 4);
 80052f2:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80052f6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80052fa:	1884      	adds	r4, r0, r2
 80052fc:	65bc      	str	r4, [r7, #88]	; 0x58
 80052fe:	eb41 0303 	adc.w	r3, r1, r3
 8005302:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005304:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8005308:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800530c:	4621      	mov	r1, r4
 800530e:	1889      	adds	r1, r1, r2
 8005310:	6539      	str	r1, [r7, #80]	; 0x50
 8005312:	4629      	mov	r1, r5
 8005314:	eb43 0101 	adc.w	r1, r3, r1
 8005318:	6579      	str	r1, [r7, #84]	; 0x54
 800531a:	f04f 0000 	mov.w	r0, #0
 800531e:	f04f 0100 	mov.w	r1, #0
 8005322:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8005326:	4623      	mov	r3, r4
 8005328:	0a18      	lsrs	r0, r3, #8
 800532a:	462b      	mov	r3, r5
 800532c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8005330:	462b      	mov	r3, r5
 8005332:	1219      	asrs	r1, r3, #8
 8005334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005338:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800533c:	b21b      	sxth	r3, r3
 800533e:	17da      	asrs	r2, r3, #31
 8005340:	64bb      	str	r3, [r7, #72]	; 0x48
 8005342:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8005350:	464c      	mov	r4, r9
 8005352:	0123      	lsls	r3, r4, #4
 8005354:	4644      	mov	r4, r8
 8005356:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800535a:	4644      	mov	r4, r8
 800535c:	0122      	lsls	r2, r4, #4
 800535e:	1884      	adds	r4, r0, r2
 8005360:	603c      	str	r4, [r7, #0]
 8005362:	eb41 0303 	adc.w	r3, r1, r3
 8005366:	607b      	str	r3, [r7, #4]
 8005368:	e9d7 3400 	ldrd	r3, r4, [r7]
 800536c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
    p    = p / 25600.0f;
 8005370:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8005374:	f7fb fd58 	bl	8000e28 <__aeabi_l2f>
 8005378:	ee06 0a90 	vmov	s13, r0
 800537c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80053b0 <bmp280_compensate_P_int64+0x5ac>
 8005380:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005384:	ee17 0a10 	vmov	r0, s14
 8005388:	f7fb fdf4 	bl	8000f74 <__aeabi_f2lz>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    return p;
 8005394:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8005398:	f7fb fd46 	bl	8000e28 <__aeabi_l2f>
 800539c:	4603      	mov	r3, r0
}
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eeb0 0a67 	vmov.f32	s0, s15
 80053a6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80053aa:	46bd      	mov	sp, r7
 80053ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053b0:	46c80000 	.word	0x46c80000

080053b4 <bmp280_getTemprature>:
// 返回实际温度（℃）
float bmp280_getTemprature(BMP280 *bmp280, I2C_HandleTypeDef *hi2c)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af04      	add	r7, sp, #16
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
    uint8_t temp[3];
    HAL_I2C_Mem_Read(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_TEMPERATURE_MSB, I2C_MEMADD_SIZE_8BIT, &temp[0], 1, 1000);
 80053be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053c2:	9302      	str	r3, [sp, #8]
 80053c4:	2301      	movs	r3, #1
 80053c6:	9301      	str	r3, [sp, #4]
 80053c8:	f107 0308 	add.w	r3, r7, #8
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	2301      	movs	r3, #1
 80053d0:	22fa      	movs	r2, #250	; 0xfa
 80053d2:	21ec      	movs	r1, #236	; 0xec
 80053d4:	6838      	ldr	r0, [r7, #0]
 80053d6:	f7fd f915 	bl	8002604 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_TEMPERATURE_LSB, I2C_MEMADD_SIZE_8BIT, &temp[1], 1, 1000);
 80053da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053de:	9302      	str	r3, [sp, #8]
 80053e0:	2301      	movs	r3, #1
 80053e2:	9301      	str	r3, [sp, #4]
 80053e4:	f107 0308 	add.w	r3, r7, #8
 80053e8:	3301      	adds	r3, #1
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	2301      	movs	r3, #1
 80053ee:	22fb      	movs	r2, #251	; 0xfb
 80053f0:	21ec      	movs	r1, #236	; 0xec
 80053f2:	6838      	ldr	r0, [r7, #0]
 80053f4:	f7fd f906 	bl	8002604 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_TEMPERATURE_XLSB, I2C_MEMADD_SIZE_8BIT, &temp[2], 1, 1000);
 80053f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053fc:	9302      	str	r3, [sp, #8]
 80053fe:	2301      	movs	r3, #1
 8005400:	9301      	str	r3, [sp, #4]
 8005402:	f107 0308 	add.w	r3, r7, #8
 8005406:	3302      	adds	r3, #2
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	2301      	movs	r3, #1
 800540c:	22fc      	movs	r2, #252	; 0xfc
 800540e:	21ec      	movs	r1, #236	; 0xec
 8005410:	6838      	ldr	r0, [r7, #0]
 8005412:	f7fd f8f7 	bl	8002604 <HAL_I2C_Mem_Read>
    int32_t t_raw    = (((int32_t)temp[0]) << 12) | (((int32_t)temp[1]) << 4) | (((int32_t)temp[2]) >> 4);
 8005416:	7a3b      	ldrb	r3, [r7, #8]
 8005418:	031a      	lsls	r2, r3, #12
 800541a:	7a7b      	ldrb	r3, [r7, #9]
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	4313      	orrs	r3, r2
 8005420:	7aba      	ldrb	r2, [r7, #10]
 8005422:	0912      	lsrs	r2, r2, #4
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]
    bmp280->t_result = bmp280_compensate_T_int32(bmp280, t_raw);
 800542a:	68f9      	ldr	r1, [r7, #12]
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff fc99 	bl	8004d64 <bmp280_compensate_T_int32>
 8005432:	eef0 7a40 	vmov.f32	s15, s0
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	edc3 7a00 	vstr	s15, [r3]
    return bmp280->t_result;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	ee07 3a90 	vmov	s15, r3
}
 8005444:	eeb0 0a67 	vmov.f32	s0, s15
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <bmp280_getPressure>:
// 返回实际气压（hPa）
float bmp280_getPressure(BMP280 *bmp280, I2C_HandleTypeDef *hi2c)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b088      	sub	sp, #32
 8005452:	af04      	add	r7, sp, #16
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	6039      	str	r1, [r7, #0]
    uint8_t temp[3];
    HAL_I2C_Mem_Read(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_PRESSURE_MSB, I2C_MEMADD_SIZE_8BIT, &temp[0], 1, 1000);
 8005458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800545c:	9302      	str	r3, [sp, #8]
 800545e:	2301      	movs	r3, #1
 8005460:	9301      	str	r3, [sp, #4]
 8005462:	f107 0308 	add.w	r3, r7, #8
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	2301      	movs	r3, #1
 800546a:	22f7      	movs	r2, #247	; 0xf7
 800546c:	21ec      	movs	r1, #236	; 0xec
 800546e:	6838      	ldr	r0, [r7, #0]
 8005470:	f7fd f8c8 	bl	8002604 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_PRESSURE_LSB, I2C_MEMADD_SIZE_8BIT, &temp[1], 1, 1000);
 8005474:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005478:	9302      	str	r3, [sp, #8]
 800547a:	2301      	movs	r3, #1
 800547c:	9301      	str	r3, [sp, #4]
 800547e:	f107 0308 	add.w	r3, r7, #8
 8005482:	3301      	adds	r3, #1
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	2301      	movs	r3, #1
 8005488:	22f8      	movs	r2, #248	; 0xf8
 800548a:	21ec      	movs	r1, #236	; 0xec
 800548c:	6838      	ldr	r0, [r7, #0]
 800548e:	f7fd f8b9 	bl	8002604 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_PRESSURE_XLSB, I2C_MEMADD_SIZE_8BIT, &temp[2], 1, 1000);
 8005492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005496:	9302      	str	r3, [sp, #8]
 8005498:	2301      	movs	r3, #1
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	f107 0308 	add.w	r3, r7, #8
 80054a0:	3302      	adds	r3, #2
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	2301      	movs	r3, #1
 80054a6:	22f9      	movs	r2, #249	; 0xf9
 80054a8:	21ec      	movs	r1, #236	; 0xec
 80054aa:	6838      	ldr	r0, [r7, #0]
 80054ac:	f7fd f8aa 	bl	8002604 <HAL_I2C_Mem_Read>
    int32_t p_raw    = (((int32_t)temp[0]) << 12) | (((int32_t)temp[1]) << 4) | (((int32_t)temp[2]) >> 4);
 80054b0:	7a3b      	ldrb	r3, [r7, #8]
 80054b2:	031a      	lsls	r2, r3, #12
 80054b4:	7a7b      	ldrb	r3, [r7, #9]
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	4313      	orrs	r3, r2
 80054ba:	7aba      	ldrb	r2, [r7, #10]
 80054bc:	0912      	lsrs	r2, r2, #4
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
    bmp280->p_result = bmp280_compensate_P_int64(bmp280, p_raw);
 80054c4:	68f9      	ldr	r1, [r7, #12]
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff fc9c 	bl	8004e04 <bmp280_compensate_P_int64>
 80054cc:	eef0 7a40 	vmov.f32	s15, s0
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	edc3 7a01 	vstr	s15, [r3, #4]
    return bmp280->p_result;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	ee07 3a90 	vmov	s15, r3
}
 80054de:	eeb0 0a67 	vmov.f32	s0, s15
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <__cvt>:
 80054e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054ec:	ec55 4b10 	vmov	r4, r5, d0
 80054f0:	2d00      	cmp	r5, #0
 80054f2:	460e      	mov	r6, r1
 80054f4:	4619      	mov	r1, r3
 80054f6:	462b      	mov	r3, r5
 80054f8:	bfbb      	ittet	lt
 80054fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80054fe:	461d      	movlt	r5, r3
 8005500:	2300      	movge	r3, #0
 8005502:	232d      	movlt	r3, #45	; 0x2d
 8005504:	700b      	strb	r3, [r1, #0]
 8005506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005508:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800550c:	4691      	mov	r9, r2
 800550e:	f023 0820 	bic.w	r8, r3, #32
 8005512:	bfbc      	itt	lt
 8005514:	4622      	movlt	r2, r4
 8005516:	4614      	movlt	r4, r2
 8005518:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800551c:	d005      	beq.n	800552a <__cvt+0x42>
 800551e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005522:	d100      	bne.n	8005526 <__cvt+0x3e>
 8005524:	3601      	adds	r6, #1
 8005526:	2102      	movs	r1, #2
 8005528:	e000      	b.n	800552c <__cvt+0x44>
 800552a:	2103      	movs	r1, #3
 800552c:	ab03      	add	r3, sp, #12
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	ab02      	add	r3, sp, #8
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	ec45 4b10 	vmov	d0, r4, r5
 8005538:	4653      	mov	r3, sl
 800553a:	4632      	mov	r2, r6
 800553c:	f001 f86c 	bl	8006618 <_dtoa_r>
 8005540:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005544:	4607      	mov	r7, r0
 8005546:	d102      	bne.n	800554e <__cvt+0x66>
 8005548:	f019 0f01 	tst.w	r9, #1
 800554c:	d022      	beq.n	8005594 <__cvt+0xac>
 800554e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005552:	eb07 0906 	add.w	r9, r7, r6
 8005556:	d110      	bne.n	800557a <__cvt+0x92>
 8005558:	783b      	ldrb	r3, [r7, #0]
 800555a:	2b30      	cmp	r3, #48	; 0x30
 800555c:	d10a      	bne.n	8005574 <__cvt+0x8c>
 800555e:	2200      	movs	r2, #0
 8005560:	2300      	movs	r3, #0
 8005562:	4620      	mov	r0, r4
 8005564:	4629      	mov	r1, r5
 8005566:	f7fb faaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800556a:	b918      	cbnz	r0, 8005574 <__cvt+0x8c>
 800556c:	f1c6 0601 	rsb	r6, r6, #1
 8005570:	f8ca 6000 	str.w	r6, [sl]
 8005574:	f8da 3000 	ldr.w	r3, [sl]
 8005578:	4499      	add	r9, r3
 800557a:	2200      	movs	r2, #0
 800557c:	2300      	movs	r3, #0
 800557e:	4620      	mov	r0, r4
 8005580:	4629      	mov	r1, r5
 8005582:	f7fb faa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005586:	b108      	cbz	r0, 800558c <__cvt+0xa4>
 8005588:	f8cd 900c 	str.w	r9, [sp, #12]
 800558c:	2230      	movs	r2, #48	; 0x30
 800558e:	9b03      	ldr	r3, [sp, #12]
 8005590:	454b      	cmp	r3, r9
 8005592:	d307      	bcc.n	80055a4 <__cvt+0xbc>
 8005594:	9b03      	ldr	r3, [sp, #12]
 8005596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005598:	1bdb      	subs	r3, r3, r7
 800559a:	4638      	mov	r0, r7
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	b004      	add	sp, #16
 80055a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a4:	1c59      	adds	r1, r3, #1
 80055a6:	9103      	str	r1, [sp, #12]
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	e7f0      	b.n	800558e <__cvt+0xa6>

080055ac <__exponent>:
 80055ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055ae:	4603      	mov	r3, r0
 80055b0:	2900      	cmp	r1, #0
 80055b2:	bfb8      	it	lt
 80055b4:	4249      	neglt	r1, r1
 80055b6:	f803 2b02 	strb.w	r2, [r3], #2
 80055ba:	bfb4      	ite	lt
 80055bc:	222d      	movlt	r2, #45	; 0x2d
 80055be:	222b      	movge	r2, #43	; 0x2b
 80055c0:	2909      	cmp	r1, #9
 80055c2:	7042      	strb	r2, [r0, #1]
 80055c4:	dd2a      	ble.n	800561c <__exponent+0x70>
 80055c6:	f10d 0207 	add.w	r2, sp, #7
 80055ca:	4617      	mov	r7, r2
 80055cc:	260a      	movs	r6, #10
 80055ce:	4694      	mov	ip, r2
 80055d0:	fb91 f5f6 	sdiv	r5, r1, r6
 80055d4:	fb06 1415 	mls	r4, r6, r5, r1
 80055d8:	3430      	adds	r4, #48	; 0x30
 80055da:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80055de:	460c      	mov	r4, r1
 80055e0:	2c63      	cmp	r4, #99	; 0x63
 80055e2:	f102 32ff 	add.w	r2, r2, #4294967295
 80055e6:	4629      	mov	r1, r5
 80055e8:	dcf1      	bgt.n	80055ce <__exponent+0x22>
 80055ea:	3130      	adds	r1, #48	; 0x30
 80055ec:	f1ac 0402 	sub.w	r4, ip, #2
 80055f0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80055f4:	1c41      	adds	r1, r0, #1
 80055f6:	4622      	mov	r2, r4
 80055f8:	42ba      	cmp	r2, r7
 80055fa:	d30a      	bcc.n	8005612 <__exponent+0x66>
 80055fc:	f10d 0209 	add.w	r2, sp, #9
 8005600:	eba2 020c 	sub.w	r2, r2, ip
 8005604:	42bc      	cmp	r4, r7
 8005606:	bf88      	it	hi
 8005608:	2200      	movhi	r2, #0
 800560a:	4413      	add	r3, r2
 800560c:	1a18      	subs	r0, r3, r0
 800560e:	b003      	add	sp, #12
 8005610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005612:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005616:	f801 5f01 	strb.w	r5, [r1, #1]!
 800561a:	e7ed      	b.n	80055f8 <__exponent+0x4c>
 800561c:	2330      	movs	r3, #48	; 0x30
 800561e:	3130      	adds	r1, #48	; 0x30
 8005620:	7083      	strb	r3, [r0, #2]
 8005622:	70c1      	strb	r1, [r0, #3]
 8005624:	1d03      	adds	r3, r0, #4
 8005626:	e7f1      	b.n	800560c <__exponent+0x60>

08005628 <_printf_float>:
 8005628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562c:	ed2d 8b02 	vpush	{d8}
 8005630:	b08d      	sub	sp, #52	; 0x34
 8005632:	460c      	mov	r4, r1
 8005634:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005638:	4616      	mov	r6, r2
 800563a:	461f      	mov	r7, r3
 800563c:	4605      	mov	r5, r0
 800563e:	f000 fee5 	bl	800640c <_localeconv_r>
 8005642:	f8d0 a000 	ldr.w	sl, [r0]
 8005646:	4650      	mov	r0, sl
 8005648:	f7fa fe12 	bl	8000270 <strlen>
 800564c:	2300      	movs	r3, #0
 800564e:	930a      	str	r3, [sp, #40]	; 0x28
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	9305      	str	r3, [sp, #20]
 8005654:	f8d8 3000 	ldr.w	r3, [r8]
 8005658:	f894 b018 	ldrb.w	fp, [r4, #24]
 800565c:	3307      	adds	r3, #7
 800565e:	f023 0307 	bic.w	r3, r3, #7
 8005662:	f103 0208 	add.w	r2, r3, #8
 8005666:	f8c8 2000 	str.w	r2, [r8]
 800566a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800566e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005672:	9307      	str	r3, [sp, #28]
 8005674:	f8cd 8018 	str.w	r8, [sp, #24]
 8005678:	ee08 0a10 	vmov	s16, r0
 800567c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005680:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005684:	4b9e      	ldr	r3, [pc, #632]	; (8005900 <_printf_float+0x2d8>)
 8005686:	f04f 32ff 	mov.w	r2, #4294967295
 800568a:	f7fb fa4f 	bl	8000b2c <__aeabi_dcmpun>
 800568e:	bb88      	cbnz	r0, 80056f4 <_printf_float+0xcc>
 8005690:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005694:	4b9a      	ldr	r3, [pc, #616]	; (8005900 <_printf_float+0x2d8>)
 8005696:	f04f 32ff 	mov.w	r2, #4294967295
 800569a:	f7fb fa29 	bl	8000af0 <__aeabi_dcmple>
 800569e:	bb48      	cbnz	r0, 80056f4 <_printf_float+0xcc>
 80056a0:	2200      	movs	r2, #0
 80056a2:	2300      	movs	r3, #0
 80056a4:	4640      	mov	r0, r8
 80056a6:	4649      	mov	r1, r9
 80056a8:	f7fb fa18 	bl	8000adc <__aeabi_dcmplt>
 80056ac:	b110      	cbz	r0, 80056b4 <_printf_float+0x8c>
 80056ae:	232d      	movs	r3, #45	; 0x2d
 80056b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056b4:	4a93      	ldr	r2, [pc, #588]	; (8005904 <_printf_float+0x2dc>)
 80056b6:	4b94      	ldr	r3, [pc, #592]	; (8005908 <_printf_float+0x2e0>)
 80056b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80056bc:	bf94      	ite	ls
 80056be:	4690      	movls	r8, r2
 80056c0:	4698      	movhi	r8, r3
 80056c2:	2303      	movs	r3, #3
 80056c4:	6123      	str	r3, [r4, #16]
 80056c6:	9b05      	ldr	r3, [sp, #20]
 80056c8:	f023 0304 	bic.w	r3, r3, #4
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	f04f 0900 	mov.w	r9, #0
 80056d2:	9700      	str	r7, [sp, #0]
 80056d4:	4633      	mov	r3, r6
 80056d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80056d8:	4621      	mov	r1, r4
 80056da:	4628      	mov	r0, r5
 80056dc:	f000 f9da 	bl	8005a94 <_printf_common>
 80056e0:	3001      	adds	r0, #1
 80056e2:	f040 8090 	bne.w	8005806 <_printf_float+0x1de>
 80056e6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ea:	b00d      	add	sp, #52	; 0x34
 80056ec:	ecbd 8b02 	vpop	{d8}
 80056f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f4:	4642      	mov	r2, r8
 80056f6:	464b      	mov	r3, r9
 80056f8:	4640      	mov	r0, r8
 80056fa:	4649      	mov	r1, r9
 80056fc:	f7fb fa16 	bl	8000b2c <__aeabi_dcmpun>
 8005700:	b140      	cbz	r0, 8005714 <_printf_float+0xec>
 8005702:	464b      	mov	r3, r9
 8005704:	2b00      	cmp	r3, #0
 8005706:	bfbc      	itt	lt
 8005708:	232d      	movlt	r3, #45	; 0x2d
 800570a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800570e:	4a7f      	ldr	r2, [pc, #508]	; (800590c <_printf_float+0x2e4>)
 8005710:	4b7f      	ldr	r3, [pc, #508]	; (8005910 <_printf_float+0x2e8>)
 8005712:	e7d1      	b.n	80056b8 <_printf_float+0x90>
 8005714:	6863      	ldr	r3, [r4, #4]
 8005716:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800571a:	9206      	str	r2, [sp, #24]
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	d13f      	bne.n	80057a0 <_printf_float+0x178>
 8005720:	2306      	movs	r3, #6
 8005722:	6063      	str	r3, [r4, #4]
 8005724:	9b05      	ldr	r3, [sp, #20]
 8005726:	6861      	ldr	r1, [r4, #4]
 8005728:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800572c:	2300      	movs	r3, #0
 800572e:	9303      	str	r3, [sp, #12]
 8005730:	ab0a      	add	r3, sp, #40	; 0x28
 8005732:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005736:	ab09      	add	r3, sp, #36	; 0x24
 8005738:	ec49 8b10 	vmov	d0, r8, r9
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	6022      	str	r2, [r4, #0]
 8005740:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005744:	4628      	mov	r0, r5
 8005746:	f7ff fecf 	bl	80054e8 <__cvt>
 800574a:	9b06      	ldr	r3, [sp, #24]
 800574c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800574e:	2b47      	cmp	r3, #71	; 0x47
 8005750:	4680      	mov	r8, r0
 8005752:	d108      	bne.n	8005766 <_printf_float+0x13e>
 8005754:	1cc8      	adds	r0, r1, #3
 8005756:	db02      	blt.n	800575e <_printf_float+0x136>
 8005758:	6863      	ldr	r3, [r4, #4]
 800575a:	4299      	cmp	r1, r3
 800575c:	dd41      	ble.n	80057e2 <_printf_float+0x1ba>
 800575e:	f1ab 0302 	sub.w	r3, fp, #2
 8005762:	fa5f fb83 	uxtb.w	fp, r3
 8005766:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800576a:	d820      	bhi.n	80057ae <_printf_float+0x186>
 800576c:	3901      	subs	r1, #1
 800576e:	465a      	mov	r2, fp
 8005770:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005774:	9109      	str	r1, [sp, #36]	; 0x24
 8005776:	f7ff ff19 	bl	80055ac <__exponent>
 800577a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800577c:	1813      	adds	r3, r2, r0
 800577e:	2a01      	cmp	r2, #1
 8005780:	4681      	mov	r9, r0
 8005782:	6123      	str	r3, [r4, #16]
 8005784:	dc02      	bgt.n	800578c <_printf_float+0x164>
 8005786:	6822      	ldr	r2, [r4, #0]
 8005788:	07d2      	lsls	r2, r2, #31
 800578a:	d501      	bpl.n	8005790 <_printf_float+0x168>
 800578c:	3301      	adds	r3, #1
 800578e:	6123      	str	r3, [r4, #16]
 8005790:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005794:	2b00      	cmp	r3, #0
 8005796:	d09c      	beq.n	80056d2 <_printf_float+0xaa>
 8005798:	232d      	movs	r3, #45	; 0x2d
 800579a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800579e:	e798      	b.n	80056d2 <_printf_float+0xaa>
 80057a0:	9a06      	ldr	r2, [sp, #24]
 80057a2:	2a47      	cmp	r2, #71	; 0x47
 80057a4:	d1be      	bne.n	8005724 <_printf_float+0xfc>
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1bc      	bne.n	8005724 <_printf_float+0xfc>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e7b9      	b.n	8005722 <_printf_float+0xfa>
 80057ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80057b2:	d118      	bne.n	80057e6 <_printf_float+0x1be>
 80057b4:	2900      	cmp	r1, #0
 80057b6:	6863      	ldr	r3, [r4, #4]
 80057b8:	dd0b      	ble.n	80057d2 <_printf_float+0x1aa>
 80057ba:	6121      	str	r1, [r4, #16]
 80057bc:	b913      	cbnz	r3, 80057c4 <_printf_float+0x19c>
 80057be:	6822      	ldr	r2, [r4, #0]
 80057c0:	07d0      	lsls	r0, r2, #31
 80057c2:	d502      	bpl.n	80057ca <_printf_float+0x1a2>
 80057c4:	3301      	adds	r3, #1
 80057c6:	440b      	add	r3, r1
 80057c8:	6123      	str	r3, [r4, #16]
 80057ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80057cc:	f04f 0900 	mov.w	r9, #0
 80057d0:	e7de      	b.n	8005790 <_printf_float+0x168>
 80057d2:	b913      	cbnz	r3, 80057da <_printf_float+0x1b2>
 80057d4:	6822      	ldr	r2, [r4, #0]
 80057d6:	07d2      	lsls	r2, r2, #31
 80057d8:	d501      	bpl.n	80057de <_printf_float+0x1b6>
 80057da:	3302      	adds	r3, #2
 80057dc:	e7f4      	b.n	80057c8 <_printf_float+0x1a0>
 80057de:	2301      	movs	r3, #1
 80057e0:	e7f2      	b.n	80057c8 <_printf_float+0x1a0>
 80057e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80057e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057e8:	4299      	cmp	r1, r3
 80057ea:	db05      	blt.n	80057f8 <_printf_float+0x1d0>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	6121      	str	r1, [r4, #16]
 80057f0:	07d8      	lsls	r0, r3, #31
 80057f2:	d5ea      	bpl.n	80057ca <_printf_float+0x1a2>
 80057f4:	1c4b      	adds	r3, r1, #1
 80057f6:	e7e7      	b.n	80057c8 <_printf_float+0x1a0>
 80057f8:	2900      	cmp	r1, #0
 80057fa:	bfd4      	ite	le
 80057fc:	f1c1 0202 	rsble	r2, r1, #2
 8005800:	2201      	movgt	r2, #1
 8005802:	4413      	add	r3, r2
 8005804:	e7e0      	b.n	80057c8 <_printf_float+0x1a0>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	055a      	lsls	r2, r3, #21
 800580a:	d407      	bmi.n	800581c <_printf_float+0x1f4>
 800580c:	6923      	ldr	r3, [r4, #16]
 800580e:	4642      	mov	r2, r8
 8005810:	4631      	mov	r1, r6
 8005812:	4628      	mov	r0, r5
 8005814:	47b8      	blx	r7
 8005816:	3001      	adds	r0, #1
 8005818:	d12c      	bne.n	8005874 <_printf_float+0x24c>
 800581a:	e764      	b.n	80056e6 <_printf_float+0xbe>
 800581c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005820:	f240 80e0 	bls.w	80059e4 <_printf_float+0x3bc>
 8005824:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005828:	2200      	movs	r2, #0
 800582a:	2300      	movs	r3, #0
 800582c:	f7fb f94c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005830:	2800      	cmp	r0, #0
 8005832:	d034      	beq.n	800589e <_printf_float+0x276>
 8005834:	4a37      	ldr	r2, [pc, #220]	; (8005914 <_printf_float+0x2ec>)
 8005836:	2301      	movs	r3, #1
 8005838:	4631      	mov	r1, r6
 800583a:	4628      	mov	r0, r5
 800583c:	47b8      	blx	r7
 800583e:	3001      	adds	r0, #1
 8005840:	f43f af51 	beq.w	80056e6 <_printf_float+0xbe>
 8005844:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005848:	429a      	cmp	r2, r3
 800584a:	db02      	blt.n	8005852 <_printf_float+0x22a>
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	07d8      	lsls	r0, r3, #31
 8005850:	d510      	bpl.n	8005874 <_printf_float+0x24c>
 8005852:	ee18 3a10 	vmov	r3, s16
 8005856:	4652      	mov	r2, sl
 8005858:	4631      	mov	r1, r6
 800585a:	4628      	mov	r0, r5
 800585c:	47b8      	blx	r7
 800585e:	3001      	adds	r0, #1
 8005860:	f43f af41 	beq.w	80056e6 <_printf_float+0xbe>
 8005864:	f04f 0800 	mov.w	r8, #0
 8005868:	f104 091a 	add.w	r9, r4, #26
 800586c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800586e:	3b01      	subs	r3, #1
 8005870:	4543      	cmp	r3, r8
 8005872:	dc09      	bgt.n	8005888 <_printf_float+0x260>
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	079b      	lsls	r3, r3, #30
 8005878:	f100 8107 	bmi.w	8005a8a <_printf_float+0x462>
 800587c:	68e0      	ldr	r0, [r4, #12]
 800587e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005880:	4298      	cmp	r0, r3
 8005882:	bfb8      	it	lt
 8005884:	4618      	movlt	r0, r3
 8005886:	e730      	b.n	80056ea <_printf_float+0xc2>
 8005888:	2301      	movs	r3, #1
 800588a:	464a      	mov	r2, r9
 800588c:	4631      	mov	r1, r6
 800588e:	4628      	mov	r0, r5
 8005890:	47b8      	blx	r7
 8005892:	3001      	adds	r0, #1
 8005894:	f43f af27 	beq.w	80056e6 <_printf_float+0xbe>
 8005898:	f108 0801 	add.w	r8, r8, #1
 800589c:	e7e6      	b.n	800586c <_printf_float+0x244>
 800589e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	dc39      	bgt.n	8005918 <_printf_float+0x2f0>
 80058a4:	4a1b      	ldr	r2, [pc, #108]	; (8005914 <_printf_float+0x2ec>)
 80058a6:	2301      	movs	r3, #1
 80058a8:	4631      	mov	r1, r6
 80058aa:	4628      	mov	r0, r5
 80058ac:	47b8      	blx	r7
 80058ae:	3001      	adds	r0, #1
 80058b0:	f43f af19 	beq.w	80056e6 <_printf_float+0xbe>
 80058b4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80058b8:	4313      	orrs	r3, r2
 80058ba:	d102      	bne.n	80058c2 <_printf_float+0x29a>
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	07d9      	lsls	r1, r3, #31
 80058c0:	d5d8      	bpl.n	8005874 <_printf_float+0x24c>
 80058c2:	ee18 3a10 	vmov	r3, s16
 80058c6:	4652      	mov	r2, sl
 80058c8:	4631      	mov	r1, r6
 80058ca:	4628      	mov	r0, r5
 80058cc:	47b8      	blx	r7
 80058ce:	3001      	adds	r0, #1
 80058d0:	f43f af09 	beq.w	80056e6 <_printf_float+0xbe>
 80058d4:	f04f 0900 	mov.w	r9, #0
 80058d8:	f104 0a1a 	add.w	sl, r4, #26
 80058dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058de:	425b      	negs	r3, r3
 80058e0:	454b      	cmp	r3, r9
 80058e2:	dc01      	bgt.n	80058e8 <_printf_float+0x2c0>
 80058e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e6:	e792      	b.n	800580e <_printf_float+0x1e6>
 80058e8:	2301      	movs	r3, #1
 80058ea:	4652      	mov	r2, sl
 80058ec:	4631      	mov	r1, r6
 80058ee:	4628      	mov	r0, r5
 80058f0:	47b8      	blx	r7
 80058f2:	3001      	adds	r0, #1
 80058f4:	f43f aef7 	beq.w	80056e6 <_printf_float+0xbe>
 80058f8:	f109 0901 	add.w	r9, r9, #1
 80058fc:	e7ee      	b.n	80058dc <_printf_float+0x2b4>
 80058fe:	bf00      	nop
 8005900:	7fefffff 	.word	0x7fefffff
 8005904:	08009cf8 	.word	0x08009cf8
 8005908:	08009cfc 	.word	0x08009cfc
 800590c:	08009d00 	.word	0x08009d00
 8005910:	08009d04 	.word	0x08009d04
 8005914:	08009d08 	.word	0x08009d08
 8005918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800591a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800591c:	429a      	cmp	r2, r3
 800591e:	bfa8      	it	ge
 8005920:	461a      	movge	r2, r3
 8005922:	2a00      	cmp	r2, #0
 8005924:	4691      	mov	r9, r2
 8005926:	dc37      	bgt.n	8005998 <_printf_float+0x370>
 8005928:	f04f 0b00 	mov.w	fp, #0
 800592c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005930:	f104 021a 	add.w	r2, r4, #26
 8005934:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005936:	9305      	str	r3, [sp, #20]
 8005938:	eba3 0309 	sub.w	r3, r3, r9
 800593c:	455b      	cmp	r3, fp
 800593e:	dc33      	bgt.n	80059a8 <_printf_float+0x380>
 8005940:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005944:	429a      	cmp	r2, r3
 8005946:	db3b      	blt.n	80059c0 <_printf_float+0x398>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	07da      	lsls	r2, r3, #31
 800594c:	d438      	bmi.n	80059c0 <_printf_float+0x398>
 800594e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005952:	eba2 0903 	sub.w	r9, r2, r3
 8005956:	9b05      	ldr	r3, [sp, #20]
 8005958:	1ad2      	subs	r2, r2, r3
 800595a:	4591      	cmp	r9, r2
 800595c:	bfa8      	it	ge
 800595e:	4691      	movge	r9, r2
 8005960:	f1b9 0f00 	cmp.w	r9, #0
 8005964:	dc35      	bgt.n	80059d2 <_printf_float+0x3aa>
 8005966:	f04f 0800 	mov.w	r8, #0
 800596a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800596e:	f104 0a1a 	add.w	sl, r4, #26
 8005972:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005976:	1a9b      	subs	r3, r3, r2
 8005978:	eba3 0309 	sub.w	r3, r3, r9
 800597c:	4543      	cmp	r3, r8
 800597e:	f77f af79 	ble.w	8005874 <_printf_float+0x24c>
 8005982:	2301      	movs	r3, #1
 8005984:	4652      	mov	r2, sl
 8005986:	4631      	mov	r1, r6
 8005988:	4628      	mov	r0, r5
 800598a:	47b8      	blx	r7
 800598c:	3001      	adds	r0, #1
 800598e:	f43f aeaa 	beq.w	80056e6 <_printf_float+0xbe>
 8005992:	f108 0801 	add.w	r8, r8, #1
 8005996:	e7ec      	b.n	8005972 <_printf_float+0x34a>
 8005998:	4613      	mov	r3, r2
 800599a:	4631      	mov	r1, r6
 800599c:	4642      	mov	r2, r8
 800599e:	4628      	mov	r0, r5
 80059a0:	47b8      	blx	r7
 80059a2:	3001      	adds	r0, #1
 80059a4:	d1c0      	bne.n	8005928 <_printf_float+0x300>
 80059a6:	e69e      	b.n	80056e6 <_printf_float+0xbe>
 80059a8:	2301      	movs	r3, #1
 80059aa:	4631      	mov	r1, r6
 80059ac:	4628      	mov	r0, r5
 80059ae:	9205      	str	r2, [sp, #20]
 80059b0:	47b8      	blx	r7
 80059b2:	3001      	adds	r0, #1
 80059b4:	f43f ae97 	beq.w	80056e6 <_printf_float+0xbe>
 80059b8:	9a05      	ldr	r2, [sp, #20]
 80059ba:	f10b 0b01 	add.w	fp, fp, #1
 80059be:	e7b9      	b.n	8005934 <_printf_float+0x30c>
 80059c0:	ee18 3a10 	vmov	r3, s16
 80059c4:	4652      	mov	r2, sl
 80059c6:	4631      	mov	r1, r6
 80059c8:	4628      	mov	r0, r5
 80059ca:	47b8      	blx	r7
 80059cc:	3001      	adds	r0, #1
 80059ce:	d1be      	bne.n	800594e <_printf_float+0x326>
 80059d0:	e689      	b.n	80056e6 <_printf_float+0xbe>
 80059d2:	9a05      	ldr	r2, [sp, #20]
 80059d4:	464b      	mov	r3, r9
 80059d6:	4442      	add	r2, r8
 80059d8:	4631      	mov	r1, r6
 80059da:	4628      	mov	r0, r5
 80059dc:	47b8      	blx	r7
 80059de:	3001      	adds	r0, #1
 80059e0:	d1c1      	bne.n	8005966 <_printf_float+0x33e>
 80059e2:	e680      	b.n	80056e6 <_printf_float+0xbe>
 80059e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059e6:	2a01      	cmp	r2, #1
 80059e8:	dc01      	bgt.n	80059ee <_printf_float+0x3c6>
 80059ea:	07db      	lsls	r3, r3, #31
 80059ec:	d53a      	bpl.n	8005a64 <_printf_float+0x43c>
 80059ee:	2301      	movs	r3, #1
 80059f0:	4642      	mov	r2, r8
 80059f2:	4631      	mov	r1, r6
 80059f4:	4628      	mov	r0, r5
 80059f6:	47b8      	blx	r7
 80059f8:	3001      	adds	r0, #1
 80059fa:	f43f ae74 	beq.w	80056e6 <_printf_float+0xbe>
 80059fe:	ee18 3a10 	vmov	r3, s16
 8005a02:	4652      	mov	r2, sl
 8005a04:	4631      	mov	r1, r6
 8005a06:	4628      	mov	r0, r5
 8005a08:	47b8      	blx	r7
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	f43f ae6b 	beq.w	80056e6 <_printf_float+0xbe>
 8005a10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a14:	2200      	movs	r2, #0
 8005a16:	2300      	movs	r3, #0
 8005a18:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005a1c:	f7fb f854 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a20:	b9d8      	cbnz	r0, 8005a5a <_printf_float+0x432>
 8005a22:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005a26:	f108 0201 	add.w	r2, r8, #1
 8005a2a:	4631      	mov	r1, r6
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	47b8      	blx	r7
 8005a30:	3001      	adds	r0, #1
 8005a32:	d10e      	bne.n	8005a52 <_printf_float+0x42a>
 8005a34:	e657      	b.n	80056e6 <_printf_float+0xbe>
 8005a36:	2301      	movs	r3, #1
 8005a38:	4652      	mov	r2, sl
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	47b8      	blx	r7
 8005a40:	3001      	adds	r0, #1
 8005a42:	f43f ae50 	beq.w	80056e6 <_printf_float+0xbe>
 8005a46:	f108 0801 	add.w	r8, r8, #1
 8005a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	4543      	cmp	r3, r8
 8005a50:	dcf1      	bgt.n	8005a36 <_printf_float+0x40e>
 8005a52:	464b      	mov	r3, r9
 8005a54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a58:	e6da      	b.n	8005810 <_printf_float+0x1e8>
 8005a5a:	f04f 0800 	mov.w	r8, #0
 8005a5e:	f104 0a1a 	add.w	sl, r4, #26
 8005a62:	e7f2      	b.n	8005a4a <_printf_float+0x422>
 8005a64:	2301      	movs	r3, #1
 8005a66:	4642      	mov	r2, r8
 8005a68:	e7df      	b.n	8005a2a <_printf_float+0x402>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	464a      	mov	r2, r9
 8005a6e:	4631      	mov	r1, r6
 8005a70:	4628      	mov	r0, r5
 8005a72:	47b8      	blx	r7
 8005a74:	3001      	adds	r0, #1
 8005a76:	f43f ae36 	beq.w	80056e6 <_printf_float+0xbe>
 8005a7a:	f108 0801 	add.w	r8, r8, #1
 8005a7e:	68e3      	ldr	r3, [r4, #12]
 8005a80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a82:	1a5b      	subs	r3, r3, r1
 8005a84:	4543      	cmp	r3, r8
 8005a86:	dcf0      	bgt.n	8005a6a <_printf_float+0x442>
 8005a88:	e6f8      	b.n	800587c <_printf_float+0x254>
 8005a8a:	f04f 0800 	mov.w	r8, #0
 8005a8e:	f104 0919 	add.w	r9, r4, #25
 8005a92:	e7f4      	b.n	8005a7e <_printf_float+0x456>

08005a94 <_printf_common>:
 8005a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a98:	4616      	mov	r6, r2
 8005a9a:	4699      	mov	r9, r3
 8005a9c:	688a      	ldr	r2, [r1, #8]
 8005a9e:	690b      	ldr	r3, [r1, #16]
 8005aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	bfb8      	it	lt
 8005aa8:	4613      	movlt	r3, r2
 8005aaa:	6033      	str	r3, [r6, #0]
 8005aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ab0:	4607      	mov	r7, r0
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	b10a      	cbz	r2, 8005aba <_printf_common+0x26>
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	6033      	str	r3, [r6, #0]
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	0699      	lsls	r1, r3, #26
 8005abe:	bf42      	ittt	mi
 8005ac0:	6833      	ldrmi	r3, [r6, #0]
 8005ac2:	3302      	addmi	r3, #2
 8005ac4:	6033      	strmi	r3, [r6, #0]
 8005ac6:	6825      	ldr	r5, [r4, #0]
 8005ac8:	f015 0506 	ands.w	r5, r5, #6
 8005acc:	d106      	bne.n	8005adc <_printf_common+0x48>
 8005ace:	f104 0a19 	add.w	sl, r4, #25
 8005ad2:	68e3      	ldr	r3, [r4, #12]
 8005ad4:	6832      	ldr	r2, [r6, #0]
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	42ab      	cmp	r3, r5
 8005ada:	dc26      	bgt.n	8005b2a <_printf_common+0x96>
 8005adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ae0:	1e13      	subs	r3, r2, #0
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	bf18      	it	ne
 8005ae6:	2301      	movne	r3, #1
 8005ae8:	0692      	lsls	r2, r2, #26
 8005aea:	d42b      	bmi.n	8005b44 <_printf_common+0xb0>
 8005aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005af0:	4649      	mov	r1, r9
 8005af2:	4638      	mov	r0, r7
 8005af4:	47c0      	blx	r8
 8005af6:	3001      	adds	r0, #1
 8005af8:	d01e      	beq.n	8005b38 <_printf_common+0xa4>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	6922      	ldr	r2, [r4, #16]
 8005afe:	f003 0306 	and.w	r3, r3, #6
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	bf02      	ittt	eq
 8005b06:	68e5      	ldreq	r5, [r4, #12]
 8005b08:	6833      	ldreq	r3, [r6, #0]
 8005b0a:	1aed      	subeq	r5, r5, r3
 8005b0c:	68a3      	ldr	r3, [r4, #8]
 8005b0e:	bf0c      	ite	eq
 8005b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b14:	2500      	movne	r5, #0
 8005b16:	4293      	cmp	r3, r2
 8005b18:	bfc4      	itt	gt
 8005b1a:	1a9b      	subgt	r3, r3, r2
 8005b1c:	18ed      	addgt	r5, r5, r3
 8005b1e:	2600      	movs	r6, #0
 8005b20:	341a      	adds	r4, #26
 8005b22:	42b5      	cmp	r5, r6
 8005b24:	d11a      	bne.n	8005b5c <_printf_common+0xc8>
 8005b26:	2000      	movs	r0, #0
 8005b28:	e008      	b.n	8005b3c <_printf_common+0xa8>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4652      	mov	r2, sl
 8005b2e:	4649      	mov	r1, r9
 8005b30:	4638      	mov	r0, r7
 8005b32:	47c0      	blx	r8
 8005b34:	3001      	adds	r0, #1
 8005b36:	d103      	bne.n	8005b40 <_printf_common+0xac>
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b40:	3501      	adds	r5, #1
 8005b42:	e7c6      	b.n	8005ad2 <_printf_common+0x3e>
 8005b44:	18e1      	adds	r1, r4, r3
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	2030      	movs	r0, #48	; 0x30
 8005b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b4e:	4422      	add	r2, r4
 8005b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b58:	3302      	adds	r3, #2
 8005b5a:	e7c7      	b.n	8005aec <_printf_common+0x58>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	4622      	mov	r2, r4
 8005b60:	4649      	mov	r1, r9
 8005b62:	4638      	mov	r0, r7
 8005b64:	47c0      	blx	r8
 8005b66:	3001      	adds	r0, #1
 8005b68:	d0e6      	beq.n	8005b38 <_printf_common+0xa4>
 8005b6a:	3601      	adds	r6, #1
 8005b6c:	e7d9      	b.n	8005b22 <_printf_common+0x8e>
	...

08005b70 <_printf_i>:
 8005b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b74:	7e0f      	ldrb	r7, [r1, #24]
 8005b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b78:	2f78      	cmp	r7, #120	; 0x78
 8005b7a:	4691      	mov	r9, r2
 8005b7c:	4680      	mov	r8, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	469a      	mov	sl, r3
 8005b82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b86:	d807      	bhi.n	8005b98 <_printf_i+0x28>
 8005b88:	2f62      	cmp	r7, #98	; 0x62
 8005b8a:	d80a      	bhi.n	8005ba2 <_printf_i+0x32>
 8005b8c:	2f00      	cmp	r7, #0
 8005b8e:	f000 80d4 	beq.w	8005d3a <_printf_i+0x1ca>
 8005b92:	2f58      	cmp	r7, #88	; 0x58
 8005b94:	f000 80c0 	beq.w	8005d18 <_printf_i+0x1a8>
 8005b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ba0:	e03a      	b.n	8005c18 <_printf_i+0xa8>
 8005ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ba6:	2b15      	cmp	r3, #21
 8005ba8:	d8f6      	bhi.n	8005b98 <_printf_i+0x28>
 8005baa:	a101      	add	r1, pc, #4	; (adr r1, 8005bb0 <_printf_i+0x40>)
 8005bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bb0:	08005c09 	.word	0x08005c09
 8005bb4:	08005c1d 	.word	0x08005c1d
 8005bb8:	08005b99 	.word	0x08005b99
 8005bbc:	08005b99 	.word	0x08005b99
 8005bc0:	08005b99 	.word	0x08005b99
 8005bc4:	08005b99 	.word	0x08005b99
 8005bc8:	08005c1d 	.word	0x08005c1d
 8005bcc:	08005b99 	.word	0x08005b99
 8005bd0:	08005b99 	.word	0x08005b99
 8005bd4:	08005b99 	.word	0x08005b99
 8005bd8:	08005b99 	.word	0x08005b99
 8005bdc:	08005d21 	.word	0x08005d21
 8005be0:	08005c49 	.word	0x08005c49
 8005be4:	08005cdb 	.word	0x08005cdb
 8005be8:	08005b99 	.word	0x08005b99
 8005bec:	08005b99 	.word	0x08005b99
 8005bf0:	08005d43 	.word	0x08005d43
 8005bf4:	08005b99 	.word	0x08005b99
 8005bf8:	08005c49 	.word	0x08005c49
 8005bfc:	08005b99 	.word	0x08005b99
 8005c00:	08005b99 	.word	0x08005b99
 8005c04:	08005ce3 	.word	0x08005ce3
 8005c08:	682b      	ldr	r3, [r5, #0]
 8005c0a:	1d1a      	adds	r2, r3, #4
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	602a      	str	r2, [r5, #0]
 8005c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e09f      	b.n	8005d5c <_printf_i+0x1ec>
 8005c1c:	6820      	ldr	r0, [r4, #0]
 8005c1e:	682b      	ldr	r3, [r5, #0]
 8005c20:	0607      	lsls	r7, r0, #24
 8005c22:	f103 0104 	add.w	r1, r3, #4
 8005c26:	6029      	str	r1, [r5, #0]
 8005c28:	d501      	bpl.n	8005c2e <_printf_i+0xbe>
 8005c2a:	681e      	ldr	r6, [r3, #0]
 8005c2c:	e003      	b.n	8005c36 <_printf_i+0xc6>
 8005c2e:	0646      	lsls	r6, r0, #25
 8005c30:	d5fb      	bpl.n	8005c2a <_printf_i+0xba>
 8005c32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c36:	2e00      	cmp	r6, #0
 8005c38:	da03      	bge.n	8005c42 <_printf_i+0xd2>
 8005c3a:	232d      	movs	r3, #45	; 0x2d
 8005c3c:	4276      	negs	r6, r6
 8005c3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c42:	485a      	ldr	r0, [pc, #360]	; (8005dac <_printf_i+0x23c>)
 8005c44:	230a      	movs	r3, #10
 8005c46:	e012      	b.n	8005c6e <_printf_i+0xfe>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	6820      	ldr	r0, [r4, #0]
 8005c4c:	1d19      	adds	r1, r3, #4
 8005c4e:	6029      	str	r1, [r5, #0]
 8005c50:	0605      	lsls	r5, r0, #24
 8005c52:	d501      	bpl.n	8005c58 <_printf_i+0xe8>
 8005c54:	681e      	ldr	r6, [r3, #0]
 8005c56:	e002      	b.n	8005c5e <_printf_i+0xee>
 8005c58:	0641      	lsls	r1, r0, #25
 8005c5a:	d5fb      	bpl.n	8005c54 <_printf_i+0xe4>
 8005c5c:	881e      	ldrh	r6, [r3, #0]
 8005c5e:	4853      	ldr	r0, [pc, #332]	; (8005dac <_printf_i+0x23c>)
 8005c60:	2f6f      	cmp	r7, #111	; 0x6f
 8005c62:	bf0c      	ite	eq
 8005c64:	2308      	moveq	r3, #8
 8005c66:	230a      	movne	r3, #10
 8005c68:	2100      	movs	r1, #0
 8005c6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c6e:	6865      	ldr	r5, [r4, #4]
 8005c70:	60a5      	str	r5, [r4, #8]
 8005c72:	2d00      	cmp	r5, #0
 8005c74:	bfa2      	ittt	ge
 8005c76:	6821      	ldrge	r1, [r4, #0]
 8005c78:	f021 0104 	bicge.w	r1, r1, #4
 8005c7c:	6021      	strge	r1, [r4, #0]
 8005c7e:	b90e      	cbnz	r6, 8005c84 <_printf_i+0x114>
 8005c80:	2d00      	cmp	r5, #0
 8005c82:	d04b      	beq.n	8005d1c <_printf_i+0x1ac>
 8005c84:	4615      	mov	r5, r2
 8005c86:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c8a:	fb03 6711 	mls	r7, r3, r1, r6
 8005c8e:	5dc7      	ldrb	r7, [r0, r7]
 8005c90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c94:	4637      	mov	r7, r6
 8005c96:	42bb      	cmp	r3, r7
 8005c98:	460e      	mov	r6, r1
 8005c9a:	d9f4      	bls.n	8005c86 <_printf_i+0x116>
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d10b      	bne.n	8005cb8 <_printf_i+0x148>
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	07de      	lsls	r6, r3, #31
 8005ca4:	d508      	bpl.n	8005cb8 <_printf_i+0x148>
 8005ca6:	6923      	ldr	r3, [r4, #16]
 8005ca8:	6861      	ldr	r1, [r4, #4]
 8005caa:	4299      	cmp	r1, r3
 8005cac:	bfde      	ittt	le
 8005cae:	2330      	movle	r3, #48	; 0x30
 8005cb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cb8:	1b52      	subs	r2, r2, r5
 8005cba:	6122      	str	r2, [r4, #16]
 8005cbc:	f8cd a000 	str.w	sl, [sp]
 8005cc0:	464b      	mov	r3, r9
 8005cc2:	aa03      	add	r2, sp, #12
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	4640      	mov	r0, r8
 8005cc8:	f7ff fee4 	bl	8005a94 <_printf_common>
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d14a      	bne.n	8005d66 <_printf_i+0x1f6>
 8005cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd4:	b004      	add	sp, #16
 8005cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	f043 0320 	orr.w	r3, r3, #32
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	4833      	ldr	r0, [pc, #204]	; (8005db0 <_printf_i+0x240>)
 8005ce4:	2778      	movs	r7, #120	; 0x78
 8005ce6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	6829      	ldr	r1, [r5, #0]
 8005cee:	061f      	lsls	r7, r3, #24
 8005cf0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cf4:	d402      	bmi.n	8005cfc <_printf_i+0x18c>
 8005cf6:	065f      	lsls	r7, r3, #25
 8005cf8:	bf48      	it	mi
 8005cfa:	b2b6      	uxthmi	r6, r6
 8005cfc:	07df      	lsls	r7, r3, #31
 8005cfe:	bf48      	it	mi
 8005d00:	f043 0320 	orrmi.w	r3, r3, #32
 8005d04:	6029      	str	r1, [r5, #0]
 8005d06:	bf48      	it	mi
 8005d08:	6023      	strmi	r3, [r4, #0]
 8005d0a:	b91e      	cbnz	r6, 8005d14 <_printf_i+0x1a4>
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	f023 0320 	bic.w	r3, r3, #32
 8005d12:	6023      	str	r3, [r4, #0]
 8005d14:	2310      	movs	r3, #16
 8005d16:	e7a7      	b.n	8005c68 <_printf_i+0xf8>
 8005d18:	4824      	ldr	r0, [pc, #144]	; (8005dac <_printf_i+0x23c>)
 8005d1a:	e7e4      	b.n	8005ce6 <_printf_i+0x176>
 8005d1c:	4615      	mov	r5, r2
 8005d1e:	e7bd      	b.n	8005c9c <_printf_i+0x12c>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	6826      	ldr	r6, [r4, #0]
 8005d24:	6961      	ldr	r1, [r4, #20]
 8005d26:	1d18      	adds	r0, r3, #4
 8005d28:	6028      	str	r0, [r5, #0]
 8005d2a:	0635      	lsls	r5, r6, #24
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	d501      	bpl.n	8005d34 <_printf_i+0x1c4>
 8005d30:	6019      	str	r1, [r3, #0]
 8005d32:	e002      	b.n	8005d3a <_printf_i+0x1ca>
 8005d34:	0670      	lsls	r0, r6, #25
 8005d36:	d5fb      	bpl.n	8005d30 <_printf_i+0x1c0>
 8005d38:	8019      	strh	r1, [r3, #0]
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	6123      	str	r3, [r4, #16]
 8005d3e:	4615      	mov	r5, r2
 8005d40:	e7bc      	b.n	8005cbc <_printf_i+0x14c>
 8005d42:	682b      	ldr	r3, [r5, #0]
 8005d44:	1d1a      	adds	r2, r3, #4
 8005d46:	602a      	str	r2, [r5, #0]
 8005d48:	681d      	ldr	r5, [r3, #0]
 8005d4a:	6862      	ldr	r2, [r4, #4]
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f7fa fa3e 	bl	80001d0 <memchr>
 8005d54:	b108      	cbz	r0, 8005d5a <_printf_i+0x1ea>
 8005d56:	1b40      	subs	r0, r0, r5
 8005d58:	6060      	str	r0, [r4, #4]
 8005d5a:	6863      	ldr	r3, [r4, #4]
 8005d5c:	6123      	str	r3, [r4, #16]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d64:	e7aa      	b.n	8005cbc <_printf_i+0x14c>
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	462a      	mov	r2, r5
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	47d0      	blx	sl
 8005d70:	3001      	adds	r0, #1
 8005d72:	d0ad      	beq.n	8005cd0 <_printf_i+0x160>
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	079b      	lsls	r3, r3, #30
 8005d78:	d413      	bmi.n	8005da2 <_printf_i+0x232>
 8005d7a:	68e0      	ldr	r0, [r4, #12]
 8005d7c:	9b03      	ldr	r3, [sp, #12]
 8005d7e:	4298      	cmp	r0, r3
 8005d80:	bfb8      	it	lt
 8005d82:	4618      	movlt	r0, r3
 8005d84:	e7a6      	b.n	8005cd4 <_printf_i+0x164>
 8005d86:	2301      	movs	r3, #1
 8005d88:	4632      	mov	r2, r6
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	4640      	mov	r0, r8
 8005d8e:	47d0      	blx	sl
 8005d90:	3001      	adds	r0, #1
 8005d92:	d09d      	beq.n	8005cd0 <_printf_i+0x160>
 8005d94:	3501      	adds	r5, #1
 8005d96:	68e3      	ldr	r3, [r4, #12]
 8005d98:	9903      	ldr	r1, [sp, #12]
 8005d9a:	1a5b      	subs	r3, r3, r1
 8005d9c:	42ab      	cmp	r3, r5
 8005d9e:	dcf2      	bgt.n	8005d86 <_printf_i+0x216>
 8005da0:	e7eb      	b.n	8005d7a <_printf_i+0x20a>
 8005da2:	2500      	movs	r5, #0
 8005da4:	f104 0619 	add.w	r6, r4, #25
 8005da8:	e7f5      	b.n	8005d96 <_printf_i+0x226>
 8005daa:	bf00      	nop
 8005dac:	08009d0a 	.word	0x08009d0a
 8005db0:	08009d1b 	.word	0x08009d1b

08005db4 <_scanf_float>:
 8005db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db8:	b087      	sub	sp, #28
 8005dba:	4617      	mov	r7, r2
 8005dbc:	9303      	str	r3, [sp, #12]
 8005dbe:	688b      	ldr	r3, [r1, #8]
 8005dc0:	1e5a      	subs	r2, r3, #1
 8005dc2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005dc6:	bf83      	ittte	hi
 8005dc8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005dcc:	195b      	addhi	r3, r3, r5
 8005dce:	9302      	strhi	r3, [sp, #8]
 8005dd0:	2300      	movls	r3, #0
 8005dd2:	bf86      	itte	hi
 8005dd4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005dd8:	608b      	strhi	r3, [r1, #8]
 8005dda:	9302      	strls	r3, [sp, #8]
 8005ddc:	680b      	ldr	r3, [r1, #0]
 8005dde:	468b      	mov	fp, r1
 8005de0:	2500      	movs	r5, #0
 8005de2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005de6:	f84b 3b1c 	str.w	r3, [fp], #28
 8005dea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005dee:	4680      	mov	r8, r0
 8005df0:	460c      	mov	r4, r1
 8005df2:	465e      	mov	r6, fp
 8005df4:	46aa      	mov	sl, r5
 8005df6:	46a9      	mov	r9, r5
 8005df8:	9501      	str	r5, [sp, #4]
 8005dfa:	68a2      	ldr	r2, [r4, #8]
 8005dfc:	b152      	cbz	r2, 8005e14 <_scanf_float+0x60>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b4e      	cmp	r3, #78	; 0x4e
 8005e04:	d864      	bhi.n	8005ed0 <_scanf_float+0x11c>
 8005e06:	2b40      	cmp	r3, #64	; 0x40
 8005e08:	d83c      	bhi.n	8005e84 <_scanf_float+0xd0>
 8005e0a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005e0e:	b2c8      	uxtb	r0, r1
 8005e10:	280e      	cmp	r0, #14
 8005e12:	d93a      	bls.n	8005e8a <_scanf_float+0xd6>
 8005e14:	f1b9 0f00 	cmp.w	r9, #0
 8005e18:	d003      	beq.n	8005e22 <_scanf_float+0x6e>
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e26:	f1ba 0f01 	cmp.w	sl, #1
 8005e2a:	f200 8113 	bhi.w	8006054 <_scanf_float+0x2a0>
 8005e2e:	455e      	cmp	r6, fp
 8005e30:	f200 8105 	bhi.w	800603e <_scanf_float+0x28a>
 8005e34:	2501      	movs	r5, #1
 8005e36:	4628      	mov	r0, r5
 8005e38:	b007      	add	sp, #28
 8005e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e3e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005e42:	2a0d      	cmp	r2, #13
 8005e44:	d8e6      	bhi.n	8005e14 <_scanf_float+0x60>
 8005e46:	a101      	add	r1, pc, #4	; (adr r1, 8005e4c <_scanf_float+0x98>)
 8005e48:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005e4c:	08005f8b 	.word	0x08005f8b
 8005e50:	08005e15 	.word	0x08005e15
 8005e54:	08005e15 	.word	0x08005e15
 8005e58:	08005e15 	.word	0x08005e15
 8005e5c:	08005feb 	.word	0x08005feb
 8005e60:	08005fc3 	.word	0x08005fc3
 8005e64:	08005e15 	.word	0x08005e15
 8005e68:	08005e15 	.word	0x08005e15
 8005e6c:	08005f99 	.word	0x08005f99
 8005e70:	08005e15 	.word	0x08005e15
 8005e74:	08005e15 	.word	0x08005e15
 8005e78:	08005e15 	.word	0x08005e15
 8005e7c:	08005e15 	.word	0x08005e15
 8005e80:	08005f51 	.word	0x08005f51
 8005e84:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005e88:	e7db      	b.n	8005e42 <_scanf_float+0x8e>
 8005e8a:	290e      	cmp	r1, #14
 8005e8c:	d8c2      	bhi.n	8005e14 <_scanf_float+0x60>
 8005e8e:	a001      	add	r0, pc, #4	; (adr r0, 8005e94 <_scanf_float+0xe0>)
 8005e90:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005e94:	08005f43 	.word	0x08005f43
 8005e98:	08005e15 	.word	0x08005e15
 8005e9c:	08005f43 	.word	0x08005f43
 8005ea0:	08005fd7 	.word	0x08005fd7
 8005ea4:	08005e15 	.word	0x08005e15
 8005ea8:	08005ef1 	.word	0x08005ef1
 8005eac:	08005f2d 	.word	0x08005f2d
 8005eb0:	08005f2d 	.word	0x08005f2d
 8005eb4:	08005f2d 	.word	0x08005f2d
 8005eb8:	08005f2d 	.word	0x08005f2d
 8005ebc:	08005f2d 	.word	0x08005f2d
 8005ec0:	08005f2d 	.word	0x08005f2d
 8005ec4:	08005f2d 	.word	0x08005f2d
 8005ec8:	08005f2d 	.word	0x08005f2d
 8005ecc:	08005f2d 	.word	0x08005f2d
 8005ed0:	2b6e      	cmp	r3, #110	; 0x6e
 8005ed2:	d809      	bhi.n	8005ee8 <_scanf_float+0x134>
 8005ed4:	2b60      	cmp	r3, #96	; 0x60
 8005ed6:	d8b2      	bhi.n	8005e3e <_scanf_float+0x8a>
 8005ed8:	2b54      	cmp	r3, #84	; 0x54
 8005eda:	d077      	beq.n	8005fcc <_scanf_float+0x218>
 8005edc:	2b59      	cmp	r3, #89	; 0x59
 8005ede:	d199      	bne.n	8005e14 <_scanf_float+0x60>
 8005ee0:	2d07      	cmp	r5, #7
 8005ee2:	d197      	bne.n	8005e14 <_scanf_float+0x60>
 8005ee4:	2508      	movs	r5, #8
 8005ee6:	e029      	b.n	8005f3c <_scanf_float+0x188>
 8005ee8:	2b74      	cmp	r3, #116	; 0x74
 8005eea:	d06f      	beq.n	8005fcc <_scanf_float+0x218>
 8005eec:	2b79      	cmp	r3, #121	; 0x79
 8005eee:	e7f6      	b.n	8005ede <_scanf_float+0x12a>
 8005ef0:	6821      	ldr	r1, [r4, #0]
 8005ef2:	05c8      	lsls	r0, r1, #23
 8005ef4:	d51a      	bpl.n	8005f2c <_scanf_float+0x178>
 8005ef6:	9b02      	ldr	r3, [sp, #8]
 8005ef8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005efc:	6021      	str	r1, [r4, #0]
 8005efe:	f109 0901 	add.w	r9, r9, #1
 8005f02:	b11b      	cbz	r3, 8005f0c <_scanf_float+0x158>
 8005f04:	3b01      	subs	r3, #1
 8005f06:	3201      	adds	r2, #1
 8005f08:	9302      	str	r3, [sp, #8]
 8005f0a:	60a2      	str	r2, [r4, #8]
 8005f0c:	68a3      	ldr	r3, [r4, #8]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	60a3      	str	r3, [r4, #8]
 8005f12:	6923      	ldr	r3, [r4, #16]
 8005f14:	3301      	adds	r3, #1
 8005f16:	6123      	str	r3, [r4, #16]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	607b      	str	r3, [r7, #4]
 8005f20:	f340 8084 	ble.w	800602c <_scanf_float+0x278>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	3301      	adds	r3, #1
 8005f28:	603b      	str	r3, [r7, #0]
 8005f2a:	e766      	b.n	8005dfa <_scanf_float+0x46>
 8005f2c:	eb1a 0f05 	cmn.w	sl, r5
 8005f30:	f47f af70 	bne.w	8005e14 <_scanf_float+0x60>
 8005f34:	6822      	ldr	r2, [r4, #0]
 8005f36:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005f3a:	6022      	str	r2, [r4, #0]
 8005f3c:	f806 3b01 	strb.w	r3, [r6], #1
 8005f40:	e7e4      	b.n	8005f0c <_scanf_float+0x158>
 8005f42:	6822      	ldr	r2, [r4, #0]
 8005f44:	0610      	lsls	r0, r2, #24
 8005f46:	f57f af65 	bpl.w	8005e14 <_scanf_float+0x60>
 8005f4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f4e:	e7f4      	b.n	8005f3a <_scanf_float+0x186>
 8005f50:	f1ba 0f00 	cmp.w	sl, #0
 8005f54:	d10e      	bne.n	8005f74 <_scanf_float+0x1c0>
 8005f56:	f1b9 0f00 	cmp.w	r9, #0
 8005f5a:	d10e      	bne.n	8005f7a <_scanf_float+0x1c6>
 8005f5c:	6822      	ldr	r2, [r4, #0]
 8005f5e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005f62:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005f66:	d108      	bne.n	8005f7a <_scanf_float+0x1c6>
 8005f68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f6c:	6022      	str	r2, [r4, #0]
 8005f6e:	f04f 0a01 	mov.w	sl, #1
 8005f72:	e7e3      	b.n	8005f3c <_scanf_float+0x188>
 8005f74:	f1ba 0f02 	cmp.w	sl, #2
 8005f78:	d055      	beq.n	8006026 <_scanf_float+0x272>
 8005f7a:	2d01      	cmp	r5, #1
 8005f7c:	d002      	beq.n	8005f84 <_scanf_float+0x1d0>
 8005f7e:	2d04      	cmp	r5, #4
 8005f80:	f47f af48 	bne.w	8005e14 <_scanf_float+0x60>
 8005f84:	3501      	adds	r5, #1
 8005f86:	b2ed      	uxtb	r5, r5
 8005f88:	e7d8      	b.n	8005f3c <_scanf_float+0x188>
 8005f8a:	f1ba 0f01 	cmp.w	sl, #1
 8005f8e:	f47f af41 	bne.w	8005e14 <_scanf_float+0x60>
 8005f92:	f04f 0a02 	mov.w	sl, #2
 8005f96:	e7d1      	b.n	8005f3c <_scanf_float+0x188>
 8005f98:	b97d      	cbnz	r5, 8005fba <_scanf_float+0x206>
 8005f9a:	f1b9 0f00 	cmp.w	r9, #0
 8005f9e:	f47f af3c 	bne.w	8005e1a <_scanf_float+0x66>
 8005fa2:	6822      	ldr	r2, [r4, #0]
 8005fa4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005fa8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005fac:	f47f af39 	bne.w	8005e22 <_scanf_float+0x6e>
 8005fb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005fb4:	6022      	str	r2, [r4, #0]
 8005fb6:	2501      	movs	r5, #1
 8005fb8:	e7c0      	b.n	8005f3c <_scanf_float+0x188>
 8005fba:	2d03      	cmp	r5, #3
 8005fbc:	d0e2      	beq.n	8005f84 <_scanf_float+0x1d0>
 8005fbe:	2d05      	cmp	r5, #5
 8005fc0:	e7de      	b.n	8005f80 <_scanf_float+0x1cc>
 8005fc2:	2d02      	cmp	r5, #2
 8005fc4:	f47f af26 	bne.w	8005e14 <_scanf_float+0x60>
 8005fc8:	2503      	movs	r5, #3
 8005fca:	e7b7      	b.n	8005f3c <_scanf_float+0x188>
 8005fcc:	2d06      	cmp	r5, #6
 8005fce:	f47f af21 	bne.w	8005e14 <_scanf_float+0x60>
 8005fd2:	2507      	movs	r5, #7
 8005fd4:	e7b2      	b.n	8005f3c <_scanf_float+0x188>
 8005fd6:	6822      	ldr	r2, [r4, #0]
 8005fd8:	0591      	lsls	r1, r2, #22
 8005fda:	f57f af1b 	bpl.w	8005e14 <_scanf_float+0x60>
 8005fde:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005fe2:	6022      	str	r2, [r4, #0]
 8005fe4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fe8:	e7a8      	b.n	8005f3c <_scanf_float+0x188>
 8005fea:	6822      	ldr	r2, [r4, #0]
 8005fec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005ff0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005ff4:	d006      	beq.n	8006004 <_scanf_float+0x250>
 8005ff6:	0550      	lsls	r0, r2, #21
 8005ff8:	f57f af0c 	bpl.w	8005e14 <_scanf_float+0x60>
 8005ffc:	f1b9 0f00 	cmp.w	r9, #0
 8006000:	f43f af0f 	beq.w	8005e22 <_scanf_float+0x6e>
 8006004:	0591      	lsls	r1, r2, #22
 8006006:	bf58      	it	pl
 8006008:	9901      	ldrpl	r1, [sp, #4]
 800600a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800600e:	bf58      	it	pl
 8006010:	eba9 0101 	subpl.w	r1, r9, r1
 8006014:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006018:	bf58      	it	pl
 800601a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800601e:	6022      	str	r2, [r4, #0]
 8006020:	f04f 0900 	mov.w	r9, #0
 8006024:	e78a      	b.n	8005f3c <_scanf_float+0x188>
 8006026:	f04f 0a03 	mov.w	sl, #3
 800602a:	e787      	b.n	8005f3c <_scanf_float+0x188>
 800602c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006030:	4639      	mov	r1, r7
 8006032:	4640      	mov	r0, r8
 8006034:	4798      	blx	r3
 8006036:	2800      	cmp	r0, #0
 8006038:	f43f aedf 	beq.w	8005dfa <_scanf_float+0x46>
 800603c:	e6ea      	b.n	8005e14 <_scanf_float+0x60>
 800603e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006042:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006046:	463a      	mov	r2, r7
 8006048:	4640      	mov	r0, r8
 800604a:	4798      	blx	r3
 800604c:	6923      	ldr	r3, [r4, #16]
 800604e:	3b01      	subs	r3, #1
 8006050:	6123      	str	r3, [r4, #16]
 8006052:	e6ec      	b.n	8005e2e <_scanf_float+0x7a>
 8006054:	1e6b      	subs	r3, r5, #1
 8006056:	2b06      	cmp	r3, #6
 8006058:	d825      	bhi.n	80060a6 <_scanf_float+0x2f2>
 800605a:	2d02      	cmp	r5, #2
 800605c:	d836      	bhi.n	80060cc <_scanf_float+0x318>
 800605e:	455e      	cmp	r6, fp
 8006060:	f67f aee8 	bls.w	8005e34 <_scanf_float+0x80>
 8006064:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006068:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800606c:	463a      	mov	r2, r7
 800606e:	4640      	mov	r0, r8
 8006070:	4798      	blx	r3
 8006072:	6923      	ldr	r3, [r4, #16]
 8006074:	3b01      	subs	r3, #1
 8006076:	6123      	str	r3, [r4, #16]
 8006078:	e7f1      	b.n	800605e <_scanf_float+0x2aa>
 800607a:	9802      	ldr	r0, [sp, #8]
 800607c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006080:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006084:	9002      	str	r0, [sp, #8]
 8006086:	463a      	mov	r2, r7
 8006088:	4640      	mov	r0, r8
 800608a:	4798      	blx	r3
 800608c:	6923      	ldr	r3, [r4, #16]
 800608e:	3b01      	subs	r3, #1
 8006090:	6123      	str	r3, [r4, #16]
 8006092:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006096:	fa5f fa8a 	uxtb.w	sl, sl
 800609a:	f1ba 0f02 	cmp.w	sl, #2
 800609e:	d1ec      	bne.n	800607a <_scanf_float+0x2c6>
 80060a0:	3d03      	subs	r5, #3
 80060a2:	b2ed      	uxtb	r5, r5
 80060a4:	1b76      	subs	r6, r6, r5
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	05da      	lsls	r2, r3, #23
 80060aa:	d52f      	bpl.n	800610c <_scanf_float+0x358>
 80060ac:	055b      	lsls	r3, r3, #21
 80060ae:	d510      	bpl.n	80060d2 <_scanf_float+0x31e>
 80060b0:	455e      	cmp	r6, fp
 80060b2:	f67f aebf 	bls.w	8005e34 <_scanf_float+0x80>
 80060b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80060be:	463a      	mov	r2, r7
 80060c0:	4640      	mov	r0, r8
 80060c2:	4798      	blx	r3
 80060c4:	6923      	ldr	r3, [r4, #16]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	6123      	str	r3, [r4, #16]
 80060ca:	e7f1      	b.n	80060b0 <_scanf_float+0x2fc>
 80060cc:	46aa      	mov	sl, r5
 80060ce:	9602      	str	r6, [sp, #8]
 80060d0:	e7df      	b.n	8006092 <_scanf_float+0x2de>
 80060d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80060d6:	6923      	ldr	r3, [r4, #16]
 80060d8:	2965      	cmp	r1, #101	; 0x65
 80060da:	f103 33ff 	add.w	r3, r3, #4294967295
 80060de:	f106 35ff 	add.w	r5, r6, #4294967295
 80060e2:	6123      	str	r3, [r4, #16]
 80060e4:	d00c      	beq.n	8006100 <_scanf_float+0x34c>
 80060e6:	2945      	cmp	r1, #69	; 0x45
 80060e8:	d00a      	beq.n	8006100 <_scanf_float+0x34c>
 80060ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060ee:	463a      	mov	r2, r7
 80060f0:	4640      	mov	r0, r8
 80060f2:	4798      	blx	r3
 80060f4:	6923      	ldr	r3, [r4, #16]
 80060f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	1eb5      	subs	r5, r6, #2
 80060fe:	6123      	str	r3, [r4, #16]
 8006100:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006104:	463a      	mov	r2, r7
 8006106:	4640      	mov	r0, r8
 8006108:	4798      	blx	r3
 800610a:	462e      	mov	r6, r5
 800610c:	6825      	ldr	r5, [r4, #0]
 800610e:	f015 0510 	ands.w	r5, r5, #16
 8006112:	d158      	bne.n	80061c6 <_scanf_float+0x412>
 8006114:	7035      	strb	r5, [r6, #0]
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800611c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006120:	d11c      	bne.n	800615c <_scanf_float+0x3a8>
 8006122:	9b01      	ldr	r3, [sp, #4]
 8006124:	454b      	cmp	r3, r9
 8006126:	eba3 0209 	sub.w	r2, r3, r9
 800612a:	d124      	bne.n	8006176 <_scanf_float+0x3c2>
 800612c:	2200      	movs	r2, #0
 800612e:	4659      	mov	r1, fp
 8006130:	4640      	mov	r0, r8
 8006132:	f002 fc1d 	bl	8008970 <_strtod_r>
 8006136:	9b03      	ldr	r3, [sp, #12]
 8006138:	6821      	ldr	r1, [r4, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f011 0f02 	tst.w	r1, #2
 8006140:	ec57 6b10 	vmov	r6, r7, d0
 8006144:	f103 0204 	add.w	r2, r3, #4
 8006148:	d020      	beq.n	800618c <_scanf_float+0x3d8>
 800614a:	9903      	ldr	r1, [sp, #12]
 800614c:	600a      	str	r2, [r1, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	e9c3 6700 	strd	r6, r7, [r3]
 8006154:	68e3      	ldr	r3, [r4, #12]
 8006156:	3301      	adds	r3, #1
 8006158:	60e3      	str	r3, [r4, #12]
 800615a:	e66c      	b.n	8005e36 <_scanf_float+0x82>
 800615c:	9b04      	ldr	r3, [sp, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0e4      	beq.n	800612c <_scanf_float+0x378>
 8006162:	9905      	ldr	r1, [sp, #20]
 8006164:	230a      	movs	r3, #10
 8006166:	462a      	mov	r2, r5
 8006168:	3101      	adds	r1, #1
 800616a:	4640      	mov	r0, r8
 800616c:	f002 fc88 	bl	8008a80 <_strtol_r>
 8006170:	9b04      	ldr	r3, [sp, #16]
 8006172:	9e05      	ldr	r6, [sp, #20]
 8006174:	1ac2      	subs	r2, r0, r3
 8006176:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800617a:	429e      	cmp	r6, r3
 800617c:	bf28      	it	cs
 800617e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006182:	4912      	ldr	r1, [pc, #72]	; (80061cc <_scanf_float+0x418>)
 8006184:	4630      	mov	r0, r6
 8006186:	f000 f8d5 	bl	8006334 <siprintf>
 800618a:	e7cf      	b.n	800612c <_scanf_float+0x378>
 800618c:	f011 0f04 	tst.w	r1, #4
 8006190:	9903      	ldr	r1, [sp, #12]
 8006192:	600a      	str	r2, [r1, #0]
 8006194:	d1db      	bne.n	800614e <_scanf_float+0x39a>
 8006196:	f8d3 8000 	ldr.w	r8, [r3]
 800619a:	ee10 2a10 	vmov	r2, s0
 800619e:	ee10 0a10 	vmov	r0, s0
 80061a2:	463b      	mov	r3, r7
 80061a4:	4639      	mov	r1, r7
 80061a6:	f7fa fcc1 	bl	8000b2c <__aeabi_dcmpun>
 80061aa:	b128      	cbz	r0, 80061b8 <_scanf_float+0x404>
 80061ac:	4808      	ldr	r0, [pc, #32]	; (80061d0 <_scanf_float+0x41c>)
 80061ae:	f000 f9a3 	bl	80064f8 <nanf>
 80061b2:	ed88 0a00 	vstr	s0, [r8]
 80061b6:	e7cd      	b.n	8006154 <_scanf_float+0x3a0>
 80061b8:	4630      	mov	r0, r6
 80061ba:	4639      	mov	r1, r7
 80061bc:	f7fa fd14 	bl	8000be8 <__aeabi_d2f>
 80061c0:	f8c8 0000 	str.w	r0, [r8]
 80061c4:	e7c6      	b.n	8006154 <_scanf_float+0x3a0>
 80061c6:	2500      	movs	r5, #0
 80061c8:	e635      	b.n	8005e36 <_scanf_float+0x82>
 80061ca:	bf00      	nop
 80061cc:	08009d2c 	.word	0x08009d2c
 80061d0:	0800a0bd 	.word	0x0800a0bd

080061d4 <std>:
 80061d4:	2300      	movs	r3, #0
 80061d6:	b510      	push	{r4, lr}
 80061d8:	4604      	mov	r4, r0
 80061da:	e9c0 3300 	strd	r3, r3, [r0]
 80061de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061e2:	6083      	str	r3, [r0, #8]
 80061e4:	8181      	strh	r1, [r0, #12]
 80061e6:	6643      	str	r3, [r0, #100]	; 0x64
 80061e8:	81c2      	strh	r2, [r0, #14]
 80061ea:	6183      	str	r3, [r0, #24]
 80061ec:	4619      	mov	r1, r3
 80061ee:	2208      	movs	r2, #8
 80061f0:	305c      	adds	r0, #92	; 0x5c
 80061f2:	f000 f902 	bl	80063fa <memset>
 80061f6:	4b05      	ldr	r3, [pc, #20]	; (800620c <std+0x38>)
 80061f8:	6263      	str	r3, [r4, #36]	; 0x24
 80061fa:	4b05      	ldr	r3, [pc, #20]	; (8006210 <std+0x3c>)
 80061fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80061fe:	4b05      	ldr	r3, [pc, #20]	; (8006214 <std+0x40>)
 8006200:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006202:	4b05      	ldr	r3, [pc, #20]	; (8006218 <std+0x44>)
 8006204:	6224      	str	r4, [r4, #32]
 8006206:	6323      	str	r3, [r4, #48]	; 0x30
 8006208:	bd10      	pop	{r4, pc}
 800620a:	bf00      	nop
 800620c:	08006375 	.word	0x08006375
 8006210:	08006397 	.word	0x08006397
 8006214:	080063cf 	.word	0x080063cf
 8006218:	080063f3 	.word	0x080063f3

0800621c <stdio_exit_handler>:
 800621c:	4a02      	ldr	r2, [pc, #8]	; (8006228 <stdio_exit_handler+0xc>)
 800621e:	4903      	ldr	r1, [pc, #12]	; (800622c <stdio_exit_handler+0x10>)
 8006220:	4803      	ldr	r0, [pc, #12]	; (8006230 <stdio_exit_handler+0x14>)
 8006222:	f000 b869 	b.w	80062f8 <_fwalk_sglue>
 8006226:	bf00      	nop
 8006228:	2000000c 	.word	0x2000000c
 800622c:	08008e41 	.word	0x08008e41
 8006230:	20000018 	.word	0x20000018

08006234 <cleanup_stdio>:
 8006234:	6841      	ldr	r1, [r0, #4]
 8006236:	4b0c      	ldr	r3, [pc, #48]	; (8006268 <cleanup_stdio+0x34>)
 8006238:	4299      	cmp	r1, r3
 800623a:	b510      	push	{r4, lr}
 800623c:	4604      	mov	r4, r0
 800623e:	d001      	beq.n	8006244 <cleanup_stdio+0x10>
 8006240:	f002 fdfe 	bl	8008e40 <_fflush_r>
 8006244:	68a1      	ldr	r1, [r4, #8]
 8006246:	4b09      	ldr	r3, [pc, #36]	; (800626c <cleanup_stdio+0x38>)
 8006248:	4299      	cmp	r1, r3
 800624a:	d002      	beq.n	8006252 <cleanup_stdio+0x1e>
 800624c:	4620      	mov	r0, r4
 800624e:	f002 fdf7 	bl	8008e40 <_fflush_r>
 8006252:	68e1      	ldr	r1, [r4, #12]
 8006254:	4b06      	ldr	r3, [pc, #24]	; (8006270 <cleanup_stdio+0x3c>)
 8006256:	4299      	cmp	r1, r3
 8006258:	d004      	beq.n	8006264 <cleanup_stdio+0x30>
 800625a:	4620      	mov	r0, r4
 800625c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006260:	f002 bdee 	b.w	8008e40 <_fflush_r>
 8006264:	bd10      	pop	{r4, pc}
 8006266:	bf00      	nop
 8006268:	200003cc 	.word	0x200003cc
 800626c:	20000434 	.word	0x20000434
 8006270:	2000049c 	.word	0x2000049c

08006274 <global_stdio_init.part.0>:
 8006274:	b510      	push	{r4, lr}
 8006276:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <global_stdio_init.part.0+0x30>)
 8006278:	4c0b      	ldr	r4, [pc, #44]	; (80062a8 <global_stdio_init.part.0+0x34>)
 800627a:	4a0c      	ldr	r2, [pc, #48]	; (80062ac <global_stdio_init.part.0+0x38>)
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	4620      	mov	r0, r4
 8006280:	2200      	movs	r2, #0
 8006282:	2104      	movs	r1, #4
 8006284:	f7ff ffa6 	bl	80061d4 <std>
 8006288:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800628c:	2201      	movs	r2, #1
 800628e:	2109      	movs	r1, #9
 8006290:	f7ff ffa0 	bl	80061d4 <std>
 8006294:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006298:	2202      	movs	r2, #2
 800629a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800629e:	2112      	movs	r1, #18
 80062a0:	f7ff bf98 	b.w	80061d4 <std>
 80062a4:	20000504 	.word	0x20000504
 80062a8:	200003cc 	.word	0x200003cc
 80062ac:	0800621d 	.word	0x0800621d

080062b0 <__sfp_lock_acquire>:
 80062b0:	4801      	ldr	r0, [pc, #4]	; (80062b8 <__sfp_lock_acquire+0x8>)
 80062b2:	f000 b91f 	b.w	80064f4 <__retarget_lock_acquire_recursive>
 80062b6:	bf00      	nop
 80062b8:	2000050d 	.word	0x2000050d

080062bc <__sfp_lock_release>:
 80062bc:	4801      	ldr	r0, [pc, #4]	; (80062c4 <__sfp_lock_release+0x8>)
 80062be:	f000 b91a 	b.w	80064f6 <__retarget_lock_release_recursive>
 80062c2:	bf00      	nop
 80062c4:	2000050d 	.word	0x2000050d

080062c8 <__sinit>:
 80062c8:	b510      	push	{r4, lr}
 80062ca:	4604      	mov	r4, r0
 80062cc:	f7ff fff0 	bl	80062b0 <__sfp_lock_acquire>
 80062d0:	6a23      	ldr	r3, [r4, #32]
 80062d2:	b11b      	cbz	r3, 80062dc <__sinit+0x14>
 80062d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062d8:	f7ff bff0 	b.w	80062bc <__sfp_lock_release>
 80062dc:	4b04      	ldr	r3, [pc, #16]	; (80062f0 <__sinit+0x28>)
 80062de:	6223      	str	r3, [r4, #32]
 80062e0:	4b04      	ldr	r3, [pc, #16]	; (80062f4 <__sinit+0x2c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1f5      	bne.n	80062d4 <__sinit+0xc>
 80062e8:	f7ff ffc4 	bl	8006274 <global_stdio_init.part.0>
 80062ec:	e7f2      	b.n	80062d4 <__sinit+0xc>
 80062ee:	bf00      	nop
 80062f0:	08006235 	.word	0x08006235
 80062f4:	20000504 	.word	0x20000504

080062f8 <_fwalk_sglue>:
 80062f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062fc:	4607      	mov	r7, r0
 80062fe:	4688      	mov	r8, r1
 8006300:	4614      	mov	r4, r2
 8006302:	2600      	movs	r6, #0
 8006304:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006308:	f1b9 0901 	subs.w	r9, r9, #1
 800630c:	d505      	bpl.n	800631a <_fwalk_sglue+0x22>
 800630e:	6824      	ldr	r4, [r4, #0]
 8006310:	2c00      	cmp	r4, #0
 8006312:	d1f7      	bne.n	8006304 <_fwalk_sglue+0xc>
 8006314:	4630      	mov	r0, r6
 8006316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800631a:	89ab      	ldrh	r3, [r5, #12]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d907      	bls.n	8006330 <_fwalk_sglue+0x38>
 8006320:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006324:	3301      	adds	r3, #1
 8006326:	d003      	beq.n	8006330 <_fwalk_sglue+0x38>
 8006328:	4629      	mov	r1, r5
 800632a:	4638      	mov	r0, r7
 800632c:	47c0      	blx	r8
 800632e:	4306      	orrs	r6, r0
 8006330:	3568      	adds	r5, #104	; 0x68
 8006332:	e7e9      	b.n	8006308 <_fwalk_sglue+0x10>

08006334 <siprintf>:
 8006334:	b40e      	push	{r1, r2, r3}
 8006336:	b500      	push	{lr}
 8006338:	b09c      	sub	sp, #112	; 0x70
 800633a:	ab1d      	add	r3, sp, #116	; 0x74
 800633c:	9002      	str	r0, [sp, #8]
 800633e:	9006      	str	r0, [sp, #24]
 8006340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006344:	4809      	ldr	r0, [pc, #36]	; (800636c <siprintf+0x38>)
 8006346:	9107      	str	r1, [sp, #28]
 8006348:	9104      	str	r1, [sp, #16]
 800634a:	4909      	ldr	r1, [pc, #36]	; (8006370 <siprintf+0x3c>)
 800634c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006350:	9105      	str	r1, [sp, #20]
 8006352:	6800      	ldr	r0, [r0, #0]
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	a902      	add	r1, sp, #8
 8006358:	f002 fbee 	bl	8008b38 <_svfiprintf_r>
 800635c:	9b02      	ldr	r3, [sp, #8]
 800635e:	2200      	movs	r2, #0
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	b01c      	add	sp, #112	; 0x70
 8006364:	f85d eb04 	ldr.w	lr, [sp], #4
 8006368:	b003      	add	sp, #12
 800636a:	4770      	bx	lr
 800636c:	20000064 	.word	0x20000064
 8006370:	ffff0208 	.word	0xffff0208

08006374 <__sread>:
 8006374:	b510      	push	{r4, lr}
 8006376:	460c      	mov	r4, r1
 8006378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800637c:	f000 f86c 	bl	8006458 <_read_r>
 8006380:	2800      	cmp	r0, #0
 8006382:	bfab      	itete	ge
 8006384:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006386:	89a3      	ldrhlt	r3, [r4, #12]
 8006388:	181b      	addge	r3, r3, r0
 800638a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800638e:	bfac      	ite	ge
 8006390:	6563      	strge	r3, [r4, #84]	; 0x54
 8006392:	81a3      	strhlt	r3, [r4, #12]
 8006394:	bd10      	pop	{r4, pc}

08006396 <__swrite>:
 8006396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800639a:	461f      	mov	r7, r3
 800639c:	898b      	ldrh	r3, [r1, #12]
 800639e:	05db      	lsls	r3, r3, #23
 80063a0:	4605      	mov	r5, r0
 80063a2:	460c      	mov	r4, r1
 80063a4:	4616      	mov	r6, r2
 80063a6:	d505      	bpl.n	80063b4 <__swrite+0x1e>
 80063a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ac:	2302      	movs	r3, #2
 80063ae:	2200      	movs	r2, #0
 80063b0:	f000 f840 	bl	8006434 <_lseek_r>
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063be:	81a3      	strh	r3, [r4, #12]
 80063c0:	4632      	mov	r2, r6
 80063c2:	463b      	mov	r3, r7
 80063c4:	4628      	mov	r0, r5
 80063c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ca:	f000 b857 	b.w	800647c <_write_r>

080063ce <__sseek>:
 80063ce:	b510      	push	{r4, lr}
 80063d0:	460c      	mov	r4, r1
 80063d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d6:	f000 f82d 	bl	8006434 <_lseek_r>
 80063da:	1c43      	adds	r3, r0, #1
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	bf15      	itete	ne
 80063e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80063e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063ea:	81a3      	strheq	r3, [r4, #12]
 80063ec:	bf18      	it	ne
 80063ee:	81a3      	strhne	r3, [r4, #12]
 80063f0:	bd10      	pop	{r4, pc}

080063f2 <__sclose>:
 80063f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f6:	f000 b80d 	b.w	8006414 <_close_r>

080063fa <memset>:
 80063fa:	4402      	add	r2, r0
 80063fc:	4603      	mov	r3, r0
 80063fe:	4293      	cmp	r3, r2
 8006400:	d100      	bne.n	8006404 <memset+0xa>
 8006402:	4770      	bx	lr
 8006404:	f803 1b01 	strb.w	r1, [r3], #1
 8006408:	e7f9      	b.n	80063fe <memset+0x4>
	...

0800640c <_localeconv_r>:
 800640c:	4800      	ldr	r0, [pc, #0]	; (8006410 <_localeconv_r+0x4>)
 800640e:	4770      	bx	lr
 8006410:	20000158 	.word	0x20000158

08006414 <_close_r>:
 8006414:	b538      	push	{r3, r4, r5, lr}
 8006416:	4d06      	ldr	r5, [pc, #24]	; (8006430 <_close_r+0x1c>)
 8006418:	2300      	movs	r3, #0
 800641a:	4604      	mov	r4, r0
 800641c:	4608      	mov	r0, r1
 800641e:	602b      	str	r3, [r5, #0]
 8006420:	f7fb fa43 	bl	80018aa <_close>
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d102      	bne.n	800642e <_close_r+0x1a>
 8006428:	682b      	ldr	r3, [r5, #0]
 800642a:	b103      	cbz	r3, 800642e <_close_r+0x1a>
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	bd38      	pop	{r3, r4, r5, pc}
 8006430:	20000508 	.word	0x20000508

08006434 <_lseek_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	4d07      	ldr	r5, [pc, #28]	; (8006454 <_lseek_r+0x20>)
 8006438:	4604      	mov	r4, r0
 800643a:	4608      	mov	r0, r1
 800643c:	4611      	mov	r1, r2
 800643e:	2200      	movs	r2, #0
 8006440:	602a      	str	r2, [r5, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	f7fb fa58 	bl	80018f8 <_lseek>
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	d102      	bne.n	8006452 <_lseek_r+0x1e>
 800644c:	682b      	ldr	r3, [r5, #0]
 800644e:	b103      	cbz	r3, 8006452 <_lseek_r+0x1e>
 8006450:	6023      	str	r3, [r4, #0]
 8006452:	bd38      	pop	{r3, r4, r5, pc}
 8006454:	20000508 	.word	0x20000508

08006458 <_read_r>:
 8006458:	b538      	push	{r3, r4, r5, lr}
 800645a:	4d07      	ldr	r5, [pc, #28]	; (8006478 <_read_r+0x20>)
 800645c:	4604      	mov	r4, r0
 800645e:	4608      	mov	r0, r1
 8006460:	4611      	mov	r1, r2
 8006462:	2200      	movs	r2, #0
 8006464:	602a      	str	r2, [r5, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	f7fb f9e6 	bl	8001838 <_read>
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	d102      	bne.n	8006476 <_read_r+0x1e>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	b103      	cbz	r3, 8006476 <_read_r+0x1e>
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	20000508 	.word	0x20000508

0800647c <_write_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4d07      	ldr	r5, [pc, #28]	; (800649c <_write_r+0x20>)
 8006480:	4604      	mov	r4, r0
 8006482:	4608      	mov	r0, r1
 8006484:	4611      	mov	r1, r2
 8006486:	2200      	movs	r2, #0
 8006488:	602a      	str	r2, [r5, #0]
 800648a:	461a      	mov	r2, r3
 800648c:	f7fb f9f1 	bl	8001872 <_write>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d102      	bne.n	800649a <_write_r+0x1e>
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	b103      	cbz	r3, 800649a <_write_r+0x1e>
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	20000508 	.word	0x20000508

080064a0 <__errno>:
 80064a0:	4b01      	ldr	r3, [pc, #4]	; (80064a8 <__errno+0x8>)
 80064a2:	6818      	ldr	r0, [r3, #0]
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	20000064 	.word	0x20000064

080064ac <__libc_init_array>:
 80064ac:	b570      	push	{r4, r5, r6, lr}
 80064ae:	4d0d      	ldr	r5, [pc, #52]	; (80064e4 <__libc_init_array+0x38>)
 80064b0:	4c0d      	ldr	r4, [pc, #52]	; (80064e8 <__libc_init_array+0x3c>)
 80064b2:	1b64      	subs	r4, r4, r5
 80064b4:	10a4      	asrs	r4, r4, #2
 80064b6:	2600      	movs	r6, #0
 80064b8:	42a6      	cmp	r6, r4
 80064ba:	d109      	bne.n	80064d0 <__libc_init_array+0x24>
 80064bc:	4d0b      	ldr	r5, [pc, #44]	; (80064ec <__libc_init_array+0x40>)
 80064be:	4c0c      	ldr	r4, [pc, #48]	; (80064f0 <__libc_init_array+0x44>)
 80064c0:	f003 fbd6 	bl	8009c70 <_init>
 80064c4:	1b64      	subs	r4, r4, r5
 80064c6:	10a4      	asrs	r4, r4, #2
 80064c8:	2600      	movs	r6, #0
 80064ca:	42a6      	cmp	r6, r4
 80064cc:	d105      	bne.n	80064da <__libc_init_array+0x2e>
 80064ce:	bd70      	pop	{r4, r5, r6, pc}
 80064d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d4:	4798      	blx	r3
 80064d6:	3601      	adds	r6, #1
 80064d8:	e7ee      	b.n	80064b8 <__libc_init_array+0xc>
 80064da:	f855 3b04 	ldr.w	r3, [r5], #4
 80064de:	4798      	blx	r3
 80064e0:	3601      	adds	r6, #1
 80064e2:	e7f2      	b.n	80064ca <__libc_init_array+0x1e>
 80064e4:	0800a128 	.word	0x0800a128
 80064e8:	0800a128 	.word	0x0800a128
 80064ec:	0800a128 	.word	0x0800a128
 80064f0:	0800a12c 	.word	0x0800a12c

080064f4 <__retarget_lock_acquire_recursive>:
 80064f4:	4770      	bx	lr

080064f6 <__retarget_lock_release_recursive>:
 80064f6:	4770      	bx	lr

080064f8 <nanf>:
 80064f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006500 <nanf+0x8>
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	7fc00000 	.word	0x7fc00000

08006504 <quorem>:
 8006504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006508:	6903      	ldr	r3, [r0, #16]
 800650a:	690c      	ldr	r4, [r1, #16]
 800650c:	42a3      	cmp	r3, r4
 800650e:	4607      	mov	r7, r0
 8006510:	db7e      	blt.n	8006610 <quorem+0x10c>
 8006512:	3c01      	subs	r4, #1
 8006514:	f101 0814 	add.w	r8, r1, #20
 8006518:	f100 0514 	add.w	r5, r0, #20
 800651c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006526:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800652a:	3301      	adds	r3, #1
 800652c:	429a      	cmp	r2, r3
 800652e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006532:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006536:	fbb2 f6f3 	udiv	r6, r2, r3
 800653a:	d331      	bcc.n	80065a0 <quorem+0x9c>
 800653c:	f04f 0e00 	mov.w	lr, #0
 8006540:	4640      	mov	r0, r8
 8006542:	46ac      	mov	ip, r5
 8006544:	46f2      	mov	sl, lr
 8006546:	f850 2b04 	ldr.w	r2, [r0], #4
 800654a:	b293      	uxth	r3, r2
 800654c:	fb06 e303 	mla	r3, r6, r3, lr
 8006550:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006554:	0c1a      	lsrs	r2, r3, #16
 8006556:	b29b      	uxth	r3, r3
 8006558:	ebaa 0303 	sub.w	r3, sl, r3
 800655c:	f8dc a000 	ldr.w	sl, [ip]
 8006560:	fa13 f38a 	uxtah	r3, r3, sl
 8006564:	fb06 220e 	mla	r2, r6, lr, r2
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	9b00      	ldr	r3, [sp, #0]
 800656c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006570:	b292      	uxth	r2, r2
 8006572:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006576:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800657a:	f8bd 3000 	ldrh.w	r3, [sp]
 800657e:	4581      	cmp	r9, r0
 8006580:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006584:	f84c 3b04 	str.w	r3, [ip], #4
 8006588:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800658c:	d2db      	bcs.n	8006546 <quorem+0x42>
 800658e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006592:	b92b      	cbnz	r3, 80065a0 <quorem+0x9c>
 8006594:	9b01      	ldr	r3, [sp, #4]
 8006596:	3b04      	subs	r3, #4
 8006598:	429d      	cmp	r5, r3
 800659a:	461a      	mov	r2, r3
 800659c:	d32c      	bcc.n	80065f8 <quorem+0xf4>
 800659e:	613c      	str	r4, [r7, #16]
 80065a0:	4638      	mov	r0, r7
 80065a2:	f001 f9f1 	bl	8007988 <__mcmp>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	db22      	blt.n	80065f0 <quorem+0xec>
 80065aa:	3601      	adds	r6, #1
 80065ac:	4629      	mov	r1, r5
 80065ae:	2000      	movs	r0, #0
 80065b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80065b4:	f8d1 c000 	ldr.w	ip, [r1]
 80065b8:	b293      	uxth	r3, r2
 80065ba:	1ac3      	subs	r3, r0, r3
 80065bc:	0c12      	lsrs	r2, r2, #16
 80065be:	fa13 f38c 	uxtah	r3, r3, ip
 80065c2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80065c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065d0:	45c1      	cmp	r9, r8
 80065d2:	f841 3b04 	str.w	r3, [r1], #4
 80065d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80065da:	d2e9      	bcs.n	80065b0 <quorem+0xac>
 80065dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065e4:	b922      	cbnz	r2, 80065f0 <quorem+0xec>
 80065e6:	3b04      	subs	r3, #4
 80065e8:	429d      	cmp	r5, r3
 80065ea:	461a      	mov	r2, r3
 80065ec:	d30a      	bcc.n	8006604 <quorem+0x100>
 80065ee:	613c      	str	r4, [r7, #16]
 80065f0:	4630      	mov	r0, r6
 80065f2:	b003      	add	sp, #12
 80065f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f8:	6812      	ldr	r2, [r2, #0]
 80065fa:	3b04      	subs	r3, #4
 80065fc:	2a00      	cmp	r2, #0
 80065fe:	d1ce      	bne.n	800659e <quorem+0x9a>
 8006600:	3c01      	subs	r4, #1
 8006602:	e7c9      	b.n	8006598 <quorem+0x94>
 8006604:	6812      	ldr	r2, [r2, #0]
 8006606:	3b04      	subs	r3, #4
 8006608:	2a00      	cmp	r2, #0
 800660a:	d1f0      	bne.n	80065ee <quorem+0xea>
 800660c:	3c01      	subs	r4, #1
 800660e:	e7eb      	b.n	80065e8 <quorem+0xe4>
 8006610:	2000      	movs	r0, #0
 8006612:	e7ee      	b.n	80065f2 <quorem+0xee>
 8006614:	0000      	movs	r0, r0
	...

08006618 <_dtoa_r>:
 8006618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661c:	ed2d 8b04 	vpush	{d8-d9}
 8006620:	69c5      	ldr	r5, [r0, #28]
 8006622:	b093      	sub	sp, #76	; 0x4c
 8006624:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006628:	ec57 6b10 	vmov	r6, r7, d0
 800662c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006630:	9107      	str	r1, [sp, #28]
 8006632:	4604      	mov	r4, r0
 8006634:	920a      	str	r2, [sp, #40]	; 0x28
 8006636:	930d      	str	r3, [sp, #52]	; 0x34
 8006638:	b975      	cbnz	r5, 8006658 <_dtoa_r+0x40>
 800663a:	2010      	movs	r0, #16
 800663c:	f000 fe2a 	bl	8007294 <malloc>
 8006640:	4602      	mov	r2, r0
 8006642:	61e0      	str	r0, [r4, #28]
 8006644:	b920      	cbnz	r0, 8006650 <_dtoa_r+0x38>
 8006646:	4bae      	ldr	r3, [pc, #696]	; (8006900 <_dtoa_r+0x2e8>)
 8006648:	21ef      	movs	r1, #239	; 0xef
 800664a:	48ae      	ldr	r0, [pc, #696]	; (8006904 <_dtoa_r+0x2ec>)
 800664c:	f002 fc74 	bl	8008f38 <__assert_func>
 8006650:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006654:	6005      	str	r5, [r0, #0]
 8006656:	60c5      	str	r5, [r0, #12]
 8006658:	69e3      	ldr	r3, [r4, #28]
 800665a:	6819      	ldr	r1, [r3, #0]
 800665c:	b151      	cbz	r1, 8006674 <_dtoa_r+0x5c>
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	604a      	str	r2, [r1, #4]
 8006662:	2301      	movs	r3, #1
 8006664:	4093      	lsls	r3, r2
 8006666:	608b      	str	r3, [r1, #8]
 8006668:	4620      	mov	r0, r4
 800666a:	f000 ff07 	bl	800747c <_Bfree>
 800666e:	69e3      	ldr	r3, [r4, #28]
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	1e3b      	subs	r3, r7, #0
 8006676:	bfbb      	ittet	lt
 8006678:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800667c:	9303      	strlt	r3, [sp, #12]
 800667e:	2300      	movge	r3, #0
 8006680:	2201      	movlt	r2, #1
 8006682:	bfac      	ite	ge
 8006684:	f8c8 3000 	strge.w	r3, [r8]
 8006688:	f8c8 2000 	strlt.w	r2, [r8]
 800668c:	4b9e      	ldr	r3, [pc, #632]	; (8006908 <_dtoa_r+0x2f0>)
 800668e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006692:	ea33 0308 	bics.w	r3, r3, r8
 8006696:	d11b      	bne.n	80066d0 <_dtoa_r+0xb8>
 8006698:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800669a:	f242 730f 	movw	r3, #9999	; 0x270f
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80066a4:	4333      	orrs	r3, r6
 80066a6:	f000 8593 	beq.w	80071d0 <_dtoa_r+0xbb8>
 80066aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066ac:	b963      	cbnz	r3, 80066c8 <_dtoa_r+0xb0>
 80066ae:	4b97      	ldr	r3, [pc, #604]	; (800690c <_dtoa_r+0x2f4>)
 80066b0:	e027      	b.n	8006702 <_dtoa_r+0xea>
 80066b2:	4b97      	ldr	r3, [pc, #604]	; (8006910 <_dtoa_r+0x2f8>)
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	3308      	adds	r3, #8
 80066b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	9800      	ldr	r0, [sp, #0]
 80066be:	b013      	add	sp, #76	; 0x4c
 80066c0:	ecbd 8b04 	vpop	{d8-d9}
 80066c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c8:	4b90      	ldr	r3, [pc, #576]	; (800690c <_dtoa_r+0x2f4>)
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	3303      	adds	r3, #3
 80066ce:	e7f3      	b.n	80066b8 <_dtoa_r+0xa0>
 80066d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066d4:	2200      	movs	r2, #0
 80066d6:	ec51 0b17 	vmov	r0, r1, d7
 80066da:	eeb0 8a47 	vmov.f32	s16, s14
 80066de:	eef0 8a67 	vmov.f32	s17, s15
 80066e2:	2300      	movs	r3, #0
 80066e4:	f7fa f9f0 	bl	8000ac8 <__aeabi_dcmpeq>
 80066e8:	4681      	mov	r9, r0
 80066ea:	b160      	cbz	r0, 8006706 <_dtoa_r+0xee>
 80066ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066ee:	2301      	movs	r3, #1
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 8568 	beq.w	80071ca <_dtoa_r+0xbb2>
 80066fa:	4b86      	ldr	r3, [pc, #536]	; (8006914 <_dtoa_r+0x2fc>)
 80066fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	3b01      	subs	r3, #1
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	e7da      	b.n	80066bc <_dtoa_r+0xa4>
 8006706:	aa10      	add	r2, sp, #64	; 0x40
 8006708:	a911      	add	r1, sp, #68	; 0x44
 800670a:	4620      	mov	r0, r4
 800670c:	eeb0 0a48 	vmov.f32	s0, s16
 8006710:	eef0 0a68 	vmov.f32	s1, s17
 8006714:	f001 fa4e 	bl	8007bb4 <__d2b>
 8006718:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800671c:	4682      	mov	sl, r0
 800671e:	2d00      	cmp	r5, #0
 8006720:	d07f      	beq.n	8006822 <_dtoa_r+0x20a>
 8006722:	ee18 3a90 	vmov	r3, s17
 8006726:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800672a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800672e:	ec51 0b18 	vmov	r0, r1, d8
 8006732:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006736:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800673a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800673e:	4619      	mov	r1, r3
 8006740:	2200      	movs	r2, #0
 8006742:	4b75      	ldr	r3, [pc, #468]	; (8006918 <_dtoa_r+0x300>)
 8006744:	f7f9 fda0 	bl	8000288 <__aeabi_dsub>
 8006748:	a367      	add	r3, pc, #412	; (adr r3, 80068e8 <_dtoa_r+0x2d0>)
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	f7f9 ff53 	bl	80005f8 <__aeabi_dmul>
 8006752:	a367      	add	r3, pc, #412	; (adr r3, 80068f0 <_dtoa_r+0x2d8>)
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	f7f9 fd98 	bl	800028c <__adddf3>
 800675c:	4606      	mov	r6, r0
 800675e:	4628      	mov	r0, r5
 8006760:	460f      	mov	r7, r1
 8006762:	f7f9 fedf 	bl	8000524 <__aeabi_i2d>
 8006766:	a364      	add	r3, pc, #400	; (adr r3, 80068f8 <_dtoa_r+0x2e0>)
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	f7f9 ff44 	bl	80005f8 <__aeabi_dmul>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4630      	mov	r0, r6
 8006776:	4639      	mov	r1, r7
 8006778:	f7f9 fd88 	bl	800028c <__adddf3>
 800677c:	4606      	mov	r6, r0
 800677e:	460f      	mov	r7, r1
 8006780:	f7fa f9ea 	bl	8000b58 <__aeabi_d2iz>
 8006784:	2200      	movs	r2, #0
 8006786:	4683      	mov	fp, r0
 8006788:	2300      	movs	r3, #0
 800678a:	4630      	mov	r0, r6
 800678c:	4639      	mov	r1, r7
 800678e:	f7fa f9a5 	bl	8000adc <__aeabi_dcmplt>
 8006792:	b148      	cbz	r0, 80067a8 <_dtoa_r+0x190>
 8006794:	4658      	mov	r0, fp
 8006796:	f7f9 fec5 	bl	8000524 <__aeabi_i2d>
 800679a:	4632      	mov	r2, r6
 800679c:	463b      	mov	r3, r7
 800679e:	f7fa f993 	bl	8000ac8 <__aeabi_dcmpeq>
 80067a2:	b908      	cbnz	r0, 80067a8 <_dtoa_r+0x190>
 80067a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067a8:	f1bb 0f16 	cmp.w	fp, #22
 80067ac:	d857      	bhi.n	800685e <_dtoa_r+0x246>
 80067ae:	4b5b      	ldr	r3, [pc, #364]	; (800691c <_dtoa_r+0x304>)
 80067b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	ec51 0b18 	vmov	r0, r1, d8
 80067bc:	f7fa f98e 	bl	8000adc <__aeabi_dcmplt>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d04e      	beq.n	8006862 <_dtoa_r+0x24a>
 80067c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067c8:	2300      	movs	r3, #0
 80067ca:	930c      	str	r3, [sp, #48]	; 0x30
 80067cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067ce:	1b5b      	subs	r3, r3, r5
 80067d0:	1e5a      	subs	r2, r3, #1
 80067d2:	bf45      	ittet	mi
 80067d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80067d8:	9305      	strmi	r3, [sp, #20]
 80067da:	2300      	movpl	r3, #0
 80067dc:	2300      	movmi	r3, #0
 80067de:	9206      	str	r2, [sp, #24]
 80067e0:	bf54      	ite	pl
 80067e2:	9305      	strpl	r3, [sp, #20]
 80067e4:	9306      	strmi	r3, [sp, #24]
 80067e6:	f1bb 0f00 	cmp.w	fp, #0
 80067ea:	db3c      	blt.n	8006866 <_dtoa_r+0x24e>
 80067ec:	9b06      	ldr	r3, [sp, #24]
 80067ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80067f2:	445b      	add	r3, fp
 80067f4:	9306      	str	r3, [sp, #24]
 80067f6:	2300      	movs	r3, #0
 80067f8:	9308      	str	r3, [sp, #32]
 80067fa:	9b07      	ldr	r3, [sp, #28]
 80067fc:	2b09      	cmp	r3, #9
 80067fe:	d868      	bhi.n	80068d2 <_dtoa_r+0x2ba>
 8006800:	2b05      	cmp	r3, #5
 8006802:	bfc4      	itt	gt
 8006804:	3b04      	subgt	r3, #4
 8006806:	9307      	strgt	r3, [sp, #28]
 8006808:	9b07      	ldr	r3, [sp, #28]
 800680a:	f1a3 0302 	sub.w	r3, r3, #2
 800680e:	bfcc      	ite	gt
 8006810:	2500      	movgt	r5, #0
 8006812:	2501      	movle	r5, #1
 8006814:	2b03      	cmp	r3, #3
 8006816:	f200 8085 	bhi.w	8006924 <_dtoa_r+0x30c>
 800681a:	e8df f003 	tbb	[pc, r3]
 800681e:	3b2e      	.short	0x3b2e
 8006820:	5839      	.short	0x5839
 8006822:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006826:	441d      	add	r5, r3
 8006828:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800682c:	2b20      	cmp	r3, #32
 800682e:	bfc1      	itttt	gt
 8006830:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006834:	fa08 f803 	lslgt.w	r8, r8, r3
 8006838:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800683c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006840:	bfd6      	itet	le
 8006842:	f1c3 0320 	rsble	r3, r3, #32
 8006846:	ea48 0003 	orrgt.w	r0, r8, r3
 800684a:	fa06 f003 	lslle.w	r0, r6, r3
 800684e:	f7f9 fe59 	bl	8000504 <__aeabi_ui2d>
 8006852:	2201      	movs	r2, #1
 8006854:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006858:	3d01      	subs	r5, #1
 800685a:	920e      	str	r2, [sp, #56]	; 0x38
 800685c:	e76f      	b.n	800673e <_dtoa_r+0x126>
 800685e:	2301      	movs	r3, #1
 8006860:	e7b3      	b.n	80067ca <_dtoa_r+0x1b2>
 8006862:	900c      	str	r0, [sp, #48]	; 0x30
 8006864:	e7b2      	b.n	80067cc <_dtoa_r+0x1b4>
 8006866:	9b05      	ldr	r3, [sp, #20]
 8006868:	eba3 030b 	sub.w	r3, r3, fp
 800686c:	9305      	str	r3, [sp, #20]
 800686e:	f1cb 0300 	rsb	r3, fp, #0
 8006872:	9308      	str	r3, [sp, #32]
 8006874:	2300      	movs	r3, #0
 8006876:	930b      	str	r3, [sp, #44]	; 0x2c
 8006878:	e7bf      	b.n	80067fa <_dtoa_r+0x1e2>
 800687a:	2300      	movs	r3, #0
 800687c:	9309      	str	r3, [sp, #36]	; 0x24
 800687e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006880:	2b00      	cmp	r3, #0
 8006882:	dc52      	bgt.n	800692a <_dtoa_r+0x312>
 8006884:	2301      	movs	r3, #1
 8006886:	9301      	str	r3, [sp, #4]
 8006888:	9304      	str	r3, [sp, #16]
 800688a:	461a      	mov	r2, r3
 800688c:	920a      	str	r2, [sp, #40]	; 0x28
 800688e:	e00b      	b.n	80068a8 <_dtoa_r+0x290>
 8006890:	2301      	movs	r3, #1
 8006892:	e7f3      	b.n	800687c <_dtoa_r+0x264>
 8006894:	2300      	movs	r3, #0
 8006896:	9309      	str	r3, [sp, #36]	; 0x24
 8006898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800689a:	445b      	add	r3, fp
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	3301      	adds	r3, #1
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	9304      	str	r3, [sp, #16]
 80068a4:	bfb8      	it	lt
 80068a6:	2301      	movlt	r3, #1
 80068a8:	69e0      	ldr	r0, [r4, #28]
 80068aa:	2100      	movs	r1, #0
 80068ac:	2204      	movs	r2, #4
 80068ae:	f102 0614 	add.w	r6, r2, #20
 80068b2:	429e      	cmp	r6, r3
 80068b4:	d93d      	bls.n	8006932 <_dtoa_r+0x31a>
 80068b6:	6041      	str	r1, [r0, #4]
 80068b8:	4620      	mov	r0, r4
 80068ba:	f000 fd9f 	bl	80073fc <_Balloc>
 80068be:	9000      	str	r0, [sp, #0]
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d139      	bne.n	8006938 <_dtoa_r+0x320>
 80068c4:	4b16      	ldr	r3, [pc, #88]	; (8006920 <_dtoa_r+0x308>)
 80068c6:	4602      	mov	r2, r0
 80068c8:	f240 11af 	movw	r1, #431	; 0x1af
 80068cc:	e6bd      	b.n	800664a <_dtoa_r+0x32>
 80068ce:	2301      	movs	r3, #1
 80068d0:	e7e1      	b.n	8006896 <_dtoa_r+0x27e>
 80068d2:	2501      	movs	r5, #1
 80068d4:	2300      	movs	r3, #0
 80068d6:	9307      	str	r3, [sp, #28]
 80068d8:	9509      	str	r5, [sp, #36]	; 0x24
 80068da:	f04f 33ff 	mov.w	r3, #4294967295
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	9304      	str	r3, [sp, #16]
 80068e2:	2200      	movs	r2, #0
 80068e4:	2312      	movs	r3, #18
 80068e6:	e7d1      	b.n	800688c <_dtoa_r+0x274>
 80068e8:	636f4361 	.word	0x636f4361
 80068ec:	3fd287a7 	.word	0x3fd287a7
 80068f0:	8b60c8b3 	.word	0x8b60c8b3
 80068f4:	3fc68a28 	.word	0x3fc68a28
 80068f8:	509f79fb 	.word	0x509f79fb
 80068fc:	3fd34413 	.word	0x3fd34413
 8006900:	08009d3e 	.word	0x08009d3e
 8006904:	08009d55 	.word	0x08009d55
 8006908:	7ff00000 	.word	0x7ff00000
 800690c:	08009d3a 	.word	0x08009d3a
 8006910:	08009d31 	.word	0x08009d31
 8006914:	08009d09 	.word	0x08009d09
 8006918:	3ff80000 	.word	0x3ff80000
 800691c:	08009e40 	.word	0x08009e40
 8006920:	08009dad 	.word	0x08009dad
 8006924:	2301      	movs	r3, #1
 8006926:	9309      	str	r3, [sp, #36]	; 0x24
 8006928:	e7d7      	b.n	80068da <_dtoa_r+0x2c2>
 800692a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800692c:	9301      	str	r3, [sp, #4]
 800692e:	9304      	str	r3, [sp, #16]
 8006930:	e7ba      	b.n	80068a8 <_dtoa_r+0x290>
 8006932:	3101      	adds	r1, #1
 8006934:	0052      	lsls	r2, r2, #1
 8006936:	e7ba      	b.n	80068ae <_dtoa_r+0x296>
 8006938:	69e3      	ldr	r3, [r4, #28]
 800693a:	9a00      	ldr	r2, [sp, #0]
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	9b04      	ldr	r3, [sp, #16]
 8006940:	2b0e      	cmp	r3, #14
 8006942:	f200 80a8 	bhi.w	8006a96 <_dtoa_r+0x47e>
 8006946:	2d00      	cmp	r5, #0
 8006948:	f000 80a5 	beq.w	8006a96 <_dtoa_r+0x47e>
 800694c:	f1bb 0f00 	cmp.w	fp, #0
 8006950:	dd38      	ble.n	80069c4 <_dtoa_r+0x3ac>
 8006952:	4bc0      	ldr	r3, [pc, #768]	; (8006c54 <_dtoa_r+0x63c>)
 8006954:	f00b 020f 	and.w	r2, fp, #15
 8006958:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800695c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006960:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006964:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006968:	d019      	beq.n	800699e <_dtoa_r+0x386>
 800696a:	4bbb      	ldr	r3, [pc, #748]	; (8006c58 <_dtoa_r+0x640>)
 800696c:	ec51 0b18 	vmov	r0, r1, d8
 8006970:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006974:	f7f9 ff6a 	bl	800084c <__aeabi_ddiv>
 8006978:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800697c:	f008 080f 	and.w	r8, r8, #15
 8006980:	2503      	movs	r5, #3
 8006982:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006c58 <_dtoa_r+0x640>
 8006986:	f1b8 0f00 	cmp.w	r8, #0
 800698a:	d10a      	bne.n	80069a2 <_dtoa_r+0x38a>
 800698c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006990:	4632      	mov	r2, r6
 8006992:	463b      	mov	r3, r7
 8006994:	f7f9 ff5a 	bl	800084c <__aeabi_ddiv>
 8006998:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800699c:	e02b      	b.n	80069f6 <_dtoa_r+0x3de>
 800699e:	2502      	movs	r5, #2
 80069a0:	e7ef      	b.n	8006982 <_dtoa_r+0x36a>
 80069a2:	f018 0f01 	tst.w	r8, #1
 80069a6:	d008      	beq.n	80069ba <_dtoa_r+0x3a2>
 80069a8:	4630      	mov	r0, r6
 80069aa:	4639      	mov	r1, r7
 80069ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 80069b0:	f7f9 fe22 	bl	80005f8 <__aeabi_dmul>
 80069b4:	3501      	adds	r5, #1
 80069b6:	4606      	mov	r6, r0
 80069b8:	460f      	mov	r7, r1
 80069ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80069be:	f109 0908 	add.w	r9, r9, #8
 80069c2:	e7e0      	b.n	8006986 <_dtoa_r+0x36e>
 80069c4:	f000 809f 	beq.w	8006b06 <_dtoa_r+0x4ee>
 80069c8:	f1cb 0600 	rsb	r6, fp, #0
 80069cc:	4ba1      	ldr	r3, [pc, #644]	; (8006c54 <_dtoa_r+0x63c>)
 80069ce:	4fa2      	ldr	r7, [pc, #648]	; (8006c58 <_dtoa_r+0x640>)
 80069d0:	f006 020f 	and.w	r2, r6, #15
 80069d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	ec51 0b18 	vmov	r0, r1, d8
 80069e0:	f7f9 fe0a 	bl	80005f8 <__aeabi_dmul>
 80069e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069e8:	1136      	asrs	r6, r6, #4
 80069ea:	2300      	movs	r3, #0
 80069ec:	2502      	movs	r5, #2
 80069ee:	2e00      	cmp	r6, #0
 80069f0:	d17e      	bne.n	8006af0 <_dtoa_r+0x4d8>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1d0      	bne.n	8006998 <_dtoa_r+0x380>
 80069f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 8084 	beq.w	8006b0a <_dtoa_r+0x4f2>
 8006a02:	4b96      	ldr	r3, [pc, #600]	; (8006c5c <_dtoa_r+0x644>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	4640      	mov	r0, r8
 8006a08:	4649      	mov	r1, r9
 8006a0a:	f7fa f867 	bl	8000adc <__aeabi_dcmplt>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	d07b      	beq.n	8006b0a <_dtoa_r+0x4f2>
 8006a12:	9b04      	ldr	r3, [sp, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d078      	beq.n	8006b0a <_dtoa_r+0x4f2>
 8006a18:	9b01      	ldr	r3, [sp, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	dd39      	ble.n	8006a92 <_dtoa_r+0x47a>
 8006a1e:	4b90      	ldr	r3, [pc, #576]	; (8006c60 <_dtoa_r+0x648>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	4640      	mov	r0, r8
 8006a24:	4649      	mov	r1, r9
 8006a26:	f7f9 fde7 	bl	80005f8 <__aeabi_dmul>
 8006a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a2e:	9e01      	ldr	r6, [sp, #4]
 8006a30:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006a34:	3501      	adds	r5, #1
 8006a36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	f7f9 fd72 	bl	8000524 <__aeabi_i2d>
 8006a40:	4642      	mov	r2, r8
 8006a42:	464b      	mov	r3, r9
 8006a44:	f7f9 fdd8 	bl	80005f8 <__aeabi_dmul>
 8006a48:	4b86      	ldr	r3, [pc, #536]	; (8006c64 <_dtoa_r+0x64c>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f7f9 fc1e 	bl	800028c <__adddf3>
 8006a50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a58:	9303      	str	r3, [sp, #12]
 8006a5a:	2e00      	cmp	r6, #0
 8006a5c:	d158      	bne.n	8006b10 <_dtoa_r+0x4f8>
 8006a5e:	4b82      	ldr	r3, [pc, #520]	; (8006c68 <_dtoa_r+0x650>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	4640      	mov	r0, r8
 8006a64:	4649      	mov	r1, r9
 8006a66:	f7f9 fc0f 	bl	8000288 <__aeabi_dsub>
 8006a6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a6e:	4680      	mov	r8, r0
 8006a70:	4689      	mov	r9, r1
 8006a72:	f7fa f851 	bl	8000b18 <__aeabi_dcmpgt>
 8006a76:	2800      	cmp	r0, #0
 8006a78:	f040 8296 	bne.w	8006fa8 <_dtoa_r+0x990>
 8006a7c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006a80:	4640      	mov	r0, r8
 8006a82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a86:	4649      	mov	r1, r9
 8006a88:	f7fa f828 	bl	8000adc <__aeabi_dcmplt>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	f040 8289 	bne.w	8006fa4 <_dtoa_r+0x98c>
 8006a92:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006a96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f2c0 814e 	blt.w	8006d3a <_dtoa_r+0x722>
 8006a9e:	f1bb 0f0e 	cmp.w	fp, #14
 8006aa2:	f300 814a 	bgt.w	8006d3a <_dtoa_r+0x722>
 8006aa6:	4b6b      	ldr	r3, [pc, #428]	; (8006c54 <_dtoa_r+0x63c>)
 8006aa8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006aac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f280 80dc 	bge.w	8006c70 <_dtoa_r+0x658>
 8006ab8:	9b04      	ldr	r3, [sp, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f300 80d8 	bgt.w	8006c70 <_dtoa_r+0x658>
 8006ac0:	f040 826f 	bne.w	8006fa2 <_dtoa_r+0x98a>
 8006ac4:	4b68      	ldr	r3, [pc, #416]	; (8006c68 <_dtoa_r+0x650>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	4640      	mov	r0, r8
 8006aca:	4649      	mov	r1, r9
 8006acc:	f7f9 fd94 	bl	80005f8 <__aeabi_dmul>
 8006ad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ad4:	f7fa f816 	bl	8000b04 <__aeabi_dcmpge>
 8006ad8:	9e04      	ldr	r6, [sp, #16]
 8006ada:	4637      	mov	r7, r6
 8006adc:	2800      	cmp	r0, #0
 8006ade:	f040 8245 	bne.w	8006f6c <_dtoa_r+0x954>
 8006ae2:	9d00      	ldr	r5, [sp, #0]
 8006ae4:	2331      	movs	r3, #49	; 0x31
 8006ae6:	f805 3b01 	strb.w	r3, [r5], #1
 8006aea:	f10b 0b01 	add.w	fp, fp, #1
 8006aee:	e241      	b.n	8006f74 <_dtoa_r+0x95c>
 8006af0:	07f2      	lsls	r2, r6, #31
 8006af2:	d505      	bpl.n	8006b00 <_dtoa_r+0x4e8>
 8006af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006af8:	f7f9 fd7e 	bl	80005f8 <__aeabi_dmul>
 8006afc:	3501      	adds	r5, #1
 8006afe:	2301      	movs	r3, #1
 8006b00:	1076      	asrs	r6, r6, #1
 8006b02:	3708      	adds	r7, #8
 8006b04:	e773      	b.n	80069ee <_dtoa_r+0x3d6>
 8006b06:	2502      	movs	r5, #2
 8006b08:	e775      	b.n	80069f6 <_dtoa_r+0x3de>
 8006b0a:	9e04      	ldr	r6, [sp, #16]
 8006b0c:	465f      	mov	r7, fp
 8006b0e:	e792      	b.n	8006a36 <_dtoa_r+0x41e>
 8006b10:	9900      	ldr	r1, [sp, #0]
 8006b12:	4b50      	ldr	r3, [pc, #320]	; (8006c54 <_dtoa_r+0x63c>)
 8006b14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b18:	4431      	add	r1, r6
 8006b1a:	9102      	str	r1, [sp, #8]
 8006b1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b1e:	eeb0 9a47 	vmov.f32	s18, s14
 8006b22:	eef0 9a67 	vmov.f32	s19, s15
 8006b26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b2e:	2900      	cmp	r1, #0
 8006b30:	d044      	beq.n	8006bbc <_dtoa_r+0x5a4>
 8006b32:	494e      	ldr	r1, [pc, #312]	; (8006c6c <_dtoa_r+0x654>)
 8006b34:	2000      	movs	r0, #0
 8006b36:	f7f9 fe89 	bl	800084c <__aeabi_ddiv>
 8006b3a:	ec53 2b19 	vmov	r2, r3, d9
 8006b3e:	f7f9 fba3 	bl	8000288 <__aeabi_dsub>
 8006b42:	9d00      	ldr	r5, [sp, #0]
 8006b44:	ec41 0b19 	vmov	d9, r0, r1
 8006b48:	4649      	mov	r1, r9
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	f7fa f804 	bl	8000b58 <__aeabi_d2iz>
 8006b50:	4606      	mov	r6, r0
 8006b52:	f7f9 fce7 	bl	8000524 <__aeabi_i2d>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4640      	mov	r0, r8
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	f7f9 fb93 	bl	8000288 <__aeabi_dsub>
 8006b62:	3630      	adds	r6, #48	; 0x30
 8006b64:	f805 6b01 	strb.w	r6, [r5], #1
 8006b68:	ec53 2b19 	vmov	r2, r3, d9
 8006b6c:	4680      	mov	r8, r0
 8006b6e:	4689      	mov	r9, r1
 8006b70:	f7f9 ffb4 	bl	8000adc <__aeabi_dcmplt>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d164      	bne.n	8006c42 <_dtoa_r+0x62a>
 8006b78:	4642      	mov	r2, r8
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	4937      	ldr	r1, [pc, #220]	; (8006c5c <_dtoa_r+0x644>)
 8006b7e:	2000      	movs	r0, #0
 8006b80:	f7f9 fb82 	bl	8000288 <__aeabi_dsub>
 8006b84:	ec53 2b19 	vmov	r2, r3, d9
 8006b88:	f7f9 ffa8 	bl	8000adc <__aeabi_dcmplt>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	f040 80b6 	bne.w	8006cfe <_dtoa_r+0x6e6>
 8006b92:	9b02      	ldr	r3, [sp, #8]
 8006b94:	429d      	cmp	r5, r3
 8006b96:	f43f af7c 	beq.w	8006a92 <_dtoa_r+0x47a>
 8006b9a:	4b31      	ldr	r3, [pc, #196]	; (8006c60 <_dtoa_r+0x648>)
 8006b9c:	ec51 0b19 	vmov	r0, r1, d9
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f7f9 fd29 	bl	80005f8 <__aeabi_dmul>
 8006ba6:	4b2e      	ldr	r3, [pc, #184]	; (8006c60 <_dtoa_r+0x648>)
 8006ba8:	ec41 0b19 	vmov	d9, r0, r1
 8006bac:	2200      	movs	r2, #0
 8006bae:	4640      	mov	r0, r8
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	f7f9 fd21 	bl	80005f8 <__aeabi_dmul>
 8006bb6:	4680      	mov	r8, r0
 8006bb8:	4689      	mov	r9, r1
 8006bba:	e7c5      	b.n	8006b48 <_dtoa_r+0x530>
 8006bbc:	ec51 0b17 	vmov	r0, r1, d7
 8006bc0:	f7f9 fd1a 	bl	80005f8 <__aeabi_dmul>
 8006bc4:	9b02      	ldr	r3, [sp, #8]
 8006bc6:	9d00      	ldr	r5, [sp, #0]
 8006bc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bca:	ec41 0b19 	vmov	d9, r0, r1
 8006bce:	4649      	mov	r1, r9
 8006bd0:	4640      	mov	r0, r8
 8006bd2:	f7f9 ffc1 	bl	8000b58 <__aeabi_d2iz>
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	f7f9 fca4 	bl	8000524 <__aeabi_i2d>
 8006bdc:	3630      	adds	r6, #48	; 0x30
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	4640      	mov	r0, r8
 8006be4:	4649      	mov	r1, r9
 8006be6:	f7f9 fb4f 	bl	8000288 <__aeabi_dsub>
 8006bea:	f805 6b01 	strb.w	r6, [r5], #1
 8006bee:	9b02      	ldr	r3, [sp, #8]
 8006bf0:	429d      	cmp	r5, r3
 8006bf2:	4680      	mov	r8, r0
 8006bf4:	4689      	mov	r9, r1
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	d124      	bne.n	8006c46 <_dtoa_r+0x62e>
 8006bfc:	4b1b      	ldr	r3, [pc, #108]	; (8006c6c <_dtoa_r+0x654>)
 8006bfe:	ec51 0b19 	vmov	r0, r1, d9
 8006c02:	f7f9 fb43 	bl	800028c <__adddf3>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	f7f9 ff83 	bl	8000b18 <__aeabi_dcmpgt>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d173      	bne.n	8006cfe <_dtoa_r+0x6e6>
 8006c16:	ec53 2b19 	vmov	r2, r3, d9
 8006c1a:	4914      	ldr	r1, [pc, #80]	; (8006c6c <_dtoa_r+0x654>)
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	f7f9 fb33 	bl	8000288 <__aeabi_dsub>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	4640      	mov	r0, r8
 8006c28:	4649      	mov	r1, r9
 8006c2a:	f7f9 ff57 	bl	8000adc <__aeabi_dcmplt>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	f43f af2f 	beq.w	8006a92 <_dtoa_r+0x47a>
 8006c34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c36:	1e6b      	subs	r3, r5, #1
 8006c38:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c3e:	2b30      	cmp	r3, #48	; 0x30
 8006c40:	d0f8      	beq.n	8006c34 <_dtoa_r+0x61c>
 8006c42:	46bb      	mov	fp, r7
 8006c44:	e04a      	b.n	8006cdc <_dtoa_r+0x6c4>
 8006c46:	4b06      	ldr	r3, [pc, #24]	; (8006c60 <_dtoa_r+0x648>)
 8006c48:	f7f9 fcd6 	bl	80005f8 <__aeabi_dmul>
 8006c4c:	4680      	mov	r8, r0
 8006c4e:	4689      	mov	r9, r1
 8006c50:	e7bd      	b.n	8006bce <_dtoa_r+0x5b6>
 8006c52:	bf00      	nop
 8006c54:	08009e40 	.word	0x08009e40
 8006c58:	08009e18 	.word	0x08009e18
 8006c5c:	3ff00000 	.word	0x3ff00000
 8006c60:	40240000 	.word	0x40240000
 8006c64:	401c0000 	.word	0x401c0000
 8006c68:	40140000 	.word	0x40140000
 8006c6c:	3fe00000 	.word	0x3fe00000
 8006c70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c74:	9d00      	ldr	r5, [sp, #0]
 8006c76:	4642      	mov	r2, r8
 8006c78:	464b      	mov	r3, r9
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	4639      	mov	r1, r7
 8006c7e:	f7f9 fde5 	bl	800084c <__aeabi_ddiv>
 8006c82:	f7f9 ff69 	bl	8000b58 <__aeabi_d2iz>
 8006c86:	9001      	str	r0, [sp, #4]
 8006c88:	f7f9 fc4c 	bl	8000524 <__aeabi_i2d>
 8006c8c:	4642      	mov	r2, r8
 8006c8e:	464b      	mov	r3, r9
 8006c90:	f7f9 fcb2 	bl	80005f8 <__aeabi_dmul>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4630      	mov	r0, r6
 8006c9a:	4639      	mov	r1, r7
 8006c9c:	f7f9 faf4 	bl	8000288 <__aeabi_dsub>
 8006ca0:	9e01      	ldr	r6, [sp, #4]
 8006ca2:	9f04      	ldr	r7, [sp, #16]
 8006ca4:	3630      	adds	r6, #48	; 0x30
 8006ca6:	f805 6b01 	strb.w	r6, [r5], #1
 8006caa:	9e00      	ldr	r6, [sp, #0]
 8006cac:	1bae      	subs	r6, r5, r6
 8006cae:	42b7      	cmp	r7, r6
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	d134      	bne.n	8006d20 <_dtoa_r+0x708>
 8006cb6:	f7f9 fae9 	bl	800028c <__adddf3>
 8006cba:	4642      	mov	r2, r8
 8006cbc:	464b      	mov	r3, r9
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	460f      	mov	r7, r1
 8006cc2:	f7f9 ff29 	bl	8000b18 <__aeabi_dcmpgt>
 8006cc6:	b9c8      	cbnz	r0, 8006cfc <_dtoa_r+0x6e4>
 8006cc8:	4642      	mov	r2, r8
 8006cca:	464b      	mov	r3, r9
 8006ccc:	4630      	mov	r0, r6
 8006cce:	4639      	mov	r1, r7
 8006cd0:	f7f9 fefa 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cd4:	b110      	cbz	r0, 8006cdc <_dtoa_r+0x6c4>
 8006cd6:	9b01      	ldr	r3, [sp, #4]
 8006cd8:	07db      	lsls	r3, r3, #31
 8006cda:	d40f      	bmi.n	8006cfc <_dtoa_r+0x6e4>
 8006cdc:	4651      	mov	r1, sl
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f000 fbcc 	bl	800747c <_Bfree>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ce8:	702b      	strb	r3, [r5, #0]
 8006cea:	f10b 0301 	add.w	r3, fp, #1
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f43f ace2 	beq.w	80066bc <_dtoa_r+0xa4>
 8006cf8:	601d      	str	r5, [r3, #0]
 8006cfa:	e4df      	b.n	80066bc <_dtoa_r+0xa4>
 8006cfc:	465f      	mov	r7, fp
 8006cfe:	462b      	mov	r3, r5
 8006d00:	461d      	mov	r5, r3
 8006d02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d06:	2a39      	cmp	r2, #57	; 0x39
 8006d08:	d106      	bne.n	8006d18 <_dtoa_r+0x700>
 8006d0a:	9a00      	ldr	r2, [sp, #0]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d1f7      	bne.n	8006d00 <_dtoa_r+0x6e8>
 8006d10:	9900      	ldr	r1, [sp, #0]
 8006d12:	2230      	movs	r2, #48	; 0x30
 8006d14:	3701      	adds	r7, #1
 8006d16:	700a      	strb	r2, [r1, #0]
 8006d18:	781a      	ldrb	r2, [r3, #0]
 8006d1a:	3201      	adds	r2, #1
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	e790      	b.n	8006c42 <_dtoa_r+0x62a>
 8006d20:	4ba3      	ldr	r3, [pc, #652]	; (8006fb0 <_dtoa_r+0x998>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	f7f9 fc68 	bl	80005f8 <__aeabi_dmul>
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	4606      	mov	r6, r0
 8006d2e:	460f      	mov	r7, r1
 8006d30:	f7f9 feca 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d09e      	beq.n	8006c76 <_dtoa_r+0x65e>
 8006d38:	e7d0      	b.n	8006cdc <_dtoa_r+0x6c4>
 8006d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d3c:	2a00      	cmp	r2, #0
 8006d3e:	f000 80ca 	beq.w	8006ed6 <_dtoa_r+0x8be>
 8006d42:	9a07      	ldr	r2, [sp, #28]
 8006d44:	2a01      	cmp	r2, #1
 8006d46:	f300 80ad 	bgt.w	8006ea4 <_dtoa_r+0x88c>
 8006d4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d4c:	2a00      	cmp	r2, #0
 8006d4e:	f000 80a5 	beq.w	8006e9c <_dtoa_r+0x884>
 8006d52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d56:	9e08      	ldr	r6, [sp, #32]
 8006d58:	9d05      	ldr	r5, [sp, #20]
 8006d5a:	9a05      	ldr	r2, [sp, #20]
 8006d5c:	441a      	add	r2, r3
 8006d5e:	9205      	str	r2, [sp, #20]
 8006d60:	9a06      	ldr	r2, [sp, #24]
 8006d62:	2101      	movs	r1, #1
 8006d64:	441a      	add	r2, r3
 8006d66:	4620      	mov	r0, r4
 8006d68:	9206      	str	r2, [sp, #24]
 8006d6a:	f000 fc87 	bl	800767c <__i2b>
 8006d6e:	4607      	mov	r7, r0
 8006d70:	b165      	cbz	r5, 8006d8c <_dtoa_r+0x774>
 8006d72:	9b06      	ldr	r3, [sp, #24]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	dd09      	ble.n	8006d8c <_dtoa_r+0x774>
 8006d78:	42ab      	cmp	r3, r5
 8006d7a:	9a05      	ldr	r2, [sp, #20]
 8006d7c:	bfa8      	it	ge
 8006d7e:	462b      	movge	r3, r5
 8006d80:	1ad2      	subs	r2, r2, r3
 8006d82:	9205      	str	r2, [sp, #20]
 8006d84:	9a06      	ldr	r2, [sp, #24]
 8006d86:	1aed      	subs	r5, r5, r3
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	9306      	str	r3, [sp, #24]
 8006d8c:	9b08      	ldr	r3, [sp, #32]
 8006d8e:	b1f3      	cbz	r3, 8006dce <_dtoa_r+0x7b6>
 8006d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 80a3 	beq.w	8006ede <_dtoa_r+0x8c6>
 8006d98:	2e00      	cmp	r6, #0
 8006d9a:	dd10      	ble.n	8006dbe <_dtoa_r+0x7a6>
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	4632      	mov	r2, r6
 8006da0:	4620      	mov	r0, r4
 8006da2:	f000 fd2b 	bl	80077fc <__pow5mult>
 8006da6:	4652      	mov	r2, sl
 8006da8:	4601      	mov	r1, r0
 8006daa:	4607      	mov	r7, r0
 8006dac:	4620      	mov	r0, r4
 8006dae:	f000 fc7b 	bl	80076a8 <__multiply>
 8006db2:	4651      	mov	r1, sl
 8006db4:	4680      	mov	r8, r0
 8006db6:	4620      	mov	r0, r4
 8006db8:	f000 fb60 	bl	800747c <_Bfree>
 8006dbc:	46c2      	mov	sl, r8
 8006dbe:	9b08      	ldr	r3, [sp, #32]
 8006dc0:	1b9a      	subs	r2, r3, r6
 8006dc2:	d004      	beq.n	8006dce <_dtoa_r+0x7b6>
 8006dc4:	4651      	mov	r1, sl
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f000 fd18 	bl	80077fc <__pow5mult>
 8006dcc:	4682      	mov	sl, r0
 8006dce:	2101      	movs	r1, #1
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 fc53 	bl	800767c <__i2b>
 8006dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	4606      	mov	r6, r0
 8006ddc:	f340 8081 	ble.w	8006ee2 <_dtoa_r+0x8ca>
 8006de0:	461a      	mov	r2, r3
 8006de2:	4601      	mov	r1, r0
 8006de4:	4620      	mov	r0, r4
 8006de6:	f000 fd09 	bl	80077fc <__pow5mult>
 8006dea:	9b07      	ldr	r3, [sp, #28]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	4606      	mov	r6, r0
 8006df0:	dd7a      	ble.n	8006ee8 <_dtoa_r+0x8d0>
 8006df2:	f04f 0800 	mov.w	r8, #0
 8006df6:	6933      	ldr	r3, [r6, #16]
 8006df8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006dfc:	6918      	ldr	r0, [r3, #16]
 8006dfe:	f000 fbef 	bl	80075e0 <__hi0bits>
 8006e02:	f1c0 0020 	rsb	r0, r0, #32
 8006e06:	9b06      	ldr	r3, [sp, #24]
 8006e08:	4418      	add	r0, r3
 8006e0a:	f010 001f 	ands.w	r0, r0, #31
 8006e0e:	f000 8094 	beq.w	8006f3a <_dtoa_r+0x922>
 8006e12:	f1c0 0320 	rsb	r3, r0, #32
 8006e16:	2b04      	cmp	r3, #4
 8006e18:	f340 8085 	ble.w	8006f26 <_dtoa_r+0x90e>
 8006e1c:	9b05      	ldr	r3, [sp, #20]
 8006e1e:	f1c0 001c 	rsb	r0, r0, #28
 8006e22:	4403      	add	r3, r0
 8006e24:	9305      	str	r3, [sp, #20]
 8006e26:	9b06      	ldr	r3, [sp, #24]
 8006e28:	4403      	add	r3, r0
 8006e2a:	4405      	add	r5, r0
 8006e2c:	9306      	str	r3, [sp, #24]
 8006e2e:	9b05      	ldr	r3, [sp, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	dd05      	ble.n	8006e40 <_dtoa_r+0x828>
 8006e34:	4651      	mov	r1, sl
 8006e36:	461a      	mov	r2, r3
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f000 fd39 	bl	80078b0 <__lshift>
 8006e3e:	4682      	mov	sl, r0
 8006e40:	9b06      	ldr	r3, [sp, #24]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	dd05      	ble.n	8006e52 <_dtoa_r+0x83a>
 8006e46:	4631      	mov	r1, r6
 8006e48:	461a      	mov	r2, r3
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f000 fd30 	bl	80078b0 <__lshift>
 8006e50:	4606      	mov	r6, r0
 8006e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d072      	beq.n	8006f3e <_dtoa_r+0x926>
 8006e58:	4631      	mov	r1, r6
 8006e5a:	4650      	mov	r0, sl
 8006e5c:	f000 fd94 	bl	8007988 <__mcmp>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	da6c      	bge.n	8006f3e <_dtoa_r+0x926>
 8006e64:	2300      	movs	r3, #0
 8006e66:	4651      	mov	r1, sl
 8006e68:	220a      	movs	r2, #10
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 fb28 	bl	80074c0 <__multadd>
 8006e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e76:	4682      	mov	sl, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 81b0 	beq.w	80071de <_dtoa_r+0xbc6>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	4639      	mov	r1, r7
 8006e82:	220a      	movs	r2, #10
 8006e84:	4620      	mov	r0, r4
 8006e86:	f000 fb1b 	bl	80074c0 <__multadd>
 8006e8a:	9b01      	ldr	r3, [sp, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	4607      	mov	r7, r0
 8006e90:	f300 8096 	bgt.w	8006fc0 <_dtoa_r+0x9a8>
 8006e94:	9b07      	ldr	r3, [sp, #28]
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	dc59      	bgt.n	8006f4e <_dtoa_r+0x936>
 8006e9a:	e091      	b.n	8006fc0 <_dtoa_r+0x9a8>
 8006e9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ea2:	e758      	b.n	8006d56 <_dtoa_r+0x73e>
 8006ea4:	9b04      	ldr	r3, [sp, #16]
 8006ea6:	1e5e      	subs	r6, r3, #1
 8006ea8:	9b08      	ldr	r3, [sp, #32]
 8006eaa:	42b3      	cmp	r3, r6
 8006eac:	bfbf      	itttt	lt
 8006eae:	9b08      	ldrlt	r3, [sp, #32]
 8006eb0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006eb2:	9608      	strlt	r6, [sp, #32]
 8006eb4:	1af3      	sublt	r3, r6, r3
 8006eb6:	bfb4      	ite	lt
 8006eb8:	18d2      	addlt	r2, r2, r3
 8006eba:	1b9e      	subge	r6, r3, r6
 8006ebc:	9b04      	ldr	r3, [sp, #16]
 8006ebe:	bfbc      	itt	lt
 8006ec0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006ec2:	2600      	movlt	r6, #0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	bfb7      	itett	lt
 8006ec8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006ecc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006ed0:	1a9d      	sublt	r5, r3, r2
 8006ed2:	2300      	movlt	r3, #0
 8006ed4:	e741      	b.n	8006d5a <_dtoa_r+0x742>
 8006ed6:	9e08      	ldr	r6, [sp, #32]
 8006ed8:	9d05      	ldr	r5, [sp, #20]
 8006eda:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006edc:	e748      	b.n	8006d70 <_dtoa_r+0x758>
 8006ede:	9a08      	ldr	r2, [sp, #32]
 8006ee0:	e770      	b.n	8006dc4 <_dtoa_r+0x7ac>
 8006ee2:	9b07      	ldr	r3, [sp, #28]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	dc19      	bgt.n	8006f1c <_dtoa_r+0x904>
 8006ee8:	9b02      	ldr	r3, [sp, #8]
 8006eea:	b9bb      	cbnz	r3, 8006f1c <_dtoa_r+0x904>
 8006eec:	9b03      	ldr	r3, [sp, #12]
 8006eee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ef2:	b99b      	cbnz	r3, 8006f1c <_dtoa_r+0x904>
 8006ef4:	9b03      	ldr	r3, [sp, #12]
 8006ef6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006efa:	0d1b      	lsrs	r3, r3, #20
 8006efc:	051b      	lsls	r3, r3, #20
 8006efe:	b183      	cbz	r3, 8006f22 <_dtoa_r+0x90a>
 8006f00:	9b05      	ldr	r3, [sp, #20]
 8006f02:	3301      	adds	r3, #1
 8006f04:	9305      	str	r3, [sp, #20]
 8006f06:	9b06      	ldr	r3, [sp, #24]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	9306      	str	r3, [sp, #24]
 8006f0c:	f04f 0801 	mov.w	r8, #1
 8006f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f47f af6f 	bne.w	8006df6 <_dtoa_r+0x7de>
 8006f18:	2001      	movs	r0, #1
 8006f1a:	e774      	b.n	8006e06 <_dtoa_r+0x7ee>
 8006f1c:	f04f 0800 	mov.w	r8, #0
 8006f20:	e7f6      	b.n	8006f10 <_dtoa_r+0x8f8>
 8006f22:	4698      	mov	r8, r3
 8006f24:	e7f4      	b.n	8006f10 <_dtoa_r+0x8f8>
 8006f26:	d082      	beq.n	8006e2e <_dtoa_r+0x816>
 8006f28:	9a05      	ldr	r2, [sp, #20]
 8006f2a:	331c      	adds	r3, #28
 8006f2c:	441a      	add	r2, r3
 8006f2e:	9205      	str	r2, [sp, #20]
 8006f30:	9a06      	ldr	r2, [sp, #24]
 8006f32:	441a      	add	r2, r3
 8006f34:	441d      	add	r5, r3
 8006f36:	9206      	str	r2, [sp, #24]
 8006f38:	e779      	b.n	8006e2e <_dtoa_r+0x816>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	e7f4      	b.n	8006f28 <_dtoa_r+0x910>
 8006f3e:	9b04      	ldr	r3, [sp, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	dc37      	bgt.n	8006fb4 <_dtoa_r+0x99c>
 8006f44:	9b07      	ldr	r3, [sp, #28]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	dd34      	ble.n	8006fb4 <_dtoa_r+0x99c>
 8006f4a:	9b04      	ldr	r3, [sp, #16]
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	9b01      	ldr	r3, [sp, #4]
 8006f50:	b963      	cbnz	r3, 8006f6c <_dtoa_r+0x954>
 8006f52:	4631      	mov	r1, r6
 8006f54:	2205      	movs	r2, #5
 8006f56:	4620      	mov	r0, r4
 8006f58:	f000 fab2 	bl	80074c0 <__multadd>
 8006f5c:	4601      	mov	r1, r0
 8006f5e:	4606      	mov	r6, r0
 8006f60:	4650      	mov	r0, sl
 8006f62:	f000 fd11 	bl	8007988 <__mcmp>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	f73f adbb 	bgt.w	8006ae2 <_dtoa_r+0x4ca>
 8006f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f6e:	9d00      	ldr	r5, [sp, #0]
 8006f70:	ea6f 0b03 	mvn.w	fp, r3
 8006f74:	f04f 0800 	mov.w	r8, #0
 8006f78:	4631      	mov	r1, r6
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 fa7e 	bl	800747c <_Bfree>
 8006f80:	2f00      	cmp	r7, #0
 8006f82:	f43f aeab 	beq.w	8006cdc <_dtoa_r+0x6c4>
 8006f86:	f1b8 0f00 	cmp.w	r8, #0
 8006f8a:	d005      	beq.n	8006f98 <_dtoa_r+0x980>
 8006f8c:	45b8      	cmp	r8, r7
 8006f8e:	d003      	beq.n	8006f98 <_dtoa_r+0x980>
 8006f90:	4641      	mov	r1, r8
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 fa72 	bl	800747c <_Bfree>
 8006f98:	4639      	mov	r1, r7
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f000 fa6e 	bl	800747c <_Bfree>
 8006fa0:	e69c      	b.n	8006cdc <_dtoa_r+0x6c4>
 8006fa2:	2600      	movs	r6, #0
 8006fa4:	4637      	mov	r7, r6
 8006fa6:	e7e1      	b.n	8006f6c <_dtoa_r+0x954>
 8006fa8:	46bb      	mov	fp, r7
 8006faa:	4637      	mov	r7, r6
 8006fac:	e599      	b.n	8006ae2 <_dtoa_r+0x4ca>
 8006fae:	bf00      	nop
 8006fb0:	40240000 	.word	0x40240000
 8006fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 80c8 	beq.w	800714c <_dtoa_r+0xb34>
 8006fbc:	9b04      	ldr	r3, [sp, #16]
 8006fbe:	9301      	str	r3, [sp, #4]
 8006fc0:	2d00      	cmp	r5, #0
 8006fc2:	dd05      	ble.n	8006fd0 <_dtoa_r+0x9b8>
 8006fc4:	4639      	mov	r1, r7
 8006fc6:	462a      	mov	r2, r5
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f000 fc71 	bl	80078b0 <__lshift>
 8006fce:	4607      	mov	r7, r0
 8006fd0:	f1b8 0f00 	cmp.w	r8, #0
 8006fd4:	d05b      	beq.n	800708e <_dtoa_r+0xa76>
 8006fd6:	6879      	ldr	r1, [r7, #4]
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f000 fa0f 	bl	80073fc <_Balloc>
 8006fde:	4605      	mov	r5, r0
 8006fe0:	b928      	cbnz	r0, 8006fee <_dtoa_r+0x9d6>
 8006fe2:	4b83      	ldr	r3, [pc, #524]	; (80071f0 <_dtoa_r+0xbd8>)
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006fea:	f7ff bb2e 	b.w	800664a <_dtoa_r+0x32>
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	3202      	adds	r2, #2
 8006ff2:	0092      	lsls	r2, r2, #2
 8006ff4:	f107 010c 	add.w	r1, r7, #12
 8006ff8:	300c      	adds	r0, #12
 8006ffa:	f001 ff85 	bl	8008f08 <memcpy>
 8006ffe:	2201      	movs	r2, #1
 8007000:	4629      	mov	r1, r5
 8007002:	4620      	mov	r0, r4
 8007004:	f000 fc54 	bl	80078b0 <__lshift>
 8007008:	9b00      	ldr	r3, [sp, #0]
 800700a:	3301      	adds	r3, #1
 800700c:	9304      	str	r3, [sp, #16]
 800700e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007012:	4413      	add	r3, r2
 8007014:	9308      	str	r3, [sp, #32]
 8007016:	9b02      	ldr	r3, [sp, #8]
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	46b8      	mov	r8, r7
 800701e:	9306      	str	r3, [sp, #24]
 8007020:	4607      	mov	r7, r0
 8007022:	9b04      	ldr	r3, [sp, #16]
 8007024:	4631      	mov	r1, r6
 8007026:	3b01      	subs	r3, #1
 8007028:	4650      	mov	r0, sl
 800702a:	9301      	str	r3, [sp, #4]
 800702c:	f7ff fa6a 	bl	8006504 <quorem>
 8007030:	4641      	mov	r1, r8
 8007032:	9002      	str	r0, [sp, #8]
 8007034:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007038:	4650      	mov	r0, sl
 800703a:	f000 fca5 	bl	8007988 <__mcmp>
 800703e:	463a      	mov	r2, r7
 8007040:	9005      	str	r0, [sp, #20]
 8007042:	4631      	mov	r1, r6
 8007044:	4620      	mov	r0, r4
 8007046:	f000 fcbb 	bl	80079c0 <__mdiff>
 800704a:	68c2      	ldr	r2, [r0, #12]
 800704c:	4605      	mov	r5, r0
 800704e:	bb02      	cbnz	r2, 8007092 <_dtoa_r+0xa7a>
 8007050:	4601      	mov	r1, r0
 8007052:	4650      	mov	r0, sl
 8007054:	f000 fc98 	bl	8007988 <__mcmp>
 8007058:	4602      	mov	r2, r0
 800705a:	4629      	mov	r1, r5
 800705c:	4620      	mov	r0, r4
 800705e:	9209      	str	r2, [sp, #36]	; 0x24
 8007060:	f000 fa0c 	bl	800747c <_Bfree>
 8007064:	9b07      	ldr	r3, [sp, #28]
 8007066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007068:	9d04      	ldr	r5, [sp, #16]
 800706a:	ea43 0102 	orr.w	r1, r3, r2
 800706e:	9b06      	ldr	r3, [sp, #24]
 8007070:	4319      	orrs	r1, r3
 8007072:	d110      	bne.n	8007096 <_dtoa_r+0xa7e>
 8007074:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007078:	d029      	beq.n	80070ce <_dtoa_r+0xab6>
 800707a:	9b05      	ldr	r3, [sp, #20]
 800707c:	2b00      	cmp	r3, #0
 800707e:	dd02      	ble.n	8007086 <_dtoa_r+0xa6e>
 8007080:	9b02      	ldr	r3, [sp, #8]
 8007082:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007086:	9b01      	ldr	r3, [sp, #4]
 8007088:	f883 9000 	strb.w	r9, [r3]
 800708c:	e774      	b.n	8006f78 <_dtoa_r+0x960>
 800708e:	4638      	mov	r0, r7
 8007090:	e7ba      	b.n	8007008 <_dtoa_r+0x9f0>
 8007092:	2201      	movs	r2, #1
 8007094:	e7e1      	b.n	800705a <_dtoa_r+0xa42>
 8007096:	9b05      	ldr	r3, [sp, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	db04      	blt.n	80070a6 <_dtoa_r+0xa8e>
 800709c:	9907      	ldr	r1, [sp, #28]
 800709e:	430b      	orrs	r3, r1
 80070a0:	9906      	ldr	r1, [sp, #24]
 80070a2:	430b      	orrs	r3, r1
 80070a4:	d120      	bne.n	80070e8 <_dtoa_r+0xad0>
 80070a6:	2a00      	cmp	r2, #0
 80070a8:	dded      	ble.n	8007086 <_dtoa_r+0xa6e>
 80070aa:	4651      	mov	r1, sl
 80070ac:	2201      	movs	r2, #1
 80070ae:	4620      	mov	r0, r4
 80070b0:	f000 fbfe 	bl	80078b0 <__lshift>
 80070b4:	4631      	mov	r1, r6
 80070b6:	4682      	mov	sl, r0
 80070b8:	f000 fc66 	bl	8007988 <__mcmp>
 80070bc:	2800      	cmp	r0, #0
 80070be:	dc03      	bgt.n	80070c8 <_dtoa_r+0xab0>
 80070c0:	d1e1      	bne.n	8007086 <_dtoa_r+0xa6e>
 80070c2:	f019 0f01 	tst.w	r9, #1
 80070c6:	d0de      	beq.n	8007086 <_dtoa_r+0xa6e>
 80070c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070cc:	d1d8      	bne.n	8007080 <_dtoa_r+0xa68>
 80070ce:	9a01      	ldr	r2, [sp, #4]
 80070d0:	2339      	movs	r3, #57	; 0x39
 80070d2:	7013      	strb	r3, [r2, #0]
 80070d4:	462b      	mov	r3, r5
 80070d6:	461d      	mov	r5, r3
 80070d8:	3b01      	subs	r3, #1
 80070da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070de:	2a39      	cmp	r2, #57	; 0x39
 80070e0:	d06c      	beq.n	80071bc <_dtoa_r+0xba4>
 80070e2:	3201      	adds	r2, #1
 80070e4:	701a      	strb	r2, [r3, #0]
 80070e6:	e747      	b.n	8006f78 <_dtoa_r+0x960>
 80070e8:	2a00      	cmp	r2, #0
 80070ea:	dd07      	ble.n	80070fc <_dtoa_r+0xae4>
 80070ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070f0:	d0ed      	beq.n	80070ce <_dtoa_r+0xab6>
 80070f2:	9a01      	ldr	r2, [sp, #4]
 80070f4:	f109 0301 	add.w	r3, r9, #1
 80070f8:	7013      	strb	r3, [r2, #0]
 80070fa:	e73d      	b.n	8006f78 <_dtoa_r+0x960>
 80070fc:	9b04      	ldr	r3, [sp, #16]
 80070fe:	9a08      	ldr	r2, [sp, #32]
 8007100:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007104:	4293      	cmp	r3, r2
 8007106:	d043      	beq.n	8007190 <_dtoa_r+0xb78>
 8007108:	4651      	mov	r1, sl
 800710a:	2300      	movs	r3, #0
 800710c:	220a      	movs	r2, #10
 800710e:	4620      	mov	r0, r4
 8007110:	f000 f9d6 	bl	80074c0 <__multadd>
 8007114:	45b8      	cmp	r8, r7
 8007116:	4682      	mov	sl, r0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	f04f 020a 	mov.w	r2, #10
 8007120:	4641      	mov	r1, r8
 8007122:	4620      	mov	r0, r4
 8007124:	d107      	bne.n	8007136 <_dtoa_r+0xb1e>
 8007126:	f000 f9cb 	bl	80074c0 <__multadd>
 800712a:	4680      	mov	r8, r0
 800712c:	4607      	mov	r7, r0
 800712e:	9b04      	ldr	r3, [sp, #16]
 8007130:	3301      	adds	r3, #1
 8007132:	9304      	str	r3, [sp, #16]
 8007134:	e775      	b.n	8007022 <_dtoa_r+0xa0a>
 8007136:	f000 f9c3 	bl	80074c0 <__multadd>
 800713a:	4639      	mov	r1, r7
 800713c:	4680      	mov	r8, r0
 800713e:	2300      	movs	r3, #0
 8007140:	220a      	movs	r2, #10
 8007142:	4620      	mov	r0, r4
 8007144:	f000 f9bc 	bl	80074c0 <__multadd>
 8007148:	4607      	mov	r7, r0
 800714a:	e7f0      	b.n	800712e <_dtoa_r+0xb16>
 800714c:	9b04      	ldr	r3, [sp, #16]
 800714e:	9301      	str	r3, [sp, #4]
 8007150:	9d00      	ldr	r5, [sp, #0]
 8007152:	4631      	mov	r1, r6
 8007154:	4650      	mov	r0, sl
 8007156:	f7ff f9d5 	bl	8006504 <quorem>
 800715a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800715e:	9b00      	ldr	r3, [sp, #0]
 8007160:	f805 9b01 	strb.w	r9, [r5], #1
 8007164:	1aea      	subs	r2, r5, r3
 8007166:	9b01      	ldr	r3, [sp, #4]
 8007168:	4293      	cmp	r3, r2
 800716a:	dd07      	ble.n	800717c <_dtoa_r+0xb64>
 800716c:	4651      	mov	r1, sl
 800716e:	2300      	movs	r3, #0
 8007170:	220a      	movs	r2, #10
 8007172:	4620      	mov	r0, r4
 8007174:	f000 f9a4 	bl	80074c0 <__multadd>
 8007178:	4682      	mov	sl, r0
 800717a:	e7ea      	b.n	8007152 <_dtoa_r+0xb3a>
 800717c:	9b01      	ldr	r3, [sp, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	bfc8      	it	gt
 8007182:	461d      	movgt	r5, r3
 8007184:	9b00      	ldr	r3, [sp, #0]
 8007186:	bfd8      	it	le
 8007188:	2501      	movle	r5, #1
 800718a:	441d      	add	r5, r3
 800718c:	f04f 0800 	mov.w	r8, #0
 8007190:	4651      	mov	r1, sl
 8007192:	2201      	movs	r2, #1
 8007194:	4620      	mov	r0, r4
 8007196:	f000 fb8b 	bl	80078b0 <__lshift>
 800719a:	4631      	mov	r1, r6
 800719c:	4682      	mov	sl, r0
 800719e:	f000 fbf3 	bl	8007988 <__mcmp>
 80071a2:	2800      	cmp	r0, #0
 80071a4:	dc96      	bgt.n	80070d4 <_dtoa_r+0xabc>
 80071a6:	d102      	bne.n	80071ae <_dtoa_r+0xb96>
 80071a8:	f019 0f01 	tst.w	r9, #1
 80071ac:	d192      	bne.n	80070d4 <_dtoa_r+0xabc>
 80071ae:	462b      	mov	r3, r5
 80071b0:	461d      	mov	r5, r3
 80071b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071b6:	2a30      	cmp	r2, #48	; 0x30
 80071b8:	d0fa      	beq.n	80071b0 <_dtoa_r+0xb98>
 80071ba:	e6dd      	b.n	8006f78 <_dtoa_r+0x960>
 80071bc:	9a00      	ldr	r2, [sp, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d189      	bne.n	80070d6 <_dtoa_r+0xabe>
 80071c2:	f10b 0b01 	add.w	fp, fp, #1
 80071c6:	2331      	movs	r3, #49	; 0x31
 80071c8:	e796      	b.n	80070f8 <_dtoa_r+0xae0>
 80071ca:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <_dtoa_r+0xbdc>)
 80071cc:	f7ff ba99 	b.w	8006702 <_dtoa_r+0xea>
 80071d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f47f aa6d 	bne.w	80066b2 <_dtoa_r+0x9a>
 80071d8:	4b07      	ldr	r3, [pc, #28]	; (80071f8 <_dtoa_r+0xbe0>)
 80071da:	f7ff ba92 	b.w	8006702 <_dtoa_r+0xea>
 80071de:	9b01      	ldr	r3, [sp, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	dcb5      	bgt.n	8007150 <_dtoa_r+0xb38>
 80071e4:	9b07      	ldr	r3, [sp, #28]
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	f73f aeb1 	bgt.w	8006f4e <_dtoa_r+0x936>
 80071ec:	e7b0      	b.n	8007150 <_dtoa_r+0xb38>
 80071ee:	bf00      	nop
 80071f0:	08009dad 	.word	0x08009dad
 80071f4:	08009d08 	.word	0x08009d08
 80071f8:	08009d31 	.word	0x08009d31

080071fc <_free_r>:
 80071fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071fe:	2900      	cmp	r1, #0
 8007200:	d044      	beq.n	800728c <_free_r+0x90>
 8007202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007206:	9001      	str	r0, [sp, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	f1a1 0404 	sub.w	r4, r1, #4
 800720e:	bfb8      	it	lt
 8007210:	18e4      	addlt	r4, r4, r3
 8007212:	f000 f8e7 	bl	80073e4 <__malloc_lock>
 8007216:	4a1e      	ldr	r2, [pc, #120]	; (8007290 <_free_r+0x94>)
 8007218:	9801      	ldr	r0, [sp, #4]
 800721a:	6813      	ldr	r3, [r2, #0]
 800721c:	b933      	cbnz	r3, 800722c <_free_r+0x30>
 800721e:	6063      	str	r3, [r4, #4]
 8007220:	6014      	str	r4, [r2, #0]
 8007222:	b003      	add	sp, #12
 8007224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007228:	f000 b8e2 	b.w	80073f0 <__malloc_unlock>
 800722c:	42a3      	cmp	r3, r4
 800722e:	d908      	bls.n	8007242 <_free_r+0x46>
 8007230:	6825      	ldr	r5, [r4, #0]
 8007232:	1961      	adds	r1, r4, r5
 8007234:	428b      	cmp	r3, r1
 8007236:	bf01      	itttt	eq
 8007238:	6819      	ldreq	r1, [r3, #0]
 800723a:	685b      	ldreq	r3, [r3, #4]
 800723c:	1949      	addeq	r1, r1, r5
 800723e:	6021      	streq	r1, [r4, #0]
 8007240:	e7ed      	b.n	800721e <_free_r+0x22>
 8007242:	461a      	mov	r2, r3
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	b10b      	cbz	r3, 800724c <_free_r+0x50>
 8007248:	42a3      	cmp	r3, r4
 800724a:	d9fa      	bls.n	8007242 <_free_r+0x46>
 800724c:	6811      	ldr	r1, [r2, #0]
 800724e:	1855      	adds	r5, r2, r1
 8007250:	42a5      	cmp	r5, r4
 8007252:	d10b      	bne.n	800726c <_free_r+0x70>
 8007254:	6824      	ldr	r4, [r4, #0]
 8007256:	4421      	add	r1, r4
 8007258:	1854      	adds	r4, r2, r1
 800725a:	42a3      	cmp	r3, r4
 800725c:	6011      	str	r1, [r2, #0]
 800725e:	d1e0      	bne.n	8007222 <_free_r+0x26>
 8007260:	681c      	ldr	r4, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	6053      	str	r3, [r2, #4]
 8007266:	440c      	add	r4, r1
 8007268:	6014      	str	r4, [r2, #0]
 800726a:	e7da      	b.n	8007222 <_free_r+0x26>
 800726c:	d902      	bls.n	8007274 <_free_r+0x78>
 800726e:	230c      	movs	r3, #12
 8007270:	6003      	str	r3, [r0, #0]
 8007272:	e7d6      	b.n	8007222 <_free_r+0x26>
 8007274:	6825      	ldr	r5, [r4, #0]
 8007276:	1961      	adds	r1, r4, r5
 8007278:	428b      	cmp	r3, r1
 800727a:	bf04      	itt	eq
 800727c:	6819      	ldreq	r1, [r3, #0]
 800727e:	685b      	ldreq	r3, [r3, #4]
 8007280:	6063      	str	r3, [r4, #4]
 8007282:	bf04      	itt	eq
 8007284:	1949      	addeq	r1, r1, r5
 8007286:	6021      	streq	r1, [r4, #0]
 8007288:	6054      	str	r4, [r2, #4]
 800728a:	e7ca      	b.n	8007222 <_free_r+0x26>
 800728c:	b003      	add	sp, #12
 800728e:	bd30      	pop	{r4, r5, pc}
 8007290:	20000510 	.word	0x20000510

08007294 <malloc>:
 8007294:	4b02      	ldr	r3, [pc, #8]	; (80072a0 <malloc+0xc>)
 8007296:	4601      	mov	r1, r0
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	f000 b823 	b.w	80072e4 <_malloc_r>
 800729e:	bf00      	nop
 80072a0:	20000064 	.word	0x20000064

080072a4 <sbrk_aligned>:
 80072a4:	b570      	push	{r4, r5, r6, lr}
 80072a6:	4e0e      	ldr	r6, [pc, #56]	; (80072e0 <sbrk_aligned+0x3c>)
 80072a8:	460c      	mov	r4, r1
 80072aa:	6831      	ldr	r1, [r6, #0]
 80072ac:	4605      	mov	r5, r0
 80072ae:	b911      	cbnz	r1, 80072b6 <sbrk_aligned+0x12>
 80072b0:	f001 fe1a 	bl	8008ee8 <_sbrk_r>
 80072b4:	6030      	str	r0, [r6, #0]
 80072b6:	4621      	mov	r1, r4
 80072b8:	4628      	mov	r0, r5
 80072ba:	f001 fe15 	bl	8008ee8 <_sbrk_r>
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	d00a      	beq.n	80072d8 <sbrk_aligned+0x34>
 80072c2:	1cc4      	adds	r4, r0, #3
 80072c4:	f024 0403 	bic.w	r4, r4, #3
 80072c8:	42a0      	cmp	r0, r4
 80072ca:	d007      	beq.n	80072dc <sbrk_aligned+0x38>
 80072cc:	1a21      	subs	r1, r4, r0
 80072ce:	4628      	mov	r0, r5
 80072d0:	f001 fe0a 	bl	8008ee8 <_sbrk_r>
 80072d4:	3001      	adds	r0, #1
 80072d6:	d101      	bne.n	80072dc <sbrk_aligned+0x38>
 80072d8:	f04f 34ff 	mov.w	r4, #4294967295
 80072dc:	4620      	mov	r0, r4
 80072de:	bd70      	pop	{r4, r5, r6, pc}
 80072e0:	20000514 	.word	0x20000514

080072e4 <_malloc_r>:
 80072e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e8:	1ccd      	adds	r5, r1, #3
 80072ea:	f025 0503 	bic.w	r5, r5, #3
 80072ee:	3508      	adds	r5, #8
 80072f0:	2d0c      	cmp	r5, #12
 80072f2:	bf38      	it	cc
 80072f4:	250c      	movcc	r5, #12
 80072f6:	2d00      	cmp	r5, #0
 80072f8:	4607      	mov	r7, r0
 80072fa:	db01      	blt.n	8007300 <_malloc_r+0x1c>
 80072fc:	42a9      	cmp	r1, r5
 80072fe:	d905      	bls.n	800730c <_malloc_r+0x28>
 8007300:	230c      	movs	r3, #12
 8007302:	603b      	str	r3, [r7, #0]
 8007304:	2600      	movs	r6, #0
 8007306:	4630      	mov	r0, r6
 8007308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800730c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073e0 <_malloc_r+0xfc>
 8007310:	f000 f868 	bl	80073e4 <__malloc_lock>
 8007314:	f8d8 3000 	ldr.w	r3, [r8]
 8007318:	461c      	mov	r4, r3
 800731a:	bb5c      	cbnz	r4, 8007374 <_malloc_r+0x90>
 800731c:	4629      	mov	r1, r5
 800731e:	4638      	mov	r0, r7
 8007320:	f7ff ffc0 	bl	80072a4 <sbrk_aligned>
 8007324:	1c43      	adds	r3, r0, #1
 8007326:	4604      	mov	r4, r0
 8007328:	d155      	bne.n	80073d6 <_malloc_r+0xf2>
 800732a:	f8d8 4000 	ldr.w	r4, [r8]
 800732e:	4626      	mov	r6, r4
 8007330:	2e00      	cmp	r6, #0
 8007332:	d145      	bne.n	80073c0 <_malloc_r+0xdc>
 8007334:	2c00      	cmp	r4, #0
 8007336:	d048      	beq.n	80073ca <_malloc_r+0xe6>
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	4631      	mov	r1, r6
 800733c:	4638      	mov	r0, r7
 800733e:	eb04 0903 	add.w	r9, r4, r3
 8007342:	f001 fdd1 	bl	8008ee8 <_sbrk_r>
 8007346:	4581      	cmp	r9, r0
 8007348:	d13f      	bne.n	80073ca <_malloc_r+0xe6>
 800734a:	6821      	ldr	r1, [r4, #0]
 800734c:	1a6d      	subs	r5, r5, r1
 800734e:	4629      	mov	r1, r5
 8007350:	4638      	mov	r0, r7
 8007352:	f7ff ffa7 	bl	80072a4 <sbrk_aligned>
 8007356:	3001      	adds	r0, #1
 8007358:	d037      	beq.n	80073ca <_malloc_r+0xe6>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	442b      	add	r3, r5
 800735e:	6023      	str	r3, [r4, #0]
 8007360:	f8d8 3000 	ldr.w	r3, [r8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d038      	beq.n	80073da <_malloc_r+0xf6>
 8007368:	685a      	ldr	r2, [r3, #4]
 800736a:	42a2      	cmp	r2, r4
 800736c:	d12b      	bne.n	80073c6 <_malloc_r+0xe2>
 800736e:	2200      	movs	r2, #0
 8007370:	605a      	str	r2, [r3, #4]
 8007372:	e00f      	b.n	8007394 <_malloc_r+0xb0>
 8007374:	6822      	ldr	r2, [r4, #0]
 8007376:	1b52      	subs	r2, r2, r5
 8007378:	d41f      	bmi.n	80073ba <_malloc_r+0xd6>
 800737a:	2a0b      	cmp	r2, #11
 800737c:	d917      	bls.n	80073ae <_malloc_r+0xca>
 800737e:	1961      	adds	r1, r4, r5
 8007380:	42a3      	cmp	r3, r4
 8007382:	6025      	str	r5, [r4, #0]
 8007384:	bf18      	it	ne
 8007386:	6059      	strne	r1, [r3, #4]
 8007388:	6863      	ldr	r3, [r4, #4]
 800738a:	bf08      	it	eq
 800738c:	f8c8 1000 	streq.w	r1, [r8]
 8007390:	5162      	str	r2, [r4, r5]
 8007392:	604b      	str	r3, [r1, #4]
 8007394:	4638      	mov	r0, r7
 8007396:	f104 060b 	add.w	r6, r4, #11
 800739a:	f000 f829 	bl	80073f0 <__malloc_unlock>
 800739e:	f026 0607 	bic.w	r6, r6, #7
 80073a2:	1d23      	adds	r3, r4, #4
 80073a4:	1af2      	subs	r2, r6, r3
 80073a6:	d0ae      	beq.n	8007306 <_malloc_r+0x22>
 80073a8:	1b9b      	subs	r3, r3, r6
 80073aa:	50a3      	str	r3, [r4, r2]
 80073ac:	e7ab      	b.n	8007306 <_malloc_r+0x22>
 80073ae:	42a3      	cmp	r3, r4
 80073b0:	6862      	ldr	r2, [r4, #4]
 80073b2:	d1dd      	bne.n	8007370 <_malloc_r+0x8c>
 80073b4:	f8c8 2000 	str.w	r2, [r8]
 80073b8:	e7ec      	b.n	8007394 <_malloc_r+0xb0>
 80073ba:	4623      	mov	r3, r4
 80073bc:	6864      	ldr	r4, [r4, #4]
 80073be:	e7ac      	b.n	800731a <_malloc_r+0x36>
 80073c0:	4634      	mov	r4, r6
 80073c2:	6876      	ldr	r6, [r6, #4]
 80073c4:	e7b4      	b.n	8007330 <_malloc_r+0x4c>
 80073c6:	4613      	mov	r3, r2
 80073c8:	e7cc      	b.n	8007364 <_malloc_r+0x80>
 80073ca:	230c      	movs	r3, #12
 80073cc:	603b      	str	r3, [r7, #0]
 80073ce:	4638      	mov	r0, r7
 80073d0:	f000 f80e 	bl	80073f0 <__malloc_unlock>
 80073d4:	e797      	b.n	8007306 <_malloc_r+0x22>
 80073d6:	6025      	str	r5, [r4, #0]
 80073d8:	e7dc      	b.n	8007394 <_malloc_r+0xb0>
 80073da:	605b      	str	r3, [r3, #4]
 80073dc:	deff      	udf	#255	; 0xff
 80073de:	bf00      	nop
 80073e0:	20000510 	.word	0x20000510

080073e4 <__malloc_lock>:
 80073e4:	4801      	ldr	r0, [pc, #4]	; (80073ec <__malloc_lock+0x8>)
 80073e6:	f7ff b885 	b.w	80064f4 <__retarget_lock_acquire_recursive>
 80073ea:	bf00      	nop
 80073ec:	2000050c 	.word	0x2000050c

080073f0 <__malloc_unlock>:
 80073f0:	4801      	ldr	r0, [pc, #4]	; (80073f8 <__malloc_unlock+0x8>)
 80073f2:	f7ff b880 	b.w	80064f6 <__retarget_lock_release_recursive>
 80073f6:	bf00      	nop
 80073f8:	2000050c 	.word	0x2000050c

080073fc <_Balloc>:
 80073fc:	b570      	push	{r4, r5, r6, lr}
 80073fe:	69c6      	ldr	r6, [r0, #28]
 8007400:	4604      	mov	r4, r0
 8007402:	460d      	mov	r5, r1
 8007404:	b976      	cbnz	r6, 8007424 <_Balloc+0x28>
 8007406:	2010      	movs	r0, #16
 8007408:	f7ff ff44 	bl	8007294 <malloc>
 800740c:	4602      	mov	r2, r0
 800740e:	61e0      	str	r0, [r4, #28]
 8007410:	b920      	cbnz	r0, 800741c <_Balloc+0x20>
 8007412:	4b18      	ldr	r3, [pc, #96]	; (8007474 <_Balloc+0x78>)
 8007414:	4818      	ldr	r0, [pc, #96]	; (8007478 <_Balloc+0x7c>)
 8007416:	216b      	movs	r1, #107	; 0x6b
 8007418:	f001 fd8e 	bl	8008f38 <__assert_func>
 800741c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007420:	6006      	str	r6, [r0, #0]
 8007422:	60c6      	str	r6, [r0, #12]
 8007424:	69e6      	ldr	r6, [r4, #28]
 8007426:	68f3      	ldr	r3, [r6, #12]
 8007428:	b183      	cbz	r3, 800744c <_Balloc+0x50>
 800742a:	69e3      	ldr	r3, [r4, #28]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007432:	b9b8      	cbnz	r0, 8007464 <_Balloc+0x68>
 8007434:	2101      	movs	r1, #1
 8007436:	fa01 f605 	lsl.w	r6, r1, r5
 800743a:	1d72      	adds	r2, r6, #5
 800743c:	0092      	lsls	r2, r2, #2
 800743e:	4620      	mov	r0, r4
 8007440:	f001 fd98 	bl	8008f74 <_calloc_r>
 8007444:	b160      	cbz	r0, 8007460 <_Balloc+0x64>
 8007446:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800744a:	e00e      	b.n	800746a <_Balloc+0x6e>
 800744c:	2221      	movs	r2, #33	; 0x21
 800744e:	2104      	movs	r1, #4
 8007450:	4620      	mov	r0, r4
 8007452:	f001 fd8f 	bl	8008f74 <_calloc_r>
 8007456:	69e3      	ldr	r3, [r4, #28]
 8007458:	60f0      	str	r0, [r6, #12]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1e4      	bne.n	800742a <_Balloc+0x2e>
 8007460:	2000      	movs	r0, #0
 8007462:	bd70      	pop	{r4, r5, r6, pc}
 8007464:	6802      	ldr	r2, [r0, #0]
 8007466:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800746a:	2300      	movs	r3, #0
 800746c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007470:	e7f7      	b.n	8007462 <_Balloc+0x66>
 8007472:	bf00      	nop
 8007474:	08009d3e 	.word	0x08009d3e
 8007478:	08009dbe 	.word	0x08009dbe

0800747c <_Bfree>:
 800747c:	b570      	push	{r4, r5, r6, lr}
 800747e:	69c6      	ldr	r6, [r0, #28]
 8007480:	4605      	mov	r5, r0
 8007482:	460c      	mov	r4, r1
 8007484:	b976      	cbnz	r6, 80074a4 <_Bfree+0x28>
 8007486:	2010      	movs	r0, #16
 8007488:	f7ff ff04 	bl	8007294 <malloc>
 800748c:	4602      	mov	r2, r0
 800748e:	61e8      	str	r0, [r5, #28]
 8007490:	b920      	cbnz	r0, 800749c <_Bfree+0x20>
 8007492:	4b09      	ldr	r3, [pc, #36]	; (80074b8 <_Bfree+0x3c>)
 8007494:	4809      	ldr	r0, [pc, #36]	; (80074bc <_Bfree+0x40>)
 8007496:	218f      	movs	r1, #143	; 0x8f
 8007498:	f001 fd4e 	bl	8008f38 <__assert_func>
 800749c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074a0:	6006      	str	r6, [r0, #0]
 80074a2:	60c6      	str	r6, [r0, #12]
 80074a4:	b13c      	cbz	r4, 80074b6 <_Bfree+0x3a>
 80074a6:	69eb      	ldr	r3, [r5, #28]
 80074a8:	6862      	ldr	r2, [r4, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074b0:	6021      	str	r1, [r4, #0]
 80074b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074b6:	bd70      	pop	{r4, r5, r6, pc}
 80074b8:	08009d3e 	.word	0x08009d3e
 80074bc:	08009dbe 	.word	0x08009dbe

080074c0 <__multadd>:
 80074c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c4:	690d      	ldr	r5, [r1, #16]
 80074c6:	4607      	mov	r7, r0
 80074c8:	460c      	mov	r4, r1
 80074ca:	461e      	mov	r6, r3
 80074cc:	f101 0c14 	add.w	ip, r1, #20
 80074d0:	2000      	movs	r0, #0
 80074d2:	f8dc 3000 	ldr.w	r3, [ip]
 80074d6:	b299      	uxth	r1, r3
 80074d8:	fb02 6101 	mla	r1, r2, r1, r6
 80074dc:	0c1e      	lsrs	r6, r3, #16
 80074de:	0c0b      	lsrs	r3, r1, #16
 80074e0:	fb02 3306 	mla	r3, r2, r6, r3
 80074e4:	b289      	uxth	r1, r1
 80074e6:	3001      	adds	r0, #1
 80074e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80074ec:	4285      	cmp	r5, r0
 80074ee:	f84c 1b04 	str.w	r1, [ip], #4
 80074f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80074f6:	dcec      	bgt.n	80074d2 <__multadd+0x12>
 80074f8:	b30e      	cbz	r6, 800753e <__multadd+0x7e>
 80074fa:	68a3      	ldr	r3, [r4, #8]
 80074fc:	42ab      	cmp	r3, r5
 80074fe:	dc19      	bgt.n	8007534 <__multadd+0x74>
 8007500:	6861      	ldr	r1, [r4, #4]
 8007502:	4638      	mov	r0, r7
 8007504:	3101      	adds	r1, #1
 8007506:	f7ff ff79 	bl	80073fc <_Balloc>
 800750a:	4680      	mov	r8, r0
 800750c:	b928      	cbnz	r0, 800751a <__multadd+0x5a>
 800750e:	4602      	mov	r2, r0
 8007510:	4b0c      	ldr	r3, [pc, #48]	; (8007544 <__multadd+0x84>)
 8007512:	480d      	ldr	r0, [pc, #52]	; (8007548 <__multadd+0x88>)
 8007514:	21ba      	movs	r1, #186	; 0xba
 8007516:	f001 fd0f 	bl	8008f38 <__assert_func>
 800751a:	6922      	ldr	r2, [r4, #16]
 800751c:	3202      	adds	r2, #2
 800751e:	f104 010c 	add.w	r1, r4, #12
 8007522:	0092      	lsls	r2, r2, #2
 8007524:	300c      	adds	r0, #12
 8007526:	f001 fcef 	bl	8008f08 <memcpy>
 800752a:	4621      	mov	r1, r4
 800752c:	4638      	mov	r0, r7
 800752e:	f7ff ffa5 	bl	800747c <_Bfree>
 8007532:	4644      	mov	r4, r8
 8007534:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007538:	3501      	adds	r5, #1
 800753a:	615e      	str	r6, [r3, #20]
 800753c:	6125      	str	r5, [r4, #16]
 800753e:	4620      	mov	r0, r4
 8007540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007544:	08009dad 	.word	0x08009dad
 8007548:	08009dbe 	.word	0x08009dbe

0800754c <__s2b>:
 800754c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007550:	460c      	mov	r4, r1
 8007552:	4615      	mov	r5, r2
 8007554:	461f      	mov	r7, r3
 8007556:	2209      	movs	r2, #9
 8007558:	3308      	adds	r3, #8
 800755a:	4606      	mov	r6, r0
 800755c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007560:	2100      	movs	r1, #0
 8007562:	2201      	movs	r2, #1
 8007564:	429a      	cmp	r2, r3
 8007566:	db09      	blt.n	800757c <__s2b+0x30>
 8007568:	4630      	mov	r0, r6
 800756a:	f7ff ff47 	bl	80073fc <_Balloc>
 800756e:	b940      	cbnz	r0, 8007582 <__s2b+0x36>
 8007570:	4602      	mov	r2, r0
 8007572:	4b19      	ldr	r3, [pc, #100]	; (80075d8 <__s2b+0x8c>)
 8007574:	4819      	ldr	r0, [pc, #100]	; (80075dc <__s2b+0x90>)
 8007576:	21d3      	movs	r1, #211	; 0xd3
 8007578:	f001 fcde 	bl	8008f38 <__assert_func>
 800757c:	0052      	lsls	r2, r2, #1
 800757e:	3101      	adds	r1, #1
 8007580:	e7f0      	b.n	8007564 <__s2b+0x18>
 8007582:	9b08      	ldr	r3, [sp, #32]
 8007584:	6143      	str	r3, [r0, #20]
 8007586:	2d09      	cmp	r5, #9
 8007588:	f04f 0301 	mov.w	r3, #1
 800758c:	6103      	str	r3, [r0, #16]
 800758e:	dd16      	ble.n	80075be <__s2b+0x72>
 8007590:	f104 0909 	add.w	r9, r4, #9
 8007594:	46c8      	mov	r8, r9
 8007596:	442c      	add	r4, r5
 8007598:	f818 3b01 	ldrb.w	r3, [r8], #1
 800759c:	4601      	mov	r1, r0
 800759e:	3b30      	subs	r3, #48	; 0x30
 80075a0:	220a      	movs	r2, #10
 80075a2:	4630      	mov	r0, r6
 80075a4:	f7ff ff8c 	bl	80074c0 <__multadd>
 80075a8:	45a0      	cmp	r8, r4
 80075aa:	d1f5      	bne.n	8007598 <__s2b+0x4c>
 80075ac:	f1a5 0408 	sub.w	r4, r5, #8
 80075b0:	444c      	add	r4, r9
 80075b2:	1b2d      	subs	r5, r5, r4
 80075b4:	1963      	adds	r3, r4, r5
 80075b6:	42bb      	cmp	r3, r7
 80075b8:	db04      	blt.n	80075c4 <__s2b+0x78>
 80075ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075be:	340a      	adds	r4, #10
 80075c0:	2509      	movs	r5, #9
 80075c2:	e7f6      	b.n	80075b2 <__s2b+0x66>
 80075c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80075c8:	4601      	mov	r1, r0
 80075ca:	3b30      	subs	r3, #48	; 0x30
 80075cc:	220a      	movs	r2, #10
 80075ce:	4630      	mov	r0, r6
 80075d0:	f7ff ff76 	bl	80074c0 <__multadd>
 80075d4:	e7ee      	b.n	80075b4 <__s2b+0x68>
 80075d6:	bf00      	nop
 80075d8:	08009dad 	.word	0x08009dad
 80075dc:	08009dbe 	.word	0x08009dbe

080075e0 <__hi0bits>:
 80075e0:	0c03      	lsrs	r3, r0, #16
 80075e2:	041b      	lsls	r3, r3, #16
 80075e4:	b9d3      	cbnz	r3, 800761c <__hi0bits+0x3c>
 80075e6:	0400      	lsls	r0, r0, #16
 80075e8:	2310      	movs	r3, #16
 80075ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80075ee:	bf04      	itt	eq
 80075f0:	0200      	lsleq	r0, r0, #8
 80075f2:	3308      	addeq	r3, #8
 80075f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80075f8:	bf04      	itt	eq
 80075fa:	0100      	lsleq	r0, r0, #4
 80075fc:	3304      	addeq	r3, #4
 80075fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007602:	bf04      	itt	eq
 8007604:	0080      	lsleq	r0, r0, #2
 8007606:	3302      	addeq	r3, #2
 8007608:	2800      	cmp	r0, #0
 800760a:	db05      	blt.n	8007618 <__hi0bits+0x38>
 800760c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007610:	f103 0301 	add.w	r3, r3, #1
 8007614:	bf08      	it	eq
 8007616:	2320      	moveq	r3, #32
 8007618:	4618      	mov	r0, r3
 800761a:	4770      	bx	lr
 800761c:	2300      	movs	r3, #0
 800761e:	e7e4      	b.n	80075ea <__hi0bits+0xa>

08007620 <__lo0bits>:
 8007620:	6803      	ldr	r3, [r0, #0]
 8007622:	f013 0207 	ands.w	r2, r3, #7
 8007626:	d00c      	beq.n	8007642 <__lo0bits+0x22>
 8007628:	07d9      	lsls	r1, r3, #31
 800762a:	d422      	bmi.n	8007672 <__lo0bits+0x52>
 800762c:	079a      	lsls	r2, r3, #30
 800762e:	bf49      	itett	mi
 8007630:	085b      	lsrmi	r3, r3, #1
 8007632:	089b      	lsrpl	r3, r3, #2
 8007634:	6003      	strmi	r3, [r0, #0]
 8007636:	2201      	movmi	r2, #1
 8007638:	bf5c      	itt	pl
 800763a:	6003      	strpl	r3, [r0, #0]
 800763c:	2202      	movpl	r2, #2
 800763e:	4610      	mov	r0, r2
 8007640:	4770      	bx	lr
 8007642:	b299      	uxth	r1, r3
 8007644:	b909      	cbnz	r1, 800764a <__lo0bits+0x2a>
 8007646:	0c1b      	lsrs	r3, r3, #16
 8007648:	2210      	movs	r2, #16
 800764a:	b2d9      	uxtb	r1, r3
 800764c:	b909      	cbnz	r1, 8007652 <__lo0bits+0x32>
 800764e:	3208      	adds	r2, #8
 8007650:	0a1b      	lsrs	r3, r3, #8
 8007652:	0719      	lsls	r1, r3, #28
 8007654:	bf04      	itt	eq
 8007656:	091b      	lsreq	r3, r3, #4
 8007658:	3204      	addeq	r2, #4
 800765a:	0799      	lsls	r1, r3, #30
 800765c:	bf04      	itt	eq
 800765e:	089b      	lsreq	r3, r3, #2
 8007660:	3202      	addeq	r2, #2
 8007662:	07d9      	lsls	r1, r3, #31
 8007664:	d403      	bmi.n	800766e <__lo0bits+0x4e>
 8007666:	085b      	lsrs	r3, r3, #1
 8007668:	f102 0201 	add.w	r2, r2, #1
 800766c:	d003      	beq.n	8007676 <__lo0bits+0x56>
 800766e:	6003      	str	r3, [r0, #0]
 8007670:	e7e5      	b.n	800763e <__lo0bits+0x1e>
 8007672:	2200      	movs	r2, #0
 8007674:	e7e3      	b.n	800763e <__lo0bits+0x1e>
 8007676:	2220      	movs	r2, #32
 8007678:	e7e1      	b.n	800763e <__lo0bits+0x1e>
	...

0800767c <__i2b>:
 800767c:	b510      	push	{r4, lr}
 800767e:	460c      	mov	r4, r1
 8007680:	2101      	movs	r1, #1
 8007682:	f7ff febb 	bl	80073fc <_Balloc>
 8007686:	4602      	mov	r2, r0
 8007688:	b928      	cbnz	r0, 8007696 <__i2b+0x1a>
 800768a:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <__i2b+0x24>)
 800768c:	4805      	ldr	r0, [pc, #20]	; (80076a4 <__i2b+0x28>)
 800768e:	f240 1145 	movw	r1, #325	; 0x145
 8007692:	f001 fc51 	bl	8008f38 <__assert_func>
 8007696:	2301      	movs	r3, #1
 8007698:	6144      	str	r4, [r0, #20]
 800769a:	6103      	str	r3, [r0, #16]
 800769c:	bd10      	pop	{r4, pc}
 800769e:	bf00      	nop
 80076a0:	08009dad 	.word	0x08009dad
 80076a4:	08009dbe 	.word	0x08009dbe

080076a8 <__multiply>:
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	4691      	mov	r9, r2
 80076ae:	690a      	ldr	r2, [r1, #16]
 80076b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	bfb8      	it	lt
 80076b8:	460b      	movlt	r3, r1
 80076ba:	460c      	mov	r4, r1
 80076bc:	bfbc      	itt	lt
 80076be:	464c      	movlt	r4, r9
 80076c0:	4699      	movlt	r9, r3
 80076c2:	6927      	ldr	r7, [r4, #16]
 80076c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80076c8:	68a3      	ldr	r3, [r4, #8]
 80076ca:	6861      	ldr	r1, [r4, #4]
 80076cc:	eb07 060a 	add.w	r6, r7, sl
 80076d0:	42b3      	cmp	r3, r6
 80076d2:	b085      	sub	sp, #20
 80076d4:	bfb8      	it	lt
 80076d6:	3101      	addlt	r1, #1
 80076d8:	f7ff fe90 	bl	80073fc <_Balloc>
 80076dc:	b930      	cbnz	r0, 80076ec <__multiply+0x44>
 80076de:	4602      	mov	r2, r0
 80076e0:	4b44      	ldr	r3, [pc, #272]	; (80077f4 <__multiply+0x14c>)
 80076e2:	4845      	ldr	r0, [pc, #276]	; (80077f8 <__multiply+0x150>)
 80076e4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80076e8:	f001 fc26 	bl	8008f38 <__assert_func>
 80076ec:	f100 0514 	add.w	r5, r0, #20
 80076f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80076f4:	462b      	mov	r3, r5
 80076f6:	2200      	movs	r2, #0
 80076f8:	4543      	cmp	r3, r8
 80076fa:	d321      	bcc.n	8007740 <__multiply+0x98>
 80076fc:	f104 0314 	add.w	r3, r4, #20
 8007700:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007704:	f109 0314 	add.w	r3, r9, #20
 8007708:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800770c:	9202      	str	r2, [sp, #8]
 800770e:	1b3a      	subs	r2, r7, r4
 8007710:	3a15      	subs	r2, #21
 8007712:	f022 0203 	bic.w	r2, r2, #3
 8007716:	3204      	adds	r2, #4
 8007718:	f104 0115 	add.w	r1, r4, #21
 800771c:	428f      	cmp	r7, r1
 800771e:	bf38      	it	cc
 8007720:	2204      	movcc	r2, #4
 8007722:	9201      	str	r2, [sp, #4]
 8007724:	9a02      	ldr	r2, [sp, #8]
 8007726:	9303      	str	r3, [sp, #12]
 8007728:	429a      	cmp	r2, r3
 800772a:	d80c      	bhi.n	8007746 <__multiply+0x9e>
 800772c:	2e00      	cmp	r6, #0
 800772e:	dd03      	ble.n	8007738 <__multiply+0x90>
 8007730:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007734:	2b00      	cmp	r3, #0
 8007736:	d05b      	beq.n	80077f0 <__multiply+0x148>
 8007738:	6106      	str	r6, [r0, #16]
 800773a:	b005      	add	sp, #20
 800773c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007740:	f843 2b04 	str.w	r2, [r3], #4
 8007744:	e7d8      	b.n	80076f8 <__multiply+0x50>
 8007746:	f8b3 a000 	ldrh.w	sl, [r3]
 800774a:	f1ba 0f00 	cmp.w	sl, #0
 800774e:	d024      	beq.n	800779a <__multiply+0xf2>
 8007750:	f104 0e14 	add.w	lr, r4, #20
 8007754:	46a9      	mov	r9, r5
 8007756:	f04f 0c00 	mov.w	ip, #0
 800775a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800775e:	f8d9 1000 	ldr.w	r1, [r9]
 8007762:	fa1f fb82 	uxth.w	fp, r2
 8007766:	b289      	uxth	r1, r1
 8007768:	fb0a 110b 	mla	r1, sl, fp, r1
 800776c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007770:	f8d9 2000 	ldr.w	r2, [r9]
 8007774:	4461      	add	r1, ip
 8007776:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800777a:	fb0a c20b 	mla	r2, sl, fp, ip
 800777e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007782:	b289      	uxth	r1, r1
 8007784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007788:	4577      	cmp	r7, lr
 800778a:	f849 1b04 	str.w	r1, [r9], #4
 800778e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007792:	d8e2      	bhi.n	800775a <__multiply+0xb2>
 8007794:	9a01      	ldr	r2, [sp, #4]
 8007796:	f845 c002 	str.w	ip, [r5, r2]
 800779a:	9a03      	ldr	r2, [sp, #12]
 800779c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80077a0:	3304      	adds	r3, #4
 80077a2:	f1b9 0f00 	cmp.w	r9, #0
 80077a6:	d021      	beq.n	80077ec <__multiply+0x144>
 80077a8:	6829      	ldr	r1, [r5, #0]
 80077aa:	f104 0c14 	add.w	ip, r4, #20
 80077ae:	46ae      	mov	lr, r5
 80077b0:	f04f 0a00 	mov.w	sl, #0
 80077b4:	f8bc b000 	ldrh.w	fp, [ip]
 80077b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80077bc:	fb09 220b 	mla	r2, r9, fp, r2
 80077c0:	4452      	add	r2, sl
 80077c2:	b289      	uxth	r1, r1
 80077c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80077c8:	f84e 1b04 	str.w	r1, [lr], #4
 80077cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80077d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80077d4:	f8be 1000 	ldrh.w	r1, [lr]
 80077d8:	fb09 110a 	mla	r1, r9, sl, r1
 80077dc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80077e0:	4567      	cmp	r7, ip
 80077e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80077e6:	d8e5      	bhi.n	80077b4 <__multiply+0x10c>
 80077e8:	9a01      	ldr	r2, [sp, #4]
 80077ea:	50a9      	str	r1, [r5, r2]
 80077ec:	3504      	adds	r5, #4
 80077ee:	e799      	b.n	8007724 <__multiply+0x7c>
 80077f0:	3e01      	subs	r6, #1
 80077f2:	e79b      	b.n	800772c <__multiply+0x84>
 80077f4:	08009dad 	.word	0x08009dad
 80077f8:	08009dbe 	.word	0x08009dbe

080077fc <__pow5mult>:
 80077fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007800:	4615      	mov	r5, r2
 8007802:	f012 0203 	ands.w	r2, r2, #3
 8007806:	4606      	mov	r6, r0
 8007808:	460f      	mov	r7, r1
 800780a:	d007      	beq.n	800781c <__pow5mult+0x20>
 800780c:	4c25      	ldr	r4, [pc, #148]	; (80078a4 <__pow5mult+0xa8>)
 800780e:	3a01      	subs	r2, #1
 8007810:	2300      	movs	r3, #0
 8007812:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007816:	f7ff fe53 	bl	80074c0 <__multadd>
 800781a:	4607      	mov	r7, r0
 800781c:	10ad      	asrs	r5, r5, #2
 800781e:	d03d      	beq.n	800789c <__pow5mult+0xa0>
 8007820:	69f4      	ldr	r4, [r6, #28]
 8007822:	b97c      	cbnz	r4, 8007844 <__pow5mult+0x48>
 8007824:	2010      	movs	r0, #16
 8007826:	f7ff fd35 	bl	8007294 <malloc>
 800782a:	4602      	mov	r2, r0
 800782c:	61f0      	str	r0, [r6, #28]
 800782e:	b928      	cbnz	r0, 800783c <__pow5mult+0x40>
 8007830:	4b1d      	ldr	r3, [pc, #116]	; (80078a8 <__pow5mult+0xac>)
 8007832:	481e      	ldr	r0, [pc, #120]	; (80078ac <__pow5mult+0xb0>)
 8007834:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007838:	f001 fb7e 	bl	8008f38 <__assert_func>
 800783c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007840:	6004      	str	r4, [r0, #0]
 8007842:	60c4      	str	r4, [r0, #12]
 8007844:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007848:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800784c:	b94c      	cbnz	r4, 8007862 <__pow5mult+0x66>
 800784e:	f240 2171 	movw	r1, #625	; 0x271
 8007852:	4630      	mov	r0, r6
 8007854:	f7ff ff12 	bl	800767c <__i2b>
 8007858:	2300      	movs	r3, #0
 800785a:	f8c8 0008 	str.w	r0, [r8, #8]
 800785e:	4604      	mov	r4, r0
 8007860:	6003      	str	r3, [r0, #0]
 8007862:	f04f 0900 	mov.w	r9, #0
 8007866:	07eb      	lsls	r3, r5, #31
 8007868:	d50a      	bpl.n	8007880 <__pow5mult+0x84>
 800786a:	4639      	mov	r1, r7
 800786c:	4622      	mov	r2, r4
 800786e:	4630      	mov	r0, r6
 8007870:	f7ff ff1a 	bl	80076a8 <__multiply>
 8007874:	4639      	mov	r1, r7
 8007876:	4680      	mov	r8, r0
 8007878:	4630      	mov	r0, r6
 800787a:	f7ff fdff 	bl	800747c <_Bfree>
 800787e:	4647      	mov	r7, r8
 8007880:	106d      	asrs	r5, r5, #1
 8007882:	d00b      	beq.n	800789c <__pow5mult+0xa0>
 8007884:	6820      	ldr	r0, [r4, #0]
 8007886:	b938      	cbnz	r0, 8007898 <__pow5mult+0x9c>
 8007888:	4622      	mov	r2, r4
 800788a:	4621      	mov	r1, r4
 800788c:	4630      	mov	r0, r6
 800788e:	f7ff ff0b 	bl	80076a8 <__multiply>
 8007892:	6020      	str	r0, [r4, #0]
 8007894:	f8c0 9000 	str.w	r9, [r0]
 8007898:	4604      	mov	r4, r0
 800789a:	e7e4      	b.n	8007866 <__pow5mult+0x6a>
 800789c:	4638      	mov	r0, r7
 800789e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078a2:	bf00      	nop
 80078a4:	08009f08 	.word	0x08009f08
 80078a8:	08009d3e 	.word	0x08009d3e
 80078ac:	08009dbe 	.word	0x08009dbe

080078b0 <__lshift>:
 80078b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b4:	460c      	mov	r4, r1
 80078b6:	6849      	ldr	r1, [r1, #4]
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078be:	68a3      	ldr	r3, [r4, #8]
 80078c0:	4607      	mov	r7, r0
 80078c2:	4691      	mov	r9, r2
 80078c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078c8:	f108 0601 	add.w	r6, r8, #1
 80078cc:	42b3      	cmp	r3, r6
 80078ce:	db0b      	blt.n	80078e8 <__lshift+0x38>
 80078d0:	4638      	mov	r0, r7
 80078d2:	f7ff fd93 	bl	80073fc <_Balloc>
 80078d6:	4605      	mov	r5, r0
 80078d8:	b948      	cbnz	r0, 80078ee <__lshift+0x3e>
 80078da:	4602      	mov	r2, r0
 80078dc:	4b28      	ldr	r3, [pc, #160]	; (8007980 <__lshift+0xd0>)
 80078de:	4829      	ldr	r0, [pc, #164]	; (8007984 <__lshift+0xd4>)
 80078e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80078e4:	f001 fb28 	bl	8008f38 <__assert_func>
 80078e8:	3101      	adds	r1, #1
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	e7ee      	b.n	80078cc <__lshift+0x1c>
 80078ee:	2300      	movs	r3, #0
 80078f0:	f100 0114 	add.w	r1, r0, #20
 80078f4:	f100 0210 	add.w	r2, r0, #16
 80078f8:	4618      	mov	r0, r3
 80078fa:	4553      	cmp	r3, sl
 80078fc:	db33      	blt.n	8007966 <__lshift+0xb6>
 80078fe:	6920      	ldr	r0, [r4, #16]
 8007900:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007904:	f104 0314 	add.w	r3, r4, #20
 8007908:	f019 091f 	ands.w	r9, r9, #31
 800790c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007910:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007914:	d02b      	beq.n	800796e <__lshift+0xbe>
 8007916:	f1c9 0e20 	rsb	lr, r9, #32
 800791a:	468a      	mov	sl, r1
 800791c:	2200      	movs	r2, #0
 800791e:	6818      	ldr	r0, [r3, #0]
 8007920:	fa00 f009 	lsl.w	r0, r0, r9
 8007924:	4310      	orrs	r0, r2
 8007926:	f84a 0b04 	str.w	r0, [sl], #4
 800792a:	f853 2b04 	ldr.w	r2, [r3], #4
 800792e:	459c      	cmp	ip, r3
 8007930:	fa22 f20e 	lsr.w	r2, r2, lr
 8007934:	d8f3      	bhi.n	800791e <__lshift+0x6e>
 8007936:	ebac 0304 	sub.w	r3, ip, r4
 800793a:	3b15      	subs	r3, #21
 800793c:	f023 0303 	bic.w	r3, r3, #3
 8007940:	3304      	adds	r3, #4
 8007942:	f104 0015 	add.w	r0, r4, #21
 8007946:	4584      	cmp	ip, r0
 8007948:	bf38      	it	cc
 800794a:	2304      	movcc	r3, #4
 800794c:	50ca      	str	r2, [r1, r3]
 800794e:	b10a      	cbz	r2, 8007954 <__lshift+0xa4>
 8007950:	f108 0602 	add.w	r6, r8, #2
 8007954:	3e01      	subs	r6, #1
 8007956:	4638      	mov	r0, r7
 8007958:	612e      	str	r6, [r5, #16]
 800795a:	4621      	mov	r1, r4
 800795c:	f7ff fd8e 	bl	800747c <_Bfree>
 8007960:	4628      	mov	r0, r5
 8007962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007966:	f842 0f04 	str.w	r0, [r2, #4]!
 800796a:	3301      	adds	r3, #1
 800796c:	e7c5      	b.n	80078fa <__lshift+0x4a>
 800796e:	3904      	subs	r1, #4
 8007970:	f853 2b04 	ldr.w	r2, [r3], #4
 8007974:	f841 2f04 	str.w	r2, [r1, #4]!
 8007978:	459c      	cmp	ip, r3
 800797a:	d8f9      	bhi.n	8007970 <__lshift+0xc0>
 800797c:	e7ea      	b.n	8007954 <__lshift+0xa4>
 800797e:	bf00      	nop
 8007980:	08009dad 	.word	0x08009dad
 8007984:	08009dbe 	.word	0x08009dbe

08007988 <__mcmp>:
 8007988:	b530      	push	{r4, r5, lr}
 800798a:	6902      	ldr	r2, [r0, #16]
 800798c:	690c      	ldr	r4, [r1, #16]
 800798e:	1b12      	subs	r2, r2, r4
 8007990:	d10e      	bne.n	80079b0 <__mcmp+0x28>
 8007992:	f100 0314 	add.w	r3, r0, #20
 8007996:	3114      	adds	r1, #20
 8007998:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800799c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80079a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80079a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80079a8:	42a5      	cmp	r5, r4
 80079aa:	d003      	beq.n	80079b4 <__mcmp+0x2c>
 80079ac:	d305      	bcc.n	80079ba <__mcmp+0x32>
 80079ae:	2201      	movs	r2, #1
 80079b0:	4610      	mov	r0, r2
 80079b2:	bd30      	pop	{r4, r5, pc}
 80079b4:	4283      	cmp	r3, r0
 80079b6:	d3f3      	bcc.n	80079a0 <__mcmp+0x18>
 80079b8:	e7fa      	b.n	80079b0 <__mcmp+0x28>
 80079ba:	f04f 32ff 	mov.w	r2, #4294967295
 80079be:	e7f7      	b.n	80079b0 <__mcmp+0x28>

080079c0 <__mdiff>:
 80079c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c4:	460c      	mov	r4, r1
 80079c6:	4606      	mov	r6, r0
 80079c8:	4611      	mov	r1, r2
 80079ca:	4620      	mov	r0, r4
 80079cc:	4690      	mov	r8, r2
 80079ce:	f7ff ffdb 	bl	8007988 <__mcmp>
 80079d2:	1e05      	subs	r5, r0, #0
 80079d4:	d110      	bne.n	80079f8 <__mdiff+0x38>
 80079d6:	4629      	mov	r1, r5
 80079d8:	4630      	mov	r0, r6
 80079da:	f7ff fd0f 	bl	80073fc <_Balloc>
 80079de:	b930      	cbnz	r0, 80079ee <__mdiff+0x2e>
 80079e0:	4b3a      	ldr	r3, [pc, #232]	; (8007acc <__mdiff+0x10c>)
 80079e2:	4602      	mov	r2, r0
 80079e4:	f240 2137 	movw	r1, #567	; 0x237
 80079e8:	4839      	ldr	r0, [pc, #228]	; (8007ad0 <__mdiff+0x110>)
 80079ea:	f001 faa5 	bl	8008f38 <__assert_func>
 80079ee:	2301      	movs	r3, #1
 80079f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f8:	bfa4      	itt	ge
 80079fa:	4643      	movge	r3, r8
 80079fc:	46a0      	movge	r8, r4
 80079fe:	4630      	mov	r0, r6
 8007a00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a04:	bfa6      	itte	ge
 8007a06:	461c      	movge	r4, r3
 8007a08:	2500      	movge	r5, #0
 8007a0a:	2501      	movlt	r5, #1
 8007a0c:	f7ff fcf6 	bl	80073fc <_Balloc>
 8007a10:	b920      	cbnz	r0, 8007a1c <__mdiff+0x5c>
 8007a12:	4b2e      	ldr	r3, [pc, #184]	; (8007acc <__mdiff+0x10c>)
 8007a14:	4602      	mov	r2, r0
 8007a16:	f240 2145 	movw	r1, #581	; 0x245
 8007a1a:	e7e5      	b.n	80079e8 <__mdiff+0x28>
 8007a1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a20:	6926      	ldr	r6, [r4, #16]
 8007a22:	60c5      	str	r5, [r0, #12]
 8007a24:	f104 0914 	add.w	r9, r4, #20
 8007a28:	f108 0514 	add.w	r5, r8, #20
 8007a2c:	f100 0e14 	add.w	lr, r0, #20
 8007a30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007a34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a38:	f108 0210 	add.w	r2, r8, #16
 8007a3c:	46f2      	mov	sl, lr
 8007a3e:	2100      	movs	r1, #0
 8007a40:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a48:	fa11 f88b 	uxtah	r8, r1, fp
 8007a4c:	b299      	uxth	r1, r3
 8007a4e:	0c1b      	lsrs	r3, r3, #16
 8007a50:	eba8 0801 	sub.w	r8, r8, r1
 8007a54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a58:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a5c:	fa1f f888 	uxth.w	r8, r8
 8007a60:	1419      	asrs	r1, r3, #16
 8007a62:	454e      	cmp	r6, r9
 8007a64:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a68:	f84a 3b04 	str.w	r3, [sl], #4
 8007a6c:	d8e8      	bhi.n	8007a40 <__mdiff+0x80>
 8007a6e:	1b33      	subs	r3, r6, r4
 8007a70:	3b15      	subs	r3, #21
 8007a72:	f023 0303 	bic.w	r3, r3, #3
 8007a76:	3304      	adds	r3, #4
 8007a78:	3415      	adds	r4, #21
 8007a7a:	42a6      	cmp	r6, r4
 8007a7c:	bf38      	it	cc
 8007a7e:	2304      	movcc	r3, #4
 8007a80:	441d      	add	r5, r3
 8007a82:	4473      	add	r3, lr
 8007a84:	469e      	mov	lr, r3
 8007a86:	462e      	mov	r6, r5
 8007a88:	4566      	cmp	r6, ip
 8007a8a:	d30e      	bcc.n	8007aaa <__mdiff+0xea>
 8007a8c:	f10c 0203 	add.w	r2, ip, #3
 8007a90:	1b52      	subs	r2, r2, r5
 8007a92:	f022 0203 	bic.w	r2, r2, #3
 8007a96:	3d03      	subs	r5, #3
 8007a98:	45ac      	cmp	ip, r5
 8007a9a:	bf38      	it	cc
 8007a9c:	2200      	movcc	r2, #0
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007aa4:	b17a      	cbz	r2, 8007ac6 <__mdiff+0x106>
 8007aa6:	6107      	str	r7, [r0, #16]
 8007aa8:	e7a4      	b.n	80079f4 <__mdiff+0x34>
 8007aaa:	f856 8b04 	ldr.w	r8, [r6], #4
 8007aae:	fa11 f288 	uxtah	r2, r1, r8
 8007ab2:	1414      	asrs	r4, r2, #16
 8007ab4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ab8:	b292      	uxth	r2, r2
 8007aba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007abe:	f84e 2b04 	str.w	r2, [lr], #4
 8007ac2:	1421      	asrs	r1, r4, #16
 8007ac4:	e7e0      	b.n	8007a88 <__mdiff+0xc8>
 8007ac6:	3f01      	subs	r7, #1
 8007ac8:	e7ea      	b.n	8007aa0 <__mdiff+0xe0>
 8007aca:	bf00      	nop
 8007acc:	08009dad 	.word	0x08009dad
 8007ad0:	08009dbe 	.word	0x08009dbe

08007ad4 <__ulp>:
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	ed8d 0b00 	vstr	d0, [sp]
 8007ada:	9a01      	ldr	r2, [sp, #4]
 8007adc:	4b0f      	ldr	r3, [pc, #60]	; (8007b1c <__ulp+0x48>)
 8007ade:	4013      	ands	r3, r2
 8007ae0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	dc08      	bgt.n	8007afa <__ulp+0x26>
 8007ae8:	425b      	negs	r3, r3
 8007aea:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007aee:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007af2:	da04      	bge.n	8007afe <__ulp+0x2a>
 8007af4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007af8:	4113      	asrs	r3, r2
 8007afa:	2200      	movs	r2, #0
 8007afc:	e008      	b.n	8007b10 <__ulp+0x3c>
 8007afe:	f1a2 0314 	sub.w	r3, r2, #20
 8007b02:	2b1e      	cmp	r3, #30
 8007b04:	bfda      	itte	le
 8007b06:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007b0a:	40da      	lsrle	r2, r3
 8007b0c:	2201      	movgt	r2, #1
 8007b0e:	2300      	movs	r3, #0
 8007b10:	4619      	mov	r1, r3
 8007b12:	4610      	mov	r0, r2
 8007b14:	ec41 0b10 	vmov	d0, r0, r1
 8007b18:	b002      	add	sp, #8
 8007b1a:	4770      	bx	lr
 8007b1c:	7ff00000 	.word	0x7ff00000

08007b20 <__b2d>:
 8007b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b24:	6906      	ldr	r6, [r0, #16]
 8007b26:	f100 0814 	add.w	r8, r0, #20
 8007b2a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007b2e:	1f37      	subs	r7, r6, #4
 8007b30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007b34:	4610      	mov	r0, r2
 8007b36:	f7ff fd53 	bl	80075e0 <__hi0bits>
 8007b3a:	f1c0 0320 	rsb	r3, r0, #32
 8007b3e:	280a      	cmp	r0, #10
 8007b40:	600b      	str	r3, [r1, #0]
 8007b42:	491b      	ldr	r1, [pc, #108]	; (8007bb0 <__b2d+0x90>)
 8007b44:	dc15      	bgt.n	8007b72 <__b2d+0x52>
 8007b46:	f1c0 0c0b 	rsb	ip, r0, #11
 8007b4a:	fa22 f30c 	lsr.w	r3, r2, ip
 8007b4e:	45b8      	cmp	r8, r7
 8007b50:	ea43 0501 	orr.w	r5, r3, r1
 8007b54:	bf34      	ite	cc
 8007b56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007b5a:	2300      	movcs	r3, #0
 8007b5c:	3015      	adds	r0, #21
 8007b5e:	fa02 f000 	lsl.w	r0, r2, r0
 8007b62:	fa23 f30c 	lsr.w	r3, r3, ip
 8007b66:	4303      	orrs	r3, r0
 8007b68:	461c      	mov	r4, r3
 8007b6a:	ec45 4b10 	vmov	d0, r4, r5
 8007b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b72:	45b8      	cmp	r8, r7
 8007b74:	bf3a      	itte	cc
 8007b76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007b7a:	f1a6 0708 	subcc.w	r7, r6, #8
 8007b7e:	2300      	movcs	r3, #0
 8007b80:	380b      	subs	r0, #11
 8007b82:	d012      	beq.n	8007baa <__b2d+0x8a>
 8007b84:	f1c0 0120 	rsb	r1, r0, #32
 8007b88:	fa23 f401 	lsr.w	r4, r3, r1
 8007b8c:	4082      	lsls	r2, r0
 8007b8e:	4322      	orrs	r2, r4
 8007b90:	4547      	cmp	r7, r8
 8007b92:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007b96:	bf8c      	ite	hi
 8007b98:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007b9c:	2200      	movls	r2, #0
 8007b9e:	4083      	lsls	r3, r0
 8007ba0:	40ca      	lsrs	r2, r1
 8007ba2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	e7de      	b.n	8007b68 <__b2d+0x48>
 8007baa:	ea42 0501 	orr.w	r5, r2, r1
 8007bae:	e7db      	b.n	8007b68 <__b2d+0x48>
 8007bb0:	3ff00000 	.word	0x3ff00000

08007bb4 <__d2b>:
 8007bb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bb8:	460f      	mov	r7, r1
 8007bba:	2101      	movs	r1, #1
 8007bbc:	ec59 8b10 	vmov	r8, r9, d0
 8007bc0:	4616      	mov	r6, r2
 8007bc2:	f7ff fc1b 	bl	80073fc <_Balloc>
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	b930      	cbnz	r0, 8007bd8 <__d2b+0x24>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	4b24      	ldr	r3, [pc, #144]	; (8007c60 <__d2b+0xac>)
 8007bce:	4825      	ldr	r0, [pc, #148]	; (8007c64 <__d2b+0xb0>)
 8007bd0:	f240 310f 	movw	r1, #783	; 0x30f
 8007bd4:	f001 f9b0 	bl	8008f38 <__assert_func>
 8007bd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007bdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007be0:	bb2d      	cbnz	r5, 8007c2e <__d2b+0x7a>
 8007be2:	9301      	str	r3, [sp, #4]
 8007be4:	f1b8 0300 	subs.w	r3, r8, #0
 8007be8:	d026      	beq.n	8007c38 <__d2b+0x84>
 8007bea:	4668      	mov	r0, sp
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	f7ff fd17 	bl	8007620 <__lo0bits>
 8007bf2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007bf6:	b1e8      	cbz	r0, 8007c34 <__d2b+0x80>
 8007bf8:	f1c0 0320 	rsb	r3, r0, #32
 8007bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007c00:	430b      	orrs	r3, r1
 8007c02:	40c2      	lsrs	r2, r0
 8007c04:	6163      	str	r3, [r4, #20]
 8007c06:	9201      	str	r2, [sp, #4]
 8007c08:	9b01      	ldr	r3, [sp, #4]
 8007c0a:	61a3      	str	r3, [r4, #24]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	bf14      	ite	ne
 8007c10:	2202      	movne	r2, #2
 8007c12:	2201      	moveq	r2, #1
 8007c14:	6122      	str	r2, [r4, #16]
 8007c16:	b1bd      	cbz	r5, 8007c48 <__d2b+0x94>
 8007c18:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c1c:	4405      	add	r5, r0
 8007c1e:	603d      	str	r5, [r7, #0]
 8007c20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c24:	6030      	str	r0, [r6, #0]
 8007c26:	4620      	mov	r0, r4
 8007c28:	b003      	add	sp, #12
 8007c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c32:	e7d6      	b.n	8007be2 <__d2b+0x2e>
 8007c34:	6161      	str	r1, [r4, #20]
 8007c36:	e7e7      	b.n	8007c08 <__d2b+0x54>
 8007c38:	a801      	add	r0, sp, #4
 8007c3a:	f7ff fcf1 	bl	8007620 <__lo0bits>
 8007c3e:	9b01      	ldr	r3, [sp, #4]
 8007c40:	6163      	str	r3, [r4, #20]
 8007c42:	3020      	adds	r0, #32
 8007c44:	2201      	movs	r2, #1
 8007c46:	e7e5      	b.n	8007c14 <__d2b+0x60>
 8007c48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c50:	6038      	str	r0, [r7, #0]
 8007c52:	6918      	ldr	r0, [r3, #16]
 8007c54:	f7ff fcc4 	bl	80075e0 <__hi0bits>
 8007c58:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c5c:	e7e2      	b.n	8007c24 <__d2b+0x70>
 8007c5e:	bf00      	nop
 8007c60:	08009dad 	.word	0x08009dad
 8007c64:	08009dbe 	.word	0x08009dbe

08007c68 <__ratio>:
 8007c68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6c:	4688      	mov	r8, r1
 8007c6e:	4669      	mov	r1, sp
 8007c70:	4681      	mov	r9, r0
 8007c72:	f7ff ff55 	bl	8007b20 <__b2d>
 8007c76:	a901      	add	r1, sp, #4
 8007c78:	4640      	mov	r0, r8
 8007c7a:	ec55 4b10 	vmov	r4, r5, d0
 8007c7e:	f7ff ff4f 	bl	8007b20 <__b2d>
 8007c82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c86:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007c8a:	eba3 0c02 	sub.w	ip, r3, r2
 8007c8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007c92:	1a9b      	subs	r3, r3, r2
 8007c94:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007c98:	ec51 0b10 	vmov	r0, r1, d0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	bfd6      	itet	le
 8007ca0:	460a      	movle	r2, r1
 8007ca2:	462a      	movgt	r2, r5
 8007ca4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007ca8:	468b      	mov	fp, r1
 8007caa:	462f      	mov	r7, r5
 8007cac:	bfd4      	ite	le
 8007cae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007cb2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	ee10 2a10 	vmov	r2, s0
 8007cbc:	465b      	mov	r3, fp
 8007cbe:	4639      	mov	r1, r7
 8007cc0:	f7f8 fdc4 	bl	800084c <__aeabi_ddiv>
 8007cc4:	ec41 0b10 	vmov	d0, r0, r1
 8007cc8:	b003      	add	sp, #12
 8007cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007cce <__copybits>:
 8007cce:	3901      	subs	r1, #1
 8007cd0:	b570      	push	{r4, r5, r6, lr}
 8007cd2:	1149      	asrs	r1, r1, #5
 8007cd4:	6914      	ldr	r4, [r2, #16]
 8007cd6:	3101      	adds	r1, #1
 8007cd8:	f102 0314 	add.w	r3, r2, #20
 8007cdc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ce0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007ce4:	1f05      	subs	r5, r0, #4
 8007ce6:	42a3      	cmp	r3, r4
 8007ce8:	d30c      	bcc.n	8007d04 <__copybits+0x36>
 8007cea:	1aa3      	subs	r3, r4, r2
 8007cec:	3b11      	subs	r3, #17
 8007cee:	f023 0303 	bic.w	r3, r3, #3
 8007cf2:	3211      	adds	r2, #17
 8007cf4:	42a2      	cmp	r2, r4
 8007cf6:	bf88      	it	hi
 8007cf8:	2300      	movhi	r3, #0
 8007cfa:	4418      	add	r0, r3
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	4288      	cmp	r0, r1
 8007d00:	d305      	bcc.n	8007d0e <__copybits+0x40>
 8007d02:	bd70      	pop	{r4, r5, r6, pc}
 8007d04:	f853 6b04 	ldr.w	r6, [r3], #4
 8007d08:	f845 6f04 	str.w	r6, [r5, #4]!
 8007d0c:	e7eb      	b.n	8007ce6 <__copybits+0x18>
 8007d0e:	f840 3b04 	str.w	r3, [r0], #4
 8007d12:	e7f4      	b.n	8007cfe <__copybits+0x30>

08007d14 <__any_on>:
 8007d14:	f100 0214 	add.w	r2, r0, #20
 8007d18:	6900      	ldr	r0, [r0, #16]
 8007d1a:	114b      	asrs	r3, r1, #5
 8007d1c:	4298      	cmp	r0, r3
 8007d1e:	b510      	push	{r4, lr}
 8007d20:	db11      	blt.n	8007d46 <__any_on+0x32>
 8007d22:	dd0a      	ble.n	8007d3a <__any_on+0x26>
 8007d24:	f011 011f 	ands.w	r1, r1, #31
 8007d28:	d007      	beq.n	8007d3a <__any_on+0x26>
 8007d2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007d2e:	fa24 f001 	lsr.w	r0, r4, r1
 8007d32:	fa00 f101 	lsl.w	r1, r0, r1
 8007d36:	428c      	cmp	r4, r1
 8007d38:	d10b      	bne.n	8007d52 <__any_on+0x3e>
 8007d3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d803      	bhi.n	8007d4a <__any_on+0x36>
 8007d42:	2000      	movs	r0, #0
 8007d44:	bd10      	pop	{r4, pc}
 8007d46:	4603      	mov	r3, r0
 8007d48:	e7f7      	b.n	8007d3a <__any_on+0x26>
 8007d4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d4e:	2900      	cmp	r1, #0
 8007d50:	d0f5      	beq.n	8007d3e <__any_on+0x2a>
 8007d52:	2001      	movs	r0, #1
 8007d54:	e7f6      	b.n	8007d44 <__any_on+0x30>

08007d56 <sulp>:
 8007d56:	b570      	push	{r4, r5, r6, lr}
 8007d58:	4604      	mov	r4, r0
 8007d5a:	460d      	mov	r5, r1
 8007d5c:	ec45 4b10 	vmov	d0, r4, r5
 8007d60:	4616      	mov	r6, r2
 8007d62:	f7ff feb7 	bl	8007ad4 <__ulp>
 8007d66:	ec51 0b10 	vmov	r0, r1, d0
 8007d6a:	b17e      	cbz	r6, 8007d8c <sulp+0x36>
 8007d6c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007d70:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	dd09      	ble.n	8007d8c <sulp+0x36>
 8007d78:	051b      	lsls	r3, r3, #20
 8007d7a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007d7e:	2400      	movs	r4, #0
 8007d80:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007d84:	4622      	mov	r2, r4
 8007d86:	462b      	mov	r3, r5
 8007d88:	f7f8 fc36 	bl	80005f8 <__aeabi_dmul>
 8007d8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d90 <_strtod_l>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	ed2d 8b02 	vpush	{d8}
 8007d98:	b09b      	sub	sp, #108	; 0x6c
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	9213      	str	r2, [sp, #76]	; 0x4c
 8007d9e:	2200      	movs	r2, #0
 8007da0:	9216      	str	r2, [sp, #88]	; 0x58
 8007da2:	460d      	mov	r5, r1
 8007da4:	f04f 0800 	mov.w	r8, #0
 8007da8:	f04f 0900 	mov.w	r9, #0
 8007dac:	460a      	mov	r2, r1
 8007dae:	9215      	str	r2, [sp, #84]	; 0x54
 8007db0:	7811      	ldrb	r1, [r2, #0]
 8007db2:	292b      	cmp	r1, #43	; 0x2b
 8007db4:	d04c      	beq.n	8007e50 <_strtod_l+0xc0>
 8007db6:	d83a      	bhi.n	8007e2e <_strtod_l+0x9e>
 8007db8:	290d      	cmp	r1, #13
 8007dba:	d834      	bhi.n	8007e26 <_strtod_l+0x96>
 8007dbc:	2908      	cmp	r1, #8
 8007dbe:	d834      	bhi.n	8007e2a <_strtod_l+0x9a>
 8007dc0:	2900      	cmp	r1, #0
 8007dc2:	d03d      	beq.n	8007e40 <_strtod_l+0xb0>
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	920a      	str	r2, [sp, #40]	; 0x28
 8007dc8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007dca:	7832      	ldrb	r2, [r6, #0]
 8007dcc:	2a30      	cmp	r2, #48	; 0x30
 8007dce:	f040 80b4 	bne.w	8007f3a <_strtod_l+0x1aa>
 8007dd2:	7872      	ldrb	r2, [r6, #1]
 8007dd4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007dd8:	2a58      	cmp	r2, #88	; 0x58
 8007dda:	d170      	bne.n	8007ebe <_strtod_l+0x12e>
 8007ddc:	9302      	str	r3, [sp, #8]
 8007dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de0:	9301      	str	r3, [sp, #4]
 8007de2:	ab16      	add	r3, sp, #88	; 0x58
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	4a8e      	ldr	r2, [pc, #568]	; (8008020 <_strtod_l+0x290>)
 8007de8:	ab17      	add	r3, sp, #92	; 0x5c
 8007dea:	a915      	add	r1, sp, #84	; 0x54
 8007dec:	4620      	mov	r0, r4
 8007dee:	f001 f93f 	bl	8009070 <__gethex>
 8007df2:	f010 070f 	ands.w	r7, r0, #15
 8007df6:	4605      	mov	r5, r0
 8007df8:	d005      	beq.n	8007e06 <_strtod_l+0x76>
 8007dfa:	2f06      	cmp	r7, #6
 8007dfc:	d12a      	bne.n	8007e54 <_strtod_l+0xc4>
 8007dfe:	3601      	adds	r6, #1
 8007e00:	2300      	movs	r3, #0
 8007e02:	9615      	str	r6, [sp, #84]	; 0x54
 8007e04:	930a      	str	r3, [sp, #40]	; 0x28
 8007e06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f040 857f 	bne.w	800890c <_strtod_l+0xb7c>
 8007e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e10:	b1db      	cbz	r3, 8007e4a <_strtod_l+0xba>
 8007e12:	4642      	mov	r2, r8
 8007e14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007e18:	ec43 2b10 	vmov	d0, r2, r3
 8007e1c:	b01b      	add	sp, #108	; 0x6c
 8007e1e:	ecbd 8b02 	vpop	{d8}
 8007e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e26:	2920      	cmp	r1, #32
 8007e28:	d1cc      	bne.n	8007dc4 <_strtod_l+0x34>
 8007e2a:	3201      	adds	r2, #1
 8007e2c:	e7bf      	b.n	8007dae <_strtod_l+0x1e>
 8007e2e:	292d      	cmp	r1, #45	; 0x2d
 8007e30:	d1c8      	bne.n	8007dc4 <_strtod_l+0x34>
 8007e32:	2101      	movs	r1, #1
 8007e34:	910a      	str	r1, [sp, #40]	; 0x28
 8007e36:	1c51      	adds	r1, r2, #1
 8007e38:	9115      	str	r1, [sp, #84]	; 0x54
 8007e3a:	7852      	ldrb	r2, [r2, #1]
 8007e3c:	2a00      	cmp	r2, #0
 8007e3e:	d1c3      	bne.n	8007dc8 <_strtod_l+0x38>
 8007e40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e42:	9515      	str	r5, [sp, #84]	; 0x54
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f040 855f 	bne.w	8008908 <_strtod_l+0xb78>
 8007e4a:	4642      	mov	r2, r8
 8007e4c:	464b      	mov	r3, r9
 8007e4e:	e7e3      	b.n	8007e18 <_strtod_l+0x88>
 8007e50:	2100      	movs	r1, #0
 8007e52:	e7ef      	b.n	8007e34 <_strtod_l+0xa4>
 8007e54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007e56:	b13a      	cbz	r2, 8007e68 <_strtod_l+0xd8>
 8007e58:	2135      	movs	r1, #53	; 0x35
 8007e5a:	a818      	add	r0, sp, #96	; 0x60
 8007e5c:	f7ff ff37 	bl	8007cce <__copybits>
 8007e60:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007e62:	4620      	mov	r0, r4
 8007e64:	f7ff fb0a 	bl	800747c <_Bfree>
 8007e68:	3f01      	subs	r7, #1
 8007e6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e6c:	2f04      	cmp	r7, #4
 8007e6e:	d806      	bhi.n	8007e7e <_strtod_l+0xee>
 8007e70:	e8df f007 	tbb	[pc, r7]
 8007e74:	201d0314 	.word	0x201d0314
 8007e78:	14          	.byte	0x14
 8007e79:	00          	.byte	0x00
 8007e7a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007e7e:	05e9      	lsls	r1, r5, #23
 8007e80:	bf48      	it	mi
 8007e82:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007e86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e8a:	0d1b      	lsrs	r3, r3, #20
 8007e8c:	051b      	lsls	r3, r3, #20
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1b9      	bne.n	8007e06 <_strtod_l+0x76>
 8007e92:	f7fe fb05 	bl	80064a0 <__errno>
 8007e96:	2322      	movs	r3, #34	; 0x22
 8007e98:	6003      	str	r3, [r0, #0]
 8007e9a:	e7b4      	b.n	8007e06 <_strtod_l+0x76>
 8007e9c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007ea0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007ea4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007ea8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007eac:	e7e7      	b.n	8007e7e <_strtod_l+0xee>
 8007eae:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008028 <_strtod_l+0x298>
 8007eb2:	e7e4      	b.n	8007e7e <_strtod_l+0xee>
 8007eb4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007eb8:	f04f 38ff 	mov.w	r8, #4294967295
 8007ebc:	e7df      	b.n	8007e7e <_strtod_l+0xee>
 8007ebe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	9215      	str	r2, [sp, #84]	; 0x54
 8007ec4:	785b      	ldrb	r3, [r3, #1]
 8007ec6:	2b30      	cmp	r3, #48	; 0x30
 8007ec8:	d0f9      	beq.n	8007ebe <_strtod_l+0x12e>
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d09b      	beq.n	8007e06 <_strtod_l+0x76>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	f04f 0a00 	mov.w	sl, #0
 8007ed4:	9304      	str	r3, [sp, #16]
 8007ed6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ed8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007eda:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007ede:	46d3      	mov	fp, sl
 8007ee0:	220a      	movs	r2, #10
 8007ee2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007ee4:	7806      	ldrb	r6, [r0, #0]
 8007ee6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007eea:	b2d9      	uxtb	r1, r3
 8007eec:	2909      	cmp	r1, #9
 8007eee:	d926      	bls.n	8007f3e <_strtod_l+0x1ae>
 8007ef0:	494c      	ldr	r1, [pc, #304]	; (8008024 <_strtod_l+0x294>)
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f000 ffe6 	bl	8008ec4 <strncmp>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	d030      	beq.n	8007f5e <_strtod_l+0x1ce>
 8007efc:	2000      	movs	r0, #0
 8007efe:	4632      	mov	r2, r6
 8007f00:	9005      	str	r0, [sp, #20]
 8007f02:	465e      	mov	r6, fp
 8007f04:	4603      	mov	r3, r0
 8007f06:	2a65      	cmp	r2, #101	; 0x65
 8007f08:	d001      	beq.n	8007f0e <_strtod_l+0x17e>
 8007f0a:	2a45      	cmp	r2, #69	; 0x45
 8007f0c:	d113      	bne.n	8007f36 <_strtod_l+0x1a6>
 8007f0e:	b91e      	cbnz	r6, 8007f18 <_strtod_l+0x188>
 8007f10:	9a04      	ldr	r2, [sp, #16]
 8007f12:	4302      	orrs	r2, r0
 8007f14:	d094      	beq.n	8007e40 <_strtod_l+0xb0>
 8007f16:	2600      	movs	r6, #0
 8007f18:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007f1a:	1c6a      	adds	r2, r5, #1
 8007f1c:	9215      	str	r2, [sp, #84]	; 0x54
 8007f1e:	786a      	ldrb	r2, [r5, #1]
 8007f20:	2a2b      	cmp	r2, #43	; 0x2b
 8007f22:	d074      	beq.n	800800e <_strtod_l+0x27e>
 8007f24:	2a2d      	cmp	r2, #45	; 0x2d
 8007f26:	d078      	beq.n	800801a <_strtod_l+0x28a>
 8007f28:	f04f 0c00 	mov.w	ip, #0
 8007f2c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007f30:	2909      	cmp	r1, #9
 8007f32:	d97f      	bls.n	8008034 <_strtod_l+0x2a4>
 8007f34:	9515      	str	r5, [sp, #84]	; 0x54
 8007f36:	2700      	movs	r7, #0
 8007f38:	e09e      	b.n	8008078 <_strtod_l+0x2e8>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	e7c8      	b.n	8007ed0 <_strtod_l+0x140>
 8007f3e:	f1bb 0f08 	cmp.w	fp, #8
 8007f42:	bfd8      	it	le
 8007f44:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007f46:	f100 0001 	add.w	r0, r0, #1
 8007f4a:	bfda      	itte	le
 8007f4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007f50:	9309      	strle	r3, [sp, #36]	; 0x24
 8007f52:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007f56:	f10b 0b01 	add.w	fp, fp, #1
 8007f5a:	9015      	str	r0, [sp, #84]	; 0x54
 8007f5c:	e7c1      	b.n	8007ee2 <_strtod_l+0x152>
 8007f5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f60:	1c5a      	adds	r2, r3, #1
 8007f62:	9215      	str	r2, [sp, #84]	; 0x54
 8007f64:	785a      	ldrb	r2, [r3, #1]
 8007f66:	f1bb 0f00 	cmp.w	fp, #0
 8007f6a:	d037      	beq.n	8007fdc <_strtod_l+0x24c>
 8007f6c:	9005      	str	r0, [sp, #20]
 8007f6e:	465e      	mov	r6, fp
 8007f70:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007f74:	2b09      	cmp	r3, #9
 8007f76:	d912      	bls.n	8007f9e <_strtod_l+0x20e>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e7c4      	b.n	8007f06 <_strtod_l+0x176>
 8007f7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f7e:	1c5a      	adds	r2, r3, #1
 8007f80:	9215      	str	r2, [sp, #84]	; 0x54
 8007f82:	785a      	ldrb	r2, [r3, #1]
 8007f84:	3001      	adds	r0, #1
 8007f86:	2a30      	cmp	r2, #48	; 0x30
 8007f88:	d0f8      	beq.n	8007f7c <_strtod_l+0x1ec>
 8007f8a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007f8e:	2b08      	cmp	r3, #8
 8007f90:	f200 84c1 	bhi.w	8008916 <_strtod_l+0xb86>
 8007f94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f96:	9005      	str	r0, [sp, #20]
 8007f98:	2000      	movs	r0, #0
 8007f9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	3a30      	subs	r2, #48	; 0x30
 8007fa0:	f100 0301 	add.w	r3, r0, #1
 8007fa4:	d014      	beq.n	8007fd0 <_strtod_l+0x240>
 8007fa6:	9905      	ldr	r1, [sp, #20]
 8007fa8:	4419      	add	r1, r3
 8007faa:	9105      	str	r1, [sp, #20]
 8007fac:	4633      	mov	r3, r6
 8007fae:	eb00 0c06 	add.w	ip, r0, r6
 8007fb2:	210a      	movs	r1, #10
 8007fb4:	4563      	cmp	r3, ip
 8007fb6:	d113      	bne.n	8007fe0 <_strtod_l+0x250>
 8007fb8:	1833      	adds	r3, r6, r0
 8007fba:	2b08      	cmp	r3, #8
 8007fbc:	f106 0601 	add.w	r6, r6, #1
 8007fc0:	4406      	add	r6, r0
 8007fc2:	dc1a      	bgt.n	8007ffa <_strtod_l+0x26a>
 8007fc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fc6:	230a      	movs	r3, #10
 8007fc8:	fb03 2301 	mla	r3, r3, r1, r2
 8007fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8007fce:	2300      	movs	r3, #0
 8007fd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007fd2:	1c51      	adds	r1, r2, #1
 8007fd4:	9115      	str	r1, [sp, #84]	; 0x54
 8007fd6:	7852      	ldrb	r2, [r2, #1]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	e7c9      	b.n	8007f70 <_strtod_l+0x1e0>
 8007fdc:	4658      	mov	r0, fp
 8007fde:	e7d2      	b.n	8007f86 <_strtod_l+0x1f6>
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	f103 0301 	add.w	r3, r3, #1
 8007fe6:	dc03      	bgt.n	8007ff0 <_strtod_l+0x260>
 8007fe8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007fea:	434f      	muls	r7, r1
 8007fec:	9709      	str	r7, [sp, #36]	; 0x24
 8007fee:	e7e1      	b.n	8007fb4 <_strtod_l+0x224>
 8007ff0:	2b10      	cmp	r3, #16
 8007ff2:	bfd8      	it	le
 8007ff4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007ff8:	e7dc      	b.n	8007fb4 <_strtod_l+0x224>
 8007ffa:	2e10      	cmp	r6, #16
 8007ffc:	bfdc      	itt	le
 8007ffe:	230a      	movle	r3, #10
 8008000:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008004:	e7e3      	b.n	8007fce <_strtod_l+0x23e>
 8008006:	2300      	movs	r3, #0
 8008008:	9305      	str	r3, [sp, #20]
 800800a:	2301      	movs	r3, #1
 800800c:	e780      	b.n	8007f10 <_strtod_l+0x180>
 800800e:	f04f 0c00 	mov.w	ip, #0
 8008012:	1caa      	adds	r2, r5, #2
 8008014:	9215      	str	r2, [sp, #84]	; 0x54
 8008016:	78aa      	ldrb	r2, [r5, #2]
 8008018:	e788      	b.n	8007f2c <_strtod_l+0x19c>
 800801a:	f04f 0c01 	mov.w	ip, #1
 800801e:	e7f8      	b.n	8008012 <_strtod_l+0x282>
 8008020:	08009f18 	.word	0x08009f18
 8008024:	08009f14 	.word	0x08009f14
 8008028:	7ff00000 	.word	0x7ff00000
 800802c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800802e:	1c51      	adds	r1, r2, #1
 8008030:	9115      	str	r1, [sp, #84]	; 0x54
 8008032:	7852      	ldrb	r2, [r2, #1]
 8008034:	2a30      	cmp	r2, #48	; 0x30
 8008036:	d0f9      	beq.n	800802c <_strtod_l+0x29c>
 8008038:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800803c:	2908      	cmp	r1, #8
 800803e:	f63f af7a 	bhi.w	8007f36 <_strtod_l+0x1a6>
 8008042:	3a30      	subs	r2, #48	; 0x30
 8008044:	9208      	str	r2, [sp, #32]
 8008046:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008048:	920c      	str	r2, [sp, #48]	; 0x30
 800804a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800804c:	1c57      	adds	r7, r2, #1
 800804e:	9715      	str	r7, [sp, #84]	; 0x54
 8008050:	7852      	ldrb	r2, [r2, #1]
 8008052:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008056:	f1be 0f09 	cmp.w	lr, #9
 800805a:	d938      	bls.n	80080ce <_strtod_l+0x33e>
 800805c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800805e:	1a7f      	subs	r7, r7, r1
 8008060:	2f08      	cmp	r7, #8
 8008062:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008066:	dc03      	bgt.n	8008070 <_strtod_l+0x2e0>
 8008068:	9908      	ldr	r1, [sp, #32]
 800806a:	428f      	cmp	r7, r1
 800806c:	bfa8      	it	ge
 800806e:	460f      	movge	r7, r1
 8008070:	f1bc 0f00 	cmp.w	ip, #0
 8008074:	d000      	beq.n	8008078 <_strtod_l+0x2e8>
 8008076:	427f      	negs	r7, r7
 8008078:	2e00      	cmp	r6, #0
 800807a:	d14f      	bne.n	800811c <_strtod_l+0x38c>
 800807c:	9904      	ldr	r1, [sp, #16]
 800807e:	4301      	orrs	r1, r0
 8008080:	f47f aec1 	bne.w	8007e06 <_strtod_l+0x76>
 8008084:	2b00      	cmp	r3, #0
 8008086:	f47f aedb 	bne.w	8007e40 <_strtod_l+0xb0>
 800808a:	2a69      	cmp	r2, #105	; 0x69
 800808c:	d029      	beq.n	80080e2 <_strtod_l+0x352>
 800808e:	dc26      	bgt.n	80080de <_strtod_l+0x34e>
 8008090:	2a49      	cmp	r2, #73	; 0x49
 8008092:	d026      	beq.n	80080e2 <_strtod_l+0x352>
 8008094:	2a4e      	cmp	r2, #78	; 0x4e
 8008096:	f47f aed3 	bne.w	8007e40 <_strtod_l+0xb0>
 800809a:	499b      	ldr	r1, [pc, #620]	; (8008308 <_strtod_l+0x578>)
 800809c:	a815      	add	r0, sp, #84	; 0x54
 800809e:	f001 fa27 	bl	80094f0 <__match>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	f43f aecc 	beq.w	8007e40 <_strtod_l+0xb0>
 80080a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	2b28      	cmp	r3, #40	; 0x28
 80080ae:	d12f      	bne.n	8008110 <_strtod_l+0x380>
 80080b0:	4996      	ldr	r1, [pc, #600]	; (800830c <_strtod_l+0x57c>)
 80080b2:	aa18      	add	r2, sp, #96	; 0x60
 80080b4:	a815      	add	r0, sp, #84	; 0x54
 80080b6:	f001 fa2f 	bl	8009518 <__hexnan>
 80080ba:	2805      	cmp	r0, #5
 80080bc:	d128      	bne.n	8008110 <_strtod_l+0x380>
 80080be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80080c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80080c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80080cc:	e69b      	b.n	8007e06 <_strtod_l+0x76>
 80080ce:	9f08      	ldr	r7, [sp, #32]
 80080d0:	210a      	movs	r1, #10
 80080d2:	fb01 2107 	mla	r1, r1, r7, r2
 80080d6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80080da:	9208      	str	r2, [sp, #32]
 80080dc:	e7b5      	b.n	800804a <_strtod_l+0x2ba>
 80080de:	2a6e      	cmp	r2, #110	; 0x6e
 80080e0:	e7d9      	b.n	8008096 <_strtod_l+0x306>
 80080e2:	498b      	ldr	r1, [pc, #556]	; (8008310 <_strtod_l+0x580>)
 80080e4:	a815      	add	r0, sp, #84	; 0x54
 80080e6:	f001 fa03 	bl	80094f0 <__match>
 80080ea:	2800      	cmp	r0, #0
 80080ec:	f43f aea8 	beq.w	8007e40 <_strtod_l+0xb0>
 80080f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080f2:	4988      	ldr	r1, [pc, #544]	; (8008314 <_strtod_l+0x584>)
 80080f4:	3b01      	subs	r3, #1
 80080f6:	a815      	add	r0, sp, #84	; 0x54
 80080f8:	9315      	str	r3, [sp, #84]	; 0x54
 80080fa:	f001 f9f9 	bl	80094f0 <__match>
 80080fe:	b910      	cbnz	r0, 8008106 <_strtod_l+0x376>
 8008100:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008102:	3301      	adds	r3, #1
 8008104:	9315      	str	r3, [sp, #84]	; 0x54
 8008106:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008324 <_strtod_l+0x594>
 800810a:	f04f 0800 	mov.w	r8, #0
 800810e:	e67a      	b.n	8007e06 <_strtod_l+0x76>
 8008110:	4881      	ldr	r0, [pc, #516]	; (8008318 <_strtod_l+0x588>)
 8008112:	f000 ff09 	bl	8008f28 <nan>
 8008116:	ec59 8b10 	vmov	r8, r9, d0
 800811a:	e674      	b.n	8007e06 <_strtod_l+0x76>
 800811c:	9b05      	ldr	r3, [sp, #20]
 800811e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008120:	1afb      	subs	r3, r7, r3
 8008122:	f1bb 0f00 	cmp.w	fp, #0
 8008126:	bf08      	it	eq
 8008128:	46b3      	moveq	fp, r6
 800812a:	2e10      	cmp	r6, #16
 800812c:	9308      	str	r3, [sp, #32]
 800812e:	4635      	mov	r5, r6
 8008130:	bfa8      	it	ge
 8008132:	2510      	movge	r5, #16
 8008134:	f7f8 f9e6 	bl	8000504 <__aeabi_ui2d>
 8008138:	2e09      	cmp	r6, #9
 800813a:	4680      	mov	r8, r0
 800813c:	4689      	mov	r9, r1
 800813e:	dd13      	ble.n	8008168 <_strtod_l+0x3d8>
 8008140:	4b76      	ldr	r3, [pc, #472]	; (800831c <_strtod_l+0x58c>)
 8008142:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008146:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800814a:	f7f8 fa55 	bl	80005f8 <__aeabi_dmul>
 800814e:	4680      	mov	r8, r0
 8008150:	4650      	mov	r0, sl
 8008152:	4689      	mov	r9, r1
 8008154:	f7f8 f9d6 	bl	8000504 <__aeabi_ui2d>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	4640      	mov	r0, r8
 800815e:	4649      	mov	r1, r9
 8008160:	f7f8 f894 	bl	800028c <__adddf3>
 8008164:	4680      	mov	r8, r0
 8008166:	4689      	mov	r9, r1
 8008168:	2e0f      	cmp	r6, #15
 800816a:	dc38      	bgt.n	80081de <_strtod_l+0x44e>
 800816c:	9b08      	ldr	r3, [sp, #32]
 800816e:	2b00      	cmp	r3, #0
 8008170:	f43f ae49 	beq.w	8007e06 <_strtod_l+0x76>
 8008174:	dd24      	ble.n	80081c0 <_strtod_l+0x430>
 8008176:	2b16      	cmp	r3, #22
 8008178:	dc0b      	bgt.n	8008192 <_strtod_l+0x402>
 800817a:	4968      	ldr	r1, [pc, #416]	; (800831c <_strtod_l+0x58c>)
 800817c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008184:	4642      	mov	r2, r8
 8008186:	464b      	mov	r3, r9
 8008188:	f7f8 fa36 	bl	80005f8 <__aeabi_dmul>
 800818c:	4680      	mov	r8, r0
 800818e:	4689      	mov	r9, r1
 8008190:	e639      	b.n	8007e06 <_strtod_l+0x76>
 8008192:	9a08      	ldr	r2, [sp, #32]
 8008194:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008198:	4293      	cmp	r3, r2
 800819a:	db20      	blt.n	80081de <_strtod_l+0x44e>
 800819c:	4c5f      	ldr	r4, [pc, #380]	; (800831c <_strtod_l+0x58c>)
 800819e:	f1c6 060f 	rsb	r6, r6, #15
 80081a2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80081a6:	4642      	mov	r2, r8
 80081a8:	464b      	mov	r3, r9
 80081aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081ae:	f7f8 fa23 	bl	80005f8 <__aeabi_dmul>
 80081b2:	9b08      	ldr	r3, [sp, #32]
 80081b4:	1b9e      	subs	r6, r3, r6
 80081b6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80081ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 80081be:	e7e3      	b.n	8008188 <_strtod_l+0x3f8>
 80081c0:	9b08      	ldr	r3, [sp, #32]
 80081c2:	3316      	adds	r3, #22
 80081c4:	db0b      	blt.n	80081de <_strtod_l+0x44e>
 80081c6:	9b05      	ldr	r3, [sp, #20]
 80081c8:	1bdf      	subs	r7, r3, r7
 80081ca:	4b54      	ldr	r3, [pc, #336]	; (800831c <_strtod_l+0x58c>)
 80081cc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80081d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081d4:	4640      	mov	r0, r8
 80081d6:	4649      	mov	r1, r9
 80081d8:	f7f8 fb38 	bl	800084c <__aeabi_ddiv>
 80081dc:	e7d6      	b.n	800818c <_strtod_l+0x3fc>
 80081de:	9b08      	ldr	r3, [sp, #32]
 80081e0:	1b75      	subs	r5, r6, r5
 80081e2:	441d      	add	r5, r3
 80081e4:	2d00      	cmp	r5, #0
 80081e6:	dd70      	ble.n	80082ca <_strtod_l+0x53a>
 80081e8:	f015 030f 	ands.w	r3, r5, #15
 80081ec:	d00a      	beq.n	8008204 <_strtod_l+0x474>
 80081ee:	494b      	ldr	r1, [pc, #300]	; (800831c <_strtod_l+0x58c>)
 80081f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80081f4:	4642      	mov	r2, r8
 80081f6:	464b      	mov	r3, r9
 80081f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081fc:	f7f8 f9fc 	bl	80005f8 <__aeabi_dmul>
 8008200:	4680      	mov	r8, r0
 8008202:	4689      	mov	r9, r1
 8008204:	f035 050f 	bics.w	r5, r5, #15
 8008208:	d04d      	beq.n	80082a6 <_strtod_l+0x516>
 800820a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800820e:	dd22      	ble.n	8008256 <_strtod_l+0x4c6>
 8008210:	2500      	movs	r5, #0
 8008212:	46ab      	mov	fp, r5
 8008214:	9509      	str	r5, [sp, #36]	; 0x24
 8008216:	9505      	str	r5, [sp, #20]
 8008218:	2322      	movs	r3, #34	; 0x22
 800821a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008324 <_strtod_l+0x594>
 800821e:	6023      	str	r3, [r4, #0]
 8008220:	f04f 0800 	mov.w	r8, #0
 8008224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008226:	2b00      	cmp	r3, #0
 8008228:	f43f aded 	beq.w	8007e06 <_strtod_l+0x76>
 800822c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800822e:	4620      	mov	r0, r4
 8008230:	f7ff f924 	bl	800747c <_Bfree>
 8008234:	9905      	ldr	r1, [sp, #20]
 8008236:	4620      	mov	r0, r4
 8008238:	f7ff f920 	bl	800747c <_Bfree>
 800823c:	4659      	mov	r1, fp
 800823e:	4620      	mov	r0, r4
 8008240:	f7ff f91c 	bl	800747c <_Bfree>
 8008244:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008246:	4620      	mov	r0, r4
 8008248:	f7ff f918 	bl	800747c <_Bfree>
 800824c:	4629      	mov	r1, r5
 800824e:	4620      	mov	r0, r4
 8008250:	f7ff f914 	bl	800747c <_Bfree>
 8008254:	e5d7      	b.n	8007e06 <_strtod_l+0x76>
 8008256:	4b32      	ldr	r3, [pc, #200]	; (8008320 <_strtod_l+0x590>)
 8008258:	9304      	str	r3, [sp, #16]
 800825a:	2300      	movs	r3, #0
 800825c:	112d      	asrs	r5, r5, #4
 800825e:	4640      	mov	r0, r8
 8008260:	4649      	mov	r1, r9
 8008262:	469a      	mov	sl, r3
 8008264:	2d01      	cmp	r5, #1
 8008266:	dc21      	bgt.n	80082ac <_strtod_l+0x51c>
 8008268:	b10b      	cbz	r3, 800826e <_strtod_l+0x4de>
 800826a:	4680      	mov	r8, r0
 800826c:	4689      	mov	r9, r1
 800826e:	492c      	ldr	r1, [pc, #176]	; (8008320 <_strtod_l+0x590>)
 8008270:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008274:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008278:	4642      	mov	r2, r8
 800827a:	464b      	mov	r3, r9
 800827c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008280:	f7f8 f9ba 	bl	80005f8 <__aeabi_dmul>
 8008284:	4b27      	ldr	r3, [pc, #156]	; (8008324 <_strtod_l+0x594>)
 8008286:	460a      	mov	r2, r1
 8008288:	400b      	ands	r3, r1
 800828a:	4927      	ldr	r1, [pc, #156]	; (8008328 <_strtod_l+0x598>)
 800828c:	428b      	cmp	r3, r1
 800828e:	4680      	mov	r8, r0
 8008290:	d8be      	bhi.n	8008210 <_strtod_l+0x480>
 8008292:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008296:	428b      	cmp	r3, r1
 8008298:	bf86      	itte	hi
 800829a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800832c <_strtod_l+0x59c>
 800829e:	f04f 38ff 	movhi.w	r8, #4294967295
 80082a2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80082a6:	2300      	movs	r3, #0
 80082a8:	9304      	str	r3, [sp, #16]
 80082aa:	e07b      	b.n	80083a4 <_strtod_l+0x614>
 80082ac:	07ea      	lsls	r2, r5, #31
 80082ae:	d505      	bpl.n	80082bc <_strtod_l+0x52c>
 80082b0:	9b04      	ldr	r3, [sp, #16]
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f7f8 f99f 	bl	80005f8 <__aeabi_dmul>
 80082ba:	2301      	movs	r3, #1
 80082bc:	9a04      	ldr	r2, [sp, #16]
 80082be:	3208      	adds	r2, #8
 80082c0:	f10a 0a01 	add.w	sl, sl, #1
 80082c4:	106d      	asrs	r5, r5, #1
 80082c6:	9204      	str	r2, [sp, #16]
 80082c8:	e7cc      	b.n	8008264 <_strtod_l+0x4d4>
 80082ca:	d0ec      	beq.n	80082a6 <_strtod_l+0x516>
 80082cc:	426d      	negs	r5, r5
 80082ce:	f015 020f 	ands.w	r2, r5, #15
 80082d2:	d00a      	beq.n	80082ea <_strtod_l+0x55a>
 80082d4:	4b11      	ldr	r3, [pc, #68]	; (800831c <_strtod_l+0x58c>)
 80082d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082da:	4640      	mov	r0, r8
 80082dc:	4649      	mov	r1, r9
 80082de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e2:	f7f8 fab3 	bl	800084c <__aeabi_ddiv>
 80082e6:	4680      	mov	r8, r0
 80082e8:	4689      	mov	r9, r1
 80082ea:	112d      	asrs	r5, r5, #4
 80082ec:	d0db      	beq.n	80082a6 <_strtod_l+0x516>
 80082ee:	2d1f      	cmp	r5, #31
 80082f0:	dd1e      	ble.n	8008330 <_strtod_l+0x5a0>
 80082f2:	2500      	movs	r5, #0
 80082f4:	46ab      	mov	fp, r5
 80082f6:	9509      	str	r5, [sp, #36]	; 0x24
 80082f8:	9505      	str	r5, [sp, #20]
 80082fa:	2322      	movs	r3, #34	; 0x22
 80082fc:	f04f 0800 	mov.w	r8, #0
 8008300:	f04f 0900 	mov.w	r9, #0
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	e78d      	b.n	8008224 <_strtod_l+0x494>
 8008308:	08009d05 	.word	0x08009d05
 800830c:	08009f2c 	.word	0x08009f2c
 8008310:	08009cfd 	.word	0x08009cfd
 8008314:	08009d34 	.word	0x08009d34
 8008318:	0800a0bd 	.word	0x0800a0bd
 800831c:	08009e40 	.word	0x08009e40
 8008320:	08009e18 	.word	0x08009e18
 8008324:	7ff00000 	.word	0x7ff00000
 8008328:	7ca00000 	.word	0x7ca00000
 800832c:	7fefffff 	.word	0x7fefffff
 8008330:	f015 0310 	ands.w	r3, r5, #16
 8008334:	bf18      	it	ne
 8008336:	236a      	movne	r3, #106	; 0x6a
 8008338:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80086dc <_strtod_l+0x94c>
 800833c:	9304      	str	r3, [sp, #16]
 800833e:	4640      	mov	r0, r8
 8008340:	4649      	mov	r1, r9
 8008342:	2300      	movs	r3, #0
 8008344:	07ea      	lsls	r2, r5, #31
 8008346:	d504      	bpl.n	8008352 <_strtod_l+0x5c2>
 8008348:	e9da 2300 	ldrd	r2, r3, [sl]
 800834c:	f7f8 f954 	bl	80005f8 <__aeabi_dmul>
 8008350:	2301      	movs	r3, #1
 8008352:	106d      	asrs	r5, r5, #1
 8008354:	f10a 0a08 	add.w	sl, sl, #8
 8008358:	d1f4      	bne.n	8008344 <_strtod_l+0x5b4>
 800835a:	b10b      	cbz	r3, 8008360 <_strtod_l+0x5d0>
 800835c:	4680      	mov	r8, r0
 800835e:	4689      	mov	r9, r1
 8008360:	9b04      	ldr	r3, [sp, #16]
 8008362:	b1bb      	cbz	r3, 8008394 <_strtod_l+0x604>
 8008364:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008368:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800836c:	2b00      	cmp	r3, #0
 800836e:	4649      	mov	r1, r9
 8008370:	dd10      	ble.n	8008394 <_strtod_l+0x604>
 8008372:	2b1f      	cmp	r3, #31
 8008374:	f340 811e 	ble.w	80085b4 <_strtod_l+0x824>
 8008378:	2b34      	cmp	r3, #52	; 0x34
 800837a:	bfde      	ittt	le
 800837c:	f04f 33ff 	movle.w	r3, #4294967295
 8008380:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008384:	4093      	lslle	r3, r2
 8008386:	f04f 0800 	mov.w	r8, #0
 800838a:	bfcc      	ite	gt
 800838c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008390:	ea03 0901 	andle.w	r9, r3, r1
 8008394:	2200      	movs	r2, #0
 8008396:	2300      	movs	r3, #0
 8008398:	4640      	mov	r0, r8
 800839a:	4649      	mov	r1, r9
 800839c:	f7f8 fb94 	bl	8000ac8 <__aeabi_dcmpeq>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d1a6      	bne.n	80082f2 <_strtod_l+0x562>
 80083a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083aa:	4633      	mov	r3, r6
 80083ac:	465a      	mov	r2, fp
 80083ae:	4620      	mov	r0, r4
 80083b0:	f7ff f8cc 	bl	800754c <__s2b>
 80083b4:	9009      	str	r0, [sp, #36]	; 0x24
 80083b6:	2800      	cmp	r0, #0
 80083b8:	f43f af2a 	beq.w	8008210 <_strtod_l+0x480>
 80083bc:	9a08      	ldr	r2, [sp, #32]
 80083be:	9b05      	ldr	r3, [sp, #20]
 80083c0:	2a00      	cmp	r2, #0
 80083c2:	eba3 0307 	sub.w	r3, r3, r7
 80083c6:	bfa8      	it	ge
 80083c8:	2300      	movge	r3, #0
 80083ca:	930c      	str	r3, [sp, #48]	; 0x30
 80083cc:	2500      	movs	r5, #0
 80083ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80083d2:	9312      	str	r3, [sp, #72]	; 0x48
 80083d4:	46ab      	mov	fp, r5
 80083d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d8:	4620      	mov	r0, r4
 80083da:	6859      	ldr	r1, [r3, #4]
 80083dc:	f7ff f80e 	bl	80073fc <_Balloc>
 80083e0:	9005      	str	r0, [sp, #20]
 80083e2:	2800      	cmp	r0, #0
 80083e4:	f43f af18 	beq.w	8008218 <_strtod_l+0x488>
 80083e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ea:	691a      	ldr	r2, [r3, #16]
 80083ec:	3202      	adds	r2, #2
 80083ee:	f103 010c 	add.w	r1, r3, #12
 80083f2:	0092      	lsls	r2, r2, #2
 80083f4:	300c      	adds	r0, #12
 80083f6:	f000 fd87 	bl	8008f08 <memcpy>
 80083fa:	ec49 8b10 	vmov	d0, r8, r9
 80083fe:	aa18      	add	r2, sp, #96	; 0x60
 8008400:	a917      	add	r1, sp, #92	; 0x5c
 8008402:	4620      	mov	r0, r4
 8008404:	f7ff fbd6 	bl	8007bb4 <__d2b>
 8008408:	ec49 8b18 	vmov	d8, r8, r9
 800840c:	9016      	str	r0, [sp, #88]	; 0x58
 800840e:	2800      	cmp	r0, #0
 8008410:	f43f af02 	beq.w	8008218 <_strtod_l+0x488>
 8008414:	2101      	movs	r1, #1
 8008416:	4620      	mov	r0, r4
 8008418:	f7ff f930 	bl	800767c <__i2b>
 800841c:	4683      	mov	fp, r0
 800841e:	2800      	cmp	r0, #0
 8008420:	f43f aefa 	beq.w	8008218 <_strtod_l+0x488>
 8008424:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008426:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008428:	2e00      	cmp	r6, #0
 800842a:	bfab      	itete	ge
 800842c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800842e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008430:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008432:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008436:	bfac      	ite	ge
 8008438:	eb06 0a03 	addge.w	sl, r6, r3
 800843c:	1b9f      	sublt	r7, r3, r6
 800843e:	9b04      	ldr	r3, [sp, #16]
 8008440:	1af6      	subs	r6, r6, r3
 8008442:	4416      	add	r6, r2
 8008444:	4ba0      	ldr	r3, [pc, #640]	; (80086c8 <_strtod_l+0x938>)
 8008446:	3e01      	subs	r6, #1
 8008448:	429e      	cmp	r6, r3
 800844a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800844e:	f280 80c4 	bge.w	80085da <_strtod_l+0x84a>
 8008452:	1b9b      	subs	r3, r3, r6
 8008454:	2b1f      	cmp	r3, #31
 8008456:	eba2 0203 	sub.w	r2, r2, r3
 800845a:	f04f 0101 	mov.w	r1, #1
 800845e:	f300 80b0 	bgt.w	80085c2 <_strtod_l+0x832>
 8008462:	fa01 f303 	lsl.w	r3, r1, r3
 8008466:	930e      	str	r3, [sp, #56]	; 0x38
 8008468:	2300      	movs	r3, #0
 800846a:	930d      	str	r3, [sp, #52]	; 0x34
 800846c:	eb0a 0602 	add.w	r6, sl, r2
 8008470:	9b04      	ldr	r3, [sp, #16]
 8008472:	45b2      	cmp	sl, r6
 8008474:	4417      	add	r7, r2
 8008476:	441f      	add	r7, r3
 8008478:	4653      	mov	r3, sl
 800847a:	bfa8      	it	ge
 800847c:	4633      	movge	r3, r6
 800847e:	42bb      	cmp	r3, r7
 8008480:	bfa8      	it	ge
 8008482:	463b      	movge	r3, r7
 8008484:	2b00      	cmp	r3, #0
 8008486:	bfc2      	ittt	gt
 8008488:	1af6      	subgt	r6, r6, r3
 800848a:	1aff      	subgt	r7, r7, r3
 800848c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008492:	2b00      	cmp	r3, #0
 8008494:	dd17      	ble.n	80084c6 <_strtod_l+0x736>
 8008496:	4659      	mov	r1, fp
 8008498:	461a      	mov	r2, r3
 800849a:	4620      	mov	r0, r4
 800849c:	f7ff f9ae 	bl	80077fc <__pow5mult>
 80084a0:	4683      	mov	fp, r0
 80084a2:	2800      	cmp	r0, #0
 80084a4:	f43f aeb8 	beq.w	8008218 <_strtod_l+0x488>
 80084a8:	4601      	mov	r1, r0
 80084aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80084ac:	4620      	mov	r0, r4
 80084ae:	f7ff f8fb 	bl	80076a8 <__multiply>
 80084b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80084b4:	2800      	cmp	r0, #0
 80084b6:	f43f aeaf 	beq.w	8008218 <_strtod_l+0x488>
 80084ba:	9916      	ldr	r1, [sp, #88]	; 0x58
 80084bc:	4620      	mov	r0, r4
 80084be:	f7fe ffdd 	bl	800747c <_Bfree>
 80084c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084c4:	9316      	str	r3, [sp, #88]	; 0x58
 80084c6:	2e00      	cmp	r6, #0
 80084c8:	f300 808c 	bgt.w	80085e4 <_strtod_l+0x854>
 80084cc:	9b08      	ldr	r3, [sp, #32]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	dd08      	ble.n	80084e4 <_strtod_l+0x754>
 80084d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084d4:	9905      	ldr	r1, [sp, #20]
 80084d6:	4620      	mov	r0, r4
 80084d8:	f7ff f990 	bl	80077fc <__pow5mult>
 80084dc:	9005      	str	r0, [sp, #20]
 80084de:	2800      	cmp	r0, #0
 80084e0:	f43f ae9a 	beq.w	8008218 <_strtod_l+0x488>
 80084e4:	2f00      	cmp	r7, #0
 80084e6:	dd08      	ble.n	80084fa <_strtod_l+0x76a>
 80084e8:	9905      	ldr	r1, [sp, #20]
 80084ea:	463a      	mov	r2, r7
 80084ec:	4620      	mov	r0, r4
 80084ee:	f7ff f9df 	bl	80078b0 <__lshift>
 80084f2:	9005      	str	r0, [sp, #20]
 80084f4:	2800      	cmp	r0, #0
 80084f6:	f43f ae8f 	beq.w	8008218 <_strtod_l+0x488>
 80084fa:	f1ba 0f00 	cmp.w	sl, #0
 80084fe:	dd08      	ble.n	8008512 <_strtod_l+0x782>
 8008500:	4659      	mov	r1, fp
 8008502:	4652      	mov	r2, sl
 8008504:	4620      	mov	r0, r4
 8008506:	f7ff f9d3 	bl	80078b0 <__lshift>
 800850a:	4683      	mov	fp, r0
 800850c:	2800      	cmp	r0, #0
 800850e:	f43f ae83 	beq.w	8008218 <_strtod_l+0x488>
 8008512:	9a05      	ldr	r2, [sp, #20]
 8008514:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008516:	4620      	mov	r0, r4
 8008518:	f7ff fa52 	bl	80079c0 <__mdiff>
 800851c:	4605      	mov	r5, r0
 800851e:	2800      	cmp	r0, #0
 8008520:	f43f ae7a 	beq.w	8008218 <_strtod_l+0x488>
 8008524:	68c3      	ldr	r3, [r0, #12]
 8008526:	930b      	str	r3, [sp, #44]	; 0x2c
 8008528:	2300      	movs	r3, #0
 800852a:	60c3      	str	r3, [r0, #12]
 800852c:	4659      	mov	r1, fp
 800852e:	f7ff fa2b 	bl	8007988 <__mcmp>
 8008532:	2800      	cmp	r0, #0
 8008534:	da60      	bge.n	80085f8 <_strtod_l+0x868>
 8008536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008538:	ea53 0308 	orrs.w	r3, r3, r8
 800853c:	f040 8084 	bne.w	8008648 <_strtod_l+0x8b8>
 8008540:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008544:	2b00      	cmp	r3, #0
 8008546:	d17f      	bne.n	8008648 <_strtod_l+0x8b8>
 8008548:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800854c:	0d1b      	lsrs	r3, r3, #20
 800854e:	051b      	lsls	r3, r3, #20
 8008550:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008554:	d978      	bls.n	8008648 <_strtod_l+0x8b8>
 8008556:	696b      	ldr	r3, [r5, #20]
 8008558:	b913      	cbnz	r3, 8008560 <_strtod_l+0x7d0>
 800855a:	692b      	ldr	r3, [r5, #16]
 800855c:	2b01      	cmp	r3, #1
 800855e:	dd73      	ble.n	8008648 <_strtod_l+0x8b8>
 8008560:	4629      	mov	r1, r5
 8008562:	2201      	movs	r2, #1
 8008564:	4620      	mov	r0, r4
 8008566:	f7ff f9a3 	bl	80078b0 <__lshift>
 800856a:	4659      	mov	r1, fp
 800856c:	4605      	mov	r5, r0
 800856e:	f7ff fa0b 	bl	8007988 <__mcmp>
 8008572:	2800      	cmp	r0, #0
 8008574:	dd68      	ble.n	8008648 <_strtod_l+0x8b8>
 8008576:	9904      	ldr	r1, [sp, #16]
 8008578:	4a54      	ldr	r2, [pc, #336]	; (80086cc <_strtod_l+0x93c>)
 800857a:	464b      	mov	r3, r9
 800857c:	2900      	cmp	r1, #0
 800857e:	f000 8084 	beq.w	800868a <_strtod_l+0x8fa>
 8008582:	ea02 0109 	and.w	r1, r2, r9
 8008586:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800858a:	dc7e      	bgt.n	800868a <_strtod_l+0x8fa>
 800858c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008590:	f77f aeb3 	ble.w	80082fa <_strtod_l+0x56a>
 8008594:	4b4e      	ldr	r3, [pc, #312]	; (80086d0 <_strtod_l+0x940>)
 8008596:	4640      	mov	r0, r8
 8008598:	4649      	mov	r1, r9
 800859a:	2200      	movs	r2, #0
 800859c:	f7f8 f82c 	bl	80005f8 <__aeabi_dmul>
 80085a0:	4b4a      	ldr	r3, [pc, #296]	; (80086cc <_strtod_l+0x93c>)
 80085a2:	400b      	ands	r3, r1
 80085a4:	4680      	mov	r8, r0
 80085a6:	4689      	mov	r9, r1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f47f ae3f 	bne.w	800822c <_strtod_l+0x49c>
 80085ae:	2322      	movs	r3, #34	; 0x22
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	e63b      	b.n	800822c <_strtod_l+0x49c>
 80085b4:	f04f 32ff 	mov.w	r2, #4294967295
 80085b8:	fa02 f303 	lsl.w	r3, r2, r3
 80085bc:	ea03 0808 	and.w	r8, r3, r8
 80085c0:	e6e8      	b.n	8008394 <_strtod_l+0x604>
 80085c2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80085c6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80085ca:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80085ce:	36e2      	adds	r6, #226	; 0xe2
 80085d0:	fa01 f306 	lsl.w	r3, r1, r6
 80085d4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80085d8:	e748      	b.n	800846c <_strtod_l+0x6dc>
 80085da:	2100      	movs	r1, #0
 80085dc:	2301      	movs	r3, #1
 80085de:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80085e2:	e743      	b.n	800846c <_strtod_l+0x6dc>
 80085e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80085e6:	4632      	mov	r2, r6
 80085e8:	4620      	mov	r0, r4
 80085ea:	f7ff f961 	bl	80078b0 <__lshift>
 80085ee:	9016      	str	r0, [sp, #88]	; 0x58
 80085f0:	2800      	cmp	r0, #0
 80085f2:	f47f af6b 	bne.w	80084cc <_strtod_l+0x73c>
 80085f6:	e60f      	b.n	8008218 <_strtod_l+0x488>
 80085f8:	46ca      	mov	sl, r9
 80085fa:	d171      	bne.n	80086e0 <_strtod_l+0x950>
 80085fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008602:	b352      	cbz	r2, 800865a <_strtod_l+0x8ca>
 8008604:	4a33      	ldr	r2, [pc, #204]	; (80086d4 <_strtod_l+0x944>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d12a      	bne.n	8008660 <_strtod_l+0x8d0>
 800860a:	9b04      	ldr	r3, [sp, #16]
 800860c:	4641      	mov	r1, r8
 800860e:	b1fb      	cbz	r3, 8008650 <_strtod_l+0x8c0>
 8008610:	4b2e      	ldr	r3, [pc, #184]	; (80086cc <_strtod_l+0x93c>)
 8008612:	ea09 0303 	and.w	r3, r9, r3
 8008616:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800861a:	f04f 32ff 	mov.w	r2, #4294967295
 800861e:	d81a      	bhi.n	8008656 <_strtod_l+0x8c6>
 8008620:	0d1b      	lsrs	r3, r3, #20
 8008622:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008626:	fa02 f303 	lsl.w	r3, r2, r3
 800862a:	4299      	cmp	r1, r3
 800862c:	d118      	bne.n	8008660 <_strtod_l+0x8d0>
 800862e:	4b2a      	ldr	r3, [pc, #168]	; (80086d8 <_strtod_l+0x948>)
 8008630:	459a      	cmp	sl, r3
 8008632:	d102      	bne.n	800863a <_strtod_l+0x8aa>
 8008634:	3101      	adds	r1, #1
 8008636:	f43f adef 	beq.w	8008218 <_strtod_l+0x488>
 800863a:	4b24      	ldr	r3, [pc, #144]	; (80086cc <_strtod_l+0x93c>)
 800863c:	ea0a 0303 	and.w	r3, sl, r3
 8008640:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008644:	f04f 0800 	mov.w	r8, #0
 8008648:	9b04      	ldr	r3, [sp, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1a2      	bne.n	8008594 <_strtod_l+0x804>
 800864e:	e5ed      	b.n	800822c <_strtod_l+0x49c>
 8008650:	f04f 33ff 	mov.w	r3, #4294967295
 8008654:	e7e9      	b.n	800862a <_strtod_l+0x89a>
 8008656:	4613      	mov	r3, r2
 8008658:	e7e7      	b.n	800862a <_strtod_l+0x89a>
 800865a:	ea53 0308 	orrs.w	r3, r3, r8
 800865e:	d08a      	beq.n	8008576 <_strtod_l+0x7e6>
 8008660:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008662:	b1e3      	cbz	r3, 800869e <_strtod_l+0x90e>
 8008664:	ea13 0f0a 	tst.w	r3, sl
 8008668:	d0ee      	beq.n	8008648 <_strtod_l+0x8b8>
 800866a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800866c:	9a04      	ldr	r2, [sp, #16]
 800866e:	4640      	mov	r0, r8
 8008670:	4649      	mov	r1, r9
 8008672:	b1c3      	cbz	r3, 80086a6 <_strtod_l+0x916>
 8008674:	f7ff fb6f 	bl	8007d56 <sulp>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	ec51 0b18 	vmov	r0, r1, d8
 8008680:	f7f7 fe04 	bl	800028c <__adddf3>
 8008684:	4680      	mov	r8, r0
 8008686:	4689      	mov	r9, r1
 8008688:	e7de      	b.n	8008648 <_strtod_l+0x8b8>
 800868a:	4013      	ands	r3, r2
 800868c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008690:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008694:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008698:	f04f 38ff 	mov.w	r8, #4294967295
 800869c:	e7d4      	b.n	8008648 <_strtod_l+0x8b8>
 800869e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086a0:	ea13 0f08 	tst.w	r3, r8
 80086a4:	e7e0      	b.n	8008668 <_strtod_l+0x8d8>
 80086a6:	f7ff fb56 	bl	8007d56 <sulp>
 80086aa:	4602      	mov	r2, r0
 80086ac:	460b      	mov	r3, r1
 80086ae:	ec51 0b18 	vmov	r0, r1, d8
 80086b2:	f7f7 fde9 	bl	8000288 <__aeabi_dsub>
 80086b6:	2200      	movs	r2, #0
 80086b8:	2300      	movs	r3, #0
 80086ba:	4680      	mov	r8, r0
 80086bc:	4689      	mov	r9, r1
 80086be:	f7f8 fa03 	bl	8000ac8 <__aeabi_dcmpeq>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d0c0      	beq.n	8008648 <_strtod_l+0x8b8>
 80086c6:	e618      	b.n	80082fa <_strtod_l+0x56a>
 80086c8:	fffffc02 	.word	0xfffffc02
 80086cc:	7ff00000 	.word	0x7ff00000
 80086d0:	39500000 	.word	0x39500000
 80086d4:	000fffff 	.word	0x000fffff
 80086d8:	7fefffff 	.word	0x7fefffff
 80086dc:	08009f40 	.word	0x08009f40
 80086e0:	4659      	mov	r1, fp
 80086e2:	4628      	mov	r0, r5
 80086e4:	f7ff fac0 	bl	8007c68 <__ratio>
 80086e8:	ec57 6b10 	vmov	r6, r7, d0
 80086ec:	ee10 0a10 	vmov	r0, s0
 80086f0:	2200      	movs	r2, #0
 80086f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80086f6:	4639      	mov	r1, r7
 80086f8:	f7f8 f9fa 	bl	8000af0 <__aeabi_dcmple>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	d071      	beq.n	80087e4 <_strtod_l+0xa54>
 8008700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008702:	2b00      	cmp	r3, #0
 8008704:	d17c      	bne.n	8008800 <_strtod_l+0xa70>
 8008706:	f1b8 0f00 	cmp.w	r8, #0
 800870a:	d15a      	bne.n	80087c2 <_strtod_l+0xa32>
 800870c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008710:	2b00      	cmp	r3, #0
 8008712:	d15d      	bne.n	80087d0 <_strtod_l+0xa40>
 8008714:	4b90      	ldr	r3, [pc, #576]	; (8008958 <_strtod_l+0xbc8>)
 8008716:	2200      	movs	r2, #0
 8008718:	4630      	mov	r0, r6
 800871a:	4639      	mov	r1, r7
 800871c:	f7f8 f9de 	bl	8000adc <__aeabi_dcmplt>
 8008720:	2800      	cmp	r0, #0
 8008722:	d15c      	bne.n	80087de <_strtod_l+0xa4e>
 8008724:	4630      	mov	r0, r6
 8008726:	4639      	mov	r1, r7
 8008728:	4b8c      	ldr	r3, [pc, #560]	; (800895c <_strtod_l+0xbcc>)
 800872a:	2200      	movs	r2, #0
 800872c:	f7f7 ff64 	bl	80005f8 <__aeabi_dmul>
 8008730:	4606      	mov	r6, r0
 8008732:	460f      	mov	r7, r1
 8008734:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008738:	9606      	str	r6, [sp, #24]
 800873a:	9307      	str	r3, [sp, #28]
 800873c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008740:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008744:	4b86      	ldr	r3, [pc, #536]	; (8008960 <_strtod_l+0xbd0>)
 8008746:	ea0a 0303 	and.w	r3, sl, r3
 800874a:	930d      	str	r3, [sp, #52]	; 0x34
 800874c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800874e:	4b85      	ldr	r3, [pc, #532]	; (8008964 <_strtod_l+0xbd4>)
 8008750:	429a      	cmp	r2, r3
 8008752:	f040 8090 	bne.w	8008876 <_strtod_l+0xae6>
 8008756:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800875a:	ec49 8b10 	vmov	d0, r8, r9
 800875e:	f7ff f9b9 	bl	8007ad4 <__ulp>
 8008762:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008766:	ec51 0b10 	vmov	r0, r1, d0
 800876a:	f7f7 ff45 	bl	80005f8 <__aeabi_dmul>
 800876e:	4642      	mov	r2, r8
 8008770:	464b      	mov	r3, r9
 8008772:	f7f7 fd8b 	bl	800028c <__adddf3>
 8008776:	460b      	mov	r3, r1
 8008778:	4979      	ldr	r1, [pc, #484]	; (8008960 <_strtod_l+0xbd0>)
 800877a:	4a7b      	ldr	r2, [pc, #492]	; (8008968 <_strtod_l+0xbd8>)
 800877c:	4019      	ands	r1, r3
 800877e:	4291      	cmp	r1, r2
 8008780:	4680      	mov	r8, r0
 8008782:	d944      	bls.n	800880e <_strtod_l+0xa7e>
 8008784:	ee18 2a90 	vmov	r2, s17
 8008788:	4b78      	ldr	r3, [pc, #480]	; (800896c <_strtod_l+0xbdc>)
 800878a:	429a      	cmp	r2, r3
 800878c:	d104      	bne.n	8008798 <_strtod_l+0xa08>
 800878e:	ee18 3a10 	vmov	r3, s16
 8008792:	3301      	adds	r3, #1
 8008794:	f43f ad40 	beq.w	8008218 <_strtod_l+0x488>
 8008798:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800896c <_strtod_l+0xbdc>
 800879c:	f04f 38ff 	mov.w	r8, #4294967295
 80087a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80087a2:	4620      	mov	r0, r4
 80087a4:	f7fe fe6a 	bl	800747c <_Bfree>
 80087a8:	9905      	ldr	r1, [sp, #20]
 80087aa:	4620      	mov	r0, r4
 80087ac:	f7fe fe66 	bl	800747c <_Bfree>
 80087b0:	4659      	mov	r1, fp
 80087b2:	4620      	mov	r0, r4
 80087b4:	f7fe fe62 	bl	800747c <_Bfree>
 80087b8:	4629      	mov	r1, r5
 80087ba:	4620      	mov	r0, r4
 80087bc:	f7fe fe5e 	bl	800747c <_Bfree>
 80087c0:	e609      	b.n	80083d6 <_strtod_l+0x646>
 80087c2:	f1b8 0f01 	cmp.w	r8, #1
 80087c6:	d103      	bne.n	80087d0 <_strtod_l+0xa40>
 80087c8:	f1b9 0f00 	cmp.w	r9, #0
 80087cc:	f43f ad95 	beq.w	80082fa <_strtod_l+0x56a>
 80087d0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008928 <_strtod_l+0xb98>
 80087d4:	4f60      	ldr	r7, [pc, #384]	; (8008958 <_strtod_l+0xbc8>)
 80087d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80087da:	2600      	movs	r6, #0
 80087dc:	e7ae      	b.n	800873c <_strtod_l+0x9ac>
 80087de:	4f5f      	ldr	r7, [pc, #380]	; (800895c <_strtod_l+0xbcc>)
 80087e0:	2600      	movs	r6, #0
 80087e2:	e7a7      	b.n	8008734 <_strtod_l+0x9a4>
 80087e4:	4b5d      	ldr	r3, [pc, #372]	; (800895c <_strtod_l+0xbcc>)
 80087e6:	4630      	mov	r0, r6
 80087e8:	4639      	mov	r1, r7
 80087ea:	2200      	movs	r2, #0
 80087ec:	f7f7 ff04 	bl	80005f8 <__aeabi_dmul>
 80087f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087f2:	4606      	mov	r6, r0
 80087f4:	460f      	mov	r7, r1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d09c      	beq.n	8008734 <_strtod_l+0x9a4>
 80087fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80087fe:	e79d      	b.n	800873c <_strtod_l+0x9ac>
 8008800:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008930 <_strtod_l+0xba0>
 8008804:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008808:	ec57 6b17 	vmov	r6, r7, d7
 800880c:	e796      	b.n	800873c <_strtod_l+0x9ac>
 800880e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008812:	9b04      	ldr	r3, [sp, #16]
 8008814:	46ca      	mov	sl, r9
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1c2      	bne.n	80087a0 <_strtod_l+0xa10>
 800881a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800881e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008820:	0d1b      	lsrs	r3, r3, #20
 8008822:	051b      	lsls	r3, r3, #20
 8008824:	429a      	cmp	r2, r3
 8008826:	d1bb      	bne.n	80087a0 <_strtod_l+0xa10>
 8008828:	4630      	mov	r0, r6
 800882a:	4639      	mov	r1, r7
 800882c:	f7f8 fbb6 	bl	8000f9c <__aeabi_d2lz>
 8008830:	f7f7 feb4 	bl	800059c <__aeabi_l2d>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	4630      	mov	r0, r6
 800883a:	4639      	mov	r1, r7
 800883c:	f7f7 fd24 	bl	8000288 <__aeabi_dsub>
 8008840:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008842:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008846:	ea43 0308 	orr.w	r3, r3, r8
 800884a:	4313      	orrs	r3, r2
 800884c:	4606      	mov	r6, r0
 800884e:	460f      	mov	r7, r1
 8008850:	d054      	beq.n	80088fc <_strtod_l+0xb6c>
 8008852:	a339      	add	r3, pc, #228	; (adr r3, 8008938 <_strtod_l+0xba8>)
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	f7f8 f940 	bl	8000adc <__aeabi_dcmplt>
 800885c:	2800      	cmp	r0, #0
 800885e:	f47f ace5 	bne.w	800822c <_strtod_l+0x49c>
 8008862:	a337      	add	r3, pc, #220	; (adr r3, 8008940 <_strtod_l+0xbb0>)
 8008864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008868:	4630      	mov	r0, r6
 800886a:	4639      	mov	r1, r7
 800886c:	f7f8 f954 	bl	8000b18 <__aeabi_dcmpgt>
 8008870:	2800      	cmp	r0, #0
 8008872:	d095      	beq.n	80087a0 <_strtod_l+0xa10>
 8008874:	e4da      	b.n	800822c <_strtod_l+0x49c>
 8008876:	9b04      	ldr	r3, [sp, #16]
 8008878:	b333      	cbz	r3, 80088c8 <_strtod_l+0xb38>
 800887a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800887c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008880:	d822      	bhi.n	80088c8 <_strtod_l+0xb38>
 8008882:	a331      	add	r3, pc, #196	; (adr r3, 8008948 <_strtod_l+0xbb8>)
 8008884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008888:	4630      	mov	r0, r6
 800888a:	4639      	mov	r1, r7
 800888c:	f7f8 f930 	bl	8000af0 <__aeabi_dcmple>
 8008890:	b1a0      	cbz	r0, 80088bc <_strtod_l+0xb2c>
 8008892:	4639      	mov	r1, r7
 8008894:	4630      	mov	r0, r6
 8008896:	f7f8 f987 	bl	8000ba8 <__aeabi_d2uiz>
 800889a:	2801      	cmp	r0, #1
 800889c:	bf38      	it	cc
 800889e:	2001      	movcc	r0, #1
 80088a0:	f7f7 fe30 	bl	8000504 <__aeabi_ui2d>
 80088a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a6:	4606      	mov	r6, r0
 80088a8:	460f      	mov	r7, r1
 80088aa:	bb23      	cbnz	r3, 80088f6 <_strtod_l+0xb66>
 80088ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088b0:	9010      	str	r0, [sp, #64]	; 0x40
 80088b2:	9311      	str	r3, [sp, #68]	; 0x44
 80088b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80088b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80088bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80088c4:	1a9b      	subs	r3, r3, r2
 80088c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80088c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80088cc:	eeb0 0a48 	vmov.f32	s0, s16
 80088d0:	eef0 0a68 	vmov.f32	s1, s17
 80088d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80088d8:	f7ff f8fc 	bl	8007ad4 <__ulp>
 80088dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80088e0:	ec53 2b10 	vmov	r2, r3, d0
 80088e4:	f7f7 fe88 	bl	80005f8 <__aeabi_dmul>
 80088e8:	ec53 2b18 	vmov	r2, r3, d8
 80088ec:	f7f7 fcce 	bl	800028c <__adddf3>
 80088f0:	4680      	mov	r8, r0
 80088f2:	4689      	mov	r9, r1
 80088f4:	e78d      	b.n	8008812 <_strtod_l+0xa82>
 80088f6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80088fa:	e7db      	b.n	80088b4 <_strtod_l+0xb24>
 80088fc:	a314      	add	r3, pc, #80	; (adr r3, 8008950 <_strtod_l+0xbc0>)
 80088fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008902:	f7f8 f8eb 	bl	8000adc <__aeabi_dcmplt>
 8008906:	e7b3      	b.n	8008870 <_strtod_l+0xae0>
 8008908:	2300      	movs	r3, #0
 800890a:	930a      	str	r3, [sp, #40]	; 0x28
 800890c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800890e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008910:	6013      	str	r3, [r2, #0]
 8008912:	f7ff ba7c 	b.w	8007e0e <_strtod_l+0x7e>
 8008916:	2a65      	cmp	r2, #101	; 0x65
 8008918:	f43f ab75 	beq.w	8008006 <_strtod_l+0x276>
 800891c:	2a45      	cmp	r2, #69	; 0x45
 800891e:	f43f ab72 	beq.w	8008006 <_strtod_l+0x276>
 8008922:	2301      	movs	r3, #1
 8008924:	f7ff bbaa 	b.w	800807c <_strtod_l+0x2ec>
 8008928:	00000000 	.word	0x00000000
 800892c:	bff00000 	.word	0xbff00000
 8008930:	00000000 	.word	0x00000000
 8008934:	3ff00000 	.word	0x3ff00000
 8008938:	94a03595 	.word	0x94a03595
 800893c:	3fdfffff 	.word	0x3fdfffff
 8008940:	35afe535 	.word	0x35afe535
 8008944:	3fe00000 	.word	0x3fe00000
 8008948:	ffc00000 	.word	0xffc00000
 800894c:	41dfffff 	.word	0x41dfffff
 8008950:	94a03595 	.word	0x94a03595
 8008954:	3fcfffff 	.word	0x3fcfffff
 8008958:	3ff00000 	.word	0x3ff00000
 800895c:	3fe00000 	.word	0x3fe00000
 8008960:	7ff00000 	.word	0x7ff00000
 8008964:	7fe00000 	.word	0x7fe00000
 8008968:	7c9fffff 	.word	0x7c9fffff
 800896c:	7fefffff 	.word	0x7fefffff

08008970 <_strtod_r>:
 8008970:	4b01      	ldr	r3, [pc, #4]	; (8008978 <_strtod_r+0x8>)
 8008972:	f7ff ba0d 	b.w	8007d90 <_strtod_l>
 8008976:	bf00      	nop
 8008978:	20000068 	.word	0x20000068

0800897c <_strtol_l.constprop.0>:
 800897c:	2b01      	cmp	r3, #1
 800897e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008982:	d001      	beq.n	8008988 <_strtol_l.constprop.0+0xc>
 8008984:	2b24      	cmp	r3, #36	; 0x24
 8008986:	d906      	bls.n	8008996 <_strtol_l.constprop.0+0x1a>
 8008988:	f7fd fd8a 	bl	80064a0 <__errno>
 800898c:	2316      	movs	r3, #22
 800898e:	6003      	str	r3, [r0, #0]
 8008990:	2000      	movs	r0, #0
 8008992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008996:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008a7c <_strtol_l.constprop.0+0x100>
 800899a:	460d      	mov	r5, r1
 800899c:	462e      	mov	r6, r5
 800899e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089a2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80089a6:	f017 0708 	ands.w	r7, r7, #8
 80089aa:	d1f7      	bne.n	800899c <_strtol_l.constprop.0+0x20>
 80089ac:	2c2d      	cmp	r4, #45	; 0x2d
 80089ae:	d132      	bne.n	8008a16 <_strtol_l.constprop.0+0x9a>
 80089b0:	782c      	ldrb	r4, [r5, #0]
 80089b2:	2701      	movs	r7, #1
 80089b4:	1cb5      	adds	r5, r6, #2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d05b      	beq.n	8008a72 <_strtol_l.constprop.0+0xf6>
 80089ba:	2b10      	cmp	r3, #16
 80089bc:	d109      	bne.n	80089d2 <_strtol_l.constprop.0+0x56>
 80089be:	2c30      	cmp	r4, #48	; 0x30
 80089c0:	d107      	bne.n	80089d2 <_strtol_l.constprop.0+0x56>
 80089c2:	782c      	ldrb	r4, [r5, #0]
 80089c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80089c8:	2c58      	cmp	r4, #88	; 0x58
 80089ca:	d14d      	bne.n	8008a68 <_strtol_l.constprop.0+0xec>
 80089cc:	786c      	ldrb	r4, [r5, #1]
 80089ce:	2310      	movs	r3, #16
 80089d0:	3502      	adds	r5, #2
 80089d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80089d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80089da:	f04f 0e00 	mov.w	lr, #0
 80089de:	fbb8 f9f3 	udiv	r9, r8, r3
 80089e2:	4676      	mov	r6, lr
 80089e4:	fb03 8a19 	mls	sl, r3, r9, r8
 80089e8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80089ec:	f1bc 0f09 	cmp.w	ip, #9
 80089f0:	d816      	bhi.n	8008a20 <_strtol_l.constprop.0+0xa4>
 80089f2:	4664      	mov	r4, ip
 80089f4:	42a3      	cmp	r3, r4
 80089f6:	dd24      	ble.n	8008a42 <_strtol_l.constprop.0+0xc6>
 80089f8:	f1be 3fff 	cmp.w	lr, #4294967295
 80089fc:	d008      	beq.n	8008a10 <_strtol_l.constprop.0+0x94>
 80089fe:	45b1      	cmp	r9, r6
 8008a00:	d31c      	bcc.n	8008a3c <_strtol_l.constprop.0+0xc0>
 8008a02:	d101      	bne.n	8008a08 <_strtol_l.constprop.0+0x8c>
 8008a04:	45a2      	cmp	sl, r4
 8008a06:	db19      	blt.n	8008a3c <_strtol_l.constprop.0+0xc0>
 8008a08:	fb06 4603 	mla	r6, r6, r3, r4
 8008a0c:	f04f 0e01 	mov.w	lr, #1
 8008a10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a14:	e7e8      	b.n	80089e8 <_strtol_l.constprop.0+0x6c>
 8008a16:	2c2b      	cmp	r4, #43	; 0x2b
 8008a18:	bf04      	itt	eq
 8008a1a:	782c      	ldrbeq	r4, [r5, #0]
 8008a1c:	1cb5      	addeq	r5, r6, #2
 8008a1e:	e7ca      	b.n	80089b6 <_strtol_l.constprop.0+0x3a>
 8008a20:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008a24:	f1bc 0f19 	cmp.w	ip, #25
 8008a28:	d801      	bhi.n	8008a2e <_strtol_l.constprop.0+0xb2>
 8008a2a:	3c37      	subs	r4, #55	; 0x37
 8008a2c:	e7e2      	b.n	80089f4 <_strtol_l.constprop.0+0x78>
 8008a2e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008a32:	f1bc 0f19 	cmp.w	ip, #25
 8008a36:	d804      	bhi.n	8008a42 <_strtol_l.constprop.0+0xc6>
 8008a38:	3c57      	subs	r4, #87	; 0x57
 8008a3a:	e7db      	b.n	80089f4 <_strtol_l.constprop.0+0x78>
 8008a3c:	f04f 3eff 	mov.w	lr, #4294967295
 8008a40:	e7e6      	b.n	8008a10 <_strtol_l.constprop.0+0x94>
 8008a42:	f1be 3fff 	cmp.w	lr, #4294967295
 8008a46:	d105      	bne.n	8008a54 <_strtol_l.constprop.0+0xd8>
 8008a48:	2322      	movs	r3, #34	; 0x22
 8008a4a:	6003      	str	r3, [r0, #0]
 8008a4c:	4646      	mov	r6, r8
 8008a4e:	b942      	cbnz	r2, 8008a62 <_strtol_l.constprop.0+0xe6>
 8008a50:	4630      	mov	r0, r6
 8008a52:	e79e      	b.n	8008992 <_strtol_l.constprop.0+0x16>
 8008a54:	b107      	cbz	r7, 8008a58 <_strtol_l.constprop.0+0xdc>
 8008a56:	4276      	negs	r6, r6
 8008a58:	2a00      	cmp	r2, #0
 8008a5a:	d0f9      	beq.n	8008a50 <_strtol_l.constprop.0+0xd4>
 8008a5c:	f1be 0f00 	cmp.w	lr, #0
 8008a60:	d000      	beq.n	8008a64 <_strtol_l.constprop.0+0xe8>
 8008a62:	1e69      	subs	r1, r5, #1
 8008a64:	6011      	str	r1, [r2, #0]
 8008a66:	e7f3      	b.n	8008a50 <_strtol_l.constprop.0+0xd4>
 8008a68:	2430      	movs	r4, #48	; 0x30
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1b1      	bne.n	80089d2 <_strtol_l.constprop.0+0x56>
 8008a6e:	2308      	movs	r3, #8
 8008a70:	e7af      	b.n	80089d2 <_strtol_l.constprop.0+0x56>
 8008a72:	2c30      	cmp	r4, #48	; 0x30
 8008a74:	d0a5      	beq.n	80089c2 <_strtol_l.constprop.0+0x46>
 8008a76:	230a      	movs	r3, #10
 8008a78:	e7ab      	b.n	80089d2 <_strtol_l.constprop.0+0x56>
 8008a7a:	bf00      	nop
 8008a7c:	08009f69 	.word	0x08009f69

08008a80 <_strtol_r>:
 8008a80:	f7ff bf7c 	b.w	800897c <_strtol_l.constprop.0>

08008a84 <__ssputs_r>:
 8008a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a88:	688e      	ldr	r6, [r1, #8]
 8008a8a:	461f      	mov	r7, r3
 8008a8c:	42be      	cmp	r6, r7
 8008a8e:	680b      	ldr	r3, [r1, #0]
 8008a90:	4682      	mov	sl, r0
 8008a92:	460c      	mov	r4, r1
 8008a94:	4690      	mov	r8, r2
 8008a96:	d82c      	bhi.n	8008af2 <__ssputs_r+0x6e>
 8008a98:	898a      	ldrh	r2, [r1, #12]
 8008a9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a9e:	d026      	beq.n	8008aee <__ssputs_r+0x6a>
 8008aa0:	6965      	ldr	r5, [r4, #20]
 8008aa2:	6909      	ldr	r1, [r1, #16]
 8008aa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008aa8:	eba3 0901 	sub.w	r9, r3, r1
 8008aac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ab0:	1c7b      	adds	r3, r7, #1
 8008ab2:	444b      	add	r3, r9
 8008ab4:	106d      	asrs	r5, r5, #1
 8008ab6:	429d      	cmp	r5, r3
 8008ab8:	bf38      	it	cc
 8008aba:	461d      	movcc	r5, r3
 8008abc:	0553      	lsls	r3, r2, #21
 8008abe:	d527      	bpl.n	8008b10 <__ssputs_r+0x8c>
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	f7fe fc0f 	bl	80072e4 <_malloc_r>
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	b360      	cbz	r0, 8008b24 <__ssputs_r+0xa0>
 8008aca:	6921      	ldr	r1, [r4, #16]
 8008acc:	464a      	mov	r2, r9
 8008ace:	f000 fa1b 	bl	8008f08 <memcpy>
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008adc:	81a3      	strh	r3, [r4, #12]
 8008ade:	6126      	str	r6, [r4, #16]
 8008ae0:	6165      	str	r5, [r4, #20]
 8008ae2:	444e      	add	r6, r9
 8008ae4:	eba5 0509 	sub.w	r5, r5, r9
 8008ae8:	6026      	str	r6, [r4, #0]
 8008aea:	60a5      	str	r5, [r4, #8]
 8008aec:	463e      	mov	r6, r7
 8008aee:	42be      	cmp	r6, r7
 8008af0:	d900      	bls.n	8008af4 <__ssputs_r+0x70>
 8008af2:	463e      	mov	r6, r7
 8008af4:	6820      	ldr	r0, [r4, #0]
 8008af6:	4632      	mov	r2, r6
 8008af8:	4641      	mov	r1, r8
 8008afa:	f000 f9c9 	bl	8008e90 <memmove>
 8008afe:	68a3      	ldr	r3, [r4, #8]
 8008b00:	1b9b      	subs	r3, r3, r6
 8008b02:	60a3      	str	r3, [r4, #8]
 8008b04:	6823      	ldr	r3, [r4, #0]
 8008b06:	4433      	add	r3, r6
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b10:	462a      	mov	r2, r5
 8008b12:	f000 fdae 	bl	8009672 <_realloc_r>
 8008b16:	4606      	mov	r6, r0
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d1e0      	bne.n	8008ade <__ssputs_r+0x5a>
 8008b1c:	6921      	ldr	r1, [r4, #16]
 8008b1e:	4650      	mov	r0, sl
 8008b20:	f7fe fb6c 	bl	80071fc <_free_r>
 8008b24:	230c      	movs	r3, #12
 8008b26:	f8ca 3000 	str.w	r3, [sl]
 8008b2a:	89a3      	ldrh	r3, [r4, #12]
 8008b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b30:	81a3      	strh	r3, [r4, #12]
 8008b32:	f04f 30ff 	mov.w	r0, #4294967295
 8008b36:	e7e9      	b.n	8008b0c <__ssputs_r+0x88>

08008b38 <_svfiprintf_r>:
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	4698      	mov	r8, r3
 8008b3e:	898b      	ldrh	r3, [r1, #12]
 8008b40:	061b      	lsls	r3, r3, #24
 8008b42:	b09d      	sub	sp, #116	; 0x74
 8008b44:	4607      	mov	r7, r0
 8008b46:	460d      	mov	r5, r1
 8008b48:	4614      	mov	r4, r2
 8008b4a:	d50e      	bpl.n	8008b6a <_svfiprintf_r+0x32>
 8008b4c:	690b      	ldr	r3, [r1, #16]
 8008b4e:	b963      	cbnz	r3, 8008b6a <_svfiprintf_r+0x32>
 8008b50:	2140      	movs	r1, #64	; 0x40
 8008b52:	f7fe fbc7 	bl	80072e4 <_malloc_r>
 8008b56:	6028      	str	r0, [r5, #0]
 8008b58:	6128      	str	r0, [r5, #16]
 8008b5a:	b920      	cbnz	r0, 8008b66 <_svfiprintf_r+0x2e>
 8008b5c:	230c      	movs	r3, #12
 8008b5e:	603b      	str	r3, [r7, #0]
 8008b60:	f04f 30ff 	mov.w	r0, #4294967295
 8008b64:	e0d0      	b.n	8008d08 <_svfiprintf_r+0x1d0>
 8008b66:	2340      	movs	r3, #64	; 0x40
 8008b68:	616b      	str	r3, [r5, #20]
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b6e:	2320      	movs	r3, #32
 8008b70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b74:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b78:	2330      	movs	r3, #48	; 0x30
 8008b7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008d20 <_svfiprintf_r+0x1e8>
 8008b7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b82:	f04f 0901 	mov.w	r9, #1
 8008b86:	4623      	mov	r3, r4
 8008b88:	469a      	mov	sl, r3
 8008b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b8e:	b10a      	cbz	r2, 8008b94 <_svfiprintf_r+0x5c>
 8008b90:	2a25      	cmp	r2, #37	; 0x25
 8008b92:	d1f9      	bne.n	8008b88 <_svfiprintf_r+0x50>
 8008b94:	ebba 0b04 	subs.w	fp, sl, r4
 8008b98:	d00b      	beq.n	8008bb2 <_svfiprintf_r+0x7a>
 8008b9a:	465b      	mov	r3, fp
 8008b9c:	4622      	mov	r2, r4
 8008b9e:	4629      	mov	r1, r5
 8008ba0:	4638      	mov	r0, r7
 8008ba2:	f7ff ff6f 	bl	8008a84 <__ssputs_r>
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	f000 80a9 	beq.w	8008cfe <_svfiprintf_r+0x1c6>
 8008bac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bae:	445a      	add	r2, fp
 8008bb0:	9209      	str	r2, [sp, #36]	; 0x24
 8008bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f000 80a1 	beq.w	8008cfe <_svfiprintf_r+0x1c6>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bc6:	f10a 0a01 	add.w	sl, sl, #1
 8008bca:	9304      	str	r3, [sp, #16]
 8008bcc:	9307      	str	r3, [sp, #28]
 8008bce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bd2:	931a      	str	r3, [sp, #104]	; 0x68
 8008bd4:	4654      	mov	r4, sl
 8008bd6:	2205      	movs	r2, #5
 8008bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bdc:	4850      	ldr	r0, [pc, #320]	; (8008d20 <_svfiprintf_r+0x1e8>)
 8008bde:	f7f7 faf7 	bl	80001d0 <memchr>
 8008be2:	9a04      	ldr	r2, [sp, #16]
 8008be4:	b9d8      	cbnz	r0, 8008c1e <_svfiprintf_r+0xe6>
 8008be6:	06d0      	lsls	r0, r2, #27
 8008be8:	bf44      	itt	mi
 8008bea:	2320      	movmi	r3, #32
 8008bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bf0:	0711      	lsls	r1, r2, #28
 8008bf2:	bf44      	itt	mi
 8008bf4:	232b      	movmi	r3, #43	; 0x2b
 8008bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8008bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8008c00:	d015      	beq.n	8008c2e <_svfiprintf_r+0xf6>
 8008c02:	9a07      	ldr	r2, [sp, #28]
 8008c04:	4654      	mov	r4, sl
 8008c06:	2000      	movs	r0, #0
 8008c08:	f04f 0c0a 	mov.w	ip, #10
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c12:	3b30      	subs	r3, #48	; 0x30
 8008c14:	2b09      	cmp	r3, #9
 8008c16:	d94d      	bls.n	8008cb4 <_svfiprintf_r+0x17c>
 8008c18:	b1b0      	cbz	r0, 8008c48 <_svfiprintf_r+0x110>
 8008c1a:	9207      	str	r2, [sp, #28]
 8008c1c:	e014      	b.n	8008c48 <_svfiprintf_r+0x110>
 8008c1e:	eba0 0308 	sub.w	r3, r0, r8
 8008c22:	fa09 f303 	lsl.w	r3, r9, r3
 8008c26:	4313      	orrs	r3, r2
 8008c28:	9304      	str	r3, [sp, #16]
 8008c2a:	46a2      	mov	sl, r4
 8008c2c:	e7d2      	b.n	8008bd4 <_svfiprintf_r+0x9c>
 8008c2e:	9b03      	ldr	r3, [sp, #12]
 8008c30:	1d19      	adds	r1, r3, #4
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	9103      	str	r1, [sp, #12]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	bfbb      	ittet	lt
 8008c3a:	425b      	neglt	r3, r3
 8008c3c:	f042 0202 	orrlt.w	r2, r2, #2
 8008c40:	9307      	strge	r3, [sp, #28]
 8008c42:	9307      	strlt	r3, [sp, #28]
 8008c44:	bfb8      	it	lt
 8008c46:	9204      	strlt	r2, [sp, #16]
 8008c48:	7823      	ldrb	r3, [r4, #0]
 8008c4a:	2b2e      	cmp	r3, #46	; 0x2e
 8008c4c:	d10c      	bne.n	8008c68 <_svfiprintf_r+0x130>
 8008c4e:	7863      	ldrb	r3, [r4, #1]
 8008c50:	2b2a      	cmp	r3, #42	; 0x2a
 8008c52:	d134      	bne.n	8008cbe <_svfiprintf_r+0x186>
 8008c54:	9b03      	ldr	r3, [sp, #12]
 8008c56:	1d1a      	adds	r2, r3, #4
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	9203      	str	r2, [sp, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	bfb8      	it	lt
 8008c60:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c64:	3402      	adds	r4, #2
 8008c66:	9305      	str	r3, [sp, #20]
 8008c68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008d30 <_svfiprintf_r+0x1f8>
 8008c6c:	7821      	ldrb	r1, [r4, #0]
 8008c6e:	2203      	movs	r2, #3
 8008c70:	4650      	mov	r0, sl
 8008c72:	f7f7 faad 	bl	80001d0 <memchr>
 8008c76:	b138      	cbz	r0, 8008c88 <_svfiprintf_r+0x150>
 8008c78:	9b04      	ldr	r3, [sp, #16]
 8008c7a:	eba0 000a 	sub.w	r0, r0, sl
 8008c7e:	2240      	movs	r2, #64	; 0x40
 8008c80:	4082      	lsls	r2, r0
 8008c82:	4313      	orrs	r3, r2
 8008c84:	3401      	adds	r4, #1
 8008c86:	9304      	str	r3, [sp, #16]
 8008c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c8c:	4825      	ldr	r0, [pc, #148]	; (8008d24 <_svfiprintf_r+0x1ec>)
 8008c8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c92:	2206      	movs	r2, #6
 8008c94:	f7f7 fa9c 	bl	80001d0 <memchr>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d038      	beq.n	8008d0e <_svfiprintf_r+0x1d6>
 8008c9c:	4b22      	ldr	r3, [pc, #136]	; (8008d28 <_svfiprintf_r+0x1f0>)
 8008c9e:	bb1b      	cbnz	r3, 8008ce8 <_svfiprintf_r+0x1b0>
 8008ca0:	9b03      	ldr	r3, [sp, #12]
 8008ca2:	3307      	adds	r3, #7
 8008ca4:	f023 0307 	bic.w	r3, r3, #7
 8008ca8:	3308      	adds	r3, #8
 8008caa:	9303      	str	r3, [sp, #12]
 8008cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cae:	4433      	add	r3, r6
 8008cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb2:	e768      	b.n	8008b86 <_svfiprintf_r+0x4e>
 8008cb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cb8:	460c      	mov	r4, r1
 8008cba:	2001      	movs	r0, #1
 8008cbc:	e7a6      	b.n	8008c0c <_svfiprintf_r+0xd4>
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	3401      	adds	r4, #1
 8008cc2:	9305      	str	r3, [sp, #20]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	f04f 0c0a 	mov.w	ip, #10
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cd0:	3a30      	subs	r2, #48	; 0x30
 8008cd2:	2a09      	cmp	r2, #9
 8008cd4:	d903      	bls.n	8008cde <_svfiprintf_r+0x1a6>
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0c6      	beq.n	8008c68 <_svfiprintf_r+0x130>
 8008cda:	9105      	str	r1, [sp, #20]
 8008cdc:	e7c4      	b.n	8008c68 <_svfiprintf_r+0x130>
 8008cde:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e7f0      	b.n	8008cca <_svfiprintf_r+0x192>
 8008ce8:	ab03      	add	r3, sp, #12
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	462a      	mov	r2, r5
 8008cee:	4b0f      	ldr	r3, [pc, #60]	; (8008d2c <_svfiprintf_r+0x1f4>)
 8008cf0:	a904      	add	r1, sp, #16
 8008cf2:	4638      	mov	r0, r7
 8008cf4:	f7fc fc98 	bl	8005628 <_printf_float>
 8008cf8:	1c42      	adds	r2, r0, #1
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	d1d6      	bne.n	8008cac <_svfiprintf_r+0x174>
 8008cfe:	89ab      	ldrh	r3, [r5, #12]
 8008d00:	065b      	lsls	r3, r3, #25
 8008d02:	f53f af2d 	bmi.w	8008b60 <_svfiprintf_r+0x28>
 8008d06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d08:	b01d      	add	sp, #116	; 0x74
 8008d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0e:	ab03      	add	r3, sp, #12
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	462a      	mov	r2, r5
 8008d14:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <_svfiprintf_r+0x1f4>)
 8008d16:	a904      	add	r1, sp, #16
 8008d18:	4638      	mov	r0, r7
 8008d1a:	f7fc ff29 	bl	8005b70 <_printf_i>
 8008d1e:	e7eb      	b.n	8008cf8 <_svfiprintf_r+0x1c0>
 8008d20:	0800a069 	.word	0x0800a069
 8008d24:	0800a073 	.word	0x0800a073
 8008d28:	08005629 	.word	0x08005629
 8008d2c:	08008a85 	.word	0x08008a85
 8008d30:	0800a06f 	.word	0x0800a06f

08008d34 <__sflush_r>:
 8008d34:	898a      	ldrh	r2, [r1, #12]
 8008d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	0710      	lsls	r0, r2, #28
 8008d3e:	460c      	mov	r4, r1
 8008d40:	d458      	bmi.n	8008df4 <__sflush_r+0xc0>
 8008d42:	684b      	ldr	r3, [r1, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	dc05      	bgt.n	8008d54 <__sflush_r+0x20>
 8008d48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	dc02      	bgt.n	8008d54 <__sflush_r+0x20>
 8008d4e:	2000      	movs	r0, #0
 8008d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d56:	2e00      	cmp	r6, #0
 8008d58:	d0f9      	beq.n	8008d4e <__sflush_r+0x1a>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d60:	682f      	ldr	r7, [r5, #0]
 8008d62:	6a21      	ldr	r1, [r4, #32]
 8008d64:	602b      	str	r3, [r5, #0]
 8008d66:	d032      	beq.n	8008dce <__sflush_r+0x9a>
 8008d68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d6a:	89a3      	ldrh	r3, [r4, #12]
 8008d6c:	075a      	lsls	r2, r3, #29
 8008d6e:	d505      	bpl.n	8008d7c <__sflush_r+0x48>
 8008d70:	6863      	ldr	r3, [r4, #4]
 8008d72:	1ac0      	subs	r0, r0, r3
 8008d74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d76:	b10b      	cbz	r3, 8008d7c <__sflush_r+0x48>
 8008d78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d7a:	1ac0      	subs	r0, r0, r3
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	4602      	mov	r2, r0
 8008d80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d82:	6a21      	ldr	r1, [r4, #32]
 8008d84:	4628      	mov	r0, r5
 8008d86:	47b0      	blx	r6
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	89a3      	ldrh	r3, [r4, #12]
 8008d8c:	d106      	bne.n	8008d9c <__sflush_r+0x68>
 8008d8e:	6829      	ldr	r1, [r5, #0]
 8008d90:	291d      	cmp	r1, #29
 8008d92:	d82b      	bhi.n	8008dec <__sflush_r+0xb8>
 8008d94:	4a29      	ldr	r2, [pc, #164]	; (8008e3c <__sflush_r+0x108>)
 8008d96:	410a      	asrs	r2, r1
 8008d98:	07d6      	lsls	r6, r2, #31
 8008d9a:	d427      	bmi.n	8008dec <__sflush_r+0xb8>
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	6062      	str	r2, [r4, #4]
 8008da0:	04d9      	lsls	r1, r3, #19
 8008da2:	6922      	ldr	r2, [r4, #16]
 8008da4:	6022      	str	r2, [r4, #0]
 8008da6:	d504      	bpl.n	8008db2 <__sflush_r+0x7e>
 8008da8:	1c42      	adds	r2, r0, #1
 8008daa:	d101      	bne.n	8008db0 <__sflush_r+0x7c>
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	b903      	cbnz	r3, 8008db2 <__sflush_r+0x7e>
 8008db0:	6560      	str	r0, [r4, #84]	; 0x54
 8008db2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008db4:	602f      	str	r7, [r5, #0]
 8008db6:	2900      	cmp	r1, #0
 8008db8:	d0c9      	beq.n	8008d4e <__sflush_r+0x1a>
 8008dba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dbe:	4299      	cmp	r1, r3
 8008dc0:	d002      	beq.n	8008dc8 <__sflush_r+0x94>
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	f7fe fa1a 	bl	80071fc <_free_r>
 8008dc8:	2000      	movs	r0, #0
 8008dca:	6360      	str	r0, [r4, #52]	; 0x34
 8008dcc:	e7c0      	b.n	8008d50 <__sflush_r+0x1c>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	47b0      	blx	r6
 8008dd4:	1c41      	adds	r1, r0, #1
 8008dd6:	d1c8      	bne.n	8008d6a <__sflush_r+0x36>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d0c5      	beq.n	8008d6a <__sflush_r+0x36>
 8008dde:	2b1d      	cmp	r3, #29
 8008de0:	d001      	beq.n	8008de6 <__sflush_r+0xb2>
 8008de2:	2b16      	cmp	r3, #22
 8008de4:	d101      	bne.n	8008dea <__sflush_r+0xb6>
 8008de6:	602f      	str	r7, [r5, #0]
 8008de8:	e7b1      	b.n	8008d4e <__sflush_r+0x1a>
 8008dea:	89a3      	ldrh	r3, [r4, #12]
 8008dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008df0:	81a3      	strh	r3, [r4, #12]
 8008df2:	e7ad      	b.n	8008d50 <__sflush_r+0x1c>
 8008df4:	690f      	ldr	r7, [r1, #16]
 8008df6:	2f00      	cmp	r7, #0
 8008df8:	d0a9      	beq.n	8008d4e <__sflush_r+0x1a>
 8008dfa:	0793      	lsls	r3, r2, #30
 8008dfc:	680e      	ldr	r6, [r1, #0]
 8008dfe:	bf08      	it	eq
 8008e00:	694b      	ldreq	r3, [r1, #20]
 8008e02:	600f      	str	r7, [r1, #0]
 8008e04:	bf18      	it	ne
 8008e06:	2300      	movne	r3, #0
 8008e08:	eba6 0807 	sub.w	r8, r6, r7
 8008e0c:	608b      	str	r3, [r1, #8]
 8008e0e:	f1b8 0f00 	cmp.w	r8, #0
 8008e12:	dd9c      	ble.n	8008d4e <__sflush_r+0x1a>
 8008e14:	6a21      	ldr	r1, [r4, #32]
 8008e16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e18:	4643      	mov	r3, r8
 8008e1a:	463a      	mov	r2, r7
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	47b0      	blx	r6
 8008e20:	2800      	cmp	r0, #0
 8008e22:	dc06      	bgt.n	8008e32 <__sflush_r+0xfe>
 8008e24:	89a3      	ldrh	r3, [r4, #12]
 8008e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e2a:	81a3      	strh	r3, [r4, #12]
 8008e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e30:	e78e      	b.n	8008d50 <__sflush_r+0x1c>
 8008e32:	4407      	add	r7, r0
 8008e34:	eba8 0800 	sub.w	r8, r8, r0
 8008e38:	e7e9      	b.n	8008e0e <__sflush_r+0xda>
 8008e3a:	bf00      	nop
 8008e3c:	dfbffffe 	.word	0xdfbffffe

08008e40 <_fflush_r>:
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	690b      	ldr	r3, [r1, #16]
 8008e44:	4605      	mov	r5, r0
 8008e46:	460c      	mov	r4, r1
 8008e48:	b913      	cbnz	r3, 8008e50 <_fflush_r+0x10>
 8008e4a:	2500      	movs	r5, #0
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	bd38      	pop	{r3, r4, r5, pc}
 8008e50:	b118      	cbz	r0, 8008e5a <_fflush_r+0x1a>
 8008e52:	6a03      	ldr	r3, [r0, #32]
 8008e54:	b90b      	cbnz	r3, 8008e5a <_fflush_r+0x1a>
 8008e56:	f7fd fa37 	bl	80062c8 <__sinit>
 8008e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d0f3      	beq.n	8008e4a <_fflush_r+0xa>
 8008e62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e64:	07d0      	lsls	r0, r2, #31
 8008e66:	d404      	bmi.n	8008e72 <_fflush_r+0x32>
 8008e68:	0599      	lsls	r1, r3, #22
 8008e6a:	d402      	bmi.n	8008e72 <_fflush_r+0x32>
 8008e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e6e:	f7fd fb41 	bl	80064f4 <__retarget_lock_acquire_recursive>
 8008e72:	4628      	mov	r0, r5
 8008e74:	4621      	mov	r1, r4
 8008e76:	f7ff ff5d 	bl	8008d34 <__sflush_r>
 8008e7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e7c:	07da      	lsls	r2, r3, #31
 8008e7e:	4605      	mov	r5, r0
 8008e80:	d4e4      	bmi.n	8008e4c <_fflush_r+0xc>
 8008e82:	89a3      	ldrh	r3, [r4, #12]
 8008e84:	059b      	lsls	r3, r3, #22
 8008e86:	d4e1      	bmi.n	8008e4c <_fflush_r+0xc>
 8008e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e8a:	f7fd fb34 	bl	80064f6 <__retarget_lock_release_recursive>
 8008e8e:	e7dd      	b.n	8008e4c <_fflush_r+0xc>

08008e90 <memmove>:
 8008e90:	4288      	cmp	r0, r1
 8008e92:	b510      	push	{r4, lr}
 8008e94:	eb01 0402 	add.w	r4, r1, r2
 8008e98:	d902      	bls.n	8008ea0 <memmove+0x10>
 8008e9a:	4284      	cmp	r4, r0
 8008e9c:	4623      	mov	r3, r4
 8008e9e:	d807      	bhi.n	8008eb0 <memmove+0x20>
 8008ea0:	1e43      	subs	r3, r0, #1
 8008ea2:	42a1      	cmp	r1, r4
 8008ea4:	d008      	beq.n	8008eb8 <memmove+0x28>
 8008ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008eae:	e7f8      	b.n	8008ea2 <memmove+0x12>
 8008eb0:	4402      	add	r2, r0
 8008eb2:	4601      	mov	r1, r0
 8008eb4:	428a      	cmp	r2, r1
 8008eb6:	d100      	bne.n	8008eba <memmove+0x2a>
 8008eb8:	bd10      	pop	{r4, pc}
 8008eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ec2:	e7f7      	b.n	8008eb4 <memmove+0x24>

08008ec4 <strncmp>:
 8008ec4:	b510      	push	{r4, lr}
 8008ec6:	b16a      	cbz	r2, 8008ee4 <strncmp+0x20>
 8008ec8:	3901      	subs	r1, #1
 8008eca:	1884      	adds	r4, r0, r2
 8008ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ed0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d103      	bne.n	8008ee0 <strncmp+0x1c>
 8008ed8:	42a0      	cmp	r0, r4
 8008eda:	d001      	beq.n	8008ee0 <strncmp+0x1c>
 8008edc:	2a00      	cmp	r2, #0
 8008ede:	d1f5      	bne.n	8008ecc <strncmp+0x8>
 8008ee0:	1ad0      	subs	r0, r2, r3
 8008ee2:	bd10      	pop	{r4, pc}
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	e7fc      	b.n	8008ee2 <strncmp+0x1e>

08008ee8 <_sbrk_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d06      	ldr	r5, [pc, #24]	; (8008f04 <_sbrk_r+0x1c>)
 8008eec:	2300      	movs	r3, #0
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	602b      	str	r3, [r5, #0]
 8008ef4:	f7f8 fd0e 	bl	8001914 <_sbrk>
 8008ef8:	1c43      	adds	r3, r0, #1
 8008efa:	d102      	bne.n	8008f02 <_sbrk_r+0x1a>
 8008efc:	682b      	ldr	r3, [r5, #0]
 8008efe:	b103      	cbz	r3, 8008f02 <_sbrk_r+0x1a>
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	bd38      	pop	{r3, r4, r5, pc}
 8008f04:	20000508 	.word	0x20000508

08008f08 <memcpy>:
 8008f08:	440a      	add	r2, r1
 8008f0a:	4291      	cmp	r1, r2
 8008f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f10:	d100      	bne.n	8008f14 <memcpy+0xc>
 8008f12:	4770      	bx	lr
 8008f14:	b510      	push	{r4, lr}
 8008f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f1e:	4291      	cmp	r1, r2
 8008f20:	d1f9      	bne.n	8008f16 <memcpy+0xe>
 8008f22:	bd10      	pop	{r4, pc}
 8008f24:	0000      	movs	r0, r0
	...

08008f28 <nan>:
 8008f28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008f30 <nan+0x8>
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	00000000 	.word	0x00000000
 8008f34:	7ff80000 	.word	0x7ff80000

08008f38 <__assert_func>:
 8008f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f3a:	4614      	mov	r4, r2
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	4b09      	ldr	r3, [pc, #36]	; (8008f64 <__assert_func+0x2c>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4605      	mov	r5, r0
 8008f44:	68d8      	ldr	r0, [r3, #12]
 8008f46:	b14c      	cbz	r4, 8008f5c <__assert_func+0x24>
 8008f48:	4b07      	ldr	r3, [pc, #28]	; (8008f68 <__assert_func+0x30>)
 8008f4a:	9100      	str	r1, [sp, #0]
 8008f4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f50:	4906      	ldr	r1, [pc, #24]	; (8008f6c <__assert_func+0x34>)
 8008f52:	462b      	mov	r3, r5
 8008f54:	f000 fbca 	bl	80096ec <fiprintf>
 8008f58:	f000 fbda 	bl	8009710 <abort>
 8008f5c:	4b04      	ldr	r3, [pc, #16]	; (8008f70 <__assert_func+0x38>)
 8008f5e:	461c      	mov	r4, r3
 8008f60:	e7f3      	b.n	8008f4a <__assert_func+0x12>
 8008f62:	bf00      	nop
 8008f64:	20000064 	.word	0x20000064
 8008f68:	0800a082 	.word	0x0800a082
 8008f6c:	0800a08f 	.word	0x0800a08f
 8008f70:	0800a0bd 	.word	0x0800a0bd

08008f74 <_calloc_r>:
 8008f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f76:	fba1 2402 	umull	r2, r4, r1, r2
 8008f7a:	b94c      	cbnz	r4, 8008f90 <_calloc_r+0x1c>
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	9201      	str	r2, [sp, #4]
 8008f80:	f7fe f9b0 	bl	80072e4 <_malloc_r>
 8008f84:	9a01      	ldr	r2, [sp, #4]
 8008f86:	4605      	mov	r5, r0
 8008f88:	b930      	cbnz	r0, 8008f98 <_calloc_r+0x24>
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	b003      	add	sp, #12
 8008f8e:	bd30      	pop	{r4, r5, pc}
 8008f90:	220c      	movs	r2, #12
 8008f92:	6002      	str	r2, [r0, #0]
 8008f94:	2500      	movs	r5, #0
 8008f96:	e7f8      	b.n	8008f8a <_calloc_r+0x16>
 8008f98:	4621      	mov	r1, r4
 8008f9a:	f7fd fa2e 	bl	80063fa <memset>
 8008f9e:	e7f4      	b.n	8008f8a <_calloc_r+0x16>

08008fa0 <rshift>:
 8008fa0:	6903      	ldr	r3, [r0, #16]
 8008fa2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008fa6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008faa:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008fae:	f100 0414 	add.w	r4, r0, #20
 8008fb2:	dd45      	ble.n	8009040 <rshift+0xa0>
 8008fb4:	f011 011f 	ands.w	r1, r1, #31
 8008fb8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008fbc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008fc0:	d10c      	bne.n	8008fdc <rshift+0x3c>
 8008fc2:	f100 0710 	add.w	r7, r0, #16
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	42b1      	cmp	r1, r6
 8008fca:	d334      	bcc.n	8009036 <rshift+0x96>
 8008fcc:	1a9b      	subs	r3, r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	1eea      	subs	r2, r5, #3
 8008fd2:	4296      	cmp	r6, r2
 8008fd4:	bf38      	it	cc
 8008fd6:	2300      	movcc	r3, #0
 8008fd8:	4423      	add	r3, r4
 8008fda:	e015      	b.n	8009008 <rshift+0x68>
 8008fdc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008fe0:	f1c1 0820 	rsb	r8, r1, #32
 8008fe4:	40cf      	lsrs	r7, r1
 8008fe6:	f105 0e04 	add.w	lr, r5, #4
 8008fea:	46a1      	mov	r9, r4
 8008fec:	4576      	cmp	r6, lr
 8008fee:	46f4      	mov	ip, lr
 8008ff0:	d815      	bhi.n	800901e <rshift+0x7e>
 8008ff2:	1a9a      	subs	r2, r3, r2
 8008ff4:	0092      	lsls	r2, r2, #2
 8008ff6:	3a04      	subs	r2, #4
 8008ff8:	3501      	adds	r5, #1
 8008ffa:	42ae      	cmp	r6, r5
 8008ffc:	bf38      	it	cc
 8008ffe:	2200      	movcc	r2, #0
 8009000:	18a3      	adds	r3, r4, r2
 8009002:	50a7      	str	r7, [r4, r2]
 8009004:	b107      	cbz	r7, 8009008 <rshift+0x68>
 8009006:	3304      	adds	r3, #4
 8009008:	1b1a      	subs	r2, r3, r4
 800900a:	42a3      	cmp	r3, r4
 800900c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009010:	bf08      	it	eq
 8009012:	2300      	moveq	r3, #0
 8009014:	6102      	str	r2, [r0, #16]
 8009016:	bf08      	it	eq
 8009018:	6143      	streq	r3, [r0, #20]
 800901a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800901e:	f8dc c000 	ldr.w	ip, [ip]
 8009022:	fa0c fc08 	lsl.w	ip, ip, r8
 8009026:	ea4c 0707 	orr.w	r7, ip, r7
 800902a:	f849 7b04 	str.w	r7, [r9], #4
 800902e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009032:	40cf      	lsrs	r7, r1
 8009034:	e7da      	b.n	8008fec <rshift+0x4c>
 8009036:	f851 cb04 	ldr.w	ip, [r1], #4
 800903a:	f847 cf04 	str.w	ip, [r7, #4]!
 800903e:	e7c3      	b.n	8008fc8 <rshift+0x28>
 8009040:	4623      	mov	r3, r4
 8009042:	e7e1      	b.n	8009008 <rshift+0x68>

08009044 <__hexdig_fun>:
 8009044:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009048:	2b09      	cmp	r3, #9
 800904a:	d802      	bhi.n	8009052 <__hexdig_fun+0xe>
 800904c:	3820      	subs	r0, #32
 800904e:	b2c0      	uxtb	r0, r0
 8009050:	4770      	bx	lr
 8009052:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009056:	2b05      	cmp	r3, #5
 8009058:	d801      	bhi.n	800905e <__hexdig_fun+0x1a>
 800905a:	3847      	subs	r0, #71	; 0x47
 800905c:	e7f7      	b.n	800904e <__hexdig_fun+0xa>
 800905e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009062:	2b05      	cmp	r3, #5
 8009064:	d801      	bhi.n	800906a <__hexdig_fun+0x26>
 8009066:	3827      	subs	r0, #39	; 0x27
 8009068:	e7f1      	b.n	800904e <__hexdig_fun+0xa>
 800906a:	2000      	movs	r0, #0
 800906c:	4770      	bx	lr
	...

08009070 <__gethex>:
 8009070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009074:	4617      	mov	r7, r2
 8009076:	680a      	ldr	r2, [r1, #0]
 8009078:	b085      	sub	sp, #20
 800907a:	f102 0b02 	add.w	fp, r2, #2
 800907e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009082:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009086:	4681      	mov	r9, r0
 8009088:	468a      	mov	sl, r1
 800908a:	9302      	str	r3, [sp, #8]
 800908c:	32fe      	adds	r2, #254	; 0xfe
 800908e:	eb02 030b 	add.w	r3, r2, fp
 8009092:	46d8      	mov	r8, fp
 8009094:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009098:	9301      	str	r3, [sp, #4]
 800909a:	2830      	cmp	r0, #48	; 0x30
 800909c:	d0f7      	beq.n	800908e <__gethex+0x1e>
 800909e:	f7ff ffd1 	bl	8009044 <__hexdig_fun>
 80090a2:	4604      	mov	r4, r0
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d138      	bne.n	800911a <__gethex+0xaa>
 80090a8:	49a7      	ldr	r1, [pc, #668]	; (8009348 <__gethex+0x2d8>)
 80090aa:	2201      	movs	r2, #1
 80090ac:	4640      	mov	r0, r8
 80090ae:	f7ff ff09 	bl	8008ec4 <strncmp>
 80090b2:	4606      	mov	r6, r0
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d169      	bne.n	800918c <__gethex+0x11c>
 80090b8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80090bc:	465d      	mov	r5, fp
 80090be:	f7ff ffc1 	bl	8009044 <__hexdig_fun>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d064      	beq.n	8009190 <__gethex+0x120>
 80090c6:	465a      	mov	r2, fp
 80090c8:	7810      	ldrb	r0, [r2, #0]
 80090ca:	2830      	cmp	r0, #48	; 0x30
 80090cc:	4690      	mov	r8, r2
 80090ce:	f102 0201 	add.w	r2, r2, #1
 80090d2:	d0f9      	beq.n	80090c8 <__gethex+0x58>
 80090d4:	f7ff ffb6 	bl	8009044 <__hexdig_fun>
 80090d8:	2301      	movs	r3, #1
 80090da:	fab0 f480 	clz	r4, r0
 80090de:	0964      	lsrs	r4, r4, #5
 80090e0:	465e      	mov	r6, fp
 80090e2:	9301      	str	r3, [sp, #4]
 80090e4:	4642      	mov	r2, r8
 80090e6:	4615      	mov	r5, r2
 80090e8:	3201      	adds	r2, #1
 80090ea:	7828      	ldrb	r0, [r5, #0]
 80090ec:	f7ff ffaa 	bl	8009044 <__hexdig_fun>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d1f8      	bne.n	80090e6 <__gethex+0x76>
 80090f4:	4994      	ldr	r1, [pc, #592]	; (8009348 <__gethex+0x2d8>)
 80090f6:	2201      	movs	r2, #1
 80090f8:	4628      	mov	r0, r5
 80090fa:	f7ff fee3 	bl	8008ec4 <strncmp>
 80090fe:	b978      	cbnz	r0, 8009120 <__gethex+0xb0>
 8009100:	b946      	cbnz	r6, 8009114 <__gethex+0xa4>
 8009102:	1c6e      	adds	r6, r5, #1
 8009104:	4632      	mov	r2, r6
 8009106:	4615      	mov	r5, r2
 8009108:	3201      	adds	r2, #1
 800910a:	7828      	ldrb	r0, [r5, #0]
 800910c:	f7ff ff9a 	bl	8009044 <__hexdig_fun>
 8009110:	2800      	cmp	r0, #0
 8009112:	d1f8      	bne.n	8009106 <__gethex+0x96>
 8009114:	1b73      	subs	r3, r6, r5
 8009116:	009e      	lsls	r6, r3, #2
 8009118:	e004      	b.n	8009124 <__gethex+0xb4>
 800911a:	2400      	movs	r4, #0
 800911c:	4626      	mov	r6, r4
 800911e:	e7e1      	b.n	80090e4 <__gethex+0x74>
 8009120:	2e00      	cmp	r6, #0
 8009122:	d1f7      	bne.n	8009114 <__gethex+0xa4>
 8009124:	782b      	ldrb	r3, [r5, #0]
 8009126:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800912a:	2b50      	cmp	r3, #80	; 0x50
 800912c:	d13d      	bne.n	80091aa <__gethex+0x13a>
 800912e:	786b      	ldrb	r3, [r5, #1]
 8009130:	2b2b      	cmp	r3, #43	; 0x2b
 8009132:	d02f      	beq.n	8009194 <__gethex+0x124>
 8009134:	2b2d      	cmp	r3, #45	; 0x2d
 8009136:	d031      	beq.n	800919c <__gethex+0x12c>
 8009138:	1c69      	adds	r1, r5, #1
 800913a:	f04f 0b00 	mov.w	fp, #0
 800913e:	7808      	ldrb	r0, [r1, #0]
 8009140:	f7ff ff80 	bl	8009044 <__hexdig_fun>
 8009144:	1e42      	subs	r2, r0, #1
 8009146:	b2d2      	uxtb	r2, r2
 8009148:	2a18      	cmp	r2, #24
 800914a:	d82e      	bhi.n	80091aa <__gethex+0x13a>
 800914c:	f1a0 0210 	sub.w	r2, r0, #16
 8009150:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009154:	f7ff ff76 	bl	8009044 <__hexdig_fun>
 8009158:	f100 3cff 	add.w	ip, r0, #4294967295
 800915c:	fa5f fc8c 	uxtb.w	ip, ip
 8009160:	f1bc 0f18 	cmp.w	ip, #24
 8009164:	d91d      	bls.n	80091a2 <__gethex+0x132>
 8009166:	f1bb 0f00 	cmp.w	fp, #0
 800916a:	d000      	beq.n	800916e <__gethex+0xfe>
 800916c:	4252      	negs	r2, r2
 800916e:	4416      	add	r6, r2
 8009170:	f8ca 1000 	str.w	r1, [sl]
 8009174:	b1dc      	cbz	r4, 80091ae <__gethex+0x13e>
 8009176:	9b01      	ldr	r3, [sp, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	bf14      	ite	ne
 800917c:	f04f 0800 	movne.w	r8, #0
 8009180:	f04f 0806 	moveq.w	r8, #6
 8009184:	4640      	mov	r0, r8
 8009186:	b005      	add	sp, #20
 8009188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918c:	4645      	mov	r5, r8
 800918e:	4626      	mov	r6, r4
 8009190:	2401      	movs	r4, #1
 8009192:	e7c7      	b.n	8009124 <__gethex+0xb4>
 8009194:	f04f 0b00 	mov.w	fp, #0
 8009198:	1ca9      	adds	r1, r5, #2
 800919a:	e7d0      	b.n	800913e <__gethex+0xce>
 800919c:	f04f 0b01 	mov.w	fp, #1
 80091a0:	e7fa      	b.n	8009198 <__gethex+0x128>
 80091a2:	230a      	movs	r3, #10
 80091a4:	fb03 0002 	mla	r0, r3, r2, r0
 80091a8:	e7d0      	b.n	800914c <__gethex+0xdc>
 80091aa:	4629      	mov	r1, r5
 80091ac:	e7e0      	b.n	8009170 <__gethex+0x100>
 80091ae:	eba5 0308 	sub.w	r3, r5, r8
 80091b2:	3b01      	subs	r3, #1
 80091b4:	4621      	mov	r1, r4
 80091b6:	2b07      	cmp	r3, #7
 80091b8:	dc0a      	bgt.n	80091d0 <__gethex+0x160>
 80091ba:	4648      	mov	r0, r9
 80091bc:	f7fe f91e 	bl	80073fc <_Balloc>
 80091c0:	4604      	mov	r4, r0
 80091c2:	b940      	cbnz	r0, 80091d6 <__gethex+0x166>
 80091c4:	4b61      	ldr	r3, [pc, #388]	; (800934c <__gethex+0x2dc>)
 80091c6:	4602      	mov	r2, r0
 80091c8:	21e4      	movs	r1, #228	; 0xe4
 80091ca:	4861      	ldr	r0, [pc, #388]	; (8009350 <__gethex+0x2e0>)
 80091cc:	f7ff feb4 	bl	8008f38 <__assert_func>
 80091d0:	3101      	adds	r1, #1
 80091d2:	105b      	asrs	r3, r3, #1
 80091d4:	e7ef      	b.n	80091b6 <__gethex+0x146>
 80091d6:	f100 0a14 	add.w	sl, r0, #20
 80091da:	2300      	movs	r3, #0
 80091dc:	495a      	ldr	r1, [pc, #360]	; (8009348 <__gethex+0x2d8>)
 80091de:	f8cd a004 	str.w	sl, [sp, #4]
 80091e2:	469b      	mov	fp, r3
 80091e4:	45a8      	cmp	r8, r5
 80091e6:	d342      	bcc.n	800926e <__gethex+0x1fe>
 80091e8:	9801      	ldr	r0, [sp, #4]
 80091ea:	f840 bb04 	str.w	fp, [r0], #4
 80091ee:	eba0 000a 	sub.w	r0, r0, sl
 80091f2:	1080      	asrs	r0, r0, #2
 80091f4:	6120      	str	r0, [r4, #16]
 80091f6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80091fa:	4658      	mov	r0, fp
 80091fc:	f7fe f9f0 	bl	80075e0 <__hi0bits>
 8009200:	683d      	ldr	r5, [r7, #0]
 8009202:	eba8 0000 	sub.w	r0, r8, r0
 8009206:	42a8      	cmp	r0, r5
 8009208:	dd59      	ble.n	80092be <__gethex+0x24e>
 800920a:	eba0 0805 	sub.w	r8, r0, r5
 800920e:	4641      	mov	r1, r8
 8009210:	4620      	mov	r0, r4
 8009212:	f7fe fd7f 	bl	8007d14 <__any_on>
 8009216:	4683      	mov	fp, r0
 8009218:	b1b8      	cbz	r0, 800924a <__gethex+0x1da>
 800921a:	f108 33ff 	add.w	r3, r8, #4294967295
 800921e:	1159      	asrs	r1, r3, #5
 8009220:	f003 021f 	and.w	r2, r3, #31
 8009224:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009228:	f04f 0b01 	mov.w	fp, #1
 800922c:	fa0b f202 	lsl.w	r2, fp, r2
 8009230:	420a      	tst	r2, r1
 8009232:	d00a      	beq.n	800924a <__gethex+0x1da>
 8009234:	455b      	cmp	r3, fp
 8009236:	dd06      	ble.n	8009246 <__gethex+0x1d6>
 8009238:	f1a8 0102 	sub.w	r1, r8, #2
 800923c:	4620      	mov	r0, r4
 800923e:	f7fe fd69 	bl	8007d14 <__any_on>
 8009242:	2800      	cmp	r0, #0
 8009244:	d138      	bne.n	80092b8 <__gethex+0x248>
 8009246:	f04f 0b02 	mov.w	fp, #2
 800924a:	4641      	mov	r1, r8
 800924c:	4620      	mov	r0, r4
 800924e:	f7ff fea7 	bl	8008fa0 <rshift>
 8009252:	4446      	add	r6, r8
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	42b3      	cmp	r3, r6
 8009258:	da41      	bge.n	80092de <__gethex+0x26e>
 800925a:	4621      	mov	r1, r4
 800925c:	4648      	mov	r0, r9
 800925e:	f7fe f90d 	bl	800747c <_Bfree>
 8009262:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009264:	2300      	movs	r3, #0
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800926c:	e78a      	b.n	8009184 <__gethex+0x114>
 800926e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009272:	2a2e      	cmp	r2, #46	; 0x2e
 8009274:	d014      	beq.n	80092a0 <__gethex+0x230>
 8009276:	2b20      	cmp	r3, #32
 8009278:	d106      	bne.n	8009288 <__gethex+0x218>
 800927a:	9b01      	ldr	r3, [sp, #4]
 800927c:	f843 bb04 	str.w	fp, [r3], #4
 8009280:	f04f 0b00 	mov.w	fp, #0
 8009284:	9301      	str	r3, [sp, #4]
 8009286:	465b      	mov	r3, fp
 8009288:	7828      	ldrb	r0, [r5, #0]
 800928a:	9303      	str	r3, [sp, #12]
 800928c:	f7ff feda 	bl	8009044 <__hexdig_fun>
 8009290:	9b03      	ldr	r3, [sp, #12]
 8009292:	f000 000f 	and.w	r0, r0, #15
 8009296:	4098      	lsls	r0, r3
 8009298:	ea4b 0b00 	orr.w	fp, fp, r0
 800929c:	3304      	adds	r3, #4
 800929e:	e7a1      	b.n	80091e4 <__gethex+0x174>
 80092a0:	45a8      	cmp	r8, r5
 80092a2:	d8e8      	bhi.n	8009276 <__gethex+0x206>
 80092a4:	2201      	movs	r2, #1
 80092a6:	4628      	mov	r0, r5
 80092a8:	9303      	str	r3, [sp, #12]
 80092aa:	f7ff fe0b 	bl	8008ec4 <strncmp>
 80092ae:	4926      	ldr	r1, [pc, #152]	; (8009348 <__gethex+0x2d8>)
 80092b0:	9b03      	ldr	r3, [sp, #12]
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d1df      	bne.n	8009276 <__gethex+0x206>
 80092b6:	e795      	b.n	80091e4 <__gethex+0x174>
 80092b8:	f04f 0b03 	mov.w	fp, #3
 80092bc:	e7c5      	b.n	800924a <__gethex+0x1da>
 80092be:	da0b      	bge.n	80092d8 <__gethex+0x268>
 80092c0:	eba5 0800 	sub.w	r8, r5, r0
 80092c4:	4621      	mov	r1, r4
 80092c6:	4642      	mov	r2, r8
 80092c8:	4648      	mov	r0, r9
 80092ca:	f7fe faf1 	bl	80078b0 <__lshift>
 80092ce:	eba6 0608 	sub.w	r6, r6, r8
 80092d2:	4604      	mov	r4, r0
 80092d4:	f100 0a14 	add.w	sl, r0, #20
 80092d8:	f04f 0b00 	mov.w	fp, #0
 80092dc:	e7ba      	b.n	8009254 <__gethex+0x1e4>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	42b3      	cmp	r3, r6
 80092e2:	dd73      	ble.n	80093cc <__gethex+0x35c>
 80092e4:	1b9e      	subs	r6, r3, r6
 80092e6:	42b5      	cmp	r5, r6
 80092e8:	dc34      	bgt.n	8009354 <__gethex+0x2e4>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d023      	beq.n	8009338 <__gethex+0x2c8>
 80092f0:	2b03      	cmp	r3, #3
 80092f2:	d025      	beq.n	8009340 <__gethex+0x2d0>
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d115      	bne.n	8009324 <__gethex+0x2b4>
 80092f8:	42b5      	cmp	r5, r6
 80092fa:	d113      	bne.n	8009324 <__gethex+0x2b4>
 80092fc:	2d01      	cmp	r5, #1
 80092fe:	d10b      	bne.n	8009318 <__gethex+0x2a8>
 8009300:	9a02      	ldr	r2, [sp, #8]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6013      	str	r3, [r2, #0]
 8009306:	2301      	movs	r3, #1
 8009308:	6123      	str	r3, [r4, #16]
 800930a:	f8ca 3000 	str.w	r3, [sl]
 800930e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009310:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009314:	601c      	str	r4, [r3, #0]
 8009316:	e735      	b.n	8009184 <__gethex+0x114>
 8009318:	1e69      	subs	r1, r5, #1
 800931a:	4620      	mov	r0, r4
 800931c:	f7fe fcfa 	bl	8007d14 <__any_on>
 8009320:	2800      	cmp	r0, #0
 8009322:	d1ed      	bne.n	8009300 <__gethex+0x290>
 8009324:	4621      	mov	r1, r4
 8009326:	4648      	mov	r0, r9
 8009328:	f7fe f8a8 	bl	800747c <_Bfree>
 800932c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800932e:	2300      	movs	r3, #0
 8009330:	6013      	str	r3, [r2, #0]
 8009332:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009336:	e725      	b.n	8009184 <__gethex+0x114>
 8009338:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1f2      	bne.n	8009324 <__gethex+0x2b4>
 800933e:	e7df      	b.n	8009300 <__gethex+0x290>
 8009340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1dc      	bne.n	8009300 <__gethex+0x290>
 8009346:	e7ed      	b.n	8009324 <__gethex+0x2b4>
 8009348:	08009f14 	.word	0x08009f14
 800934c:	08009dad 	.word	0x08009dad
 8009350:	0800a0be 	.word	0x0800a0be
 8009354:	f106 38ff 	add.w	r8, r6, #4294967295
 8009358:	f1bb 0f00 	cmp.w	fp, #0
 800935c:	d133      	bne.n	80093c6 <__gethex+0x356>
 800935e:	f1b8 0f00 	cmp.w	r8, #0
 8009362:	d004      	beq.n	800936e <__gethex+0x2fe>
 8009364:	4641      	mov	r1, r8
 8009366:	4620      	mov	r0, r4
 8009368:	f7fe fcd4 	bl	8007d14 <__any_on>
 800936c:	4683      	mov	fp, r0
 800936e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009372:	2301      	movs	r3, #1
 8009374:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009378:	f008 081f 	and.w	r8, r8, #31
 800937c:	fa03 f308 	lsl.w	r3, r3, r8
 8009380:	4213      	tst	r3, r2
 8009382:	4631      	mov	r1, r6
 8009384:	4620      	mov	r0, r4
 8009386:	bf18      	it	ne
 8009388:	f04b 0b02 	orrne.w	fp, fp, #2
 800938c:	1bad      	subs	r5, r5, r6
 800938e:	f7ff fe07 	bl	8008fa0 <rshift>
 8009392:	687e      	ldr	r6, [r7, #4]
 8009394:	f04f 0802 	mov.w	r8, #2
 8009398:	f1bb 0f00 	cmp.w	fp, #0
 800939c:	d04a      	beq.n	8009434 <__gethex+0x3c4>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d016      	beq.n	80093d2 <__gethex+0x362>
 80093a4:	2b03      	cmp	r3, #3
 80093a6:	d018      	beq.n	80093da <__gethex+0x36a>
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d109      	bne.n	80093c0 <__gethex+0x350>
 80093ac:	f01b 0f02 	tst.w	fp, #2
 80093b0:	d006      	beq.n	80093c0 <__gethex+0x350>
 80093b2:	f8da 3000 	ldr.w	r3, [sl]
 80093b6:	ea4b 0b03 	orr.w	fp, fp, r3
 80093ba:	f01b 0f01 	tst.w	fp, #1
 80093be:	d10f      	bne.n	80093e0 <__gethex+0x370>
 80093c0:	f048 0810 	orr.w	r8, r8, #16
 80093c4:	e036      	b.n	8009434 <__gethex+0x3c4>
 80093c6:	f04f 0b01 	mov.w	fp, #1
 80093ca:	e7d0      	b.n	800936e <__gethex+0x2fe>
 80093cc:	f04f 0801 	mov.w	r8, #1
 80093d0:	e7e2      	b.n	8009398 <__gethex+0x328>
 80093d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093d4:	f1c3 0301 	rsb	r3, r3, #1
 80093d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80093da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d0ef      	beq.n	80093c0 <__gethex+0x350>
 80093e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80093e4:	f104 0214 	add.w	r2, r4, #20
 80093e8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80093f2:	2300      	movs	r3, #0
 80093f4:	4694      	mov	ip, r2
 80093f6:	f852 1b04 	ldr.w	r1, [r2], #4
 80093fa:	f1b1 3fff 	cmp.w	r1, #4294967295
 80093fe:	d01e      	beq.n	800943e <__gethex+0x3ce>
 8009400:	3101      	adds	r1, #1
 8009402:	f8cc 1000 	str.w	r1, [ip]
 8009406:	f1b8 0f02 	cmp.w	r8, #2
 800940a:	f104 0214 	add.w	r2, r4, #20
 800940e:	d13d      	bne.n	800948c <__gethex+0x41c>
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	3b01      	subs	r3, #1
 8009414:	42ab      	cmp	r3, r5
 8009416:	d10b      	bne.n	8009430 <__gethex+0x3c0>
 8009418:	1169      	asrs	r1, r5, #5
 800941a:	2301      	movs	r3, #1
 800941c:	f005 051f 	and.w	r5, r5, #31
 8009420:	fa03 f505 	lsl.w	r5, r3, r5
 8009424:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009428:	421d      	tst	r5, r3
 800942a:	bf18      	it	ne
 800942c:	f04f 0801 	movne.w	r8, #1
 8009430:	f048 0820 	orr.w	r8, r8, #32
 8009434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009436:	601c      	str	r4, [r3, #0]
 8009438:	9b02      	ldr	r3, [sp, #8]
 800943a:	601e      	str	r6, [r3, #0]
 800943c:	e6a2      	b.n	8009184 <__gethex+0x114>
 800943e:	4290      	cmp	r0, r2
 8009440:	f842 3c04 	str.w	r3, [r2, #-4]
 8009444:	d8d6      	bhi.n	80093f4 <__gethex+0x384>
 8009446:	68a2      	ldr	r2, [r4, #8]
 8009448:	4593      	cmp	fp, r2
 800944a:	db17      	blt.n	800947c <__gethex+0x40c>
 800944c:	6861      	ldr	r1, [r4, #4]
 800944e:	4648      	mov	r0, r9
 8009450:	3101      	adds	r1, #1
 8009452:	f7fd ffd3 	bl	80073fc <_Balloc>
 8009456:	4682      	mov	sl, r0
 8009458:	b918      	cbnz	r0, 8009462 <__gethex+0x3f2>
 800945a:	4b1b      	ldr	r3, [pc, #108]	; (80094c8 <__gethex+0x458>)
 800945c:	4602      	mov	r2, r0
 800945e:	2184      	movs	r1, #132	; 0x84
 8009460:	e6b3      	b.n	80091ca <__gethex+0x15a>
 8009462:	6922      	ldr	r2, [r4, #16]
 8009464:	3202      	adds	r2, #2
 8009466:	f104 010c 	add.w	r1, r4, #12
 800946a:	0092      	lsls	r2, r2, #2
 800946c:	300c      	adds	r0, #12
 800946e:	f7ff fd4b 	bl	8008f08 <memcpy>
 8009472:	4621      	mov	r1, r4
 8009474:	4648      	mov	r0, r9
 8009476:	f7fe f801 	bl	800747c <_Bfree>
 800947a:	4654      	mov	r4, sl
 800947c:	6922      	ldr	r2, [r4, #16]
 800947e:	1c51      	adds	r1, r2, #1
 8009480:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009484:	6121      	str	r1, [r4, #16]
 8009486:	2101      	movs	r1, #1
 8009488:	6151      	str	r1, [r2, #20]
 800948a:	e7bc      	b.n	8009406 <__gethex+0x396>
 800948c:	6921      	ldr	r1, [r4, #16]
 800948e:	4559      	cmp	r1, fp
 8009490:	dd0b      	ble.n	80094aa <__gethex+0x43a>
 8009492:	2101      	movs	r1, #1
 8009494:	4620      	mov	r0, r4
 8009496:	f7ff fd83 	bl	8008fa0 <rshift>
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	3601      	adds	r6, #1
 800949e:	42b3      	cmp	r3, r6
 80094a0:	f6ff aedb 	blt.w	800925a <__gethex+0x1ea>
 80094a4:	f04f 0801 	mov.w	r8, #1
 80094a8:	e7c2      	b.n	8009430 <__gethex+0x3c0>
 80094aa:	f015 051f 	ands.w	r5, r5, #31
 80094ae:	d0f9      	beq.n	80094a4 <__gethex+0x434>
 80094b0:	9b01      	ldr	r3, [sp, #4]
 80094b2:	441a      	add	r2, r3
 80094b4:	f1c5 0520 	rsb	r5, r5, #32
 80094b8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80094bc:	f7fe f890 	bl	80075e0 <__hi0bits>
 80094c0:	42a8      	cmp	r0, r5
 80094c2:	dbe6      	blt.n	8009492 <__gethex+0x422>
 80094c4:	e7ee      	b.n	80094a4 <__gethex+0x434>
 80094c6:	bf00      	nop
 80094c8:	08009dad 	.word	0x08009dad

080094cc <L_shift>:
 80094cc:	f1c2 0208 	rsb	r2, r2, #8
 80094d0:	0092      	lsls	r2, r2, #2
 80094d2:	b570      	push	{r4, r5, r6, lr}
 80094d4:	f1c2 0620 	rsb	r6, r2, #32
 80094d8:	6843      	ldr	r3, [r0, #4]
 80094da:	6804      	ldr	r4, [r0, #0]
 80094dc:	fa03 f506 	lsl.w	r5, r3, r6
 80094e0:	432c      	orrs	r4, r5
 80094e2:	40d3      	lsrs	r3, r2
 80094e4:	6004      	str	r4, [r0, #0]
 80094e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80094ea:	4288      	cmp	r0, r1
 80094ec:	d3f4      	bcc.n	80094d8 <L_shift+0xc>
 80094ee:	bd70      	pop	{r4, r5, r6, pc}

080094f0 <__match>:
 80094f0:	b530      	push	{r4, r5, lr}
 80094f2:	6803      	ldr	r3, [r0, #0]
 80094f4:	3301      	adds	r3, #1
 80094f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094fa:	b914      	cbnz	r4, 8009502 <__match+0x12>
 80094fc:	6003      	str	r3, [r0, #0]
 80094fe:	2001      	movs	r0, #1
 8009500:	bd30      	pop	{r4, r5, pc}
 8009502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009506:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800950a:	2d19      	cmp	r5, #25
 800950c:	bf98      	it	ls
 800950e:	3220      	addls	r2, #32
 8009510:	42a2      	cmp	r2, r4
 8009512:	d0f0      	beq.n	80094f6 <__match+0x6>
 8009514:	2000      	movs	r0, #0
 8009516:	e7f3      	b.n	8009500 <__match+0x10>

08009518 <__hexnan>:
 8009518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951c:	680b      	ldr	r3, [r1, #0]
 800951e:	6801      	ldr	r1, [r0, #0]
 8009520:	115e      	asrs	r6, r3, #5
 8009522:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009526:	f013 031f 	ands.w	r3, r3, #31
 800952a:	b087      	sub	sp, #28
 800952c:	bf18      	it	ne
 800952e:	3604      	addne	r6, #4
 8009530:	2500      	movs	r5, #0
 8009532:	1f37      	subs	r7, r6, #4
 8009534:	4682      	mov	sl, r0
 8009536:	4690      	mov	r8, r2
 8009538:	9301      	str	r3, [sp, #4]
 800953a:	f846 5c04 	str.w	r5, [r6, #-4]
 800953e:	46b9      	mov	r9, r7
 8009540:	463c      	mov	r4, r7
 8009542:	9502      	str	r5, [sp, #8]
 8009544:	46ab      	mov	fp, r5
 8009546:	784a      	ldrb	r2, [r1, #1]
 8009548:	1c4b      	adds	r3, r1, #1
 800954a:	9303      	str	r3, [sp, #12]
 800954c:	b342      	cbz	r2, 80095a0 <__hexnan+0x88>
 800954e:	4610      	mov	r0, r2
 8009550:	9105      	str	r1, [sp, #20]
 8009552:	9204      	str	r2, [sp, #16]
 8009554:	f7ff fd76 	bl	8009044 <__hexdig_fun>
 8009558:	2800      	cmp	r0, #0
 800955a:	d14f      	bne.n	80095fc <__hexnan+0xe4>
 800955c:	9a04      	ldr	r2, [sp, #16]
 800955e:	9905      	ldr	r1, [sp, #20]
 8009560:	2a20      	cmp	r2, #32
 8009562:	d818      	bhi.n	8009596 <__hexnan+0x7e>
 8009564:	9b02      	ldr	r3, [sp, #8]
 8009566:	459b      	cmp	fp, r3
 8009568:	dd13      	ble.n	8009592 <__hexnan+0x7a>
 800956a:	454c      	cmp	r4, r9
 800956c:	d206      	bcs.n	800957c <__hexnan+0x64>
 800956e:	2d07      	cmp	r5, #7
 8009570:	dc04      	bgt.n	800957c <__hexnan+0x64>
 8009572:	462a      	mov	r2, r5
 8009574:	4649      	mov	r1, r9
 8009576:	4620      	mov	r0, r4
 8009578:	f7ff ffa8 	bl	80094cc <L_shift>
 800957c:	4544      	cmp	r4, r8
 800957e:	d950      	bls.n	8009622 <__hexnan+0x10a>
 8009580:	2300      	movs	r3, #0
 8009582:	f1a4 0904 	sub.w	r9, r4, #4
 8009586:	f844 3c04 	str.w	r3, [r4, #-4]
 800958a:	f8cd b008 	str.w	fp, [sp, #8]
 800958e:	464c      	mov	r4, r9
 8009590:	461d      	mov	r5, r3
 8009592:	9903      	ldr	r1, [sp, #12]
 8009594:	e7d7      	b.n	8009546 <__hexnan+0x2e>
 8009596:	2a29      	cmp	r2, #41	; 0x29
 8009598:	d155      	bne.n	8009646 <__hexnan+0x12e>
 800959a:	3102      	adds	r1, #2
 800959c:	f8ca 1000 	str.w	r1, [sl]
 80095a0:	f1bb 0f00 	cmp.w	fp, #0
 80095a4:	d04f      	beq.n	8009646 <__hexnan+0x12e>
 80095a6:	454c      	cmp	r4, r9
 80095a8:	d206      	bcs.n	80095b8 <__hexnan+0xa0>
 80095aa:	2d07      	cmp	r5, #7
 80095ac:	dc04      	bgt.n	80095b8 <__hexnan+0xa0>
 80095ae:	462a      	mov	r2, r5
 80095b0:	4649      	mov	r1, r9
 80095b2:	4620      	mov	r0, r4
 80095b4:	f7ff ff8a 	bl	80094cc <L_shift>
 80095b8:	4544      	cmp	r4, r8
 80095ba:	d934      	bls.n	8009626 <__hexnan+0x10e>
 80095bc:	f1a8 0204 	sub.w	r2, r8, #4
 80095c0:	4623      	mov	r3, r4
 80095c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80095c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80095ca:	429f      	cmp	r7, r3
 80095cc:	d2f9      	bcs.n	80095c2 <__hexnan+0xaa>
 80095ce:	1b3b      	subs	r3, r7, r4
 80095d0:	f023 0303 	bic.w	r3, r3, #3
 80095d4:	3304      	adds	r3, #4
 80095d6:	3e03      	subs	r6, #3
 80095d8:	3401      	adds	r4, #1
 80095da:	42a6      	cmp	r6, r4
 80095dc:	bf38      	it	cc
 80095de:	2304      	movcc	r3, #4
 80095e0:	4443      	add	r3, r8
 80095e2:	2200      	movs	r2, #0
 80095e4:	f843 2b04 	str.w	r2, [r3], #4
 80095e8:	429f      	cmp	r7, r3
 80095ea:	d2fb      	bcs.n	80095e4 <__hexnan+0xcc>
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	b91b      	cbnz	r3, 80095f8 <__hexnan+0xe0>
 80095f0:	4547      	cmp	r7, r8
 80095f2:	d126      	bne.n	8009642 <__hexnan+0x12a>
 80095f4:	2301      	movs	r3, #1
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	2005      	movs	r0, #5
 80095fa:	e025      	b.n	8009648 <__hexnan+0x130>
 80095fc:	3501      	adds	r5, #1
 80095fe:	2d08      	cmp	r5, #8
 8009600:	f10b 0b01 	add.w	fp, fp, #1
 8009604:	dd06      	ble.n	8009614 <__hexnan+0xfc>
 8009606:	4544      	cmp	r4, r8
 8009608:	d9c3      	bls.n	8009592 <__hexnan+0x7a>
 800960a:	2300      	movs	r3, #0
 800960c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009610:	2501      	movs	r5, #1
 8009612:	3c04      	subs	r4, #4
 8009614:	6822      	ldr	r2, [r4, #0]
 8009616:	f000 000f 	and.w	r0, r0, #15
 800961a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800961e:	6020      	str	r0, [r4, #0]
 8009620:	e7b7      	b.n	8009592 <__hexnan+0x7a>
 8009622:	2508      	movs	r5, #8
 8009624:	e7b5      	b.n	8009592 <__hexnan+0x7a>
 8009626:	9b01      	ldr	r3, [sp, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d0df      	beq.n	80095ec <__hexnan+0xd4>
 800962c:	f1c3 0320 	rsb	r3, r3, #32
 8009630:	f04f 32ff 	mov.w	r2, #4294967295
 8009634:	40da      	lsrs	r2, r3
 8009636:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800963a:	4013      	ands	r3, r2
 800963c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009640:	e7d4      	b.n	80095ec <__hexnan+0xd4>
 8009642:	3f04      	subs	r7, #4
 8009644:	e7d2      	b.n	80095ec <__hexnan+0xd4>
 8009646:	2004      	movs	r0, #4
 8009648:	b007      	add	sp, #28
 800964a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800964e <__ascii_mbtowc>:
 800964e:	b082      	sub	sp, #8
 8009650:	b901      	cbnz	r1, 8009654 <__ascii_mbtowc+0x6>
 8009652:	a901      	add	r1, sp, #4
 8009654:	b142      	cbz	r2, 8009668 <__ascii_mbtowc+0x1a>
 8009656:	b14b      	cbz	r3, 800966c <__ascii_mbtowc+0x1e>
 8009658:	7813      	ldrb	r3, [r2, #0]
 800965a:	600b      	str	r3, [r1, #0]
 800965c:	7812      	ldrb	r2, [r2, #0]
 800965e:	1e10      	subs	r0, r2, #0
 8009660:	bf18      	it	ne
 8009662:	2001      	movne	r0, #1
 8009664:	b002      	add	sp, #8
 8009666:	4770      	bx	lr
 8009668:	4610      	mov	r0, r2
 800966a:	e7fb      	b.n	8009664 <__ascii_mbtowc+0x16>
 800966c:	f06f 0001 	mvn.w	r0, #1
 8009670:	e7f8      	b.n	8009664 <__ascii_mbtowc+0x16>

08009672 <_realloc_r>:
 8009672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009676:	4680      	mov	r8, r0
 8009678:	4614      	mov	r4, r2
 800967a:	460e      	mov	r6, r1
 800967c:	b921      	cbnz	r1, 8009688 <_realloc_r+0x16>
 800967e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009682:	4611      	mov	r1, r2
 8009684:	f7fd be2e 	b.w	80072e4 <_malloc_r>
 8009688:	b92a      	cbnz	r2, 8009696 <_realloc_r+0x24>
 800968a:	f7fd fdb7 	bl	80071fc <_free_r>
 800968e:	4625      	mov	r5, r4
 8009690:	4628      	mov	r0, r5
 8009692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009696:	f000 f842 	bl	800971e <_malloc_usable_size_r>
 800969a:	4284      	cmp	r4, r0
 800969c:	4607      	mov	r7, r0
 800969e:	d802      	bhi.n	80096a6 <_realloc_r+0x34>
 80096a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096a4:	d812      	bhi.n	80096cc <_realloc_r+0x5a>
 80096a6:	4621      	mov	r1, r4
 80096a8:	4640      	mov	r0, r8
 80096aa:	f7fd fe1b 	bl	80072e4 <_malloc_r>
 80096ae:	4605      	mov	r5, r0
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d0ed      	beq.n	8009690 <_realloc_r+0x1e>
 80096b4:	42bc      	cmp	r4, r7
 80096b6:	4622      	mov	r2, r4
 80096b8:	4631      	mov	r1, r6
 80096ba:	bf28      	it	cs
 80096bc:	463a      	movcs	r2, r7
 80096be:	f7ff fc23 	bl	8008f08 <memcpy>
 80096c2:	4631      	mov	r1, r6
 80096c4:	4640      	mov	r0, r8
 80096c6:	f7fd fd99 	bl	80071fc <_free_r>
 80096ca:	e7e1      	b.n	8009690 <_realloc_r+0x1e>
 80096cc:	4635      	mov	r5, r6
 80096ce:	e7df      	b.n	8009690 <_realloc_r+0x1e>

080096d0 <__ascii_wctomb>:
 80096d0:	b149      	cbz	r1, 80096e6 <__ascii_wctomb+0x16>
 80096d2:	2aff      	cmp	r2, #255	; 0xff
 80096d4:	bf85      	ittet	hi
 80096d6:	238a      	movhi	r3, #138	; 0x8a
 80096d8:	6003      	strhi	r3, [r0, #0]
 80096da:	700a      	strbls	r2, [r1, #0]
 80096dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80096e0:	bf98      	it	ls
 80096e2:	2001      	movls	r0, #1
 80096e4:	4770      	bx	lr
 80096e6:	4608      	mov	r0, r1
 80096e8:	4770      	bx	lr
	...

080096ec <fiprintf>:
 80096ec:	b40e      	push	{r1, r2, r3}
 80096ee:	b503      	push	{r0, r1, lr}
 80096f0:	4601      	mov	r1, r0
 80096f2:	ab03      	add	r3, sp, #12
 80096f4:	4805      	ldr	r0, [pc, #20]	; (800970c <fiprintf+0x20>)
 80096f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096fa:	6800      	ldr	r0, [r0, #0]
 80096fc:	9301      	str	r3, [sp, #4]
 80096fe:	f000 f83f 	bl	8009780 <_vfiprintf_r>
 8009702:	b002      	add	sp, #8
 8009704:	f85d eb04 	ldr.w	lr, [sp], #4
 8009708:	b003      	add	sp, #12
 800970a:	4770      	bx	lr
 800970c:	20000064 	.word	0x20000064

08009710 <abort>:
 8009710:	b508      	push	{r3, lr}
 8009712:	2006      	movs	r0, #6
 8009714:	f000 fa0c 	bl	8009b30 <raise>
 8009718:	2001      	movs	r0, #1
 800971a:	f7f8 f883 	bl	8001824 <_exit>

0800971e <_malloc_usable_size_r>:
 800971e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009722:	1f18      	subs	r0, r3, #4
 8009724:	2b00      	cmp	r3, #0
 8009726:	bfbc      	itt	lt
 8009728:	580b      	ldrlt	r3, [r1, r0]
 800972a:	18c0      	addlt	r0, r0, r3
 800972c:	4770      	bx	lr

0800972e <__sfputc_r>:
 800972e:	6893      	ldr	r3, [r2, #8]
 8009730:	3b01      	subs	r3, #1
 8009732:	2b00      	cmp	r3, #0
 8009734:	b410      	push	{r4}
 8009736:	6093      	str	r3, [r2, #8]
 8009738:	da08      	bge.n	800974c <__sfputc_r+0x1e>
 800973a:	6994      	ldr	r4, [r2, #24]
 800973c:	42a3      	cmp	r3, r4
 800973e:	db01      	blt.n	8009744 <__sfputc_r+0x16>
 8009740:	290a      	cmp	r1, #10
 8009742:	d103      	bne.n	800974c <__sfputc_r+0x1e>
 8009744:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009748:	f000 b934 	b.w	80099b4 <__swbuf_r>
 800974c:	6813      	ldr	r3, [r2, #0]
 800974e:	1c58      	adds	r0, r3, #1
 8009750:	6010      	str	r0, [r2, #0]
 8009752:	7019      	strb	r1, [r3, #0]
 8009754:	4608      	mov	r0, r1
 8009756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800975a:	4770      	bx	lr

0800975c <__sfputs_r>:
 800975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975e:	4606      	mov	r6, r0
 8009760:	460f      	mov	r7, r1
 8009762:	4614      	mov	r4, r2
 8009764:	18d5      	adds	r5, r2, r3
 8009766:	42ac      	cmp	r4, r5
 8009768:	d101      	bne.n	800976e <__sfputs_r+0x12>
 800976a:	2000      	movs	r0, #0
 800976c:	e007      	b.n	800977e <__sfputs_r+0x22>
 800976e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009772:	463a      	mov	r2, r7
 8009774:	4630      	mov	r0, r6
 8009776:	f7ff ffda 	bl	800972e <__sfputc_r>
 800977a:	1c43      	adds	r3, r0, #1
 800977c:	d1f3      	bne.n	8009766 <__sfputs_r+0xa>
 800977e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009780 <_vfiprintf_r>:
 8009780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009784:	460d      	mov	r5, r1
 8009786:	b09d      	sub	sp, #116	; 0x74
 8009788:	4614      	mov	r4, r2
 800978a:	4698      	mov	r8, r3
 800978c:	4606      	mov	r6, r0
 800978e:	b118      	cbz	r0, 8009798 <_vfiprintf_r+0x18>
 8009790:	6a03      	ldr	r3, [r0, #32]
 8009792:	b90b      	cbnz	r3, 8009798 <_vfiprintf_r+0x18>
 8009794:	f7fc fd98 	bl	80062c8 <__sinit>
 8009798:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800979a:	07d9      	lsls	r1, r3, #31
 800979c:	d405      	bmi.n	80097aa <_vfiprintf_r+0x2a>
 800979e:	89ab      	ldrh	r3, [r5, #12]
 80097a0:	059a      	lsls	r2, r3, #22
 80097a2:	d402      	bmi.n	80097aa <_vfiprintf_r+0x2a>
 80097a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097a6:	f7fc fea5 	bl	80064f4 <__retarget_lock_acquire_recursive>
 80097aa:	89ab      	ldrh	r3, [r5, #12]
 80097ac:	071b      	lsls	r3, r3, #28
 80097ae:	d501      	bpl.n	80097b4 <_vfiprintf_r+0x34>
 80097b0:	692b      	ldr	r3, [r5, #16]
 80097b2:	b99b      	cbnz	r3, 80097dc <_vfiprintf_r+0x5c>
 80097b4:	4629      	mov	r1, r5
 80097b6:	4630      	mov	r0, r6
 80097b8:	f000 f93a 	bl	8009a30 <__swsetup_r>
 80097bc:	b170      	cbz	r0, 80097dc <_vfiprintf_r+0x5c>
 80097be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097c0:	07dc      	lsls	r4, r3, #31
 80097c2:	d504      	bpl.n	80097ce <_vfiprintf_r+0x4e>
 80097c4:	f04f 30ff 	mov.w	r0, #4294967295
 80097c8:	b01d      	add	sp, #116	; 0x74
 80097ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ce:	89ab      	ldrh	r3, [r5, #12]
 80097d0:	0598      	lsls	r0, r3, #22
 80097d2:	d4f7      	bmi.n	80097c4 <_vfiprintf_r+0x44>
 80097d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097d6:	f7fc fe8e 	bl	80064f6 <__retarget_lock_release_recursive>
 80097da:	e7f3      	b.n	80097c4 <_vfiprintf_r+0x44>
 80097dc:	2300      	movs	r3, #0
 80097de:	9309      	str	r3, [sp, #36]	; 0x24
 80097e0:	2320      	movs	r3, #32
 80097e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80097ea:	2330      	movs	r3, #48	; 0x30
 80097ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80099a0 <_vfiprintf_r+0x220>
 80097f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097f4:	f04f 0901 	mov.w	r9, #1
 80097f8:	4623      	mov	r3, r4
 80097fa:	469a      	mov	sl, r3
 80097fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009800:	b10a      	cbz	r2, 8009806 <_vfiprintf_r+0x86>
 8009802:	2a25      	cmp	r2, #37	; 0x25
 8009804:	d1f9      	bne.n	80097fa <_vfiprintf_r+0x7a>
 8009806:	ebba 0b04 	subs.w	fp, sl, r4
 800980a:	d00b      	beq.n	8009824 <_vfiprintf_r+0xa4>
 800980c:	465b      	mov	r3, fp
 800980e:	4622      	mov	r2, r4
 8009810:	4629      	mov	r1, r5
 8009812:	4630      	mov	r0, r6
 8009814:	f7ff ffa2 	bl	800975c <__sfputs_r>
 8009818:	3001      	adds	r0, #1
 800981a:	f000 80a9 	beq.w	8009970 <_vfiprintf_r+0x1f0>
 800981e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009820:	445a      	add	r2, fp
 8009822:	9209      	str	r2, [sp, #36]	; 0x24
 8009824:	f89a 3000 	ldrb.w	r3, [sl]
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 80a1 	beq.w	8009970 <_vfiprintf_r+0x1f0>
 800982e:	2300      	movs	r3, #0
 8009830:	f04f 32ff 	mov.w	r2, #4294967295
 8009834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009838:	f10a 0a01 	add.w	sl, sl, #1
 800983c:	9304      	str	r3, [sp, #16]
 800983e:	9307      	str	r3, [sp, #28]
 8009840:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009844:	931a      	str	r3, [sp, #104]	; 0x68
 8009846:	4654      	mov	r4, sl
 8009848:	2205      	movs	r2, #5
 800984a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800984e:	4854      	ldr	r0, [pc, #336]	; (80099a0 <_vfiprintf_r+0x220>)
 8009850:	f7f6 fcbe 	bl	80001d0 <memchr>
 8009854:	9a04      	ldr	r2, [sp, #16]
 8009856:	b9d8      	cbnz	r0, 8009890 <_vfiprintf_r+0x110>
 8009858:	06d1      	lsls	r1, r2, #27
 800985a:	bf44      	itt	mi
 800985c:	2320      	movmi	r3, #32
 800985e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009862:	0713      	lsls	r3, r2, #28
 8009864:	bf44      	itt	mi
 8009866:	232b      	movmi	r3, #43	; 0x2b
 8009868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800986c:	f89a 3000 	ldrb.w	r3, [sl]
 8009870:	2b2a      	cmp	r3, #42	; 0x2a
 8009872:	d015      	beq.n	80098a0 <_vfiprintf_r+0x120>
 8009874:	9a07      	ldr	r2, [sp, #28]
 8009876:	4654      	mov	r4, sl
 8009878:	2000      	movs	r0, #0
 800987a:	f04f 0c0a 	mov.w	ip, #10
 800987e:	4621      	mov	r1, r4
 8009880:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009884:	3b30      	subs	r3, #48	; 0x30
 8009886:	2b09      	cmp	r3, #9
 8009888:	d94d      	bls.n	8009926 <_vfiprintf_r+0x1a6>
 800988a:	b1b0      	cbz	r0, 80098ba <_vfiprintf_r+0x13a>
 800988c:	9207      	str	r2, [sp, #28]
 800988e:	e014      	b.n	80098ba <_vfiprintf_r+0x13a>
 8009890:	eba0 0308 	sub.w	r3, r0, r8
 8009894:	fa09 f303 	lsl.w	r3, r9, r3
 8009898:	4313      	orrs	r3, r2
 800989a:	9304      	str	r3, [sp, #16]
 800989c:	46a2      	mov	sl, r4
 800989e:	e7d2      	b.n	8009846 <_vfiprintf_r+0xc6>
 80098a0:	9b03      	ldr	r3, [sp, #12]
 80098a2:	1d19      	adds	r1, r3, #4
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	9103      	str	r1, [sp, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	bfbb      	ittet	lt
 80098ac:	425b      	neglt	r3, r3
 80098ae:	f042 0202 	orrlt.w	r2, r2, #2
 80098b2:	9307      	strge	r3, [sp, #28]
 80098b4:	9307      	strlt	r3, [sp, #28]
 80098b6:	bfb8      	it	lt
 80098b8:	9204      	strlt	r2, [sp, #16]
 80098ba:	7823      	ldrb	r3, [r4, #0]
 80098bc:	2b2e      	cmp	r3, #46	; 0x2e
 80098be:	d10c      	bne.n	80098da <_vfiprintf_r+0x15a>
 80098c0:	7863      	ldrb	r3, [r4, #1]
 80098c2:	2b2a      	cmp	r3, #42	; 0x2a
 80098c4:	d134      	bne.n	8009930 <_vfiprintf_r+0x1b0>
 80098c6:	9b03      	ldr	r3, [sp, #12]
 80098c8:	1d1a      	adds	r2, r3, #4
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	9203      	str	r2, [sp, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	bfb8      	it	lt
 80098d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80098d6:	3402      	adds	r4, #2
 80098d8:	9305      	str	r3, [sp, #20]
 80098da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80099b0 <_vfiprintf_r+0x230>
 80098de:	7821      	ldrb	r1, [r4, #0]
 80098e0:	2203      	movs	r2, #3
 80098e2:	4650      	mov	r0, sl
 80098e4:	f7f6 fc74 	bl	80001d0 <memchr>
 80098e8:	b138      	cbz	r0, 80098fa <_vfiprintf_r+0x17a>
 80098ea:	9b04      	ldr	r3, [sp, #16]
 80098ec:	eba0 000a 	sub.w	r0, r0, sl
 80098f0:	2240      	movs	r2, #64	; 0x40
 80098f2:	4082      	lsls	r2, r0
 80098f4:	4313      	orrs	r3, r2
 80098f6:	3401      	adds	r4, #1
 80098f8:	9304      	str	r3, [sp, #16]
 80098fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098fe:	4829      	ldr	r0, [pc, #164]	; (80099a4 <_vfiprintf_r+0x224>)
 8009900:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009904:	2206      	movs	r2, #6
 8009906:	f7f6 fc63 	bl	80001d0 <memchr>
 800990a:	2800      	cmp	r0, #0
 800990c:	d03f      	beq.n	800998e <_vfiprintf_r+0x20e>
 800990e:	4b26      	ldr	r3, [pc, #152]	; (80099a8 <_vfiprintf_r+0x228>)
 8009910:	bb1b      	cbnz	r3, 800995a <_vfiprintf_r+0x1da>
 8009912:	9b03      	ldr	r3, [sp, #12]
 8009914:	3307      	adds	r3, #7
 8009916:	f023 0307 	bic.w	r3, r3, #7
 800991a:	3308      	adds	r3, #8
 800991c:	9303      	str	r3, [sp, #12]
 800991e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009920:	443b      	add	r3, r7
 8009922:	9309      	str	r3, [sp, #36]	; 0x24
 8009924:	e768      	b.n	80097f8 <_vfiprintf_r+0x78>
 8009926:	fb0c 3202 	mla	r2, ip, r2, r3
 800992a:	460c      	mov	r4, r1
 800992c:	2001      	movs	r0, #1
 800992e:	e7a6      	b.n	800987e <_vfiprintf_r+0xfe>
 8009930:	2300      	movs	r3, #0
 8009932:	3401      	adds	r4, #1
 8009934:	9305      	str	r3, [sp, #20]
 8009936:	4619      	mov	r1, r3
 8009938:	f04f 0c0a 	mov.w	ip, #10
 800993c:	4620      	mov	r0, r4
 800993e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009942:	3a30      	subs	r2, #48	; 0x30
 8009944:	2a09      	cmp	r2, #9
 8009946:	d903      	bls.n	8009950 <_vfiprintf_r+0x1d0>
 8009948:	2b00      	cmp	r3, #0
 800994a:	d0c6      	beq.n	80098da <_vfiprintf_r+0x15a>
 800994c:	9105      	str	r1, [sp, #20]
 800994e:	e7c4      	b.n	80098da <_vfiprintf_r+0x15a>
 8009950:	fb0c 2101 	mla	r1, ip, r1, r2
 8009954:	4604      	mov	r4, r0
 8009956:	2301      	movs	r3, #1
 8009958:	e7f0      	b.n	800993c <_vfiprintf_r+0x1bc>
 800995a:	ab03      	add	r3, sp, #12
 800995c:	9300      	str	r3, [sp, #0]
 800995e:	462a      	mov	r2, r5
 8009960:	4b12      	ldr	r3, [pc, #72]	; (80099ac <_vfiprintf_r+0x22c>)
 8009962:	a904      	add	r1, sp, #16
 8009964:	4630      	mov	r0, r6
 8009966:	f7fb fe5f 	bl	8005628 <_printf_float>
 800996a:	4607      	mov	r7, r0
 800996c:	1c78      	adds	r0, r7, #1
 800996e:	d1d6      	bne.n	800991e <_vfiprintf_r+0x19e>
 8009970:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009972:	07d9      	lsls	r1, r3, #31
 8009974:	d405      	bmi.n	8009982 <_vfiprintf_r+0x202>
 8009976:	89ab      	ldrh	r3, [r5, #12]
 8009978:	059a      	lsls	r2, r3, #22
 800997a:	d402      	bmi.n	8009982 <_vfiprintf_r+0x202>
 800997c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800997e:	f7fc fdba 	bl	80064f6 <__retarget_lock_release_recursive>
 8009982:	89ab      	ldrh	r3, [r5, #12]
 8009984:	065b      	lsls	r3, r3, #25
 8009986:	f53f af1d 	bmi.w	80097c4 <_vfiprintf_r+0x44>
 800998a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800998c:	e71c      	b.n	80097c8 <_vfiprintf_r+0x48>
 800998e:	ab03      	add	r3, sp, #12
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	462a      	mov	r2, r5
 8009994:	4b05      	ldr	r3, [pc, #20]	; (80099ac <_vfiprintf_r+0x22c>)
 8009996:	a904      	add	r1, sp, #16
 8009998:	4630      	mov	r0, r6
 800999a:	f7fc f8e9 	bl	8005b70 <_printf_i>
 800999e:	e7e4      	b.n	800996a <_vfiprintf_r+0x1ea>
 80099a0:	0800a069 	.word	0x0800a069
 80099a4:	0800a073 	.word	0x0800a073
 80099a8:	08005629 	.word	0x08005629
 80099ac:	0800975d 	.word	0x0800975d
 80099b0:	0800a06f 	.word	0x0800a06f

080099b4 <__swbuf_r>:
 80099b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b6:	460e      	mov	r6, r1
 80099b8:	4614      	mov	r4, r2
 80099ba:	4605      	mov	r5, r0
 80099bc:	b118      	cbz	r0, 80099c6 <__swbuf_r+0x12>
 80099be:	6a03      	ldr	r3, [r0, #32]
 80099c0:	b90b      	cbnz	r3, 80099c6 <__swbuf_r+0x12>
 80099c2:	f7fc fc81 	bl	80062c8 <__sinit>
 80099c6:	69a3      	ldr	r3, [r4, #24]
 80099c8:	60a3      	str	r3, [r4, #8]
 80099ca:	89a3      	ldrh	r3, [r4, #12]
 80099cc:	071a      	lsls	r2, r3, #28
 80099ce:	d525      	bpl.n	8009a1c <__swbuf_r+0x68>
 80099d0:	6923      	ldr	r3, [r4, #16]
 80099d2:	b31b      	cbz	r3, 8009a1c <__swbuf_r+0x68>
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	6922      	ldr	r2, [r4, #16]
 80099d8:	1a98      	subs	r0, r3, r2
 80099da:	6963      	ldr	r3, [r4, #20]
 80099dc:	b2f6      	uxtb	r6, r6
 80099de:	4283      	cmp	r3, r0
 80099e0:	4637      	mov	r7, r6
 80099e2:	dc04      	bgt.n	80099ee <__swbuf_r+0x3a>
 80099e4:	4621      	mov	r1, r4
 80099e6:	4628      	mov	r0, r5
 80099e8:	f7ff fa2a 	bl	8008e40 <_fflush_r>
 80099ec:	b9e0      	cbnz	r0, 8009a28 <__swbuf_r+0x74>
 80099ee:	68a3      	ldr	r3, [r4, #8]
 80099f0:	3b01      	subs	r3, #1
 80099f2:	60a3      	str	r3, [r4, #8]
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	1c5a      	adds	r2, r3, #1
 80099f8:	6022      	str	r2, [r4, #0]
 80099fa:	701e      	strb	r6, [r3, #0]
 80099fc:	6962      	ldr	r2, [r4, #20]
 80099fe:	1c43      	adds	r3, r0, #1
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d004      	beq.n	8009a0e <__swbuf_r+0x5a>
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	07db      	lsls	r3, r3, #31
 8009a08:	d506      	bpl.n	8009a18 <__swbuf_r+0x64>
 8009a0a:	2e0a      	cmp	r6, #10
 8009a0c:	d104      	bne.n	8009a18 <__swbuf_r+0x64>
 8009a0e:	4621      	mov	r1, r4
 8009a10:	4628      	mov	r0, r5
 8009a12:	f7ff fa15 	bl	8008e40 <_fflush_r>
 8009a16:	b938      	cbnz	r0, 8009a28 <__swbuf_r+0x74>
 8009a18:	4638      	mov	r0, r7
 8009a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f000 f806 	bl	8009a30 <__swsetup_r>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d0d5      	beq.n	80099d4 <__swbuf_r+0x20>
 8009a28:	f04f 37ff 	mov.w	r7, #4294967295
 8009a2c:	e7f4      	b.n	8009a18 <__swbuf_r+0x64>
	...

08009a30 <__swsetup_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4b2a      	ldr	r3, [pc, #168]	; (8009adc <__swsetup_r+0xac>)
 8009a34:	4605      	mov	r5, r0
 8009a36:	6818      	ldr	r0, [r3, #0]
 8009a38:	460c      	mov	r4, r1
 8009a3a:	b118      	cbz	r0, 8009a44 <__swsetup_r+0x14>
 8009a3c:	6a03      	ldr	r3, [r0, #32]
 8009a3e:	b90b      	cbnz	r3, 8009a44 <__swsetup_r+0x14>
 8009a40:	f7fc fc42 	bl	80062c8 <__sinit>
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a4a:	0718      	lsls	r0, r3, #28
 8009a4c:	d422      	bmi.n	8009a94 <__swsetup_r+0x64>
 8009a4e:	06d9      	lsls	r1, r3, #27
 8009a50:	d407      	bmi.n	8009a62 <__swsetup_r+0x32>
 8009a52:	2309      	movs	r3, #9
 8009a54:	602b      	str	r3, [r5, #0]
 8009a56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a5a:	81a3      	strh	r3, [r4, #12]
 8009a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a60:	e034      	b.n	8009acc <__swsetup_r+0x9c>
 8009a62:	0758      	lsls	r0, r3, #29
 8009a64:	d512      	bpl.n	8009a8c <__swsetup_r+0x5c>
 8009a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a68:	b141      	cbz	r1, 8009a7c <__swsetup_r+0x4c>
 8009a6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a6e:	4299      	cmp	r1, r3
 8009a70:	d002      	beq.n	8009a78 <__swsetup_r+0x48>
 8009a72:	4628      	mov	r0, r5
 8009a74:	f7fd fbc2 	bl	80071fc <_free_r>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	6363      	str	r3, [r4, #52]	; 0x34
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a82:	81a3      	strh	r3, [r4, #12]
 8009a84:	2300      	movs	r3, #0
 8009a86:	6063      	str	r3, [r4, #4]
 8009a88:	6923      	ldr	r3, [r4, #16]
 8009a8a:	6023      	str	r3, [r4, #0]
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	f043 0308 	orr.w	r3, r3, #8
 8009a92:	81a3      	strh	r3, [r4, #12]
 8009a94:	6923      	ldr	r3, [r4, #16]
 8009a96:	b94b      	cbnz	r3, 8009aac <__swsetup_r+0x7c>
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009aa2:	d003      	beq.n	8009aac <__swsetup_r+0x7c>
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f000 f884 	bl	8009bb4 <__smakebuf_r>
 8009aac:	89a0      	ldrh	r0, [r4, #12]
 8009aae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ab2:	f010 0301 	ands.w	r3, r0, #1
 8009ab6:	d00a      	beq.n	8009ace <__swsetup_r+0x9e>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	60a3      	str	r3, [r4, #8]
 8009abc:	6963      	ldr	r3, [r4, #20]
 8009abe:	425b      	negs	r3, r3
 8009ac0:	61a3      	str	r3, [r4, #24]
 8009ac2:	6923      	ldr	r3, [r4, #16]
 8009ac4:	b943      	cbnz	r3, 8009ad8 <__swsetup_r+0xa8>
 8009ac6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009aca:	d1c4      	bne.n	8009a56 <__swsetup_r+0x26>
 8009acc:	bd38      	pop	{r3, r4, r5, pc}
 8009ace:	0781      	lsls	r1, r0, #30
 8009ad0:	bf58      	it	pl
 8009ad2:	6963      	ldrpl	r3, [r4, #20]
 8009ad4:	60a3      	str	r3, [r4, #8]
 8009ad6:	e7f4      	b.n	8009ac2 <__swsetup_r+0x92>
 8009ad8:	2000      	movs	r0, #0
 8009ada:	e7f7      	b.n	8009acc <__swsetup_r+0x9c>
 8009adc:	20000064 	.word	0x20000064

08009ae0 <_raise_r>:
 8009ae0:	291f      	cmp	r1, #31
 8009ae2:	b538      	push	{r3, r4, r5, lr}
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	460d      	mov	r5, r1
 8009ae8:	d904      	bls.n	8009af4 <_raise_r+0x14>
 8009aea:	2316      	movs	r3, #22
 8009aec:	6003      	str	r3, [r0, #0]
 8009aee:	f04f 30ff 	mov.w	r0, #4294967295
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009af6:	b112      	cbz	r2, 8009afe <_raise_r+0x1e>
 8009af8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009afc:	b94b      	cbnz	r3, 8009b12 <_raise_r+0x32>
 8009afe:	4620      	mov	r0, r4
 8009b00:	f000 f830 	bl	8009b64 <_getpid_r>
 8009b04:	462a      	mov	r2, r5
 8009b06:	4601      	mov	r1, r0
 8009b08:	4620      	mov	r0, r4
 8009b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b0e:	f000 b817 	b.w	8009b40 <_kill_r>
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d00a      	beq.n	8009b2c <_raise_r+0x4c>
 8009b16:	1c59      	adds	r1, r3, #1
 8009b18:	d103      	bne.n	8009b22 <_raise_r+0x42>
 8009b1a:	2316      	movs	r3, #22
 8009b1c:	6003      	str	r3, [r0, #0]
 8009b1e:	2001      	movs	r0, #1
 8009b20:	e7e7      	b.n	8009af2 <_raise_r+0x12>
 8009b22:	2400      	movs	r4, #0
 8009b24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b28:	4628      	mov	r0, r5
 8009b2a:	4798      	blx	r3
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	e7e0      	b.n	8009af2 <_raise_r+0x12>

08009b30 <raise>:
 8009b30:	4b02      	ldr	r3, [pc, #8]	; (8009b3c <raise+0xc>)
 8009b32:	4601      	mov	r1, r0
 8009b34:	6818      	ldr	r0, [r3, #0]
 8009b36:	f7ff bfd3 	b.w	8009ae0 <_raise_r>
 8009b3a:	bf00      	nop
 8009b3c:	20000064 	.word	0x20000064

08009b40 <_kill_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4d07      	ldr	r5, [pc, #28]	; (8009b60 <_kill_r+0x20>)
 8009b44:	2300      	movs	r3, #0
 8009b46:	4604      	mov	r4, r0
 8009b48:	4608      	mov	r0, r1
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	602b      	str	r3, [r5, #0]
 8009b4e:	f7f7 fe59 	bl	8001804 <_kill>
 8009b52:	1c43      	adds	r3, r0, #1
 8009b54:	d102      	bne.n	8009b5c <_kill_r+0x1c>
 8009b56:	682b      	ldr	r3, [r5, #0]
 8009b58:	b103      	cbz	r3, 8009b5c <_kill_r+0x1c>
 8009b5a:	6023      	str	r3, [r4, #0]
 8009b5c:	bd38      	pop	{r3, r4, r5, pc}
 8009b5e:	bf00      	nop
 8009b60:	20000508 	.word	0x20000508

08009b64 <_getpid_r>:
 8009b64:	f7f7 be46 	b.w	80017f4 <_getpid>

08009b68 <__swhatbuf_r>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b70:	2900      	cmp	r1, #0
 8009b72:	b096      	sub	sp, #88	; 0x58
 8009b74:	4615      	mov	r5, r2
 8009b76:	461e      	mov	r6, r3
 8009b78:	da0d      	bge.n	8009b96 <__swhatbuf_r+0x2e>
 8009b7a:	89a3      	ldrh	r3, [r4, #12]
 8009b7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b80:	f04f 0100 	mov.w	r1, #0
 8009b84:	bf0c      	ite	eq
 8009b86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009b8a:	2340      	movne	r3, #64	; 0x40
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	6031      	str	r1, [r6, #0]
 8009b90:	602b      	str	r3, [r5, #0]
 8009b92:	b016      	add	sp, #88	; 0x58
 8009b94:	bd70      	pop	{r4, r5, r6, pc}
 8009b96:	466a      	mov	r2, sp
 8009b98:	f000 f848 	bl	8009c2c <_fstat_r>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	dbec      	blt.n	8009b7a <__swhatbuf_r+0x12>
 8009ba0:	9901      	ldr	r1, [sp, #4]
 8009ba2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009ba6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009baa:	4259      	negs	r1, r3
 8009bac:	4159      	adcs	r1, r3
 8009bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bb2:	e7eb      	b.n	8009b8c <__swhatbuf_r+0x24>

08009bb4 <__smakebuf_r>:
 8009bb4:	898b      	ldrh	r3, [r1, #12]
 8009bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bb8:	079d      	lsls	r5, r3, #30
 8009bba:	4606      	mov	r6, r0
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	d507      	bpl.n	8009bd0 <__smakebuf_r+0x1c>
 8009bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	6123      	str	r3, [r4, #16]
 8009bc8:	2301      	movs	r3, #1
 8009bca:	6163      	str	r3, [r4, #20]
 8009bcc:	b002      	add	sp, #8
 8009bce:	bd70      	pop	{r4, r5, r6, pc}
 8009bd0:	ab01      	add	r3, sp, #4
 8009bd2:	466a      	mov	r2, sp
 8009bd4:	f7ff ffc8 	bl	8009b68 <__swhatbuf_r>
 8009bd8:	9900      	ldr	r1, [sp, #0]
 8009bda:	4605      	mov	r5, r0
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f7fd fb81 	bl	80072e4 <_malloc_r>
 8009be2:	b948      	cbnz	r0, 8009bf8 <__smakebuf_r+0x44>
 8009be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009be8:	059a      	lsls	r2, r3, #22
 8009bea:	d4ef      	bmi.n	8009bcc <__smakebuf_r+0x18>
 8009bec:	f023 0303 	bic.w	r3, r3, #3
 8009bf0:	f043 0302 	orr.w	r3, r3, #2
 8009bf4:	81a3      	strh	r3, [r4, #12]
 8009bf6:	e7e3      	b.n	8009bc0 <__smakebuf_r+0xc>
 8009bf8:	89a3      	ldrh	r3, [r4, #12]
 8009bfa:	6020      	str	r0, [r4, #0]
 8009bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c00:	81a3      	strh	r3, [r4, #12]
 8009c02:	9b00      	ldr	r3, [sp, #0]
 8009c04:	6163      	str	r3, [r4, #20]
 8009c06:	9b01      	ldr	r3, [sp, #4]
 8009c08:	6120      	str	r0, [r4, #16]
 8009c0a:	b15b      	cbz	r3, 8009c24 <__smakebuf_r+0x70>
 8009c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c10:	4630      	mov	r0, r6
 8009c12:	f000 f81d 	bl	8009c50 <_isatty_r>
 8009c16:	b128      	cbz	r0, 8009c24 <__smakebuf_r+0x70>
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	f023 0303 	bic.w	r3, r3, #3
 8009c1e:	f043 0301 	orr.w	r3, r3, #1
 8009c22:	81a3      	strh	r3, [r4, #12]
 8009c24:	89a3      	ldrh	r3, [r4, #12]
 8009c26:	431d      	orrs	r5, r3
 8009c28:	81a5      	strh	r5, [r4, #12]
 8009c2a:	e7cf      	b.n	8009bcc <__smakebuf_r+0x18>

08009c2c <_fstat_r>:
 8009c2c:	b538      	push	{r3, r4, r5, lr}
 8009c2e:	4d07      	ldr	r5, [pc, #28]	; (8009c4c <_fstat_r+0x20>)
 8009c30:	2300      	movs	r3, #0
 8009c32:	4604      	mov	r4, r0
 8009c34:	4608      	mov	r0, r1
 8009c36:	4611      	mov	r1, r2
 8009c38:	602b      	str	r3, [r5, #0]
 8009c3a:	f7f7 fe42 	bl	80018c2 <_fstat>
 8009c3e:	1c43      	adds	r3, r0, #1
 8009c40:	d102      	bne.n	8009c48 <_fstat_r+0x1c>
 8009c42:	682b      	ldr	r3, [r5, #0]
 8009c44:	b103      	cbz	r3, 8009c48 <_fstat_r+0x1c>
 8009c46:	6023      	str	r3, [r4, #0]
 8009c48:	bd38      	pop	{r3, r4, r5, pc}
 8009c4a:	bf00      	nop
 8009c4c:	20000508 	.word	0x20000508

08009c50 <_isatty_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4d06      	ldr	r5, [pc, #24]	; (8009c6c <_isatty_r+0x1c>)
 8009c54:	2300      	movs	r3, #0
 8009c56:	4604      	mov	r4, r0
 8009c58:	4608      	mov	r0, r1
 8009c5a:	602b      	str	r3, [r5, #0]
 8009c5c:	f7f7 fe41 	bl	80018e2 <_isatty>
 8009c60:	1c43      	adds	r3, r0, #1
 8009c62:	d102      	bne.n	8009c6a <_isatty_r+0x1a>
 8009c64:	682b      	ldr	r3, [r5, #0]
 8009c66:	b103      	cbz	r3, 8009c6a <_isatty_r+0x1a>
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	bd38      	pop	{r3, r4, r5, pc}
 8009c6c:	20000508 	.word	0x20000508

08009c70 <_init>:
 8009c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c72:	bf00      	nop
 8009c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c76:	bc08      	pop	{r3}
 8009c78:	469e      	mov	lr, r3
 8009c7a:	4770      	bx	lr

08009c7c <_fini>:
 8009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7e:	bf00      	nop
 8009c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c82:	bc08      	pop	{r3}
 8009c84:	469e      	mov	lr, r3
 8009c86:	4770      	bx	lr
