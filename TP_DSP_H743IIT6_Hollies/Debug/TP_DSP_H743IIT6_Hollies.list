
TP_DSP_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002598  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000814  08002830  08002830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003044  08003044  00013044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800304c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  24000010  0800305c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400007c  0800305c  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      000000b8  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010cb4  00000000  00000000  000200f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000020a5  00000000  00000000  00030daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bf8  00000000  00000000  00032e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000906  00000000  00000000  00033a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035faf  00000000  00000000  0003434e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000f6de  00000000  00000000  0006a2fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015b216  00000000  00000000  000799db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003080  00000000  00000000  001d4bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000065  00000000  00000000  001d7c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    000000fa  00000000  00000000  001d7cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00000010  00000000  00000000  001d7dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002818 	.word	0x08002818

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08002818 	.word	0x08002818

080002d8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0314 	add.w	r3, r7, #20
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ee:	4b29      	ldr	r3, [pc, #164]	; (8000394 <MX_GPIO_Init+0xbc>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	4a27      	ldr	r2, [pc, #156]	; (8000394 <MX_GPIO_Init+0xbc>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002fe:	4b25      	ldr	r3, [pc, #148]	; (8000394 <MX_GPIO_Init+0xbc>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000304:	f003 0304 	and.w	r3, r3, #4
 8000308:	613b      	str	r3, [r7, #16]
 800030a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800030c:	4b21      	ldr	r3, [pc, #132]	; (8000394 <MX_GPIO_Init+0xbc>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	4a20      	ldr	r2, [pc, #128]	; (8000394 <MX_GPIO_Init+0xbc>)
 8000314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800031c:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <MX_GPIO_Init+0xbc>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <MX_GPIO_Init+0xbc>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	4a18      	ldr	r2, [pc, #96]	; (8000394 <MX_GPIO_Init+0xbc>)
 8000332:	f043 0302 	orr.w	r3, r3, #2
 8000336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033a:	4b16      	ldr	r3, [pc, #88]	; (8000394 <MX_GPIO_Init+0xbc>)
 800033c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000340:	f003 0302 	and.w	r3, r3, #2
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <MX_GPIO_Init+0xbc>)
 800034a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800034e:	4a11      	ldr	r2, [pc, #68]	; (8000394 <MX_GPIO_Init+0xbc>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000358:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <MX_GPIO_Init+0xbc>)
 800035a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	2101      	movs	r1, #1
 800036a:	480b      	ldr	r0, [pc, #44]	; (8000398 <MX_GPIO_Init+0xc0>)
 800036c:	f000 fe88 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000370:	2301      	movs	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000374:	2301      	movs	r3, #1
 8000376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000378:	2300      	movs	r3, #0
 800037a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037c:	2300      	movs	r3, #0
 800037e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000380:	f107 0314 	add.w	r3, r7, #20
 8000384:	4619      	mov	r1, r3
 8000386:	4804      	ldr	r0, [pc, #16]	; (8000398 <MX_GPIO_Init+0xc0>)
 8000388:	f000 fcca 	bl	8000d20 <HAL_GPIO_Init>

}
 800038c:	bf00      	nop
 800038e:	3728      	adds	r7, #40	; 0x28
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	58024400 	.word	0x58024400
 8000398:	58020400 	.word	0x58020400

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003a2:	f000 f92b 	bl	80005fc <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003a6:	4b3b      	ldr	r3, [pc, #236]	; (8000494 <main+0xf8>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d11b      	bne.n	80003ea <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003b2:	f3bf 8f4f 	dsb	sy
}
 80003b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b8:	f3bf 8f6f 	isb	sy
}
 80003bc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003be:	4b35      	ldr	r3, [pc, #212]	; (8000494 <main+0xf8>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003c6:	f3bf 8f4f 	dsb	sy
}
 80003ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003cc:	f3bf 8f6f 	isb	sy
}
 80003d0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003d2:	4b30      	ldr	r3, [pc, #192]	; (8000494 <main+0xf8>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a2f      	ldr	r2, [pc, #188]	; (8000494 <main+0xf8>)
 80003d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003de:	f3bf 8f4f 	dsb	sy
}
 80003e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e4:	f3bf 8f6f 	isb	sy
}
 80003e8:	e000      	b.n	80003ec <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ea:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003ec:	4b29      	ldr	r3, [pc, #164]	; (8000494 <main+0xf8>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d138      	bne.n	800046a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003f8:	4b26      	ldr	r3, [pc, #152]	; (8000494 <main+0xf8>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000400:	f3bf 8f4f 	dsb	sy
}
 8000404:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000406:	4b23      	ldr	r3, [pc, #140]	; (8000494 <main+0xf8>)
 8000408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800040c:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	0b5b      	lsrs	r3, r3, #13
 8000412:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000416:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	08db      	lsrs	r3, r3, #3
 800041c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000420:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	015a      	lsls	r2, r3, #5
 8000426:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800042a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800042c:	683a      	ldr	r2, [r7, #0]
 800042e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000430:	4918      	ldr	r1, [pc, #96]	; (8000494 <main+0xf8>)
 8000432:	4313      	orrs	r3, r2
 8000434:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	1e5a      	subs	r2, r3, #1
 800043c:	603a      	str	r2, [r7, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d1ef      	bne.n	8000422 <main+0x86>
    } while(sets-- != 0U);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	1e5a      	subs	r2, r3, #1
 8000446:	607a      	str	r2, [r7, #4]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d1e5      	bne.n	8000418 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800044c:	f3bf 8f4f 	dsb	sy
}
 8000450:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <main+0xf8>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a0f      	ldr	r2, [pc, #60]	; (8000494 <main+0xf8>)
 8000458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800045c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800045e:	f3bf 8f4f 	dsb	sy
}
 8000462:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000464:	f3bf 8f6f 	isb	sy
}
 8000468:	e000      	b.n	800046c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800046a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046c:	f000 fa70 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000470:	f000 f816 	bl	80004a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000474:	f7ff ff30 	bl	80002d8 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  float32_t a = arm_sin_f32(PI / 6);
 8000478:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8000498 <main+0xfc>
 800047c:	f002 f95a 	bl	8002734 <arm_sin_f32>
 8000480:	ed87 0a03 	vstr	s0, [r7, #12]
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000484:	2101      	movs	r1, #1
 8000486:	4805      	ldr	r0, [pc, #20]	; (800049c <main+0x100>)
 8000488:	f000 fe13 	bl	80010b2 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 800048c:	20c8      	movs	r0, #200	; 0xc8
 800048e:	f000 fabb 	bl	8000a08 <HAL_Delay>
  {
 8000492:	e7f1      	b.n	8000478 <main+0xdc>
 8000494:	e000ed00 	.word	0xe000ed00
 8000498:	3f060a92 	.word	0x3f060a92
 800049c:	58020400 	.word	0x58020400

080004a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b09e      	sub	sp, #120	; 0x78
 80004a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004aa:	224c      	movs	r2, #76	; 0x4c
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 f986 	bl	80027c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b4:	f107 030c 	add.w	r3, r7, #12
 80004b8:	2220      	movs	r2, #32
 80004ba:	2100      	movs	r1, #0
 80004bc:	4618      	mov	r0, r3
 80004be:	f002 f97f 	bl	80027c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004c2:	2002      	movs	r0, #2
 80004c4:	f000 fe10 	bl	80010e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004c8:	2300      	movs	r3, #0
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	4b48      	ldr	r3, [pc, #288]	; (80005f0 <SystemClock_Config+0x150>)
 80004ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d0:	4a47      	ldr	r2, [pc, #284]	; (80005f0 <SystemClock_Config+0x150>)
 80004d2:	f023 0301 	bic.w	r3, r3, #1
 80004d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004d8:	4b45      	ldr	r3, [pc, #276]	; (80005f0 <SystemClock_Config+0x150>)
 80004da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004dc:	f003 0301 	and.w	r3, r3, #1
 80004e0:	60bb      	str	r3, [r7, #8]
 80004e2:	4b44      	ldr	r3, [pc, #272]	; (80005f4 <SystemClock_Config+0x154>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a43      	ldr	r2, [pc, #268]	; (80005f4 <SystemClock_Config+0x154>)
 80004e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004ec:	6193      	str	r3, [r2, #24]
 80004ee:	4b41      	ldr	r3, [pc, #260]	; (80005f4 <SystemClock_Config+0x154>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004fa:	bf00      	nop
 80004fc:	4b3d      	ldr	r3, [pc, #244]	; (80005f4 <SystemClock_Config+0x154>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000508:	d1f8      	bne.n	80004fc <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050a:	4b3b      	ldr	r3, [pc, #236]	; (80005f8 <SystemClock_Config+0x158>)
 800050c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000510:	4a39      	ldr	r2, [pc, #228]	; (80005f8 <SystemClock_Config+0x158>)
 8000512:	f043 0302 	orr.w	r3, r3, #2
 8000516:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800051a:	4b37      	ldr	r3, [pc, #220]	; (80005f8 <SystemClock_Config+0x158>)
 800051c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000520:	f003 0302 	and.w	r3, r3, #2
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000528:	2300      	movs	r3, #0
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <SystemClock_Config+0x154>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a30      	ldr	r2, [pc, #192]	; (80005f4 <SystemClock_Config+0x154>)
 8000532:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <SystemClock_Config+0x154>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000540:	603b      	str	r3, [r7, #0]
 8000542:	4b2b      	ldr	r3, [pc, #172]	; (80005f0 <SystemClock_Config+0x150>)
 8000544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000546:	4a2a      	ldr	r2, [pc, #168]	; (80005f0 <SystemClock_Config+0x150>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800054e:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <SystemClock_Config+0x150>)
 8000550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800055a:	bf00      	nop
 800055c:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <SystemClock_Config+0x154>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000568:	d1f8      	bne.n	800055c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056a:	2301      	movs	r3, #1
 800056c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000572:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	2302      	movs	r3, #2
 8000576:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000578:	2302      	movs	r3, #2
 800057a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 800057c:	2305      	movs	r3, #5
 800057e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000580:	23c0      	movs	r3, #192	; 0xc0
 8000582:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000584:	2302      	movs	r3, #2
 8000586:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000588:	2302      	movs	r3, #2
 800058a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800058c:	2302      	movs	r3, #2
 800058e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000590:	2308      	movs	r3, #8
 8000592:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000594:	2300      	movs	r3, #0
 8000596:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fddb 	bl	800115c <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80005ac:	f000 f866 	bl	800067c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	233f      	movs	r3, #63	; 0x3f
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2303      	movs	r3, #3
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005bc:	2308      	movs	r3, #8
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005c0:	2340      	movs	r3, #64	; 0x40
 80005c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005c4:	2340      	movs	r3, #64	; 0x40
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005ce:	2340      	movs	r3, #64	; 0x40
 80005d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2104      	movs	r1, #4
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fa19 	bl	8001a10 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80005e4:	f000 f84a 	bl	800067c <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3778      	adds	r7, #120	; 0x78
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	58000400 	.word	0x58000400
 80005f4:	58024800 	.word	0x58024800
 80005f8:	58024400 	.word	0x58024400

080005fc <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800060e:	f000 fb0b 	bl	8000c28 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000612:	2301      	movs	r3, #1
 8000614:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000616:	2300      	movs	r3, #0
 8000618:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800061a:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800061e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000620:	2312      	movs	r3, #18
 8000622:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000624:	2300      	movs	r3, #0
 8000626:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000628:	2301      	movs	r3, #1
 800062a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800062c:	2303      	movs	r3, #3
 800062e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000634:	2300      	movs	r3, #0
 8000636:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000638:	2301      	movs	r3, #1
 800063a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800063c:	2301      	movs	r3, #1
 800063e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000640:	463b      	mov	r3, r7
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fb28 	bl	8000c98 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000648:	2004      	movs	r0, #4
 800064a:	f000 fb05 	bl	8000c58 <HAL_MPU_Enable>

}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d101      	bne.n	800066e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800066a:	f000 f9ad 	bl	80009c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40010000 	.word	0x40010000

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
}
 8000682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000684:	e7fe      	b.n	8000684 <Error_Handler+0x8>
	...

08000688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <HAL_MspInit+0x30>)
 8000690:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000694:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <HAL_MspInit+0x30>)
 8000696:	f043 0302 	orr.w	r3, r3, #2
 800069a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_MspInit+0x30>)
 80006a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006a4:	f003 0302 	and.w	r3, r3, #2
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	58024400 	.word	0x58024400

080006bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08e      	sub	sp, #56	; 0x38
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b0f      	cmp	r3, #15
 80006c8:	d844      	bhi.n	8000754 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80006ca:	2200      	movs	r2, #0
 80006cc:	6879      	ldr	r1, [r7, #4]
 80006ce:	2019      	movs	r0, #25
 80006d0:	f000 fa82 	bl	8000bd8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80006d4:	2019      	movs	r0, #25
 80006d6:	f000 fa99 	bl	8000c0c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80006da:	4a24      	ldr	r2, [pc, #144]	; (800076c <HAL_InitTick+0xb0>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <HAL_InitTick+0xb4>)
 80006e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80006e6:	4a22      	ldr	r2, [pc, #136]	; (8000770 <HAL_InitTick+0xb4>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <HAL_InitTick+0xb4>)
 80006f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006fe:	f107 020c 	add.w	r2, r7, #12
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	4611      	mov	r1, r2
 8000708:	4618      	mov	r0, r3
 800070a:	f001 fcf7 	bl	80020fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800070e:	f001 fcdf 	bl	80020d0 <HAL_RCC_GetPCLK2Freq>
 8000712:	4603      	mov	r3, r0
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800071a:	4a16      	ldr	r2, [pc, #88]	; (8000774 <HAL_InitTick+0xb8>)
 800071c:	fba2 2303 	umull	r2, r3, r2, r3
 8000720:	0c9b      	lsrs	r3, r3, #18
 8000722:	3b01      	subs	r3, #1
 8000724:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <HAL_InitTick+0xbc>)
 8000728:	4a14      	ldr	r2, [pc, #80]	; (800077c <HAL_InitTick+0xc0>)
 800072a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_InitTick+0xbc>)
 800072e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000732:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000734:	4a10      	ldr	r2, [pc, #64]	; (8000778 <HAL_InitTick+0xbc>)
 8000736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000738:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_InitTick+0xbc>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <HAL_InitTick+0xbc>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <HAL_InitTick+0xbc>)
 8000748:	f001 fd1a 	bl	8002180 <HAL_TIM_Base_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d107      	bne.n	8000762 <HAL_InitTick+0xa6>
 8000752:	e001      	b.n	8000758 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000754:	2301      	movs	r3, #1
 8000756:	e005      	b.n	8000764 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000758:	4807      	ldr	r0, [pc, #28]	; (8000778 <HAL_InitTick+0xbc>)
 800075a:	f001 fd73 	bl	8002244 <HAL_TIM_Base_Start_IT>
 800075e:	4603      	mov	r3, r0
 8000760:	e000      	b.n	8000764 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
}
 8000764:	4618      	mov	r0, r3
 8000766:	3738      	adds	r7, #56	; 0x38
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	24000008 	.word	0x24000008
 8000770:	58024400 	.word	0x58024400
 8000774:	431bde83 	.word	0x431bde83
 8000778:	2400002c 	.word	0x2400002c
 800077c:	40010000 	.word	0x40010000

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000784:	e7fe      	b.n	8000784 <NMI_Handler+0x4>

08000786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <MemManage_Handler+0x4>

08000792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <UsageFault_Handler+0x4>

0800079e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <TIM1_UP_IRQHandler+0x10>)
 80007de:	f001 fda9 	bl	8002334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2400002c 	.word	0x2400002c

080007ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007f0:	4b37      	ldr	r3, [pc, #220]	; (80008d0 <SystemInit+0xe4>)
 80007f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f6:	4a36      	ldr	r2, [pc, #216]	; (80008d0 <SystemInit+0xe4>)
 80007f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000800:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <SystemInit+0xe8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f003 030f 	and.w	r3, r3, #15
 8000808:	2b06      	cmp	r3, #6
 800080a:	d807      	bhi.n	800081c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800080c:	4b31      	ldr	r3, [pc, #196]	; (80008d4 <SystemInit+0xe8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f023 030f 	bic.w	r3, r3, #15
 8000814:	4a2f      	ldr	r2, [pc, #188]	; (80008d4 <SystemInit+0xe8>)
 8000816:	f043 0307 	orr.w	r3, r3, #7
 800081a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800081c:	4b2e      	ldr	r3, [pc, #184]	; (80008d8 <SystemInit+0xec>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a2d      	ldr	r2, [pc, #180]	; (80008d8 <SystemInit+0xec>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000828:	4b2b      	ldr	r3, [pc, #172]	; (80008d8 <SystemInit+0xec>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800082e:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <SystemInit+0xec>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	4929      	ldr	r1, [pc, #164]	; (80008d8 <SystemInit+0xec>)
 8000834:	4b29      	ldr	r3, [pc, #164]	; (80008dc <SystemInit+0xf0>)
 8000836:	4013      	ands	r3, r2
 8000838:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800083a:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <SystemInit+0xe8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	2b00      	cmp	r3, #0
 8000844:	d007      	beq.n	8000856 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000846:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <SystemInit+0xe8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f023 030f 	bic.w	r3, r3, #15
 800084e:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <SystemInit+0xe8>)
 8000850:	f043 0307 	orr.w	r3, r3, #7
 8000854:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <SystemInit+0xec>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <SystemInit+0xec>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <SystemInit+0xec>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <SystemInit+0xec>)
 800086a:	4a1d      	ldr	r2, [pc, #116]	; (80008e0 <SystemInit+0xf4>)
 800086c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <SystemInit+0xec>)
 8000870:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <SystemInit+0xf8>)
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <SystemInit+0xec>)
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <SystemInit+0xfc>)
 8000878:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <SystemInit+0xec>)
 800087c:	2200      	movs	r2, #0
 800087e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <SystemInit+0xec>)
 8000882:	4a19      	ldr	r2, [pc, #100]	; (80008e8 <SystemInit+0xfc>)
 8000884:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <SystemInit+0xec>)
 8000888:	2200      	movs	r2, #0
 800088a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <SystemInit+0xec>)
 800088e:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <SystemInit+0xfc>)
 8000890:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <SystemInit+0xec>)
 8000894:	2200      	movs	r2, #0
 8000896:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <SystemInit+0xec>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <SystemInit+0xec>)
 800089e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <SystemInit+0xec>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <SystemInit+0x100>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <SystemInit+0x104>)
 80008b0:	4013      	ands	r3, r2
 80008b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80008b6:	d202      	bcs.n	80008be <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <SystemInit+0x108>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <SystemInit+0x10c>)
 80008c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80008c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000ed00 	.word	0xe000ed00
 80008d4:	52002000 	.word	0x52002000
 80008d8:	58024400 	.word	0x58024400
 80008dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80008e0:	02020200 	.word	0x02020200
 80008e4:	01ff0000 	.word	0x01ff0000
 80008e8:	01010280 	.word	0x01010280
 80008ec:	5c001000 	.word	0x5c001000
 80008f0:	ffff0000 	.word	0xffff0000
 80008f4:	51008108 	.word	0x51008108
 80008f8:	52004000 	.word	0x52004000

080008fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000934 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000900:	f7ff ff74 	bl	80007ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	; (800093c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	; (8000948 <LoopFillZerobss+0x22>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092a:	f001 ff51 	bl	80027d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800092e:	f7ff fd35 	bl	800039c <main>
  bx  lr
 8000932:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000934:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000938:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800093c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000940:	0800304c 	.word	0x0800304c
  ldr r2, =_sbss
 8000944:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000948:	2400007c 	.word	0x2400007c

0800094c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC3_IRQHandler>
	...

08000950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000956:	2003      	movs	r0, #3
 8000958:	f000 f933 	bl	8000bc2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800095c:	f001 fa0e 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8000960:	4602      	mov	r2, r0
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_Init+0x68>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	0a1b      	lsrs	r3, r3, #8
 8000968:	f003 030f 	and.w	r3, r3, #15
 800096c:	4913      	ldr	r1, [pc, #76]	; (80009bc <HAL_Init+0x6c>)
 800096e:	5ccb      	ldrb	r3, [r1, r3]
 8000970:	f003 031f 	and.w	r3, r3, #31
 8000974:	fa22 f303 	lsr.w	r3, r2, r3
 8000978:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_Init+0x68>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <HAL_Init+0x6c>)
 8000984:	5cd3      	ldrb	r3, [r2, r3]
 8000986:	f003 031f 	and.w	r3, r3, #31
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	fa22 f303 	lsr.w	r3, r2, r3
 8000990:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <HAL_Init+0x70>)
 8000992:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000994:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <HAL_Init+0x74>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800099a:	200f      	movs	r0, #15
 800099c:	f7ff fe8e 	bl	80006bc <HAL_InitTick>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e002      	b.n	80009b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009aa:	f7ff fe6d 	bl	8000688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	58024400 	.word	0x58024400
 80009bc:	08002830 	.word	0x08002830
 80009c0:	24000004 	.word	0x24000004
 80009c4:	24000000 	.word	0x24000000

080009c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x20>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x24>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_IncTick+0x24>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	2400000c 	.word	0x2400000c
 80009ec:	24000078 	.word	0x24000078

080009f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <HAL_GetTick+0x14>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	24000078 	.word	0x24000078

08000a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a10:	f7ff ffee 	bl	80009f0 <HAL_GetTick>
 8000a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a20:	d005      	beq.n	8000a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <HAL_Delay+0x44>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a2e:	bf00      	nop
 8000a30:	f7ff ffde 	bl	80009f0 <HAL_GetTick>
 8000a34:	4602      	mov	r2, r0
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d8f7      	bhi.n	8000a30 <HAL_Delay+0x28>
  {
  }
}
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2400000c 	.word	0x2400000c

08000a50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <HAL_GetREVID+0x14>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	0c1b      	lsrs	r3, r3, #16
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	5c001000 	.word	0x5c001000

08000a68 <__NVIC_SetPriorityGrouping>:
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x40>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a84:	4013      	ands	r3, r2
 8000a86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	4313      	orrs	r3, r2
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x40>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00
 8000aac:	05fa0000 	.word	0x05fa0000

08000ab0 <__NVIC_GetPriorityGrouping>:
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	f003 0307 	and.w	r3, r3, #7
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_EnableIRQ>:
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db0b      	blt.n	8000af6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	f003 021f 	and.w	r2, r3, #31
 8000ae4:	4907      	ldr	r1, [pc, #28]	; (8000b04 <__NVIC_EnableIRQ+0x38>)
 8000ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	2001      	movs	r0, #1
 8000aee:	fa00 f202 	lsl.w	r2, r0, r2
 8000af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000e100 	.word	0xe000e100

08000b08 <__NVIC_SetPriority>:
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	db0a      	blt.n	8000b32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	490c      	ldr	r1, [pc, #48]	; (8000b54 <__NVIC_SetPriority+0x4c>)
 8000b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b26:	0112      	lsls	r2, r2, #4
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b30:	e00a      	b.n	8000b48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4908      	ldr	r1, [pc, #32]	; (8000b58 <__NVIC_SetPriority+0x50>)
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	3b04      	subs	r3, #4
 8000b40:	0112      	lsls	r2, r2, #4
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	440b      	add	r3, r1
 8000b46:	761a      	strb	r2, [r3, #24]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000e100 	.word	0xe000e100
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <NVIC_EncodePriority>:
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	f1c3 0307 	rsb	r3, r3, #7
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	bf28      	it	cs
 8000b7a:	2304      	movcs	r3, #4
 8000b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3304      	adds	r3, #4
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d902      	bls.n	8000b8c <NVIC_EncodePriority+0x30>
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3b03      	subs	r3, #3
 8000b8a:	e000      	b.n	8000b8e <NVIC_EncodePriority+0x32>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	43d9      	mvns	r1, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	4313      	orrs	r3, r2
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3724      	adds	r7, #36	; 0x24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ff4c 	bl	8000a68 <__NVIC_SetPriorityGrouping>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000be6:	f7ff ff63 	bl	8000ab0 <__NVIC_GetPriorityGrouping>
 8000bea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	68b9      	ldr	r1, [r7, #8]
 8000bf0:	6978      	ldr	r0, [r7, #20]
 8000bf2:	f7ff ffb3 	bl	8000b5c <NVIC_EncodePriority>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff82 	bl	8000b08 <__NVIC_SetPriority>
}
 8000c04:	bf00      	nop
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff56 	bl	8000acc <__NVIC_EnableIRQ>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000c2c:	f3bf 8f5f 	dmb	sy
}
 8000c30:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <HAL_MPU_Disable+0x28>)
 8000c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c36:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <HAL_MPU_Disable+0x28>)
 8000c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c3c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_MPU_Disable+0x2c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00
 8000c54:	e000ed90 	.word	0xe000ed90

08000c58 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000c60:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <HAL_MPU_Enable+0x38>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <HAL_MPU_Enable+0x3c>)
 8000c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6e:	4a09      	ldr	r2, [pc, #36]	; (8000c94 <HAL_MPU_Enable+0x3c>)
 8000c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c74:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000c76:	f3bf 8f4f 	dsb	sy
}
 8000c7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c7c:	f3bf 8f6f 	isb	sy
}
 8000c80:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed90 	.word	0xe000ed90
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	785a      	ldrb	r2, [r3, #1]
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <HAL_MPU_ConfigRegion+0x84>)
 8000ca6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d029      	beq.n	8000d04 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000cb0:	4a1a      	ldr	r2, [pc, #104]	; (8000d1c <HAL_MPU_ConfigRegion+0x84>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	7b1b      	ldrb	r3, [r3, #12]
 8000cbc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	7adb      	ldrb	r3, [r3, #11]
 8000cc2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000cc4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	7a9b      	ldrb	r3, [r3, #10]
 8000cca:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ccc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	7b5b      	ldrb	r3, [r3, #13]
 8000cd2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000cd4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	7b9b      	ldrb	r3, [r3, #14]
 8000cda:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000cdc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7bdb      	ldrb	r3, [r3, #15]
 8000ce2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ce4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	7a5b      	ldrb	r3, [r3, #9]
 8000cea:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000cec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	7a1b      	ldrb	r3, [r3, #8]
 8000cf2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000cf4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	7812      	ldrb	r2, [r2, #0]
 8000cfa:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000cfe:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d00:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000d02:	e005      	b.n	8000d10 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <HAL_MPU_ConfigRegion+0x84>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000d0a:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <HAL_MPU_ConfigRegion+0x84>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed90 	.word	0xe000ed90

08000d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000d2e:	4b89      	ldr	r3, [pc, #548]	; (8000f54 <HAL_GPIO_Init+0x234>)
 8000d30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d32:	e194      	b.n	800105e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	2101      	movs	r1, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f000 8186 	beq.w	8001058 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d005      	beq.n	8000d64 <HAL_GPIO_Init+0x44>
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d130      	bne.n	8000dc6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	091b      	lsrs	r3, r3, #4
 8000db0:	f003 0201 	and.w	r2, r3, #1
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d017      	beq.n	8000e02 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4013      	ands	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d123      	bne.n	8000e56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	08da      	lsrs	r2, r3, #3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3208      	adds	r2, #8
 8000e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	220f      	movs	r2, #15
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	691a      	ldr	r2, [r3, #16]
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	08da      	lsrs	r2, r3, #3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3208      	adds	r2, #8
 8000e50:	69b9      	ldr	r1, [r7, #24]
 8000e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2203      	movs	r2, #3
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0203 	and.w	r2, r3, #3
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 80e0 	beq.w	8001058 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e98:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <HAL_GPIO_Init+0x238>)
 8000e9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e9e:	4a2e      	ldr	r2, [pc, #184]	; (8000f58 <HAL_GPIO_Init+0x238>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <HAL_GPIO_Init+0x238>)
 8000eaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb6:	4a29      	ldr	r2, [pc, #164]	; (8000f5c <HAL_GPIO_Init+0x23c>)
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	220f      	movs	r2, #15
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a20      	ldr	r2, [pc, #128]	; (8000f60 <HAL_GPIO_Init+0x240>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d052      	beq.n	8000f88 <HAL_GPIO_Init+0x268>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a1f      	ldr	r2, [pc, #124]	; (8000f64 <HAL_GPIO_Init+0x244>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d031      	beq.n	8000f4e <HAL_GPIO_Init+0x22e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <HAL_GPIO_Init+0x248>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d02b      	beq.n	8000f4a <HAL_GPIO_Init+0x22a>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <HAL_GPIO_Init+0x24c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d025      	beq.n	8000f46 <HAL_GPIO_Init+0x226>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a1c      	ldr	r2, [pc, #112]	; (8000f70 <HAL_GPIO_Init+0x250>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d01f      	beq.n	8000f42 <HAL_GPIO_Init+0x222>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <HAL_GPIO_Init+0x254>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0x21e>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a1a      	ldr	r2, [pc, #104]	; (8000f78 <HAL_GPIO_Init+0x258>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x21a>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a19      	ldr	r2, [pc, #100]	; (8000f7c <HAL_GPIO_Init+0x25c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x216>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <HAL_GPIO_Init+0x260>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x212>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <HAL_GPIO_Init+0x264>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x20e>
 8000f2a:	2309      	movs	r3, #9
 8000f2c:	e02d      	b.n	8000f8a <HAL_GPIO_Init+0x26a>
 8000f2e:	230a      	movs	r3, #10
 8000f30:	e02b      	b.n	8000f8a <HAL_GPIO_Init+0x26a>
 8000f32:	2308      	movs	r3, #8
 8000f34:	e029      	b.n	8000f8a <HAL_GPIO_Init+0x26a>
 8000f36:	2307      	movs	r3, #7
 8000f38:	e027      	b.n	8000f8a <HAL_GPIO_Init+0x26a>
 8000f3a:	2306      	movs	r3, #6
 8000f3c:	e025      	b.n	8000f8a <HAL_GPIO_Init+0x26a>
 8000f3e:	2305      	movs	r3, #5
 8000f40:	e023      	b.n	8000f8a <HAL_GPIO_Init+0x26a>
 8000f42:	2304      	movs	r3, #4
 8000f44:	e021      	b.n	8000f8a <HAL_GPIO_Init+0x26a>
 8000f46:	2303      	movs	r3, #3
 8000f48:	e01f      	b.n	8000f8a <HAL_GPIO_Init+0x26a>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e01d      	b.n	8000f8a <HAL_GPIO_Init+0x26a>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e01b      	b.n	8000f8a <HAL_GPIO_Init+0x26a>
 8000f52:	bf00      	nop
 8000f54:	58000080 	.word	0x58000080
 8000f58:	58024400 	.word	0x58024400
 8000f5c:	58000400 	.word	0x58000400
 8000f60:	58020000 	.word	0x58020000
 8000f64:	58020400 	.word	0x58020400
 8000f68:	58020800 	.word	0x58020800
 8000f6c:	58020c00 	.word	0x58020c00
 8000f70:	58021000 	.word	0x58021000
 8000f74:	58021400 	.word	0x58021400
 8000f78:	58021800 	.word	0x58021800
 8000f7c:	58021c00 	.word	0x58021c00
 8000f80:	58022000 	.word	0x58022000
 8000f84:	58022400 	.word	0x58022400
 8000f88:	2300      	movs	r3, #0
 8000f8a:	69fa      	ldr	r2, [r7, #28]
 8000f8c:	f002 0203 	and.w	r2, r2, #3
 8000f90:	0092      	lsls	r2, r2, #2
 8000f92:	4093      	lsls	r3, r2
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f9a:	4938      	ldr	r1, [pc, #224]	; (800107c <HAL_GPIO_Init+0x35c>)
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	3301      	adds	r3, #1
 800105c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa22 f303 	lsr.w	r3, r2, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	f47f ae63 	bne.w	8000d34 <HAL_GPIO_Init+0x14>
  }
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	3724      	adds	r7, #36	; 0x24
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	58000400 	.word	0x58000400

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800109c:	e003      	b.n	80010a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	041a      	lsls	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	619a      	str	r2, [r3, #24]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b085      	sub	sp, #20
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	460b      	mov	r3, r1
 80010bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010c4:	887a      	ldrh	r2, [r7, #2]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4013      	ands	r3, r2
 80010ca:	041a      	lsls	r2, r3, #16
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	400b      	ands	r3, r1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	619a      	str	r2, [r3, #24]
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <HAL_PWREx_ConfigSupply+0x70>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d00a      	beq.n	8001112 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_PWREx_ConfigSupply+0x70>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	429a      	cmp	r2, r3
 8001108:	d001      	beq.n	800110e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e01f      	b.n	800114e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	e01d      	b.n	800114e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_PWREx_ConfigSupply+0x70>)
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	f023 0207 	bic.w	r2, r3, #7
 800111a:	490f      	ldr	r1, [pc, #60]	; (8001158 <HAL_PWREx_ConfigSupply+0x70>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4313      	orrs	r3, r2
 8001120:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001122:	f7ff fc65 	bl	80009f0 <HAL_GetTick>
 8001126:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001128:	e009      	b.n	800113e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800112a:	f7ff fc61 	bl	80009f0 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001138:	d901      	bls.n	800113e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e007      	b.n	800114e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_PWREx_ConfigSupply+0x70>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800114a:	d1ee      	bne.n	800112a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	58024800 	.word	0x58024800

0800115c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	; 0x30
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	f000 bc48 	b.w	8001a00 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 8088 	beq.w	800128e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800117e:	4b99      	ldr	r3, [pc, #612]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001188:	4b96      	ldr	r3, [pc, #600]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 800118a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800118e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001190:	2b10      	cmp	r3, #16
 8001192:	d007      	beq.n	80011a4 <HAL_RCC_OscConfig+0x48>
 8001194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001196:	2b18      	cmp	r3, #24
 8001198:	d111      	bne.n	80011be <HAL_RCC_OscConfig+0x62>
 800119a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d10c      	bne.n	80011be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	4b8f      	ldr	r3, [pc, #572]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d06d      	beq.n	800128c <HAL_RCC_OscConfig+0x130>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d169      	bne.n	800128c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	f000 bc21 	b.w	8001a00 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c6:	d106      	bne.n	80011d6 <HAL_RCC_OscConfig+0x7a>
 80011c8:	4b86      	ldr	r3, [pc, #536]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a85      	ldr	r2, [pc, #532]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 80011ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	e02e      	b.n	8001234 <HAL_RCC_OscConfig+0xd8>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x9c>
 80011de:	4b81      	ldr	r3, [pc, #516]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a80      	ldr	r2, [pc, #512]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 80011e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	4b7e      	ldr	r3, [pc, #504]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a7d      	ldr	r2, [pc, #500]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 80011f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e01d      	b.n	8001234 <HAL_RCC_OscConfig+0xd8>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001200:	d10c      	bne.n	800121c <HAL_RCC_OscConfig+0xc0>
 8001202:	4b78      	ldr	r3, [pc, #480]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a77      	ldr	r2, [pc, #476]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 8001208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	4b75      	ldr	r3, [pc, #468]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a74      	ldr	r2, [pc, #464]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 8001214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e00b      	b.n	8001234 <HAL_RCC_OscConfig+0xd8>
 800121c:	4b71      	ldr	r3, [pc, #452]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a70      	ldr	r2, [pc, #448]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 8001222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b6e      	ldr	r3, [pc, #440]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a6d      	ldr	r2, [pc, #436]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 800122e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d013      	beq.n	8001264 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123c:	f7ff fbd8 	bl	80009f0 <HAL_GetTick>
 8001240:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001244:	f7ff fbd4 	bl	80009f0 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b64      	cmp	r3, #100	; 0x64
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e3d4      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001256:	4b63      	ldr	r3, [pc, #396]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0xe8>
 8001262:	e014      	b.n	800128e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001264:	f7ff fbc4 	bl	80009f0 <HAL_GetTick>
 8001268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fbc0 	bl	80009f0 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	; 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e3c0      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800127e:	4b59      	ldr	r3, [pc, #356]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x110>
 800128a:	e000      	b.n	800128e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 80ca 	beq.w	8001430 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800129c:	4b51      	ldr	r3, [pc, #324]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012a6:	4b4f      	ldr	r3, [pc, #316]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 80012a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d007      	beq.n	80012c2 <HAL_RCC_OscConfig+0x166>
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	2b18      	cmp	r3, #24
 80012b6:	d156      	bne.n	8001366 <HAL_RCC_OscConfig+0x20a>
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d151      	bne.n	8001366 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c2:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <HAL_RCC_OscConfig+0x17e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e392      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012da:	4b42      	ldr	r3, [pc, #264]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 0219 	bic.w	r2, r3, #25
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	493f      	ldr	r1, [pc, #252]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ec:	f7ff fb80 	bl	80009f0 <HAL_GetTick>
 80012f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f4:	f7ff fb7c 	bl	80009f0 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e37c      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001306:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001312:	f7ff fb9d 	bl	8000a50 <HAL_GetREVID>
 8001316:	4603      	mov	r3, r0
 8001318:	f241 0203 	movw	r2, #4099	; 0x1003
 800131c:	4293      	cmp	r3, r2
 800131e:	d817      	bhi.n	8001350 <HAL_RCC_OscConfig+0x1f4>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	2b40      	cmp	r3, #64	; 0x40
 8001326:	d108      	bne.n	800133a <HAL_RCC_OscConfig+0x1de>
 8001328:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001330:	4a2c      	ldr	r2, [pc, #176]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 8001332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001336:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001338:	e07a      	b.n	8001430 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133a:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	031b      	lsls	r3, r3, #12
 8001348:	4926      	ldr	r1, [pc, #152]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800134e:	e06f      	b.n	8001430 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001350:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	061b      	lsls	r3, r3, #24
 800135e:	4921      	ldr	r1, [pc, #132]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001364:	e064      	b.n	8001430 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d047      	beq.n	80013fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800136e:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 0219 	bic.w	r2, r3, #25
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	491a      	ldr	r1, [pc, #104]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff fb36 	bl	80009f0 <HAL_GetTick>
 8001384:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001388:	f7ff fb32 	bl	80009f0 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e332      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a6:	f7ff fb53 	bl	8000a50 <HAL_GetREVID>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d819      	bhi.n	80013e8 <HAL_RCC_OscConfig+0x28c>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	2b40      	cmp	r3, #64	; 0x40
 80013ba:	d108      	bne.n	80013ce <HAL_RCC_OscConfig+0x272>
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 80013c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ca:	6053      	str	r3, [r2, #4]
 80013cc:	e030      	b.n	8001430 <HAL_RCC_OscConfig+0x2d4>
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	031b      	lsls	r3, r3, #12
 80013dc:	4901      	ldr	r1, [pc, #4]	; (80013e4 <HAL_RCC_OscConfig+0x288>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
 80013e2:	e025      	b.n	8001430 <HAL_RCC_OscConfig+0x2d4>
 80013e4:	58024400 	.word	0x58024400
 80013e8:	4b9a      	ldr	r3, [pc, #616]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	061b      	lsls	r3, r3, #24
 80013f6:	4997      	ldr	r1, [pc, #604]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
 80013fc:	e018      	b.n	8001430 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fe:	4b95      	ldr	r3, [pc, #596]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a94      	ldr	r2, [pc, #592]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140a:	f7ff faf1 	bl	80009f0 <HAL_GetTick>
 800140e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001412:	f7ff faed 	bl	80009f0 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e2ed      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001424:	4b8b      	ldr	r3, [pc, #556]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80a9 	beq.w	8001590 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800143e:	4b85      	ldr	r3, [pc, #532]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001446:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001448:	4b82      	ldr	r3, [pc, #520]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	2b08      	cmp	r3, #8
 8001452:	d007      	beq.n	8001464 <HAL_RCC_OscConfig+0x308>
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b18      	cmp	r3, #24
 8001458:	d13a      	bne.n	80014d0 <HAL_RCC_OscConfig+0x374>
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b01      	cmp	r3, #1
 8001462:	d135      	bne.n	80014d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001464:	4b7b      	ldr	r3, [pc, #492]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_OscConfig+0x320>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	2b80      	cmp	r3, #128	; 0x80
 8001476:	d001      	beq.n	800147c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e2c1      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800147c:	f7ff fae8 	bl	8000a50 <HAL_GetREVID>
 8001480:	4603      	mov	r3, r0
 8001482:	f241 0203 	movw	r2, #4099	; 0x1003
 8001486:	4293      	cmp	r3, r2
 8001488:	d817      	bhi.n	80014ba <HAL_RCC_OscConfig+0x35e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	2b20      	cmp	r3, #32
 8001490:	d108      	bne.n	80014a4 <HAL_RCC_OscConfig+0x348>
 8001492:	4b70      	ldr	r3, [pc, #448]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800149a:	4a6e      	ldr	r2, [pc, #440]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 800149c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014a2:	e075      	b.n	8001590 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014a4:	4b6b      	ldr	r3, [pc, #428]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	069b      	lsls	r3, r3, #26
 80014b2:	4968      	ldr	r1, [pc, #416]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014b8:	e06a      	b.n	8001590 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014ba:	4b66      	ldr	r3, [pc, #408]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	061b      	lsls	r3, r3, #24
 80014c8:	4962      	ldr	r1, [pc, #392]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014ce:	e05f      	b.n	8001590 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d042      	beq.n	800155e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80014d8:	4b5e      	ldr	r3, [pc, #376]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a5d      	ldr	r2, [pc, #372]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 80014de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff fa84 	bl	80009f0 <HAL_GetTick>
 80014e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80014ec:	f7ff fa80 	bl	80009f0 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e280      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014fe:	4b55      	ldr	r3, [pc, #340]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800150a:	f7ff faa1 	bl	8000a50 <HAL_GetREVID>
 800150e:	4603      	mov	r3, r0
 8001510:	f241 0203 	movw	r2, #4099	; 0x1003
 8001514:	4293      	cmp	r3, r2
 8001516:	d817      	bhi.n	8001548 <HAL_RCC_OscConfig+0x3ec>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	2b20      	cmp	r3, #32
 800151e:	d108      	bne.n	8001532 <HAL_RCC_OscConfig+0x3d6>
 8001520:	4b4c      	ldr	r3, [pc, #304]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001528:	4a4a      	ldr	r2, [pc, #296]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 800152a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800152e:	6053      	str	r3, [r2, #4]
 8001530:	e02e      	b.n	8001590 <HAL_RCC_OscConfig+0x434>
 8001532:	4b48      	ldr	r3, [pc, #288]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	069b      	lsls	r3, r3, #26
 8001540:	4944      	ldr	r1, [pc, #272]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001542:	4313      	orrs	r3, r2
 8001544:	604b      	str	r3, [r1, #4]
 8001546:	e023      	b.n	8001590 <HAL_RCC_OscConfig+0x434>
 8001548:	4b42      	ldr	r3, [pc, #264]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	061b      	lsls	r3, r3, #24
 8001556:	493f      	ldr	r1, [pc, #252]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001558:	4313      	orrs	r3, r2
 800155a:	60cb      	str	r3, [r1, #12]
 800155c:	e018      	b.n	8001590 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800155e:	4b3d      	ldr	r3, [pc, #244]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a3c      	ldr	r2, [pc, #240]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156a:	f7ff fa41 	bl	80009f0 <HAL_GetTick>
 800156e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001572:	f7ff fa3d 	bl	80009f0 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e23d      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001584:	4b33      	ldr	r3, [pc, #204]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f0      	bne.n	8001572 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d036      	beq.n	800160a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d019      	beq.n	80015d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 80015a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a8:	4a2a      	ldr	r2, [pc, #168]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b0:	f7ff fa1e 	bl	80009f0 <HAL_GetTick>
 80015b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b8:	f7ff fa1a 	bl	80009f0 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e21a      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 80015cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x45c>
 80015d6:	e018      	b.n	800160a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 80015da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015dc:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 80015de:	f023 0301 	bic.w	r3, r3, #1
 80015e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff fa04 	bl	80009f0 <HAL_GetTick>
 80015e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ec:	f7ff fa00 	bl	80009f0 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e200      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0320 	and.w	r3, r3, #32
 8001612:	2b00      	cmp	r3, #0
 8001614:	d039      	beq.n	800168a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d01c      	beq.n	8001658 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001624:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001628:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800162a:	f7ff f9e1 	bl	80009f0 <HAL_GetTick>
 800162e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001632:	f7ff f9dd 	bl	80009f0 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e1dd      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x4d6>
 8001650:	e01b      	b.n	800168a <HAL_RCC_OscConfig+0x52e>
 8001652:	bf00      	nop
 8001654:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001658:	4b9b      	ldr	r3, [pc, #620]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a9a      	ldr	r2, [pc, #616]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 800165e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001662:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001664:	f7ff f9c4 	bl	80009f0 <HAL_GetTick>
 8001668:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800166c:	f7ff f9c0 	bl	80009f0 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e1c0      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800167e:	4b92      	ldr	r3, [pc, #584]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 8081 	beq.w	800179a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001698:	4b8c      	ldr	r3, [pc, #560]	; (80018cc <HAL_RCC_OscConfig+0x770>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a8b      	ldr	r2, [pc, #556]	; (80018cc <HAL_RCC_OscConfig+0x770>)
 800169e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016a4:	f7ff f9a4 	bl	80009f0 <HAL_GetTick>
 80016a8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ac:	f7ff f9a0 	bl	80009f0 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e1a0      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016be:	4b83      	ldr	r3, [pc, #524]	; (80018cc <HAL_RCC_OscConfig+0x770>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d106      	bne.n	80016e0 <HAL_RCC_OscConfig+0x584>
 80016d2:	4b7d      	ldr	r3, [pc, #500]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 80016d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d6:	4a7c      	ldr	r2, [pc, #496]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6713      	str	r3, [r2, #112]	; 0x70
 80016de:	e02d      	b.n	800173c <HAL_RCC_OscConfig+0x5e0>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10c      	bne.n	8001702 <HAL_RCC_OscConfig+0x5a6>
 80016e8:	4b77      	ldr	r3, [pc, #476]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	4a76      	ldr	r2, [pc, #472]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	6713      	str	r3, [r2, #112]	; 0x70
 80016f4:	4b74      	ldr	r3, [pc, #464]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f8:	4a73      	ldr	r2, [pc, #460]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 80016fa:	f023 0304 	bic.w	r3, r3, #4
 80016fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001700:	e01c      	b.n	800173c <HAL_RCC_OscConfig+0x5e0>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b05      	cmp	r3, #5
 8001708:	d10c      	bne.n	8001724 <HAL_RCC_OscConfig+0x5c8>
 800170a:	4b6f      	ldr	r3, [pc, #444]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 800170c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170e:	4a6e      	ldr	r2, [pc, #440]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	6713      	str	r3, [r2, #112]	; 0x70
 8001716:	4b6c      	ldr	r3, [pc, #432]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 8001718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171a:	4a6b      	ldr	r2, [pc, #428]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6713      	str	r3, [r2, #112]	; 0x70
 8001722:	e00b      	b.n	800173c <HAL_RCC_OscConfig+0x5e0>
 8001724:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001728:	4a67      	ldr	r2, [pc, #412]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	6713      	str	r3, [r2, #112]	; 0x70
 8001730:	4b65      	ldr	r3, [pc, #404]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001734:	4a64      	ldr	r2, [pc, #400]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 8001736:	f023 0304 	bic.w	r3, r3, #4
 800173a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d015      	beq.n	8001770 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	f7ff f954 	bl	80009f0 <HAL_GetTick>
 8001748:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800174a:	e00a      	b.n	8001762 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174c:	f7ff f950 	bl	80009f0 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f241 3288 	movw	r2, #5000	; 0x1388
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e14e      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001762:	4b59      	ldr	r3, [pc, #356]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0ee      	beq.n	800174c <HAL_RCC_OscConfig+0x5f0>
 800176e:	e014      	b.n	800179a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001770:	f7ff f93e 	bl	80009f0 <HAL_GetTick>
 8001774:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001776:	e00a      	b.n	800178e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001778:	f7ff f93a 	bl	80009f0 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e138      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800178e:	4b4e      	ldr	r3, [pc, #312]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 8001790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1ee      	bne.n	8001778 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 812d 	beq.w	80019fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80017a4:	4b48      	ldr	r3, [pc, #288]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017ac:	2b18      	cmp	r3, #24
 80017ae:	f000 80bd 	beq.w	800192c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	f040 809e 	bne.w	80018f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017bc:	4b42      	ldr	r3, [pc, #264]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a41      	ldr	r2, [pc, #260]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 80017c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff f912 	bl	80009f0 <HAL_GetTick>
 80017cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff f90e 	bl	80009f0 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e10e      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ee:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 80017f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017f2:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <HAL_RCC_OscConfig+0x774>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	430a      	orrs	r2, r1
 8001802:	4931      	ldr	r1, [pc, #196]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 8001804:	4313      	orrs	r3, r2
 8001806:	628b      	str	r3, [r1, #40]	; 0x28
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	3b01      	subs	r3, #1
 800180e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001816:	3b01      	subs	r3, #1
 8001818:	025b      	lsls	r3, r3, #9
 800181a:	b29b      	uxth	r3, r3
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001822:	3b01      	subs	r3, #1
 8001824:	041b      	lsls	r3, r3, #16
 8001826:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001830:	3b01      	subs	r3, #1
 8001832:	061b      	lsls	r3, r3, #24
 8001834:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001838:	4923      	ldr	r1, [pc, #140]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 800183a:	4313      	orrs	r3, r2
 800183c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800183e:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	4a21      	ldr	r2, [pc, #132]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 800184c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800184e:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <HAL_RCC_OscConfig+0x778>)
 8001850:	4013      	ands	r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001856:	00d2      	lsls	r2, r2, #3
 8001858:	491b      	ldr	r1, [pc, #108]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 800185a:	4313      	orrs	r3, r2
 800185c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	f023 020c 	bic.w	r2, r3, #12
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4917      	ldr	r1, [pc, #92]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 800186c:	4313      	orrs	r3, r2
 800186e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	f023 0202 	bic.w	r2, r3, #2
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	4912      	ldr	r1, [pc, #72]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 800187e:	4313      	orrs	r3, r2
 8001880:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	4a10      	ldr	r2, [pc, #64]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 8001894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001898:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 80018a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <HAL_RCC_OscConfig+0x76c>)
 80018b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018be:	f7ff f897 	bl	80009f0 <HAL_GetTick>
 80018c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018c4:	e011      	b.n	80018ea <HAL_RCC_OscConfig+0x78e>
 80018c6:	bf00      	nop
 80018c8:	58024400 	.word	0x58024400
 80018cc:	58024800 	.word	0x58024800
 80018d0:	fffffc0c 	.word	0xfffffc0c
 80018d4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff f88a 	bl	80009f0 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e08a      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <HAL_RCC_OscConfig+0x8ac>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x77c>
 80018f6:	e082      	b.n	80019fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f8:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <HAL_RCC_OscConfig+0x8ac>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a42      	ldr	r2, [pc, #264]	; (8001a08 <HAL_RCC_OscConfig+0x8ac>)
 80018fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff f874 	bl	80009f0 <HAL_GetTick>
 8001908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff f870 	bl	80009f0 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e070      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800191e:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <HAL_RCC_OscConfig+0x8ac>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x7b0>
 800192a:	e068      	b.n	80019fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800192c:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <HAL_RCC_OscConfig+0x8ac>)
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001932:	4b35      	ldr	r3, [pc, #212]	; (8001a08 <HAL_RCC_OscConfig+0x8ac>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	2b01      	cmp	r3, #1
 800193e:	d031      	beq.n	80019a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f003 0203 	and.w	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d12a      	bne.n	80019a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195a:	429a      	cmp	r2, r3
 800195c:	d122      	bne.n	80019a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d11a      	bne.n	80019a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	0a5b      	lsrs	r3, r3, #9
 8001972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800197a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d111      	bne.n	80019a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	0c1b      	lsrs	r3, r3, #16
 8001984:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d108      	bne.n	80019a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	0e1b      	lsrs	r3, r3, #24
 8001996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e02b      	b.n	8001a00 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80019a8:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <HAL_RCC_OscConfig+0x8ac>)
 80019aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ac:	08db      	lsrs	r3, r3, #3
 80019ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80019b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d01f      	beq.n	80019fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_RCC_OscConfig+0x8ac>)
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <HAL_RCC_OscConfig+0x8ac>)
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019ca:	f7ff f811 	bl	80009f0 <HAL_GetTick>
 80019ce:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80019d0:	bf00      	nop
 80019d2:	f7ff f80d 	bl	80009f0 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	4293      	cmp	r3, r2
 80019dc:	d0f9      	beq.n	80019d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_RCC_OscConfig+0x8ac>)
 80019e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_RCC_OscConfig+0x8b0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019ea:	00d2      	lsls	r2, r2, #3
 80019ec:	4906      	ldr	r1, [pc, #24]	; (8001a08 <HAL_RCC_OscConfig+0x8ac>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_RCC_OscConfig+0x8ac>)
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <HAL_RCC_OscConfig+0x8ac>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3730      	adds	r7, #48	; 0x30
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	58024400 	.word	0x58024400
 8001a0c:	ffff0007 	.word	0xffff0007

08001a10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e19c      	b.n	8001d5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a24:	4b8a      	ldr	r3, [pc, #552]	; (8001c50 <HAL_RCC_ClockConfig+0x240>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d910      	bls.n	8001a54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b87      	ldr	r3, [pc, #540]	; (8001c50 <HAL_RCC_ClockConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 020f 	bic.w	r2, r3, #15
 8001a3a:	4985      	ldr	r1, [pc, #532]	; (8001c50 <HAL_RCC_ClockConfig+0x240>)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b83      	ldr	r3, [pc, #524]	; (8001c50 <HAL_RCC_ClockConfig+0x240>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e184      	b.n	8001d5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d010      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	4b7b      	ldr	r3, [pc, #492]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d908      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a70:	4b78      	ldr	r3, [pc, #480]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	4975      	ldr	r1, [pc, #468]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d010      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	4b70      	ldr	r3, [pc, #448]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d908      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a9e:	4b6d      	ldr	r3, [pc, #436]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	496a      	ldr	r1, [pc, #424]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0310 	and.w	r3, r3, #16
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d010      	beq.n	8001ade <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699a      	ldr	r2, [r3, #24]
 8001ac0:	4b64      	ldr	r3, [pc, #400]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d908      	bls.n	8001ade <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001acc:	4b61      	ldr	r3, [pc, #388]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	495e      	ldr	r1, [pc, #376]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0320 	and.w	r3, r3, #32
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d010      	beq.n	8001b0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	4b59      	ldr	r3, [pc, #356]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d908      	bls.n	8001b0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001afa:	4b56      	ldr	r3, [pc, #344]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	4953      	ldr	r1, [pc, #332]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d010      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	4b4d      	ldr	r3, [pc, #308]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d908      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b28:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f023 020f 	bic.w	r2, r3, #15
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	4947      	ldr	r1, [pc, #284]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d055      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b46:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	4940      	ldr	r1, [pc, #256]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b60:	4b3c      	ldr	r3, [pc, #240]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d121      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0f6      	b.n	8001d5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b78:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d115      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0ea      	b.n	8001d5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b90:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0de      	b.n	8001d5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ba0:	4b2c      	ldr	r3, [pc, #176]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0d6      	b.n	8001d5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bb0:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	f023 0207 	bic.w	r2, r3, #7
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4925      	ldr	r1, [pc, #148]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bc2:	f7fe ff15 	bl	80009f0 <HAL_GetTick>
 8001bc6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bca:	f7fe ff11 	bl	80009f0 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e0be      	b.n	8001d5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be0:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d1eb      	bne.n	8001bca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d010      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d208      	bcs.n	8001c20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f023 020f 	bic.w	r2, r3, #15
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	490e      	ldr	r1, [pc, #56]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_RCC_ClockConfig+0x240>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d214      	bcs.n	8001c58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_RCC_ClockConfig+0x240>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 020f 	bic.w	r2, r3, #15
 8001c36:	4906      	ldr	r1, [pc, #24]	; (8001c50 <HAL_RCC_ClockConfig+0x240>)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <HAL_RCC_ClockConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e086      	b.n	8001d5e <HAL_RCC_ClockConfig+0x34e>
 8001c50:	52002000 	.word	0x52002000
 8001c54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d010      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d208      	bcs.n	8001c86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c74:	4b3c      	ldr	r3, [pc, #240]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	4939      	ldr	r1, [pc, #228]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d010      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695a      	ldr	r2, [r3, #20]
 8001c96:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d208      	bcs.n	8001cb4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ca2:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	492e      	ldr	r1, [pc, #184]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d010      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699a      	ldr	r2, [r3, #24]
 8001cc4:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d208      	bcs.n	8001ce2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cd0:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4922      	ldr	r1, [pc, #136]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0320 	and.w	r3, r3, #32
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d010      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69da      	ldr	r2, [r3, #28]
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d208      	bcs.n	8001d10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4917      	ldr	r1, [pc, #92]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d10:	f000 f834 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	4912      	ldr	r1, [pc, #72]	; (8001d6c <HAL_RCC_ClockConfig+0x35c>)
 8001d22:	5ccb      	ldrb	r3, [r1, r3]
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <HAL_RCC_ClockConfig+0x35c>)
 8001d38:	5cd3      	ldrb	r3, [r2, r3]
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
 8001d44:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <HAL_RCC_ClockConfig+0x360>)
 8001d46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d48:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <HAL_RCC_ClockConfig+0x364>)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_RCC_ClockConfig+0x368>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fcb2 	bl	80006bc <HAL_InitTick>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	58024400 	.word	0x58024400
 8001d6c:	08002830 	.word	0x08002830
 8001d70:	24000004 	.word	0x24000004
 8001d74:	24000000 	.word	0x24000000
 8001d78:	24000008 	.word	0x24000008

08001d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d82:	4bb3      	ldr	r3, [pc, #716]	; (8002050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d8a:	2b18      	cmp	r3, #24
 8001d8c:	f200 8155 	bhi.w	800203a <HAL_RCC_GetSysClockFreq+0x2be>
 8001d90:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d96:	bf00      	nop
 8001d98:	08001dfd 	.word	0x08001dfd
 8001d9c:	0800203b 	.word	0x0800203b
 8001da0:	0800203b 	.word	0x0800203b
 8001da4:	0800203b 	.word	0x0800203b
 8001da8:	0800203b 	.word	0x0800203b
 8001dac:	0800203b 	.word	0x0800203b
 8001db0:	0800203b 	.word	0x0800203b
 8001db4:	0800203b 	.word	0x0800203b
 8001db8:	08001e23 	.word	0x08001e23
 8001dbc:	0800203b 	.word	0x0800203b
 8001dc0:	0800203b 	.word	0x0800203b
 8001dc4:	0800203b 	.word	0x0800203b
 8001dc8:	0800203b 	.word	0x0800203b
 8001dcc:	0800203b 	.word	0x0800203b
 8001dd0:	0800203b 	.word	0x0800203b
 8001dd4:	0800203b 	.word	0x0800203b
 8001dd8:	08001e29 	.word	0x08001e29
 8001ddc:	0800203b 	.word	0x0800203b
 8001de0:	0800203b 	.word	0x0800203b
 8001de4:	0800203b 	.word	0x0800203b
 8001de8:	0800203b 	.word	0x0800203b
 8001dec:	0800203b 	.word	0x0800203b
 8001df0:	0800203b 	.word	0x0800203b
 8001df4:	0800203b 	.word	0x0800203b
 8001df8:	08001e2f 	.word	0x08001e2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001dfc:	4b94      	ldr	r3, [pc, #592]	; (8002050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d009      	beq.n	8001e1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e08:	4b91      	ldr	r3, [pc, #580]	; (8002050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	08db      	lsrs	r3, r3, #3
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	4a90      	ldr	r2, [pc, #576]	; (8002054 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e14:	fa22 f303 	lsr.w	r3, r2, r3
 8001e18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e1a:	e111      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e1c:	4b8d      	ldr	r3, [pc, #564]	; (8002054 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e1e:	61bb      	str	r3, [r7, #24]
      break;
 8001e20:	e10e      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001e22:	4b8d      	ldr	r3, [pc, #564]	; (8002058 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e24:	61bb      	str	r3, [r7, #24]
      break;
 8001e26:	e10b      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001e28:	4b8c      	ldr	r3, [pc, #560]	; (800205c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e2a:	61bb      	str	r3, [r7, #24]
      break;
 8001e2c:	e108      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e2e:	4b88      	ldr	r3, [pc, #544]	; (8002050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001e38:	4b85      	ldr	r3, [pc, #532]	; (8002050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e44:	4b82      	ldr	r3, [pc, #520]	; (8002050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001e4e:	4b80      	ldr	r3, [pc, #512]	; (8002050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e52:	08db      	lsrs	r3, r3, #3
 8001e54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	fb02 f303 	mul.w	r3, r2, r3
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80e1 	beq.w	8002034 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	f000 8083 	beq.w	8001f80 <HAL_RCC_GetSysClockFreq+0x204>
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	f200 80a1 	bhi.w	8001fc4 <HAL_RCC_GetSysClockFreq+0x248>
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x114>
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d056      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e8e:	e099      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e90:	4b6f      	ldr	r3, [pc, #444]	; (8002050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d02d      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e9c:	4b6c      	ldr	r3, [pc, #432]	; (8002050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	08db      	lsrs	r3, r3, #3
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	4a6b      	ldr	r2, [pc, #428]	; (8002054 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	ee07 3a90 	vmov	s15, r3
 8001eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ec6:	4b62      	ldr	r3, [pc, #392]	; (8002050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eda:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001ef6:	e087      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f02:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002064 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f0a:	4b51      	ldr	r3, [pc, #324]	; (8002050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f1e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f3a:	e065      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f46:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002068 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f4e:	4b40      	ldr	r3, [pc, #256]	; (8002050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f62:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f7e:	e043      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f8a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800206c <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f92:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fa6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fc2:	e021      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002068 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002002:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002006:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	0a5b      	lsrs	r3, r3, #9
 800200e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002012:	3301      	adds	r3, #1
 8002014:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002020:	edd7 6a07 	vldr	s13, [r7, #28]
 8002024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800202c:	ee17 3a90 	vmov	r3, s15
 8002030:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002032:	e005      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	61bb      	str	r3, [r7, #24]
      break;
 8002038:	e002      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800203c:	61bb      	str	r3, [r7, #24]
      break;
 800203e:	bf00      	nop
  }

  return sysclockfreq;
 8002040:	69bb      	ldr	r3, [r7, #24]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	; 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	58024400 	.word	0x58024400
 8002054:	03d09000 	.word	0x03d09000
 8002058:	003d0900 	.word	0x003d0900
 800205c:	017d7840 	.word	0x017d7840
 8002060:	46000000 	.word	0x46000000
 8002064:	4c742400 	.word	0x4c742400
 8002068:	4a742400 	.word	0x4a742400
 800206c:	4bbebc20 	.word	0x4bbebc20

08002070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002076:	f7ff fe81 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 800207a:	4602      	mov	r2, r0
 800207c:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	490f      	ldr	r1, [pc, #60]	; (80020c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002088:	5ccb      	ldrb	r3, [r1, r3]
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	fa22 f303 	lsr.w	r3, r2, r3
 8002092:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800209e:	5cd3      	ldrb	r3, [r2, r3]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80020ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020ae:	4a07      	ldr	r2, [pc, #28]	; (80020cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80020b4:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	58024400 	.word	0x58024400
 80020c4:	08002830 	.word	0x08002830
 80020c8:	24000004 	.word	0x24000004
 80020cc:	24000000 	.word	0x24000000

080020d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80020d4:	f7ff ffcc 	bl	8002070 <HAL_RCC_GetHCLKFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	0a1b      	lsrs	r3, r3, #8
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4904      	ldr	r1, [pc, #16]	; (80020f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	58024400 	.word	0x58024400
 80020f8:	08002830 	.word	0x08002830

080020fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	223f      	movs	r2, #63	; 0x3f
 800210a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800210c:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <HAL_RCC_GetClockConfig+0x7c>)
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	f003 0207 	and.w	r2, r3, #7
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002118:	4b17      	ldr	r3, [pc, #92]	; (8002178 <HAL_RCC_GetClockConfig+0x7c>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <HAL_RCC_GetClockConfig+0x7c>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 020f 	and.w	r2, r3, #15
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_RCC_GetClockConfig+0x7c>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800213c:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_RCC_GetClockConfig+0x7c>)
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_GetClockConfig+0x7c>)
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <HAL_RCC_GetClockConfig+0x7c>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_RCC_GetClockConfig+0x80>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 020f 	and.w	r2, r3, #15
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	601a      	str	r2, [r3, #0]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	58024400 	.word	0x58024400
 800217c:	52002000 	.word	0x52002000

08002180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e049      	b.n	8002226 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f841 	bl	800222e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3304      	adds	r3, #4
 80021bc:	4619      	mov	r1, r3
 80021be:	4610      	mov	r0, r2
 80021c0:	f000 fa00 	bl	80025c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b01      	cmp	r3, #1
 8002256:	d001      	beq.n	800225c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e054      	b.n	8002306 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a26      	ldr	r2, [pc, #152]	; (8002314 <HAL_TIM_Base_Start_IT+0xd0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d022      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0x80>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002286:	d01d      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0x80>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a22      	ldr	r2, [pc, #136]	; (8002318 <HAL_TIM_Base_Start_IT+0xd4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d018      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0x80>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a21      	ldr	r2, [pc, #132]	; (800231c <HAL_TIM_Base_Start_IT+0xd8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d013      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0x80>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1f      	ldr	r2, [pc, #124]	; (8002320 <HAL_TIM_Base_Start_IT+0xdc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00e      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0x80>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <HAL_TIM_Base_Start_IT+0xe0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d009      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0x80>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <HAL_TIM_Base_Start_IT+0xe4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d004      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0x80>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a1b      	ldr	r2, [pc, #108]	; (800232c <HAL_TIM_Base_Start_IT+0xe8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d115      	bne.n	80022f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_TIM_Base_Start_IT+0xec>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d015      	beq.n	8002302 <HAL_TIM_Base_Start_IT+0xbe>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022dc:	d011      	beq.n	8002302 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0201 	orr.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ee:	e008      	b.n	8002302 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	e000      	b.n	8002304 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002302:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40010000 	.word	0x40010000
 8002318:	40000400 	.word	0x40000400
 800231c:	40000800 	.word	0x40000800
 8002320:	40000c00 	.word	0x40000c00
 8002324:	40010400 	.word	0x40010400
 8002328:	40001800 	.word	0x40001800
 800232c:	40014000 	.word	0x40014000
 8002330:	00010007 	.word	0x00010007

08002334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b02      	cmp	r3, #2
 8002348:	d122      	bne.n	8002390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b02      	cmp	r3, #2
 8002356:	d11b      	bne.n	8002390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f06f 0202 	mvn.w	r2, #2
 8002360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f905 	bl	8002586 <HAL_TIM_IC_CaptureCallback>
 800237c:	e005      	b.n	800238a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f8f7 	bl	8002572 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f908 	bl	800259a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b04      	cmp	r3, #4
 800239c:	d122      	bne.n	80023e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d11b      	bne.n	80023e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0204 	mvn.w	r2, #4
 80023b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2202      	movs	r2, #2
 80023ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f8db 	bl	8002586 <HAL_TIM_IC_CaptureCallback>
 80023d0:	e005      	b.n	80023de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f8cd 	bl	8002572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f8de 	bl	800259a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d122      	bne.n	8002438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d11b      	bne.n	8002438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0208 	mvn.w	r2, #8
 8002408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2204      	movs	r2, #4
 800240e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f8b1 	bl	8002586 <HAL_TIM_IC_CaptureCallback>
 8002424:	e005      	b.n	8002432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f8a3 	bl	8002572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f8b4 	bl	800259a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b10      	cmp	r3, #16
 8002444:	d122      	bne.n	800248c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2b10      	cmp	r3, #16
 8002452:	d11b      	bne.n	800248c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0210 	mvn.w	r2, #16
 800245c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2208      	movs	r2, #8
 8002462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f887 	bl	8002586 <HAL_TIM_IC_CaptureCallback>
 8002478:	e005      	b.n	8002486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f879 	bl	8002572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f88a 	bl	800259a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b01      	cmp	r3, #1
 8002498:	d10e      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d107      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0201 	mvn.w	r2, #1
 80024b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7fe f8d0 	bl	8000658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c2:	2b80      	cmp	r3, #128	; 0x80
 80024c4:	d10e      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d0:	2b80      	cmp	r3, #128	; 0x80
 80024d2:	d107      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f914 	bl	800270c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f2:	d10e      	bne.n	8002512 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fe:	2b80      	cmp	r3, #128	; 0x80
 8002500:	d107      	bne.n	8002512 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800250a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f907 	bl	8002720 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251c:	2b40      	cmp	r3, #64	; 0x40
 800251e:	d10e      	bne.n	800253e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b40      	cmp	r3, #64	; 0x40
 800252c:	d107      	bne.n	800253e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f838 	bl	80025ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b20      	cmp	r3, #32
 800254a:	d10e      	bne.n	800256a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b20      	cmp	r3, #32
 8002558:	d107      	bne.n	800256a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f06f 0220 	mvn.w	r2, #32
 8002562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f8c7 	bl	80026f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a40      	ldr	r2, [pc, #256]	; (80026d8 <TIM_Base_SetConfig+0x114>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d013      	beq.n	8002604 <TIM_Base_SetConfig+0x40>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e2:	d00f      	beq.n	8002604 <TIM_Base_SetConfig+0x40>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a3d      	ldr	r2, [pc, #244]	; (80026dc <TIM_Base_SetConfig+0x118>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00b      	beq.n	8002604 <TIM_Base_SetConfig+0x40>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a3c      	ldr	r2, [pc, #240]	; (80026e0 <TIM_Base_SetConfig+0x11c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d007      	beq.n	8002604 <TIM_Base_SetConfig+0x40>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a3b      	ldr	r2, [pc, #236]	; (80026e4 <TIM_Base_SetConfig+0x120>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d003      	beq.n	8002604 <TIM_Base_SetConfig+0x40>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a3a      	ldr	r2, [pc, #232]	; (80026e8 <TIM_Base_SetConfig+0x124>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d108      	bne.n	8002616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a2f      	ldr	r2, [pc, #188]	; (80026d8 <TIM_Base_SetConfig+0x114>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01f      	beq.n	800265e <TIM_Base_SetConfig+0x9a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002624:	d01b      	beq.n	800265e <TIM_Base_SetConfig+0x9a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a2c      	ldr	r2, [pc, #176]	; (80026dc <TIM_Base_SetConfig+0x118>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d017      	beq.n	800265e <TIM_Base_SetConfig+0x9a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a2b      	ldr	r2, [pc, #172]	; (80026e0 <TIM_Base_SetConfig+0x11c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d013      	beq.n	800265e <TIM_Base_SetConfig+0x9a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a2a      	ldr	r2, [pc, #168]	; (80026e4 <TIM_Base_SetConfig+0x120>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00f      	beq.n	800265e <TIM_Base_SetConfig+0x9a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a29      	ldr	r2, [pc, #164]	; (80026e8 <TIM_Base_SetConfig+0x124>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00b      	beq.n	800265e <TIM_Base_SetConfig+0x9a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a28      	ldr	r2, [pc, #160]	; (80026ec <TIM_Base_SetConfig+0x128>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d007      	beq.n	800265e <TIM_Base_SetConfig+0x9a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a27      	ldr	r2, [pc, #156]	; (80026f0 <TIM_Base_SetConfig+0x12c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d003      	beq.n	800265e <TIM_Base_SetConfig+0x9a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a26      	ldr	r2, [pc, #152]	; (80026f4 <TIM_Base_SetConfig+0x130>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d108      	bne.n	8002670 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	4313      	orrs	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	4313      	orrs	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a10      	ldr	r2, [pc, #64]	; (80026d8 <TIM_Base_SetConfig+0x114>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d00f      	beq.n	80026bc <TIM_Base_SetConfig+0xf8>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <TIM_Base_SetConfig+0x124>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00b      	beq.n	80026bc <TIM_Base_SetConfig+0xf8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a11      	ldr	r2, [pc, #68]	; (80026ec <TIM_Base_SetConfig+0x128>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d007      	beq.n	80026bc <TIM_Base_SetConfig+0xf8>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a10      	ldr	r2, [pc, #64]	; (80026f0 <TIM_Base_SetConfig+0x12c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d003      	beq.n	80026bc <TIM_Base_SetConfig+0xf8>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <TIM_Base_SetConfig+0x130>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d103      	bne.n	80026c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	615a      	str	r2, [r3, #20]
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40010000 	.word	0x40010000
 80026dc:	40000400 	.word	0x40000400
 80026e0:	40000800 	.word	0x40000800
 80026e4:	40000c00 	.word	0x40000c00
 80026e8:	40010400 	.word	0x40010400
 80026ec:	40014000 	.word	0x40014000
 80026f0:	40014400 	.word	0x40014400
 80026f4:	40014800 	.word	0x40014800

080026f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <arm_sin_f32>:
 8002734:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80027b4 <arm_sin_f32+0x80>
 8002738:	ee20 0a27 	vmul.f32	s0, s0, s15
 800273c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002740:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002748:	d504      	bpl.n	8002754 <arm_sin_f32+0x20>
 800274a:	ee17 3a90 	vmov	r3, s15
 800274e:	3b01      	subs	r3, #1
 8002750:	ee07 3a90 	vmov	s15, r3
 8002754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002758:	eddf 6a17 	vldr	s13, [pc, #92]	; 80027b8 <arm_sin_f32+0x84>
 800275c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8002760:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002764:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8002768:	ee17 3a10 	vmov	r3, s14
 800276c:	b29b      	uxth	r3, r3
 800276e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002772:	d21a      	bcs.n	80027aa <arm_sin_f32+0x76>
 8002774:	ee07 3a10 	vmov	s14, r3
 8002778:	1c59      	adds	r1, r3, #1
 800277a:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800277e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002782:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <arm_sin_f32+0x88>)
 8002784:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002788:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800278c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002790:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002794:	edd3 6a00 	vldr	s13, [r3]
 8002798:	ed92 7a00 	vldr	s14, [r2]
 800279c:	ee20 0a26 	vmul.f32	s0, s0, s13
 80027a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80027a8:	4770      	bx	lr
 80027aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80027ae:	2101      	movs	r1, #1
 80027b0:	2300      	movs	r3, #0
 80027b2:	e7e6      	b.n	8002782 <arm_sin_f32+0x4e>
 80027b4:	3e22f983 	.word	0x3e22f983
 80027b8:	44000000 	.word	0x44000000
 80027bc:	08002840 	.word	0x08002840

080027c0 <memset>:
 80027c0:	4402      	add	r2, r0
 80027c2:	4603      	mov	r3, r0
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d100      	bne.n	80027ca <memset+0xa>
 80027c8:	4770      	bx	lr
 80027ca:	f803 1b01 	strb.w	r1, [r3], #1
 80027ce:	e7f9      	b.n	80027c4 <memset+0x4>

080027d0 <__libc_init_array>:
 80027d0:	b570      	push	{r4, r5, r6, lr}
 80027d2:	4d0d      	ldr	r5, [pc, #52]	; (8002808 <__libc_init_array+0x38>)
 80027d4:	4c0d      	ldr	r4, [pc, #52]	; (800280c <__libc_init_array+0x3c>)
 80027d6:	1b64      	subs	r4, r4, r5
 80027d8:	10a4      	asrs	r4, r4, #2
 80027da:	2600      	movs	r6, #0
 80027dc:	42a6      	cmp	r6, r4
 80027de:	d109      	bne.n	80027f4 <__libc_init_array+0x24>
 80027e0:	4d0b      	ldr	r5, [pc, #44]	; (8002810 <__libc_init_array+0x40>)
 80027e2:	4c0c      	ldr	r4, [pc, #48]	; (8002814 <__libc_init_array+0x44>)
 80027e4:	f000 f818 	bl	8002818 <_init>
 80027e8:	1b64      	subs	r4, r4, r5
 80027ea:	10a4      	asrs	r4, r4, #2
 80027ec:	2600      	movs	r6, #0
 80027ee:	42a6      	cmp	r6, r4
 80027f0:	d105      	bne.n	80027fe <__libc_init_array+0x2e>
 80027f2:	bd70      	pop	{r4, r5, r6, pc}
 80027f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f8:	4798      	blx	r3
 80027fa:	3601      	adds	r6, #1
 80027fc:	e7ee      	b.n	80027dc <__libc_init_array+0xc>
 80027fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002802:	4798      	blx	r3
 8002804:	3601      	adds	r6, #1
 8002806:	e7f2      	b.n	80027ee <__libc_init_array+0x1e>
 8002808:	08003044 	.word	0x08003044
 800280c:	08003044 	.word	0x08003044
 8002810:	08003044 	.word	0x08003044
 8002814:	08003048 	.word	0x08003048

08002818 <_init>:
 8002818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281a:	bf00      	nop
 800281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281e:	bc08      	pop	{r3}
 8002820:	469e      	mov	lr, r3
 8002822:	4770      	bx	lr

08002824 <_fini>:
 8002824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002826:	bf00      	nop
 8002828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282a:	bc08      	pop	{r3}
 800282c:	469e      	mov	lr, r3
 800282e:	4770      	bx	lr
