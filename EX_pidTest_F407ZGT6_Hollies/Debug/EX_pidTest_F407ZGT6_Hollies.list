
EX_pidTest_F407ZGT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008da0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f4  08008f30  08008f30  00018f30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009924  08009924  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009924  08009924  00019924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800992c  0800992c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800992c  0800992c  0001992c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009930  08009930  00019930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000270  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000044c  2000044c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015179  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d47  00000000  00000000  00035385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  000380d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001110  00000000  00000000  00039310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000238ca  00000000  00000000  0003a420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001735c  00000000  00000000  0005dcea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1466  00000000  00000000  00075046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001464ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e20  00000000  00000000  001464fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f18 	.word	0x08008f18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008f18 	.word	0x08008f18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b41      	ldr	r3, [pc, #260]	; (800106c <MX_GPIO_Init+0x120>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a40      	ldr	r2, [pc, #256]	; (800106c <MX_GPIO_Init+0x120>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b3e      	ldr	r3, [pc, #248]	; (800106c <MX_GPIO_Init+0x120>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b3a      	ldr	r3, [pc, #232]	; (800106c <MX_GPIO_Init+0x120>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a39      	ldr	r2, [pc, #228]	; (800106c <MX_GPIO_Init+0x120>)
 8000f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b37      	ldr	r3, [pc, #220]	; (800106c <MX_GPIO_Init+0x120>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b33      	ldr	r3, [pc, #204]	; (800106c <MX_GPIO_Init+0x120>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a32      	ldr	r2, [pc, #200]	; (800106c <MX_GPIO_Init+0x120>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b30      	ldr	r3, [pc, #192]	; (800106c <MX_GPIO_Init+0x120>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	4b2c      	ldr	r3, [pc, #176]	; (800106c <MX_GPIO_Init+0x120>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a2b      	ldr	r2, [pc, #172]	; (800106c <MX_GPIO_Init+0x120>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b29      	ldr	r3, [pc, #164]	; (800106c <MX_GPIO_Init+0x120>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <MX_GPIO_Init+0x120>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a24      	ldr	r2, [pc, #144]	; (800106c <MX_GPIO_Init+0x120>)
 8000fdc:	f043 0320 	orr.w	r3, r3, #32
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b22      	ldr	r3, [pc, #136]	; (800106c <MX_GPIO_Init+0x120>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0320 	and.w	r3, r3, #32
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	481f      	ldr	r0, [pc, #124]	; (8001070 <MX_GPIO_Init+0x124>)
 8000ff4:	f001 f8b4 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	481d      	ldr	r0, [pc, #116]	; (8001074 <MX_GPIO_Init+0x128>)
 8000ffe:	f001 f8af 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001008:	481b      	ldr	r0, [pc, #108]	; (8001078 <MX_GPIO_Init+0x12c>)
 800100a:	f001 f8a9 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 800100e:	2320      	movs	r3, #32
 8001010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4812      	ldr	r0, [pc, #72]	; (8001070 <MX_GPIO_Init+0x124>)
 8001026:	f000 feff 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 800102a:	2302      	movs	r3, #2
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <MX_GPIO_Init+0x128>)
 8001042:	f000 fef1 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8001046:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <MX_GPIO_Init+0x12c>)
 8001060:	f000 fee2 	bl	8001e28 <HAL_GPIO_Init>

}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40023800 	.word	0x40023800
 8001070:	40020800 	.word	0x40020800
 8001074:	40020400 	.word	0x40020400
 8001078:	40021400 	.word	0x40021400

0800107c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <MX_I2C1_Init+0x50>)
 8001082:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <MX_I2C1_Init+0x54>)
 8001084:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_I2C1_Init+0x50>)
 8001088:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <MX_I2C1_Init+0x58>)
 800108a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_I2C1_Init+0x50>)
 800109a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800109e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <MX_I2C1_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_I2C1_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	; (80010cc <MX_I2C1_Init+0x50>)
 80010ba:	f001 f86b 	bl	8002194 <HAL_I2C_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010c4:	f000 f94a 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200001f8 	.word	0x200001f8
 80010d0:	40005400 	.word	0x40005400
 80010d4:	000186a0 	.word	0x000186a0

080010d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a19      	ldr	r2, [pc, #100]	; (800115c <HAL_I2C_MspInit+0x84>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d12b      	bne.n	8001152 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_I2C_MspInit+0x88>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_I2C_MspInit+0x88>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_I2C_MspInit+0x88>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001116:	23c0      	movs	r3, #192	; 0xc0
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111a:	2312      	movs	r3, #18
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001126:	2304      	movs	r3, #4
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <HAL_I2C_MspInit+0x8c>)
 8001132:	f000 fe79 	bl	8001e28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_I2C_MspInit+0x88>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <HAL_I2C_MspInit+0x88>)
 8001140:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_I2C_MspInit+0x88>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	; 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40005400 	.word	0x40005400
 8001160:	40023800 	.word	0x40023800
 8001164:	40020400 	.word	0x40020400

08001168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116e:	f000 fcb3 	bl	8001ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001172:	f000 f841 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001176:	f7ff fee9 	bl	8000f4c <MX_GPIO_Init>
  MX_I2C1_Init();
 800117a:	f7ff ff7f 	bl	800107c <MX_I2C1_Init>
  MX_SPI1_Init();
 800117e:	f000 f8f3 	bl	8001368 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001182:	f000 faa3 	bl	80016cc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001186:	f000 fc0b 	bl	80019a0 <MX_USART1_UART_Init>
  MX_TIM8_Init();
 800118a:	f000 faef 	bl	800176c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  PID_init(&pid1, &htim8, 5.0, 0.1, 0, 10.0);
 800118e:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8001192:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80011e0 <main+0x78>
 8001196:	eddf 0a13 	vldr	s1, [pc, #76]	; 80011e4 <main+0x7c>
 800119a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800119e:	4912      	ldr	r1, [pc, #72]	; (80011e8 <main+0x80>)
 80011a0:	4812      	ldr	r0, [pc, #72]	; (80011ec <main+0x84>)
 80011a2:	f004 fe59 	bl	8005e58 <PID_init>
  INA238_init(&hi2c1, 0);
 80011a6:	2100      	movs	r1, #0
 80011a8:	4811      	ldr	r0, [pc, #68]	; (80011f0 <main+0x88>)
 80011aa:	f004 fb2b 	bl	8005804 <INA238_init>
  OLED_Init();
 80011ae:	f004 fd67 	bl	8005c80 <OLED_Init>
  OLED_Display_On();
 80011b2:	f004 fc4f 	bl	8005a54 <OLED_Display_On>
  OLED_Clear();
 80011b6:	f004 fc5d 	bl	8005a74 <OLED_Clear>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80011ba:	2100      	movs	r1, #0
 80011bc:	480a      	ldr	r0, [pc, #40]	; (80011e8 <main+0x80>)
 80011be:	f002 ffeb 	bl	8004198 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 80011c2:	480c      	ldr	r0, [pc, #48]	; (80011f4 <main+0x8c>)
 80011c4:	f002 ff1e 	bl	8004004 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  OLED_Clear();
 80011c8:	f004 fc54 	bl	8005a74 <OLED_Clear>
	  OLED_ShowNum(0, 0, 0, 1, 16);
 80011cc:	2310      	movs	r3, #16
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2301      	movs	r3, #1
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2000      	movs	r0, #0
 80011d8:	f004 fcec 	bl	8005bb4 <OLED_ShowNum>
	  OLED_Clear();
 80011dc:	e7f4      	b.n	80011c8 <main+0x60>
 80011de:	bf00      	nop
 80011e0:	00000000 	.word	0x00000000
 80011e4:	3dcccccd 	.word	0x3dcccccd
 80011e8:	200003ac 	.word	0x200003ac
 80011ec:	2000024c 	.word	0x2000024c
 80011f0:	200001f8 	.word	0x200001f8
 80011f4:	20000364 	.word	0x20000364

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	; 0x50
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	2230      	movs	r2, #48	; 0x30
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f004 ff9c 	bl	8006144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <SystemClock_Config+0xcc>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	4a27      	ldr	r2, [pc, #156]	; (80012c4 <SystemClock_Config+0xcc>)
 8001226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122a:	6413      	str	r3, [r2, #64]	; 0x40
 800122c:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <SystemClock_Config+0xcc>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <SystemClock_Config+0xd0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <SystemClock_Config+0xd0>)
 8001242:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <SystemClock_Config+0xd0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001254:	2301      	movs	r3, #1
 8001256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125e:	2302      	movs	r3, #2
 8001260:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001262:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001266:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001268:	2304      	movs	r3, #4
 800126a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800126c:	23a8      	movs	r3, #168	; 0xa8
 800126e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001270:	2302      	movs	r3, #2
 8001272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001274:	2304      	movs	r3, #4
 8001276:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001278:	f107 0320 	add.w	r3, r7, #32
 800127c:	4618      	mov	r0, r3
 800127e:	f001 ff49 	bl	8003114 <HAL_RCC_OscConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001288:	f000 f868 	bl	800135c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128c:	230f      	movs	r3, #15
 800128e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001290:	2302      	movs	r3, #2
 8001292:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001298:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800129c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	2105      	movs	r1, #5
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 f9aa 	bl	8003604 <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012b6:	f000 f851 	bl	800135c <Error_Handler>
  }
}
 80012ba:	bf00      	nop
 80012bc:	3750      	adds	r7, #80	; 0x50
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40007000 	.word	0x40007000

080012cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012cc:	b5b0      	push	{r4, r5, r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af04      	add	r7, sp, #16
 80012d2:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a1a      	ldr	r2, [pc, #104]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d12d      	bne.n	800133a <HAL_TIM_PeriodElapsedCallback+0x6e>
  {
    double i = INA238_getVolt(&hi2c1);
 80012de:	481a      	ldr	r0, [pc, #104]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80012e0:	f004 fade 	bl	80058a0 <INA238_getVolt>
 80012e4:	ed87 0b04 	vstr	d0, [r7, #16]
    float k = PID_regulator(&pid1, i);
 80012e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012ec:	f7ff fc5c 	bl	8000ba8 <__aeabi_d2f>
 80012f0:	4603      	mov	r3, r0
 80012f2:	ee00 3a10 	vmov	s0, r3
 80012f6:	4815      	ldr	r0, [pc, #84]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80012f8:	f004 fdee 	bl	8005ed8 <PID_regulator>
 80012fc:	ed87 0a03 	vstr	s0, [r7, #12]
//    TIM8->CCR1 = k;
    sprintf((char* )str_buffer, "succeess!%f,%f,%f\n", i, k, pid1.kp); //
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f7ff f921 	bl	8000548 <__aeabi_f2d>
 8001306:	4604      	mov	r4, r0
 8001308:	460d      	mov	r5, r1
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f91a 	bl	8000548 <__aeabi_f2d>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800131c:	e9cd 4500 	strd	r4, r5, [sp]
 8001320:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001324:	490a      	ldr	r1, [pc, #40]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001326:	480b      	ldr	r0, [pc, #44]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001328:	f005 fb7e 	bl	8006a28 <siprintf>
    HAL_UART_Transmit(&huart1, str_buffer, sizeof(str_buffer), 1000);
 800132c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001330:	2280      	movs	r2, #128	; 0x80
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001334:	4808      	ldr	r0, [pc, #32]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001336:	f003 fef0 	bl	800511a <HAL_UART_Transmit>
  }
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bdb0      	pop	{r4, r5, r7, pc}
 8001342:	bf00      	nop
 8001344:	40010000 	.word	0x40010000
 8001348:	200001f8 	.word	0x200001f8
 800134c:	2000024c 	.word	0x2000024c
 8001350:	08008f30 	.word	0x08008f30
 8001354:	20000288 	.word	0x20000288
 8001358:	200003f4 	.word	0x200003f4

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	e7fe      	b.n	8001364 <Error_Handler+0x8>
	...

08001368 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_SPI1_Init+0x64>)
 800136e:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <MX_SPI1_Init+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_SPI1_Init+0x64>)
 8001374:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001378:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_SPI1_Init+0x64>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_SPI1_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_SPI1_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_SPI1_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_SPI1_Init+0x64>)
 8001394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001398:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_SPI1_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <MX_SPI1_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_SPI1_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <MX_SPI1_Init+0x64>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_SPI1_Init+0x64>)
 80013b4:	220a      	movs	r2, #10
 80013b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <MX_SPI1_Init+0x64>)
 80013ba:	f002 fb43 	bl	8003a44 <HAL_SPI_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013c4:	f7ff ffca 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000308 	.word	0x20000308
 80013d0:	40013000 	.word	0x40013000

080013d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a19      	ldr	r2, [pc, #100]	; (8001458 <HAL_SPI_MspInit+0x84>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d12b      	bne.n	800144e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_SPI_MspInit+0x88>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <HAL_SPI_MspInit+0x88>)
 8001400:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001404:	6453      	str	r3, [r2, #68]	; 0x44
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_SPI_MspInit+0x88>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_SPI_MspInit+0x88>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <HAL_SPI_MspInit+0x88>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_SPI_MspInit+0x88>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|GPIO_PIN_6|OLED_SDIN_Pin;
 800142e:	23e0      	movs	r3, #224	; 0xe0
 8001430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800143e:	2305      	movs	r3, #5
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <HAL_SPI_MspInit+0x8c>)
 800144a:	f000 fced 	bl	8001e28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800144e:	bf00      	nop
 8001450:	3728      	adds	r7, #40	; 0x28
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40013000 	.word	0x40013000
 800145c:	40023800 	.word	0x40023800
 8001460:	40020000 	.word	0x40020000

08001464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_MspInit+0x4c>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <HAL_MspInit+0x4c>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <HAL_MspInit+0x4c>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_MspInit+0x4c>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_MspInit+0x4c>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_MspInit+0x4c>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800

080014b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <NMI_Handler+0x4>

080014ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MemManage_Handler+0x4>

080014c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001500:	f000 fb3c 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800150e:	f002 ff0b 	bl	8004328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000364 	.word	0x20000364

0800151c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return 1;
 8001520:	2301      	movs	r3, #1
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_kill>:

int _kill(int pid, int sig)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001536:	f004 fddb 	bl	80060f0 <__errno>
 800153a:	4603      	mov	r3, r0
 800153c:	2216      	movs	r2, #22
 800153e:	601a      	str	r2, [r3, #0]
  return -1;
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_exit>:

void _exit (int status)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ffe7 	bl	800152c <_kill>
  while (1) {}    /* Make sure we hang here */
 800155e:	e7fe      	b.n	800155e <_exit+0x12>

08001560 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e00a      	b.n	8001588 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001572:	f3af 8000 	nop.w
 8001576:	4601      	mov	r1, r0
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	60ba      	str	r2, [r7, #8]
 800157e:	b2ca      	uxtb	r2, r1
 8001580:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	dbf0      	blt.n	8001572 <_read+0x12>
  }

  return len;
 8001590:	687b      	ldr	r3, [r7, #4]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	e009      	b.n	80015c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	60ba      	str	r2, [r7, #8]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3301      	adds	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	dbf1      	blt.n	80015ac <_write+0x12>
  }
  return len;
 80015c8:	687b      	ldr	r3, [r7, #4]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_close>:

int _close(int file)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015fa:	605a      	str	r2, [r3, #4]
  return 0;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <_isatty>:

int _isatty(int file)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001644:	4a14      	ldr	r2, [pc, #80]	; (8001698 <_sbrk+0x5c>)
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <_sbrk+0x60>)
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <_sbrk+0x64>)
 800165a:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <_sbrk+0x68>)
 800165c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	429a      	cmp	r2, r3
 800166a:	d207      	bcs.n	800167c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800166c:	f004 fd40 	bl	80060f0 <__errno>
 8001670:	4603      	mov	r3, r0
 8001672:	220c      	movs	r2, #12
 8001674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	e009      	b.n	8001690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001682:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <_sbrk+0x64>)
 800168c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168e:	68fb      	ldr	r3, [r7, #12]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20020000 	.word	0x20020000
 800169c:	00000400 	.word	0x00000400
 80016a0:	20000360 	.word	0x20000360
 80016a4:	20000450 	.word	0x20000450

080016a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <SystemInit+0x20>)
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <SystemInit+0x20>)
 80016b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	463b      	mov	r3, r7
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016e8:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <MX_TIM1_Init+0x98>)
 80016ea:	4a1f      	ldr	r2, [pc, #124]	; (8001768 <MX_TIM1_Init+0x9c>)
 80016ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <MX_TIM1_Init+0x98>)
 80016f0:	2263      	movs	r2, #99	; 0x63
 80016f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <MX_TIM1_Init+0x98>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16800-1;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MX_TIM1_Init+0x98>)
 80016fc:	f244 129f 	movw	r2, #16799	; 0x419f
 8001700:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <MX_TIM1_Init+0x98>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <MX_TIM1_Init+0x98>)
 800170a:	2200      	movs	r2, #0
 800170c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <MX_TIM1_Init+0x98>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001714:	4813      	ldr	r0, [pc, #76]	; (8001764 <MX_TIM1_Init+0x98>)
 8001716:	f002 fc25 	bl	8003f64 <HAL_TIM_Base_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001720:	f7ff fe1c 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001728:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	4619      	mov	r1, r3
 8001730:	480c      	ldr	r0, [pc, #48]	; (8001764 <MX_TIM1_Init+0x98>)
 8001732:	f002 ffc3 	bl	80046bc <HAL_TIM_ConfigClockSource>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800173c:	f7ff fe0e 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001748:	463b      	mov	r3, r7
 800174a:	4619      	mov	r1, r3
 800174c:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_TIM1_Init+0x98>)
 800174e:	f003 fbb5 	bl	8004ebc <HAL_TIMEx_MasterConfigSynchronization>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001758:	f7ff fe00 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000364 	.word	0x20000364
 8001768:	40010000 	.word	0x40010000

0800176c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b096      	sub	sp, #88	; 0x58
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001772:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800178a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]
 800179a:	615a      	str	r2, [r3, #20]
 800179c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2220      	movs	r2, #32
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f004 fccd 	bl	8006144 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017aa:	4b3f      	ldr	r3, [pc, #252]	; (80018a8 <MX_TIM8_Init+0x13c>)
 80017ac:	4a3f      	ldr	r2, [pc, #252]	; (80018ac <MX_TIM8_Init+0x140>)
 80017ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80017b0:	4b3d      	ldr	r3, [pc, #244]	; (80018a8 <MX_TIM8_Init+0x13c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b6:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <MX_TIM8_Init+0x13c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8400-1;
 80017bc:	4b3a      	ldr	r3, [pc, #232]	; (80018a8 <MX_TIM8_Init+0x13c>)
 80017be:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80017c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c4:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <MX_TIM8_Init+0x13c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017ca:	4b37      	ldr	r3, [pc, #220]	; (80018a8 <MX_TIM8_Init+0x13c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d0:	4b35      	ldr	r3, [pc, #212]	; (80018a8 <MX_TIM8_Init+0x13c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80017d6:	4834      	ldr	r0, [pc, #208]	; (80018a8 <MX_TIM8_Init+0x13c>)
 80017d8:	f002 fbc4 	bl	8003f64 <HAL_TIM_Base_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80017e2:	f7ff fdbb 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80017ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017f0:	4619      	mov	r1, r3
 80017f2:	482d      	ldr	r0, [pc, #180]	; (80018a8 <MX_TIM8_Init+0x13c>)
 80017f4:	f002 ff62 	bl	80046bc <HAL_TIM_ConfigClockSource>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80017fe:	f7ff fdad 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001802:	4829      	ldr	r0, [pc, #164]	; (80018a8 <MX_TIM8_Init+0x13c>)
 8001804:	f002 fc6e 	bl	80040e4 <HAL_TIM_PWM_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800180e:	f7ff fda5 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800181a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800181e:	4619      	mov	r1, r3
 8001820:	4821      	ldr	r0, [pc, #132]	; (80018a8 <MX_TIM8_Init+0x13c>)
 8001822:	f003 fb4b 	bl	8004ebc <HAL_TIMEx_MasterConfigSynchronization>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800182c:	f7ff fd96 	bl	800135c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001830:	2360      	movs	r3, #96	; 0x60
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 3200;
 8001834:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800183a:	2300      	movs	r3, #0
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800183e:	2300      	movs	r3, #0
 8001840:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800184a:	2300      	movs	r3, #0
 800184c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800184e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001852:	2200      	movs	r2, #0
 8001854:	4619      	mov	r1, r3
 8001856:	4814      	ldr	r0, [pc, #80]	; (80018a8 <MX_TIM8_Init+0x13c>)
 8001858:	f002 fe6e 	bl	8004538 <HAL_TIM_PWM_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8001862:	f7ff fd7b 	bl	800135c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800187a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	4619      	mov	r1, r3
 8001888:	4807      	ldr	r0, [pc, #28]	; (80018a8 <MX_TIM8_Init+0x13c>)
 800188a:	f003 fb93 	bl	8004fb4 <HAL_TIMEx_ConfigBreakDeadTime>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8001894:	f7ff fd62 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001898:	4803      	ldr	r0, [pc, #12]	; (80018a8 <MX_TIM8_Init+0x13c>)
 800189a:	f000 f847 	bl	800192c <HAL_TIM_MspPostInit>

}
 800189e:	bf00      	nop
 80018a0:	3758      	adds	r7, #88	; 0x58
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200003ac 	.word	0x200003ac
 80018ac:	40010400 	.word	0x40010400

080018b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a18      	ldr	r2, [pc, #96]	; (8001920 <HAL_TIM_Base_MspInit+0x70>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d116      	bne.n	80018f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <HAL_TIM_Base_MspInit+0x74>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	4a16      	ldr	r2, [pc, #88]	; (8001924 <HAL_TIM_Base_MspInit+0x74>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <HAL_TIM_Base_MspInit+0x74>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	2019      	movs	r0, #25
 80018e4:	f000 fa69 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018e8:	2019      	movs	r0, #25
 80018ea:	f000 fa82 	bl	8001df2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80018ee:	e012      	b.n	8001916 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM8)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0c      	ldr	r2, [pc, #48]	; (8001928 <HAL_TIM_Base_MspInit+0x78>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d10d      	bne.n	8001916 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_TIM_Base_MspInit+0x74>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <HAL_TIM_Base_MspInit+0x74>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_TIM_Base_MspInit+0x74>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40010000 	.word	0x40010000
 8001924:	40023800 	.word	0x40023800
 8001928:	40010400 	.word	0x40010400

0800192c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a12      	ldr	r2, [pc, #72]	; (8001994 <HAL_TIM_MspPostInit+0x68>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d11d      	bne.n	800198a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_TIM_MspPostInit+0x6c>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <HAL_TIM_MspPostInit+0x6c>)
 8001958:	f043 0304 	orr.w	r3, r3, #4
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_TIM_MspPostInit+0x6c>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800196a:	2340      	movs	r3, #64	; 0x40
 800196c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800197a:	2303      	movs	r3, #3
 800197c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <HAL_TIM_MspPostInit+0x70>)
 8001986:	f000 fa4f 	bl	8001e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	3720      	adds	r7, #32
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40010400 	.word	0x40010400
 8001998:	40023800 	.word	0x40023800
 800199c:	40020800 	.word	0x40020800

080019a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <MX_USART1_UART_Init+0x4c>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <MX_USART1_UART_Init+0x50>)
 80019a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <MX_USART1_UART_Init+0x4c>)
 80019ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <MX_USART1_UART_Init+0x4c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <MX_USART1_UART_Init+0x4c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <MX_USART1_UART_Init+0x4c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <MX_USART1_UART_Init+0x4c>)
 80019c6:	220c      	movs	r2, #12
 80019c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <MX_USART1_UART_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <MX_USART1_UART_Init+0x4c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <MX_USART1_UART_Init+0x4c>)
 80019d8:	f003 fb52 	bl	8005080 <HAL_UART_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019e2:	f7ff fcbb 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200003f4 	.word	0x200003f4
 80019f0:	40011000 	.word	0x40011000

080019f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a19      	ldr	r2, [pc, #100]	; (8001a78 <HAL_UART_MspInit+0x84>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d12c      	bne.n	8001a70 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_UART_MspInit+0x88>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <HAL_UART_MspInit+0x88>)
 8001a20:	f043 0310 	orr.w	r3, r3, #16
 8001a24:	6453      	str	r3, [r2, #68]	; 0x44
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_UART_MspInit+0x88>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_UART_MspInit+0x88>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a10      	ldr	r2, [pc, #64]	; (8001a7c <HAL_UART_MspInit+0x88>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <HAL_UART_MspInit+0x88>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a60:	2307      	movs	r3, #7
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <HAL_UART_MspInit+0x8c>)
 8001a6c:	f000 f9dc 	bl	8001e28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a70:	bf00      	nop
 8001a72:	3728      	adds	r7, #40	; 0x28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40011000 	.word	0x40011000
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020000 	.word	0x40020000

08001a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001abc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a88:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a8a:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aa0:	4c0b      	ldr	r4, [pc, #44]	; (8001ad0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aae:	f7ff fdfb 	bl	80016a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f004 fb23 	bl	80060fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab6:	f7ff fb57 	bl	8001168 <main>
  bx  lr    
 8001aba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001abc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ac8:	08009934 	.word	0x08009934
  ldr r2, =_sbss
 8001acc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ad0:	2000044c 	.word	0x2000044c

08001ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC_IRQHandler>
	...

08001ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <HAL_Init+0x40>)
 8001ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <HAL_Init+0x40>)
 8001aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a07      	ldr	r2, [pc, #28]	; (8001b18 <HAL_Init+0x40>)
 8001afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f000 f94f 	bl	8001da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b06:	200f      	movs	r0, #15
 8001b08:	f000 f808 	bl	8001b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b0c:	f7ff fcaa 	bl	8001464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023c00 	.word	0x40023c00

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_InitTick+0x54>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_InitTick+0x58>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f967 	bl	8001e0e <HAL_SYSTICK_Config>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00e      	b.n	8001b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d80a      	bhi.n	8001b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b50:	2200      	movs	r2, #0
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f000 f92f 	bl	8001dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b5c:	4a06      	ldr	r2, [pc, #24]	; (8001b78 <HAL_InitTick+0x5c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e000      	b.n	8001b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000008 	.word	0x20000008
 8001b78:	20000004 	.word	0x20000004

08001b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_IncTick+0x20>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	20000438 	.word	0x20000438

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_GetTick+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000438 	.word	0x20000438

08001bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff ffee 	bl	8001ba4 <HAL_GetTick>
 8001bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd4:	d005      	beq.n	8001be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_Delay+0x44>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001be2:	bf00      	nop
 8001be4:	f7ff ffde 	bl	8001ba4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d8f7      	bhi.n	8001be4 <HAL_Delay+0x28>
  {
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000008 	.word	0x20000008

08001c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db0b      	blt.n	8001c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	4907      	ldr	r1, [pc, #28]	; (8001ca0 <__NVIC_EnableIRQ+0x38>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	2001      	movs	r0, #1
 8001c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000e100 	.word	0xe000e100

08001ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db0a      	blt.n	8001cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	490c      	ldr	r1, [pc, #48]	; (8001cf0 <__NVIC_SetPriority+0x4c>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ccc:	e00a      	b.n	8001ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4908      	ldr	r1, [pc, #32]	; (8001cf4 <__NVIC_SetPriority+0x50>)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3b04      	subs	r3, #4
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	761a      	strb	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f1c3 0307 	rsb	r3, r3, #7
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	bf28      	it	cs
 8001d16:	2304      	movcs	r3, #4
 8001d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d902      	bls.n	8001d28 <NVIC_EncodePriority+0x30>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b03      	subs	r3, #3
 8001d26:	e000      	b.n	8001d2a <NVIC_EncodePriority+0x32>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43d9      	mvns	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	4313      	orrs	r3, r2
         );
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d70:	d301      	bcc.n	8001d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00f      	b.n	8001d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <SysTick_Config+0x40>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7e:	210f      	movs	r1, #15
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f7ff ff8e 	bl	8001ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <SysTick_Config+0x40>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <SysTick_Config+0x40>)
 8001d90:	2207      	movs	r2, #7
 8001d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	e000e010 	.word	0xe000e010

08001da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff29 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dcc:	f7ff ff3e 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	6978      	ldr	r0, [r7, #20]
 8001dd8:	f7ff ff8e 	bl	8001cf8 <NVIC_EncodePriority>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff5d 	bl	8001ca4 <__NVIC_SetPriority>
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff31 	bl	8001c68 <__NVIC_EnableIRQ>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ffa2 	bl	8001d60 <SysTick_Config>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	e16b      	b.n	800211c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e44:	2201      	movs	r2, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	f040 815a 	bne.w	8002116 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d005      	beq.n	8001e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d130      	bne.n	8001edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	2203      	movs	r2, #3
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	f003 0201 	and.w	r2, r3, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d017      	beq.n	8001f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d123      	bne.n	8001f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	08da      	lsrs	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3208      	adds	r2, #8
 8001f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	08da      	lsrs	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3208      	adds	r2, #8
 8001f66:	69b9      	ldr	r1, [r7, #24]
 8001f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0203 	and.w	r2, r3, #3
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80b4 	beq.w	8002116 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	4b60      	ldr	r3, [pc, #384]	; (8002134 <HAL_GPIO_Init+0x30c>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	4a5f      	ldr	r2, [pc, #380]	; (8002134 <HAL_GPIO_Init+0x30c>)
 8001fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fbe:	4b5d      	ldr	r3, [pc, #372]	; (8002134 <HAL_GPIO_Init+0x30c>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fca:	4a5b      	ldr	r2, [pc, #364]	; (8002138 <HAL_GPIO_Init+0x310>)
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a52      	ldr	r2, [pc, #328]	; (800213c <HAL_GPIO_Init+0x314>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d02b      	beq.n	800204e <HAL_GPIO_Init+0x226>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a51      	ldr	r2, [pc, #324]	; (8002140 <HAL_GPIO_Init+0x318>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d025      	beq.n	800204a <HAL_GPIO_Init+0x222>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a50      	ldr	r2, [pc, #320]	; (8002144 <HAL_GPIO_Init+0x31c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d01f      	beq.n	8002046 <HAL_GPIO_Init+0x21e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4f      	ldr	r2, [pc, #316]	; (8002148 <HAL_GPIO_Init+0x320>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d019      	beq.n	8002042 <HAL_GPIO_Init+0x21a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4e      	ldr	r2, [pc, #312]	; (800214c <HAL_GPIO_Init+0x324>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <HAL_GPIO_Init+0x216>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4d      	ldr	r2, [pc, #308]	; (8002150 <HAL_GPIO_Init+0x328>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00d      	beq.n	800203a <HAL_GPIO_Init+0x212>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4c      	ldr	r2, [pc, #304]	; (8002154 <HAL_GPIO_Init+0x32c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <HAL_GPIO_Init+0x20e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4b      	ldr	r2, [pc, #300]	; (8002158 <HAL_GPIO_Init+0x330>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d101      	bne.n	8002032 <HAL_GPIO_Init+0x20a>
 800202e:	2307      	movs	r3, #7
 8002030:	e00e      	b.n	8002050 <HAL_GPIO_Init+0x228>
 8002032:	2308      	movs	r3, #8
 8002034:	e00c      	b.n	8002050 <HAL_GPIO_Init+0x228>
 8002036:	2306      	movs	r3, #6
 8002038:	e00a      	b.n	8002050 <HAL_GPIO_Init+0x228>
 800203a:	2305      	movs	r3, #5
 800203c:	e008      	b.n	8002050 <HAL_GPIO_Init+0x228>
 800203e:	2304      	movs	r3, #4
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x228>
 8002042:	2303      	movs	r3, #3
 8002044:	e004      	b.n	8002050 <HAL_GPIO_Init+0x228>
 8002046:	2302      	movs	r3, #2
 8002048:	e002      	b.n	8002050 <HAL_GPIO_Init+0x228>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_GPIO_Init+0x228>
 800204e:	2300      	movs	r3, #0
 8002050:	69fa      	ldr	r2, [r7, #28]
 8002052:	f002 0203 	and.w	r2, r2, #3
 8002056:	0092      	lsls	r2, r2, #2
 8002058:	4093      	lsls	r3, r2
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002060:	4935      	ldr	r1, [pc, #212]	; (8002138 <HAL_GPIO_Init+0x310>)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3302      	adds	r3, #2
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800206e:	4b3b      	ldr	r3, [pc, #236]	; (800215c <HAL_GPIO_Init+0x334>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002092:	4a32      	ldr	r2, [pc, #200]	; (800215c <HAL_GPIO_Init+0x334>)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002098:	4b30      	ldr	r3, [pc, #192]	; (800215c <HAL_GPIO_Init+0x334>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020bc:	4a27      	ldr	r2, [pc, #156]	; (800215c <HAL_GPIO_Init+0x334>)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020c2:	4b26      	ldr	r3, [pc, #152]	; (800215c <HAL_GPIO_Init+0x334>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020e6:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_GPIO_Init+0x334>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ec:	4b1b      	ldr	r3, [pc, #108]	; (800215c <HAL_GPIO_Init+0x334>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002110:	4a12      	ldr	r2, [pc, #72]	; (800215c <HAL_GPIO_Init+0x334>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3301      	adds	r3, #1
 800211a:	61fb      	str	r3, [r7, #28]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	2b0f      	cmp	r3, #15
 8002120:	f67f ae90 	bls.w	8001e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3724      	adds	r7, #36	; 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800
 8002138:	40013800 	.word	0x40013800
 800213c:	40020000 	.word	0x40020000
 8002140:	40020400 	.word	0x40020400
 8002144:	40020800 	.word	0x40020800
 8002148:	40020c00 	.word	0x40020c00
 800214c:	40021000 	.word	0x40021000
 8002150:	40021400 	.word	0x40021400
 8002154:	40021800 	.word	0x40021800
 8002158:	40021c00 	.word	0x40021c00
 800215c:	40013c00 	.word	0x40013c00

08002160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
 800216c:	4613      	mov	r3, r2
 800216e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002170:	787b      	ldrb	r3, [r7, #1]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800217c:	e003      	b.n	8002186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800217e:	887b      	ldrh	r3, [r7, #2]
 8002180:	041a      	lsls	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	619a      	str	r2, [r3, #24]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e12b      	b.n	80023fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe ff8c 	bl	80010d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2224      	movs	r2, #36	; 0x24
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0201 	bic.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021f8:	f001 fbfc 	bl	80039f4 <HAL_RCC_GetPCLK1Freq>
 80021fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4a81      	ldr	r2, [pc, #516]	; (8002408 <HAL_I2C_Init+0x274>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d807      	bhi.n	8002218 <HAL_I2C_Init+0x84>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4a80      	ldr	r2, [pc, #512]	; (800240c <HAL_I2C_Init+0x278>)
 800220c:	4293      	cmp	r3, r2
 800220e:	bf94      	ite	ls
 8002210:	2301      	movls	r3, #1
 8002212:	2300      	movhi	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	e006      	b.n	8002226 <HAL_I2C_Init+0x92>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4a7d      	ldr	r2, [pc, #500]	; (8002410 <HAL_I2C_Init+0x27c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	bf94      	ite	ls
 8002220:	2301      	movls	r3, #1
 8002222:	2300      	movhi	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e0e7      	b.n	80023fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4a78      	ldr	r2, [pc, #480]	; (8002414 <HAL_I2C_Init+0x280>)
 8002232:	fba2 2303 	umull	r2, r3, r2, r3
 8002236:	0c9b      	lsrs	r3, r3, #18
 8002238:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	430a      	orrs	r2, r1
 800224c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4a6a      	ldr	r2, [pc, #424]	; (8002408 <HAL_I2C_Init+0x274>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d802      	bhi.n	8002268 <HAL_I2C_Init+0xd4>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	3301      	adds	r3, #1
 8002266:	e009      	b.n	800227c <HAL_I2C_Init+0xe8>
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800226e:	fb02 f303 	mul.w	r3, r2, r3
 8002272:	4a69      	ldr	r2, [pc, #420]	; (8002418 <HAL_I2C_Init+0x284>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	099b      	lsrs	r3, r3, #6
 800227a:	3301      	adds	r3, #1
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	430b      	orrs	r3, r1
 8002282:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800228e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	495c      	ldr	r1, [pc, #368]	; (8002408 <HAL_I2C_Init+0x274>)
 8002298:	428b      	cmp	r3, r1
 800229a:	d819      	bhi.n	80022d0 <HAL_I2C_Init+0x13c>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1e59      	subs	r1, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80022aa:	1c59      	adds	r1, r3, #1
 80022ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022b0:	400b      	ands	r3, r1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_I2C_Init+0x138>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ca:	e051      	b.n	8002370 <HAL_I2C_Init+0x1dc>
 80022cc:	2304      	movs	r3, #4
 80022ce:	e04f      	b.n	8002370 <HAL_I2C_Init+0x1dc>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d111      	bne.n	80022fc <HAL_I2C_Init+0x168>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	1e58      	subs	r0, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	440b      	add	r3, r1
 80022e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ea:	3301      	adds	r3, #1
 80022ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf0c      	ite	eq
 80022f4:	2301      	moveq	r3, #1
 80022f6:	2300      	movne	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	e012      	b.n	8002322 <HAL_I2C_Init+0x18e>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1e58      	subs	r0, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	0099      	lsls	r1, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002312:	3301      	adds	r3, #1
 8002314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_Init+0x196>
 8002326:	2301      	movs	r3, #1
 8002328:	e022      	b.n	8002370 <HAL_I2C_Init+0x1dc>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10e      	bne.n	8002350 <HAL_I2C_Init+0x1bc>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1e58      	subs	r0, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6859      	ldr	r1, [r3, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	440b      	add	r3, r1
 8002340:	fbb0 f3f3 	udiv	r3, r0, r3
 8002344:	3301      	adds	r3, #1
 8002346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800234e:	e00f      	b.n	8002370 <HAL_I2C_Init+0x1dc>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1e58      	subs	r0, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	0099      	lsls	r1, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	fbb0 f3f3 	udiv	r3, r0, r3
 8002366:	3301      	adds	r3, #1
 8002368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	6809      	ldr	r1, [r1, #0]
 8002374:	4313      	orrs	r3, r2
 8002376:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800239e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6911      	ldr	r1, [r2, #16]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68d2      	ldr	r2, [r2, #12]
 80023aa:	4311      	orrs	r1, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	430b      	orrs	r3, r1
 80023b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	000186a0 	.word	0x000186a0
 800240c:	001e847f 	.word	0x001e847f
 8002410:	003d08ff 	.word	0x003d08ff
 8002414:	431bde83 	.word	0x431bde83
 8002418:	10624dd3 	.word	0x10624dd3

0800241c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	4608      	mov	r0, r1
 8002426:	4611      	mov	r1, r2
 8002428:	461a      	mov	r2, r3
 800242a:	4603      	mov	r3, r0
 800242c:	817b      	strh	r3, [r7, #10]
 800242e:	460b      	mov	r3, r1
 8002430:	813b      	strh	r3, [r7, #8]
 8002432:	4613      	mov	r3, r2
 8002434:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002436:	f7ff fbb5 	bl	8001ba4 <HAL_GetTick>
 800243a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b20      	cmp	r3, #32
 8002446:	f040 80d9 	bne.w	80025fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2319      	movs	r3, #25
 8002450:	2201      	movs	r2, #1
 8002452:	496d      	ldr	r1, [pc, #436]	; (8002608 <HAL_I2C_Mem_Write+0x1ec>)
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 fc7f 	bl	8002d58 <I2C_WaitOnFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002460:	2302      	movs	r3, #2
 8002462:	e0cc      	b.n	80025fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_I2C_Mem_Write+0x56>
 800246e:	2302      	movs	r3, #2
 8002470:	e0c5      	b.n	80025fe <HAL_I2C_Mem_Write+0x1e2>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b01      	cmp	r3, #1
 8002486:	d007      	beq.n	8002498 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2221      	movs	r2, #33	; 0x21
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2240      	movs	r2, #64	; 0x40
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a3a      	ldr	r2, [r7, #32]
 80024c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4a4d      	ldr	r2, [pc, #308]	; (800260c <HAL_I2C_Mem_Write+0x1f0>)
 80024d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024da:	88f8      	ldrh	r0, [r7, #6]
 80024dc:	893a      	ldrh	r2, [r7, #8]
 80024de:	8979      	ldrh	r1, [r7, #10]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	4603      	mov	r3, r0
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fab6 	bl	8002a5c <I2C_RequestMemoryWrite>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d052      	beq.n	800259c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e081      	b.n	80025fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fd00 	bl	8002f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00d      	beq.n	8002526 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	2b04      	cmp	r3, #4
 8002510:	d107      	bne.n	8002522 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002520:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e06b      	b.n	80025fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	781a      	ldrb	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b04      	cmp	r3, #4
 8002562:	d11b      	bne.n	800259c <HAL_I2C_Mem_Write+0x180>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	2b00      	cmp	r3, #0
 800256a:	d017      	beq.n	800259c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	781a      	ldrb	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1aa      	bne.n	80024fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 fcec 	bl	8002f86 <I2C_WaitOnBTFFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00d      	beq.n	80025d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d107      	bne.n	80025cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e016      	b.n	80025fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e000      	b.n	80025fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025fc:	2302      	movs	r3, #2
  }
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	00100002 	.word	0x00100002
 800260c:	ffff0000 	.word	0xffff0000

08002610 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08c      	sub	sp, #48	; 0x30
 8002614:	af02      	add	r7, sp, #8
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	4608      	mov	r0, r1
 800261a:	4611      	mov	r1, r2
 800261c:	461a      	mov	r2, r3
 800261e:	4603      	mov	r3, r0
 8002620:	817b      	strh	r3, [r7, #10]
 8002622:	460b      	mov	r3, r1
 8002624:	813b      	strh	r3, [r7, #8]
 8002626:	4613      	mov	r3, r2
 8002628:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800262a:	f7ff fabb 	bl	8001ba4 <HAL_GetTick>
 800262e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b20      	cmp	r3, #32
 800263a:	f040 8208 	bne.w	8002a4e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2319      	movs	r3, #25
 8002644:	2201      	movs	r2, #1
 8002646:	497b      	ldr	r1, [pc, #492]	; (8002834 <HAL_I2C_Mem_Read+0x224>)
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 fb85 	bl	8002d58 <I2C_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002654:	2302      	movs	r3, #2
 8002656:	e1fb      	b.n	8002a50 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_I2C_Mem_Read+0x56>
 8002662:	2302      	movs	r3, #2
 8002664:	e1f4      	b.n	8002a50 <HAL_I2C_Mem_Read+0x440>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d007      	beq.n	800268c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800269a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2222      	movs	r2, #34	; 0x22
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2240      	movs	r2, #64	; 0x40
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4a5b      	ldr	r2, [pc, #364]	; (8002838 <HAL_I2C_Mem_Read+0x228>)
 80026cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ce:	88f8      	ldrh	r0, [r7, #6]
 80026d0:	893a      	ldrh	r2, [r7, #8]
 80026d2:	8979      	ldrh	r1, [r7, #10]
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	4603      	mov	r3, r0
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 fa52 	bl	8002b88 <I2C_RequestMemoryRead>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e1b0      	b.n	8002a50 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d113      	bne.n	800271e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f6:	2300      	movs	r3, #0
 80026f8:	623b      	str	r3, [r7, #32]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	623b      	str	r3, [r7, #32]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	623b      	str	r3, [r7, #32]
 800270a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	e184      	b.n	8002a28 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	2b01      	cmp	r3, #1
 8002724:	d11b      	bne.n	800275e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002734:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e164      	b.n	8002a28 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002762:	2b02      	cmp	r3, #2
 8002764:	d11b      	bne.n	800279e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002774:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002784:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	61bb      	str	r3, [r7, #24]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	e144      	b.n	8002a28 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027b4:	e138      	b.n	8002a28 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	f200 80f1 	bhi.w	80029a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d123      	bne.n	8002810 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 fc1b 	bl	8003008 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e139      	b.n	8002a50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691a      	ldr	r2, [r3, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002804:	b29b      	uxth	r3, r3
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800280e:	e10b      	b.n	8002a28 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002814:	2b02      	cmp	r3, #2
 8002816:	d14e      	bne.n	80028b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281e:	2200      	movs	r2, #0
 8002820:	4906      	ldr	r1, [pc, #24]	; (800283c <HAL_I2C_Mem_Read+0x22c>)
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 fa98 	bl	8002d58 <I2C_WaitOnFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d008      	beq.n	8002840 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e10e      	b.n	8002a50 <HAL_I2C_Mem_Read+0x440>
 8002832:	bf00      	nop
 8002834:	00100002 	.word	0x00100002
 8002838:	ffff0000 	.word	0xffff0000
 800283c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800284e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028b4:	e0b8      	b.n	8002a28 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028bc:	2200      	movs	r2, #0
 80028be:	4966      	ldr	r1, [pc, #408]	; (8002a58 <HAL_I2C_Mem_Read+0x448>)
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 fa49 	bl	8002d58 <I2C_WaitOnFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0bf      	b.n	8002a50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002918:	2200      	movs	r2, #0
 800291a:	494f      	ldr	r1, [pc, #316]	; (8002a58 <HAL_I2C_Mem_Read+0x448>)
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 fa1b 	bl	8002d58 <I2C_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e091      	b.n	8002a50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029a0:	e042      	b.n	8002a28 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 fb2e 	bl	8003008 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e04c      	b.n	8002a50 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d118      	bne.n	8002a28 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f47f aec2 	bne.w	80027b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e000      	b.n	8002a50 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a4e:	2302      	movs	r3, #2
  }
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3728      	adds	r7, #40	; 0x28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	00010004 	.word	0x00010004

08002a5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	4608      	mov	r0, r1
 8002a66:	4611      	mov	r1, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	817b      	strh	r3, [r7, #10]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	813b      	strh	r3, [r7, #8]
 8002a72:	4613      	mov	r3, r2
 8002a74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f960 	bl	8002d58 <I2C_WaitOnFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00d      	beq.n	8002aba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aac:	d103      	bne.n	8002ab6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e05f      	b.n	8002b7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aba:	897b      	ldrh	r3, [r7, #10]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ac8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	6a3a      	ldr	r2, [r7, #32]
 8002ace:	492d      	ldr	r1, [pc, #180]	; (8002b84 <I2C_RequestMemoryWrite+0x128>)
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f998 	bl	8002e06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e04c      	b.n	8002b7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af8:	6a39      	ldr	r1, [r7, #32]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 fa02 	bl	8002f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00d      	beq.n	8002b22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d107      	bne.n	8002b1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e02b      	b.n	8002b7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d105      	bne.n	8002b34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b28:	893b      	ldrh	r3, [r7, #8]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	611a      	str	r2, [r3, #16]
 8002b32:	e021      	b.n	8002b78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b34:	893b      	ldrh	r3, [r7, #8]
 8002b36:	0a1b      	lsrs	r3, r3, #8
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b44:	6a39      	ldr	r1, [r7, #32]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f9dc 	bl	8002f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00d      	beq.n	8002b6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d107      	bne.n	8002b6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e005      	b.n	8002b7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b6e:	893b      	ldrh	r3, [r7, #8]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	00010002 	.word	0x00010002

08002b88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	4608      	mov	r0, r1
 8002b92:	4611      	mov	r1, r2
 8002b94:	461a      	mov	r2, r3
 8002b96:	4603      	mov	r3, r0
 8002b98:	817b      	strh	r3, [r7, #10]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	813b      	strh	r3, [r7, #8]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bb0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 f8c2 	bl	8002d58 <I2C_WaitOnFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00d      	beq.n	8002bf6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be8:	d103      	bne.n	8002bf2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e0aa      	b.n	8002d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bf6:	897b      	ldrh	r3, [r7, #10]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	6a3a      	ldr	r2, [r7, #32]
 8002c0a:	4952      	ldr	r1, [pc, #328]	; (8002d54 <I2C_RequestMemoryRead+0x1cc>)
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f8fa 	bl	8002e06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e097      	b.n	8002d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c34:	6a39      	ldr	r1, [r7, #32]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f964 	bl	8002f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00d      	beq.n	8002c5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d107      	bne.n	8002c5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e076      	b.n	8002d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d105      	bne.n	8002c70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c64:	893b      	ldrh	r3, [r7, #8]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	611a      	str	r2, [r3, #16]
 8002c6e:	e021      	b.n	8002cb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c70:	893b      	ldrh	r3, [r7, #8]
 8002c72:	0a1b      	lsrs	r3, r3, #8
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c80:	6a39      	ldr	r1, [r7, #32]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f93e 	bl	8002f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00d      	beq.n	8002caa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d107      	bne.n	8002ca6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e050      	b.n	8002d4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002caa:	893b      	ldrh	r3, [r7, #8]
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb6:	6a39      	ldr	r1, [r7, #32]
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f923 	bl	8002f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00d      	beq.n	8002ce0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d107      	bne.n	8002cdc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e035      	b.n	8002d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f82b 	bl	8002d58 <I2C_WaitOnFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00d      	beq.n	8002d24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d16:	d103      	bne.n	8002d20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e013      	b.n	8002d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d24:	897b      	ldrh	r3, [r7, #10]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	6a3a      	ldr	r2, [r7, #32]
 8002d38:	4906      	ldr	r1, [pc, #24]	; (8002d54 <I2C_RequestMemoryRead+0x1cc>)
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f863 	bl	8002e06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	00010002 	.word	0x00010002

08002d58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d68:	e025      	b.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d021      	beq.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d72:	f7fe ff17 	bl	8001ba4 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d302      	bcc.n	8002d88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d116      	bne.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f043 0220 	orr.w	r2, r3, #32
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e023      	b.n	8002dfe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	0c1b      	lsrs	r3, r3, #16
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d10d      	bne.n	8002ddc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bf0c      	ite	eq
 8002dd2:	2301      	moveq	r3, #1
 8002dd4:	2300      	movne	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	e00c      	b.n	8002df6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	43da      	mvns	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4013      	ands	r3, r2
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	bf0c      	ite	eq
 8002dee:	2301      	moveq	r3, #1
 8002df0:	2300      	movne	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d0b6      	beq.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e14:	e051      	b.n	8002eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e24:	d123      	bne.n	8002e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e046      	b.n	8002efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d021      	beq.n	8002eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e76:	f7fe fe95 	bl	8001ba4 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d302      	bcc.n	8002e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d116      	bne.n	8002eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f043 0220 	orr.w	r2, r3, #32
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e020      	b.n	8002efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	0c1b      	lsrs	r3, r3, #16
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d10c      	bne.n	8002ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bf14      	ite	ne
 8002ed6:	2301      	movne	r3, #1
 8002ed8:	2300      	moveq	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	e00b      	b.n	8002ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	43da      	mvns	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf14      	ite	ne
 8002ef0:	2301      	movne	r3, #1
 8002ef2:	2300      	moveq	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d18d      	bne.n	8002e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f10:	e02d      	b.n	8002f6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f8ce 	bl	80030b4 <I2C_IsAcknowledgeFailed>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e02d      	b.n	8002f7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d021      	beq.n	8002f6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2a:	f7fe fe3b 	bl	8001ba4 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d302      	bcc.n	8002f40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d116      	bne.n	8002f6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f043 0220 	orr.w	r2, r3, #32
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e007      	b.n	8002f7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f78:	2b80      	cmp	r3, #128	; 0x80
 8002f7a:	d1ca      	bne.n	8002f12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f92:	e02d      	b.n	8002ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 f88d 	bl	80030b4 <I2C_IsAcknowledgeFailed>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e02d      	b.n	8003000 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002faa:	d021      	beq.n	8002ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fac:	f7fe fdfa 	bl	8001ba4 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d302      	bcc.n	8002fc2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d116      	bne.n	8002ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e007      	b.n	8003000 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d1ca      	bne.n	8002f94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003014:	e042      	b.n	800309c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b10      	cmp	r3, #16
 8003022:	d119      	bne.n	8003058 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0210 	mvn.w	r2, #16
 800302c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e029      	b.n	80030ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003058:	f7fe fda4 	bl	8001ba4 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	429a      	cmp	r2, r3
 8003066:	d302      	bcc.n	800306e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d116      	bne.n	800309c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e007      	b.n	80030ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a6:	2b40      	cmp	r3, #64	; 0x40
 80030a8:	d1b5      	bne.n	8003016 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ca:	d11b      	bne.n	8003104 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f043 0204 	orr.w	r2, r3, #4
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e267      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d075      	beq.n	800321e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003132:	4b88      	ldr	r3, [pc, #544]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b04      	cmp	r3, #4
 800313c:	d00c      	beq.n	8003158 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800313e:	4b85      	ldr	r3, [pc, #532]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003146:	2b08      	cmp	r3, #8
 8003148:	d112      	bne.n	8003170 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800314a:	4b82      	ldr	r3, [pc, #520]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003152:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003156:	d10b      	bne.n	8003170 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	4b7e      	ldr	r3, [pc, #504]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d05b      	beq.n	800321c <HAL_RCC_OscConfig+0x108>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d157      	bne.n	800321c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e242      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003178:	d106      	bne.n	8003188 <HAL_RCC_OscConfig+0x74>
 800317a:	4b76      	ldr	r3, [pc, #472]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a75      	ldr	r2, [pc, #468]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	e01d      	b.n	80031c4 <HAL_RCC_OscConfig+0xb0>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0x98>
 8003192:	4b70      	ldr	r3, [pc, #448]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a6f      	ldr	r2, [pc, #444]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	4b6d      	ldr	r3, [pc, #436]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a6c      	ldr	r2, [pc, #432]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e00b      	b.n	80031c4 <HAL_RCC_OscConfig+0xb0>
 80031ac:	4b69      	ldr	r3, [pc, #420]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a68      	ldr	r2, [pc, #416]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80031b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	4b66      	ldr	r3, [pc, #408]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a65      	ldr	r2, [pc, #404]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80031be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d013      	beq.n	80031f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031cc:	f7fe fcea 	bl	8001ba4 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d4:	f7fe fce6 	bl	8001ba4 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	; 0x64
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e207      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	4b5b      	ldr	r3, [pc, #364]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0xc0>
 80031f2:	e014      	b.n	800321e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7fe fcd6 	bl	8001ba4 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031fc:	f7fe fcd2 	bl	8001ba4 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	; 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e1f3      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320e:	4b51      	ldr	r3, [pc, #324]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0xe8>
 800321a:	e000      	b.n	800321e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d063      	beq.n	80032f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800322a:	4b4a      	ldr	r3, [pc, #296]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00b      	beq.n	800324e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003236:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800323e:	2b08      	cmp	r3, #8
 8003240:	d11c      	bne.n	800327c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003242:	4b44      	ldr	r3, [pc, #272]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d116      	bne.n	800327c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324e:	4b41      	ldr	r3, [pc, #260]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <HAL_RCC_OscConfig+0x152>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d001      	beq.n	8003266 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e1c7      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003266:	4b3b      	ldr	r3, [pc, #236]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4937      	ldr	r1, [pc, #220]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327a:	e03a      	b.n	80032f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d020      	beq.n	80032c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003284:	4b34      	ldr	r3, [pc, #208]	; (8003358 <HAL_RCC_OscConfig+0x244>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328a:	f7fe fc8b 	bl	8001ba4 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003292:	f7fe fc87 	bl	8001ba4 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e1a8      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a4:	4b2b      	ldr	r3, [pc, #172]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b0:	4b28      	ldr	r3, [pc, #160]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4925      	ldr	r1, [pc, #148]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	600b      	str	r3, [r1, #0]
 80032c4:	e015      	b.n	80032f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c6:	4b24      	ldr	r3, [pc, #144]	; (8003358 <HAL_RCC_OscConfig+0x244>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe fc6a 	bl	8001ba4 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d4:	f7fe fc66 	bl	8001ba4 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e187      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e6:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d036      	beq.n	800336c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d016      	beq.n	8003334 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003306:	4b15      	ldr	r3, [pc, #84]	; (800335c <HAL_RCC_OscConfig+0x248>)
 8003308:	2201      	movs	r2, #1
 800330a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7fe fc4a 	bl	8001ba4 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003314:	f7fe fc46 	bl	8001ba4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e167      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x200>
 8003332:	e01b      	b.n	800336c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003334:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_RCC_OscConfig+0x248>)
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333a:	f7fe fc33 	bl	8001ba4 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003340:	e00e      	b.n	8003360 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003342:	f7fe fc2f 	bl	8001ba4 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d907      	bls.n	8003360 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e150      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
 8003354:	40023800 	.word	0x40023800
 8003358:	42470000 	.word	0x42470000
 800335c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003360:	4b88      	ldr	r3, [pc, #544]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1ea      	bne.n	8003342 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8097 	beq.w	80034a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800337a:	2300      	movs	r3, #0
 800337c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337e:	4b81      	ldr	r3, [pc, #516]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10f      	bne.n	80033aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	4b7d      	ldr	r3, [pc, #500]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	4a7c      	ldr	r2, [pc, #496]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003398:	6413      	str	r3, [r2, #64]	; 0x40
 800339a:	4b7a      	ldr	r3, [pc, #488]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a6:	2301      	movs	r3, #1
 80033a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033aa:	4b77      	ldr	r3, [pc, #476]	; (8003588 <HAL_RCC_OscConfig+0x474>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d118      	bne.n	80033e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b6:	4b74      	ldr	r3, [pc, #464]	; (8003588 <HAL_RCC_OscConfig+0x474>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a73      	ldr	r2, [pc, #460]	; (8003588 <HAL_RCC_OscConfig+0x474>)
 80033bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c2:	f7fe fbef 	bl	8001ba4 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ca:	f7fe fbeb 	bl	8001ba4 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e10c      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033dc:	4b6a      	ldr	r3, [pc, #424]	; (8003588 <HAL_RCC_OscConfig+0x474>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d106      	bne.n	80033fe <HAL_RCC_OscConfig+0x2ea>
 80033f0:	4b64      	ldr	r3, [pc, #400]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f4:	4a63      	ldr	r2, [pc, #396]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6713      	str	r3, [r2, #112]	; 0x70
 80033fc:	e01c      	b.n	8003438 <HAL_RCC_OscConfig+0x324>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b05      	cmp	r3, #5
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0x30c>
 8003406:	4b5f      	ldr	r3, [pc, #380]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	4a5e      	ldr	r2, [pc, #376]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 800340c:	f043 0304 	orr.w	r3, r3, #4
 8003410:	6713      	str	r3, [r2, #112]	; 0x70
 8003412:	4b5c      	ldr	r3, [pc, #368]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	4a5b      	ldr	r2, [pc, #364]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	6713      	str	r3, [r2, #112]	; 0x70
 800341e:	e00b      	b.n	8003438 <HAL_RCC_OscConfig+0x324>
 8003420:	4b58      	ldr	r3, [pc, #352]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	4a57      	ldr	r2, [pc, #348]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	6713      	str	r3, [r2, #112]	; 0x70
 800342c:	4b55      	ldr	r3, [pc, #340]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	4a54      	ldr	r2, [pc, #336]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003432:	f023 0304 	bic.w	r3, r3, #4
 8003436:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d015      	beq.n	800346c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003440:	f7fe fbb0 	bl	8001ba4 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003446:	e00a      	b.n	800345e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003448:	f7fe fbac 	bl	8001ba4 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	; 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e0cb      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345e:	4b49      	ldr	r3, [pc, #292]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0ee      	beq.n	8003448 <HAL_RCC_OscConfig+0x334>
 800346a:	e014      	b.n	8003496 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346c:	f7fe fb9a 	bl	8001ba4 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003472:	e00a      	b.n	800348a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003474:	f7fe fb96 	bl	8001ba4 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e0b5      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348a:	4b3e      	ldr	r3, [pc, #248]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1ee      	bne.n	8003474 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003496:	7dfb      	ldrb	r3, [r7, #23]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d105      	bne.n	80034a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800349c:	4b39      	ldr	r3, [pc, #228]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	4a38      	ldr	r2, [pc, #224]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 80034a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80a1 	beq.w	80035f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034b2:	4b34      	ldr	r3, [pc, #208]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d05c      	beq.n	8003578 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d141      	bne.n	800354a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c6:	4b31      	ldr	r3, [pc, #196]	; (800358c <HAL_RCC_OscConfig+0x478>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034cc:	f7fe fb6a 	bl	8001ba4 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fe fb66 	bl	8001ba4 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e087      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	4b27      	ldr	r3, [pc, #156]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69da      	ldr	r2, [r3, #28]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	019b      	lsls	r3, r3, #6
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	3b01      	subs	r3, #1
 800350c:	041b      	lsls	r3, r3, #16
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	061b      	lsls	r3, r3, #24
 8003516:	491b      	ldr	r1, [pc, #108]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003518:	4313      	orrs	r3, r2
 800351a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800351c:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_RCC_OscConfig+0x478>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003522:	f7fe fb3f 	bl	8001ba4 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352a:	f7fe fb3b 	bl	8001ba4 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e05c      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x416>
 8003548:	e054      	b.n	80035f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_RCC_OscConfig+0x478>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fe fb28 	bl	8001ba4 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003558:	f7fe fb24 	bl	8001ba4 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e045      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x444>
 8003576:	e03d      	b.n	80035f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d107      	bne.n	8003590 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e038      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
 8003584:	40023800 	.word	0x40023800
 8003588:	40007000 	.word	0x40007000
 800358c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003590:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_RCC_OscConfig+0x4ec>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d028      	beq.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d121      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d11a      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035c0:	4013      	ands	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d111      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	3b01      	subs	r3, #1
 80035da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d107      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800

08003604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0cc      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003618:	4b68      	ldr	r3, [pc, #416]	; (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d90c      	bls.n	8003640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b65      	ldr	r3, [pc, #404]	; (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b63      	ldr	r3, [pc, #396]	; (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0b8      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d020      	beq.n	800368e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003658:	4b59      	ldr	r3, [pc, #356]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4a58      	ldr	r2, [pc, #352]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003662:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003670:	4b53      	ldr	r3, [pc, #332]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	4a52      	ldr	r2, [pc, #328]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800367a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800367c:	4b50      	ldr	r3, [pc, #320]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	494d      	ldr	r1, [pc, #308]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d044      	beq.n	8003724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d107      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	4b47      	ldr	r3, [pc, #284]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d119      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e07f      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d003      	beq.n	80036c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d107      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c2:	4b3f      	ldr	r3, [pc, #252]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e06f      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d2:	4b3b      	ldr	r3, [pc, #236]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e067      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036e2:	4b37      	ldr	r3, [pc, #220]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f023 0203 	bic.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4934      	ldr	r1, [pc, #208]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f4:	f7fe fa56 	bl	8001ba4 <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fa:	e00a      	b.n	8003712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036fc:	f7fe fa52 	bl	8001ba4 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f241 3288 	movw	r2, #5000	; 0x1388
 800370a:	4293      	cmp	r3, r2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e04f      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003712:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 020c 	and.w	r2, r3, #12
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	429a      	cmp	r2, r3
 8003722:	d1eb      	bne.n	80036fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003724:	4b25      	ldr	r3, [pc, #148]	; (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d20c      	bcs.n	800374c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b22      	ldr	r3, [pc, #136]	; (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373a:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e032      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003758:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4916      	ldr	r1, [pc, #88]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	4313      	orrs	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003776:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	490e      	ldr	r1, [pc, #56]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800378a:	f000 f821 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 800378e:	4602      	mov	r2, r0
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	490a      	ldr	r1, [pc, #40]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 800379c:	5ccb      	ldrb	r3, [r1, r3]
 800379e:	fa22 f303 	lsr.w	r3, r2, r3
 80037a2:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037a6:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe f9b6 	bl	8001b1c <HAL_InitTick>

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40023c00 	.word	0x40023c00
 80037c0:	40023800 	.word	0x40023800
 80037c4:	08008f44 	.word	0x08008f44
 80037c8:	20000000 	.word	0x20000000
 80037cc:	20000004 	.word	0x20000004

080037d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037d4:	b094      	sub	sp, #80	; 0x50
 80037d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	647b      	str	r3, [r7, #68]	; 0x44
 80037dc:	2300      	movs	r3, #0
 80037de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037e0:	2300      	movs	r3, #0
 80037e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037e8:	4b79      	ldr	r3, [pc, #484]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 030c 	and.w	r3, r3, #12
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d00d      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x40>
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	f200 80e1 	bhi.w	80039bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0x34>
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d003      	beq.n	800380a <HAL_RCC_GetSysClockFreq+0x3a>
 8003802:	e0db      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003804:	4b73      	ldr	r3, [pc, #460]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003806:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003808:	e0db      	b.n	80039c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800380a:	4b73      	ldr	r3, [pc, #460]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800380c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800380e:	e0d8      	b.n	80039c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003810:	4b6f      	ldr	r3, [pc, #444]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003818:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800381a:	4b6d      	ldr	r3, [pc, #436]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d063      	beq.n	80038ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003826:	4b6a      	ldr	r3, [pc, #424]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	099b      	lsrs	r3, r3, #6
 800382c:	2200      	movs	r2, #0
 800382e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003830:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003838:	633b      	str	r3, [r7, #48]	; 0x30
 800383a:	2300      	movs	r3, #0
 800383c:	637b      	str	r3, [r7, #52]	; 0x34
 800383e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003842:	4622      	mov	r2, r4
 8003844:	462b      	mov	r3, r5
 8003846:	f04f 0000 	mov.w	r0, #0
 800384a:	f04f 0100 	mov.w	r1, #0
 800384e:	0159      	lsls	r1, r3, #5
 8003850:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003854:	0150      	lsls	r0, r2, #5
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4621      	mov	r1, r4
 800385c:	1a51      	subs	r1, r2, r1
 800385e:	6139      	str	r1, [r7, #16]
 8003860:	4629      	mov	r1, r5
 8003862:	eb63 0301 	sbc.w	r3, r3, r1
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003874:	4659      	mov	r1, fp
 8003876:	018b      	lsls	r3, r1, #6
 8003878:	4651      	mov	r1, sl
 800387a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800387e:	4651      	mov	r1, sl
 8003880:	018a      	lsls	r2, r1, #6
 8003882:	4651      	mov	r1, sl
 8003884:	ebb2 0801 	subs.w	r8, r2, r1
 8003888:	4659      	mov	r1, fp
 800388a:	eb63 0901 	sbc.w	r9, r3, r1
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800389a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800389e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038a2:	4690      	mov	r8, r2
 80038a4:	4699      	mov	r9, r3
 80038a6:	4623      	mov	r3, r4
 80038a8:	eb18 0303 	adds.w	r3, r8, r3
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	462b      	mov	r3, r5
 80038b0:	eb49 0303 	adc.w	r3, r9, r3
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038c2:	4629      	mov	r1, r5
 80038c4:	024b      	lsls	r3, r1, #9
 80038c6:	4621      	mov	r1, r4
 80038c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038cc:	4621      	mov	r1, r4
 80038ce:	024a      	lsls	r2, r1, #9
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d6:	2200      	movs	r2, #0
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038e0:	f7fd f9b2 	bl	8000c48 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4613      	mov	r3, r2
 80038ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038ec:	e058      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ee:	4b38      	ldr	r3, [pc, #224]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	099b      	lsrs	r3, r3, #6
 80038f4:	2200      	movs	r2, #0
 80038f6:	4618      	mov	r0, r3
 80038f8:	4611      	mov	r1, r2
 80038fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038fe:	623b      	str	r3, [r7, #32]
 8003900:	2300      	movs	r3, #0
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
 8003904:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003908:	4642      	mov	r2, r8
 800390a:	464b      	mov	r3, r9
 800390c:	f04f 0000 	mov.w	r0, #0
 8003910:	f04f 0100 	mov.w	r1, #0
 8003914:	0159      	lsls	r1, r3, #5
 8003916:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800391a:	0150      	lsls	r0, r2, #5
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4641      	mov	r1, r8
 8003922:	ebb2 0a01 	subs.w	sl, r2, r1
 8003926:	4649      	mov	r1, r9
 8003928:	eb63 0b01 	sbc.w	fp, r3, r1
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003938:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800393c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003940:	ebb2 040a 	subs.w	r4, r2, sl
 8003944:	eb63 050b 	sbc.w	r5, r3, fp
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	00eb      	lsls	r3, r5, #3
 8003952:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003956:	00e2      	lsls	r2, r4, #3
 8003958:	4614      	mov	r4, r2
 800395a:	461d      	mov	r5, r3
 800395c:	4643      	mov	r3, r8
 800395e:	18e3      	adds	r3, r4, r3
 8003960:	603b      	str	r3, [r7, #0]
 8003962:	464b      	mov	r3, r9
 8003964:	eb45 0303 	adc.w	r3, r5, r3
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003976:	4629      	mov	r1, r5
 8003978:	028b      	lsls	r3, r1, #10
 800397a:	4621      	mov	r1, r4
 800397c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003980:	4621      	mov	r1, r4
 8003982:	028a      	lsls	r2, r1, #10
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800398a:	2200      	movs	r2, #0
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	61fa      	str	r2, [r7, #28]
 8003990:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003994:	f7fd f958 	bl	8000c48 <__aeabi_uldivmod>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4613      	mov	r3, r2
 800399e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	0c1b      	lsrs	r3, r3, #16
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	3301      	adds	r3, #1
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80039b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039ba:	e002      	b.n	80039c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80039be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3750      	adds	r7, #80	; 0x50
 80039c8:	46bd      	mov	sp, r7
 80039ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ce:	bf00      	nop
 80039d0:	40023800 	.word	0x40023800
 80039d4:	00f42400 	.word	0x00f42400
 80039d8:	007a1200 	.word	0x007a1200

080039dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039e0:	4b03      	ldr	r3, [pc, #12]	; (80039f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039e2:	681b      	ldr	r3, [r3, #0]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	20000000 	.word	0x20000000

080039f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039f8:	f7ff fff0 	bl	80039dc <HAL_RCC_GetHCLKFreq>
 80039fc:	4602      	mov	r2, r0
 80039fe:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	0a9b      	lsrs	r3, r3, #10
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	4903      	ldr	r1, [pc, #12]	; (8003a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a0a:	5ccb      	ldrb	r3, [r1, r3]
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40023800 	.word	0x40023800
 8003a18:	08008f54 	.word	0x08008f54

08003a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a20:	f7ff ffdc 	bl	80039dc <HAL_RCC_GetHCLKFreq>
 8003a24:	4602      	mov	r2, r0
 8003a26:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	0b5b      	lsrs	r3, r3, #13
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	4903      	ldr	r1, [pc, #12]	; (8003a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a32:	5ccb      	ldrb	r3, [r1, r3]
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	08008f54 	.word	0x08008f54

08003a44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e07b      	b.n	8003b4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d108      	bne.n	8003a70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a66:	d009      	beq.n	8003a7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	61da      	str	r2, [r3, #28]
 8003a6e:	e005      	b.n	8003a7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fd fc9c 	bl	80013d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b00:	ea42 0103 	orr.w	r1, r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	0c1b      	lsrs	r3, r3, #16
 8003b1a:	f003 0104 	and.w	r1, r3, #4
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	f003 0210 	and.w	r2, r3, #16
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b088      	sub	sp, #32
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	603b      	str	r3, [r7, #0]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <HAL_SPI_Transmit+0x22>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e126      	b.n	8003dc6 <HAL_SPI_Transmit+0x270>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b80:	f7fe f810 	bl	8001ba4 <HAL_GetTick>
 8003b84:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d002      	beq.n	8003b9c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b96:	2302      	movs	r3, #2
 8003b98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b9a:	e10b      	b.n	8003db4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_SPI_Transmit+0x52>
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d102      	bne.n	8003bae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bac:	e102      	b.n	8003db4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	88fa      	ldrh	r2, [r7, #6]
 8003bc6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	88fa      	ldrh	r2, [r7, #6]
 8003bcc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf4:	d10f      	bne.n	8003c16 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d007      	beq.n	8003c34 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c3c:	d14b      	bne.n	8003cd6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_SPI_Transmit+0xf6>
 8003c46:	8afb      	ldrh	r3, [r7, #22]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d13e      	bne.n	8003cca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	881a      	ldrh	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	1c9a      	adds	r2, r3, #2
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c70:	e02b      	b.n	8003cca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d112      	bne.n	8003ca6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c84:	881a      	ldrh	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c90:	1c9a      	adds	r2, r3, #2
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ca4:	e011      	b.n	8003cca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ca6:	f7fd ff7d 	bl	8001ba4 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d803      	bhi.n	8003cbe <HAL_SPI_Transmit+0x168>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbc:	d102      	bne.n	8003cc4 <HAL_SPI_Transmit+0x16e>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d102      	bne.n	8003cca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cc8:	e074      	b.n	8003db4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1ce      	bne.n	8003c72 <HAL_SPI_Transmit+0x11c>
 8003cd4:	e04c      	b.n	8003d70 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_SPI_Transmit+0x18e>
 8003cde:	8afb      	ldrh	r3, [r7, #22]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d140      	bne.n	8003d66 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	7812      	ldrb	r2, [r2, #0]
 8003cf0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d0a:	e02c      	b.n	8003d66 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d113      	bne.n	8003d42 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	330c      	adds	r3, #12
 8003d24:	7812      	ldrb	r2, [r2, #0]
 8003d26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d40:	e011      	b.n	8003d66 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d42:	f7fd ff2f 	bl	8001ba4 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d803      	bhi.n	8003d5a <HAL_SPI_Transmit+0x204>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d102      	bne.n	8003d60 <HAL_SPI_Transmit+0x20a>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d102      	bne.n	8003d66 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d64:	e026      	b.n	8003db4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1cd      	bne.n	8003d0c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	6839      	ldr	r1, [r7, #0]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f8b3 	bl	8003ee0 <SPI_EndRxTxTransaction>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10a      	bne.n	8003da4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e000      	b.n	8003db4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003db2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003dc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3720      	adds	r7, #32
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003de0:	f7fd fee0 	bl	8001ba4 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	4413      	add	r3, r2
 8003dee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003df0:	f7fd fed8 	bl	8001ba4 <HAL_GetTick>
 8003df4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003df6:	4b39      	ldr	r3, [pc, #228]	; (8003edc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	015b      	lsls	r3, r3, #5
 8003dfc:	0d1b      	lsrs	r3, r3, #20
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	fb02 f303 	mul.w	r3, r2, r3
 8003e04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e06:	e054      	b.n	8003eb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0e:	d050      	beq.n	8003eb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e10:	f7fd fec8 	bl	8001ba4 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d902      	bls.n	8003e26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d13d      	bne.n	8003ea2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3e:	d111      	bne.n	8003e64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e48:	d004      	beq.n	8003e54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e52:	d107      	bne.n	8003e64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e6c:	d10f      	bne.n	8003e8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e017      	b.n	8003ed2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	bf0c      	ite	eq
 8003ec2:	2301      	moveq	r3, #1
 8003ec4:	2300      	movne	r3, #0
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d19b      	bne.n	8003e08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3720      	adds	r7, #32
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20000000 	.word	0x20000000

08003ee0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003eec:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <SPI_EndRxTxTransaction+0x7c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a1b      	ldr	r2, [pc, #108]	; (8003f60 <SPI_EndRxTxTransaction+0x80>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	0d5b      	lsrs	r3, r3, #21
 8003ef8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003efc:	fb02 f303 	mul.w	r3, r2, r3
 8003f00:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f0a:	d112      	bne.n	8003f32 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2200      	movs	r2, #0
 8003f14:	2180      	movs	r1, #128	; 0x80
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f7ff ff5a 	bl	8003dd0 <SPI_WaitFlagStateUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d016      	beq.n	8003f50 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f26:	f043 0220 	orr.w	r2, r3, #32
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e00f      	b.n	8003f52 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f48:	2b80      	cmp	r3, #128	; 0x80
 8003f4a:	d0f2      	beq.n	8003f32 <SPI_EndRxTxTransaction+0x52>
 8003f4c:	e000      	b.n	8003f50 <SPI_EndRxTxTransaction+0x70>
        break;
 8003f4e:	bf00      	nop
  }

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000000 	.word	0x20000000
 8003f60:	165e9f81 	.word	0x165e9f81

08003f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e041      	b.n	8003ffa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fd fc90 	bl	80018b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f000 fc7a 	bl	800489c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d001      	beq.n	800401c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e04e      	b.n	80040ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a23      	ldr	r2, [pc, #140]	; (80040c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d022      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004046:	d01d      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a1f      	ldr	r2, [pc, #124]	; (80040cc <HAL_TIM_Base_Start_IT+0xc8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d018      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a1e      	ldr	r2, [pc, #120]	; (80040d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d013      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1c      	ldr	r2, [pc, #112]	; (80040d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00e      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1b      	ldr	r2, [pc, #108]	; (80040d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d009      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a19      	ldr	r2, [pc, #100]	; (80040dc <HAL_TIM_Base_Start_IT+0xd8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d111      	bne.n	80040a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b06      	cmp	r3, #6
 8004094:	d010      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0201 	orr.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a6:	e007      	b.n	80040b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40000400 	.word	0x40000400
 80040d0:	40000800 	.word	0x40000800
 80040d4:	40000c00 	.word	0x40000c00
 80040d8:	40010400 	.word	0x40010400
 80040dc:	40014000 	.word	0x40014000
 80040e0:	40001800 	.word	0x40001800

080040e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e041      	b.n	800417a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f839 	bl	8004182 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3304      	adds	r3, #4
 8004120:	4619      	mov	r1, r3
 8004122:	4610      	mov	r0, r2
 8004124:	f000 fbba 	bl	800489c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d109      	bne.n	80041bc <HAL_TIM_PWM_Start+0x24>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	bf14      	ite	ne
 80041b4:	2301      	movne	r3, #1
 80041b6:	2300      	moveq	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	e022      	b.n	8004202 <HAL_TIM_PWM_Start+0x6a>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d109      	bne.n	80041d6 <HAL_TIM_PWM_Start+0x3e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	bf14      	ite	ne
 80041ce:	2301      	movne	r3, #1
 80041d0:	2300      	moveq	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	e015      	b.n	8004202 <HAL_TIM_PWM_Start+0x6a>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d109      	bne.n	80041f0 <HAL_TIM_PWM_Start+0x58>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	bf14      	ite	ne
 80041e8:	2301      	movne	r3, #1
 80041ea:	2300      	moveq	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	e008      	b.n	8004202 <HAL_TIM_PWM_Start+0x6a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	bf14      	ite	ne
 80041fc:	2301      	movne	r3, #1
 80041fe:	2300      	moveq	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e07c      	b.n	8004304 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d104      	bne.n	800421a <HAL_TIM_PWM_Start+0x82>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004218:	e013      	b.n	8004242 <HAL_TIM_PWM_Start+0xaa>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d104      	bne.n	800422a <HAL_TIM_PWM_Start+0x92>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004228:	e00b      	b.n	8004242 <HAL_TIM_PWM_Start+0xaa>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b08      	cmp	r3, #8
 800422e:	d104      	bne.n	800423a <HAL_TIM_PWM_Start+0xa2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004238:	e003      	b.n	8004242 <HAL_TIM_PWM_Start+0xaa>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2202      	movs	r2, #2
 800423e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2201      	movs	r2, #1
 8004248:	6839      	ldr	r1, [r7, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fe10 	bl	8004e70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a2d      	ldr	r2, [pc, #180]	; (800430c <HAL_TIM_PWM_Start+0x174>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d004      	beq.n	8004264 <HAL_TIM_PWM_Start+0xcc>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2c      	ldr	r2, [pc, #176]	; (8004310 <HAL_TIM_PWM_Start+0x178>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d101      	bne.n	8004268 <HAL_TIM_PWM_Start+0xd0>
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <HAL_TIM_PWM_Start+0xd2>
 8004268:	2300      	movs	r3, #0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d007      	beq.n	800427e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800427c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a22      	ldr	r2, [pc, #136]	; (800430c <HAL_TIM_PWM_Start+0x174>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d022      	beq.n	80042ce <HAL_TIM_PWM_Start+0x136>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004290:	d01d      	beq.n	80042ce <HAL_TIM_PWM_Start+0x136>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1f      	ldr	r2, [pc, #124]	; (8004314 <HAL_TIM_PWM_Start+0x17c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d018      	beq.n	80042ce <HAL_TIM_PWM_Start+0x136>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a1d      	ldr	r2, [pc, #116]	; (8004318 <HAL_TIM_PWM_Start+0x180>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d013      	beq.n	80042ce <HAL_TIM_PWM_Start+0x136>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1c      	ldr	r2, [pc, #112]	; (800431c <HAL_TIM_PWM_Start+0x184>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00e      	beq.n	80042ce <HAL_TIM_PWM_Start+0x136>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a16      	ldr	r2, [pc, #88]	; (8004310 <HAL_TIM_PWM_Start+0x178>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d009      	beq.n	80042ce <HAL_TIM_PWM_Start+0x136>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a18      	ldr	r2, [pc, #96]	; (8004320 <HAL_TIM_PWM_Start+0x188>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d004      	beq.n	80042ce <HAL_TIM_PWM_Start+0x136>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a16      	ldr	r2, [pc, #88]	; (8004324 <HAL_TIM_PWM_Start+0x18c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d111      	bne.n	80042f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b06      	cmp	r3, #6
 80042de:	d010      	beq.n	8004302 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f0:	e007      	b.n	8004302 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0201 	orr.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40010000 	.word	0x40010000
 8004310:	40010400 	.word	0x40010400
 8004314:	40000400 	.word	0x40000400
 8004318:	40000800 	.word	0x40000800
 800431c:	40000c00 	.word	0x40000c00
 8004320:	40014000 	.word	0x40014000
 8004324:	40001800 	.word	0x40001800

08004328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b02      	cmp	r3, #2
 800433c:	d122      	bne.n	8004384 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b02      	cmp	r3, #2
 800434a:	d11b      	bne.n	8004384 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0202 	mvn.w	r2, #2
 8004354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fa77 	bl	800485e <HAL_TIM_IC_CaptureCallback>
 8004370:	e005      	b.n	800437e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fa69 	bl	800484a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fa7a 	bl	8004872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b04      	cmp	r3, #4
 8004390:	d122      	bne.n	80043d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b04      	cmp	r3, #4
 800439e:	d11b      	bne.n	80043d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0204 	mvn.w	r2, #4
 80043a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2202      	movs	r2, #2
 80043ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fa4d 	bl	800485e <HAL_TIM_IC_CaptureCallback>
 80043c4:	e005      	b.n	80043d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fa3f 	bl	800484a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fa50 	bl	8004872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d122      	bne.n	800442c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d11b      	bne.n	800442c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0208 	mvn.w	r2, #8
 80043fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2204      	movs	r2, #4
 8004402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fa23 	bl	800485e <HAL_TIM_IC_CaptureCallback>
 8004418:	e005      	b.n	8004426 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fa15 	bl	800484a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fa26 	bl	8004872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2b10      	cmp	r3, #16
 8004438:	d122      	bne.n	8004480 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2b10      	cmp	r3, #16
 8004446:	d11b      	bne.n	8004480 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0210 	mvn.w	r2, #16
 8004450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2208      	movs	r2, #8
 8004456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f9f9 	bl	800485e <HAL_TIM_IC_CaptureCallback>
 800446c:	e005      	b.n	800447a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f9eb 	bl	800484a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f9fc 	bl	8004872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	d10e      	bne.n	80044ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b01      	cmp	r3, #1
 800449a:	d107      	bne.n	80044ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0201 	mvn.w	r2, #1
 80044a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7fc ff10 	bl	80012cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b6:	2b80      	cmp	r3, #128	; 0x80
 80044b8:	d10e      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c4:	2b80      	cmp	r3, #128	; 0x80
 80044c6:	d107      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fdca 	bl	800506c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b40      	cmp	r3, #64	; 0x40
 80044e4:	d10e      	bne.n	8004504 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f0:	2b40      	cmp	r3, #64	; 0x40
 80044f2:	d107      	bne.n	8004504 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f9c1 	bl	8004886 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b20      	cmp	r3, #32
 8004510:	d10e      	bne.n	8004530 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b20      	cmp	r3, #32
 800451e:	d107      	bne.n	8004530 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0220 	mvn.w	r2, #32
 8004528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fd94 	bl	8005058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004530:	bf00      	nop
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800454e:	2b01      	cmp	r3, #1
 8004550:	d101      	bne.n	8004556 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004552:	2302      	movs	r3, #2
 8004554:	e0ae      	b.n	80046b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b0c      	cmp	r3, #12
 8004562:	f200 809f 	bhi.w	80046a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004566:	a201      	add	r2, pc, #4	; (adr r2, 800456c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456c:	080045a1 	.word	0x080045a1
 8004570:	080046a5 	.word	0x080046a5
 8004574:	080046a5 	.word	0x080046a5
 8004578:	080046a5 	.word	0x080046a5
 800457c:	080045e1 	.word	0x080045e1
 8004580:	080046a5 	.word	0x080046a5
 8004584:	080046a5 	.word	0x080046a5
 8004588:	080046a5 	.word	0x080046a5
 800458c:	08004623 	.word	0x08004623
 8004590:	080046a5 	.word	0x080046a5
 8004594:	080046a5 	.word	0x080046a5
 8004598:	080046a5 	.word	0x080046a5
 800459c:	08004663 	.word	0x08004663
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fa18 	bl	80049dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0208 	orr.w	r2, r2, #8
 80045ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0204 	bic.w	r2, r2, #4
 80045ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6999      	ldr	r1, [r3, #24]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	619a      	str	r2, [r3, #24]
      break;
 80045de:	e064      	b.n	80046aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68b9      	ldr	r1, [r7, #8]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fa68 	bl	8004abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699a      	ldr	r2, [r3, #24]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6999      	ldr	r1, [r3, #24]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	021a      	lsls	r2, r3, #8
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	619a      	str	r2, [r3, #24]
      break;
 8004620:	e043      	b.n	80046aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fabd 	bl	8004ba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69da      	ldr	r2, [r3, #28]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0208 	orr.w	r2, r2, #8
 800463c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0204 	bic.w	r2, r2, #4
 800464c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69d9      	ldr	r1, [r3, #28]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	61da      	str	r2, [r3, #28]
      break;
 8004660:	e023      	b.n	80046aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fb11 	bl	8004c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800467c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69da      	ldr	r2, [r3, #28]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800468c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69d9      	ldr	r1, [r3, #28]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	021a      	lsls	r2, r3, #8
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	61da      	str	r2, [r3, #28]
      break;
 80046a2:	e002      	b.n	80046aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	75fb      	strb	r3, [r7, #23]
      break;
 80046a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_TIM_ConfigClockSource+0x1c>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e0b4      	b.n	8004842 <HAL_TIM_ConfigClockSource+0x186>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004710:	d03e      	beq.n	8004790 <HAL_TIM_ConfigClockSource+0xd4>
 8004712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004716:	f200 8087 	bhi.w	8004828 <HAL_TIM_ConfigClockSource+0x16c>
 800471a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800471e:	f000 8086 	beq.w	800482e <HAL_TIM_ConfigClockSource+0x172>
 8004722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004726:	d87f      	bhi.n	8004828 <HAL_TIM_ConfigClockSource+0x16c>
 8004728:	2b70      	cmp	r3, #112	; 0x70
 800472a:	d01a      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0xa6>
 800472c:	2b70      	cmp	r3, #112	; 0x70
 800472e:	d87b      	bhi.n	8004828 <HAL_TIM_ConfigClockSource+0x16c>
 8004730:	2b60      	cmp	r3, #96	; 0x60
 8004732:	d050      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x11a>
 8004734:	2b60      	cmp	r3, #96	; 0x60
 8004736:	d877      	bhi.n	8004828 <HAL_TIM_ConfigClockSource+0x16c>
 8004738:	2b50      	cmp	r3, #80	; 0x50
 800473a:	d03c      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0xfa>
 800473c:	2b50      	cmp	r3, #80	; 0x50
 800473e:	d873      	bhi.n	8004828 <HAL_TIM_ConfigClockSource+0x16c>
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d058      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0x13a>
 8004744:	2b40      	cmp	r3, #64	; 0x40
 8004746:	d86f      	bhi.n	8004828 <HAL_TIM_ConfigClockSource+0x16c>
 8004748:	2b30      	cmp	r3, #48	; 0x30
 800474a:	d064      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x15a>
 800474c:	2b30      	cmp	r3, #48	; 0x30
 800474e:	d86b      	bhi.n	8004828 <HAL_TIM_ConfigClockSource+0x16c>
 8004750:	2b20      	cmp	r3, #32
 8004752:	d060      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x15a>
 8004754:	2b20      	cmp	r3, #32
 8004756:	d867      	bhi.n	8004828 <HAL_TIM_ConfigClockSource+0x16c>
 8004758:	2b00      	cmp	r3, #0
 800475a:	d05c      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x15a>
 800475c:	2b10      	cmp	r3, #16
 800475e:	d05a      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x15a>
 8004760:	e062      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6899      	ldr	r1, [r3, #8]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f000 fb5d 	bl	8004e30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004784:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	609a      	str	r2, [r3, #8]
      break;
 800478e:	e04f      	b.n	8004830 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	6899      	ldr	r1, [r3, #8]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f000 fb46 	bl	8004e30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047b2:	609a      	str	r2, [r3, #8]
      break;
 80047b4:	e03c      	b.n	8004830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6859      	ldr	r1, [r3, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	461a      	mov	r2, r3
 80047c4:	f000 faba 	bl	8004d3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2150      	movs	r1, #80	; 0x50
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fb13 	bl	8004dfa <TIM_ITRx_SetConfig>
      break;
 80047d4:	e02c      	b.n	8004830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6859      	ldr	r1, [r3, #4]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	461a      	mov	r2, r3
 80047e4:	f000 fad9 	bl	8004d9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2160      	movs	r1, #96	; 0x60
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fb03 	bl	8004dfa <TIM_ITRx_SetConfig>
      break;
 80047f4:	e01c      	b.n	8004830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6859      	ldr	r1, [r3, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	461a      	mov	r2, r3
 8004804:	f000 fa9a 	bl	8004d3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2140      	movs	r1, #64	; 0x40
 800480e:	4618      	mov	r0, r3
 8004810:	f000 faf3 	bl	8004dfa <TIM_ITRx_SetConfig>
      break;
 8004814:	e00c      	b.n	8004830 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4619      	mov	r1, r3
 8004820:	4610      	mov	r0, r2
 8004822:	f000 faea 	bl	8004dfa <TIM_ITRx_SetConfig>
      break;
 8004826:	e003      	b.n	8004830 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
      break;
 800482c:	e000      	b.n	8004830 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800482e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004840:	7bfb      	ldrb	r3, [r7, #15]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a40      	ldr	r2, [pc, #256]	; (80049b0 <TIM_Base_SetConfig+0x114>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d013      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ba:	d00f      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3d      	ldr	r2, [pc, #244]	; (80049b4 <TIM_Base_SetConfig+0x118>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00b      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3c      	ldr	r2, [pc, #240]	; (80049b8 <TIM_Base_SetConfig+0x11c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d007      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3b      	ldr	r2, [pc, #236]	; (80049bc <TIM_Base_SetConfig+0x120>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d003      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a3a      	ldr	r2, [pc, #232]	; (80049c0 <TIM_Base_SetConfig+0x124>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d108      	bne.n	80048ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2f      	ldr	r2, [pc, #188]	; (80049b0 <TIM_Base_SetConfig+0x114>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d02b      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fc:	d027      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2c      	ldr	r2, [pc, #176]	; (80049b4 <TIM_Base_SetConfig+0x118>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d023      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2b      	ldr	r2, [pc, #172]	; (80049b8 <TIM_Base_SetConfig+0x11c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01f      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2a      	ldr	r2, [pc, #168]	; (80049bc <TIM_Base_SetConfig+0x120>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01b      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a29      	ldr	r2, [pc, #164]	; (80049c0 <TIM_Base_SetConfig+0x124>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d017      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a28      	ldr	r2, [pc, #160]	; (80049c4 <TIM_Base_SetConfig+0x128>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a27      	ldr	r2, [pc, #156]	; (80049c8 <TIM_Base_SetConfig+0x12c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00f      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a26      	ldr	r2, [pc, #152]	; (80049cc <TIM_Base_SetConfig+0x130>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00b      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a25      	ldr	r2, [pc, #148]	; (80049d0 <TIM_Base_SetConfig+0x134>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d007      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a24      	ldr	r2, [pc, #144]	; (80049d4 <TIM_Base_SetConfig+0x138>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d003      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a23      	ldr	r2, [pc, #140]	; (80049d8 <TIM_Base_SetConfig+0x13c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d108      	bne.n	8004960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a0a      	ldr	r2, [pc, #40]	; (80049b0 <TIM_Base_SetConfig+0x114>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_Base_SetConfig+0xf8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a0c      	ldr	r2, [pc, #48]	; (80049c0 <TIM_Base_SetConfig+0x124>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d103      	bne.n	800499c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	615a      	str	r2, [r3, #20]
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40010000 	.word	0x40010000
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40000c00 	.word	0x40000c00
 80049c0:	40010400 	.word	0x40010400
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800
 80049d0:	40001800 	.word	0x40001800
 80049d4:	40001c00 	.word	0x40001c00
 80049d8:	40002000 	.word	0x40002000

080049dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f023 0201 	bic.w	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0303 	bic.w	r3, r3, #3
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f023 0302 	bic.w	r3, r3, #2
 8004a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a20      	ldr	r2, [pc, #128]	; (8004ab4 <TIM_OC1_SetConfig+0xd8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d003      	beq.n	8004a40 <TIM_OC1_SetConfig+0x64>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a1f      	ldr	r2, [pc, #124]	; (8004ab8 <TIM_OC1_SetConfig+0xdc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d10c      	bne.n	8004a5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f023 0308 	bic.w	r3, r3, #8
 8004a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f023 0304 	bic.w	r3, r3, #4
 8004a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a15      	ldr	r2, [pc, #84]	; (8004ab4 <TIM_OC1_SetConfig+0xd8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d003      	beq.n	8004a6a <TIM_OC1_SetConfig+0x8e>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a14      	ldr	r2, [pc, #80]	; (8004ab8 <TIM_OC1_SetConfig+0xdc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d111      	bne.n	8004a8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	621a      	str	r2, [r3, #32]
}
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	40010400 	.word	0x40010400

08004abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	f023 0210 	bic.w	r2, r3, #16
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	021b      	lsls	r3, r3, #8
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f023 0320 	bic.w	r3, r3, #32
 8004b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a22      	ldr	r2, [pc, #136]	; (8004ba0 <TIM_OC2_SetConfig+0xe4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d003      	beq.n	8004b24 <TIM_OC2_SetConfig+0x68>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a21      	ldr	r2, [pc, #132]	; (8004ba4 <TIM_OC2_SetConfig+0xe8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d10d      	bne.n	8004b40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <TIM_OC2_SetConfig+0xe4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d003      	beq.n	8004b50 <TIM_OC2_SetConfig+0x94>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a16      	ldr	r2, [pc, #88]	; (8004ba4 <TIM_OC2_SetConfig+0xe8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d113      	bne.n	8004b78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	621a      	str	r2, [r3, #32]
}
 8004b92:	bf00      	nop
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	40010400 	.word	0x40010400

08004ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0303 	bic.w	r3, r3, #3
 8004bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	021b      	lsls	r3, r3, #8
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a21      	ldr	r2, [pc, #132]	; (8004c88 <TIM_OC3_SetConfig+0xe0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d003      	beq.n	8004c0e <TIM_OC3_SetConfig+0x66>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a20      	ldr	r2, [pc, #128]	; (8004c8c <TIM_OC3_SetConfig+0xe4>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d10d      	bne.n	8004c2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	021b      	lsls	r3, r3, #8
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a16      	ldr	r2, [pc, #88]	; (8004c88 <TIM_OC3_SetConfig+0xe0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d003      	beq.n	8004c3a <TIM_OC3_SetConfig+0x92>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <TIM_OC3_SetConfig+0xe4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d113      	bne.n	8004c62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	621a      	str	r2, [r3, #32]
}
 8004c7c:	bf00      	nop
 8004c7e:	371c      	adds	r7, #28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	40010400 	.word	0x40010400

08004c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	021b      	lsls	r3, r3, #8
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	031b      	lsls	r3, r3, #12
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a12      	ldr	r2, [pc, #72]	; (8004d34 <TIM_OC4_SetConfig+0xa4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d003      	beq.n	8004cf8 <TIM_OC4_SetConfig+0x68>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a11      	ldr	r2, [pc, #68]	; (8004d38 <TIM_OC4_SetConfig+0xa8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d109      	bne.n	8004d0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	019b      	lsls	r3, r3, #6
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40010400 	.word	0x40010400

08004d3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	f023 0201 	bic.w	r2, r3, #1
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f023 030a 	bic.w	r3, r3, #10
 8004d78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	621a      	str	r2, [r3, #32]
}
 8004d8e:	bf00      	nop
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b087      	sub	sp, #28
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f023 0210 	bic.w	r2, r3, #16
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	031b      	lsls	r3, r3, #12
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	621a      	str	r2, [r3, #32]
}
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f043 0307 	orr.w	r3, r3, #7
 8004e1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	609a      	str	r2, [r3, #8]
}
 8004e24:	bf00      	nop
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	021a      	lsls	r2, r3, #8
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	609a      	str	r2, [r3, #8]
}
 8004e64:	bf00      	nop
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 031f 	and.w	r3, r3, #31
 8004e82:	2201      	movs	r2, #1
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a1a      	ldr	r2, [r3, #32]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	43db      	mvns	r3, r3
 8004e92:	401a      	ands	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a1a      	ldr	r2, [r3, #32]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f003 031f 	and.w	r3, r3, #31
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	621a      	str	r2, [r3, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
	...

08004ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e05a      	b.n	8004f8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a21      	ldr	r2, [pc, #132]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d022      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f20:	d01d      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1d      	ldr	r2, [pc, #116]	; (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1b      	ldr	r2, [pc, #108]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1a      	ldr	r2, [pc, #104]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a17      	ldr	r2, [pc, #92]	; (8004fac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a15      	ldr	r2, [pc, #84]	; (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d10c      	bne.n	8004f78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40010000 	.word	0x40010000
 8004f9c:	40000400 	.word	0x40000400
 8004fa0:	40000800 	.word	0x40000800
 8004fa4:	40000c00 	.word	0x40000c00
 8004fa8:	40010400 	.word	0x40010400
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40001800 	.word	0x40001800

08004fb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e03d      	b.n	800504c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4313      	orrs	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e03f      	b.n	8005112 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fc fca4 	bl	80019f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2224      	movs	r2, #36	; 0x24
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f929 	bl	800531c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695a      	ldr	r2, [r3, #20]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b08a      	sub	sp, #40	; 0x28
 800511e:	af02      	add	r7, sp, #8
 8005120:	60f8      	str	r0, [r7, #12]
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	603b      	str	r3, [r7, #0]
 8005126:	4613      	mov	r3, r2
 8005128:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b20      	cmp	r3, #32
 8005138:	d17c      	bne.n	8005234 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <HAL_UART_Transmit+0x2c>
 8005140:	88fb      	ldrh	r3, [r7, #6]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e075      	b.n	8005236 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005150:	2b01      	cmp	r3, #1
 8005152:	d101      	bne.n	8005158 <HAL_UART_Transmit+0x3e>
 8005154:	2302      	movs	r3, #2
 8005156:	e06e      	b.n	8005236 <HAL_UART_Transmit+0x11c>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2221      	movs	r2, #33	; 0x21
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800516e:	f7fc fd19 	bl	8001ba4 <HAL_GetTick>
 8005172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	88fa      	ldrh	r2, [r7, #6]
 8005178:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	88fa      	ldrh	r2, [r7, #6]
 800517e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005188:	d108      	bne.n	800519c <HAL_UART_Transmit+0x82>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d104      	bne.n	800519c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005192:	2300      	movs	r3, #0
 8005194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	61bb      	str	r3, [r7, #24]
 800519a:	e003      	b.n	80051a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051a0:	2300      	movs	r3, #0
 80051a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80051ac:	e02a      	b.n	8005204 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2200      	movs	r2, #0
 80051b6:	2180      	movs	r1, #128	; 0x80
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f840 	bl	800523e <UART_WaitOnFlagUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e036      	b.n	8005236 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10b      	bne.n	80051e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	3302      	adds	r3, #2
 80051e2:	61bb      	str	r3, [r7, #24]
 80051e4:	e007      	b.n	80051f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	781a      	ldrb	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	3301      	adds	r3, #1
 80051f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1cf      	bne.n	80051ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2200      	movs	r2, #0
 8005216:	2140      	movs	r1, #64	; 0x40
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f810 	bl	800523e <UART_WaitOnFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e006      	b.n	8005236 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	e000      	b.n	8005236 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005234:	2302      	movs	r3, #2
  }
}
 8005236:	4618      	mov	r0, r3
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b090      	sub	sp, #64	; 0x40
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	603b      	str	r3, [r7, #0]
 800524a:	4613      	mov	r3, r2
 800524c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800524e:	e050      	b.n	80052f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005256:	d04c      	beq.n	80052f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800525a:	2b00      	cmp	r3, #0
 800525c:	d007      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0x30>
 800525e:	f7fc fca1 	bl	8001ba4 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800526a:	429a      	cmp	r2, r3
 800526c:	d241      	bcs.n	80052f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	330c      	adds	r3, #12
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	330c      	adds	r3, #12
 800528c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800528e:	637a      	str	r2, [r7, #52]	; 0x34
 8005290:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005294:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005296:	e841 2300 	strex	r3, r2, [r1]
 800529a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800529c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e5      	bne.n	800526e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3314      	adds	r3, #20
 80052a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	613b      	str	r3, [r7, #16]
   return(result);
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f023 0301 	bic.w	r3, r3, #1
 80052b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3314      	adds	r3, #20
 80052c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052c2:	623a      	str	r2, [r7, #32]
 80052c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c6:	69f9      	ldr	r1, [r7, #28]
 80052c8:	6a3a      	ldr	r2, [r7, #32]
 80052ca:	e841 2300 	strex	r3, r2, [r1]
 80052ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1e5      	bne.n	80052a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e00f      	b.n	8005312 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4013      	ands	r3, r2
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	429a      	cmp	r2, r3
 8005300:	bf0c      	ite	eq
 8005302:	2301      	moveq	r3, #1
 8005304:	2300      	movne	r3, #0
 8005306:	b2db      	uxtb	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	429a      	cmp	r2, r3
 800530e:	d09f      	beq.n	8005250 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3740      	adds	r7, #64	; 0x40
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800531c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005320:	b0c0      	sub	sp, #256	; 0x100
 8005322:	af00      	add	r7, sp, #0
 8005324:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005338:	68d9      	ldr	r1, [r3, #12]
 800533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	ea40 0301 	orr.w	r3, r0, r1
 8005344:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	431a      	orrs	r2, r3
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	431a      	orrs	r2, r3
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005374:	f021 010c 	bic.w	r1, r1, #12
 8005378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005382:	430b      	orrs	r3, r1
 8005384:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005396:	6999      	ldr	r1, [r3, #24]
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	ea40 0301 	orr.w	r3, r0, r1
 80053a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	4b8f      	ldr	r3, [pc, #572]	; (80055e8 <UART_SetConfig+0x2cc>)
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d005      	beq.n	80053bc <UART_SetConfig+0xa0>
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4b8d      	ldr	r3, [pc, #564]	; (80055ec <UART_SetConfig+0x2d0>)
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d104      	bne.n	80053c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053bc:	f7fe fb2e 	bl	8003a1c <HAL_RCC_GetPCLK2Freq>
 80053c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053c4:	e003      	b.n	80053ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053c6:	f7fe fb15 	bl	80039f4 <HAL_RCC_GetPCLK1Freq>
 80053ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d8:	f040 810c 	bne.w	80055f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053ee:	4622      	mov	r2, r4
 80053f0:	462b      	mov	r3, r5
 80053f2:	1891      	adds	r1, r2, r2
 80053f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80053f6:	415b      	adcs	r3, r3
 80053f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053fe:	4621      	mov	r1, r4
 8005400:	eb12 0801 	adds.w	r8, r2, r1
 8005404:	4629      	mov	r1, r5
 8005406:	eb43 0901 	adc.w	r9, r3, r1
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	f04f 0300 	mov.w	r3, #0
 8005412:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005416:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800541a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800541e:	4690      	mov	r8, r2
 8005420:	4699      	mov	r9, r3
 8005422:	4623      	mov	r3, r4
 8005424:	eb18 0303 	adds.w	r3, r8, r3
 8005428:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800542c:	462b      	mov	r3, r5
 800542e:	eb49 0303 	adc.w	r3, r9, r3
 8005432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005442:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005446:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800544a:	460b      	mov	r3, r1
 800544c:	18db      	adds	r3, r3, r3
 800544e:	653b      	str	r3, [r7, #80]	; 0x50
 8005450:	4613      	mov	r3, r2
 8005452:	eb42 0303 	adc.w	r3, r2, r3
 8005456:	657b      	str	r3, [r7, #84]	; 0x54
 8005458:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800545c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005460:	f7fb fbf2 	bl	8000c48 <__aeabi_uldivmod>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4b61      	ldr	r3, [pc, #388]	; (80055f0 <UART_SetConfig+0x2d4>)
 800546a:	fba3 2302 	umull	r2, r3, r3, r2
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	011c      	lsls	r4, r3, #4
 8005472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005476:	2200      	movs	r2, #0
 8005478:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800547c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005480:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005484:	4642      	mov	r2, r8
 8005486:	464b      	mov	r3, r9
 8005488:	1891      	adds	r1, r2, r2
 800548a:	64b9      	str	r1, [r7, #72]	; 0x48
 800548c:	415b      	adcs	r3, r3
 800548e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005490:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005494:	4641      	mov	r1, r8
 8005496:	eb12 0a01 	adds.w	sl, r2, r1
 800549a:	4649      	mov	r1, r9
 800549c:	eb43 0b01 	adc.w	fp, r3, r1
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054b4:	4692      	mov	sl, r2
 80054b6:	469b      	mov	fp, r3
 80054b8:	4643      	mov	r3, r8
 80054ba:	eb1a 0303 	adds.w	r3, sl, r3
 80054be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054c2:	464b      	mov	r3, r9
 80054c4:	eb4b 0303 	adc.w	r3, fp, r3
 80054c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054e0:	460b      	mov	r3, r1
 80054e2:	18db      	adds	r3, r3, r3
 80054e4:	643b      	str	r3, [r7, #64]	; 0x40
 80054e6:	4613      	mov	r3, r2
 80054e8:	eb42 0303 	adc.w	r3, r2, r3
 80054ec:	647b      	str	r3, [r7, #68]	; 0x44
 80054ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054f6:	f7fb fba7 	bl	8000c48 <__aeabi_uldivmod>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4611      	mov	r1, r2
 8005500:	4b3b      	ldr	r3, [pc, #236]	; (80055f0 <UART_SetConfig+0x2d4>)
 8005502:	fba3 2301 	umull	r2, r3, r3, r1
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	2264      	movs	r2, #100	; 0x64
 800550a:	fb02 f303 	mul.w	r3, r2, r3
 800550e:	1acb      	subs	r3, r1, r3
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005516:	4b36      	ldr	r3, [pc, #216]	; (80055f0 <UART_SetConfig+0x2d4>)
 8005518:	fba3 2302 	umull	r2, r3, r3, r2
 800551c:	095b      	lsrs	r3, r3, #5
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005524:	441c      	add	r4, r3
 8005526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800552a:	2200      	movs	r2, #0
 800552c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005530:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005534:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005538:	4642      	mov	r2, r8
 800553a:	464b      	mov	r3, r9
 800553c:	1891      	adds	r1, r2, r2
 800553e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005540:	415b      	adcs	r3, r3
 8005542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005544:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005548:	4641      	mov	r1, r8
 800554a:	1851      	adds	r1, r2, r1
 800554c:	6339      	str	r1, [r7, #48]	; 0x30
 800554e:	4649      	mov	r1, r9
 8005550:	414b      	adcs	r3, r1
 8005552:	637b      	str	r3, [r7, #52]	; 0x34
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005560:	4659      	mov	r1, fp
 8005562:	00cb      	lsls	r3, r1, #3
 8005564:	4651      	mov	r1, sl
 8005566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800556a:	4651      	mov	r1, sl
 800556c:	00ca      	lsls	r2, r1, #3
 800556e:	4610      	mov	r0, r2
 8005570:	4619      	mov	r1, r3
 8005572:	4603      	mov	r3, r0
 8005574:	4642      	mov	r2, r8
 8005576:	189b      	adds	r3, r3, r2
 8005578:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800557c:	464b      	mov	r3, r9
 800557e:	460a      	mov	r2, r1
 8005580:	eb42 0303 	adc.w	r3, r2, r3
 8005584:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005594:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005598:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800559c:	460b      	mov	r3, r1
 800559e:	18db      	adds	r3, r3, r3
 80055a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a2:	4613      	mov	r3, r2
 80055a4:	eb42 0303 	adc.w	r3, r2, r3
 80055a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055b2:	f7fb fb49 	bl	8000c48 <__aeabi_uldivmod>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <UART_SetConfig+0x2d4>)
 80055bc:	fba3 1302 	umull	r1, r3, r3, r2
 80055c0:	095b      	lsrs	r3, r3, #5
 80055c2:	2164      	movs	r1, #100	; 0x64
 80055c4:	fb01 f303 	mul.w	r3, r1, r3
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	3332      	adds	r3, #50	; 0x32
 80055ce:	4a08      	ldr	r2, [pc, #32]	; (80055f0 <UART_SetConfig+0x2d4>)
 80055d0:	fba2 2303 	umull	r2, r3, r2, r3
 80055d4:	095b      	lsrs	r3, r3, #5
 80055d6:	f003 0207 	and.w	r2, r3, #7
 80055da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4422      	add	r2, r4
 80055e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055e4:	e105      	b.n	80057f2 <UART_SetConfig+0x4d6>
 80055e6:	bf00      	nop
 80055e8:	40011000 	.word	0x40011000
 80055ec:	40011400 	.word	0x40011400
 80055f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055f8:	2200      	movs	r2, #0
 80055fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005602:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005606:	4642      	mov	r2, r8
 8005608:	464b      	mov	r3, r9
 800560a:	1891      	adds	r1, r2, r2
 800560c:	6239      	str	r1, [r7, #32]
 800560e:	415b      	adcs	r3, r3
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
 8005612:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005616:	4641      	mov	r1, r8
 8005618:	1854      	adds	r4, r2, r1
 800561a:	4649      	mov	r1, r9
 800561c:	eb43 0501 	adc.w	r5, r3, r1
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	00eb      	lsls	r3, r5, #3
 800562a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800562e:	00e2      	lsls	r2, r4, #3
 8005630:	4614      	mov	r4, r2
 8005632:	461d      	mov	r5, r3
 8005634:	4643      	mov	r3, r8
 8005636:	18e3      	adds	r3, r4, r3
 8005638:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800563c:	464b      	mov	r3, r9
 800563e:	eb45 0303 	adc.w	r3, r5, r3
 8005642:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005652:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	f04f 0300 	mov.w	r3, #0
 800565e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005662:	4629      	mov	r1, r5
 8005664:	008b      	lsls	r3, r1, #2
 8005666:	4621      	mov	r1, r4
 8005668:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800566c:	4621      	mov	r1, r4
 800566e:	008a      	lsls	r2, r1, #2
 8005670:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005674:	f7fb fae8 	bl	8000c48 <__aeabi_uldivmod>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4b60      	ldr	r3, [pc, #384]	; (8005800 <UART_SetConfig+0x4e4>)
 800567e:	fba3 2302 	umull	r2, r3, r3, r2
 8005682:	095b      	lsrs	r3, r3, #5
 8005684:	011c      	lsls	r4, r3, #4
 8005686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800568a:	2200      	movs	r2, #0
 800568c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005690:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005694:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005698:	4642      	mov	r2, r8
 800569a:	464b      	mov	r3, r9
 800569c:	1891      	adds	r1, r2, r2
 800569e:	61b9      	str	r1, [r7, #24]
 80056a0:	415b      	adcs	r3, r3
 80056a2:	61fb      	str	r3, [r7, #28]
 80056a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056a8:	4641      	mov	r1, r8
 80056aa:	1851      	adds	r1, r2, r1
 80056ac:	6139      	str	r1, [r7, #16]
 80056ae:	4649      	mov	r1, r9
 80056b0:	414b      	adcs	r3, r1
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	f04f 0200 	mov.w	r2, #0
 80056b8:	f04f 0300 	mov.w	r3, #0
 80056bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056c0:	4659      	mov	r1, fp
 80056c2:	00cb      	lsls	r3, r1, #3
 80056c4:	4651      	mov	r1, sl
 80056c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ca:	4651      	mov	r1, sl
 80056cc:	00ca      	lsls	r2, r1, #3
 80056ce:	4610      	mov	r0, r2
 80056d0:	4619      	mov	r1, r3
 80056d2:	4603      	mov	r3, r0
 80056d4:	4642      	mov	r2, r8
 80056d6:	189b      	adds	r3, r3, r2
 80056d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056dc:	464b      	mov	r3, r9
 80056de:	460a      	mov	r2, r1
 80056e0:	eb42 0303 	adc.w	r3, r2, r3
 80056e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80056f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	f04f 0300 	mov.w	r3, #0
 80056fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005700:	4649      	mov	r1, r9
 8005702:	008b      	lsls	r3, r1, #2
 8005704:	4641      	mov	r1, r8
 8005706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800570a:	4641      	mov	r1, r8
 800570c:	008a      	lsls	r2, r1, #2
 800570e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005712:	f7fb fa99 	bl	8000c48 <__aeabi_uldivmod>
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	4b39      	ldr	r3, [pc, #228]	; (8005800 <UART_SetConfig+0x4e4>)
 800571c:	fba3 1302 	umull	r1, r3, r3, r2
 8005720:	095b      	lsrs	r3, r3, #5
 8005722:	2164      	movs	r1, #100	; 0x64
 8005724:	fb01 f303 	mul.w	r3, r1, r3
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	3332      	adds	r3, #50	; 0x32
 800572e:	4a34      	ldr	r2, [pc, #208]	; (8005800 <UART_SetConfig+0x4e4>)
 8005730:	fba2 2303 	umull	r2, r3, r2, r3
 8005734:	095b      	lsrs	r3, r3, #5
 8005736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800573a:	441c      	add	r4, r3
 800573c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005740:	2200      	movs	r2, #0
 8005742:	673b      	str	r3, [r7, #112]	; 0x70
 8005744:	677a      	str	r2, [r7, #116]	; 0x74
 8005746:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800574a:	4642      	mov	r2, r8
 800574c:	464b      	mov	r3, r9
 800574e:	1891      	adds	r1, r2, r2
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	415b      	adcs	r3, r3
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800575a:	4641      	mov	r1, r8
 800575c:	1851      	adds	r1, r2, r1
 800575e:	6039      	str	r1, [r7, #0]
 8005760:	4649      	mov	r1, r9
 8005762:	414b      	adcs	r3, r1
 8005764:	607b      	str	r3, [r7, #4]
 8005766:	f04f 0200 	mov.w	r2, #0
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005772:	4659      	mov	r1, fp
 8005774:	00cb      	lsls	r3, r1, #3
 8005776:	4651      	mov	r1, sl
 8005778:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800577c:	4651      	mov	r1, sl
 800577e:	00ca      	lsls	r2, r1, #3
 8005780:	4610      	mov	r0, r2
 8005782:	4619      	mov	r1, r3
 8005784:	4603      	mov	r3, r0
 8005786:	4642      	mov	r2, r8
 8005788:	189b      	adds	r3, r3, r2
 800578a:	66bb      	str	r3, [r7, #104]	; 0x68
 800578c:	464b      	mov	r3, r9
 800578e:	460a      	mov	r2, r1
 8005790:	eb42 0303 	adc.w	r3, r2, r3
 8005794:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	663b      	str	r3, [r7, #96]	; 0x60
 80057a0:	667a      	str	r2, [r7, #100]	; 0x64
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	f04f 0300 	mov.w	r3, #0
 80057aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057ae:	4649      	mov	r1, r9
 80057b0:	008b      	lsls	r3, r1, #2
 80057b2:	4641      	mov	r1, r8
 80057b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057b8:	4641      	mov	r1, r8
 80057ba:	008a      	lsls	r2, r1, #2
 80057bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057c0:	f7fb fa42 	bl	8000c48 <__aeabi_uldivmod>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4b0d      	ldr	r3, [pc, #52]	; (8005800 <UART_SetConfig+0x4e4>)
 80057ca:	fba3 1302 	umull	r1, r3, r3, r2
 80057ce:	095b      	lsrs	r3, r3, #5
 80057d0:	2164      	movs	r1, #100	; 0x64
 80057d2:	fb01 f303 	mul.w	r3, r1, r3
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	3332      	adds	r3, #50	; 0x32
 80057dc:	4a08      	ldr	r2, [pc, #32]	; (8005800 <UART_SetConfig+0x4e4>)
 80057de:	fba2 2303 	umull	r2, r3, r2, r3
 80057e2:	095b      	lsrs	r3, r3, #5
 80057e4:	f003 020f 	and.w	r2, r3, #15
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4422      	add	r2, r4
 80057f0:	609a      	str	r2, [r3, #8]
}
 80057f2:	bf00      	nop
 80057f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057f8:	46bd      	mov	sp, r7
 80057fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057fe:	bf00      	nop
 8005800:	51eb851f 	.word	0x51eb851f

08005804 <INA238_init>:
#include "ina238.h"

void INA238_init(I2C_HandleTypeDef* hi2c, int16_t error)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af04      	add	r7, sp, #16
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	807b      	strh	r3, [r7, #2]
	uint8_t pData[2];
	pData[0]=0x00;
 8005810:	2300      	movs	r3, #0
 8005812:	733b      	strb	r3, [r7, #12]
	pData[1]=0x00;
 8005814:	2300      	movs	r3, #0
 8005816:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, CONFIG, 1, pData, 2, 100);	//量程选择为163.84mv
 8005818:	2364      	movs	r3, #100	; 0x64
 800581a:	9302      	str	r3, [sp, #8]
 800581c:	2302      	movs	r3, #2
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	f107 030c 	add.w	r3, r7, #12
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	2301      	movs	r3, #1
 8005828:	2200      	movs	r2, #0
 800582a:	2181      	movs	r1, #129	; 0x81
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7fc fdf5 	bl	800241c <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8005832:	2064      	movs	r0, #100	; 0x64
 8005834:	f7fc f9c2 	bl	8001bbc <HAL_Delay>
	pData[0]=0xf4;
 8005838:	23f4      	movs	r3, #244	; 0xf4
 800583a:	733b      	strb	r3, [r7, #12]
	pData[1]=0x93;
 800583c:	2393      	movs	r3, #147	; 0x93
 800583e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, ADC_CONFIG, 1, pData, 2, 100);	//转换时间设置为9.6ms
 8005840:	2364      	movs	r3, #100	; 0x64
 8005842:	9302      	str	r3, [sp, #8]
 8005844:	2302      	movs	r3, #2
 8005846:	9301      	str	r3, [sp, #4]
 8005848:	f107 030c 	add.w	r3, r7, #12
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	2301      	movs	r3, #1
 8005850:	2201      	movs	r2, #1
 8005852:	2181      	movs	r1, #129	; 0x81
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7fc fde1 	bl	800241c <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800585a:	2064      	movs	r0, #100	; 0x64
 800585c:	f7fc f9ae 	bl	8001bbc <HAL_Delay>
	uint16_t temp=0x0fa0 + error;
 8005860:	887b      	ldrh	r3, [r7, #2]
 8005862:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8005866:	81fb      	strh	r3, [r7, #14]
	pData[0]=(temp >> 8) & 0xff;
 8005868:	89fb      	ldrh	r3, [r7, #14]
 800586a:	0a1b      	lsrs	r3, r3, #8
 800586c:	b29b      	uxth	r3, r3
 800586e:	b2db      	uxtb	r3, r3
 8005870:	733b      	strb	r3, [r7, #12]
	pData[1]=temp & 0xff;
 8005872:	89fb      	ldrh	r3, [r7, #14]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, SHUNT_CAL, 1, pData, 2, 100);	//设置最大电流为8A，采样电阻为20mΩ
 8005878:	2364      	movs	r3, #100	; 0x64
 800587a:	9302      	str	r3, [sp, #8]
 800587c:	2302      	movs	r3, #2
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	f107 030c 	add.w	r3, r7, #12
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	2301      	movs	r3, #1
 8005888:	2202      	movs	r2, #2
 800588a:	2181      	movs	r1, #129	; 0x81
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7fc fdc5 	bl	800241c <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8005892:	2064      	movs	r0, #100	; 0x64
 8005894:	f7fc f992 	bl	8001bbc <HAL_Delay>
}
 8005898:	bf00      	nop
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <INA238_getVolt>:

double INA238_getVolt(I2C_HandleTypeDef* hi2c)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08a      	sub	sp, #40	; 0x28
 80058a4:	af04      	add	r7, sp, #16
 80058a6:	6078      	str	r0, [r7, #4]
	uint8_t pData[2];
	double volt = 0.0;
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if(HAL_I2C_Mem_Read(hi2c, ADDR_READ, VBUS, 1, pData, 2, 100)==HAL_OK)
 80058b4:	2364      	movs	r3, #100	; 0x64
 80058b6:	9302      	str	r3, [sp, #8]
 80058b8:	2302      	movs	r3, #2
 80058ba:	9301      	str	r3, [sp, #4]
 80058bc:	f107 030c 	add.w	r3, r7, #12
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	2301      	movs	r3, #1
 80058c4:	2205      	movs	r2, #5
 80058c6:	2180      	movs	r1, #128	; 0x80
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7fc fea1 	bl	8002610 <HAL_I2C_Mem_Read>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d146      	bne.n	8005962 <INA238_getVolt+0xc2>
	{
		volt = pData[0] * 256 + pData[1];
 80058d4:	7b3b      	ldrb	r3, [r7, #12]
 80058d6:	021b      	lsls	r3, r3, #8
 80058d8:	7b7a      	ldrb	r2, [r7, #13]
 80058da:	4413      	add	r3, r2
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fa fe21 	bl	8000524 <__aeabi_i2d>
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if(volt > 32767)	//为负数的情况
 80058ea:	a326      	add	r3, pc, #152	; (adr r3, 8005984 <INA238_getVolt+0xe4>)
 80058ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80058f4:	f7fb f910 	bl	8000b18 <__aeabi_dcmpgt>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d01d      	beq.n	800593a <INA238_getVolt+0x9a>
			volt = (volt - 65536) * 3.125 / 1000;
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	4b1d      	ldr	r3, [pc, #116]	; (8005978 <INA238_getVolt+0xd8>)
 8005904:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005908:	f7fa fcbe 	bl	8000288 <__aeabi_dsub>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4610      	mov	r0, r2
 8005912:	4619      	mov	r1, r3
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	4b18      	ldr	r3, [pc, #96]	; (800597c <INA238_getVolt+0xdc>)
 800591a:	f7fa fe6d 	bl	80005f8 <__aeabi_dmul>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4610      	mov	r0, r2
 8005924:	4619      	mov	r1, r3
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	4b15      	ldr	r3, [pc, #84]	; (8005980 <INA238_getVolt+0xe0>)
 800592c:	f7fa ff8e 	bl	800084c <__aeabi_ddiv>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8005938:	e013      	b.n	8005962 <INA238_getVolt+0xc2>
		else
			volt = volt * 3.125 / 1000;
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	4b0f      	ldr	r3, [pc, #60]	; (800597c <INA238_getVolt+0xdc>)
 8005940:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005944:	f7fa fe58 	bl	80005f8 <__aeabi_dmul>
 8005948:	4602      	mov	r2, r0
 800594a:	460b      	mov	r3, r1
 800594c:	4610      	mov	r0, r2
 800594e:	4619      	mov	r1, r3
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <INA238_getVolt+0xe0>)
 8005956:	f7fa ff79 	bl	800084c <__aeabi_ddiv>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	return volt;
 8005962:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005966:	ec43 2b17 	vmov	d7, r2, r3
}
 800596a:	eeb0 0a47 	vmov.f32	s0, s14
 800596e:	eef0 0a67 	vmov.f32	s1, s15
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40f00000 	.word	0x40f00000
 800597c:	40090000 	.word	0x40090000
 8005980:	408f4000 	.word	0x408f4000
 8005984:	00000000 	.word	0x00000000
 8005988:	40dfffc0 	.word	0x40dfffc0

0800598c <OLED_WR_Byte>:
//[7]0 1 2 3 ... 127 			   
//向SSD1306写入一个字节
//dat:要写入的数据/命令
//cmd:数据/命令标志 0，表示命令；1，表示数据
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	4603      	mov	r3, r0
 8005994:	460a      	mov	r2, r1
 8005996:	71fb      	strb	r3, [r7, #7]
 8005998:	4613      	mov	r3, r2
 800599a:	71bb      	strb	r3, [r7, #6]
	if (cmd)
 800599c:	79bb      	ldrb	r3, [r7, #6]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d005      	beq.n	80059ae <OLED_WR_Byte+0x22>
	{
		OLED_DC_Set(); //命令/数据标志位置为1，则表示传送的是命令字节
 80059a2:	2201      	movs	r2, #1
 80059a4:	2102      	movs	r1, #2
 80059a6:	4812      	ldr	r0, [pc, #72]	; (80059f0 <OLED_WR_Byte+0x64>)
 80059a8:	f7fc fbda 	bl	8002160 <HAL_GPIO_WritePin>
 80059ac:	e004      	b.n	80059b8 <OLED_WR_Byte+0x2c>
	}

	else
		OLED_DC_Clr(); //命令/数据标志位置为0，则表示传送的是数据字节
 80059ae:	2200      	movs	r2, #0
 80059b0:	2102      	movs	r1, #2
 80059b2:	480f      	ldr	r0, [pc, #60]	; (80059f0 <OLED_WR_Byte+0x64>)
 80059b4:	f7fc fbd4 	bl	8002160 <HAL_GPIO_WritePin>
	OLED_CS_Clr(); //片选信号为低，表示选中OLED
 80059b8:	2200      	movs	r2, #0
 80059ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059be:	480d      	ldr	r0, [pc, #52]	; (80059f4 <OLED_WR_Byte+0x68>)
 80059c0:	f7fc fbce 	bl	8002160 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &dat, 1, 1000); //oled.c文件唯一修改的地方，这里是利用了hal库提供的SPI传送函数
 80059c4:	1df9      	adds	r1, r7, #7
 80059c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059ca:	2201      	movs	r2, #1
 80059cc:	480a      	ldr	r0, [pc, #40]	; (80059f8 <OLED_WR_Byte+0x6c>)
 80059ce:	f7fe f8c2 	bl	8003b56 <HAL_SPI_Transmit>
	OLED_CS_Set();
 80059d2:	2201      	movs	r2, #1
 80059d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059d8:	4806      	ldr	r0, [pc, #24]	; (80059f4 <OLED_WR_Byte+0x68>)
 80059da:	f7fc fbc1 	bl	8002160 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 80059de:	2201      	movs	r2, #1
 80059e0:	2102      	movs	r1, #2
 80059e2:	4803      	ldr	r0, [pc, #12]	; (80059f0 <OLED_WR_Byte+0x64>)
 80059e4:	f7fc fbbc 	bl	8002160 <HAL_GPIO_WritePin>
}
 80059e8:	bf00      	nop
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	40020400 	.word	0x40020400
 80059f4:	40021400 	.word	0x40021400
 80059f8:	20000308 	.word	0x20000308

080059fc <OLED_Set_Pos>:

void OLED_Set_Pos(unsigned char x, unsigned char y)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	460a      	mov	r2, r1
 8005a06:	71fb      	strb	r3, [r7, #7]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0 + y, OLED_CMD);
 8005a0c:	79bb      	ldrb	r3, [r7, #6]
 8005a0e:	3b50      	subs	r3, #80	; 0x50
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2100      	movs	r1, #0
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff ffb9 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte((((x + 2) & 0xf0) >> 4) | 0x10, OLED_CMD);
 8005a1a:	79fb      	ldrb	r3, [r7, #7]
 8005a1c:	3302      	adds	r3, #2
 8005a1e:	111b      	asrs	r3, r3, #4
 8005a20:	b25b      	sxtb	r3, r3
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	b25b      	sxtb	r3, r3
 8005a28:	f043 0310 	orr.w	r3, r3, #16
 8005a2c:	b25b      	sxtb	r3, r3
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2100      	movs	r1, #0
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff ffaa 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(((x + 2) & 0x0f), OLED_CMD);
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	3302      	adds	r3, #2
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2100      	movs	r1, #0
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff ffa0 	bl	800598c <OLED_WR_Byte>
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <OLED_Display_On>:
//开启OLED显示
void OLED_Display_On(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
	OLED_WR_Byte(0X8D, OLED_CMD);  //设置电荷泵命令字
 8005a58:	2100      	movs	r1, #0
 8005a5a:	208d      	movs	r0, #141	; 0x8d
 8005a5c:	f7ff ff96 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0X14, OLED_CMD);  //开启电荷泵
 8005a60:	2100      	movs	r1, #0
 8005a62:	2014      	movs	r0, #20
 8005a64:	f7ff ff92 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0XAF, OLED_CMD);  //DISPLAY ON
 8005a68:	2100      	movs	r1, #0
 8005a6a:	20af      	movs	r0, #175	; 0xaf
 8005a6c:	f7ff ff8e 	bl	800598c <OLED_WR_Byte>
}
 8005a70:	bf00      	nop
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <OLED_Clear>:
	OLED_WR_Byte(0X10, OLED_CMD);  //关闭电荷泵
	OLED_WR_Byte(0XAE, OLED_CMD);  //DISPLAY OFF
}
//清屏函数，清完后整个屏幕都是黑色的，没有一点光亮
void OLED_Clear(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	71fb      	strb	r3, [r7, #7]
 8005a7e:	e01f      	b.n	8005ac0 <OLED_Clear+0x4c>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD);    //设置页地址
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	3b50      	subs	r3, #80	; 0x50
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2100      	movs	r1, #0
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff ff7f 	bl	800598c <OLED_WR_Byte>
		OLED_WR_Byte(0x02, OLED_CMD);      //设置起始列低地址
 8005a8e:	2100      	movs	r1, #0
 8005a90:	2002      	movs	r0, #2
 8005a92:	f7ff ff7b 	bl	800598c <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);      //设置起始列高地址
 8005a96:	2100      	movs	r1, #0
 8005a98:	2010      	movs	r0, #16
 8005a9a:	f7ff ff77 	bl	800598c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	71bb      	strb	r3, [r7, #6]
 8005aa2:	e006      	b.n	8005ab2 <OLED_Clear+0x3e>
			OLED_WR_Byte(0, OLED_DATA);
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	f7ff ff70 	bl	800598c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8005aac:	79bb      	ldrb	r3, [r7, #6]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	71bb      	strb	r3, [r7, #6]
 8005ab2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	daf4      	bge.n	8005aa4 <OLED_Clear+0x30>
	for (i = 0; i < 8; i++)
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	3301      	adds	r3, #1
 8005abe:	71fb      	strb	r3, [r7, #7]
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	2b07      	cmp	r3, #7
 8005ac4:	d9dc      	bls.n	8005a80 <OLED_Clear+0xc>
	} //更新显示
}
 8005ac6:	bf00      	nop
 8005ac8:	bf00      	nop
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <OLED_ShowChar>:
//x:0~127
//y:0~6
//mode:0,反白显示；1，正常显示				 
//size:选择字体大小 16/12 
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	71fb      	strb	r3, [r7, #7]
 8005ada:	460b      	mov	r3, r1
 8005adc:	71bb      	strb	r3, [r7, #6]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	717b      	strb	r3, [r7, #5]
	unsigned char c = 0, i = 0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	73bb      	strb	r3, [r7, #14]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	73fb      	strb	r3, [r7, #15]
	c = chr - ' '; //得到偏移后的值
 8005aea:	797b      	ldrb	r3, [r7, #5]
 8005aec:	3b20      	subs	r3, #32
 8005aee:	73bb      	strb	r3, [r7, #14]
	if (x > Max_Column - 1)
 8005af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	da04      	bge.n	8005b02 <OLED_ShowChar+0x32>
	{
		x = 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	71fb      	strb	r3, [r7, #7]
		y = y + 2;
 8005afc:	79bb      	ldrb	r3, [r7, #6]
 8005afe:	3302      	adds	r3, #2
 8005b00:	71bb      	strb	r3, [r7, #6]
	}
	if (SIZE == 16)
	{
		OLED_Set_Pos(x, y);
 8005b02:	79ba      	ldrb	r2, [r7, #6]
 8005b04:	79fb      	ldrb	r3, [r7, #7]
 8005b06:	4611      	mov	r1, r2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff ff77 	bl	80059fc <OLED_Set_Pos>
		for (i = 0; i < 8; i++)
 8005b0e:	2300      	movs	r3, #0
 8005b10:	73fb      	strb	r3, [r7, #15]
 8005b12:	e00c      	b.n	8005b2e <OLED_ShowChar+0x5e>
			OLED_WR_Byte(F8X16[c * 16 + i], OLED_DATA);
 8005b14:	7bbb      	ldrb	r3, [r7, #14]
 8005b16:	011a      	lsls	r2, r3, #4
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	4a16      	ldr	r2, [pc, #88]	; (8005b78 <OLED_ShowChar+0xa8>)
 8005b1e:	5cd3      	ldrb	r3, [r2, r3]
 8005b20:	2101      	movs	r1, #1
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7ff ff32 	bl	800598c <OLED_WR_Byte>
		for (i = 0; i < 8; i++)
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	73fb      	strb	r3, [r7, #15]
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
 8005b30:	2b07      	cmp	r3, #7
 8005b32:	d9ef      	bls.n	8005b14 <OLED_ShowChar+0x44>
		OLED_Set_Pos(x, y + 1);
 8005b34:	79bb      	ldrb	r3, [r7, #6]
 8005b36:	3301      	adds	r3, #1
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	79fb      	ldrb	r3, [r7, #7]
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff ff5c 	bl	80059fc <OLED_Set_Pos>
		for (i = 0; i < 8; i++)
 8005b44:	2300      	movs	r3, #0
 8005b46:	73fb      	strb	r3, [r7, #15]
 8005b48:	e00d      	b.n	8005b66 <OLED_ShowChar+0x96>
			OLED_WR_Byte(F8X16[c * 16 + i + 8], OLED_DATA);
 8005b4a:	7bbb      	ldrb	r3, [r7, #14]
 8005b4c:	011a      	lsls	r2, r3, #4
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
 8005b50:	4413      	add	r3, r2
 8005b52:	3308      	adds	r3, #8
 8005b54:	4a08      	ldr	r2, [pc, #32]	; (8005b78 <OLED_ShowChar+0xa8>)
 8005b56:	5cd3      	ldrb	r3, [r2, r3]
 8005b58:	2101      	movs	r1, #1
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff ff16 	bl	800598c <OLED_WR_Byte>
		for (i = 0; i < 8; i++)
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
 8005b62:	3301      	adds	r3, #1
 8005b64:	73fb      	strb	r3, [r7, #15]
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
 8005b68:	2b07      	cmp	r3, #7
 8005b6a:	d9ee      	bls.n	8005b4a <OLED_ShowChar+0x7a>
		OLED_Set_Pos(x, y + 1);
		for (i = 0; i < 6; i++)
			OLED_WR_Byte(F6x8[c][i], OLED_DATA);

	}
}
 8005b6c:	bf00      	nop
 8005b6e:	bf00      	nop
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	08008f5c 	.word	0x08008f5c

08005b7c <oled_pow>:
//m^n函数
uint32_t oled_pow(uint8_t m, uint8_t n)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	460a      	mov	r2, r1
 8005b86:	71fb      	strb	r3, [r7, #7]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
	while (n--)
 8005b90:	e004      	b.n	8005b9c <oled_pow+0x20>
		result *= m;
 8005b92:	79fa      	ldrb	r2, [r7, #7]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	fb02 f303 	mul.w	r3, r2, r3
 8005b9a:	60fb      	str	r3, [r7, #12]
	while (n--)
 8005b9c:	79bb      	ldrb	r3, [r7, #6]
 8005b9e:	1e5a      	subs	r2, r3, #1
 8005ba0:	71ba      	strb	r2, [r7, #6]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f5      	bne.n	8005b92 <oled_pow+0x16>
	return result;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <OLED_ShowNum>:
//len :数字的位数
//size:字体大小
//mode:0:填充模式；1:叠加模式
//num:数值(0~4294967295);	 		  
void OLED_ShowNum(uint8_t x, uint8_t y, uint32_t num, uint8_t len, uint8_t size)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	603a      	str	r2, [r7, #0]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	71fb      	strb	r3, [r7, #7]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	71bb      	strb	r3, [r7, #6]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	717b      	strb	r3, [r7, #5]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	73bb      	strb	r3, [r7, #14]
	for (t = 0; t < len; t++)
 8005bce:	2300      	movs	r3, #0
 8005bd0:	73fb      	strb	r3, [r7, #15]
 8005bd2:	e049      	b.n	8005c68 <OLED_ShowNum+0xb4>
	{
		temp = (num / oled_pow(10, len - t - 1)) % 10;
 8005bd4:	797a      	ldrb	r2, [r7, #5]
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	4619      	mov	r1, r3
 8005be2:	200a      	movs	r0, #10
 8005be4:	f7ff ffca 	bl	8005b7c <oled_pow>
 8005be8:	4602      	mov	r2, r0
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bf0:	4b22      	ldr	r3, [pc, #136]	; (8005c7c <OLED_ShowNum+0xc8>)
 8005bf2:	fba3 2301 	umull	r2, r3, r3, r1
 8005bf6:	08da      	lsrs	r2, r3, #3
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	1aca      	subs	r2, r1, r3
 8005c02:	4613      	mov	r3, r2
 8005c04:	737b      	strb	r3, [r7, #13]
		if (enshow == 0 && t < (len - 1))
 8005c06:	7bbb      	ldrb	r3, [r7, #14]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d119      	bne.n	8005c40 <OLED_ShowNum+0x8c>
 8005c0c:	7bfa      	ldrb	r2, [r7, #15]
 8005c0e:	797b      	ldrb	r3, [r7, #5]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	429a      	cmp	r2, r3
 8005c14:	da14      	bge.n	8005c40 <OLED_ShowNum+0x8c>
		{
			if (temp == 0)
 8005c16:	7b7b      	ldrb	r3, [r7, #13]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10f      	bne.n	8005c3c <OLED_ShowNum+0x88>
			{
				OLED_ShowChar(x + (size / 2) * t, y, ' ');
 8005c1c:	7e3b      	ldrb	r3, [r7, #24]
 8005c1e:	085b      	lsrs	r3, r3, #1
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	7bfa      	ldrb	r2, [r7, #15]
 8005c24:	fb12 f303 	smulbb	r3, r2, r3
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	79fb      	ldrb	r3, [r7, #7]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	79b9      	ldrb	r1, [r7, #6]
 8005c32:	2220      	movs	r2, #32
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff ff4b 	bl	8005ad0 <OLED_ShowChar>
				continue;
 8005c3a:	e012      	b.n	8005c62 <OLED_ShowNum+0xae>
			}
			else
				enshow = 1;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	73bb      	strb	r3, [r7, #14]

		}
		OLED_ShowChar(x + (size / 2) * t, y, temp + '0');
 8005c40:	7e3b      	ldrb	r3, [r7, #24]
 8005c42:	085b      	lsrs	r3, r3, #1
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	7bfa      	ldrb	r2, [r7, #15]
 8005c48:	fb12 f303 	smulbb	r3, r2, r3
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	79fb      	ldrb	r3, [r7, #7]
 8005c50:	4413      	add	r3, r2
 8005c52:	b2d8      	uxtb	r0, r3
 8005c54:	7b7b      	ldrb	r3, [r7, #13]
 8005c56:	3330      	adds	r3, #48	; 0x30
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	79bb      	ldrb	r3, [r7, #6]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	f7ff ff37 	bl	8005ad0 <OLED_ShowChar>
	for (t = 0; t < len; t++)
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
 8005c64:	3301      	adds	r3, #1
 8005c66:	73fb      	strb	r3, [r7, #15]
 8005c68:	7bfa      	ldrb	r2, [r7, #15]
 8005c6a:	797b      	ldrb	r3, [r7, #5]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d3b1      	bcc.n	8005bd4 <OLED_ShowNum+0x20>
	}
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	cccccccd 	.word	0xcccccccd

08005c80 <OLED_Init>:
	}
}

//初始化SSD1306					    
void OLED_Init(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0

	OLED_RST_Clr();
 8005c84:	2200      	movs	r2, #0
 8005c86:	2120      	movs	r1, #32
 8005c88:	4841      	ldr	r0, [pc, #260]	; (8005d90 <OLED_Init+0x110>)
 8005c8a:	f7fc fa69 	bl	8002160 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8005c8e:	20c8      	movs	r0, #200	; 0xc8
 8005c90:	f7fb ff94 	bl	8001bbc <HAL_Delay>
	OLED_RST_Set();
 8005c94:	2201      	movs	r2, #1
 8005c96:	2120      	movs	r1, #32
 8005c98:	483d      	ldr	r0, [pc, #244]	; (8005d90 <OLED_Init+0x110>)
 8005c9a:	f7fc fa61 	bl	8002160 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	20ae      	movs	r0, #174	; 0xae
 8005ca2:	f7ff fe73 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //---set low column address
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	2002      	movs	r0, #2
 8005caa:	f7ff fe6f 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 8005cae:	2100      	movs	r1, #0
 8005cb0:	2010      	movs	r0, #16
 8005cb2:	f7ff fe6b 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	2040      	movs	r0, #64	; 0x40
 8005cba:	f7ff fe67 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	2081      	movs	r0, #129	; 0x81
 8005cc2:	f7ff fe63 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	20cf      	movs	r0, #207	; 0xcf
 8005cca:	f7ff fe5f 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0Xa0左右反置 0Xa1正常
 8005cce:	2100      	movs	r1, #0
 8005cd0:	20a1      	movs	r0, #161	; 0xa1
 8005cd2:	f7ff fe5b 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); //Set COM/Row Scan Direction   0Xc0上下反置 0Xc8正常
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	20c8      	movs	r0, #200	; 0xc8
 8005cda:	f7ff fe57 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 8005cde:	2100      	movs	r1, #0
 8005ce0:	20a6      	movs	r0, #166	; 0xa6
 8005ce2:	f7ff fe53 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	20a8      	movs	r0, #168	; 0xa8
 8005cea:	f7ff fe4f 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 8005cee:	2100      	movs	r1, #0
 8005cf0:	203f      	movs	r0, #63	; 0x3f
 8005cf2:	f7ff fe4b 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	20d3      	movs	r0, #211	; 0xd3
 8005cfa:	f7ff fe47 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 8005cfe:	2100      	movs	r1, #0
 8005d00:	2000      	movs	r0, #0
 8005d02:	f7ff fe43 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 8005d06:	2100      	movs	r1, #0
 8005d08:	20d5      	movs	r0, #213	; 0xd5
 8005d0a:	f7ff fe3f 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 8005d0e:	2100      	movs	r1, #0
 8005d10:	2080      	movs	r0, #128	; 0x80
 8005d12:	f7ff fe3b 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 8005d16:	2100      	movs	r1, #0
 8005d18:	20d9      	movs	r0, #217	; 0xd9
 8005d1a:	f7ff fe37 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); //Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8005d1e:	2100      	movs	r1, #0
 8005d20:	20f1      	movs	r0, #241	; 0xf1
 8005d22:	f7ff fe33 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 8005d26:	2100      	movs	r1, #0
 8005d28:	20da      	movs	r0, #218	; 0xda
 8005d2a:	f7ff fe2f 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 8005d2e:	2100      	movs	r1, #0
 8005d30:	2012      	movs	r0, #18
 8005d32:	f7ff fe2b 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 8005d36:	2100      	movs	r1, #0
 8005d38:	20db      	movs	r0, #219	; 0xdb
 8005d3a:	f7ff fe27 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //Set VCOM Deselect Level
 8005d3e:	2100      	movs	r1, #0
 8005d40:	2040      	movs	r0, #64	; 0x40
 8005d42:	f7ff fe23 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 8005d46:	2100      	movs	r1, #0
 8005d48:	2020      	movs	r0, #32
 8005d4a:	f7ff fe1f 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 8005d4e:	2100      	movs	r1, #0
 8005d50:	2002      	movs	r0, #2
 8005d52:	f7ff fe1b 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 8005d56:	2100      	movs	r1, #0
 8005d58:	208d      	movs	r0, #141	; 0x8d
 8005d5a:	f7ff fe17 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 8005d5e:	2100      	movs	r1, #0
 8005d60:	2014      	movs	r0, #20
 8005d62:	f7ff fe13 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 8005d66:	2100      	movs	r1, #0
 8005d68:	20a4      	movs	r0, #164	; 0xa4
 8005d6a:	f7ff fe0f 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 8005d6e:	2100      	movs	r1, #0
 8005d70:	20a6      	movs	r0, #166	; 0xa6
 8005d72:	f7ff fe0b 	bl	800598c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); //--turn on oled panel
 8005d76:	2100      	movs	r1, #0
 8005d78:	20af      	movs	r0, #175	; 0xaf
 8005d7a:	f7ff fe07 	bl	800598c <OLED_WR_Byte>

	OLED_WR_Byte(0xAF, OLED_CMD); /*display ON*/
 8005d7e:	2100      	movs	r1, #0
 8005d80:	20af      	movs	r0, #175	; 0xaf
 8005d82:	f7ff fe03 	bl	800598c <OLED_WR_Byte>
	OLED_Clear();
 8005d86:	f7ff fe75 	bl	8005a74 <OLED_Clear>
}
 8005d8a:	bf00      	nop
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	40020800 	.word	0x40020800

08005d94 <VariableIntegralCoefficient>:
/*
变积分算法
防止刚开始的时候由于误差较大导致的积分项过大——超调
*/
float VariableIntegralCoefficient(float error, float absMax, float absMin)
{
 8005d94:	b5b0      	push	{r4, r5, r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	ed87 0a03 	vstr	s0, [r7, #12]
 8005d9e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005da2:	ed87 1a01 	vstr	s2, [r7, #4]
    float factor = 0.0f;
 8005da6:	f04f 0300 	mov.w	r3, #0
 8005daa:	617b      	str	r3, [r7, #20]

    if (fabs(error) <= absMin)
 8005dac:	edd7 7a03 	vldr	s15, [r7, #12]
 8005db0:	eef0 7ae7 	vabs.f32	s15, s15
 8005db4:	ed97 7a01 	vldr	s14, [r7, #4]
 8005db8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc0:	db03      	blt.n	8005dca <VariableIntegralCoefficient+0x36>
    {
        factor = 1.0f;
 8005dc2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	e03d      	b.n	8005e46 <VariableIntegralCoefficient+0xb2>
    }
    else if (fabs(error) > absMax)
 8005dca:	edd7 7a03 	vldr	s15, [r7, #12]
 8005dce:	eef0 7ae7 	vabs.f32	s15, s15
 8005dd2:	ed97 7a02 	vldr	s14, [r7, #8]
 8005dd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dde:	d503      	bpl.n	8005de8 <VariableIntegralCoefficient+0x54>
    {
        factor = 0.0f;
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	e02e      	b.n	8005e46 <VariableIntegralCoefficient+0xb2>
    }
    else
    {
        // 这里可以设置为一个常数类似于Ki的设置，选取量是需要比Kp小1-2个数量级的
        factor = (absMax - fabs(error)) / (absMax - absMin);
 8005de8:	68b8      	ldr	r0, [r7, #8]
 8005dea:	f7fa fbad 	bl	8000548 <__aeabi_f2d>
 8005dee:	4604      	mov	r4, r0
 8005df0:	460d      	mov	r5, r1
 8005df2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005df6:	eef0 7ae7 	vabs.f32	s15, s15
 8005dfa:	ee17 0a90 	vmov	r0, s15
 8005dfe:	f7fa fba3 	bl	8000548 <__aeabi_f2d>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4620      	mov	r0, r4
 8005e08:	4629      	mov	r1, r5
 8005e0a:	f7fa fa3d 	bl	8000288 <__aeabi_dsub>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4614      	mov	r4, r2
 8005e14:	461d      	mov	r5, r3
 8005e16:	ed97 7a02 	vldr	s14, [r7, #8]
 8005e1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e22:	ee17 0a90 	vmov	r0, s15
 8005e26:	f7fa fb8f 	bl	8000548 <__aeabi_f2d>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4620      	mov	r0, r4
 8005e30:	4629      	mov	r1, r5
 8005e32:	f7fa fd0b 	bl	800084c <__aeabi_ddiv>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f7fa feb3 	bl	8000ba8 <__aeabi_d2f>
 8005e42:	4603      	mov	r3, r0
 8005e44:	617b      	str	r3, [r7, #20]
    }

    return factor;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	ee07 3a90 	vmov	s15, r3
}
 8005e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005e58 <PID_init>:
// 初始化
void PID_init(PID* pid, TIM_HandleTypeDef* htim, float kp, float ki, float kd, float target)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6178      	str	r0, [r7, #20]
 8005e60:	6139      	str	r1, [r7, #16]
 8005e62:	ed87 0a03 	vstr	s0, [r7, #12]
 8005e66:	edc7 0a02 	vstr	s1, [r7, #8]
 8005e6a:	ed87 1a01 	vstr	s2, [r7, #4]
 8005e6e:	edc7 1a00 	vstr	s3, [r7]
    pid->kp = kp;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	605a      	str	r2, [r3, #4]
    pid->ki = ki;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	609a      	str	r2, [r3, #8]
    pid->kd = kd;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	60da      	str	r2, [r3, #12]
    pid->target = target;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	601a      	str	r2, [r3, #0]
    pid->maximum = 0.9;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	4a0e      	ldr	r2, [pc, #56]	; (8005ec8 <PID_init+0x70>)
 8005e8e:	621a      	str	r2, [r3, #32]
    pid->minimum = 0.1;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	4a0e      	ldr	r2, [pc, #56]	; (8005ecc <PID_init+0x74>)
 8005e94:	625a      	str	r2, [r3, #36]	; 0x24
    pid->deadBand = 0.01;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	4a0d      	ldr	r2, [pc, #52]	; (8005ed0 <PID_init+0x78>)
 8005e9a:	619a      	str	r2, [r3, #24]
    pid->alpha = 0;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f04f 0200 	mov.w	r2, #0
 8005ea2:	631a      	str	r2, [r3, #48]	; 0x30
    pid->timCount = __HAL_TIM_GET_AUTORELOAD(htim);
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	639a      	str	r2, [r3, #56]	; 0x38
    pid->errorAbsMax = 5;       /*偏差绝对值最大值*/
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	4a08      	ldr	r2, [pc, #32]	; (8005ed4 <PID_init+0x7c>)
 8005eb2:	629a      	str	r2, [r3, #40]	; 0x28
    pid->errorAbsMin = 1;       /*偏差绝对值最小值*/
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005eba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	3f666666 	.word	0x3f666666
 8005ecc:	3dcccccd 	.word	0x3dcccccd
 8005ed0:	3c23d70a 	.word	0x3c23d70a
 8005ed4:	40a00000 	.word	0x40a00000

08005ed8 <PID_regulator>:

// 带死区、抗积分饱和、梯形积分、变积分算法以及不完全微分算法的增量型PID控
// 制器。
float PID_regulator(PID* pid, float messure)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	ed87 0a00 	vstr	s0, [r7]
    float thisError; 
    float factor; // 变积分系数  0-1.0
    float increment;
    float pError, dError, iError;

    thisError = pid->target - messure; // 得到偏差值
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	ed93 7a00 	vldr	s14, [r3]
 8005eea:	edd7 7a00 	vldr	s15, [r7]
 8005eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ef2:	edc7 7a07 	vstr	s15, [r7, #28]
    if (fabs(thisError) > (pid->target * pid->deadBand))
 8005ef6:	edd7 7a07 	vldr	s15, [r7, #28]
 8005efa:	eeb0 7ae7 	vabs.f32	s14, s15
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	edd3 6a00 	vldr	s13, [r3]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	edd3 7a06 	vldr	s15, [r3, #24]
 8005f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f16:	dd6e      	ble.n	8005ff6 <PID_regulator+0x11e>
    {
        pError = thisError - pid->lastError;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	edd3 7a04 	vldr	s15, [r3, #16]
 8005f1e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f26:	edc7 7a05 	vstr	s15, [r7, #20]
        iError = (thisError + pid->lastError) / 2.0f;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	ed93 7a04 	vldr	s14, [r3, #16]
 8005f30:	edd7 7a07 	vldr	s15, [r7, #28]
 8005f34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f38:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005f3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f40:	edc7 7a04 	vstr	s15, [r7, #16]
        dError = thisError - 2.0f * (pid->lastError) + pid->preError;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	edd3 7a04 	vldr	s15, [r3, #16]
 8005f4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f4e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005f52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	edd3 7a05 	vldr	s15, [r3, #20]
 8005f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f60:	edc7 7a03 	vstr	s15, [r7, #12]
        // 变积分系数获取
        factor = VariableIntegralCoefficient(thisError, pid->errorAbsMax, pid->errorAbsMin);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005f70:	eeb0 1a47 	vmov.f32	s2, s14
 8005f74:	eef0 0a67 	vmov.f32	s1, s15
 8005f78:	ed97 0a07 	vldr	s0, [r7, #28]
 8005f7c:	f7ff ff0a 	bl	8005d94 <VariableIntegralCoefficient>
 8005f80:	ed87 0a02 	vstr	s0, [r7, #8]
        // 计算微分项增量带不完全微分
        pid->deltaDiff = pid->kd * (1.0f - pid->alpha) * dError + pid->alpha * pid->deltaDiff;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	ed93 7a03 	vldr	s14, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005f90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f94:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005f98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005fb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        // 增量计算
        increment = pid->kp * pError + pid->ki * factor * iError + pid->deltaDiff; 
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	ed93 7a01 	vldr	s14, [r3, #4]
 8005fc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8005fc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	edd3 6a02 	vldr	s13, [r3, #8]
 8005fd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005fd6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005fda:	edd7 7a04 	vldr	s15, [r7, #16]
 8005fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fe2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ff0:	edc7 7a06 	vstr	s15, [r7, #24]
 8005ff4:	e002      	b.n	8005ffc <PID_regulator+0x124>
    }
    else
    {
        increment = 0.0f;
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	61bb      	str	r3, [r7, #24]
    }

    pid->result = pid->result + increment;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	ed93 7a07 	vldr	s14, [r3, #28]
 8006002:	edd7 7a06 	vldr	s15, [r7, #24]
 8006006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	edc3 7a07 	vstr	s15, [r3, #28]

    //防止超过限制
    if (pid->result >= pid->timCount * pid->maximum)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	ed93 7a07 	vldr	s14, [r3, #28]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	edd3 7a08 	vldr	s15, [r3, #32]
 8006028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800602c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006034:	db1c      	blt.n	8006070 <PID_regulator+0x198>
    {
    	//清除误差积分，防止在限制处长时间停留
    	thisError = 0;
 8006036:	f04f 0300 	mov.w	r3, #0
 800603a:	61fb      	str	r3, [r7, #28]
    	pid->lastError = 0;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f04f 0200 	mov.w	r2, #0
 8006042:	611a      	str	r2, [r3, #16]
    	pid->preError = 0;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f04f 0200 	mov.w	r2, #0
 800604a:	615a      	str	r2, [r3, #20]
    	pid->deltaDiff = 0;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	635a      	str	r2, [r3, #52]	; 0x34
        pid->result = pid->timCount * pid->maximum;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	ee07 3a90 	vmov	s15, r3
 800605c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	edd3 7a08 	vldr	s15, [r3, #32]
 8006066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	edc3 7a07 	vstr	s15, [r3, #28]
    }
    if (pid->result <= pid->timCount * pid->minimum)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	ed93 7a07 	vldr	s14, [r3, #28]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	ee07 3a90 	vmov	s15, r3
 800607e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006088:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800608c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006094:	d81c      	bhi.n	80060d0 <PID_regulator+0x1f8>
    {
    	thisError = 0;
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	61fb      	str	r3, [r7, #28]
    	pid->lastError = 0;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f04f 0200 	mov.w	r2, #0
 80060a2:	611a      	str	r2, [r3, #16]
    	pid->preError = 0;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	615a      	str	r2, [r3, #20]
    	pid->deltaDiff = 0;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f04f 0200 	mov.w	r2, #0
 80060b2:	635a      	str	r2, [r3, #52]	; 0x34
        pid->result = pid->timCount * pid->minimum;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	ee07 3a90 	vmov	s15, r3
 80060bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80060c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	edc3 7a07 	vstr	s15, [r3, #28]
    }

    pid->preError = pid->lastError; // 存放偏差用于下次运算
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	615a      	str	r2, [r3, #20]
    pid->lastError = thisError;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	69fa      	ldr	r2, [r7, #28]
 80060dc:	611a      	str	r2, [r3, #16]
    return pid->result;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	ee07 3a90 	vmov	s15, r3
}
 80060e6:	eeb0 0a67 	vmov.f32	s0, s15
 80060ea:	3720      	adds	r7, #32
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <__errno>:
 80060f0:	4b01      	ldr	r3, [pc, #4]	; (80060f8 <__errno+0x8>)
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	2000000c 	.word	0x2000000c

080060fc <__libc_init_array>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	4d0d      	ldr	r5, [pc, #52]	; (8006134 <__libc_init_array+0x38>)
 8006100:	4c0d      	ldr	r4, [pc, #52]	; (8006138 <__libc_init_array+0x3c>)
 8006102:	1b64      	subs	r4, r4, r5
 8006104:	10a4      	asrs	r4, r4, #2
 8006106:	2600      	movs	r6, #0
 8006108:	42a6      	cmp	r6, r4
 800610a:	d109      	bne.n	8006120 <__libc_init_array+0x24>
 800610c:	4d0b      	ldr	r5, [pc, #44]	; (800613c <__libc_init_array+0x40>)
 800610e:	4c0c      	ldr	r4, [pc, #48]	; (8006140 <__libc_init_array+0x44>)
 8006110:	f002 ff02 	bl	8008f18 <_init>
 8006114:	1b64      	subs	r4, r4, r5
 8006116:	10a4      	asrs	r4, r4, #2
 8006118:	2600      	movs	r6, #0
 800611a:	42a6      	cmp	r6, r4
 800611c:	d105      	bne.n	800612a <__libc_init_array+0x2e>
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	f855 3b04 	ldr.w	r3, [r5], #4
 8006124:	4798      	blx	r3
 8006126:	3601      	adds	r6, #1
 8006128:	e7ee      	b.n	8006108 <__libc_init_array+0xc>
 800612a:	f855 3b04 	ldr.w	r3, [r5], #4
 800612e:	4798      	blx	r3
 8006130:	3601      	adds	r6, #1
 8006132:	e7f2      	b.n	800611a <__libc_init_array+0x1e>
 8006134:	0800992c 	.word	0x0800992c
 8006138:	0800992c 	.word	0x0800992c
 800613c:	0800992c 	.word	0x0800992c
 8006140:	08009930 	.word	0x08009930

08006144 <memset>:
 8006144:	4402      	add	r2, r0
 8006146:	4603      	mov	r3, r0
 8006148:	4293      	cmp	r3, r2
 800614a:	d100      	bne.n	800614e <memset+0xa>
 800614c:	4770      	bx	lr
 800614e:	f803 1b01 	strb.w	r1, [r3], #1
 8006152:	e7f9      	b.n	8006148 <memset+0x4>

08006154 <__cvt>:
 8006154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006158:	ec55 4b10 	vmov	r4, r5, d0
 800615c:	2d00      	cmp	r5, #0
 800615e:	460e      	mov	r6, r1
 8006160:	4619      	mov	r1, r3
 8006162:	462b      	mov	r3, r5
 8006164:	bfbb      	ittet	lt
 8006166:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800616a:	461d      	movlt	r5, r3
 800616c:	2300      	movge	r3, #0
 800616e:	232d      	movlt	r3, #45	; 0x2d
 8006170:	700b      	strb	r3, [r1, #0]
 8006172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006174:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006178:	4691      	mov	r9, r2
 800617a:	f023 0820 	bic.w	r8, r3, #32
 800617e:	bfbc      	itt	lt
 8006180:	4622      	movlt	r2, r4
 8006182:	4614      	movlt	r4, r2
 8006184:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006188:	d005      	beq.n	8006196 <__cvt+0x42>
 800618a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800618e:	d100      	bne.n	8006192 <__cvt+0x3e>
 8006190:	3601      	adds	r6, #1
 8006192:	2102      	movs	r1, #2
 8006194:	e000      	b.n	8006198 <__cvt+0x44>
 8006196:	2103      	movs	r1, #3
 8006198:	ab03      	add	r3, sp, #12
 800619a:	9301      	str	r3, [sp, #4]
 800619c:	ab02      	add	r3, sp, #8
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	ec45 4b10 	vmov	d0, r4, r5
 80061a4:	4653      	mov	r3, sl
 80061a6:	4632      	mov	r2, r6
 80061a8:	f000 fcea 	bl	8006b80 <_dtoa_r>
 80061ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061b0:	4607      	mov	r7, r0
 80061b2:	d102      	bne.n	80061ba <__cvt+0x66>
 80061b4:	f019 0f01 	tst.w	r9, #1
 80061b8:	d022      	beq.n	8006200 <__cvt+0xac>
 80061ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061be:	eb07 0906 	add.w	r9, r7, r6
 80061c2:	d110      	bne.n	80061e6 <__cvt+0x92>
 80061c4:	783b      	ldrb	r3, [r7, #0]
 80061c6:	2b30      	cmp	r3, #48	; 0x30
 80061c8:	d10a      	bne.n	80061e0 <__cvt+0x8c>
 80061ca:	2200      	movs	r2, #0
 80061cc:	2300      	movs	r3, #0
 80061ce:	4620      	mov	r0, r4
 80061d0:	4629      	mov	r1, r5
 80061d2:	f7fa fc79 	bl	8000ac8 <__aeabi_dcmpeq>
 80061d6:	b918      	cbnz	r0, 80061e0 <__cvt+0x8c>
 80061d8:	f1c6 0601 	rsb	r6, r6, #1
 80061dc:	f8ca 6000 	str.w	r6, [sl]
 80061e0:	f8da 3000 	ldr.w	r3, [sl]
 80061e4:	4499      	add	r9, r3
 80061e6:	2200      	movs	r2, #0
 80061e8:	2300      	movs	r3, #0
 80061ea:	4620      	mov	r0, r4
 80061ec:	4629      	mov	r1, r5
 80061ee:	f7fa fc6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80061f2:	b108      	cbz	r0, 80061f8 <__cvt+0xa4>
 80061f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80061f8:	2230      	movs	r2, #48	; 0x30
 80061fa:	9b03      	ldr	r3, [sp, #12]
 80061fc:	454b      	cmp	r3, r9
 80061fe:	d307      	bcc.n	8006210 <__cvt+0xbc>
 8006200:	9b03      	ldr	r3, [sp, #12]
 8006202:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006204:	1bdb      	subs	r3, r3, r7
 8006206:	4638      	mov	r0, r7
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	b004      	add	sp, #16
 800620c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006210:	1c59      	adds	r1, r3, #1
 8006212:	9103      	str	r1, [sp, #12]
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	e7f0      	b.n	80061fa <__cvt+0xa6>

08006218 <__exponent>:
 8006218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800621a:	4603      	mov	r3, r0
 800621c:	2900      	cmp	r1, #0
 800621e:	bfb8      	it	lt
 8006220:	4249      	neglt	r1, r1
 8006222:	f803 2b02 	strb.w	r2, [r3], #2
 8006226:	bfb4      	ite	lt
 8006228:	222d      	movlt	r2, #45	; 0x2d
 800622a:	222b      	movge	r2, #43	; 0x2b
 800622c:	2909      	cmp	r1, #9
 800622e:	7042      	strb	r2, [r0, #1]
 8006230:	dd2a      	ble.n	8006288 <__exponent+0x70>
 8006232:	f10d 0407 	add.w	r4, sp, #7
 8006236:	46a4      	mov	ip, r4
 8006238:	270a      	movs	r7, #10
 800623a:	46a6      	mov	lr, r4
 800623c:	460a      	mov	r2, r1
 800623e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006242:	fb07 1516 	mls	r5, r7, r6, r1
 8006246:	3530      	adds	r5, #48	; 0x30
 8006248:	2a63      	cmp	r2, #99	; 0x63
 800624a:	f104 34ff 	add.w	r4, r4, #4294967295
 800624e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006252:	4631      	mov	r1, r6
 8006254:	dcf1      	bgt.n	800623a <__exponent+0x22>
 8006256:	3130      	adds	r1, #48	; 0x30
 8006258:	f1ae 0502 	sub.w	r5, lr, #2
 800625c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006260:	1c44      	adds	r4, r0, #1
 8006262:	4629      	mov	r1, r5
 8006264:	4561      	cmp	r1, ip
 8006266:	d30a      	bcc.n	800627e <__exponent+0x66>
 8006268:	f10d 0209 	add.w	r2, sp, #9
 800626c:	eba2 020e 	sub.w	r2, r2, lr
 8006270:	4565      	cmp	r5, ip
 8006272:	bf88      	it	hi
 8006274:	2200      	movhi	r2, #0
 8006276:	4413      	add	r3, r2
 8006278:	1a18      	subs	r0, r3, r0
 800627a:	b003      	add	sp, #12
 800627c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800627e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006282:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006286:	e7ed      	b.n	8006264 <__exponent+0x4c>
 8006288:	2330      	movs	r3, #48	; 0x30
 800628a:	3130      	adds	r1, #48	; 0x30
 800628c:	7083      	strb	r3, [r0, #2]
 800628e:	70c1      	strb	r1, [r0, #3]
 8006290:	1d03      	adds	r3, r0, #4
 8006292:	e7f1      	b.n	8006278 <__exponent+0x60>

08006294 <_printf_float>:
 8006294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006298:	ed2d 8b02 	vpush	{d8}
 800629c:	b08d      	sub	sp, #52	; 0x34
 800629e:	460c      	mov	r4, r1
 80062a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80062a4:	4616      	mov	r6, r2
 80062a6:	461f      	mov	r7, r3
 80062a8:	4605      	mov	r5, r0
 80062aa:	f001 fa57 	bl	800775c <_localeconv_r>
 80062ae:	f8d0 a000 	ldr.w	sl, [r0]
 80062b2:	4650      	mov	r0, sl
 80062b4:	f7f9 ff8c 	bl	80001d0 <strlen>
 80062b8:	2300      	movs	r3, #0
 80062ba:	930a      	str	r3, [sp, #40]	; 0x28
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	9305      	str	r3, [sp, #20]
 80062c0:	f8d8 3000 	ldr.w	r3, [r8]
 80062c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80062c8:	3307      	adds	r3, #7
 80062ca:	f023 0307 	bic.w	r3, r3, #7
 80062ce:	f103 0208 	add.w	r2, r3, #8
 80062d2:	f8c8 2000 	str.w	r2, [r8]
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80062de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80062e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80062e6:	9307      	str	r3, [sp, #28]
 80062e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80062ec:	ee08 0a10 	vmov	s16, r0
 80062f0:	4b9f      	ldr	r3, [pc, #636]	; (8006570 <_printf_float+0x2dc>)
 80062f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062f6:	f04f 32ff 	mov.w	r2, #4294967295
 80062fa:	f7fa fc17 	bl	8000b2c <__aeabi_dcmpun>
 80062fe:	bb88      	cbnz	r0, 8006364 <_printf_float+0xd0>
 8006300:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006304:	4b9a      	ldr	r3, [pc, #616]	; (8006570 <_printf_float+0x2dc>)
 8006306:	f04f 32ff 	mov.w	r2, #4294967295
 800630a:	f7fa fbf1 	bl	8000af0 <__aeabi_dcmple>
 800630e:	bb48      	cbnz	r0, 8006364 <_printf_float+0xd0>
 8006310:	2200      	movs	r2, #0
 8006312:	2300      	movs	r3, #0
 8006314:	4640      	mov	r0, r8
 8006316:	4649      	mov	r1, r9
 8006318:	f7fa fbe0 	bl	8000adc <__aeabi_dcmplt>
 800631c:	b110      	cbz	r0, 8006324 <_printf_float+0x90>
 800631e:	232d      	movs	r3, #45	; 0x2d
 8006320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006324:	4b93      	ldr	r3, [pc, #588]	; (8006574 <_printf_float+0x2e0>)
 8006326:	4894      	ldr	r0, [pc, #592]	; (8006578 <_printf_float+0x2e4>)
 8006328:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800632c:	bf94      	ite	ls
 800632e:	4698      	movls	r8, r3
 8006330:	4680      	movhi	r8, r0
 8006332:	2303      	movs	r3, #3
 8006334:	6123      	str	r3, [r4, #16]
 8006336:	9b05      	ldr	r3, [sp, #20]
 8006338:	f023 0204 	bic.w	r2, r3, #4
 800633c:	6022      	str	r2, [r4, #0]
 800633e:	f04f 0900 	mov.w	r9, #0
 8006342:	9700      	str	r7, [sp, #0]
 8006344:	4633      	mov	r3, r6
 8006346:	aa0b      	add	r2, sp, #44	; 0x2c
 8006348:	4621      	mov	r1, r4
 800634a:	4628      	mov	r0, r5
 800634c:	f000 f9d8 	bl	8006700 <_printf_common>
 8006350:	3001      	adds	r0, #1
 8006352:	f040 8090 	bne.w	8006476 <_printf_float+0x1e2>
 8006356:	f04f 30ff 	mov.w	r0, #4294967295
 800635a:	b00d      	add	sp, #52	; 0x34
 800635c:	ecbd 8b02 	vpop	{d8}
 8006360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006364:	4642      	mov	r2, r8
 8006366:	464b      	mov	r3, r9
 8006368:	4640      	mov	r0, r8
 800636a:	4649      	mov	r1, r9
 800636c:	f7fa fbde 	bl	8000b2c <__aeabi_dcmpun>
 8006370:	b140      	cbz	r0, 8006384 <_printf_float+0xf0>
 8006372:	464b      	mov	r3, r9
 8006374:	2b00      	cmp	r3, #0
 8006376:	bfbc      	itt	lt
 8006378:	232d      	movlt	r3, #45	; 0x2d
 800637a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800637e:	487f      	ldr	r0, [pc, #508]	; (800657c <_printf_float+0x2e8>)
 8006380:	4b7f      	ldr	r3, [pc, #508]	; (8006580 <_printf_float+0x2ec>)
 8006382:	e7d1      	b.n	8006328 <_printf_float+0x94>
 8006384:	6863      	ldr	r3, [r4, #4]
 8006386:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800638a:	9206      	str	r2, [sp, #24]
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	d13f      	bne.n	8006410 <_printf_float+0x17c>
 8006390:	2306      	movs	r3, #6
 8006392:	6063      	str	r3, [r4, #4]
 8006394:	9b05      	ldr	r3, [sp, #20]
 8006396:	6861      	ldr	r1, [r4, #4]
 8006398:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800639c:	2300      	movs	r3, #0
 800639e:	9303      	str	r3, [sp, #12]
 80063a0:	ab0a      	add	r3, sp, #40	; 0x28
 80063a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80063a6:	ab09      	add	r3, sp, #36	; 0x24
 80063a8:	ec49 8b10 	vmov	d0, r8, r9
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	6022      	str	r2, [r4, #0]
 80063b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063b4:	4628      	mov	r0, r5
 80063b6:	f7ff fecd 	bl	8006154 <__cvt>
 80063ba:	9b06      	ldr	r3, [sp, #24]
 80063bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063be:	2b47      	cmp	r3, #71	; 0x47
 80063c0:	4680      	mov	r8, r0
 80063c2:	d108      	bne.n	80063d6 <_printf_float+0x142>
 80063c4:	1cc8      	adds	r0, r1, #3
 80063c6:	db02      	blt.n	80063ce <_printf_float+0x13a>
 80063c8:	6863      	ldr	r3, [r4, #4]
 80063ca:	4299      	cmp	r1, r3
 80063cc:	dd41      	ble.n	8006452 <_printf_float+0x1be>
 80063ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80063d2:	fa5f fb8b 	uxtb.w	fp, fp
 80063d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063da:	d820      	bhi.n	800641e <_printf_float+0x18a>
 80063dc:	3901      	subs	r1, #1
 80063de:	465a      	mov	r2, fp
 80063e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063e4:	9109      	str	r1, [sp, #36]	; 0x24
 80063e6:	f7ff ff17 	bl	8006218 <__exponent>
 80063ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063ec:	1813      	adds	r3, r2, r0
 80063ee:	2a01      	cmp	r2, #1
 80063f0:	4681      	mov	r9, r0
 80063f2:	6123      	str	r3, [r4, #16]
 80063f4:	dc02      	bgt.n	80063fc <_printf_float+0x168>
 80063f6:	6822      	ldr	r2, [r4, #0]
 80063f8:	07d2      	lsls	r2, r2, #31
 80063fa:	d501      	bpl.n	8006400 <_printf_float+0x16c>
 80063fc:	3301      	adds	r3, #1
 80063fe:	6123      	str	r3, [r4, #16]
 8006400:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006404:	2b00      	cmp	r3, #0
 8006406:	d09c      	beq.n	8006342 <_printf_float+0xae>
 8006408:	232d      	movs	r3, #45	; 0x2d
 800640a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800640e:	e798      	b.n	8006342 <_printf_float+0xae>
 8006410:	9a06      	ldr	r2, [sp, #24]
 8006412:	2a47      	cmp	r2, #71	; 0x47
 8006414:	d1be      	bne.n	8006394 <_printf_float+0x100>
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1bc      	bne.n	8006394 <_printf_float+0x100>
 800641a:	2301      	movs	r3, #1
 800641c:	e7b9      	b.n	8006392 <_printf_float+0xfe>
 800641e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006422:	d118      	bne.n	8006456 <_printf_float+0x1c2>
 8006424:	2900      	cmp	r1, #0
 8006426:	6863      	ldr	r3, [r4, #4]
 8006428:	dd0b      	ble.n	8006442 <_printf_float+0x1ae>
 800642a:	6121      	str	r1, [r4, #16]
 800642c:	b913      	cbnz	r3, 8006434 <_printf_float+0x1a0>
 800642e:	6822      	ldr	r2, [r4, #0]
 8006430:	07d0      	lsls	r0, r2, #31
 8006432:	d502      	bpl.n	800643a <_printf_float+0x1a6>
 8006434:	3301      	adds	r3, #1
 8006436:	440b      	add	r3, r1
 8006438:	6123      	str	r3, [r4, #16]
 800643a:	65a1      	str	r1, [r4, #88]	; 0x58
 800643c:	f04f 0900 	mov.w	r9, #0
 8006440:	e7de      	b.n	8006400 <_printf_float+0x16c>
 8006442:	b913      	cbnz	r3, 800644a <_printf_float+0x1b6>
 8006444:	6822      	ldr	r2, [r4, #0]
 8006446:	07d2      	lsls	r2, r2, #31
 8006448:	d501      	bpl.n	800644e <_printf_float+0x1ba>
 800644a:	3302      	adds	r3, #2
 800644c:	e7f4      	b.n	8006438 <_printf_float+0x1a4>
 800644e:	2301      	movs	r3, #1
 8006450:	e7f2      	b.n	8006438 <_printf_float+0x1a4>
 8006452:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006458:	4299      	cmp	r1, r3
 800645a:	db05      	blt.n	8006468 <_printf_float+0x1d4>
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	6121      	str	r1, [r4, #16]
 8006460:	07d8      	lsls	r0, r3, #31
 8006462:	d5ea      	bpl.n	800643a <_printf_float+0x1a6>
 8006464:	1c4b      	adds	r3, r1, #1
 8006466:	e7e7      	b.n	8006438 <_printf_float+0x1a4>
 8006468:	2900      	cmp	r1, #0
 800646a:	bfd4      	ite	le
 800646c:	f1c1 0202 	rsble	r2, r1, #2
 8006470:	2201      	movgt	r2, #1
 8006472:	4413      	add	r3, r2
 8006474:	e7e0      	b.n	8006438 <_printf_float+0x1a4>
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	055a      	lsls	r2, r3, #21
 800647a:	d407      	bmi.n	800648c <_printf_float+0x1f8>
 800647c:	6923      	ldr	r3, [r4, #16]
 800647e:	4642      	mov	r2, r8
 8006480:	4631      	mov	r1, r6
 8006482:	4628      	mov	r0, r5
 8006484:	47b8      	blx	r7
 8006486:	3001      	adds	r0, #1
 8006488:	d12c      	bne.n	80064e4 <_printf_float+0x250>
 800648a:	e764      	b.n	8006356 <_printf_float+0xc2>
 800648c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006490:	f240 80e0 	bls.w	8006654 <_printf_float+0x3c0>
 8006494:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006498:	2200      	movs	r2, #0
 800649a:	2300      	movs	r3, #0
 800649c:	f7fa fb14 	bl	8000ac8 <__aeabi_dcmpeq>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	d034      	beq.n	800650e <_printf_float+0x27a>
 80064a4:	4a37      	ldr	r2, [pc, #220]	; (8006584 <_printf_float+0x2f0>)
 80064a6:	2301      	movs	r3, #1
 80064a8:	4631      	mov	r1, r6
 80064aa:	4628      	mov	r0, r5
 80064ac:	47b8      	blx	r7
 80064ae:	3001      	adds	r0, #1
 80064b0:	f43f af51 	beq.w	8006356 <_printf_float+0xc2>
 80064b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064b8:	429a      	cmp	r2, r3
 80064ba:	db02      	blt.n	80064c2 <_printf_float+0x22e>
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	07d8      	lsls	r0, r3, #31
 80064c0:	d510      	bpl.n	80064e4 <_printf_float+0x250>
 80064c2:	ee18 3a10 	vmov	r3, s16
 80064c6:	4652      	mov	r2, sl
 80064c8:	4631      	mov	r1, r6
 80064ca:	4628      	mov	r0, r5
 80064cc:	47b8      	blx	r7
 80064ce:	3001      	adds	r0, #1
 80064d0:	f43f af41 	beq.w	8006356 <_printf_float+0xc2>
 80064d4:	f04f 0800 	mov.w	r8, #0
 80064d8:	f104 091a 	add.w	r9, r4, #26
 80064dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064de:	3b01      	subs	r3, #1
 80064e0:	4543      	cmp	r3, r8
 80064e2:	dc09      	bgt.n	80064f8 <_printf_float+0x264>
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	079b      	lsls	r3, r3, #30
 80064e8:	f100 8105 	bmi.w	80066f6 <_printf_float+0x462>
 80064ec:	68e0      	ldr	r0, [r4, #12]
 80064ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064f0:	4298      	cmp	r0, r3
 80064f2:	bfb8      	it	lt
 80064f4:	4618      	movlt	r0, r3
 80064f6:	e730      	b.n	800635a <_printf_float+0xc6>
 80064f8:	2301      	movs	r3, #1
 80064fa:	464a      	mov	r2, r9
 80064fc:	4631      	mov	r1, r6
 80064fe:	4628      	mov	r0, r5
 8006500:	47b8      	blx	r7
 8006502:	3001      	adds	r0, #1
 8006504:	f43f af27 	beq.w	8006356 <_printf_float+0xc2>
 8006508:	f108 0801 	add.w	r8, r8, #1
 800650c:	e7e6      	b.n	80064dc <_printf_float+0x248>
 800650e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006510:	2b00      	cmp	r3, #0
 8006512:	dc39      	bgt.n	8006588 <_printf_float+0x2f4>
 8006514:	4a1b      	ldr	r2, [pc, #108]	; (8006584 <_printf_float+0x2f0>)
 8006516:	2301      	movs	r3, #1
 8006518:	4631      	mov	r1, r6
 800651a:	4628      	mov	r0, r5
 800651c:	47b8      	blx	r7
 800651e:	3001      	adds	r0, #1
 8006520:	f43f af19 	beq.w	8006356 <_printf_float+0xc2>
 8006524:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006528:	4313      	orrs	r3, r2
 800652a:	d102      	bne.n	8006532 <_printf_float+0x29e>
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	07d9      	lsls	r1, r3, #31
 8006530:	d5d8      	bpl.n	80064e4 <_printf_float+0x250>
 8006532:	ee18 3a10 	vmov	r3, s16
 8006536:	4652      	mov	r2, sl
 8006538:	4631      	mov	r1, r6
 800653a:	4628      	mov	r0, r5
 800653c:	47b8      	blx	r7
 800653e:	3001      	adds	r0, #1
 8006540:	f43f af09 	beq.w	8006356 <_printf_float+0xc2>
 8006544:	f04f 0900 	mov.w	r9, #0
 8006548:	f104 0a1a 	add.w	sl, r4, #26
 800654c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654e:	425b      	negs	r3, r3
 8006550:	454b      	cmp	r3, r9
 8006552:	dc01      	bgt.n	8006558 <_printf_float+0x2c4>
 8006554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006556:	e792      	b.n	800647e <_printf_float+0x1ea>
 8006558:	2301      	movs	r3, #1
 800655a:	4652      	mov	r2, sl
 800655c:	4631      	mov	r1, r6
 800655e:	4628      	mov	r0, r5
 8006560:	47b8      	blx	r7
 8006562:	3001      	adds	r0, #1
 8006564:	f43f aef7 	beq.w	8006356 <_printf_float+0xc2>
 8006568:	f109 0901 	add.w	r9, r9, #1
 800656c:	e7ee      	b.n	800654c <_printf_float+0x2b8>
 800656e:	bf00      	nop
 8006570:	7fefffff 	.word	0x7fefffff
 8006574:	08009550 	.word	0x08009550
 8006578:	08009554 	.word	0x08009554
 800657c:	0800955c 	.word	0x0800955c
 8006580:	08009558 	.word	0x08009558
 8006584:	08009560 	.word	0x08009560
 8006588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800658a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800658c:	429a      	cmp	r2, r3
 800658e:	bfa8      	it	ge
 8006590:	461a      	movge	r2, r3
 8006592:	2a00      	cmp	r2, #0
 8006594:	4691      	mov	r9, r2
 8006596:	dc37      	bgt.n	8006608 <_printf_float+0x374>
 8006598:	f04f 0b00 	mov.w	fp, #0
 800659c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065a0:	f104 021a 	add.w	r2, r4, #26
 80065a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065a6:	9305      	str	r3, [sp, #20]
 80065a8:	eba3 0309 	sub.w	r3, r3, r9
 80065ac:	455b      	cmp	r3, fp
 80065ae:	dc33      	bgt.n	8006618 <_printf_float+0x384>
 80065b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065b4:	429a      	cmp	r2, r3
 80065b6:	db3b      	blt.n	8006630 <_printf_float+0x39c>
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	07da      	lsls	r2, r3, #31
 80065bc:	d438      	bmi.n	8006630 <_printf_float+0x39c>
 80065be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065c0:	9a05      	ldr	r2, [sp, #20]
 80065c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065c4:	1a9a      	subs	r2, r3, r2
 80065c6:	eba3 0901 	sub.w	r9, r3, r1
 80065ca:	4591      	cmp	r9, r2
 80065cc:	bfa8      	it	ge
 80065ce:	4691      	movge	r9, r2
 80065d0:	f1b9 0f00 	cmp.w	r9, #0
 80065d4:	dc35      	bgt.n	8006642 <_printf_float+0x3ae>
 80065d6:	f04f 0800 	mov.w	r8, #0
 80065da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065de:	f104 0a1a 	add.w	sl, r4, #26
 80065e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065e6:	1a9b      	subs	r3, r3, r2
 80065e8:	eba3 0309 	sub.w	r3, r3, r9
 80065ec:	4543      	cmp	r3, r8
 80065ee:	f77f af79 	ble.w	80064e4 <_printf_float+0x250>
 80065f2:	2301      	movs	r3, #1
 80065f4:	4652      	mov	r2, sl
 80065f6:	4631      	mov	r1, r6
 80065f8:	4628      	mov	r0, r5
 80065fa:	47b8      	blx	r7
 80065fc:	3001      	adds	r0, #1
 80065fe:	f43f aeaa 	beq.w	8006356 <_printf_float+0xc2>
 8006602:	f108 0801 	add.w	r8, r8, #1
 8006606:	e7ec      	b.n	80065e2 <_printf_float+0x34e>
 8006608:	4613      	mov	r3, r2
 800660a:	4631      	mov	r1, r6
 800660c:	4642      	mov	r2, r8
 800660e:	4628      	mov	r0, r5
 8006610:	47b8      	blx	r7
 8006612:	3001      	adds	r0, #1
 8006614:	d1c0      	bne.n	8006598 <_printf_float+0x304>
 8006616:	e69e      	b.n	8006356 <_printf_float+0xc2>
 8006618:	2301      	movs	r3, #1
 800661a:	4631      	mov	r1, r6
 800661c:	4628      	mov	r0, r5
 800661e:	9205      	str	r2, [sp, #20]
 8006620:	47b8      	blx	r7
 8006622:	3001      	adds	r0, #1
 8006624:	f43f ae97 	beq.w	8006356 <_printf_float+0xc2>
 8006628:	9a05      	ldr	r2, [sp, #20]
 800662a:	f10b 0b01 	add.w	fp, fp, #1
 800662e:	e7b9      	b.n	80065a4 <_printf_float+0x310>
 8006630:	ee18 3a10 	vmov	r3, s16
 8006634:	4652      	mov	r2, sl
 8006636:	4631      	mov	r1, r6
 8006638:	4628      	mov	r0, r5
 800663a:	47b8      	blx	r7
 800663c:	3001      	adds	r0, #1
 800663e:	d1be      	bne.n	80065be <_printf_float+0x32a>
 8006640:	e689      	b.n	8006356 <_printf_float+0xc2>
 8006642:	9a05      	ldr	r2, [sp, #20]
 8006644:	464b      	mov	r3, r9
 8006646:	4442      	add	r2, r8
 8006648:	4631      	mov	r1, r6
 800664a:	4628      	mov	r0, r5
 800664c:	47b8      	blx	r7
 800664e:	3001      	adds	r0, #1
 8006650:	d1c1      	bne.n	80065d6 <_printf_float+0x342>
 8006652:	e680      	b.n	8006356 <_printf_float+0xc2>
 8006654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006656:	2a01      	cmp	r2, #1
 8006658:	dc01      	bgt.n	800665e <_printf_float+0x3ca>
 800665a:	07db      	lsls	r3, r3, #31
 800665c:	d538      	bpl.n	80066d0 <_printf_float+0x43c>
 800665e:	2301      	movs	r3, #1
 8006660:	4642      	mov	r2, r8
 8006662:	4631      	mov	r1, r6
 8006664:	4628      	mov	r0, r5
 8006666:	47b8      	blx	r7
 8006668:	3001      	adds	r0, #1
 800666a:	f43f ae74 	beq.w	8006356 <_printf_float+0xc2>
 800666e:	ee18 3a10 	vmov	r3, s16
 8006672:	4652      	mov	r2, sl
 8006674:	4631      	mov	r1, r6
 8006676:	4628      	mov	r0, r5
 8006678:	47b8      	blx	r7
 800667a:	3001      	adds	r0, #1
 800667c:	f43f ae6b 	beq.w	8006356 <_printf_float+0xc2>
 8006680:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006684:	2200      	movs	r2, #0
 8006686:	2300      	movs	r3, #0
 8006688:	f7fa fa1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800668c:	b9d8      	cbnz	r0, 80066c6 <_printf_float+0x432>
 800668e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006690:	f108 0201 	add.w	r2, r8, #1
 8006694:	3b01      	subs	r3, #1
 8006696:	4631      	mov	r1, r6
 8006698:	4628      	mov	r0, r5
 800669a:	47b8      	blx	r7
 800669c:	3001      	adds	r0, #1
 800669e:	d10e      	bne.n	80066be <_printf_float+0x42a>
 80066a0:	e659      	b.n	8006356 <_printf_float+0xc2>
 80066a2:	2301      	movs	r3, #1
 80066a4:	4652      	mov	r2, sl
 80066a6:	4631      	mov	r1, r6
 80066a8:	4628      	mov	r0, r5
 80066aa:	47b8      	blx	r7
 80066ac:	3001      	adds	r0, #1
 80066ae:	f43f ae52 	beq.w	8006356 <_printf_float+0xc2>
 80066b2:	f108 0801 	add.w	r8, r8, #1
 80066b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b8:	3b01      	subs	r3, #1
 80066ba:	4543      	cmp	r3, r8
 80066bc:	dcf1      	bgt.n	80066a2 <_printf_float+0x40e>
 80066be:	464b      	mov	r3, r9
 80066c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066c4:	e6dc      	b.n	8006480 <_printf_float+0x1ec>
 80066c6:	f04f 0800 	mov.w	r8, #0
 80066ca:	f104 0a1a 	add.w	sl, r4, #26
 80066ce:	e7f2      	b.n	80066b6 <_printf_float+0x422>
 80066d0:	2301      	movs	r3, #1
 80066d2:	4642      	mov	r2, r8
 80066d4:	e7df      	b.n	8006696 <_printf_float+0x402>
 80066d6:	2301      	movs	r3, #1
 80066d8:	464a      	mov	r2, r9
 80066da:	4631      	mov	r1, r6
 80066dc:	4628      	mov	r0, r5
 80066de:	47b8      	blx	r7
 80066e0:	3001      	adds	r0, #1
 80066e2:	f43f ae38 	beq.w	8006356 <_printf_float+0xc2>
 80066e6:	f108 0801 	add.w	r8, r8, #1
 80066ea:	68e3      	ldr	r3, [r4, #12]
 80066ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066ee:	1a5b      	subs	r3, r3, r1
 80066f0:	4543      	cmp	r3, r8
 80066f2:	dcf0      	bgt.n	80066d6 <_printf_float+0x442>
 80066f4:	e6fa      	b.n	80064ec <_printf_float+0x258>
 80066f6:	f04f 0800 	mov.w	r8, #0
 80066fa:	f104 0919 	add.w	r9, r4, #25
 80066fe:	e7f4      	b.n	80066ea <_printf_float+0x456>

08006700 <_printf_common>:
 8006700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006704:	4616      	mov	r6, r2
 8006706:	4699      	mov	r9, r3
 8006708:	688a      	ldr	r2, [r1, #8]
 800670a:	690b      	ldr	r3, [r1, #16]
 800670c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006710:	4293      	cmp	r3, r2
 8006712:	bfb8      	it	lt
 8006714:	4613      	movlt	r3, r2
 8006716:	6033      	str	r3, [r6, #0]
 8006718:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800671c:	4607      	mov	r7, r0
 800671e:	460c      	mov	r4, r1
 8006720:	b10a      	cbz	r2, 8006726 <_printf_common+0x26>
 8006722:	3301      	adds	r3, #1
 8006724:	6033      	str	r3, [r6, #0]
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	0699      	lsls	r1, r3, #26
 800672a:	bf42      	ittt	mi
 800672c:	6833      	ldrmi	r3, [r6, #0]
 800672e:	3302      	addmi	r3, #2
 8006730:	6033      	strmi	r3, [r6, #0]
 8006732:	6825      	ldr	r5, [r4, #0]
 8006734:	f015 0506 	ands.w	r5, r5, #6
 8006738:	d106      	bne.n	8006748 <_printf_common+0x48>
 800673a:	f104 0a19 	add.w	sl, r4, #25
 800673e:	68e3      	ldr	r3, [r4, #12]
 8006740:	6832      	ldr	r2, [r6, #0]
 8006742:	1a9b      	subs	r3, r3, r2
 8006744:	42ab      	cmp	r3, r5
 8006746:	dc26      	bgt.n	8006796 <_printf_common+0x96>
 8006748:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800674c:	1e13      	subs	r3, r2, #0
 800674e:	6822      	ldr	r2, [r4, #0]
 8006750:	bf18      	it	ne
 8006752:	2301      	movne	r3, #1
 8006754:	0692      	lsls	r2, r2, #26
 8006756:	d42b      	bmi.n	80067b0 <_printf_common+0xb0>
 8006758:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800675c:	4649      	mov	r1, r9
 800675e:	4638      	mov	r0, r7
 8006760:	47c0      	blx	r8
 8006762:	3001      	adds	r0, #1
 8006764:	d01e      	beq.n	80067a4 <_printf_common+0xa4>
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	68e5      	ldr	r5, [r4, #12]
 800676a:	6832      	ldr	r2, [r6, #0]
 800676c:	f003 0306 	and.w	r3, r3, #6
 8006770:	2b04      	cmp	r3, #4
 8006772:	bf08      	it	eq
 8006774:	1aad      	subeq	r5, r5, r2
 8006776:	68a3      	ldr	r3, [r4, #8]
 8006778:	6922      	ldr	r2, [r4, #16]
 800677a:	bf0c      	ite	eq
 800677c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006780:	2500      	movne	r5, #0
 8006782:	4293      	cmp	r3, r2
 8006784:	bfc4      	itt	gt
 8006786:	1a9b      	subgt	r3, r3, r2
 8006788:	18ed      	addgt	r5, r5, r3
 800678a:	2600      	movs	r6, #0
 800678c:	341a      	adds	r4, #26
 800678e:	42b5      	cmp	r5, r6
 8006790:	d11a      	bne.n	80067c8 <_printf_common+0xc8>
 8006792:	2000      	movs	r0, #0
 8006794:	e008      	b.n	80067a8 <_printf_common+0xa8>
 8006796:	2301      	movs	r3, #1
 8006798:	4652      	mov	r2, sl
 800679a:	4649      	mov	r1, r9
 800679c:	4638      	mov	r0, r7
 800679e:	47c0      	blx	r8
 80067a0:	3001      	adds	r0, #1
 80067a2:	d103      	bne.n	80067ac <_printf_common+0xac>
 80067a4:	f04f 30ff 	mov.w	r0, #4294967295
 80067a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ac:	3501      	adds	r5, #1
 80067ae:	e7c6      	b.n	800673e <_printf_common+0x3e>
 80067b0:	18e1      	adds	r1, r4, r3
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	2030      	movs	r0, #48	; 0x30
 80067b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067ba:	4422      	add	r2, r4
 80067bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067c4:	3302      	adds	r3, #2
 80067c6:	e7c7      	b.n	8006758 <_printf_common+0x58>
 80067c8:	2301      	movs	r3, #1
 80067ca:	4622      	mov	r2, r4
 80067cc:	4649      	mov	r1, r9
 80067ce:	4638      	mov	r0, r7
 80067d0:	47c0      	blx	r8
 80067d2:	3001      	adds	r0, #1
 80067d4:	d0e6      	beq.n	80067a4 <_printf_common+0xa4>
 80067d6:	3601      	adds	r6, #1
 80067d8:	e7d9      	b.n	800678e <_printf_common+0x8e>
	...

080067dc <_printf_i>:
 80067dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067e0:	7e0f      	ldrb	r7, [r1, #24]
 80067e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067e4:	2f78      	cmp	r7, #120	; 0x78
 80067e6:	4691      	mov	r9, r2
 80067e8:	4680      	mov	r8, r0
 80067ea:	460c      	mov	r4, r1
 80067ec:	469a      	mov	sl, r3
 80067ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067f2:	d807      	bhi.n	8006804 <_printf_i+0x28>
 80067f4:	2f62      	cmp	r7, #98	; 0x62
 80067f6:	d80a      	bhi.n	800680e <_printf_i+0x32>
 80067f8:	2f00      	cmp	r7, #0
 80067fa:	f000 80d8 	beq.w	80069ae <_printf_i+0x1d2>
 80067fe:	2f58      	cmp	r7, #88	; 0x58
 8006800:	f000 80a3 	beq.w	800694a <_printf_i+0x16e>
 8006804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006808:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800680c:	e03a      	b.n	8006884 <_printf_i+0xa8>
 800680e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006812:	2b15      	cmp	r3, #21
 8006814:	d8f6      	bhi.n	8006804 <_printf_i+0x28>
 8006816:	a101      	add	r1, pc, #4	; (adr r1, 800681c <_printf_i+0x40>)
 8006818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800681c:	08006875 	.word	0x08006875
 8006820:	08006889 	.word	0x08006889
 8006824:	08006805 	.word	0x08006805
 8006828:	08006805 	.word	0x08006805
 800682c:	08006805 	.word	0x08006805
 8006830:	08006805 	.word	0x08006805
 8006834:	08006889 	.word	0x08006889
 8006838:	08006805 	.word	0x08006805
 800683c:	08006805 	.word	0x08006805
 8006840:	08006805 	.word	0x08006805
 8006844:	08006805 	.word	0x08006805
 8006848:	08006995 	.word	0x08006995
 800684c:	080068b9 	.word	0x080068b9
 8006850:	08006977 	.word	0x08006977
 8006854:	08006805 	.word	0x08006805
 8006858:	08006805 	.word	0x08006805
 800685c:	080069b7 	.word	0x080069b7
 8006860:	08006805 	.word	0x08006805
 8006864:	080068b9 	.word	0x080068b9
 8006868:	08006805 	.word	0x08006805
 800686c:	08006805 	.word	0x08006805
 8006870:	0800697f 	.word	0x0800697f
 8006874:	682b      	ldr	r3, [r5, #0]
 8006876:	1d1a      	adds	r2, r3, #4
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	602a      	str	r2, [r5, #0]
 800687c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006884:	2301      	movs	r3, #1
 8006886:	e0a3      	b.n	80069d0 <_printf_i+0x1f4>
 8006888:	6820      	ldr	r0, [r4, #0]
 800688a:	6829      	ldr	r1, [r5, #0]
 800688c:	0606      	lsls	r6, r0, #24
 800688e:	f101 0304 	add.w	r3, r1, #4
 8006892:	d50a      	bpl.n	80068aa <_printf_i+0xce>
 8006894:	680e      	ldr	r6, [r1, #0]
 8006896:	602b      	str	r3, [r5, #0]
 8006898:	2e00      	cmp	r6, #0
 800689a:	da03      	bge.n	80068a4 <_printf_i+0xc8>
 800689c:	232d      	movs	r3, #45	; 0x2d
 800689e:	4276      	negs	r6, r6
 80068a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068a4:	485e      	ldr	r0, [pc, #376]	; (8006a20 <_printf_i+0x244>)
 80068a6:	230a      	movs	r3, #10
 80068a8:	e019      	b.n	80068de <_printf_i+0x102>
 80068aa:	680e      	ldr	r6, [r1, #0]
 80068ac:	602b      	str	r3, [r5, #0]
 80068ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068b2:	bf18      	it	ne
 80068b4:	b236      	sxthne	r6, r6
 80068b6:	e7ef      	b.n	8006898 <_printf_i+0xbc>
 80068b8:	682b      	ldr	r3, [r5, #0]
 80068ba:	6820      	ldr	r0, [r4, #0]
 80068bc:	1d19      	adds	r1, r3, #4
 80068be:	6029      	str	r1, [r5, #0]
 80068c0:	0601      	lsls	r1, r0, #24
 80068c2:	d501      	bpl.n	80068c8 <_printf_i+0xec>
 80068c4:	681e      	ldr	r6, [r3, #0]
 80068c6:	e002      	b.n	80068ce <_printf_i+0xf2>
 80068c8:	0646      	lsls	r6, r0, #25
 80068ca:	d5fb      	bpl.n	80068c4 <_printf_i+0xe8>
 80068cc:	881e      	ldrh	r6, [r3, #0]
 80068ce:	4854      	ldr	r0, [pc, #336]	; (8006a20 <_printf_i+0x244>)
 80068d0:	2f6f      	cmp	r7, #111	; 0x6f
 80068d2:	bf0c      	ite	eq
 80068d4:	2308      	moveq	r3, #8
 80068d6:	230a      	movne	r3, #10
 80068d8:	2100      	movs	r1, #0
 80068da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068de:	6865      	ldr	r5, [r4, #4]
 80068e0:	60a5      	str	r5, [r4, #8]
 80068e2:	2d00      	cmp	r5, #0
 80068e4:	bfa2      	ittt	ge
 80068e6:	6821      	ldrge	r1, [r4, #0]
 80068e8:	f021 0104 	bicge.w	r1, r1, #4
 80068ec:	6021      	strge	r1, [r4, #0]
 80068ee:	b90e      	cbnz	r6, 80068f4 <_printf_i+0x118>
 80068f0:	2d00      	cmp	r5, #0
 80068f2:	d04d      	beq.n	8006990 <_printf_i+0x1b4>
 80068f4:	4615      	mov	r5, r2
 80068f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80068fa:	fb03 6711 	mls	r7, r3, r1, r6
 80068fe:	5dc7      	ldrb	r7, [r0, r7]
 8006900:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006904:	4637      	mov	r7, r6
 8006906:	42bb      	cmp	r3, r7
 8006908:	460e      	mov	r6, r1
 800690a:	d9f4      	bls.n	80068f6 <_printf_i+0x11a>
 800690c:	2b08      	cmp	r3, #8
 800690e:	d10b      	bne.n	8006928 <_printf_i+0x14c>
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	07de      	lsls	r6, r3, #31
 8006914:	d508      	bpl.n	8006928 <_printf_i+0x14c>
 8006916:	6923      	ldr	r3, [r4, #16]
 8006918:	6861      	ldr	r1, [r4, #4]
 800691a:	4299      	cmp	r1, r3
 800691c:	bfde      	ittt	le
 800691e:	2330      	movle	r3, #48	; 0x30
 8006920:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006924:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006928:	1b52      	subs	r2, r2, r5
 800692a:	6122      	str	r2, [r4, #16]
 800692c:	f8cd a000 	str.w	sl, [sp]
 8006930:	464b      	mov	r3, r9
 8006932:	aa03      	add	r2, sp, #12
 8006934:	4621      	mov	r1, r4
 8006936:	4640      	mov	r0, r8
 8006938:	f7ff fee2 	bl	8006700 <_printf_common>
 800693c:	3001      	adds	r0, #1
 800693e:	d14c      	bne.n	80069da <_printf_i+0x1fe>
 8006940:	f04f 30ff 	mov.w	r0, #4294967295
 8006944:	b004      	add	sp, #16
 8006946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694a:	4835      	ldr	r0, [pc, #212]	; (8006a20 <_printf_i+0x244>)
 800694c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006950:	6829      	ldr	r1, [r5, #0]
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	f851 6b04 	ldr.w	r6, [r1], #4
 8006958:	6029      	str	r1, [r5, #0]
 800695a:	061d      	lsls	r5, r3, #24
 800695c:	d514      	bpl.n	8006988 <_printf_i+0x1ac>
 800695e:	07df      	lsls	r7, r3, #31
 8006960:	bf44      	itt	mi
 8006962:	f043 0320 	orrmi.w	r3, r3, #32
 8006966:	6023      	strmi	r3, [r4, #0]
 8006968:	b91e      	cbnz	r6, 8006972 <_printf_i+0x196>
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	f023 0320 	bic.w	r3, r3, #32
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	2310      	movs	r3, #16
 8006974:	e7b0      	b.n	80068d8 <_printf_i+0xfc>
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	f043 0320 	orr.w	r3, r3, #32
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	2378      	movs	r3, #120	; 0x78
 8006980:	4828      	ldr	r0, [pc, #160]	; (8006a24 <_printf_i+0x248>)
 8006982:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006986:	e7e3      	b.n	8006950 <_printf_i+0x174>
 8006988:	0659      	lsls	r1, r3, #25
 800698a:	bf48      	it	mi
 800698c:	b2b6      	uxthmi	r6, r6
 800698e:	e7e6      	b.n	800695e <_printf_i+0x182>
 8006990:	4615      	mov	r5, r2
 8006992:	e7bb      	b.n	800690c <_printf_i+0x130>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	6826      	ldr	r6, [r4, #0]
 8006998:	6961      	ldr	r1, [r4, #20]
 800699a:	1d18      	adds	r0, r3, #4
 800699c:	6028      	str	r0, [r5, #0]
 800699e:	0635      	lsls	r5, r6, #24
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	d501      	bpl.n	80069a8 <_printf_i+0x1cc>
 80069a4:	6019      	str	r1, [r3, #0]
 80069a6:	e002      	b.n	80069ae <_printf_i+0x1d2>
 80069a8:	0670      	lsls	r0, r6, #25
 80069aa:	d5fb      	bpl.n	80069a4 <_printf_i+0x1c8>
 80069ac:	8019      	strh	r1, [r3, #0]
 80069ae:	2300      	movs	r3, #0
 80069b0:	6123      	str	r3, [r4, #16]
 80069b2:	4615      	mov	r5, r2
 80069b4:	e7ba      	b.n	800692c <_printf_i+0x150>
 80069b6:	682b      	ldr	r3, [r5, #0]
 80069b8:	1d1a      	adds	r2, r3, #4
 80069ba:	602a      	str	r2, [r5, #0]
 80069bc:	681d      	ldr	r5, [r3, #0]
 80069be:	6862      	ldr	r2, [r4, #4]
 80069c0:	2100      	movs	r1, #0
 80069c2:	4628      	mov	r0, r5
 80069c4:	f7f9 fc0c 	bl	80001e0 <memchr>
 80069c8:	b108      	cbz	r0, 80069ce <_printf_i+0x1f2>
 80069ca:	1b40      	subs	r0, r0, r5
 80069cc:	6060      	str	r0, [r4, #4]
 80069ce:	6863      	ldr	r3, [r4, #4]
 80069d0:	6123      	str	r3, [r4, #16]
 80069d2:	2300      	movs	r3, #0
 80069d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069d8:	e7a8      	b.n	800692c <_printf_i+0x150>
 80069da:	6923      	ldr	r3, [r4, #16]
 80069dc:	462a      	mov	r2, r5
 80069de:	4649      	mov	r1, r9
 80069e0:	4640      	mov	r0, r8
 80069e2:	47d0      	blx	sl
 80069e4:	3001      	adds	r0, #1
 80069e6:	d0ab      	beq.n	8006940 <_printf_i+0x164>
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	079b      	lsls	r3, r3, #30
 80069ec:	d413      	bmi.n	8006a16 <_printf_i+0x23a>
 80069ee:	68e0      	ldr	r0, [r4, #12]
 80069f0:	9b03      	ldr	r3, [sp, #12]
 80069f2:	4298      	cmp	r0, r3
 80069f4:	bfb8      	it	lt
 80069f6:	4618      	movlt	r0, r3
 80069f8:	e7a4      	b.n	8006944 <_printf_i+0x168>
 80069fa:	2301      	movs	r3, #1
 80069fc:	4632      	mov	r2, r6
 80069fe:	4649      	mov	r1, r9
 8006a00:	4640      	mov	r0, r8
 8006a02:	47d0      	blx	sl
 8006a04:	3001      	adds	r0, #1
 8006a06:	d09b      	beq.n	8006940 <_printf_i+0x164>
 8006a08:	3501      	adds	r5, #1
 8006a0a:	68e3      	ldr	r3, [r4, #12]
 8006a0c:	9903      	ldr	r1, [sp, #12]
 8006a0e:	1a5b      	subs	r3, r3, r1
 8006a10:	42ab      	cmp	r3, r5
 8006a12:	dcf2      	bgt.n	80069fa <_printf_i+0x21e>
 8006a14:	e7eb      	b.n	80069ee <_printf_i+0x212>
 8006a16:	2500      	movs	r5, #0
 8006a18:	f104 0619 	add.w	r6, r4, #25
 8006a1c:	e7f5      	b.n	8006a0a <_printf_i+0x22e>
 8006a1e:	bf00      	nop
 8006a20:	08009562 	.word	0x08009562
 8006a24:	08009573 	.word	0x08009573

08006a28 <siprintf>:
 8006a28:	b40e      	push	{r1, r2, r3}
 8006a2a:	b500      	push	{lr}
 8006a2c:	b09c      	sub	sp, #112	; 0x70
 8006a2e:	ab1d      	add	r3, sp, #116	; 0x74
 8006a30:	9002      	str	r0, [sp, #8]
 8006a32:	9006      	str	r0, [sp, #24]
 8006a34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a38:	4809      	ldr	r0, [pc, #36]	; (8006a60 <siprintf+0x38>)
 8006a3a:	9107      	str	r1, [sp, #28]
 8006a3c:	9104      	str	r1, [sp, #16]
 8006a3e:	4909      	ldr	r1, [pc, #36]	; (8006a64 <siprintf+0x3c>)
 8006a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a44:	9105      	str	r1, [sp, #20]
 8006a46:	6800      	ldr	r0, [r0, #0]
 8006a48:	9301      	str	r3, [sp, #4]
 8006a4a:	a902      	add	r1, sp, #8
 8006a4c:	f001 fb76 	bl	800813c <_svfiprintf_r>
 8006a50:	9b02      	ldr	r3, [sp, #8]
 8006a52:	2200      	movs	r2, #0
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	b01c      	add	sp, #112	; 0x70
 8006a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a5c:	b003      	add	sp, #12
 8006a5e:	4770      	bx	lr
 8006a60:	2000000c 	.word	0x2000000c
 8006a64:	ffff0208 	.word	0xffff0208

08006a68 <quorem>:
 8006a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	6903      	ldr	r3, [r0, #16]
 8006a6e:	690c      	ldr	r4, [r1, #16]
 8006a70:	42a3      	cmp	r3, r4
 8006a72:	4607      	mov	r7, r0
 8006a74:	f2c0 8081 	blt.w	8006b7a <quorem+0x112>
 8006a78:	3c01      	subs	r4, #1
 8006a7a:	f101 0814 	add.w	r8, r1, #20
 8006a7e:	f100 0514 	add.w	r5, r0, #20
 8006a82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a90:	3301      	adds	r3, #1
 8006a92:	429a      	cmp	r2, r3
 8006a94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006aa0:	d331      	bcc.n	8006b06 <quorem+0x9e>
 8006aa2:	f04f 0e00 	mov.w	lr, #0
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	46ac      	mov	ip, r5
 8006aaa:	46f2      	mov	sl, lr
 8006aac:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ab0:	b293      	uxth	r3, r2
 8006ab2:	fb06 e303 	mla	r3, r6, r3, lr
 8006ab6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	ebaa 0303 	sub.w	r3, sl, r3
 8006ac0:	f8dc a000 	ldr.w	sl, [ip]
 8006ac4:	0c12      	lsrs	r2, r2, #16
 8006ac6:	fa13 f38a 	uxtah	r3, r3, sl
 8006aca:	fb06 e202 	mla	r2, r6, r2, lr
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	9b00      	ldr	r3, [sp, #0]
 8006ad2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ad6:	b292      	uxth	r2, r2
 8006ad8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006adc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ae0:	f8bd 3000 	ldrh.w	r3, [sp]
 8006ae4:	4581      	cmp	r9, r0
 8006ae6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aea:	f84c 3b04 	str.w	r3, [ip], #4
 8006aee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006af2:	d2db      	bcs.n	8006aac <quorem+0x44>
 8006af4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006af8:	b92b      	cbnz	r3, 8006b06 <quorem+0x9e>
 8006afa:	9b01      	ldr	r3, [sp, #4]
 8006afc:	3b04      	subs	r3, #4
 8006afe:	429d      	cmp	r5, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	d32e      	bcc.n	8006b62 <quorem+0xfa>
 8006b04:	613c      	str	r4, [r7, #16]
 8006b06:	4638      	mov	r0, r7
 8006b08:	f001 f8c4 	bl	8007c94 <__mcmp>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	db24      	blt.n	8006b5a <quorem+0xf2>
 8006b10:	3601      	adds	r6, #1
 8006b12:	4628      	mov	r0, r5
 8006b14:	f04f 0c00 	mov.w	ip, #0
 8006b18:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b1c:	f8d0 e000 	ldr.w	lr, [r0]
 8006b20:	b293      	uxth	r3, r2
 8006b22:	ebac 0303 	sub.w	r3, ip, r3
 8006b26:	0c12      	lsrs	r2, r2, #16
 8006b28:	fa13 f38e 	uxtah	r3, r3, lr
 8006b2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b3a:	45c1      	cmp	r9, r8
 8006b3c:	f840 3b04 	str.w	r3, [r0], #4
 8006b40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b44:	d2e8      	bcs.n	8006b18 <quorem+0xb0>
 8006b46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b4e:	b922      	cbnz	r2, 8006b5a <quorem+0xf2>
 8006b50:	3b04      	subs	r3, #4
 8006b52:	429d      	cmp	r5, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	d30a      	bcc.n	8006b6e <quorem+0x106>
 8006b58:	613c      	str	r4, [r7, #16]
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	b003      	add	sp, #12
 8006b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b62:	6812      	ldr	r2, [r2, #0]
 8006b64:	3b04      	subs	r3, #4
 8006b66:	2a00      	cmp	r2, #0
 8006b68:	d1cc      	bne.n	8006b04 <quorem+0x9c>
 8006b6a:	3c01      	subs	r4, #1
 8006b6c:	e7c7      	b.n	8006afe <quorem+0x96>
 8006b6e:	6812      	ldr	r2, [r2, #0]
 8006b70:	3b04      	subs	r3, #4
 8006b72:	2a00      	cmp	r2, #0
 8006b74:	d1f0      	bne.n	8006b58 <quorem+0xf0>
 8006b76:	3c01      	subs	r4, #1
 8006b78:	e7eb      	b.n	8006b52 <quorem+0xea>
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	e7ee      	b.n	8006b5c <quorem+0xf4>
	...

08006b80 <_dtoa_r>:
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	ed2d 8b04 	vpush	{d8-d9}
 8006b88:	ec57 6b10 	vmov	r6, r7, d0
 8006b8c:	b093      	sub	sp, #76	; 0x4c
 8006b8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b94:	9106      	str	r1, [sp, #24]
 8006b96:	ee10 aa10 	vmov	sl, s0
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b9e:	930c      	str	r3, [sp, #48]	; 0x30
 8006ba0:	46bb      	mov	fp, r7
 8006ba2:	b975      	cbnz	r5, 8006bc2 <_dtoa_r+0x42>
 8006ba4:	2010      	movs	r0, #16
 8006ba6:	f000 fddd 	bl	8007764 <malloc>
 8006baa:	4602      	mov	r2, r0
 8006bac:	6260      	str	r0, [r4, #36]	; 0x24
 8006bae:	b920      	cbnz	r0, 8006bba <_dtoa_r+0x3a>
 8006bb0:	4ba7      	ldr	r3, [pc, #668]	; (8006e50 <_dtoa_r+0x2d0>)
 8006bb2:	21ea      	movs	r1, #234	; 0xea
 8006bb4:	48a7      	ldr	r0, [pc, #668]	; (8006e54 <_dtoa_r+0x2d4>)
 8006bb6:	f001 fbd1 	bl	800835c <__assert_func>
 8006bba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bbe:	6005      	str	r5, [r0, #0]
 8006bc0:	60c5      	str	r5, [r0, #12]
 8006bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bc4:	6819      	ldr	r1, [r3, #0]
 8006bc6:	b151      	cbz	r1, 8006bde <_dtoa_r+0x5e>
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	604a      	str	r2, [r1, #4]
 8006bcc:	2301      	movs	r3, #1
 8006bce:	4093      	lsls	r3, r2
 8006bd0:	608b      	str	r3, [r1, #8]
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 fe1c 	bl	8007810 <_Bfree>
 8006bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	1e3b      	subs	r3, r7, #0
 8006be0:	bfaa      	itet	ge
 8006be2:	2300      	movge	r3, #0
 8006be4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006be8:	f8c8 3000 	strge.w	r3, [r8]
 8006bec:	4b9a      	ldr	r3, [pc, #616]	; (8006e58 <_dtoa_r+0x2d8>)
 8006bee:	bfbc      	itt	lt
 8006bf0:	2201      	movlt	r2, #1
 8006bf2:	f8c8 2000 	strlt.w	r2, [r8]
 8006bf6:	ea33 030b 	bics.w	r3, r3, fp
 8006bfa:	d11b      	bne.n	8006c34 <_dtoa_r+0xb4>
 8006bfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bfe:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c08:	4333      	orrs	r3, r6
 8006c0a:	f000 8592 	beq.w	8007732 <_dtoa_r+0xbb2>
 8006c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c10:	b963      	cbnz	r3, 8006c2c <_dtoa_r+0xac>
 8006c12:	4b92      	ldr	r3, [pc, #584]	; (8006e5c <_dtoa_r+0x2dc>)
 8006c14:	e022      	b.n	8006c5c <_dtoa_r+0xdc>
 8006c16:	4b92      	ldr	r3, [pc, #584]	; (8006e60 <_dtoa_r+0x2e0>)
 8006c18:	9301      	str	r3, [sp, #4]
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	9801      	ldr	r0, [sp, #4]
 8006c22:	b013      	add	sp, #76	; 0x4c
 8006c24:	ecbd 8b04 	vpop	{d8-d9}
 8006c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2c:	4b8b      	ldr	r3, [pc, #556]	; (8006e5c <_dtoa_r+0x2dc>)
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	3303      	adds	r3, #3
 8006c32:	e7f3      	b.n	8006c1c <_dtoa_r+0x9c>
 8006c34:	2200      	movs	r2, #0
 8006c36:	2300      	movs	r3, #0
 8006c38:	4650      	mov	r0, sl
 8006c3a:	4659      	mov	r1, fp
 8006c3c:	f7f9 ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c40:	ec4b ab19 	vmov	d9, sl, fp
 8006c44:	4680      	mov	r8, r0
 8006c46:	b158      	cbz	r0, 8006c60 <_dtoa_r+0xe0>
 8006c48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	6013      	str	r3, [r2, #0]
 8006c4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 856b 	beq.w	800772c <_dtoa_r+0xbac>
 8006c56:	4883      	ldr	r0, [pc, #524]	; (8006e64 <_dtoa_r+0x2e4>)
 8006c58:	6018      	str	r0, [r3, #0]
 8006c5a:	1e43      	subs	r3, r0, #1
 8006c5c:	9301      	str	r3, [sp, #4]
 8006c5e:	e7df      	b.n	8006c20 <_dtoa_r+0xa0>
 8006c60:	ec4b ab10 	vmov	d0, sl, fp
 8006c64:	aa10      	add	r2, sp, #64	; 0x40
 8006c66:	a911      	add	r1, sp, #68	; 0x44
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f001 f8b9 	bl	8007de0 <__d2b>
 8006c6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006c72:	ee08 0a10 	vmov	s16, r0
 8006c76:	2d00      	cmp	r5, #0
 8006c78:	f000 8084 	beq.w	8006d84 <_dtoa_r+0x204>
 8006c7c:	ee19 3a90 	vmov	r3, s19
 8006c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c88:	4656      	mov	r6, sl
 8006c8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006c96:	4b74      	ldr	r3, [pc, #464]	; (8006e68 <_dtoa_r+0x2e8>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	f7f9 faf3 	bl	8000288 <__aeabi_dsub>
 8006ca2:	a365      	add	r3, pc, #404	; (adr r3, 8006e38 <_dtoa_r+0x2b8>)
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	f7f9 fca6 	bl	80005f8 <__aeabi_dmul>
 8006cac:	a364      	add	r3, pc, #400	; (adr r3, 8006e40 <_dtoa_r+0x2c0>)
 8006cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb2:	f7f9 faeb 	bl	800028c <__adddf3>
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	4628      	mov	r0, r5
 8006cba:	460f      	mov	r7, r1
 8006cbc:	f7f9 fc32 	bl	8000524 <__aeabi_i2d>
 8006cc0:	a361      	add	r3, pc, #388	; (adr r3, 8006e48 <_dtoa_r+0x2c8>)
 8006cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc6:	f7f9 fc97 	bl	80005f8 <__aeabi_dmul>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4630      	mov	r0, r6
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	f7f9 fadb 	bl	800028c <__adddf3>
 8006cd6:	4606      	mov	r6, r0
 8006cd8:	460f      	mov	r7, r1
 8006cda:	f7f9 ff3d 	bl	8000b58 <__aeabi_d2iz>
 8006cde:	2200      	movs	r2, #0
 8006ce0:	9000      	str	r0, [sp, #0]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	4639      	mov	r1, r7
 8006ce8:	f7f9 fef8 	bl	8000adc <__aeabi_dcmplt>
 8006cec:	b150      	cbz	r0, 8006d04 <_dtoa_r+0x184>
 8006cee:	9800      	ldr	r0, [sp, #0]
 8006cf0:	f7f9 fc18 	bl	8000524 <__aeabi_i2d>
 8006cf4:	4632      	mov	r2, r6
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	f7f9 fee6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cfc:	b910      	cbnz	r0, 8006d04 <_dtoa_r+0x184>
 8006cfe:	9b00      	ldr	r3, [sp, #0]
 8006d00:	3b01      	subs	r3, #1
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	9b00      	ldr	r3, [sp, #0]
 8006d06:	2b16      	cmp	r3, #22
 8006d08:	d85a      	bhi.n	8006dc0 <_dtoa_r+0x240>
 8006d0a:	9a00      	ldr	r2, [sp, #0]
 8006d0c:	4b57      	ldr	r3, [pc, #348]	; (8006e6c <_dtoa_r+0x2ec>)
 8006d0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d16:	ec51 0b19 	vmov	r0, r1, d9
 8006d1a:	f7f9 fedf 	bl	8000adc <__aeabi_dcmplt>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d050      	beq.n	8006dc4 <_dtoa_r+0x244>
 8006d22:	9b00      	ldr	r3, [sp, #0]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d2e:	1b5d      	subs	r5, r3, r5
 8006d30:	1e6b      	subs	r3, r5, #1
 8006d32:	9305      	str	r3, [sp, #20]
 8006d34:	bf45      	ittet	mi
 8006d36:	f1c5 0301 	rsbmi	r3, r5, #1
 8006d3a:	9304      	strmi	r3, [sp, #16]
 8006d3c:	2300      	movpl	r3, #0
 8006d3e:	2300      	movmi	r3, #0
 8006d40:	bf4c      	ite	mi
 8006d42:	9305      	strmi	r3, [sp, #20]
 8006d44:	9304      	strpl	r3, [sp, #16]
 8006d46:	9b00      	ldr	r3, [sp, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	db3d      	blt.n	8006dc8 <_dtoa_r+0x248>
 8006d4c:	9b05      	ldr	r3, [sp, #20]
 8006d4e:	9a00      	ldr	r2, [sp, #0]
 8006d50:	920a      	str	r2, [sp, #40]	; 0x28
 8006d52:	4413      	add	r3, r2
 8006d54:	9305      	str	r3, [sp, #20]
 8006d56:	2300      	movs	r3, #0
 8006d58:	9307      	str	r3, [sp, #28]
 8006d5a:	9b06      	ldr	r3, [sp, #24]
 8006d5c:	2b09      	cmp	r3, #9
 8006d5e:	f200 8089 	bhi.w	8006e74 <_dtoa_r+0x2f4>
 8006d62:	2b05      	cmp	r3, #5
 8006d64:	bfc4      	itt	gt
 8006d66:	3b04      	subgt	r3, #4
 8006d68:	9306      	strgt	r3, [sp, #24]
 8006d6a:	9b06      	ldr	r3, [sp, #24]
 8006d6c:	f1a3 0302 	sub.w	r3, r3, #2
 8006d70:	bfcc      	ite	gt
 8006d72:	2500      	movgt	r5, #0
 8006d74:	2501      	movle	r5, #1
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	f200 8087 	bhi.w	8006e8a <_dtoa_r+0x30a>
 8006d7c:	e8df f003 	tbb	[pc, r3]
 8006d80:	59383a2d 	.word	0x59383a2d
 8006d84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006d88:	441d      	add	r5, r3
 8006d8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	bfc1      	itttt	gt
 8006d92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006d9a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006d9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006da2:	bfda      	itte	le
 8006da4:	f1c3 0320 	rsble	r3, r3, #32
 8006da8:	fa06 f003 	lslle.w	r0, r6, r3
 8006dac:	4318      	orrgt	r0, r3
 8006dae:	f7f9 fba9 	bl	8000504 <__aeabi_ui2d>
 8006db2:	2301      	movs	r3, #1
 8006db4:	4606      	mov	r6, r0
 8006db6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006dba:	3d01      	subs	r5, #1
 8006dbc:	930e      	str	r3, [sp, #56]	; 0x38
 8006dbe:	e76a      	b.n	8006c96 <_dtoa_r+0x116>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e7b2      	b.n	8006d2a <_dtoa_r+0x1aa>
 8006dc4:	900b      	str	r0, [sp, #44]	; 0x2c
 8006dc6:	e7b1      	b.n	8006d2c <_dtoa_r+0x1ac>
 8006dc8:	9b04      	ldr	r3, [sp, #16]
 8006dca:	9a00      	ldr	r2, [sp, #0]
 8006dcc:	1a9b      	subs	r3, r3, r2
 8006dce:	9304      	str	r3, [sp, #16]
 8006dd0:	4253      	negs	r3, r2
 8006dd2:	9307      	str	r3, [sp, #28]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8006dd8:	e7bf      	b.n	8006d5a <_dtoa_r+0x1da>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	9308      	str	r3, [sp, #32]
 8006dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	dc55      	bgt.n	8006e90 <_dtoa_r+0x310>
 8006de4:	2301      	movs	r3, #1
 8006de6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006dea:	461a      	mov	r2, r3
 8006dec:	9209      	str	r2, [sp, #36]	; 0x24
 8006dee:	e00c      	b.n	8006e0a <_dtoa_r+0x28a>
 8006df0:	2301      	movs	r3, #1
 8006df2:	e7f3      	b.n	8006ddc <_dtoa_r+0x25c>
 8006df4:	2300      	movs	r3, #0
 8006df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006df8:	9308      	str	r3, [sp, #32]
 8006dfa:	9b00      	ldr	r3, [sp, #0]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	9302      	str	r3, [sp, #8]
 8006e00:	3301      	adds	r3, #1
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	9303      	str	r3, [sp, #12]
 8006e06:	bfb8      	it	lt
 8006e08:	2301      	movlt	r3, #1
 8006e0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	6042      	str	r2, [r0, #4]
 8006e10:	2204      	movs	r2, #4
 8006e12:	f102 0614 	add.w	r6, r2, #20
 8006e16:	429e      	cmp	r6, r3
 8006e18:	6841      	ldr	r1, [r0, #4]
 8006e1a:	d93d      	bls.n	8006e98 <_dtoa_r+0x318>
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 fcb7 	bl	8007790 <_Balloc>
 8006e22:	9001      	str	r0, [sp, #4]
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d13b      	bne.n	8006ea0 <_dtoa_r+0x320>
 8006e28:	4b11      	ldr	r3, [pc, #68]	; (8006e70 <_dtoa_r+0x2f0>)
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e30:	e6c0      	b.n	8006bb4 <_dtoa_r+0x34>
 8006e32:	2301      	movs	r3, #1
 8006e34:	e7df      	b.n	8006df6 <_dtoa_r+0x276>
 8006e36:	bf00      	nop
 8006e38:	636f4361 	.word	0x636f4361
 8006e3c:	3fd287a7 	.word	0x3fd287a7
 8006e40:	8b60c8b3 	.word	0x8b60c8b3
 8006e44:	3fc68a28 	.word	0x3fc68a28
 8006e48:	509f79fb 	.word	0x509f79fb
 8006e4c:	3fd34413 	.word	0x3fd34413
 8006e50:	08009591 	.word	0x08009591
 8006e54:	080095a8 	.word	0x080095a8
 8006e58:	7ff00000 	.word	0x7ff00000
 8006e5c:	0800958d 	.word	0x0800958d
 8006e60:	08009584 	.word	0x08009584
 8006e64:	08009561 	.word	0x08009561
 8006e68:	3ff80000 	.word	0x3ff80000
 8006e6c:	08009698 	.word	0x08009698
 8006e70:	08009603 	.word	0x08009603
 8006e74:	2501      	movs	r5, #1
 8006e76:	2300      	movs	r3, #0
 8006e78:	9306      	str	r3, [sp, #24]
 8006e7a:	9508      	str	r5, [sp, #32]
 8006e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e84:	2200      	movs	r2, #0
 8006e86:	2312      	movs	r3, #18
 8006e88:	e7b0      	b.n	8006dec <_dtoa_r+0x26c>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	9308      	str	r3, [sp, #32]
 8006e8e:	e7f5      	b.n	8006e7c <_dtoa_r+0x2fc>
 8006e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e96:	e7b8      	b.n	8006e0a <_dtoa_r+0x28a>
 8006e98:	3101      	adds	r1, #1
 8006e9a:	6041      	str	r1, [r0, #4]
 8006e9c:	0052      	lsls	r2, r2, #1
 8006e9e:	e7b8      	b.n	8006e12 <_dtoa_r+0x292>
 8006ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ea2:	9a01      	ldr	r2, [sp, #4]
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	9b03      	ldr	r3, [sp, #12]
 8006ea8:	2b0e      	cmp	r3, #14
 8006eaa:	f200 809d 	bhi.w	8006fe8 <_dtoa_r+0x468>
 8006eae:	2d00      	cmp	r5, #0
 8006eb0:	f000 809a 	beq.w	8006fe8 <_dtoa_r+0x468>
 8006eb4:	9b00      	ldr	r3, [sp, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	dd32      	ble.n	8006f20 <_dtoa_r+0x3a0>
 8006eba:	4ab7      	ldr	r2, [pc, #732]	; (8007198 <_dtoa_r+0x618>)
 8006ebc:	f003 030f 	and.w	r3, r3, #15
 8006ec0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ec4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ec8:	9b00      	ldr	r3, [sp, #0]
 8006eca:	05d8      	lsls	r0, r3, #23
 8006ecc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006ed0:	d516      	bpl.n	8006f00 <_dtoa_r+0x380>
 8006ed2:	4bb2      	ldr	r3, [pc, #712]	; (800719c <_dtoa_r+0x61c>)
 8006ed4:	ec51 0b19 	vmov	r0, r1, d9
 8006ed8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006edc:	f7f9 fcb6 	bl	800084c <__aeabi_ddiv>
 8006ee0:	f007 070f 	and.w	r7, r7, #15
 8006ee4:	4682      	mov	sl, r0
 8006ee6:	468b      	mov	fp, r1
 8006ee8:	2503      	movs	r5, #3
 8006eea:	4eac      	ldr	r6, [pc, #688]	; (800719c <_dtoa_r+0x61c>)
 8006eec:	b957      	cbnz	r7, 8006f04 <_dtoa_r+0x384>
 8006eee:	4642      	mov	r2, r8
 8006ef0:	464b      	mov	r3, r9
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	4659      	mov	r1, fp
 8006ef6:	f7f9 fca9 	bl	800084c <__aeabi_ddiv>
 8006efa:	4682      	mov	sl, r0
 8006efc:	468b      	mov	fp, r1
 8006efe:	e028      	b.n	8006f52 <_dtoa_r+0x3d2>
 8006f00:	2502      	movs	r5, #2
 8006f02:	e7f2      	b.n	8006eea <_dtoa_r+0x36a>
 8006f04:	07f9      	lsls	r1, r7, #31
 8006f06:	d508      	bpl.n	8006f1a <_dtoa_r+0x39a>
 8006f08:	4640      	mov	r0, r8
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f10:	f7f9 fb72 	bl	80005f8 <__aeabi_dmul>
 8006f14:	3501      	adds	r5, #1
 8006f16:	4680      	mov	r8, r0
 8006f18:	4689      	mov	r9, r1
 8006f1a:	107f      	asrs	r7, r7, #1
 8006f1c:	3608      	adds	r6, #8
 8006f1e:	e7e5      	b.n	8006eec <_dtoa_r+0x36c>
 8006f20:	f000 809b 	beq.w	800705a <_dtoa_r+0x4da>
 8006f24:	9b00      	ldr	r3, [sp, #0]
 8006f26:	4f9d      	ldr	r7, [pc, #628]	; (800719c <_dtoa_r+0x61c>)
 8006f28:	425e      	negs	r6, r3
 8006f2a:	4b9b      	ldr	r3, [pc, #620]	; (8007198 <_dtoa_r+0x618>)
 8006f2c:	f006 020f 	and.w	r2, r6, #15
 8006f30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	ec51 0b19 	vmov	r0, r1, d9
 8006f3c:	f7f9 fb5c 	bl	80005f8 <__aeabi_dmul>
 8006f40:	1136      	asrs	r6, r6, #4
 8006f42:	4682      	mov	sl, r0
 8006f44:	468b      	mov	fp, r1
 8006f46:	2300      	movs	r3, #0
 8006f48:	2502      	movs	r5, #2
 8006f4a:	2e00      	cmp	r6, #0
 8006f4c:	d17a      	bne.n	8007044 <_dtoa_r+0x4c4>
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1d3      	bne.n	8006efa <_dtoa_r+0x37a>
 8006f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8082 	beq.w	800705e <_dtoa_r+0x4de>
 8006f5a:	4b91      	ldr	r3, [pc, #580]	; (80071a0 <_dtoa_r+0x620>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	4650      	mov	r0, sl
 8006f60:	4659      	mov	r1, fp
 8006f62:	f7f9 fdbb 	bl	8000adc <__aeabi_dcmplt>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d079      	beq.n	800705e <_dtoa_r+0x4de>
 8006f6a:	9b03      	ldr	r3, [sp, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d076      	beq.n	800705e <_dtoa_r+0x4de>
 8006f70:	9b02      	ldr	r3, [sp, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	dd36      	ble.n	8006fe4 <_dtoa_r+0x464>
 8006f76:	9b00      	ldr	r3, [sp, #0]
 8006f78:	4650      	mov	r0, sl
 8006f7a:	4659      	mov	r1, fp
 8006f7c:	1e5f      	subs	r7, r3, #1
 8006f7e:	2200      	movs	r2, #0
 8006f80:	4b88      	ldr	r3, [pc, #544]	; (80071a4 <_dtoa_r+0x624>)
 8006f82:	f7f9 fb39 	bl	80005f8 <__aeabi_dmul>
 8006f86:	9e02      	ldr	r6, [sp, #8]
 8006f88:	4682      	mov	sl, r0
 8006f8a:	468b      	mov	fp, r1
 8006f8c:	3501      	adds	r5, #1
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f7f9 fac8 	bl	8000524 <__aeabi_i2d>
 8006f94:	4652      	mov	r2, sl
 8006f96:	465b      	mov	r3, fp
 8006f98:	f7f9 fb2e 	bl	80005f8 <__aeabi_dmul>
 8006f9c:	4b82      	ldr	r3, [pc, #520]	; (80071a8 <_dtoa_r+0x628>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f7f9 f974 	bl	800028c <__adddf3>
 8006fa4:	46d0      	mov	r8, sl
 8006fa6:	46d9      	mov	r9, fp
 8006fa8:	4682      	mov	sl, r0
 8006faa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006fae:	2e00      	cmp	r6, #0
 8006fb0:	d158      	bne.n	8007064 <_dtoa_r+0x4e4>
 8006fb2:	4b7e      	ldr	r3, [pc, #504]	; (80071ac <_dtoa_r+0x62c>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	4649      	mov	r1, r9
 8006fba:	f7f9 f965 	bl	8000288 <__aeabi_dsub>
 8006fbe:	4652      	mov	r2, sl
 8006fc0:	465b      	mov	r3, fp
 8006fc2:	4680      	mov	r8, r0
 8006fc4:	4689      	mov	r9, r1
 8006fc6:	f7f9 fda7 	bl	8000b18 <__aeabi_dcmpgt>
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	f040 8295 	bne.w	80074fa <_dtoa_r+0x97a>
 8006fd0:	4652      	mov	r2, sl
 8006fd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	4649      	mov	r1, r9
 8006fda:	f7f9 fd7f 	bl	8000adc <__aeabi_dcmplt>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	f040 8289 	bne.w	80074f6 <_dtoa_r+0x976>
 8006fe4:	ec5b ab19 	vmov	sl, fp, d9
 8006fe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f2c0 8148 	blt.w	8007280 <_dtoa_r+0x700>
 8006ff0:	9a00      	ldr	r2, [sp, #0]
 8006ff2:	2a0e      	cmp	r2, #14
 8006ff4:	f300 8144 	bgt.w	8007280 <_dtoa_r+0x700>
 8006ff8:	4b67      	ldr	r3, [pc, #412]	; (8007198 <_dtoa_r+0x618>)
 8006ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ffe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007004:	2b00      	cmp	r3, #0
 8007006:	f280 80d5 	bge.w	80071b4 <_dtoa_r+0x634>
 800700a:	9b03      	ldr	r3, [sp, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	f300 80d1 	bgt.w	80071b4 <_dtoa_r+0x634>
 8007012:	f040 826f 	bne.w	80074f4 <_dtoa_r+0x974>
 8007016:	4b65      	ldr	r3, [pc, #404]	; (80071ac <_dtoa_r+0x62c>)
 8007018:	2200      	movs	r2, #0
 800701a:	4640      	mov	r0, r8
 800701c:	4649      	mov	r1, r9
 800701e:	f7f9 faeb 	bl	80005f8 <__aeabi_dmul>
 8007022:	4652      	mov	r2, sl
 8007024:	465b      	mov	r3, fp
 8007026:	f7f9 fd6d 	bl	8000b04 <__aeabi_dcmpge>
 800702a:	9e03      	ldr	r6, [sp, #12]
 800702c:	4637      	mov	r7, r6
 800702e:	2800      	cmp	r0, #0
 8007030:	f040 8245 	bne.w	80074be <_dtoa_r+0x93e>
 8007034:	9d01      	ldr	r5, [sp, #4]
 8007036:	2331      	movs	r3, #49	; 0x31
 8007038:	f805 3b01 	strb.w	r3, [r5], #1
 800703c:	9b00      	ldr	r3, [sp, #0]
 800703e:	3301      	adds	r3, #1
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	e240      	b.n	80074c6 <_dtoa_r+0x946>
 8007044:	07f2      	lsls	r2, r6, #31
 8007046:	d505      	bpl.n	8007054 <_dtoa_r+0x4d4>
 8007048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800704c:	f7f9 fad4 	bl	80005f8 <__aeabi_dmul>
 8007050:	3501      	adds	r5, #1
 8007052:	2301      	movs	r3, #1
 8007054:	1076      	asrs	r6, r6, #1
 8007056:	3708      	adds	r7, #8
 8007058:	e777      	b.n	8006f4a <_dtoa_r+0x3ca>
 800705a:	2502      	movs	r5, #2
 800705c:	e779      	b.n	8006f52 <_dtoa_r+0x3d2>
 800705e:	9f00      	ldr	r7, [sp, #0]
 8007060:	9e03      	ldr	r6, [sp, #12]
 8007062:	e794      	b.n	8006f8e <_dtoa_r+0x40e>
 8007064:	9901      	ldr	r1, [sp, #4]
 8007066:	4b4c      	ldr	r3, [pc, #304]	; (8007198 <_dtoa_r+0x618>)
 8007068:	4431      	add	r1, r6
 800706a:	910d      	str	r1, [sp, #52]	; 0x34
 800706c:	9908      	ldr	r1, [sp, #32]
 800706e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007072:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007076:	2900      	cmp	r1, #0
 8007078:	d043      	beq.n	8007102 <_dtoa_r+0x582>
 800707a:	494d      	ldr	r1, [pc, #308]	; (80071b0 <_dtoa_r+0x630>)
 800707c:	2000      	movs	r0, #0
 800707e:	f7f9 fbe5 	bl	800084c <__aeabi_ddiv>
 8007082:	4652      	mov	r2, sl
 8007084:	465b      	mov	r3, fp
 8007086:	f7f9 f8ff 	bl	8000288 <__aeabi_dsub>
 800708a:	9d01      	ldr	r5, [sp, #4]
 800708c:	4682      	mov	sl, r0
 800708e:	468b      	mov	fp, r1
 8007090:	4649      	mov	r1, r9
 8007092:	4640      	mov	r0, r8
 8007094:	f7f9 fd60 	bl	8000b58 <__aeabi_d2iz>
 8007098:	4606      	mov	r6, r0
 800709a:	f7f9 fa43 	bl	8000524 <__aeabi_i2d>
 800709e:	4602      	mov	r2, r0
 80070a0:	460b      	mov	r3, r1
 80070a2:	4640      	mov	r0, r8
 80070a4:	4649      	mov	r1, r9
 80070a6:	f7f9 f8ef 	bl	8000288 <__aeabi_dsub>
 80070aa:	3630      	adds	r6, #48	; 0x30
 80070ac:	f805 6b01 	strb.w	r6, [r5], #1
 80070b0:	4652      	mov	r2, sl
 80070b2:	465b      	mov	r3, fp
 80070b4:	4680      	mov	r8, r0
 80070b6:	4689      	mov	r9, r1
 80070b8:	f7f9 fd10 	bl	8000adc <__aeabi_dcmplt>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d163      	bne.n	8007188 <_dtoa_r+0x608>
 80070c0:	4642      	mov	r2, r8
 80070c2:	464b      	mov	r3, r9
 80070c4:	4936      	ldr	r1, [pc, #216]	; (80071a0 <_dtoa_r+0x620>)
 80070c6:	2000      	movs	r0, #0
 80070c8:	f7f9 f8de 	bl	8000288 <__aeabi_dsub>
 80070cc:	4652      	mov	r2, sl
 80070ce:	465b      	mov	r3, fp
 80070d0:	f7f9 fd04 	bl	8000adc <__aeabi_dcmplt>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	f040 80b5 	bne.w	8007244 <_dtoa_r+0x6c4>
 80070da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070dc:	429d      	cmp	r5, r3
 80070de:	d081      	beq.n	8006fe4 <_dtoa_r+0x464>
 80070e0:	4b30      	ldr	r3, [pc, #192]	; (80071a4 <_dtoa_r+0x624>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	4650      	mov	r0, sl
 80070e6:	4659      	mov	r1, fp
 80070e8:	f7f9 fa86 	bl	80005f8 <__aeabi_dmul>
 80070ec:	4b2d      	ldr	r3, [pc, #180]	; (80071a4 <_dtoa_r+0x624>)
 80070ee:	4682      	mov	sl, r0
 80070f0:	468b      	mov	fp, r1
 80070f2:	4640      	mov	r0, r8
 80070f4:	4649      	mov	r1, r9
 80070f6:	2200      	movs	r2, #0
 80070f8:	f7f9 fa7e 	bl	80005f8 <__aeabi_dmul>
 80070fc:	4680      	mov	r8, r0
 80070fe:	4689      	mov	r9, r1
 8007100:	e7c6      	b.n	8007090 <_dtoa_r+0x510>
 8007102:	4650      	mov	r0, sl
 8007104:	4659      	mov	r1, fp
 8007106:	f7f9 fa77 	bl	80005f8 <__aeabi_dmul>
 800710a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800710c:	9d01      	ldr	r5, [sp, #4]
 800710e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007110:	4682      	mov	sl, r0
 8007112:	468b      	mov	fp, r1
 8007114:	4649      	mov	r1, r9
 8007116:	4640      	mov	r0, r8
 8007118:	f7f9 fd1e 	bl	8000b58 <__aeabi_d2iz>
 800711c:	4606      	mov	r6, r0
 800711e:	f7f9 fa01 	bl	8000524 <__aeabi_i2d>
 8007122:	3630      	adds	r6, #48	; 0x30
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4640      	mov	r0, r8
 800712a:	4649      	mov	r1, r9
 800712c:	f7f9 f8ac 	bl	8000288 <__aeabi_dsub>
 8007130:	f805 6b01 	strb.w	r6, [r5], #1
 8007134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007136:	429d      	cmp	r5, r3
 8007138:	4680      	mov	r8, r0
 800713a:	4689      	mov	r9, r1
 800713c:	f04f 0200 	mov.w	r2, #0
 8007140:	d124      	bne.n	800718c <_dtoa_r+0x60c>
 8007142:	4b1b      	ldr	r3, [pc, #108]	; (80071b0 <_dtoa_r+0x630>)
 8007144:	4650      	mov	r0, sl
 8007146:	4659      	mov	r1, fp
 8007148:	f7f9 f8a0 	bl	800028c <__adddf3>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4640      	mov	r0, r8
 8007152:	4649      	mov	r1, r9
 8007154:	f7f9 fce0 	bl	8000b18 <__aeabi_dcmpgt>
 8007158:	2800      	cmp	r0, #0
 800715a:	d173      	bne.n	8007244 <_dtoa_r+0x6c4>
 800715c:	4652      	mov	r2, sl
 800715e:	465b      	mov	r3, fp
 8007160:	4913      	ldr	r1, [pc, #76]	; (80071b0 <_dtoa_r+0x630>)
 8007162:	2000      	movs	r0, #0
 8007164:	f7f9 f890 	bl	8000288 <__aeabi_dsub>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4640      	mov	r0, r8
 800716e:	4649      	mov	r1, r9
 8007170:	f7f9 fcb4 	bl	8000adc <__aeabi_dcmplt>
 8007174:	2800      	cmp	r0, #0
 8007176:	f43f af35 	beq.w	8006fe4 <_dtoa_r+0x464>
 800717a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800717c:	1e6b      	subs	r3, r5, #1
 800717e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007180:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007184:	2b30      	cmp	r3, #48	; 0x30
 8007186:	d0f8      	beq.n	800717a <_dtoa_r+0x5fa>
 8007188:	9700      	str	r7, [sp, #0]
 800718a:	e049      	b.n	8007220 <_dtoa_r+0x6a0>
 800718c:	4b05      	ldr	r3, [pc, #20]	; (80071a4 <_dtoa_r+0x624>)
 800718e:	f7f9 fa33 	bl	80005f8 <__aeabi_dmul>
 8007192:	4680      	mov	r8, r0
 8007194:	4689      	mov	r9, r1
 8007196:	e7bd      	b.n	8007114 <_dtoa_r+0x594>
 8007198:	08009698 	.word	0x08009698
 800719c:	08009670 	.word	0x08009670
 80071a0:	3ff00000 	.word	0x3ff00000
 80071a4:	40240000 	.word	0x40240000
 80071a8:	401c0000 	.word	0x401c0000
 80071ac:	40140000 	.word	0x40140000
 80071b0:	3fe00000 	.word	0x3fe00000
 80071b4:	9d01      	ldr	r5, [sp, #4]
 80071b6:	4656      	mov	r6, sl
 80071b8:	465f      	mov	r7, fp
 80071ba:	4642      	mov	r2, r8
 80071bc:	464b      	mov	r3, r9
 80071be:	4630      	mov	r0, r6
 80071c0:	4639      	mov	r1, r7
 80071c2:	f7f9 fb43 	bl	800084c <__aeabi_ddiv>
 80071c6:	f7f9 fcc7 	bl	8000b58 <__aeabi_d2iz>
 80071ca:	4682      	mov	sl, r0
 80071cc:	f7f9 f9aa 	bl	8000524 <__aeabi_i2d>
 80071d0:	4642      	mov	r2, r8
 80071d2:	464b      	mov	r3, r9
 80071d4:	f7f9 fa10 	bl	80005f8 <__aeabi_dmul>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4630      	mov	r0, r6
 80071de:	4639      	mov	r1, r7
 80071e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80071e4:	f7f9 f850 	bl	8000288 <__aeabi_dsub>
 80071e8:	f805 6b01 	strb.w	r6, [r5], #1
 80071ec:	9e01      	ldr	r6, [sp, #4]
 80071ee:	9f03      	ldr	r7, [sp, #12]
 80071f0:	1bae      	subs	r6, r5, r6
 80071f2:	42b7      	cmp	r7, r6
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	d135      	bne.n	8007266 <_dtoa_r+0x6e6>
 80071fa:	f7f9 f847 	bl	800028c <__adddf3>
 80071fe:	4642      	mov	r2, r8
 8007200:	464b      	mov	r3, r9
 8007202:	4606      	mov	r6, r0
 8007204:	460f      	mov	r7, r1
 8007206:	f7f9 fc87 	bl	8000b18 <__aeabi_dcmpgt>
 800720a:	b9d0      	cbnz	r0, 8007242 <_dtoa_r+0x6c2>
 800720c:	4642      	mov	r2, r8
 800720e:	464b      	mov	r3, r9
 8007210:	4630      	mov	r0, r6
 8007212:	4639      	mov	r1, r7
 8007214:	f7f9 fc58 	bl	8000ac8 <__aeabi_dcmpeq>
 8007218:	b110      	cbz	r0, 8007220 <_dtoa_r+0x6a0>
 800721a:	f01a 0f01 	tst.w	sl, #1
 800721e:	d110      	bne.n	8007242 <_dtoa_r+0x6c2>
 8007220:	4620      	mov	r0, r4
 8007222:	ee18 1a10 	vmov	r1, s16
 8007226:	f000 faf3 	bl	8007810 <_Bfree>
 800722a:	2300      	movs	r3, #0
 800722c:	9800      	ldr	r0, [sp, #0]
 800722e:	702b      	strb	r3, [r5, #0]
 8007230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007232:	3001      	adds	r0, #1
 8007234:	6018      	str	r0, [r3, #0]
 8007236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007238:	2b00      	cmp	r3, #0
 800723a:	f43f acf1 	beq.w	8006c20 <_dtoa_r+0xa0>
 800723e:	601d      	str	r5, [r3, #0]
 8007240:	e4ee      	b.n	8006c20 <_dtoa_r+0xa0>
 8007242:	9f00      	ldr	r7, [sp, #0]
 8007244:	462b      	mov	r3, r5
 8007246:	461d      	mov	r5, r3
 8007248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800724c:	2a39      	cmp	r2, #57	; 0x39
 800724e:	d106      	bne.n	800725e <_dtoa_r+0x6de>
 8007250:	9a01      	ldr	r2, [sp, #4]
 8007252:	429a      	cmp	r2, r3
 8007254:	d1f7      	bne.n	8007246 <_dtoa_r+0x6c6>
 8007256:	9901      	ldr	r1, [sp, #4]
 8007258:	2230      	movs	r2, #48	; 0x30
 800725a:	3701      	adds	r7, #1
 800725c:	700a      	strb	r2, [r1, #0]
 800725e:	781a      	ldrb	r2, [r3, #0]
 8007260:	3201      	adds	r2, #1
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	e790      	b.n	8007188 <_dtoa_r+0x608>
 8007266:	4ba6      	ldr	r3, [pc, #664]	; (8007500 <_dtoa_r+0x980>)
 8007268:	2200      	movs	r2, #0
 800726a:	f7f9 f9c5 	bl	80005f8 <__aeabi_dmul>
 800726e:	2200      	movs	r2, #0
 8007270:	2300      	movs	r3, #0
 8007272:	4606      	mov	r6, r0
 8007274:	460f      	mov	r7, r1
 8007276:	f7f9 fc27 	bl	8000ac8 <__aeabi_dcmpeq>
 800727a:	2800      	cmp	r0, #0
 800727c:	d09d      	beq.n	80071ba <_dtoa_r+0x63a>
 800727e:	e7cf      	b.n	8007220 <_dtoa_r+0x6a0>
 8007280:	9a08      	ldr	r2, [sp, #32]
 8007282:	2a00      	cmp	r2, #0
 8007284:	f000 80d7 	beq.w	8007436 <_dtoa_r+0x8b6>
 8007288:	9a06      	ldr	r2, [sp, #24]
 800728a:	2a01      	cmp	r2, #1
 800728c:	f300 80ba 	bgt.w	8007404 <_dtoa_r+0x884>
 8007290:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007292:	2a00      	cmp	r2, #0
 8007294:	f000 80b2 	beq.w	80073fc <_dtoa_r+0x87c>
 8007298:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800729c:	9e07      	ldr	r6, [sp, #28]
 800729e:	9d04      	ldr	r5, [sp, #16]
 80072a0:	9a04      	ldr	r2, [sp, #16]
 80072a2:	441a      	add	r2, r3
 80072a4:	9204      	str	r2, [sp, #16]
 80072a6:	9a05      	ldr	r2, [sp, #20]
 80072a8:	2101      	movs	r1, #1
 80072aa:	441a      	add	r2, r3
 80072ac:	4620      	mov	r0, r4
 80072ae:	9205      	str	r2, [sp, #20]
 80072b0:	f000 fb66 	bl	8007980 <__i2b>
 80072b4:	4607      	mov	r7, r0
 80072b6:	2d00      	cmp	r5, #0
 80072b8:	dd0c      	ble.n	80072d4 <_dtoa_r+0x754>
 80072ba:	9b05      	ldr	r3, [sp, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dd09      	ble.n	80072d4 <_dtoa_r+0x754>
 80072c0:	42ab      	cmp	r3, r5
 80072c2:	9a04      	ldr	r2, [sp, #16]
 80072c4:	bfa8      	it	ge
 80072c6:	462b      	movge	r3, r5
 80072c8:	1ad2      	subs	r2, r2, r3
 80072ca:	9204      	str	r2, [sp, #16]
 80072cc:	9a05      	ldr	r2, [sp, #20]
 80072ce:	1aed      	subs	r5, r5, r3
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	9305      	str	r3, [sp, #20]
 80072d4:	9b07      	ldr	r3, [sp, #28]
 80072d6:	b31b      	cbz	r3, 8007320 <_dtoa_r+0x7a0>
 80072d8:	9b08      	ldr	r3, [sp, #32]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 80af 	beq.w	800743e <_dtoa_r+0x8be>
 80072e0:	2e00      	cmp	r6, #0
 80072e2:	dd13      	ble.n	800730c <_dtoa_r+0x78c>
 80072e4:	4639      	mov	r1, r7
 80072e6:	4632      	mov	r2, r6
 80072e8:	4620      	mov	r0, r4
 80072ea:	f000 fc09 	bl	8007b00 <__pow5mult>
 80072ee:	ee18 2a10 	vmov	r2, s16
 80072f2:	4601      	mov	r1, r0
 80072f4:	4607      	mov	r7, r0
 80072f6:	4620      	mov	r0, r4
 80072f8:	f000 fb58 	bl	80079ac <__multiply>
 80072fc:	ee18 1a10 	vmov	r1, s16
 8007300:	4680      	mov	r8, r0
 8007302:	4620      	mov	r0, r4
 8007304:	f000 fa84 	bl	8007810 <_Bfree>
 8007308:	ee08 8a10 	vmov	s16, r8
 800730c:	9b07      	ldr	r3, [sp, #28]
 800730e:	1b9a      	subs	r2, r3, r6
 8007310:	d006      	beq.n	8007320 <_dtoa_r+0x7a0>
 8007312:	ee18 1a10 	vmov	r1, s16
 8007316:	4620      	mov	r0, r4
 8007318:	f000 fbf2 	bl	8007b00 <__pow5mult>
 800731c:	ee08 0a10 	vmov	s16, r0
 8007320:	2101      	movs	r1, #1
 8007322:	4620      	mov	r0, r4
 8007324:	f000 fb2c 	bl	8007980 <__i2b>
 8007328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800732a:	2b00      	cmp	r3, #0
 800732c:	4606      	mov	r6, r0
 800732e:	f340 8088 	ble.w	8007442 <_dtoa_r+0x8c2>
 8007332:	461a      	mov	r2, r3
 8007334:	4601      	mov	r1, r0
 8007336:	4620      	mov	r0, r4
 8007338:	f000 fbe2 	bl	8007b00 <__pow5mult>
 800733c:	9b06      	ldr	r3, [sp, #24]
 800733e:	2b01      	cmp	r3, #1
 8007340:	4606      	mov	r6, r0
 8007342:	f340 8081 	ble.w	8007448 <_dtoa_r+0x8c8>
 8007346:	f04f 0800 	mov.w	r8, #0
 800734a:	6933      	ldr	r3, [r6, #16]
 800734c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007350:	6918      	ldr	r0, [r3, #16]
 8007352:	f000 fac5 	bl	80078e0 <__hi0bits>
 8007356:	f1c0 0020 	rsb	r0, r0, #32
 800735a:	9b05      	ldr	r3, [sp, #20]
 800735c:	4418      	add	r0, r3
 800735e:	f010 001f 	ands.w	r0, r0, #31
 8007362:	f000 8092 	beq.w	800748a <_dtoa_r+0x90a>
 8007366:	f1c0 0320 	rsb	r3, r0, #32
 800736a:	2b04      	cmp	r3, #4
 800736c:	f340 808a 	ble.w	8007484 <_dtoa_r+0x904>
 8007370:	f1c0 001c 	rsb	r0, r0, #28
 8007374:	9b04      	ldr	r3, [sp, #16]
 8007376:	4403      	add	r3, r0
 8007378:	9304      	str	r3, [sp, #16]
 800737a:	9b05      	ldr	r3, [sp, #20]
 800737c:	4403      	add	r3, r0
 800737e:	4405      	add	r5, r0
 8007380:	9305      	str	r3, [sp, #20]
 8007382:	9b04      	ldr	r3, [sp, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	dd07      	ble.n	8007398 <_dtoa_r+0x818>
 8007388:	ee18 1a10 	vmov	r1, s16
 800738c:	461a      	mov	r2, r3
 800738e:	4620      	mov	r0, r4
 8007390:	f000 fc10 	bl	8007bb4 <__lshift>
 8007394:	ee08 0a10 	vmov	s16, r0
 8007398:	9b05      	ldr	r3, [sp, #20]
 800739a:	2b00      	cmp	r3, #0
 800739c:	dd05      	ble.n	80073aa <_dtoa_r+0x82a>
 800739e:	4631      	mov	r1, r6
 80073a0:	461a      	mov	r2, r3
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 fc06 	bl	8007bb4 <__lshift>
 80073a8:	4606      	mov	r6, r0
 80073aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d06e      	beq.n	800748e <_dtoa_r+0x90e>
 80073b0:	ee18 0a10 	vmov	r0, s16
 80073b4:	4631      	mov	r1, r6
 80073b6:	f000 fc6d 	bl	8007c94 <__mcmp>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	da67      	bge.n	800748e <_dtoa_r+0x90e>
 80073be:	9b00      	ldr	r3, [sp, #0]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	ee18 1a10 	vmov	r1, s16
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	220a      	movs	r2, #10
 80073ca:	2300      	movs	r3, #0
 80073cc:	4620      	mov	r0, r4
 80073ce:	f000 fa41 	bl	8007854 <__multadd>
 80073d2:	9b08      	ldr	r3, [sp, #32]
 80073d4:	ee08 0a10 	vmov	s16, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 81b1 	beq.w	8007740 <_dtoa_r+0xbc0>
 80073de:	2300      	movs	r3, #0
 80073e0:	4639      	mov	r1, r7
 80073e2:	220a      	movs	r2, #10
 80073e4:	4620      	mov	r0, r4
 80073e6:	f000 fa35 	bl	8007854 <__multadd>
 80073ea:	9b02      	ldr	r3, [sp, #8]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	4607      	mov	r7, r0
 80073f0:	f300 808e 	bgt.w	8007510 <_dtoa_r+0x990>
 80073f4:	9b06      	ldr	r3, [sp, #24]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	dc51      	bgt.n	800749e <_dtoa_r+0x91e>
 80073fa:	e089      	b.n	8007510 <_dtoa_r+0x990>
 80073fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007402:	e74b      	b.n	800729c <_dtoa_r+0x71c>
 8007404:	9b03      	ldr	r3, [sp, #12]
 8007406:	1e5e      	subs	r6, r3, #1
 8007408:	9b07      	ldr	r3, [sp, #28]
 800740a:	42b3      	cmp	r3, r6
 800740c:	bfbf      	itttt	lt
 800740e:	9b07      	ldrlt	r3, [sp, #28]
 8007410:	9607      	strlt	r6, [sp, #28]
 8007412:	1af2      	sublt	r2, r6, r3
 8007414:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007416:	bfb6      	itet	lt
 8007418:	189b      	addlt	r3, r3, r2
 800741a:	1b9e      	subge	r6, r3, r6
 800741c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800741e:	9b03      	ldr	r3, [sp, #12]
 8007420:	bfb8      	it	lt
 8007422:	2600      	movlt	r6, #0
 8007424:	2b00      	cmp	r3, #0
 8007426:	bfb7      	itett	lt
 8007428:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800742c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007430:	1a9d      	sublt	r5, r3, r2
 8007432:	2300      	movlt	r3, #0
 8007434:	e734      	b.n	80072a0 <_dtoa_r+0x720>
 8007436:	9e07      	ldr	r6, [sp, #28]
 8007438:	9d04      	ldr	r5, [sp, #16]
 800743a:	9f08      	ldr	r7, [sp, #32]
 800743c:	e73b      	b.n	80072b6 <_dtoa_r+0x736>
 800743e:	9a07      	ldr	r2, [sp, #28]
 8007440:	e767      	b.n	8007312 <_dtoa_r+0x792>
 8007442:	9b06      	ldr	r3, [sp, #24]
 8007444:	2b01      	cmp	r3, #1
 8007446:	dc18      	bgt.n	800747a <_dtoa_r+0x8fa>
 8007448:	f1ba 0f00 	cmp.w	sl, #0
 800744c:	d115      	bne.n	800747a <_dtoa_r+0x8fa>
 800744e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007452:	b993      	cbnz	r3, 800747a <_dtoa_r+0x8fa>
 8007454:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007458:	0d1b      	lsrs	r3, r3, #20
 800745a:	051b      	lsls	r3, r3, #20
 800745c:	b183      	cbz	r3, 8007480 <_dtoa_r+0x900>
 800745e:	9b04      	ldr	r3, [sp, #16]
 8007460:	3301      	adds	r3, #1
 8007462:	9304      	str	r3, [sp, #16]
 8007464:	9b05      	ldr	r3, [sp, #20]
 8007466:	3301      	adds	r3, #1
 8007468:	9305      	str	r3, [sp, #20]
 800746a:	f04f 0801 	mov.w	r8, #1
 800746e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007470:	2b00      	cmp	r3, #0
 8007472:	f47f af6a 	bne.w	800734a <_dtoa_r+0x7ca>
 8007476:	2001      	movs	r0, #1
 8007478:	e76f      	b.n	800735a <_dtoa_r+0x7da>
 800747a:	f04f 0800 	mov.w	r8, #0
 800747e:	e7f6      	b.n	800746e <_dtoa_r+0x8ee>
 8007480:	4698      	mov	r8, r3
 8007482:	e7f4      	b.n	800746e <_dtoa_r+0x8ee>
 8007484:	f43f af7d 	beq.w	8007382 <_dtoa_r+0x802>
 8007488:	4618      	mov	r0, r3
 800748a:	301c      	adds	r0, #28
 800748c:	e772      	b.n	8007374 <_dtoa_r+0x7f4>
 800748e:	9b03      	ldr	r3, [sp, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	dc37      	bgt.n	8007504 <_dtoa_r+0x984>
 8007494:	9b06      	ldr	r3, [sp, #24]
 8007496:	2b02      	cmp	r3, #2
 8007498:	dd34      	ble.n	8007504 <_dtoa_r+0x984>
 800749a:	9b03      	ldr	r3, [sp, #12]
 800749c:	9302      	str	r3, [sp, #8]
 800749e:	9b02      	ldr	r3, [sp, #8]
 80074a0:	b96b      	cbnz	r3, 80074be <_dtoa_r+0x93e>
 80074a2:	4631      	mov	r1, r6
 80074a4:	2205      	movs	r2, #5
 80074a6:	4620      	mov	r0, r4
 80074a8:	f000 f9d4 	bl	8007854 <__multadd>
 80074ac:	4601      	mov	r1, r0
 80074ae:	4606      	mov	r6, r0
 80074b0:	ee18 0a10 	vmov	r0, s16
 80074b4:	f000 fbee 	bl	8007c94 <__mcmp>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	f73f adbb 	bgt.w	8007034 <_dtoa_r+0x4b4>
 80074be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c0:	9d01      	ldr	r5, [sp, #4]
 80074c2:	43db      	mvns	r3, r3
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	f04f 0800 	mov.w	r8, #0
 80074ca:	4631      	mov	r1, r6
 80074cc:	4620      	mov	r0, r4
 80074ce:	f000 f99f 	bl	8007810 <_Bfree>
 80074d2:	2f00      	cmp	r7, #0
 80074d4:	f43f aea4 	beq.w	8007220 <_dtoa_r+0x6a0>
 80074d8:	f1b8 0f00 	cmp.w	r8, #0
 80074dc:	d005      	beq.n	80074ea <_dtoa_r+0x96a>
 80074de:	45b8      	cmp	r8, r7
 80074e0:	d003      	beq.n	80074ea <_dtoa_r+0x96a>
 80074e2:	4641      	mov	r1, r8
 80074e4:	4620      	mov	r0, r4
 80074e6:	f000 f993 	bl	8007810 <_Bfree>
 80074ea:	4639      	mov	r1, r7
 80074ec:	4620      	mov	r0, r4
 80074ee:	f000 f98f 	bl	8007810 <_Bfree>
 80074f2:	e695      	b.n	8007220 <_dtoa_r+0x6a0>
 80074f4:	2600      	movs	r6, #0
 80074f6:	4637      	mov	r7, r6
 80074f8:	e7e1      	b.n	80074be <_dtoa_r+0x93e>
 80074fa:	9700      	str	r7, [sp, #0]
 80074fc:	4637      	mov	r7, r6
 80074fe:	e599      	b.n	8007034 <_dtoa_r+0x4b4>
 8007500:	40240000 	.word	0x40240000
 8007504:	9b08      	ldr	r3, [sp, #32]
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 80ca 	beq.w	80076a0 <_dtoa_r+0xb20>
 800750c:	9b03      	ldr	r3, [sp, #12]
 800750e:	9302      	str	r3, [sp, #8]
 8007510:	2d00      	cmp	r5, #0
 8007512:	dd05      	ble.n	8007520 <_dtoa_r+0x9a0>
 8007514:	4639      	mov	r1, r7
 8007516:	462a      	mov	r2, r5
 8007518:	4620      	mov	r0, r4
 800751a:	f000 fb4b 	bl	8007bb4 <__lshift>
 800751e:	4607      	mov	r7, r0
 8007520:	f1b8 0f00 	cmp.w	r8, #0
 8007524:	d05b      	beq.n	80075de <_dtoa_r+0xa5e>
 8007526:	6879      	ldr	r1, [r7, #4]
 8007528:	4620      	mov	r0, r4
 800752a:	f000 f931 	bl	8007790 <_Balloc>
 800752e:	4605      	mov	r5, r0
 8007530:	b928      	cbnz	r0, 800753e <_dtoa_r+0x9be>
 8007532:	4b87      	ldr	r3, [pc, #540]	; (8007750 <_dtoa_r+0xbd0>)
 8007534:	4602      	mov	r2, r0
 8007536:	f240 21ea 	movw	r1, #746	; 0x2ea
 800753a:	f7ff bb3b 	b.w	8006bb4 <_dtoa_r+0x34>
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	3202      	adds	r2, #2
 8007542:	0092      	lsls	r2, r2, #2
 8007544:	f107 010c 	add.w	r1, r7, #12
 8007548:	300c      	adds	r0, #12
 800754a:	f000 f913 	bl	8007774 <memcpy>
 800754e:	2201      	movs	r2, #1
 8007550:	4629      	mov	r1, r5
 8007552:	4620      	mov	r0, r4
 8007554:	f000 fb2e 	bl	8007bb4 <__lshift>
 8007558:	9b01      	ldr	r3, [sp, #4]
 800755a:	f103 0901 	add.w	r9, r3, #1
 800755e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007562:	4413      	add	r3, r2
 8007564:	9305      	str	r3, [sp, #20]
 8007566:	f00a 0301 	and.w	r3, sl, #1
 800756a:	46b8      	mov	r8, r7
 800756c:	9304      	str	r3, [sp, #16]
 800756e:	4607      	mov	r7, r0
 8007570:	4631      	mov	r1, r6
 8007572:	ee18 0a10 	vmov	r0, s16
 8007576:	f7ff fa77 	bl	8006a68 <quorem>
 800757a:	4641      	mov	r1, r8
 800757c:	9002      	str	r0, [sp, #8]
 800757e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007582:	ee18 0a10 	vmov	r0, s16
 8007586:	f000 fb85 	bl	8007c94 <__mcmp>
 800758a:	463a      	mov	r2, r7
 800758c:	9003      	str	r0, [sp, #12]
 800758e:	4631      	mov	r1, r6
 8007590:	4620      	mov	r0, r4
 8007592:	f000 fb9b 	bl	8007ccc <__mdiff>
 8007596:	68c2      	ldr	r2, [r0, #12]
 8007598:	f109 3bff 	add.w	fp, r9, #4294967295
 800759c:	4605      	mov	r5, r0
 800759e:	bb02      	cbnz	r2, 80075e2 <_dtoa_r+0xa62>
 80075a0:	4601      	mov	r1, r0
 80075a2:	ee18 0a10 	vmov	r0, s16
 80075a6:	f000 fb75 	bl	8007c94 <__mcmp>
 80075aa:	4602      	mov	r2, r0
 80075ac:	4629      	mov	r1, r5
 80075ae:	4620      	mov	r0, r4
 80075b0:	9207      	str	r2, [sp, #28]
 80075b2:	f000 f92d 	bl	8007810 <_Bfree>
 80075b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80075ba:	ea43 0102 	orr.w	r1, r3, r2
 80075be:	9b04      	ldr	r3, [sp, #16]
 80075c0:	430b      	orrs	r3, r1
 80075c2:	464d      	mov	r5, r9
 80075c4:	d10f      	bne.n	80075e6 <_dtoa_r+0xa66>
 80075c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075ca:	d02a      	beq.n	8007622 <_dtoa_r+0xaa2>
 80075cc:	9b03      	ldr	r3, [sp, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	dd02      	ble.n	80075d8 <_dtoa_r+0xa58>
 80075d2:	9b02      	ldr	r3, [sp, #8]
 80075d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80075d8:	f88b a000 	strb.w	sl, [fp]
 80075dc:	e775      	b.n	80074ca <_dtoa_r+0x94a>
 80075de:	4638      	mov	r0, r7
 80075e0:	e7ba      	b.n	8007558 <_dtoa_r+0x9d8>
 80075e2:	2201      	movs	r2, #1
 80075e4:	e7e2      	b.n	80075ac <_dtoa_r+0xa2c>
 80075e6:	9b03      	ldr	r3, [sp, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	db04      	blt.n	80075f6 <_dtoa_r+0xa76>
 80075ec:	9906      	ldr	r1, [sp, #24]
 80075ee:	430b      	orrs	r3, r1
 80075f0:	9904      	ldr	r1, [sp, #16]
 80075f2:	430b      	orrs	r3, r1
 80075f4:	d122      	bne.n	800763c <_dtoa_r+0xabc>
 80075f6:	2a00      	cmp	r2, #0
 80075f8:	ddee      	ble.n	80075d8 <_dtoa_r+0xa58>
 80075fa:	ee18 1a10 	vmov	r1, s16
 80075fe:	2201      	movs	r2, #1
 8007600:	4620      	mov	r0, r4
 8007602:	f000 fad7 	bl	8007bb4 <__lshift>
 8007606:	4631      	mov	r1, r6
 8007608:	ee08 0a10 	vmov	s16, r0
 800760c:	f000 fb42 	bl	8007c94 <__mcmp>
 8007610:	2800      	cmp	r0, #0
 8007612:	dc03      	bgt.n	800761c <_dtoa_r+0xa9c>
 8007614:	d1e0      	bne.n	80075d8 <_dtoa_r+0xa58>
 8007616:	f01a 0f01 	tst.w	sl, #1
 800761a:	d0dd      	beq.n	80075d8 <_dtoa_r+0xa58>
 800761c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007620:	d1d7      	bne.n	80075d2 <_dtoa_r+0xa52>
 8007622:	2339      	movs	r3, #57	; 0x39
 8007624:	f88b 3000 	strb.w	r3, [fp]
 8007628:	462b      	mov	r3, r5
 800762a:	461d      	mov	r5, r3
 800762c:	3b01      	subs	r3, #1
 800762e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007632:	2a39      	cmp	r2, #57	; 0x39
 8007634:	d071      	beq.n	800771a <_dtoa_r+0xb9a>
 8007636:	3201      	adds	r2, #1
 8007638:	701a      	strb	r2, [r3, #0]
 800763a:	e746      	b.n	80074ca <_dtoa_r+0x94a>
 800763c:	2a00      	cmp	r2, #0
 800763e:	dd07      	ble.n	8007650 <_dtoa_r+0xad0>
 8007640:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007644:	d0ed      	beq.n	8007622 <_dtoa_r+0xaa2>
 8007646:	f10a 0301 	add.w	r3, sl, #1
 800764a:	f88b 3000 	strb.w	r3, [fp]
 800764e:	e73c      	b.n	80074ca <_dtoa_r+0x94a>
 8007650:	9b05      	ldr	r3, [sp, #20]
 8007652:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007656:	4599      	cmp	r9, r3
 8007658:	d047      	beq.n	80076ea <_dtoa_r+0xb6a>
 800765a:	ee18 1a10 	vmov	r1, s16
 800765e:	2300      	movs	r3, #0
 8007660:	220a      	movs	r2, #10
 8007662:	4620      	mov	r0, r4
 8007664:	f000 f8f6 	bl	8007854 <__multadd>
 8007668:	45b8      	cmp	r8, r7
 800766a:	ee08 0a10 	vmov	s16, r0
 800766e:	f04f 0300 	mov.w	r3, #0
 8007672:	f04f 020a 	mov.w	r2, #10
 8007676:	4641      	mov	r1, r8
 8007678:	4620      	mov	r0, r4
 800767a:	d106      	bne.n	800768a <_dtoa_r+0xb0a>
 800767c:	f000 f8ea 	bl	8007854 <__multadd>
 8007680:	4680      	mov	r8, r0
 8007682:	4607      	mov	r7, r0
 8007684:	f109 0901 	add.w	r9, r9, #1
 8007688:	e772      	b.n	8007570 <_dtoa_r+0x9f0>
 800768a:	f000 f8e3 	bl	8007854 <__multadd>
 800768e:	4639      	mov	r1, r7
 8007690:	4680      	mov	r8, r0
 8007692:	2300      	movs	r3, #0
 8007694:	220a      	movs	r2, #10
 8007696:	4620      	mov	r0, r4
 8007698:	f000 f8dc 	bl	8007854 <__multadd>
 800769c:	4607      	mov	r7, r0
 800769e:	e7f1      	b.n	8007684 <_dtoa_r+0xb04>
 80076a0:	9b03      	ldr	r3, [sp, #12]
 80076a2:	9302      	str	r3, [sp, #8]
 80076a4:	9d01      	ldr	r5, [sp, #4]
 80076a6:	ee18 0a10 	vmov	r0, s16
 80076aa:	4631      	mov	r1, r6
 80076ac:	f7ff f9dc 	bl	8006a68 <quorem>
 80076b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80076b4:	9b01      	ldr	r3, [sp, #4]
 80076b6:	f805 ab01 	strb.w	sl, [r5], #1
 80076ba:	1aea      	subs	r2, r5, r3
 80076bc:	9b02      	ldr	r3, [sp, #8]
 80076be:	4293      	cmp	r3, r2
 80076c0:	dd09      	ble.n	80076d6 <_dtoa_r+0xb56>
 80076c2:	ee18 1a10 	vmov	r1, s16
 80076c6:	2300      	movs	r3, #0
 80076c8:	220a      	movs	r2, #10
 80076ca:	4620      	mov	r0, r4
 80076cc:	f000 f8c2 	bl	8007854 <__multadd>
 80076d0:	ee08 0a10 	vmov	s16, r0
 80076d4:	e7e7      	b.n	80076a6 <_dtoa_r+0xb26>
 80076d6:	9b02      	ldr	r3, [sp, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	bfc8      	it	gt
 80076dc:	461d      	movgt	r5, r3
 80076de:	9b01      	ldr	r3, [sp, #4]
 80076e0:	bfd8      	it	le
 80076e2:	2501      	movle	r5, #1
 80076e4:	441d      	add	r5, r3
 80076e6:	f04f 0800 	mov.w	r8, #0
 80076ea:	ee18 1a10 	vmov	r1, s16
 80076ee:	2201      	movs	r2, #1
 80076f0:	4620      	mov	r0, r4
 80076f2:	f000 fa5f 	bl	8007bb4 <__lshift>
 80076f6:	4631      	mov	r1, r6
 80076f8:	ee08 0a10 	vmov	s16, r0
 80076fc:	f000 faca 	bl	8007c94 <__mcmp>
 8007700:	2800      	cmp	r0, #0
 8007702:	dc91      	bgt.n	8007628 <_dtoa_r+0xaa8>
 8007704:	d102      	bne.n	800770c <_dtoa_r+0xb8c>
 8007706:	f01a 0f01 	tst.w	sl, #1
 800770a:	d18d      	bne.n	8007628 <_dtoa_r+0xaa8>
 800770c:	462b      	mov	r3, r5
 800770e:	461d      	mov	r5, r3
 8007710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007714:	2a30      	cmp	r2, #48	; 0x30
 8007716:	d0fa      	beq.n	800770e <_dtoa_r+0xb8e>
 8007718:	e6d7      	b.n	80074ca <_dtoa_r+0x94a>
 800771a:	9a01      	ldr	r2, [sp, #4]
 800771c:	429a      	cmp	r2, r3
 800771e:	d184      	bne.n	800762a <_dtoa_r+0xaaa>
 8007720:	9b00      	ldr	r3, [sp, #0]
 8007722:	3301      	adds	r3, #1
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	2331      	movs	r3, #49	; 0x31
 8007728:	7013      	strb	r3, [r2, #0]
 800772a:	e6ce      	b.n	80074ca <_dtoa_r+0x94a>
 800772c:	4b09      	ldr	r3, [pc, #36]	; (8007754 <_dtoa_r+0xbd4>)
 800772e:	f7ff ba95 	b.w	8006c5c <_dtoa_r+0xdc>
 8007732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007734:	2b00      	cmp	r3, #0
 8007736:	f47f aa6e 	bne.w	8006c16 <_dtoa_r+0x96>
 800773a:	4b07      	ldr	r3, [pc, #28]	; (8007758 <_dtoa_r+0xbd8>)
 800773c:	f7ff ba8e 	b.w	8006c5c <_dtoa_r+0xdc>
 8007740:	9b02      	ldr	r3, [sp, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	dcae      	bgt.n	80076a4 <_dtoa_r+0xb24>
 8007746:	9b06      	ldr	r3, [sp, #24]
 8007748:	2b02      	cmp	r3, #2
 800774a:	f73f aea8 	bgt.w	800749e <_dtoa_r+0x91e>
 800774e:	e7a9      	b.n	80076a4 <_dtoa_r+0xb24>
 8007750:	08009603 	.word	0x08009603
 8007754:	08009560 	.word	0x08009560
 8007758:	08009584 	.word	0x08009584

0800775c <_localeconv_r>:
 800775c:	4800      	ldr	r0, [pc, #0]	; (8007760 <_localeconv_r+0x4>)
 800775e:	4770      	bx	lr
 8007760:	20000160 	.word	0x20000160

08007764 <malloc>:
 8007764:	4b02      	ldr	r3, [pc, #8]	; (8007770 <malloc+0xc>)
 8007766:	4601      	mov	r1, r0
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	f000 bc17 	b.w	8007f9c <_malloc_r>
 800776e:	bf00      	nop
 8007770:	2000000c 	.word	0x2000000c

08007774 <memcpy>:
 8007774:	440a      	add	r2, r1
 8007776:	4291      	cmp	r1, r2
 8007778:	f100 33ff 	add.w	r3, r0, #4294967295
 800777c:	d100      	bne.n	8007780 <memcpy+0xc>
 800777e:	4770      	bx	lr
 8007780:	b510      	push	{r4, lr}
 8007782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800778a:	4291      	cmp	r1, r2
 800778c:	d1f9      	bne.n	8007782 <memcpy+0xe>
 800778e:	bd10      	pop	{r4, pc}

08007790 <_Balloc>:
 8007790:	b570      	push	{r4, r5, r6, lr}
 8007792:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007794:	4604      	mov	r4, r0
 8007796:	460d      	mov	r5, r1
 8007798:	b976      	cbnz	r6, 80077b8 <_Balloc+0x28>
 800779a:	2010      	movs	r0, #16
 800779c:	f7ff ffe2 	bl	8007764 <malloc>
 80077a0:	4602      	mov	r2, r0
 80077a2:	6260      	str	r0, [r4, #36]	; 0x24
 80077a4:	b920      	cbnz	r0, 80077b0 <_Balloc+0x20>
 80077a6:	4b18      	ldr	r3, [pc, #96]	; (8007808 <_Balloc+0x78>)
 80077a8:	4818      	ldr	r0, [pc, #96]	; (800780c <_Balloc+0x7c>)
 80077aa:	2166      	movs	r1, #102	; 0x66
 80077ac:	f000 fdd6 	bl	800835c <__assert_func>
 80077b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077b4:	6006      	str	r6, [r0, #0]
 80077b6:	60c6      	str	r6, [r0, #12]
 80077b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80077ba:	68f3      	ldr	r3, [r6, #12]
 80077bc:	b183      	cbz	r3, 80077e0 <_Balloc+0x50>
 80077be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077c6:	b9b8      	cbnz	r0, 80077f8 <_Balloc+0x68>
 80077c8:	2101      	movs	r1, #1
 80077ca:	fa01 f605 	lsl.w	r6, r1, r5
 80077ce:	1d72      	adds	r2, r6, #5
 80077d0:	0092      	lsls	r2, r2, #2
 80077d2:	4620      	mov	r0, r4
 80077d4:	f000 fb60 	bl	8007e98 <_calloc_r>
 80077d8:	b160      	cbz	r0, 80077f4 <_Balloc+0x64>
 80077da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077de:	e00e      	b.n	80077fe <_Balloc+0x6e>
 80077e0:	2221      	movs	r2, #33	; 0x21
 80077e2:	2104      	movs	r1, #4
 80077e4:	4620      	mov	r0, r4
 80077e6:	f000 fb57 	bl	8007e98 <_calloc_r>
 80077ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077ec:	60f0      	str	r0, [r6, #12]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1e4      	bne.n	80077be <_Balloc+0x2e>
 80077f4:	2000      	movs	r0, #0
 80077f6:	bd70      	pop	{r4, r5, r6, pc}
 80077f8:	6802      	ldr	r2, [r0, #0]
 80077fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077fe:	2300      	movs	r3, #0
 8007800:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007804:	e7f7      	b.n	80077f6 <_Balloc+0x66>
 8007806:	bf00      	nop
 8007808:	08009591 	.word	0x08009591
 800780c:	08009614 	.word	0x08009614

08007810 <_Bfree>:
 8007810:	b570      	push	{r4, r5, r6, lr}
 8007812:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007814:	4605      	mov	r5, r0
 8007816:	460c      	mov	r4, r1
 8007818:	b976      	cbnz	r6, 8007838 <_Bfree+0x28>
 800781a:	2010      	movs	r0, #16
 800781c:	f7ff ffa2 	bl	8007764 <malloc>
 8007820:	4602      	mov	r2, r0
 8007822:	6268      	str	r0, [r5, #36]	; 0x24
 8007824:	b920      	cbnz	r0, 8007830 <_Bfree+0x20>
 8007826:	4b09      	ldr	r3, [pc, #36]	; (800784c <_Bfree+0x3c>)
 8007828:	4809      	ldr	r0, [pc, #36]	; (8007850 <_Bfree+0x40>)
 800782a:	218a      	movs	r1, #138	; 0x8a
 800782c:	f000 fd96 	bl	800835c <__assert_func>
 8007830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007834:	6006      	str	r6, [r0, #0]
 8007836:	60c6      	str	r6, [r0, #12]
 8007838:	b13c      	cbz	r4, 800784a <_Bfree+0x3a>
 800783a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800783c:	6862      	ldr	r2, [r4, #4]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007844:	6021      	str	r1, [r4, #0]
 8007846:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	08009591 	.word	0x08009591
 8007850:	08009614 	.word	0x08009614

08007854 <__multadd>:
 8007854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007858:	690d      	ldr	r5, [r1, #16]
 800785a:	4607      	mov	r7, r0
 800785c:	460c      	mov	r4, r1
 800785e:	461e      	mov	r6, r3
 8007860:	f101 0c14 	add.w	ip, r1, #20
 8007864:	2000      	movs	r0, #0
 8007866:	f8dc 3000 	ldr.w	r3, [ip]
 800786a:	b299      	uxth	r1, r3
 800786c:	fb02 6101 	mla	r1, r2, r1, r6
 8007870:	0c1e      	lsrs	r6, r3, #16
 8007872:	0c0b      	lsrs	r3, r1, #16
 8007874:	fb02 3306 	mla	r3, r2, r6, r3
 8007878:	b289      	uxth	r1, r1
 800787a:	3001      	adds	r0, #1
 800787c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007880:	4285      	cmp	r5, r0
 8007882:	f84c 1b04 	str.w	r1, [ip], #4
 8007886:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800788a:	dcec      	bgt.n	8007866 <__multadd+0x12>
 800788c:	b30e      	cbz	r6, 80078d2 <__multadd+0x7e>
 800788e:	68a3      	ldr	r3, [r4, #8]
 8007890:	42ab      	cmp	r3, r5
 8007892:	dc19      	bgt.n	80078c8 <__multadd+0x74>
 8007894:	6861      	ldr	r1, [r4, #4]
 8007896:	4638      	mov	r0, r7
 8007898:	3101      	adds	r1, #1
 800789a:	f7ff ff79 	bl	8007790 <_Balloc>
 800789e:	4680      	mov	r8, r0
 80078a0:	b928      	cbnz	r0, 80078ae <__multadd+0x5a>
 80078a2:	4602      	mov	r2, r0
 80078a4:	4b0c      	ldr	r3, [pc, #48]	; (80078d8 <__multadd+0x84>)
 80078a6:	480d      	ldr	r0, [pc, #52]	; (80078dc <__multadd+0x88>)
 80078a8:	21b5      	movs	r1, #181	; 0xb5
 80078aa:	f000 fd57 	bl	800835c <__assert_func>
 80078ae:	6922      	ldr	r2, [r4, #16]
 80078b0:	3202      	adds	r2, #2
 80078b2:	f104 010c 	add.w	r1, r4, #12
 80078b6:	0092      	lsls	r2, r2, #2
 80078b8:	300c      	adds	r0, #12
 80078ba:	f7ff ff5b 	bl	8007774 <memcpy>
 80078be:	4621      	mov	r1, r4
 80078c0:	4638      	mov	r0, r7
 80078c2:	f7ff ffa5 	bl	8007810 <_Bfree>
 80078c6:	4644      	mov	r4, r8
 80078c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078cc:	3501      	adds	r5, #1
 80078ce:	615e      	str	r6, [r3, #20]
 80078d0:	6125      	str	r5, [r4, #16]
 80078d2:	4620      	mov	r0, r4
 80078d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078d8:	08009603 	.word	0x08009603
 80078dc:	08009614 	.word	0x08009614

080078e0 <__hi0bits>:
 80078e0:	0c03      	lsrs	r3, r0, #16
 80078e2:	041b      	lsls	r3, r3, #16
 80078e4:	b9d3      	cbnz	r3, 800791c <__hi0bits+0x3c>
 80078e6:	0400      	lsls	r0, r0, #16
 80078e8:	2310      	movs	r3, #16
 80078ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078ee:	bf04      	itt	eq
 80078f0:	0200      	lsleq	r0, r0, #8
 80078f2:	3308      	addeq	r3, #8
 80078f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078f8:	bf04      	itt	eq
 80078fa:	0100      	lsleq	r0, r0, #4
 80078fc:	3304      	addeq	r3, #4
 80078fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007902:	bf04      	itt	eq
 8007904:	0080      	lsleq	r0, r0, #2
 8007906:	3302      	addeq	r3, #2
 8007908:	2800      	cmp	r0, #0
 800790a:	db05      	blt.n	8007918 <__hi0bits+0x38>
 800790c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007910:	f103 0301 	add.w	r3, r3, #1
 8007914:	bf08      	it	eq
 8007916:	2320      	moveq	r3, #32
 8007918:	4618      	mov	r0, r3
 800791a:	4770      	bx	lr
 800791c:	2300      	movs	r3, #0
 800791e:	e7e4      	b.n	80078ea <__hi0bits+0xa>

08007920 <__lo0bits>:
 8007920:	6803      	ldr	r3, [r0, #0]
 8007922:	f013 0207 	ands.w	r2, r3, #7
 8007926:	4601      	mov	r1, r0
 8007928:	d00b      	beq.n	8007942 <__lo0bits+0x22>
 800792a:	07da      	lsls	r2, r3, #31
 800792c:	d423      	bmi.n	8007976 <__lo0bits+0x56>
 800792e:	0798      	lsls	r0, r3, #30
 8007930:	bf49      	itett	mi
 8007932:	085b      	lsrmi	r3, r3, #1
 8007934:	089b      	lsrpl	r3, r3, #2
 8007936:	2001      	movmi	r0, #1
 8007938:	600b      	strmi	r3, [r1, #0]
 800793a:	bf5c      	itt	pl
 800793c:	600b      	strpl	r3, [r1, #0]
 800793e:	2002      	movpl	r0, #2
 8007940:	4770      	bx	lr
 8007942:	b298      	uxth	r0, r3
 8007944:	b9a8      	cbnz	r0, 8007972 <__lo0bits+0x52>
 8007946:	0c1b      	lsrs	r3, r3, #16
 8007948:	2010      	movs	r0, #16
 800794a:	b2da      	uxtb	r2, r3
 800794c:	b90a      	cbnz	r2, 8007952 <__lo0bits+0x32>
 800794e:	3008      	adds	r0, #8
 8007950:	0a1b      	lsrs	r3, r3, #8
 8007952:	071a      	lsls	r2, r3, #28
 8007954:	bf04      	itt	eq
 8007956:	091b      	lsreq	r3, r3, #4
 8007958:	3004      	addeq	r0, #4
 800795a:	079a      	lsls	r2, r3, #30
 800795c:	bf04      	itt	eq
 800795e:	089b      	lsreq	r3, r3, #2
 8007960:	3002      	addeq	r0, #2
 8007962:	07da      	lsls	r2, r3, #31
 8007964:	d403      	bmi.n	800796e <__lo0bits+0x4e>
 8007966:	085b      	lsrs	r3, r3, #1
 8007968:	f100 0001 	add.w	r0, r0, #1
 800796c:	d005      	beq.n	800797a <__lo0bits+0x5a>
 800796e:	600b      	str	r3, [r1, #0]
 8007970:	4770      	bx	lr
 8007972:	4610      	mov	r0, r2
 8007974:	e7e9      	b.n	800794a <__lo0bits+0x2a>
 8007976:	2000      	movs	r0, #0
 8007978:	4770      	bx	lr
 800797a:	2020      	movs	r0, #32
 800797c:	4770      	bx	lr
	...

08007980 <__i2b>:
 8007980:	b510      	push	{r4, lr}
 8007982:	460c      	mov	r4, r1
 8007984:	2101      	movs	r1, #1
 8007986:	f7ff ff03 	bl	8007790 <_Balloc>
 800798a:	4602      	mov	r2, r0
 800798c:	b928      	cbnz	r0, 800799a <__i2b+0x1a>
 800798e:	4b05      	ldr	r3, [pc, #20]	; (80079a4 <__i2b+0x24>)
 8007990:	4805      	ldr	r0, [pc, #20]	; (80079a8 <__i2b+0x28>)
 8007992:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007996:	f000 fce1 	bl	800835c <__assert_func>
 800799a:	2301      	movs	r3, #1
 800799c:	6144      	str	r4, [r0, #20]
 800799e:	6103      	str	r3, [r0, #16]
 80079a0:	bd10      	pop	{r4, pc}
 80079a2:	bf00      	nop
 80079a4:	08009603 	.word	0x08009603
 80079a8:	08009614 	.word	0x08009614

080079ac <__multiply>:
 80079ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b0:	4691      	mov	r9, r2
 80079b2:	690a      	ldr	r2, [r1, #16]
 80079b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	bfb8      	it	lt
 80079bc:	460b      	movlt	r3, r1
 80079be:	460c      	mov	r4, r1
 80079c0:	bfbc      	itt	lt
 80079c2:	464c      	movlt	r4, r9
 80079c4:	4699      	movlt	r9, r3
 80079c6:	6927      	ldr	r7, [r4, #16]
 80079c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079cc:	68a3      	ldr	r3, [r4, #8]
 80079ce:	6861      	ldr	r1, [r4, #4]
 80079d0:	eb07 060a 	add.w	r6, r7, sl
 80079d4:	42b3      	cmp	r3, r6
 80079d6:	b085      	sub	sp, #20
 80079d8:	bfb8      	it	lt
 80079da:	3101      	addlt	r1, #1
 80079dc:	f7ff fed8 	bl	8007790 <_Balloc>
 80079e0:	b930      	cbnz	r0, 80079f0 <__multiply+0x44>
 80079e2:	4602      	mov	r2, r0
 80079e4:	4b44      	ldr	r3, [pc, #272]	; (8007af8 <__multiply+0x14c>)
 80079e6:	4845      	ldr	r0, [pc, #276]	; (8007afc <__multiply+0x150>)
 80079e8:	f240 115d 	movw	r1, #349	; 0x15d
 80079ec:	f000 fcb6 	bl	800835c <__assert_func>
 80079f0:	f100 0514 	add.w	r5, r0, #20
 80079f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079f8:	462b      	mov	r3, r5
 80079fa:	2200      	movs	r2, #0
 80079fc:	4543      	cmp	r3, r8
 80079fe:	d321      	bcc.n	8007a44 <__multiply+0x98>
 8007a00:	f104 0314 	add.w	r3, r4, #20
 8007a04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a08:	f109 0314 	add.w	r3, r9, #20
 8007a0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a10:	9202      	str	r2, [sp, #8]
 8007a12:	1b3a      	subs	r2, r7, r4
 8007a14:	3a15      	subs	r2, #21
 8007a16:	f022 0203 	bic.w	r2, r2, #3
 8007a1a:	3204      	adds	r2, #4
 8007a1c:	f104 0115 	add.w	r1, r4, #21
 8007a20:	428f      	cmp	r7, r1
 8007a22:	bf38      	it	cc
 8007a24:	2204      	movcc	r2, #4
 8007a26:	9201      	str	r2, [sp, #4]
 8007a28:	9a02      	ldr	r2, [sp, #8]
 8007a2a:	9303      	str	r3, [sp, #12]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d80c      	bhi.n	8007a4a <__multiply+0x9e>
 8007a30:	2e00      	cmp	r6, #0
 8007a32:	dd03      	ble.n	8007a3c <__multiply+0x90>
 8007a34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d05a      	beq.n	8007af2 <__multiply+0x146>
 8007a3c:	6106      	str	r6, [r0, #16]
 8007a3e:	b005      	add	sp, #20
 8007a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a44:	f843 2b04 	str.w	r2, [r3], #4
 8007a48:	e7d8      	b.n	80079fc <__multiply+0x50>
 8007a4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a4e:	f1ba 0f00 	cmp.w	sl, #0
 8007a52:	d024      	beq.n	8007a9e <__multiply+0xf2>
 8007a54:	f104 0e14 	add.w	lr, r4, #20
 8007a58:	46a9      	mov	r9, r5
 8007a5a:	f04f 0c00 	mov.w	ip, #0
 8007a5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a62:	f8d9 1000 	ldr.w	r1, [r9]
 8007a66:	fa1f fb82 	uxth.w	fp, r2
 8007a6a:	b289      	uxth	r1, r1
 8007a6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a74:	f8d9 2000 	ldr.w	r2, [r9]
 8007a78:	4461      	add	r1, ip
 8007a7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a7e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a86:	b289      	uxth	r1, r1
 8007a88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a8c:	4577      	cmp	r7, lr
 8007a8e:	f849 1b04 	str.w	r1, [r9], #4
 8007a92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a96:	d8e2      	bhi.n	8007a5e <__multiply+0xb2>
 8007a98:	9a01      	ldr	r2, [sp, #4]
 8007a9a:	f845 c002 	str.w	ip, [r5, r2]
 8007a9e:	9a03      	ldr	r2, [sp, #12]
 8007aa0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	f1b9 0f00 	cmp.w	r9, #0
 8007aaa:	d020      	beq.n	8007aee <__multiply+0x142>
 8007aac:	6829      	ldr	r1, [r5, #0]
 8007aae:	f104 0c14 	add.w	ip, r4, #20
 8007ab2:	46ae      	mov	lr, r5
 8007ab4:	f04f 0a00 	mov.w	sl, #0
 8007ab8:	f8bc b000 	ldrh.w	fp, [ip]
 8007abc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007ac0:	fb09 220b 	mla	r2, r9, fp, r2
 8007ac4:	4492      	add	sl, r2
 8007ac6:	b289      	uxth	r1, r1
 8007ac8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007acc:	f84e 1b04 	str.w	r1, [lr], #4
 8007ad0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007ad4:	f8be 1000 	ldrh.w	r1, [lr]
 8007ad8:	0c12      	lsrs	r2, r2, #16
 8007ada:	fb09 1102 	mla	r1, r9, r2, r1
 8007ade:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007ae2:	4567      	cmp	r7, ip
 8007ae4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ae8:	d8e6      	bhi.n	8007ab8 <__multiply+0x10c>
 8007aea:	9a01      	ldr	r2, [sp, #4]
 8007aec:	50a9      	str	r1, [r5, r2]
 8007aee:	3504      	adds	r5, #4
 8007af0:	e79a      	b.n	8007a28 <__multiply+0x7c>
 8007af2:	3e01      	subs	r6, #1
 8007af4:	e79c      	b.n	8007a30 <__multiply+0x84>
 8007af6:	bf00      	nop
 8007af8:	08009603 	.word	0x08009603
 8007afc:	08009614 	.word	0x08009614

08007b00 <__pow5mult>:
 8007b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b04:	4615      	mov	r5, r2
 8007b06:	f012 0203 	ands.w	r2, r2, #3
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	460f      	mov	r7, r1
 8007b0e:	d007      	beq.n	8007b20 <__pow5mult+0x20>
 8007b10:	4c25      	ldr	r4, [pc, #148]	; (8007ba8 <__pow5mult+0xa8>)
 8007b12:	3a01      	subs	r2, #1
 8007b14:	2300      	movs	r3, #0
 8007b16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b1a:	f7ff fe9b 	bl	8007854 <__multadd>
 8007b1e:	4607      	mov	r7, r0
 8007b20:	10ad      	asrs	r5, r5, #2
 8007b22:	d03d      	beq.n	8007ba0 <__pow5mult+0xa0>
 8007b24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007b26:	b97c      	cbnz	r4, 8007b48 <__pow5mult+0x48>
 8007b28:	2010      	movs	r0, #16
 8007b2a:	f7ff fe1b 	bl	8007764 <malloc>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	6270      	str	r0, [r6, #36]	; 0x24
 8007b32:	b928      	cbnz	r0, 8007b40 <__pow5mult+0x40>
 8007b34:	4b1d      	ldr	r3, [pc, #116]	; (8007bac <__pow5mult+0xac>)
 8007b36:	481e      	ldr	r0, [pc, #120]	; (8007bb0 <__pow5mult+0xb0>)
 8007b38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b3c:	f000 fc0e 	bl	800835c <__assert_func>
 8007b40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b44:	6004      	str	r4, [r0, #0]
 8007b46:	60c4      	str	r4, [r0, #12]
 8007b48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b50:	b94c      	cbnz	r4, 8007b66 <__pow5mult+0x66>
 8007b52:	f240 2171 	movw	r1, #625	; 0x271
 8007b56:	4630      	mov	r0, r6
 8007b58:	f7ff ff12 	bl	8007980 <__i2b>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b62:	4604      	mov	r4, r0
 8007b64:	6003      	str	r3, [r0, #0]
 8007b66:	f04f 0900 	mov.w	r9, #0
 8007b6a:	07eb      	lsls	r3, r5, #31
 8007b6c:	d50a      	bpl.n	8007b84 <__pow5mult+0x84>
 8007b6e:	4639      	mov	r1, r7
 8007b70:	4622      	mov	r2, r4
 8007b72:	4630      	mov	r0, r6
 8007b74:	f7ff ff1a 	bl	80079ac <__multiply>
 8007b78:	4639      	mov	r1, r7
 8007b7a:	4680      	mov	r8, r0
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f7ff fe47 	bl	8007810 <_Bfree>
 8007b82:	4647      	mov	r7, r8
 8007b84:	106d      	asrs	r5, r5, #1
 8007b86:	d00b      	beq.n	8007ba0 <__pow5mult+0xa0>
 8007b88:	6820      	ldr	r0, [r4, #0]
 8007b8a:	b938      	cbnz	r0, 8007b9c <__pow5mult+0x9c>
 8007b8c:	4622      	mov	r2, r4
 8007b8e:	4621      	mov	r1, r4
 8007b90:	4630      	mov	r0, r6
 8007b92:	f7ff ff0b 	bl	80079ac <__multiply>
 8007b96:	6020      	str	r0, [r4, #0]
 8007b98:	f8c0 9000 	str.w	r9, [r0]
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	e7e4      	b.n	8007b6a <__pow5mult+0x6a>
 8007ba0:	4638      	mov	r0, r7
 8007ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ba6:	bf00      	nop
 8007ba8:	08009760 	.word	0x08009760
 8007bac:	08009591 	.word	0x08009591
 8007bb0:	08009614 	.word	0x08009614

08007bb4 <__lshift>:
 8007bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb8:	460c      	mov	r4, r1
 8007bba:	6849      	ldr	r1, [r1, #4]
 8007bbc:	6923      	ldr	r3, [r4, #16]
 8007bbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bc2:	68a3      	ldr	r3, [r4, #8]
 8007bc4:	4607      	mov	r7, r0
 8007bc6:	4691      	mov	r9, r2
 8007bc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bcc:	f108 0601 	add.w	r6, r8, #1
 8007bd0:	42b3      	cmp	r3, r6
 8007bd2:	db0b      	blt.n	8007bec <__lshift+0x38>
 8007bd4:	4638      	mov	r0, r7
 8007bd6:	f7ff fddb 	bl	8007790 <_Balloc>
 8007bda:	4605      	mov	r5, r0
 8007bdc:	b948      	cbnz	r0, 8007bf2 <__lshift+0x3e>
 8007bde:	4602      	mov	r2, r0
 8007be0:	4b2a      	ldr	r3, [pc, #168]	; (8007c8c <__lshift+0xd8>)
 8007be2:	482b      	ldr	r0, [pc, #172]	; (8007c90 <__lshift+0xdc>)
 8007be4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007be8:	f000 fbb8 	bl	800835c <__assert_func>
 8007bec:	3101      	adds	r1, #1
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	e7ee      	b.n	8007bd0 <__lshift+0x1c>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f100 0114 	add.w	r1, r0, #20
 8007bf8:	f100 0210 	add.w	r2, r0, #16
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	4553      	cmp	r3, sl
 8007c00:	db37      	blt.n	8007c72 <__lshift+0xbe>
 8007c02:	6920      	ldr	r0, [r4, #16]
 8007c04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c08:	f104 0314 	add.w	r3, r4, #20
 8007c0c:	f019 091f 	ands.w	r9, r9, #31
 8007c10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007c18:	d02f      	beq.n	8007c7a <__lshift+0xc6>
 8007c1a:	f1c9 0e20 	rsb	lr, r9, #32
 8007c1e:	468a      	mov	sl, r1
 8007c20:	f04f 0c00 	mov.w	ip, #0
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	fa02 f209 	lsl.w	r2, r2, r9
 8007c2a:	ea42 020c 	orr.w	r2, r2, ip
 8007c2e:	f84a 2b04 	str.w	r2, [sl], #4
 8007c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c36:	4298      	cmp	r0, r3
 8007c38:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007c3c:	d8f2      	bhi.n	8007c24 <__lshift+0x70>
 8007c3e:	1b03      	subs	r3, r0, r4
 8007c40:	3b15      	subs	r3, #21
 8007c42:	f023 0303 	bic.w	r3, r3, #3
 8007c46:	3304      	adds	r3, #4
 8007c48:	f104 0215 	add.w	r2, r4, #21
 8007c4c:	4290      	cmp	r0, r2
 8007c4e:	bf38      	it	cc
 8007c50:	2304      	movcc	r3, #4
 8007c52:	f841 c003 	str.w	ip, [r1, r3]
 8007c56:	f1bc 0f00 	cmp.w	ip, #0
 8007c5a:	d001      	beq.n	8007c60 <__lshift+0xac>
 8007c5c:	f108 0602 	add.w	r6, r8, #2
 8007c60:	3e01      	subs	r6, #1
 8007c62:	4638      	mov	r0, r7
 8007c64:	612e      	str	r6, [r5, #16]
 8007c66:	4621      	mov	r1, r4
 8007c68:	f7ff fdd2 	bl	8007810 <_Bfree>
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c72:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c76:	3301      	adds	r3, #1
 8007c78:	e7c1      	b.n	8007bfe <__lshift+0x4a>
 8007c7a:	3904      	subs	r1, #4
 8007c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c80:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c84:	4298      	cmp	r0, r3
 8007c86:	d8f9      	bhi.n	8007c7c <__lshift+0xc8>
 8007c88:	e7ea      	b.n	8007c60 <__lshift+0xac>
 8007c8a:	bf00      	nop
 8007c8c:	08009603 	.word	0x08009603
 8007c90:	08009614 	.word	0x08009614

08007c94 <__mcmp>:
 8007c94:	b530      	push	{r4, r5, lr}
 8007c96:	6902      	ldr	r2, [r0, #16]
 8007c98:	690c      	ldr	r4, [r1, #16]
 8007c9a:	1b12      	subs	r2, r2, r4
 8007c9c:	d10e      	bne.n	8007cbc <__mcmp+0x28>
 8007c9e:	f100 0314 	add.w	r3, r0, #20
 8007ca2:	3114      	adds	r1, #20
 8007ca4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ca8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007cac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007cb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007cb4:	42a5      	cmp	r5, r4
 8007cb6:	d003      	beq.n	8007cc0 <__mcmp+0x2c>
 8007cb8:	d305      	bcc.n	8007cc6 <__mcmp+0x32>
 8007cba:	2201      	movs	r2, #1
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	bd30      	pop	{r4, r5, pc}
 8007cc0:	4283      	cmp	r3, r0
 8007cc2:	d3f3      	bcc.n	8007cac <__mcmp+0x18>
 8007cc4:	e7fa      	b.n	8007cbc <__mcmp+0x28>
 8007cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cca:	e7f7      	b.n	8007cbc <__mcmp+0x28>

08007ccc <__mdiff>:
 8007ccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd0:	460c      	mov	r4, r1
 8007cd2:	4606      	mov	r6, r0
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	4690      	mov	r8, r2
 8007cda:	f7ff ffdb 	bl	8007c94 <__mcmp>
 8007cde:	1e05      	subs	r5, r0, #0
 8007ce0:	d110      	bne.n	8007d04 <__mdiff+0x38>
 8007ce2:	4629      	mov	r1, r5
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	f7ff fd53 	bl	8007790 <_Balloc>
 8007cea:	b930      	cbnz	r0, 8007cfa <__mdiff+0x2e>
 8007cec:	4b3a      	ldr	r3, [pc, #232]	; (8007dd8 <__mdiff+0x10c>)
 8007cee:	4602      	mov	r2, r0
 8007cf0:	f240 2132 	movw	r1, #562	; 0x232
 8007cf4:	4839      	ldr	r0, [pc, #228]	; (8007ddc <__mdiff+0x110>)
 8007cf6:	f000 fb31 	bl	800835c <__assert_func>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d04:	bfa4      	itt	ge
 8007d06:	4643      	movge	r3, r8
 8007d08:	46a0      	movge	r8, r4
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d10:	bfa6      	itte	ge
 8007d12:	461c      	movge	r4, r3
 8007d14:	2500      	movge	r5, #0
 8007d16:	2501      	movlt	r5, #1
 8007d18:	f7ff fd3a 	bl	8007790 <_Balloc>
 8007d1c:	b920      	cbnz	r0, 8007d28 <__mdiff+0x5c>
 8007d1e:	4b2e      	ldr	r3, [pc, #184]	; (8007dd8 <__mdiff+0x10c>)
 8007d20:	4602      	mov	r2, r0
 8007d22:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007d26:	e7e5      	b.n	8007cf4 <__mdiff+0x28>
 8007d28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d2c:	6926      	ldr	r6, [r4, #16]
 8007d2e:	60c5      	str	r5, [r0, #12]
 8007d30:	f104 0914 	add.w	r9, r4, #20
 8007d34:	f108 0514 	add.w	r5, r8, #20
 8007d38:	f100 0e14 	add.w	lr, r0, #20
 8007d3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007d40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d44:	f108 0210 	add.w	r2, r8, #16
 8007d48:	46f2      	mov	sl, lr
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d54:	fa1f f883 	uxth.w	r8, r3
 8007d58:	fa11 f18b 	uxtah	r1, r1, fp
 8007d5c:	0c1b      	lsrs	r3, r3, #16
 8007d5e:	eba1 0808 	sub.w	r8, r1, r8
 8007d62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d6a:	fa1f f888 	uxth.w	r8, r8
 8007d6e:	1419      	asrs	r1, r3, #16
 8007d70:	454e      	cmp	r6, r9
 8007d72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d76:	f84a 3b04 	str.w	r3, [sl], #4
 8007d7a:	d8e7      	bhi.n	8007d4c <__mdiff+0x80>
 8007d7c:	1b33      	subs	r3, r6, r4
 8007d7e:	3b15      	subs	r3, #21
 8007d80:	f023 0303 	bic.w	r3, r3, #3
 8007d84:	3304      	adds	r3, #4
 8007d86:	3415      	adds	r4, #21
 8007d88:	42a6      	cmp	r6, r4
 8007d8a:	bf38      	it	cc
 8007d8c:	2304      	movcc	r3, #4
 8007d8e:	441d      	add	r5, r3
 8007d90:	4473      	add	r3, lr
 8007d92:	469e      	mov	lr, r3
 8007d94:	462e      	mov	r6, r5
 8007d96:	4566      	cmp	r6, ip
 8007d98:	d30e      	bcc.n	8007db8 <__mdiff+0xec>
 8007d9a:	f10c 0203 	add.w	r2, ip, #3
 8007d9e:	1b52      	subs	r2, r2, r5
 8007da0:	f022 0203 	bic.w	r2, r2, #3
 8007da4:	3d03      	subs	r5, #3
 8007da6:	45ac      	cmp	ip, r5
 8007da8:	bf38      	it	cc
 8007daa:	2200      	movcc	r2, #0
 8007dac:	441a      	add	r2, r3
 8007dae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007db2:	b17b      	cbz	r3, 8007dd4 <__mdiff+0x108>
 8007db4:	6107      	str	r7, [r0, #16]
 8007db6:	e7a3      	b.n	8007d00 <__mdiff+0x34>
 8007db8:	f856 8b04 	ldr.w	r8, [r6], #4
 8007dbc:	fa11 f288 	uxtah	r2, r1, r8
 8007dc0:	1414      	asrs	r4, r2, #16
 8007dc2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007dc6:	b292      	uxth	r2, r2
 8007dc8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007dcc:	f84e 2b04 	str.w	r2, [lr], #4
 8007dd0:	1421      	asrs	r1, r4, #16
 8007dd2:	e7e0      	b.n	8007d96 <__mdiff+0xca>
 8007dd4:	3f01      	subs	r7, #1
 8007dd6:	e7ea      	b.n	8007dae <__mdiff+0xe2>
 8007dd8:	08009603 	.word	0x08009603
 8007ddc:	08009614 	.word	0x08009614

08007de0 <__d2b>:
 8007de0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007de4:	4689      	mov	r9, r1
 8007de6:	2101      	movs	r1, #1
 8007de8:	ec57 6b10 	vmov	r6, r7, d0
 8007dec:	4690      	mov	r8, r2
 8007dee:	f7ff fccf 	bl	8007790 <_Balloc>
 8007df2:	4604      	mov	r4, r0
 8007df4:	b930      	cbnz	r0, 8007e04 <__d2b+0x24>
 8007df6:	4602      	mov	r2, r0
 8007df8:	4b25      	ldr	r3, [pc, #148]	; (8007e90 <__d2b+0xb0>)
 8007dfa:	4826      	ldr	r0, [pc, #152]	; (8007e94 <__d2b+0xb4>)
 8007dfc:	f240 310a 	movw	r1, #778	; 0x30a
 8007e00:	f000 faac 	bl	800835c <__assert_func>
 8007e04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007e08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e0c:	bb35      	cbnz	r5, 8007e5c <__d2b+0x7c>
 8007e0e:	2e00      	cmp	r6, #0
 8007e10:	9301      	str	r3, [sp, #4]
 8007e12:	d028      	beq.n	8007e66 <__d2b+0x86>
 8007e14:	4668      	mov	r0, sp
 8007e16:	9600      	str	r6, [sp, #0]
 8007e18:	f7ff fd82 	bl	8007920 <__lo0bits>
 8007e1c:	9900      	ldr	r1, [sp, #0]
 8007e1e:	b300      	cbz	r0, 8007e62 <__d2b+0x82>
 8007e20:	9a01      	ldr	r2, [sp, #4]
 8007e22:	f1c0 0320 	rsb	r3, r0, #32
 8007e26:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2a:	430b      	orrs	r3, r1
 8007e2c:	40c2      	lsrs	r2, r0
 8007e2e:	6163      	str	r3, [r4, #20]
 8007e30:	9201      	str	r2, [sp, #4]
 8007e32:	9b01      	ldr	r3, [sp, #4]
 8007e34:	61a3      	str	r3, [r4, #24]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	bf14      	ite	ne
 8007e3a:	2202      	movne	r2, #2
 8007e3c:	2201      	moveq	r2, #1
 8007e3e:	6122      	str	r2, [r4, #16]
 8007e40:	b1d5      	cbz	r5, 8007e78 <__d2b+0x98>
 8007e42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e46:	4405      	add	r5, r0
 8007e48:	f8c9 5000 	str.w	r5, [r9]
 8007e4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e50:	f8c8 0000 	str.w	r0, [r8]
 8007e54:	4620      	mov	r0, r4
 8007e56:	b003      	add	sp, #12
 8007e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e60:	e7d5      	b.n	8007e0e <__d2b+0x2e>
 8007e62:	6161      	str	r1, [r4, #20]
 8007e64:	e7e5      	b.n	8007e32 <__d2b+0x52>
 8007e66:	a801      	add	r0, sp, #4
 8007e68:	f7ff fd5a 	bl	8007920 <__lo0bits>
 8007e6c:	9b01      	ldr	r3, [sp, #4]
 8007e6e:	6163      	str	r3, [r4, #20]
 8007e70:	2201      	movs	r2, #1
 8007e72:	6122      	str	r2, [r4, #16]
 8007e74:	3020      	adds	r0, #32
 8007e76:	e7e3      	b.n	8007e40 <__d2b+0x60>
 8007e78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e80:	f8c9 0000 	str.w	r0, [r9]
 8007e84:	6918      	ldr	r0, [r3, #16]
 8007e86:	f7ff fd2b 	bl	80078e0 <__hi0bits>
 8007e8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e8e:	e7df      	b.n	8007e50 <__d2b+0x70>
 8007e90:	08009603 	.word	0x08009603
 8007e94:	08009614 	.word	0x08009614

08007e98 <_calloc_r>:
 8007e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e9a:	fba1 2402 	umull	r2, r4, r1, r2
 8007e9e:	b94c      	cbnz	r4, 8007eb4 <_calloc_r+0x1c>
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	9201      	str	r2, [sp, #4]
 8007ea4:	f000 f87a 	bl	8007f9c <_malloc_r>
 8007ea8:	9a01      	ldr	r2, [sp, #4]
 8007eaa:	4605      	mov	r5, r0
 8007eac:	b930      	cbnz	r0, 8007ebc <_calloc_r+0x24>
 8007eae:	4628      	mov	r0, r5
 8007eb0:	b003      	add	sp, #12
 8007eb2:	bd30      	pop	{r4, r5, pc}
 8007eb4:	220c      	movs	r2, #12
 8007eb6:	6002      	str	r2, [r0, #0]
 8007eb8:	2500      	movs	r5, #0
 8007eba:	e7f8      	b.n	8007eae <_calloc_r+0x16>
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	f7fe f941 	bl	8006144 <memset>
 8007ec2:	e7f4      	b.n	8007eae <_calloc_r+0x16>

08007ec4 <_free_r>:
 8007ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ec6:	2900      	cmp	r1, #0
 8007ec8:	d044      	beq.n	8007f54 <_free_r+0x90>
 8007eca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ece:	9001      	str	r0, [sp, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f1a1 0404 	sub.w	r4, r1, #4
 8007ed6:	bfb8      	it	lt
 8007ed8:	18e4      	addlt	r4, r4, r3
 8007eda:	f000 fa9b 	bl	8008414 <__malloc_lock>
 8007ede:	4a1e      	ldr	r2, [pc, #120]	; (8007f58 <_free_r+0x94>)
 8007ee0:	9801      	ldr	r0, [sp, #4]
 8007ee2:	6813      	ldr	r3, [r2, #0]
 8007ee4:	b933      	cbnz	r3, 8007ef4 <_free_r+0x30>
 8007ee6:	6063      	str	r3, [r4, #4]
 8007ee8:	6014      	str	r4, [r2, #0]
 8007eea:	b003      	add	sp, #12
 8007eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ef0:	f000 ba96 	b.w	8008420 <__malloc_unlock>
 8007ef4:	42a3      	cmp	r3, r4
 8007ef6:	d908      	bls.n	8007f0a <_free_r+0x46>
 8007ef8:	6825      	ldr	r5, [r4, #0]
 8007efa:	1961      	adds	r1, r4, r5
 8007efc:	428b      	cmp	r3, r1
 8007efe:	bf01      	itttt	eq
 8007f00:	6819      	ldreq	r1, [r3, #0]
 8007f02:	685b      	ldreq	r3, [r3, #4]
 8007f04:	1949      	addeq	r1, r1, r5
 8007f06:	6021      	streq	r1, [r4, #0]
 8007f08:	e7ed      	b.n	8007ee6 <_free_r+0x22>
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	b10b      	cbz	r3, 8007f14 <_free_r+0x50>
 8007f10:	42a3      	cmp	r3, r4
 8007f12:	d9fa      	bls.n	8007f0a <_free_r+0x46>
 8007f14:	6811      	ldr	r1, [r2, #0]
 8007f16:	1855      	adds	r5, r2, r1
 8007f18:	42a5      	cmp	r5, r4
 8007f1a:	d10b      	bne.n	8007f34 <_free_r+0x70>
 8007f1c:	6824      	ldr	r4, [r4, #0]
 8007f1e:	4421      	add	r1, r4
 8007f20:	1854      	adds	r4, r2, r1
 8007f22:	42a3      	cmp	r3, r4
 8007f24:	6011      	str	r1, [r2, #0]
 8007f26:	d1e0      	bne.n	8007eea <_free_r+0x26>
 8007f28:	681c      	ldr	r4, [r3, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	6053      	str	r3, [r2, #4]
 8007f2e:	4421      	add	r1, r4
 8007f30:	6011      	str	r1, [r2, #0]
 8007f32:	e7da      	b.n	8007eea <_free_r+0x26>
 8007f34:	d902      	bls.n	8007f3c <_free_r+0x78>
 8007f36:	230c      	movs	r3, #12
 8007f38:	6003      	str	r3, [r0, #0]
 8007f3a:	e7d6      	b.n	8007eea <_free_r+0x26>
 8007f3c:	6825      	ldr	r5, [r4, #0]
 8007f3e:	1961      	adds	r1, r4, r5
 8007f40:	428b      	cmp	r3, r1
 8007f42:	bf04      	itt	eq
 8007f44:	6819      	ldreq	r1, [r3, #0]
 8007f46:	685b      	ldreq	r3, [r3, #4]
 8007f48:	6063      	str	r3, [r4, #4]
 8007f4a:	bf04      	itt	eq
 8007f4c:	1949      	addeq	r1, r1, r5
 8007f4e:	6021      	streq	r1, [r4, #0]
 8007f50:	6054      	str	r4, [r2, #4]
 8007f52:	e7ca      	b.n	8007eea <_free_r+0x26>
 8007f54:	b003      	add	sp, #12
 8007f56:	bd30      	pop	{r4, r5, pc}
 8007f58:	2000043c 	.word	0x2000043c

08007f5c <sbrk_aligned>:
 8007f5c:	b570      	push	{r4, r5, r6, lr}
 8007f5e:	4e0e      	ldr	r6, [pc, #56]	; (8007f98 <sbrk_aligned+0x3c>)
 8007f60:	460c      	mov	r4, r1
 8007f62:	6831      	ldr	r1, [r6, #0]
 8007f64:	4605      	mov	r5, r0
 8007f66:	b911      	cbnz	r1, 8007f6e <sbrk_aligned+0x12>
 8007f68:	f000 f9e8 	bl	800833c <_sbrk_r>
 8007f6c:	6030      	str	r0, [r6, #0]
 8007f6e:	4621      	mov	r1, r4
 8007f70:	4628      	mov	r0, r5
 8007f72:	f000 f9e3 	bl	800833c <_sbrk_r>
 8007f76:	1c43      	adds	r3, r0, #1
 8007f78:	d00a      	beq.n	8007f90 <sbrk_aligned+0x34>
 8007f7a:	1cc4      	adds	r4, r0, #3
 8007f7c:	f024 0403 	bic.w	r4, r4, #3
 8007f80:	42a0      	cmp	r0, r4
 8007f82:	d007      	beq.n	8007f94 <sbrk_aligned+0x38>
 8007f84:	1a21      	subs	r1, r4, r0
 8007f86:	4628      	mov	r0, r5
 8007f88:	f000 f9d8 	bl	800833c <_sbrk_r>
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	d101      	bne.n	8007f94 <sbrk_aligned+0x38>
 8007f90:	f04f 34ff 	mov.w	r4, #4294967295
 8007f94:	4620      	mov	r0, r4
 8007f96:	bd70      	pop	{r4, r5, r6, pc}
 8007f98:	20000440 	.word	0x20000440

08007f9c <_malloc_r>:
 8007f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa0:	1ccd      	adds	r5, r1, #3
 8007fa2:	f025 0503 	bic.w	r5, r5, #3
 8007fa6:	3508      	adds	r5, #8
 8007fa8:	2d0c      	cmp	r5, #12
 8007faa:	bf38      	it	cc
 8007fac:	250c      	movcc	r5, #12
 8007fae:	2d00      	cmp	r5, #0
 8007fb0:	4607      	mov	r7, r0
 8007fb2:	db01      	blt.n	8007fb8 <_malloc_r+0x1c>
 8007fb4:	42a9      	cmp	r1, r5
 8007fb6:	d905      	bls.n	8007fc4 <_malloc_r+0x28>
 8007fb8:	230c      	movs	r3, #12
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	2600      	movs	r6, #0
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc4:	4e2e      	ldr	r6, [pc, #184]	; (8008080 <_malloc_r+0xe4>)
 8007fc6:	f000 fa25 	bl	8008414 <__malloc_lock>
 8007fca:	6833      	ldr	r3, [r6, #0]
 8007fcc:	461c      	mov	r4, r3
 8007fce:	bb34      	cbnz	r4, 800801e <_malloc_r+0x82>
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	f7ff ffc2 	bl	8007f5c <sbrk_aligned>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	4604      	mov	r4, r0
 8007fdc:	d14d      	bne.n	800807a <_malloc_r+0xde>
 8007fde:	6834      	ldr	r4, [r6, #0]
 8007fe0:	4626      	mov	r6, r4
 8007fe2:	2e00      	cmp	r6, #0
 8007fe4:	d140      	bne.n	8008068 <_malloc_r+0xcc>
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	4631      	mov	r1, r6
 8007fea:	4638      	mov	r0, r7
 8007fec:	eb04 0803 	add.w	r8, r4, r3
 8007ff0:	f000 f9a4 	bl	800833c <_sbrk_r>
 8007ff4:	4580      	cmp	r8, r0
 8007ff6:	d13a      	bne.n	800806e <_malloc_r+0xd2>
 8007ff8:	6821      	ldr	r1, [r4, #0]
 8007ffa:	3503      	adds	r5, #3
 8007ffc:	1a6d      	subs	r5, r5, r1
 8007ffe:	f025 0503 	bic.w	r5, r5, #3
 8008002:	3508      	adds	r5, #8
 8008004:	2d0c      	cmp	r5, #12
 8008006:	bf38      	it	cc
 8008008:	250c      	movcc	r5, #12
 800800a:	4629      	mov	r1, r5
 800800c:	4638      	mov	r0, r7
 800800e:	f7ff ffa5 	bl	8007f5c <sbrk_aligned>
 8008012:	3001      	adds	r0, #1
 8008014:	d02b      	beq.n	800806e <_malloc_r+0xd2>
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	442b      	add	r3, r5
 800801a:	6023      	str	r3, [r4, #0]
 800801c:	e00e      	b.n	800803c <_malloc_r+0xa0>
 800801e:	6822      	ldr	r2, [r4, #0]
 8008020:	1b52      	subs	r2, r2, r5
 8008022:	d41e      	bmi.n	8008062 <_malloc_r+0xc6>
 8008024:	2a0b      	cmp	r2, #11
 8008026:	d916      	bls.n	8008056 <_malloc_r+0xba>
 8008028:	1961      	adds	r1, r4, r5
 800802a:	42a3      	cmp	r3, r4
 800802c:	6025      	str	r5, [r4, #0]
 800802e:	bf18      	it	ne
 8008030:	6059      	strne	r1, [r3, #4]
 8008032:	6863      	ldr	r3, [r4, #4]
 8008034:	bf08      	it	eq
 8008036:	6031      	streq	r1, [r6, #0]
 8008038:	5162      	str	r2, [r4, r5]
 800803a:	604b      	str	r3, [r1, #4]
 800803c:	4638      	mov	r0, r7
 800803e:	f104 060b 	add.w	r6, r4, #11
 8008042:	f000 f9ed 	bl	8008420 <__malloc_unlock>
 8008046:	f026 0607 	bic.w	r6, r6, #7
 800804a:	1d23      	adds	r3, r4, #4
 800804c:	1af2      	subs	r2, r6, r3
 800804e:	d0b6      	beq.n	8007fbe <_malloc_r+0x22>
 8008050:	1b9b      	subs	r3, r3, r6
 8008052:	50a3      	str	r3, [r4, r2]
 8008054:	e7b3      	b.n	8007fbe <_malloc_r+0x22>
 8008056:	6862      	ldr	r2, [r4, #4]
 8008058:	42a3      	cmp	r3, r4
 800805a:	bf0c      	ite	eq
 800805c:	6032      	streq	r2, [r6, #0]
 800805e:	605a      	strne	r2, [r3, #4]
 8008060:	e7ec      	b.n	800803c <_malloc_r+0xa0>
 8008062:	4623      	mov	r3, r4
 8008064:	6864      	ldr	r4, [r4, #4]
 8008066:	e7b2      	b.n	8007fce <_malloc_r+0x32>
 8008068:	4634      	mov	r4, r6
 800806a:	6876      	ldr	r6, [r6, #4]
 800806c:	e7b9      	b.n	8007fe2 <_malloc_r+0x46>
 800806e:	230c      	movs	r3, #12
 8008070:	603b      	str	r3, [r7, #0]
 8008072:	4638      	mov	r0, r7
 8008074:	f000 f9d4 	bl	8008420 <__malloc_unlock>
 8008078:	e7a1      	b.n	8007fbe <_malloc_r+0x22>
 800807a:	6025      	str	r5, [r4, #0]
 800807c:	e7de      	b.n	800803c <_malloc_r+0xa0>
 800807e:	bf00      	nop
 8008080:	2000043c 	.word	0x2000043c

08008084 <__ssputs_r>:
 8008084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008088:	688e      	ldr	r6, [r1, #8]
 800808a:	429e      	cmp	r6, r3
 800808c:	4682      	mov	sl, r0
 800808e:	460c      	mov	r4, r1
 8008090:	4690      	mov	r8, r2
 8008092:	461f      	mov	r7, r3
 8008094:	d838      	bhi.n	8008108 <__ssputs_r+0x84>
 8008096:	898a      	ldrh	r2, [r1, #12]
 8008098:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800809c:	d032      	beq.n	8008104 <__ssputs_r+0x80>
 800809e:	6825      	ldr	r5, [r4, #0]
 80080a0:	6909      	ldr	r1, [r1, #16]
 80080a2:	eba5 0901 	sub.w	r9, r5, r1
 80080a6:	6965      	ldr	r5, [r4, #20]
 80080a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080b0:	3301      	adds	r3, #1
 80080b2:	444b      	add	r3, r9
 80080b4:	106d      	asrs	r5, r5, #1
 80080b6:	429d      	cmp	r5, r3
 80080b8:	bf38      	it	cc
 80080ba:	461d      	movcc	r5, r3
 80080bc:	0553      	lsls	r3, r2, #21
 80080be:	d531      	bpl.n	8008124 <__ssputs_r+0xa0>
 80080c0:	4629      	mov	r1, r5
 80080c2:	f7ff ff6b 	bl	8007f9c <_malloc_r>
 80080c6:	4606      	mov	r6, r0
 80080c8:	b950      	cbnz	r0, 80080e0 <__ssputs_r+0x5c>
 80080ca:	230c      	movs	r3, #12
 80080cc:	f8ca 3000 	str.w	r3, [sl]
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080d6:	81a3      	strh	r3, [r4, #12]
 80080d8:	f04f 30ff 	mov.w	r0, #4294967295
 80080dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e0:	6921      	ldr	r1, [r4, #16]
 80080e2:	464a      	mov	r2, r9
 80080e4:	f7ff fb46 	bl	8007774 <memcpy>
 80080e8:	89a3      	ldrh	r3, [r4, #12]
 80080ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f2:	81a3      	strh	r3, [r4, #12]
 80080f4:	6126      	str	r6, [r4, #16]
 80080f6:	6165      	str	r5, [r4, #20]
 80080f8:	444e      	add	r6, r9
 80080fa:	eba5 0509 	sub.w	r5, r5, r9
 80080fe:	6026      	str	r6, [r4, #0]
 8008100:	60a5      	str	r5, [r4, #8]
 8008102:	463e      	mov	r6, r7
 8008104:	42be      	cmp	r6, r7
 8008106:	d900      	bls.n	800810a <__ssputs_r+0x86>
 8008108:	463e      	mov	r6, r7
 800810a:	6820      	ldr	r0, [r4, #0]
 800810c:	4632      	mov	r2, r6
 800810e:	4641      	mov	r1, r8
 8008110:	f000 f966 	bl	80083e0 <memmove>
 8008114:	68a3      	ldr	r3, [r4, #8]
 8008116:	1b9b      	subs	r3, r3, r6
 8008118:	60a3      	str	r3, [r4, #8]
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	4433      	add	r3, r6
 800811e:	6023      	str	r3, [r4, #0]
 8008120:	2000      	movs	r0, #0
 8008122:	e7db      	b.n	80080dc <__ssputs_r+0x58>
 8008124:	462a      	mov	r2, r5
 8008126:	f000 f981 	bl	800842c <_realloc_r>
 800812a:	4606      	mov	r6, r0
 800812c:	2800      	cmp	r0, #0
 800812e:	d1e1      	bne.n	80080f4 <__ssputs_r+0x70>
 8008130:	6921      	ldr	r1, [r4, #16]
 8008132:	4650      	mov	r0, sl
 8008134:	f7ff fec6 	bl	8007ec4 <_free_r>
 8008138:	e7c7      	b.n	80080ca <__ssputs_r+0x46>
	...

0800813c <_svfiprintf_r>:
 800813c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008140:	4698      	mov	r8, r3
 8008142:	898b      	ldrh	r3, [r1, #12]
 8008144:	061b      	lsls	r3, r3, #24
 8008146:	b09d      	sub	sp, #116	; 0x74
 8008148:	4607      	mov	r7, r0
 800814a:	460d      	mov	r5, r1
 800814c:	4614      	mov	r4, r2
 800814e:	d50e      	bpl.n	800816e <_svfiprintf_r+0x32>
 8008150:	690b      	ldr	r3, [r1, #16]
 8008152:	b963      	cbnz	r3, 800816e <_svfiprintf_r+0x32>
 8008154:	2140      	movs	r1, #64	; 0x40
 8008156:	f7ff ff21 	bl	8007f9c <_malloc_r>
 800815a:	6028      	str	r0, [r5, #0]
 800815c:	6128      	str	r0, [r5, #16]
 800815e:	b920      	cbnz	r0, 800816a <_svfiprintf_r+0x2e>
 8008160:	230c      	movs	r3, #12
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	f04f 30ff 	mov.w	r0, #4294967295
 8008168:	e0d1      	b.n	800830e <_svfiprintf_r+0x1d2>
 800816a:	2340      	movs	r3, #64	; 0x40
 800816c:	616b      	str	r3, [r5, #20]
 800816e:	2300      	movs	r3, #0
 8008170:	9309      	str	r3, [sp, #36]	; 0x24
 8008172:	2320      	movs	r3, #32
 8008174:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008178:	f8cd 800c 	str.w	r8, [sp, #12]
 800817c:	2330      	movs	r3, #48	; 0x30
 800817e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008328 <_svfiprintf_r+0x1ec>
 8008182:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008186:	f04f 0901 	mov.w	r9, #1
 800818a:	4623      	mov	r3, r4
 800818c:	469a      	mov	sl, r3
 800818e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008192:	b10a      	cbz	r2, 8008198 <_svfiprintf_r+0x5c>
 8008194:	2a25      	cmp	r2, #37	; 0x25
 8008196:	d1f9      	bne.n	800818c <_svfiprintf_r+0x50>
 8008198:	ebba 0b04 	subs.w	fp, sl, r4
 800819c:	d00b      	beq.n	80081b6 <_svfiprintf_r+0x7a>
 800819e:	465b      	mov	r3, fp
 80081a0:	4622      	mov	r2, r4
 80081a2:	4629      	mov	r1, r5
 80081a4:	4638      	mov	r0, r7
 80081a6:	f7ff ff6d 	bl	8008084 <__ssputs_r>
 80081aa:	3001      	adds	r0, #1
 80081ac:	f000 80aa 	beq.w	8008304 <_svfiprintf_r+0x1c8>
 80081b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081b2:	445a      	add	r2, fp
 80081b4:	9209      	str	r2, [sp, #36]	; 0x24
 80081b6:	f89a 3000 	ldrb.w	r3, [sl]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 80a2 	beq.w	8008304 <_svfiprintf_r+0x1c8>
 80081c0:	2300      	movs	r3, #0
 80081c2:	f04f 32ff 	mov.w	r2, #4294967295
 80081c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081ca:	f10a 0a01 	add.w	sl, sl, #1
 80081ce:	9304      	str	r3, [sp, #16]
 80081d0:	9307      	str	r3, [sp, #28]
 80081d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081d6:	931a      	str	r3, [sp, #104]	; 0x68
 80081d8:	4654      	mov	r4, sl
 80081da:	2205      	movs	r2, #5
 80081dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e0:	4851      	ldr	r0, [pc, #324]	; (8008328 <_svfiprintf_r+0x1ec>)
 80081e2:	f7f7 fffd 	bl	80001e0 <memchr>
 80081e6:	9a04      	ldr	r2, [sp, #16]
 80081e8:	b9d8      	cbnz	r0, 8008222 <_svfiprintf_r+0xe6>
 80081ea:	06d0      	lsls	r0, r2, #27
 80081ec:	bf44      	itt	mi
 80081ee:	2320      	movmi	r3, #32
 80081f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081f4:	0711      	lsls	r1, r2, #28
 80081f6:	bf44      	itt	mi
 80081f8:	232b      	movmi	r3, #43	; 0x2b
 80081fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008202:	2b2a      	cmp	r3, #42	; 0x2a
 8008204:	d015      	beq.n	8008232 <_svfiprintf_r+0xf6>
 8008206:	9a07      	ldr	r2, [sp, #28]
 8008208:	4654      	mov	r4, sl
 800820a:	2000      	movs	r0, #0
 800820c:	f04f 0c0a 	mov.w	ip, #10
 8008210:	4621      	mov	r1, r4
 8008212:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008216:	3b30      	subs	r3, #48	; 0x30
 8008218:	2b09      	cmp	r3, #9
 800821a:	d94e      	bls.n	80082ba <_svfiprintf_r+0x17e>
 800821c:	b1b0      	cbz	r0, 800824c <_svfiprintf_r+0x110>
 800821e:	9207      	str	r2, [sp, #28]
 8008220:	e014      	b.n	800824c <_svfiprintf_r+0x110>
 8008222:	eba0 0308 	sub.w	r3, r0, r8
 8008226:	fa09 f303 	lsl.w	r3, r9, r3
 800822a:	4313      	orrs	r3, r2
 800822c:	9304      	str	r3, [sp, #16]
 800822e:	46a2      	mov	sl, r4
 8008230:	e7d2      	b.n	80081d8 <_svfiprintf_r+0x9c>
 8008232:	9b03      	ldr	r3, [sp, #12]
 8008234:	1d19      	adds	r1, r3, #4
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	9103      	str	r1, [sp, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	bfbb      	ittet	lt
 800823e:	425b      	neglt	r3, r3
 8008240:	f042 0202 	orrlt.w	r2, r2, #2
 8008244:	9307      	strge	r3, [sp, #28]
 8008246:	9307      	strlt	r3, [sp, #28]
 8008248:	bfb8      	it	lt
 800824a:	9204      	strlt	r2, [sp, #16]
 800824c:	7823      	ldrb	r3, [r4, #0]
 800824e:	2b2e      	cmp	r3, #46	; 0x2e
 8008250:	d10c      	bne.n	800826c <_svfiprintf_r+0x130>
 8008252:	7863      	ldrb	r3, [r4, #1]
 8008254:	2b2a      	cmp	r3, #42	; 0x2a
 8008256:	d135      	bne.n	80082c4 <_svfiprintf_r+0x188>
 8008258:	9b03      	ldr	r3, [sp, #12]
 800825a:	1d1a      	adds	r2, r3, #4
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	9203      	str	r2, [sp, #12]
 8008260:	2b00      	cmp	r3, #0
 8008262:	bfb8      	it	lt
 8008264:	f04f 33ff 	movlt.w	r3, #4294967295
 8008268:	3402      	adds	r4, #2
 800826a:	9305      	str	r3, [sp, #20]
 800826c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008338 <_svfiprintf_r+0x1fc>
 8008270:	7821      	ldrb	r1, [r4, #0]
 8008272:	2203      	movs	r2, #3
 8008274:	4650      	mov	r0, sl
 8008276:	f7f7 ffb3 	bl	80001e0 <memchr>
 800827a:	b140      	cbz	r0, 800828e <_svfiprintf_r+0x152>
 800827c:	2340      	movs	r3, #64	; 0x40
 800827e:	eba0 000a 	sub.w	r0, r0, sl
 8008282:	fa03 f000 	lsl.w	r0, r3, r0
 8008286:	9b04      	ldr	r3, [sp, #16]
 8008288:	4303      	orrs	r3, r0
 800828a:	3401      	adds	r4, #1
 800828c:	9304      	str	r3, [sp, #16]
 800828e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008292:	4826      	ldr	r0, [pc, #152]	; (800832c <_svfiprintf_r+0x1f0>)
 8008294:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008298:	2206      	movs	r2, #6
 800829a:	f7f7 ffa1 	bl	80001e0 <memchr>
 800829e:	2800      	cmp	r0, #0
 80082a0:	d038      	beq.n	8008314 <_svfiprintf_r+0x1d8>
 80082a2:	4b23      	ldr	r3, [pc, #140]	; (8008330 <_svfiprintf_r+0x1f4>)
 80082a4:	bb1b      	cbnz	r3, 80082ee <_svfiprintf_r+0x1b2>
 80082a6:	9b03      	ldr	r3, [sp, #12]
 80082a8:	3307      	adds	r3, #7
 80082aa:	f023 0307 	bic.w	r3, r3, #7
 80082ae:	3308      	adds	r3, #8
 80082b0:	9303      	str	r3, [sp, #12]
 80082b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b4:	4433      	add	r3, r6
 80082b6:	9309      	str	r3, [sp, #36]	; 0x24
 80082b8:	e767      	b.n	800818a <_svfiprintf_r+0x4e>
 80082ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80082be:	460c      	mov	r4, r1
 80082c0:	2001      	movs	r0, #1
 80082c2:	e7a5      	b.n	8008210 <_svfiprintf_r+0xd4>
 80082c4:	2300      	movs	r3, #0
 80082c6:	3401      	adds	r4, #1
 80082c8:	9305      	str	r3, [sp, #20]
 80082ca:	4619      	mov	r1, r3
 80082cc:	f04f 0c0a 	mov.w	ip, #10
 80082d0:	4620      	mov	r0, r4
 80082d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082d6:	3a30      	subs	r2, #48	; 0x30
 80082d8:	2a09      	cmp	r2, #9
 80082da:	d903      	bls.n	80082e4 <_svfiprintf_r+0x1a8>
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d0c5      	beq.n	800826c <_svfiprintf_r+0x130>
 80082e0:	9105      	str	r1, [sp, #20]
 80082e2:	e7c3      	b.n	800826c <_svfiprintf_r+0x130>
 80082e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80082e8:	4604      	mov	r4, r0
 80082ea:	2301      	movs	r3, #1
 80082ec:	e7f0      	b.n	80082d0 <_svfiprintf_r+0x194>
 80082ee:	ab03      	add	r3, sp, #12
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	462a      	mov	r2, r5
 80082f4:	4b0f      	ldr	r3, [pc, #60]	; (8008334 <_svfiprintf_r+0x1f8>)
 80082f6:	a904      	add	r1, sp, #16
 80082f8:	4638      	mov	r0, r7
 80082fa:	f7fd ffcb 	bl	8006294 <_printf_float>
 80082fe:	1c42      	adds	r2, r0, #1
 8008300:	4606      	mov	r6, r0
 8008302:	d1d6      	bne.n	80082b2 <_svfiprintf_r+0x176>
 8008304:	89ab      	ldrh	r3, [r5, #12]
 8008306:	065b      	lsls	r3, r3, #25
 8008308:	f53f af2c 	bmi.w	8008164 <_svfiprintf_r+0x28>
 800830c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800830e:	b01d      	add	sp, #116	; 0x74
 8008310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008314:	ab03      	add	r3, sp, #12
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	462a      	mov	r2, r5
 800831a:	4b06      	ldr	r3, [pc, #24]	; (8008334 <_svfiprintf_r+0x1f8>)
 800831c:	a904      	add	r1, sp, #16
 800831e:	4638      	mov	r0, r7
 8008320:	f7fe fa5c 	bl	80067dc <_printf_i>
 8008324:	e7eb      	b.n	80082fe <_svfiprintf_r+0x1c2>
 8008326:	bf00      	nop
 8008328:	0800976c 	.word	0x0800976c
 800832c:	08009776 	.word	0x08009776
 8008330:	08006295 	.word	0x08006295
 8008334:	08008085 	.word	0x08008085
 8008338:	08009772 	.word	0x08009772

0800833c <_sbrk_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	4d06      	ldr	r5, [pc, #24]	; (8008358 <_sbrk_r+0x1c>)
 8008340:	2300      	movs	r3, #0
 8008342:	4604      	mov	r4, r0
 8008344:	4608      	mov	r0, r1
 8008346:	602b      	str	r3, [r5, #0]
 8008348:	f7f9 f978 	bl	800163c <_sbrk>
 800834c:	1c43      	adds	r3, r0, #1
 800834e:	d102      	bne.n	8008356 <_sbrk_r+0x1a>
 8008350:	682b      	ldr	r3, [r5, #0]
 8008352:	b103      	cbz	r3, 8008356 <_sbrk_r+0x1a>
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	bd38      	pop	{r3, r4, r5, pc}
 8008358:	20000444 	.word	0x20000444

0800835c <__assert_func>:
 800835c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800835e:	4614      	mov	r4, r2
 8008360:	461a      	mov	r2, r3
 8008362:	4b09      	ldr	r3, [pc, #36]	; (8008388 <__assert_func+0x2c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4605      	mov	r5, r0
 8008368:	68d8      	ldr	r0, [r3, #12]
 800836a:	b14c      	cbz	r4, 8008380 <__assert_func+0x24>
 800836c:	4b07      	ldr	r3, [pc, #28]	; (800838c <__assert_func+0x30>)
 800836e:	9100      	str	r1, [sp, #0]
 8008370:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008374:	4906      	ldr	r1, [pc, #24]	; (8008390 <__assert_func+0x34>)
 8008376:	462b      	mov	r3, r5
 8008378:	f000 f80e 	bl	8008398 <fiprintf>
 800837c:	f000 faac 	bl	80088d8 <abort>
 8008380:	4b04      	ldr	r3, [pc, #16]	; (8008394 <__assert_func+0x38>)
 8008382:	461c      	mov	r4, r3
 8008384:	e7f3      	b.n	800836e <__assert_func+0x12>
 8008386:	bf00      	nop
 8008388:	2000000c 	.word	0x2000000c
 800838c:	0800977d 	.word	0x0800977d
 8008390:	0800978a 	.word	0x0800978a
 8008394:	080097b8 	.word	0x080097b8

08008398 <fiprintf>:
 8008398:	b40e      	push	{r1, r2, r3}
 800839a:	b503      	push	{r0, r1, lr}
 800839c:	4601      	mov	r1, r0
 800839e:	ab03      	add	r3, sp, #12
 80083a0:	4805      	ldr	r0, [pc, #20]	; (80083b8 <fiprintf+0x20>)
 80083a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80083a6:	6800      	ldr	r0, [r0, #0]
 80083a8:	9301      	str	r3, [sp, #4]
 80083aa:	f000 f897 	bl	80084dc <_vfiprintf_r>
 80083ae:	b002      	add	sp, #8
 80083b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083b4:	b003      	add	sp, #12
 80083b6:	4770      	bx	lr
 80083b8:	2000000c 	.word	0x2000000c

080083bc <__ascii_mbtowc>:
 80083bc:	b082      	sub	sp, #8
 80083be:	b901      	cbnz	r1, 80083c2 <__ascii_mbtowc+0x6>
 80083c0:	a901      	add	r1, sp, #4
 80083c2:	b142      	cbz	r2, 80083d6 <__ascii_mbtowc+0x1a>
 80083c4:	b14b      	cbz	r3, 80083da <__ascii_mbtowc+0x1e>
 80083c6:	7813      	ldrb	r3, [r2, #0]
 80083c8:	600b      	str	r3, [r1, #0]
 80083ca:	7812      	ldrb	r2, [r2, #0]
 80083cc:	1e10      	subs	r0, r2, #0
 80083ce:	bf18      	it	ne
 80083d0:	2001      	movne	r0, #1
 80083d2:	b002      	add	sp, #8
 80083d4:	4770      	bx	lr
 80083d6:	4610      	mov	r0, r2
 80083d8:	e7fb      	b.n	80083d2 <__ascii_mbtowc+0x16>
 80083da:	f06f 0001 	mvn.w	r0, #1
 80083de:	e7f8      	b.n	80083d2 <__ascii_mbtowc+0x16>

080083e0 <memmove>:
 80083e0:	4288      	cmp	r0, r1
 80083e2:	b510      	push	{r4, lr}
 80083e4:	eb01 0402 	add.w	r4, r1, r2
 80083e8:	d902      	bls.n	80083f0 <memmove+0x10>
 80083ea:	4284      	cmp	r4, r0
 80083ec:	4623      	mov	r3, r4
 80083ee:	d807      	bhi.n	8008400 <memmove+0x20>
 80083f0:	1e43      	subs	r3, r0, #1
 80083f2:	42a1      	cmp	r1, r4
 80083f4:	d008      	beq.n	8008408 <memmove+0x28>
 80083f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083fe:	e7f8      	b.n	80083f2 <memmove+0x12>
 8008400:	4402      	add	r2, r0
 8008402:	4601      	mov	r1, r0
 8008404:	428a      	cmp	r2, r1
 8008406:	d100      	bne.n	800840a <memmove+0x2a>
 8008408:	bd10      	pop	{r4, pc}
 800840a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800840e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008412:	e7f7      	b.n	8008404 <memmove+0x24>

08008414 <__malloc_lock>:
 8008414:	4801      	ldr	r0, [pc, #4]	; (800841c <__malloc_lock+0x8>)
 8008416:	f000 bc1f 	b.w	8008c58 <__retarget_lock_acquire_recursive>
 800841a:	bf00      	nop
 800841c:	20000448 	.word	0x20000448

08008420 <__malloc_unlock>:
 8008420:	4801      	ldr	r0, [pc, #4]	; (8008428 <__malloc_unlock+0x8>)
 8008422:	f000 bc1a 	b.w	8008c5a <__retarget_lock_release_recursive>
 8008426:	bf00      	nop
 8008428:	20000448 	.word	0x20000448

0800842c <_realloc_r>:
 800842c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008430:	4680      	mov	r8, r0
 8008432:	4614      	mov	r4, r2
 8008434:	460e      	mov	r6, r1
 8008436:	b921      	cbnz	r1, 8008442 <_realloc_r+0x16>
 8008438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800843c:	4611      	mov	r1, r2
 800843e:	f7ff bdad 	b.w	8007f9c <_malloc_r>
 8008442:	b92a      	cbnz	r2, 8008450 <_realloc_r+0x24>
 8008444:	f7ff fd3e 	bl	8007ec4 <_free_r>
 8008448:	4625      	mov	r5, r4
 800844a:	4628      	mov	r0, r5
 800844c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008450:	f000 fc6a 	bl	8008d28 <_malloc_usable_size_r>
 8008454:	4284      	cmp	r4, r0
 8008456:	4607      	mov	r7, r0
 8008458:	d802      	bhi.n	8008460 <_realloc_r+0x34>
 800845a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800845e:	d812      	bhi.n	8008486 <_realloc_r+0x5a>
 8008460:	4621      	mov	r1, r4
 8008462:	4640      	mov	r0, r8
 8008464:	f7ff fd9a 	bl	8007f9c <_malloc_r>
 8008468:	4605      	mov	r5, r0
 800846a:	2800      	cmp	r0, #0
 800846c:	d0ed      	beq.n	800844a <_realloc_r+0x1e>
 800846e:	42bc      	cmp	r4, r7
 8008470:	4622      	mov	r2, r4
 8008472:	4631      	mov	r1, r6
 8008474:	bf28      	it	cs
 8008476:	463a      	movcs	r2, r7
 8008478:	f7ff f97c 	bl	8007774 <memcpy>
 800847c:	4631      	mov	r1, r6
 800847e:	4640      	mov	r0, r8
 8008480:	f7ff fd20 	bl	8007ec4 <_free_r>
 8008484:	e7e1      	b.n	800844a <_realloc_r+0x1e>
 8008486:	4635      	mov	r5, r6
 8008488:	e7df      	b.n	800844a <_realloc_r+0x1e>

0800848a <__sfputc_r>:
 800848a:	6893      	ldr	r3, [r2, #8]
 800848c:	3b01      	subs	r3, #1
 800848e:	2b00      	cmp	r3, #0
 8008490:	b410      	push	{r4}
 8008492:	6093      	str	r3, [r2, #8]
 8008494:	da08      	bge.n	80084a8 <__sfputc_r+0x1e>
 8008496:	6994      	ldr	r4, [r2, #24]
 8008498:	42a3      	cmp	r3, r4
 800849a:	db01      	blt.n	80084a0 <__sfputc_r+0x16>
 800849c:	290a      	cmp	r1, #10
 800849e:	d103      	bne.n	80084a8 <__sfputc_r+0x1e>
 80084a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084a4:	f000 b94a 	b.w	800873c <__swbuf_r>
 80084a8:	6813      	ldr	r3, [r2, #0]
 80084aa:	1c58      	adds	r0, r3, #1
 80084ac:	6010      	str	r0, [r2, #0]
 80084ae:	7019      	strb	r1, [r3, #0]
 80084b0:	4608      	mov	r0, r1
 80084b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <__sfputs_r>:
 80084b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ba:	4606      	mov	r6, r0
 80084bc:	460f      	mov	r7, r1
 80084be:	4614      	mov	r4, r2
 80084c0:	18d5      	adds	r5, r2, r3
 80084c2:	42ac      	cmp	r4, r5
 80084c4:	d101      	bne.n	80084ca <__sfputs_r+0x12>
 80084c6:	2000      	movs	r0, #0
 80084c8:	e007      	b.n	80084da <__sfputs_r+0x22>
 80084ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ce:	463a      	mov	r2, r7
 80084d0:	4630      	mov	r0, r6
 80084d2:	f7ff ffda 	bl	800848a <__sfputc_r>
 80084d6:	1c43      	adds	r3, r0, #1
 80084d8:	d1f3      	bne.n	80084c2 <__sfputs_r+0xa>
 80084da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084dc <_vfiprintf_r>:
 80084dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	460d      	mov	r5, r1
 80084e2:	b09d      	sub	sp, #116	; 0x74
 80084e4:	4614      	mov	r4, r2
 80084e6:	4698      	mov	r8, r3
 80084e8:	4606      	mov	r6, r0
 80084ea:	b118      	cbz	r0, 80084f4 <_vfiprintf_r+0x18>
 80084ec:	6983      	ldr	r3, [r0, #24]
 80084ee:	b90b      	cbnz	r3, 80084f4 <_vfiprintf_r+0x18>
 80084f0:	f000 fb14 	bl	8008b1c <__sinit>
 80084f4:	4b89      	ldr	r3, [pc, #548]	; (800871c <_vfiprintf_r+0x240>)
 80084f6:	429d      	cmp	r5, r3
 80084f8:	d11b      	bne.n	8008532 <_vfiprintf_r+0x56>
 80084fa:	6875      	ldr	r5, [r6, #4]
 80084fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084fe:	07d9      	lsls	r1, r3, #31
 8008500:	d405      	bmi.n	800850e <_vfiprintf_r+0x32>
 8008502:	89ab      	ldrh	r3, [r5, #12]
 8008504:	059a      	lsls	r2, r3, #22
 8008506:	d402      	bmi.n	800850e <_vfiprintf_r+0x32>
 8008508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800850a:	f000 fba5 	bl	8008c58 <__retarget_lock_acquire_recursive>
 800850e:	89ab      	ldrh	r3, [r5, #12]
 8008510:	071b      	lsls	r3, r3, #28
 8008512:	d501      	bpl.n	8008518 <_vfiprintf_r+0x3c>
 8008514:	692b      	ldr	r3, [r5, #16]
 8008516:	b9eb      	cbnz	r3, 8008554 <_vfiprintf_r+0x78>
 8008518:	4629      	mov	r1, r5
 800851a:	4630      	mov	r0, r6
 800851c:	f000 f96e 	bl	80087fc <__swsetup_r>
 8008520:	b1c0      	cbz	r0, 8008554 <_vfiprintf_r+0x78>
 8008522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008524:	07dc      	lsls	r4, r3, #31
 8008526:	d50e      	bpl.n	8008546 <_vfiprintf_r+0x6a>
 8008528:	f04f 30ff 	mov.w	r0, #4294967295
 800852c:	b01d      	add	sp, #116	; 0x74
 800852e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008532:	4b7b      	ldr	r3, [pc, #492]	; (8008720 <_vfiprintf_r+0x244>)
 8008534:	429d      	cmp	r5, r3
 8008536:	d101      	bne.n	800853c <_vfiprintf_r+0x60>
 8008538:	68b5      	ldr	r5, [r6, #8]
 800853a:	e7df      	b.n	80084fc <_vfiprintf_r+0x20>
 800853c:	4b79      	ldr	r3, [pc, #484]	; (8008724 <_vfiprintf_r+0x248>)
 800853e:	429d      	cmp	r5, r3
 8008540:	bf08      	it	eq
 8008542:	68f5      	ldreq	r5, [r6, #12]
 8008544:	e7da      	b.n	80084fc <_vfiprintf_r+0x20>
 8008546:	89ab      	ldrh	r3, [r5, #12]
 8008548:	0598      	lsls	r0, r3, #22
 800854a:	d4ed      	bmi.n	8008528 <_vfiprintf_r+0x4c>
 800854c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800854e:	f000 fb84 	bl	8008c5a <__retarget_lock_release_recursive>
 8008552:	e7e9      	b.n	8008528 <_vfiprintf_r+0x4c>
 8008554:	2300      	movs	r3, #0
 8008556:	9309      	str	r3, [sp, #36]	; 0x24
 8008558:	2320      	movs	r3, #32
 800855a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800855e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008562:	2330      	movs	r3, #48	; 0x30
 8008564:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008728 <_vfiprintf_r+0x24c>
 8008568:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800856c:	f04f 0901 	mov.w	r9, #1
 8008570:	4623      	mov	r3, r4
 8008572:	469a      	mov	sl, r3
 8008574:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008578:	b10a      	cbz	r2, 800857e <_vfiprintf_r+0xa2>
 800857a:	2a25      	cmp	r2, #37	; 0x25
 800857c:	d1f9      	bne.n	8008572 <_vfiprintf_r+0x96>
 800857e:	ebba 0b04 	subs.w	fp, sl, r4
 8008582:	d00b      	beq.n	800859c <_vfiprintf_r+0xc0>
 8008584:	465b      	mov	r3, fp
 8008586:	4622      	mov	r2, r4
 8008588:	4629      	mov	r1, r5
 800858a:	4630      	mov	r0, r6
 800858c:	f7ff ff94 	bl	80084b8 <__sfputs_r>
 8008590:	3001      	adds	r0, #1
 8008592:	f000 80aa 	beq.w	80086ea <_vfiprintf_r+0x20e>
 8008596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008598:	445a      	add	r2, fp
 800859a:	9209      	str	r2, [sp, #36]	; 0x24
 800859c:	f89a 3000 	ldrb.w	r3, [sl]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 80a2 	beq.w	80086ea <_vfiprintf_r+0x20e>
 80085a6:	2300      	movs	r3, #0
 80085a8:	f04f 32ff 	mov.w	r2, #4294967295
 80085ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085b0:	f10a 0a01 	add.w	sl, sl, #1
 80085b4:	9304      	str	r3, [sp, #16]
 80085b6:	9307      	str	r3, [sp, #28]
 80085b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085bc:	931a      	str	r3, [sp, #104]	; 0x68
 80085be:	4654      	mov	r4, sl
 80085c0:	2205      	movs	r2, #5
 80085c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085c6:	4858      	ldr	r0, [pc, #352]	; (8008728 <_vfiprintf_r+0x24c>)
 80085c8:	f7f7 fe0a 	bl	80001e0 <memchr>
 80085cc:	9a04      	ldr	r2, [sp, #16]
 80085ce:	b9d8      	cbnz	r0, 8008608 <_vfiprintf_r+0x12c>
 80085d0:	06d1      	lsls	r1, r2, #27
 80085d2:	bf44      	itt	mi
 80085d4:	2320      	movmi	r3, #32
 80085d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085da:	0713      	lsls	r3, r2, #28
 80085dc:	bf44      	itt	mi
 80085de:	232b      	movmi	r3, #43	; 0x2b
 80085e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085e4:	f89a 3000 	ldrb.w	r3, [sl]
 80085e8:	2b2a      	cmp	r3, #42	; 0x2a
 80085ea:	d015      	beq.n	8008618 <_vfiprintf_r+0x13c>
 80085ec:	9a07      	ldr	r2, [sp, #28]
 80085ee:	4654      	mov	r4, sl
 80085f0:	2000      	movs	r0, #0
 80085f2:	f04f 0c0a 	mov.w	ip, #10
 80085f6:	4621      	mov	r1, r4
 80085f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085fc:	3b30      	subs	r3, #48	; 0x30
 80085fe:	2b09      	cmp	r3, #9
 8008600:	d94e      	bls.n	80086a0 <_vfiprintf_r+0x1c4>
 8008602:	b1b0      	cbz	r0, 8008632 <_vfiprintf_r+0x156>
 8008604:	9207      	str	r2, [sp, #28]
 8008606:	e014      	b.n	8008632 <_vfiprintf_r+0x156>
 8008608:	eba0 0308 	sub.w	r3, r0, r8
 800860c:	fa09 f303 	lsl.w	r3, r9, r3
 8008610:	4313      	orrs	r3, r2
 8008612:	9304      	str	r3, [sp, #16]
 8008614:	46a2      	mov	sl, r4
 8008616:	e7d2      	b.n	80085be <_vfiprintf_r+0xe2>
 8008618:	9b03      	ldr	r3, [sp, #12]
 800861a:	1d19      	adds	r1, r3, #4
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	9103      	str	r1, [sp, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	bfbb      	ittet	lt
 8008624:	425b      	neglt	r3, r3
 8008626:	f042 0202 	orrlt.w	r2, r2, #2
 800862a:	9307      	strge	r3, [sp, #28]
 800862c:	9307      	strlt	r3, [sp, #28]
 800862e:	bfb8      	it	lt
 8008630:	9204      	strlt	r2, [sp, #16]
 8008632:	7823      	ldrb	r3, [r4, #0]
 8008634:	2b2e      	cmp	r3, #46	; 0x2e
 8008636:	d10c      	bne.n	8008652 <_vfiprintf_r+0x176>
 8008638:	7863      	ldrb	r3, [r4, #1]
 800863a:	2b2a      	cmp	r3, #42	; 0x2a
 800863c:	d135      	bne.n	80086aa <_vfiprintf_r+0x1ce>
 800863e:	9b03      	ldr	r3, [sp, #12]
 8008640:	1d1a      	adds	r2, r3, #4
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	9203      	str	r2, [sp, #12]
 8008646:	2b00      	cmp	r3, #0
 8008648:	bfb8      	it	lt
 800864a:	f04f 33ff 	movlt.w	r3, #4294967295
 800864e:	3402      	adds	r4, #2
 8008650:	9305      	str	r3, [sp, #20]
 8008652:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008738 <_vfiprintf_r+0x25c>
 8008656:	7821      	ldrb	r1, [r4, #0]
 8008658:	2203      	movs	r2, #3
 800865a:	4650      	mov	r0, sl
 800865c:	f7f7 fdc0 	bl	80001e0 <memchr>
 8008660:	b140      	cbz	r0, 8008674 <_vfiprintf_r+0x198>
 8008662:	2340      	movs	r3, #64	; 0x40
 8008664:	eba0 000a 	sub.w	r0, r0, sl
 8008668:	fa03 f000 	lsl.w	r0, r3, r0
 800866c:	9b04      	ldr	r3, [sp, #16]
 800866e:	4303      	orrs	r3, r0
 8008670:	3401      	adds	r4, #1
 8008672:	9304      	str	r3, [sp, #16]
 8008674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008678:	482c      	ldr	r0, [pc, #176]	; (800872c <_vfiprintf_r+0x250>)
 800867a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800867e:	2206      	movs	r2, #6
 8008680:	f7f7 fdae 	bl	80001e0 <memchr>
 8008684:	2800      	cmp	r0, #0
 8008686:	d03f      	beq.n	8008708 <_vfiprintf_r+0x22c>
 8008688:	4b29      	ldr	r3, [pc, #164]	; (8008730 <_vfiprintf_r+0x254>)
 800868a:	bb1b      	cbnz	r3, 80086d4 <_vfiprintf_r+0x1f8>
 800868c:	9b03      	ldr	r3, [sp, #12]
 800868e:	3307      	adds	r3, #7
 8008690:	f023 0307 	bic.w	r3, r3, #7
 8008694:	3308      	adds	r3, #8
 8008696:	9303      	str	r3, [sp, #12]
 8008698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800869a:	443b      	add	r3, r7
 800869c:	9309      	str	r3, [sp, #36]	; 0x24
 800869e:	e767      	b.n	8008570 <_vfiprintf_r+0x94>
 80086a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80086a4:	460c      	mov	r4, r1
 80086a6:	2001      	movs	r0, #1
 80086a8:	e7a5      	b.n	80085f6 <_vfiprintf_r+0x11a>
 80086aa:	2300      	movs	r3, #0
 80086ac:	3401      	adds	r4, #1
 80086ae:	9305      	str	r3, [sp, #20]
 80086b0:	4619      	mov	r1, r3
 80086b2:	f04f 0c0a 	mov.w	ip, #10
 80086b6:	4620      	mov	r0, r4
 80086b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086bc:	3a30      	subs	r2, #48	; 0x30
 80086be:	2a09      	cmp	r2, #9
 80086c0:	d903      	bls.n	80086ca <_vfiprintf_r+0x1ee>
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d0c5      	beq.n	8008652 <_vfiprintf_r+0x176>
 80086c6:	9105      	str	r1, [sp, #20]
 80086c8:	e7c3      	b.n	8008652 <_vfiprintf_r+0x176>
 80086ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80086ce:	4604      	mov	r4, r0
 80086d0:	2301      	movs	r3, #1
 80086d2:	e7f0      	b.n	80086b6 <_vfiprintf_r+0x1da>
 80086d4:	ab03      	add	r3, sp, #12
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	462a      	mov	r2, r5
 80086da:	4b16      	ldr	r3, [pc, #88]	; (8008734 <_vfiprintf_r+0x258>)
 80086dc:	a904      	add	r1, sp, #16
 80086de:	4630      	mov	r0, r6
 80086e0:	f7fd fdd8 	bl	8006294 <_printf_float>
 80086e4:	4607      	mov	r7, r0
 80086e6:	1c78      	adds	r0, r7, #1
 80086e8:	d1d6      	bne.n	8008698 <_vfiprintf_r+0x1bc>
 80086ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086ec:	07d9      	lsls	r1, r3, #31
 80086ee:	d405      	bmi.n	80086fc <_vfiprintf_r+0x220>
 80086f0:	89ab      	ldrh	r3, [r5, #12]
 80086f2:	059a      	lsls	r2, r3, #22
 80086f4:	d402      	bmi.n	80086fc <_vfiprintf_r+0x220>
 80086f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086f8:	f000 faaf 	bl	8008c5a <__retarget_lock_release_recursive>
 80086fc:	89ab      	ldrh	r3, [r5, #12]
 80086fe:	065b      	lsls	r3, r3, #25
 8008700:	f53f af12 	bmi.w	8008528 <_vfiprintf_r+0x4c>
 8008704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008706:	e711      	b.n	800852c <_vfiprintf_r+0x50>
 8008708:	ab03      	add	r3, sp, #12
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	462a      	mov	r2, r5
 800870e:	4b09      	ldr	r3, [pc, #36]	; (8008734 <_vfiprintf_r+0x258>)
 8008710:	a904      	add	r1, sp, #16
 8008712:	4630      	mov	r0, r6
 8008714:	f7fe f862 	bl	80067dc <_printf_i>
 8008718:	e7e4      	b.n	80086e4 <_vfiprintf_r+0x208>
 800871a:	bf00      	nop
 800871c:	080098e4 	.word	0x080098e4
 8008720:	08009904 	.word	0x08009904
 8008724:	080098c4 	.word	0x080098c4
 8008728:	0800976c 	.word	0x0800976c
 800872c:	08009776 	.word	0x08009776
 8008730:	08006295 	.word	0x08006295
 8008734:	080084b9 	.word	0x080084b9
 8008738:	08009772 	.word	0x08009772

0800873c <__swbuf_r>:
 800873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873e:	460e      	mov	r6, r1
 8008740:	4614      	mov	r4, r2
 8008742:	4605      	mov	r5, r0
 8008744:	b118      	cbz	r0, 800874e <__swbuf_r+0x12>
 8008746:	6983      	ldr	r3, [r0, #24]
 8008748:	b90b      	cbnz	r3, 800874e <__swbuf_r+0x12>
 800874a:	f000 f9e7 	bl	8008b1c <__sinit>
 800874e:	4b21      	ldr	r3, [pc, #132]	; (80087d4 <__swbuf_r+0x98>)
 8008750:	429c      	cmp	r4, r3
 8008752:	d12b      	bne.n	80087ac <__swbuf_r+0x70>
 8008754:	686c      	ldr	r4, [r5, #4]
 8008756:	69a3      	ldr	r3, [r4, #24]
 8008758:	60a3      	str	r3, [r4, #8]
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	071a      	lsls	r2, r3, #28
 800875e:	d52f      	bpl.n	80087c0 <__swbuf_r+0x84>
 8008760:	6923      	ldr	r3, [r4, #16]
 8008762:	b36b      	cbz	r3, 80087c0 <__swbuf_r+0x84>
 8008764:	6923      	ldr	r3, [r4, #16]
 8008766:	6820      	ldr	r0, [r4, #0]
 8008768:	1ac0      	subs	r0, r0, r3
 800876a:	6963      	ldr	r3, [r4, #20]
 800876c:	b2f6      	uxtb	r6, r6
 800876e:	4283      	cmp	r3, r0
 8008770:	4637      	mov	r7, r6
 8008772:	dc04      	bgt.n	800877e <__swbuf_r+0x42>
 8008774:	4621      	mov	r1, r4
 8008776:	4628      	mov	r0, r5
 8008778:	f000 f93c 	bl	80089f4 <_fflush_r>
 800877c:	bb30      	cbnz	r0, 80087cc <__swbuf_r+0x90>
 800877e:	68a3      	ldr	r3, [r4, #8]
 8008780:	3b01      	subs	r3, #1
 8008782:	60a3      	str	r3, [r4, #8]
 8008784:	6823      	ldr	r3, [r4, #0]
 8008786:	1c5a      	adds	r2, r3, #1
 8008788:	6022      	str	r2, [r4, #0]
 800878a:	701e      	strb	r6, [r3, #0]
 800878c:	6963      	ldr	r3, [r4, #20]
 800878e:	3001      	adds	r0, #1
 8008790:	4283      	cmp	r3, r0
 8008792:	d004      	beq.n	800879e <__swbuf_r+0x62>
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	07db      	lsls	r3, r3, #31
 8008798:	d506      	bpl.n	80087a8 <__swbuf_r+0x6c>
 800879a:	2e0a      	cmp	r6, #10
 800879c:	d104      	bne.n	80087a8 <__swbuf_r+0x6c>
 800879e:	4621      	mov	r1, r4
 80087a0:	4628      	mov	r0, r5
 80087a2:	f000 f927 	bl	80089f4 <_fflush_r>
 80087a6:	b988      	cbnz	r0, 80087cc <__swbuf_r+0x90>
 80087a8:	4638      	mov	r0, r7
 80087aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ac:	4b0a      	ldr	r3, [pc, #40]	; (80087d8 <__swbuf_r+0x9c>)
 80087ae:	429c      	cmp	r4, r3
 80087b0:	d101      	bne.n	80087b6 <__swbuf_r+0x7a>
 80087b2:	68ac      	ldr	r4, [r5, #8]
 80087b4:	e7cf      	b.n	8008756 <__swbuf_r+0x1a>
 80087b6:	4b09      	ldr	r3, [pc, #36]	; (80087dc <__swbuf_r+0xa0>)
 80087b8:	429c      	cmp	r4, r3
 80087ba:	bf08      	it	eq
 80087bc:	68ec      	ldreq	r4, [r5, #12]
 80087be:	e7ca      	b.n	8008756 <__swbuf_r+0x1a>
 80087c0:	4621      	mov	r1, r4
 80087c2:	4628      	mov	r0, r5
 80087c4:	f000 f81a 	bl	80087fc <__swsetup_r>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d0cb      	beq.n	8008764 <__swbuf_r+0x28>
 80087cc:	f04f 37ff 	mov.w	r7, #4294967295
 80087d0:	e7ea      	b.n	80087a8 <__swbuf_r+0x6c>
 80087d2:	bf00      	nop
 80087d4:	080098e4 	.word	0x080098e4
 80087d8:	08009904 	.word	0x08009904
 80087dc:	080098c4 	.word	0x080098c4

080087e0 <__ascii_wctomb>:
 80087e0:	b149      	cbz	r1, 80087f6 <__ascii_wctomb+0x16>
 80087e2:	2aff      	cmp	r2, #255	; 0xff
 80087e4:	bf85      	ittet	hi
 80087e6:	238a      	movhi	r3, #138	; 0x8a
 80087e8:	6003      	strhi	r3, [r0, #0]
 80087ea:	700a      	strbls	r2, [r1, #0]
 80087ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80087f0:	bf98      	it	ls
 80087f2:	2001      	movls	r0, #1
 80087f4:	4770      	bx	lr
 80087f6:	4608      	mov	r0, r1
 80087f8:	4770      	bx	lr
	...

080087fc <__swsetup_r>:
 80087fc:	4b32      	ldr	r3, [pc, #200]	; (80088c8 <__swsetup_r+0xcc>)
 80087fe:	b570      	push	{r4, r5, r6, lr}
 8008800:	681d      	ldr	r5, [r3, #0]
 8008802:	4606      	mov	r6, r0
 8008804:	460c      	mov	r4, r1
 8008806:	b125      	cbz	r5, 8008812 <__swsetup_r+0x16>
 8008808:	69ab      	ldr	r3, [r5, #24]
 800880a:	b913      	cbnz	r3, 8008812 <__swsetup_r+0x16>
 800880c:	4628      	mov	r0, r5
 800880e:	f000 f985 	bl	8008b1c <__sinit>
 8008812:	4b2e      	ldr	r3, [pc, #184]	; (80088cc <__swsetup_r+0xd0>)
 8008814:	429c      	cmp	r4, r3
 8008816:	d10f      	bne.n	8008838 <__swsetup_r+0x3c>
 8008818:	686c      	ldr	r4, [r5, #4]
 800881a:	89a3      	ldrh	r3, [r4, #12]
 800881c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008820:	0719      	lsls	r1, r3, #28
 8008822:	d42c      	bmi.n	800887e <__swsetup_r+0x82>
 8008824:	06dd      	lsls	r5, r3, #27
 8008826:	d411      	bmi.n	800884c <__swsetup_r+0x50>
 8008828:	2309      	movs	r3, #9
 800882a:	6033      	str	r3, [r6, #0]
 800882c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008830:	81a3      	strh	r3, [r4, #12]
 8008832:	f04f 30ff 	mov.w	r0, #4294967295
 8008836:	e03e      	b.n	80088b6 <__swsetup_r+0xba>
 8008838:	4b25      	ldr	r3, [pc, #148]	; (80088d0 <__swsetup_r+0xd4>)
 800883a:	429c      	cmp	r4, r3
 800883c:	d101      	bne.n	8008842 <__swsetup_r+0x46>
 800883e:	68ac      	ldr	r4, [r5, #8]
 8008840:	e7eb      	b.n	800881a <__swsetup_r+0x1e>
 8008842:	4b24      	ldr	r3, [pc, #144]	; (80088d4 <__swsetup_r+0xd8>)
 8008844:	429c      	cmp	r4, r3
 8008846:	bf08      	it	eq
 8008848:	68ec      	ldreq	r4, [r5, #12]
 800884a:	e7e6      	b.n	800881a <__swsetup_r+0x1e>
 800884c:	0758      	lsls	r0, r3, #29
 800884e:	d512      	bpl.n	8008876 <__swsetup_r+0x7a>
 8008850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008852:	b141      	cbz	r1, 8008866 <__swsetup_r+0x6a>
 8008854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008858:	4299      	cmp	r1, r3
 800885a:	d002      	beq.n	8008862 <__swsetup_r+0x66>
 800885c:	4630      	mov	r0, r6
 800885e:	f7ff fb31 	bl	8007ec4 <_free_r>
 8008862:	2300      	movs	r3, #0
 8008864:	6363      	str	r3, [r4, #52]	; 0x34
 8008866:	89a3      	ldrh	r3, [r4, #12]
 8008868:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800886c:	81a3      	strh	r3, [r4, #12]
 800886e:	2300      	movs	r3, #0
 8008870:	6063      	str	r3, [r4, #4]
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	f043 0308 	orr.w	r3, r3, #8
 800887c:	81a3      	strh	r3, [r4, #12]
 800887e:	6923      	ldr	r3, [r4, #16]
 8008880:	b94b      	cbnz	r3, 8008896 <__swsetup_r+0x9a>
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800888c:	d003      	beq.n	8008896 <__swsetup_r+0x9a>
 800888e:	4621      	mov	r1, r4
 8008890:	4630      	mov	r0, r6
 8008892:	f000 fa09 	bl	8008ca8 <__smakebuf_r>
 8008896:	89a0      	ldrh	r0, [r4, #12]
 8008898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800889c:	f010 0301 	ands.w	r3, r0, #1
 80088a0:	d00a      	beq.n	80088b8 <__swsetup_r+0xbc>
 80088a2:	2300      	movs	r3, #0
 80088a4:	60a3      	str	r3, [r4, #8]
 80088a6:	6963      	ldr	r3, [r4, #20]
 80088a8:	425b      	negs	r3, r3
 80088aa:	61a3      	str	r3, [r4, #24]
 80088ac:	6923      	ldr	r3, [r4, #16]
 80088ae:	b943      	cbnz	r3, 80088c2 <__swsetup_r+0xc6>
 80088b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088b4:	d1ba      	bne.n	800882c <__swsetup_r+0x30>
 80088b6:	bd70      	pop	{r4, r5, r6, pc}
 80088b8:	0781      	lsls	r1, r0, #30
 80088ba:	bf58      	it	pl
 80088bc:	6963      	ldrpl	r3, [r4, #20]
 80088be:	60a3      	str	r3, [r4, #8]
 80088c0:	e7f4      	b.n	80088ac <__swsetup_r+0xb0>
 80088c2:	2000      	movs	r0, #0
 80088c4:	e7f7      	b.n	80088b6 <__swsetup_r+0xba>
 80088c6:	bf00      	nop
 80088c8:	2000000c 	.word	0x2000000c
 80088cc:	080098e4 	.word	0x080098e4
 80088d0:	08009904 	.word	0x08009904
 80088d4:	080098c4 	.word	0x080098c4

080088d8 <abort>:
 80088d8:	b508      	push	{r3, lr}
 80088da:	2006      	movs	r0, #6
 80088dc:	f000 fa54 	bl	8008d88 <raise>
 80088e0:	2001      	movs	r0, #1
 80088e2:	f7f8 fe33 	bl	800154c <_exit>
	...

080088e8 <__sflush_r>:
 80088e8:	898a      	ldrh	r2, [r1, #12]
 80088ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ee:	4605      	mov	r5, r0
 80088f0:	0710      	lsls	r0, r2, #28
 80088f2:	460c      	mov	r4, r1
 80088f4:	d458      	bmi.n	80089a8 <__sflush_r+0xc0>
 80088f6:	684b      	ldr	r3, [r1, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	dc05      	bgt.n	8008908 <__sflush_r+0x20>
 80088fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088fe:	2b00      	cmp	r3, #0
 8008900:	dc02      	bgt.n	8008908 <__sflush_r+0x20>
 8008902:	2000      	movs	r0, #0
 8008904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800890a:	2e00      	cmp	r6, #0
 800890c:	d0f9      	beq.n	8008902 <__sflush_r+0x1a>
 800890e:	2300      	movs	r3, #0
 8008910:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008914:	682f      	ldr	r7, [r5, #0]
 8008916:	602b      	str	r3, [r5, #0]
 8008918:	d032      	beq.n	8008980 <__sflush_r+0x98>
 800891a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	075a      	lsls	r2, r3, #29
 8008920:	d505      	bpl.n	800892e <__sflush_r+0x46>
 8008922:	6863      	ldr	r3, [r4, #4]
 8008924:	1ac0      	subs	r0, r0, r3
 8008926:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008928:	b10b      	cbz	r3, 800892e <__sflush_r+0x46>
 800892a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800892c:	1ac0      	subs	r0, r0, r3
 800892e:	2300      	movs	r3, #0
 8008930:	4602      	mov	r2, r0
 8008932:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008934:	6a21      	ldr	r1, [r4, #32]
 8008936:	4628      	mov	r0, r5
 8008938:	47b0      	blx	r6
 800893a:	1c43      	adds	r3, r0, #1
 800893c:	89a3      	ldrh	r3, [r4, #12]
 800893e:	d106      	bne.n	800894e <__sflush_r+0x66>
 8008940:	6829      	ldr	r1, [r5, #0]
 8008942:	291d      	cmp	r1, #29
 8008944:	d82c      	bhi.n	80089a0 <__sflush_r+0xb8>
 8008946:	4a2a      	ldr	r2, [pc, #168]	; (80089f0 <__sflush_r+0x108>)
 8008948:	40ca      	lsrs	r2, r1
 800894a:	07d6      	lsls	r6, r2, #31
 800894c:	d528      	bpl.n	80089a0 <__sflush_r+0xb8>
 800894e:	2200      	movs	r2, #0
 8008950:	6062      	str	r2, [r4, #4]
 8008952:	04d9      	lsls	r1, r3, #19
 8008954:	6922      	ldr	r2, [r4, #16]
 8008956:	6022      	str	r2, [r4, #0]
 8008958:	d504      	bpl.n	8008964 <__sflush_r+0x7c>
 800895a:	1c42      	adds	r2, r0, #1
 800895c:	d101      	bne.n	8008962 <__sflush_r+0x7a>
 800895e:	682b      	ldr	r3, [r5, #0]
 8008960:	b903      	cbnz	r3, 8008964 <__sflush_r+0x7c>
 8008962:	6560      	str	r0, [r4, #84]	; 0x54
 8008964:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008966:	602f      	str	r7, [r5, #0]
 8008968:	2900      	cmp	r1, #0
 800896a:	d0ca      	beq.n	8008902 <__sflush_r+0x1a>
 800896c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008970:	4299      	cmp	r1, r3
 8008972:	d002      	beq.n	800897a <__sflush_r+0x92>
 8008974:	4628      	mov	r0, r5
 8008976:	f7ff faa5 	bl	8007ec4 <_free_r>
 800897a:	2000      	movs	r0, #0
 800897c:	6360      	str	r0, [r4, #52]	; 0x34
 800897e:	e7c1      	b.n	8008904 <__sflush_r+0x1c>
 8008980:	6a21      	ldr	r1, [r4, #32]
 8008982:	2301      	movs	r3, #1
 8008984:	4628      	mov	r0, r5
 8008986:	47b0      	blx	r6
 8008988:	1c41      	adds	r1, r0, #1
 800898a:	d1c7      	bne.n	800891c <__sflush_r+0x34>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d0c4      	beq.n	800891c <__sflush_r+0x34>
 8008992:	2b1d      	cmp	r3, #29
 8008994:	d001      	beq.n	800899a <__sflush_r+0xb2>
 8008996:	2b16      	cmp	r3, #22
 8008998:	d101      	bne.n	800899e <__sflush_r+0xb6>
 800899a:	602f      	str	r7, [r5, #0]
 800899c:	e7b1      	b.n	8008902 <__sflush_r+0x1a>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089a4:	81a3      	strh	r3, [r4, #12]
 80089a6:	e7ad      	b.n	8008904 <__sflush_r+0x1c>
 80089a8:	690f      	ldr	r7, [r1, #16]
 80089aa:	2f00      	cmp	r7, #0
 80089ac:	d0a9      	beq.n	8008902 <__sflush_r+0x1a>
 80089ae:	0793      	lsls	r3, r2, #30
 80089b0:	680e      	ldr	r6, [r1, #0]
 80089b2:	bf08      	it	eq
 80089b4:	694b      	ldreq	r3, [r1, #20]
 80089b6:	600f      	str	r7, [r1, #0]
 80089b8:	bf18      	it	ne
 80089ba:	2300      	movne	r3, #0
 80089bc:	eba6 0807 	sub.w	r8, r6, r7
 80089c0:	608b      	str	r3, [r1, #8]
 80089c2:	f1b8 0f00 	cmp.w	r8, #0
 80089c6:	dd9c      	ble.n	8008902 <__sflush_r+0x1a>
 80089c8:	6a21      	ldr	r1, [r4, #32]
 80089ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089cc:	4643      	mov	r3, r8
 80089ce:	463a      	mov	r2, r7
 80089d0:	4628      	mov	r0, r5
 80089d2:	47b0      	blx	r6
 80089d4:	2800      	cmp	r0, #0
 80089d6:	dc06      	bgt.n	80089e6 <__sflush_r+0xfe>
 80089d8:	89a3      	ldrh	r3, [r4, #12]
 80089da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089de:	81a3      	strh	r3, [r4, #12]
 80089e0:	f04f 30ff 	mov.w	r0, #4294967295
 80089e4:	e78e      	b.n	8008904 <__sflush_r+0x1c>
 80089e6:	4407      	add	r7, r0
 80089e8:	eba8 0800 	sub.w	r8, r8, r0
 80089ec:	e7e9      	b.n	80089c2 <__sflush_r+0xda>
 80089ee:	bf00      	nop
 80089f0:	20400001 	.word	0x20400001

080089f4 <_fflush_r>:
 80089f4:	b538      	push	{r3, r4, r5, lr}
 80089f6:	690b      	ldr	r3, [r1, #16]
 80089f8:	4605      	mov	r5, r0
 80089fa:	460c      	mov	r4, r1
 80089fc:	b913      	cbnz	r3, 8008a04 <_fflush_r+0x10>
 80089fe:	2500      	movs	r5, #0
 8008a00:	4628      	mov	r0, r5
 8008a02:	bd38      	pop	{r3, r4, r5, pc}
 8008a04:	b118      	cbz	r0, 8008a0e <_fflush_r+0x1a>
 8008a06:	6983      	ldr	r3, [r0, #24]
 8008a08:	b90b      	cbnz	r3, 8008a0e <_fflush_r+0x1a>
 8008a0a:	f000 f887 	bl	8008b1c <__sinit>
 8008a0e:	4b14      	ldr	r3, [pc, #80]	; (8008a60 <_fflush_r+0x6c>)
 8008a10:	429c      	cmp	r4, r3
 8008a12:	d11b      	bne.n	8008a4c <_fflush_r+0x58>
 8008a14:	686c      	ldr	r4, [r5, #4]
 8008a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0ef      	beq.n	80089fe <_fflush_r+0xa>
 8008a1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a20:	07d0      	lsls	r0, r2, #31
 8008a22:	d404      	bmi.n	8008a2e <_fflush_r+0x3a>
 8008a24:	0599      	lsls	r1, r3, #22
 8008a26:	d402      	bmi.n	8008a2e <_fflush_r+0x3a>
 8008a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a2a:	f000 f915 	bl	8008c58 <__retarget_lock_acquire_recursive>
 8008a2e:	4628      	mov	r0, r5
 8008a30:	4621      	mov	r1, r4
 8008a32:	f7ff ff59 	bl	80088e8 <__sflush_r>
 8008a36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a38:	07da      	lsls	r2, r3, #31
 8008a3a:	4605      	mov	r5, r0
 8008a3c:	d4e0      	bmi.n	8008a00 <_fflush_r+0xc>
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	059b      	lsls	r3, r3, #22
 8008a42:	d4dd      	bmi.n	8008a00 <_fflush_r+0xc>
 8008a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a46:	f000 f908 	bl	8008c5a <__retarget_lock_release_recursive>
 8008a4a:	e7d9      	b.n	8008a00 <_fflush_r+0xc>
 8008a4c:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <_fflush_r+0x70>)
 8008a4e:	429c      	cmp	r4, r3
 8008a50:	d101      	bne.n	8008a56 <_fflush_r+0x62>
 8008a52:	68ac      	ldr	r4, [r5, #8]
 8008a54:	e7df      	b.n	8008a16 <_fflush_r+0x22>
 8008a56:	4b04      	ldr	r3, [pc, #16]	; (8008a68 <_fflush_r+0x74>)
 8008a58:	429c      	cmp	r4, r3
 8008a5a:	bf08      	it	eq
 8008a5c:	68ec      	ldreq	r4, [r5, #12]
 8008a5e:	e7da      	b.n	8008a16 <_fflush_r+0x22>
 8008a60:	080098e4 	.word	0x080098e4
 8008a64:	08009904 	.word	0x08009904
 8008a68:	080098c4 	.word	0x080098c4

08008a6c <std>:
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	b510      	push	{r4, lr}
 8008a70:	4604      	mov	r4, r0
 8008a72:	e9c0 3300 	strd	r3, r3, [r0]
 8008a76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a7a:	6083      	str	r3, [r0, #8]
 8008a7c:	8181      	strh	r1, [r0, #12]
 8008a7e:	6643      	str	r3, [r0, #100]	; 0x64
 8008a80:	81c2      	strh	r2, [r0, #14]
 8008a82:	6183      	str	r3, [r0, #24]
 8008a84:	4619      	mov	r1, r3
 8008a86:	2208      	movs	r2, #8
 8008a88:	305c      	adds	r0, #92	; 0x5c
 8008a8a:	f7fd fb5b 	bl	8006144 <memset>
 8008a8e:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <std+0x38>)
 8008a90:	6263      	str	r3, [r4, #36]	; 0x24
 8008a92:	4b05      	ldr	r3, [pc, #20]	; (8008aa8 <std+0x3c>)
 8008a94:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a96:	4b05      	ldr	r3, [pc, #20]	; (8008aac <std+0x40>)
 8008a98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a9a:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <std+0x44>)
 8008a9c:	6224      	str	r4, [r4, #32]
 8008a9e:	6323      	str	r3, [r4, #48]	; 0x30
 8008aa0:	bd10      	pop	{r4, pc}
 8008aa2:	bf00      	nop
 8008aa4:	08008dc1 	.word	0x08008dc1
 8008aa8:	08008de3 	.word	0x08008de3
 8008aac:	08008e1b 	.word	0x08008e1b
 8008ab0:	08008e3f 	.word	0x08008e3f

08008ab4 <_cleanup_r>:
 8008ab4:	4901      	ldr	r1, [pc, #4]	; (8008abc <_cleanup_r+0x8>)
 8008ab6:	f000 b8af 	b.w	8008c18 <_fwalk_reent>
 8008aba:	bf00      	nop
 8008abc:	080089f5 	.word	0x080089f5

08008ac0 <__sfmoreglue>:
 8008ac0:	b570      	push	{r4, r5, r6, lr}
 8008ac2:	2268      	movs	r2, #104	; 0x68
 8008ac4:	1e4d      	subs	r5, r1, #1
 8008ac6:	4355      	muls	r5, r2
 8008ac8:	460e      	mov	r6, r1
 8008aca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ace:	f7ff fa65 	bl	8007f9c <_malloc_r>
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	b140      	cbz	r0, 8008ae8 <__sfmoreglue+0x28>
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	e9c0 1600 	strd	r1, r6, [r0]
 8008adc:	300c      	adds	r0, #12
 8008ade:	60a0      	str	r0, [r4, #8]
 8008ae0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ae4:	f7fd fb2e 	bl	8006144 <memset>
 8008ae8:	4620      	mov	r0, r4
 8008aea:	bd70      	pop	{r4, r5, r6, pc}

08008aec <__sfp_lock_acquire>:
 8008aec:	4801      	ldr	r0, [pc, #4]	; (8008af4 <__sfp_lock_acquire+0x8>)
 8008aee:	f000 b8b3 	b.w	8008c58 <__retarget_lock_acquire_recursive>
 8008af2:	bf00      	nop
 8008af4:	20000449 	.word	0x20000449

08008af8 <__sfp_lock_release>:
 8008af8:	4801      	ldr	r0, [pc, #4]	; (8008b00 <__sfp_lock_release+0x8>)
 8008afa:	f000 b8ae 	b.w	8008c5a <__retarget_lock_release_recursive>
 8008afe:	bf00      	nop
 8008b00:	20000449 	.word	0x20000449

08008b04 <__sinit_lock_acquire>:
 8008b04:	4801      	ldr	r0, [pc, #4]	; (8008b0c <__sinit_lock_acquire+0x8>)
 8008b06:	f000 b8a7 	b.w	8008c58 <__retarget_lock_acquire_recursive>
 8008b0a:	bf00      	nop
 8008b0c:	2000044a 	.word	0x2000044a

08008b10 <__sinit_lock_release>:
 8008b10:	4801      	ldr	r0, [pc, #4]	; (8008b18 <__sinit_lock_release+0x8>)
 8008b12:	f000 b8a2 	b.w	8008c5a <__retarget_lock_release_recursive>
 8008b16:	bf00      	nop
 8008b18:	2000044a 	.word	0x2000044a

08008b1c <__sinit>:
 8008b1c:	b510      	push	{r4, lr}
 8008b1e:	4604      	mov	r4, r0
 8008b20:	f7ff fff0 	bl	8008b04 <__sinit_lock_acquire>
 8008b24:	69a3      	ldr	r3, [r4, #24]
 8008b26:	b11b      	cbz	r3, 8008b30 <__sinit+0x14>
 8008b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b2c:	f7ff bff0 	b.w	8008b10 <__sinit_lock_release>
 8008b30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b34:	6523      	str	r3, [r4, #80]	; 0x50
 8008b36:	4b13      	ldr	r3, [pc, #76]	; (8008b84 <__sinit+0x68>)
 8008b38:	4a13      	ldr	r2, [pc, #76]	; (8008b88 <__sinit+0x6c>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b3e:	42a3      	cmp	r3, r4
 8008b40:	bf04      	itt	eq
 8008b42:	2301      	moveq	r3, #1
 8008b44:	61a3      	streq	r3, [r4, #24]
 8008b46:	4620      	mov	r0, r4
 8008b48:	f000 f820 	bl	8008b8c <__sfp>
 8008b4c:	6060      	str	r0, [r4, #4]
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f000 f81c 	bl	8008b8c <__sfp>
 8008b54:	60a0      	str	r0, [r4, #8]
 8008b56:	4620      	mov	r0, r4
 8008b58:	f000 f818 	bl	8008b8c <__sfp>
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	60e0      	str	r0, [r4, #12]
 8008b60:	2104      	movs	r1, #4
 8008b62:	6860      	ldr	r0, [r4, #4]
 8008b64:	f7ff ff82 	bl	8008a6c <std>
 8008b68:	68a0      	ldr	r0, [r4, #8]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	2109      	movs	r1, #9
 8008b6e:	f7ff ff7d 	bl	8008a6c <std>
 8008b72:	68e0      	ldr	r0, [r4, #12]
 8008b74:	2202      	movs	r2, #2
 8008b76:	2112      	movs	r1, #18
 8008b78:	f7ff ff78 	bl	8008a6c <std>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	61a3      	str	r3, [r4, #24]
 8008b80:	e7d2      	b.n	8008b28 <__sinit+0xc>
 8008b82:	bf00      	nop
 8008b84:	0800954c 	.word	0x0800954c
 8008b88:	08008ab5 	.word	0x08008ab5

08008b8c <__sfp>:
 8008b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8e:	4607      	mov	r7, r0
 8008b90:	f7ff ffac 	bl	8008aec <__sfp_lock_acquire>
 8008b94:	4b1e      	ldr	r3, [pc, #120]	; (8008c10 <__sfp+0x84>)
 8008b96:	681e      	ldr	r6, [r3, #0]
 8008b98:	69b3      	ldr	r3, [r6, #24]
 8008b9a:	b913      	cbnz	r3, 8008ba2 <__sfp+0x16>
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	f7ff ffbd 	bl	8008b1c <__sinit>
 8008ba2:	3648      	adds	r6, #72	; 0x48
 8008ba4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	d503      	bpl.n	8008bb4 <__sfp+0x28>
 8008bac:	6833      	ldr	r3, [r6, #0]
 8008bae:	b30b      	cbz	r3, 8008bf4 <__sfp+0x68>
 8008bb0:	6836      	ldr	r6, [r6, #0]
 8008bb2:	e7f7      	b.n	8008ba4 <__sfp+0x18>
 8008bb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008bb8:	b9d5      	cbnz	r5, 8008bf0 <__sfp+0x64>
 8008bba:	4b16      	ldr	r3, [pc, #88]	; (8008c14 <__sfp+0x88>)
 8008bbc:	60e3      	str	r3, [r4, #12]
 8008bbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bc2:	6665      	str	r5, [r4, #100]	; 0x64
 8008bc4:	f000 f847 	bl	8008c56 <__retarget_lock_init_recursive>
 8008bc8:	f7ff ff96 	bl	8008af8 <__sfp_lock_release>
 8008bcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008bd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bd4:	6025      	str	r5, [r4, #0]
 8008bd6:	61a5      	str	r5, [r4, #24]
 8008bd8:	2208      	movs	r2, #8
 8008bda:	4629      	mov	r1, r5
 8008bdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008be0:	f7fd fab0 	bl	8006144 <memset>
 8008be4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008be8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bec:	4620      	mov	r0, r4
 8008bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bf0:	3468      	adds	r4, #104	; 0x68
 8008bf2:	e7d9      	b.n	8008ba8 <__sfp+0x1c>
 8008bf4:	2104      	movs	r1, #4
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	f7ff ff62 	bl	8008ac0 <__sfmoreglue>
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	6030      	str	r0, [r6, #0]
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d1d5      	bne.n	8008bb0 <__sfp+0x24>
 8008c04:	f7ff ff78 	bl	8008af8 <__sfp_lock_release>
 8008c08:	230c      	movs	r3, #12
 8008c0a:	603b      	str	r3, [r7, #0]
 8008c0c:	e7ee      	b.n	8008bec <__sfp+0x60>
 8008c0e:	bf00      	nop
 8008c10:	0800954c 	.word	0x0800954c
 8008c14:	ffff0001 	.word	0xffff0001

08008c18 <_fwalk_reent>:
 8008c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c1c:	4606      	mov	r6, r0
 8008c1e:	4688      	mov	r8, r1
 8008c20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c24:	2700      	movs	r7, #0
 8008c26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c2a:	f1b9 0901 	subs.w	r9, r9, #1
 8008c2e:	d505      	bpl.n	8008c3c <_fwalk_reent+0x24>
 8008c30:	6824      	ldr	r4, [r4, #0]
 8008c32:	2c00      	cmp	r4, #0
 8008c34:	d1f7      	bne.n	8008c26 <_fwalk_reent+0xe>
 8008c36:	4638      	mov	r0, r7
 8008c38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c3c:	89ab      	ldrh	r3, [r5, #12]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d907      	bls.n	8008c52 <_fwalk_reent+0x3a>
 8008c42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c46:	3301      	adds	r3, #1
 8008c48:	d003      	beq.n	8008c52 <_fwalk_reent+0x3a>
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	47c0      	blx	r8
 8008c50:	4307      	orrs	r7, r0
 8008c52:	3568      	adds	r5, #104	; 0x68
 8008c54:	e7e9      	b.n	8008c2a <_fwalk_reent+0x12>

08008c56 <__retarget_lock_init_recursive>:
 8008c56:	4770      	bx	lr

08008c58 <__retarget_lock_acquire_recursive>:
 8008c58:	4770      	bx	lr

08008c5a <__retarget_lock_release_recursive>:
 8008c5a:	4770      	bx	lr

08008c5c <__swhatbuf_r>:
 8008c5c:	b570      	push	{r4, r5, r6, lr}
 8008c5e:	460e      	mov	r6, r1
 8008c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c64:	2900      	cmp	r1, #0
 8008c66:	b096      	sub	sp, #88	; 0x58
 8008c68:	4614      	mov	r4, r2
 8008c6a:	461d      	mov	r5, r3
 8008c6c:	da08      	bge.n	8008c80 <__swhatbuf_r+0x24>
 8008c6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	602a      	str	r2, [r5, #0]
 8008c76:	061a      	lsls	r2, r3, #24
 8008c78:	d410      	bmi.n	8008c9c <__swhatbuf_r+0x40>
 8008c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c7e:	e00e      	b.n	8008c9e <__swhatbuf_r+0x42>
 8008c80:	466a      	mov	r2, sp
 8008c82:	f000 f903 	bl	8008e8c <_fstat_r>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	dbf1      	blt.n	8008c6e <__swhatbuf_r+0x12>
 8008c8a:	9a01      	ldr	r2, [sp, #4]
 8008c8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c94:	425a      	negs	r2, r3
 8008c96:	415a      	adcs	r2, r3
 8008c98:	602a      	str	r2, [r5, #0]
 8008c9a:	e7ee      	b.n	8008c7a <__swhatbuf_r+0x1e>
 8008c9c:	2340      	movs	r3, #64	; 0x40
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	b016      	add	sp, #88	; 0x58
 8008ca4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ca8 <__smakebuf_r>:
 8008ca8:	898b      	ldrh	r3, [r1, #12]
 8008caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cac:	079d      	lsls	r5, r3, #30
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	d507      	bpl.n	8008cc4 <__smakebuf_r+0x1c>
 8008cb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	6123      	str	r3, [r4, #16]
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	6163      	str	r3, [r4, #20]
 8008cc0:	b002      	add	sp, #8
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	ab01      	add	r3, sp, #4
 8008cc6:	466a      	mov	r2, sp
 8008cc8:	f7ff ffc8 	bl	8008c5c <__swhatbuf_r>
 8008ccc:	9900      	ldr	r1, [sp, #0]
 8008cce:	4605      	mov	r5, r0
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	f7ff f963 	bl	8007f9c <_malloc_r>
 8008cd6:	b948      	cbnz	r0, 8008cec <__smakebuf_r+0x44>
 8008cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cdc:	059a      	lsls	r2, r3, #22
 8008cde:	d4ef      	bmi.n	8008cc0 <__smakebuf_r+0x18>
 8008ce0:	f023 0303 	bic.w	r3, r3, #3
 8008ce4:	f043 0302 	orr.w	r3, r3, #2
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	e7e3      	b.n	8008cb4 <__smakebuf_r+0xc>
 8008cec:	4b0d      	ldr	r3, [pc, #52]	; (8008d24 <__smakebuf_r+0x7c>)
 8008cee:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cf0:	89a3      	ldrh	r3, [r4, #12]
 8008cf2:	6020      	str	r0, [r4, #0]
 8008cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf8:	81a3      	strh	r3, [r4, #12]
 8008cfa:	9b00      	ldr	r3, [sp, #0]
 8008cfc:	6163      	str	r3, [r4, #20]
 8008cfe:	9b01      	ldr	r3, [sp, #4]
 8008d00:	6120      	str	r0, [r4, #16]
 8008d02:	b15b      	cbz	r3, 8008d1c <__smakebuf_r+0x74>
 8008d04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d08:	4630      	mov	r0, r6
 8008d0a:	f000 f8d1 	bl	8008eb0 <_isatty_r>
 8008d0e:	b128      	cbz	r0, 8008d1c <__smakebuf_r+0x74>
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	f023 0303 	bic.w	r3, r3, #3
 8008d16:	f043 0301 	orr.w	r3, r3, #1
 8008d1a:	81a3      	strh	r3, [r4, #12]
 8008d1c:	89a0      	ldrh	r0, [r4, #12]
 8008d1e:	4305      	orrs	r5, r0
 8008d20:	81a5      	strh	r5, [r4, #12]
 8008d22:	e7cd      	b.n	8008cc0 <__smakebuf_r+0x18>
 8008d24:	08008ab5 	.word	0x08008ab5

08008d28 <_malloc_usable_size_r>:
 8008d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d2c:	1f18      	subs	r0, r3, #4
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	bfbc      	itt	lt
 8008d32:	580b      	ldrlt	r3, [r1, r0]
 8008d34:	18c0      	addlt	r0, r0, r3
 8008d36:	4770      	bx	lr

08008d38 <_raise_r>:
 8008d38:	291f      	cmp	r1, #31
 8008d3a:	b538      	push	{r3, r4, r5, lr}
 8008d3c:	4604      	mov	r4, r0
 8008d3e:	460d      	mov	r5, r1
 8008d40:	d904      	bls.n	8008d4c <_raise_r+0x14>
 8008d42:	2316      	movs	r3, #22
 8008d44:	6003      	str	r3, [r0, #0]
 8008d46:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d4e:	b112      	cbz	r2, 8008d56 <_raise_r+0x1e>
 8008d50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d54:	b94b      	cbnz	r3, 8008d6a <_raise_r+0x32>
 8008d56:	4620      	mov	r0, r4
 8008d58:	f000 f830 	bl	8008dbc <_getpid_r>
 8008d5c:	462a      	mov	r2, r5
 8008d5e:	4601      	mov	r1, r0
 8008d60:	4620      	mov	r0, r4
 8008d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d66:	f000 b817 	b.w	8008d98 <_kill_r>
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d00a      	beq.n	8008d84 <_raise_r+0x4c>
 8008d6e:	1c59      	adds	r1, r3, #1
 8008d70:	d103      	bne.n	8008d7a <_raise_r+0x42>
 8008d72:	2316      	movs	r3, #22
 8008d74:	6003      	str	r3, [r0, #0]
 8008d76:	2001      	movs	r0, #1
 8008d78:	e7e7      	b.n	8008d4a <_raise_r+0x12>
 8008d7a:	2400      	movs	r4, #0
 8008d7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d80:	4628      	mov	r0, r5
 8008d82:	4798      	blx	r3
 8008d84:	2000      	movs	r0, #0
 8008d86:	e7e0      	b.n	8008d4a <_raise_r+0x12>

08008d88 <raise>:
 8008d88:	4b02      	ldr	r3, [pc, #8]	; (8008d94 <raise+0xc>)
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	6818      	ldr	r0, [r3, #0]
 8008d8e:	f7ff bfd3 	b.w	8008d38 <_raise_r>
 8008d92:	bf00      	nop
 8008d94:	2000000c 	.word	0x2000000c

08008d98 <_kill_r>:
 8008d98:	b538      	push	{r3, r4, r5, lr}
 8008d9a:	4d07      	ldr	r5, [pc, #28]	; (8008db8 <_kill_r+0x20>)
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	4604      	mov	r4, r0
 8008da0:	4608      	mov	r0, r1
 8008da2:	4611      	mov	r1, r2
 8008da4:	602b      	str	r3, [r5, #0]
 8008da6:	f7f8 fbc1 	bl	800152c <_kill>
 8008daa:	1c43      	adds	r3, r0, #1
 8008dac:	d102      	bne.n	8008db4 <_kill_r+0x1c>
 8008dae:	682b      	ldr	r3, [r5, #0]
 8008db0:	b103      	cbz	r3, 8008db4 <_kill_r+0x1c>
 8008db2:	6023      	str	r3, [r4, #0]
 8008db4:	bd38      	pop	{r3, r4, r5, pc}
 8008db6:	bf00      	nop
 8008db8:	20000444 	.word	0x20000444

08008dbc <_getpid_r>:
 8008dbc:	f7f8 bbae 	b.w	800151c <_getpid>

08008dc0 <__sread>:
 8008dc0:	b510      	push	{r4, lr}
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc8:	f000 f894 	bl	8008ef4 <_read_r>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	bfab      	itete	ge
 8008dd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008dd2:	89a3      	ldrhlt	r3, [r4, #12]
 8008dd4:	181b      	addge	r3, r3, r0
 8008dd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008dda:	bfac      	ite	ge
 8008ddc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008dde:	81a3      	strhlt	r3, [r4, #12]
 8008de0:	bd10      	pop	{r4, pc}

08008de2 <__swrite>:
 8008de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de6:	461f      	mov	r7, r3
 8008de8:	898b      	ldrh	r3, [r1, #12]
 8008dea:	05db      	lsls	r3, r3, #23
 8008dec:	4605      	mov	r5, r0
 8008dee:	460c      	mov	r4, r1
 8008df0:	4616      	mov	r6, r2
 8008df2:	d505      	bpl.n	8008e00 <__swrite+0x1e>
 8008df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df8:	2302      	movs	r3, #2
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f000 f868 	bl	8008ed0 <_lseek_r>
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e0a:	81a3      	strh	r3, [r4, #12]
 8008e0c:	4632      	mov	r2, r6
 8008e0e:	463b      	mov	r3, r7
 8008e10:	4628      	mov	r0, r5
 8008e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e16:	f000 b817 	b.w	8008e48 <_write_r>

08008e1a <__sseek>:
 8008e1a:	b510      	push	{r4, lr}
 8008e1c:	460c      	mov	r4, r1
 8008e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e22:	f000 f855 	bl	8008ed0 <_lseek_r>
 8008e26:	1c43      	adds	r3, r0, #1
 8008e28:	89a3      	ldrh	r3, [r4, #12]
 8008e2a:	bf15      	itete	ne
 8008e2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e36:	81a3      	strheq	r3, [r4, #12]
 8008e38:	bf18      	it	ne
 8008e3a:	81a3      	strhne	r3, [r4, #12]
 8008e3c:	bd10      	pop	{r4, pc}

08008e3e <__sclose>:
 8008e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e42:	f000 b813 	b.w	8008e6c <_close_r>
	...

08008e48 <_write_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	4d07      	ldr	r5, [pc, #28]	; (8008e68 <_write_r+0x20>)
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	4608      	mov	r0, r1
 8008e50:	4611      	mov	r1, r2
 8008e52:	2200      	movs	r2, #0
 8008e54:	602a      	str	r2, [r5, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	f7f8 fb9f 	bl	800159a <_write>
 8008e5c:	1c43      	adds	r3, r0, #1
 8008e5e:	d102      	bne.n	8008e66 <_write_r+0x1e>
 8008e60:	682b      	ldr	r3, [r5, #0]
 8008e62:	b103      	cbz	r3, 8008e66 <_write_r+0x1e>
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	bd38      	pop	{r3, r4, r5, pc}
 8008e68:	20000444 	.word	0x20000444

08008e6c <_close_r>:
 8008e6c:	b538      	push	{r3, r4, r5, lr}
 8008e6e:	4d06      	ldr	r5, [pc, #24]	; (8008e88 <_close_r+0x1c>)
 8008e70:	2300      	movs	r3, #0
 8008e72:	4604      	mov	r4, r0
 8008e74:	4608      	mov	r0, r1
 8008e76:	602b      	str	r3, [r5, #0]
 8008e78:	f7f8 fbab 	bl	80015d2 <_close>
 8008e7c:	1c43      	adds	r3, r0, #1
 8008e7e:	d102      	bne.n	8008e86 <_close_r+0x1a>
 8008e80:	682b      	ldr	r3, [r5, #0]
 8008e82:	b103      	cbz	r3, 8008e86 <_close_r+0x1a>
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	bd38      	pop	{r3, r4, r5, pc}
 8008e88:	20000444 	.word	0x20000444

08008e8c <_fstat_r>:
 8008e8c:	b538      	push	{r3, r4, r5, lr}
 8008e8e:	4d07      	ldr	r5, [pc, #28]	; (8008eac <_fstat_r+0x20>)
 8008e90:	2300      	movs	r3, #0
 8008e92:	4604      	mov	r4, r0
 8008e94:	4608      	mov	r0, r1
 8008e96:	4611      	mov	r1, r2
 8008e98:	602b      	str	r3, [r5, #0]
 8008e9a:	f7f8 fba6 	bl	80015ea <_fstat>
 8008e9e:	1c43      	adds	r3, r0, #1
 8008ea0:	d102      	bne.n	8008ea8 <_fstat_r+0x1c>
 8008ea2:	682b      	ldr	r3, [r5, #0]
 8008ea4:	b103      	cbz	r3, 8008ea8 <_fstat_r+0x1c>
 8008ea6:	6023      	str	r3, [r4, #0]
 8008ea8:	bd38      	pop	{r3, r4, r5, pc}
 8008eaa:	bf00      	nop
 8008eac:	20000444 	.word	0x20000444

08008eb0 <_isatty_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4d06      	ldr	r5, [pc, #24]	; (8008ecc <_isatty_r+0x1c>)
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	4608      	mov	r0, r1
 8008eba:	602b      	str	r3, [r5, #0]
 8008ebc:	f7f8 fba5 	bl	800160a <_isatty>
 8008ec0:	1c43      	adds	r3, r0, #1
 8008ec2:	d102      	bne.n	8008eca <_isatty_r+0x1a>
 8008ec4:	682b      	ldr	r3, [r5, #0]
 8008ec6:	b103      	cbz	r3, 8008eca <_isatty_r+0x1a>
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	bd38      	pop	{r3, r4, r5, pc}
 8008ecc:	20000444 	.word	0x20000444

08008ed0 <_lseek_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4d07      	ldr	r5, [pc, #28]	; (8008ef0 <_lseek_r+0x20>)
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	4608      	mov	r0, r1
 8008ed8:	4611      	mov	r1, r2
 8008eda:	2200      	movs	r2, #0
 8008edc:	602a      	str	r2, [r5, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	f7f8 fb9e 	bl	8001620 <_lseek>
 8008ee4:	1c43      	adds	r3, r0, #1
 8008ee6:	d102      	bne.n	8008eee <_lseek_r+0x1e>
 8008ee8:	682b      	ldr	r3, [r5, #0]
 8008eea:	b103      	cbz	r3, 8008eee <_lseek_r+0x1e>
 8008eec:	6023      	str	r3, [r4, #0]
 8008eee:	bd38      	pop	{r3, r4, r5, pc}
 8008ef0:	20000444 	.word	0x20000444

08008ef4 <_read_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4d07      	ldr	r5, [pc, #28]	; (8008f14 <_read_r+0x20>)
 8008ef8:	4604      	mov	r4, r0
 8008efa:	4608      	mov	r0, r1
 8008efc:	4611      	mov	r1, r2
 8008efe:	2200      	movs	r2, #0
 8008f00:	602a      	str	r2, [r5, #0]
 8008f02:	461a      	mov	r2, r3
 8008f04:	f7f8 fb2c 	bl	8001560 <_read>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	d102      	bne.n	8008f12 <_read_r+0x1e>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	b103      	cbz	r3, 8008f12 <_read_r+0x1e>
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	bd38      	pop	{r3, r4, r5, pc}
 8008f14:	20000444 	.word	0x20000444

08008f18 <_init>:
 8008f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1a:	bf00      	nop
 8008f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1e:	bc08      	pop	{r3}
 8008f20:	469e      	mov	lr, r3
 8008f22:	4770      	bx	lr

08008f24 <_fini>:
 8008f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f26:	bf00      	nop
 8008f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f2a:	bc08      	pop	{r3}
 8008f2c:	469e      	mov	lr, r3
 8008f2e:	4770      	bx	lr
