
EX_TMP117_F103C8T6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006914  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a4  08006a28  08006a28  00016a28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073cc  080073cc  000202d4  2**0
                  CONTENTS
  4 .ARM          00000000  080073cc  080073cc  000202d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073cc  080073cc  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073cc  080073cc  000173cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073d0  080073d0  000173d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  080073d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200002d4  080076a8  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  080076a8  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009744  00000000  00000000  00020340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f51  00000000  00000000  00029a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  0002b9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e7  00000000  00000000  0002c440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a31  00000000  00000000  0002cc27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df39  00000000  00000000  00045658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086bee  00000000  00000000  00053591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a7c  00000000  00000000  000da180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000ddbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002d4 	.word	0x200002d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a0c 	.word	0x08006a0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002d8 	.word	0x200002d8
 800014c:	08006a0c 	.word	0x08006a0c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3c:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <MX_GPIO_Init+0xa4>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a22      	ldr	r2, [pc, #136]	; (8000bcc <MX_GPIO_Init+0xa4>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <MX_GPIO_Init+0xa4>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0310 	and.w	r3, r3, #16
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b54:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <MX_GPIO_Init+0xa4>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <MX_GPIO_Init+0xa4>)
 8000b5a:	f043 0320 	orr.w	r3, r3, #32
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_GPIO_Init+0xa4>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0320 	and.w	r3, r3, #32
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <MX_GPIO_Init+0xa4>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a16      	ldr	r2, [pc, #88]	; (8000bcc <MX_GPIO_Init+0xa4>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <MX_GPIO_Init+0xa4>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_GPIO_Init+0xa4>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <MX_GPIO_Init+0xa4>)
 8000b8a:	f043 0308 	orr.w	r3, r3, #8
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_GPIO_Init+0xa4>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0308 	and.w	r3, r3, #8
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_CS_Pin|OLED_DC_Pin|OLED_RST_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	211c      	movs	r1, #28
 8000ba0:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <MX_GPIO_Init+0xa8>)
 8000ba2:	f000 fe0b 	bl	80017bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin|OLED_RST_Pin;
 8000ba6:	231c      	movs	r3, #28
 8000ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_GPIO_Init+0xa8>)
 8000bbe:	f000 fc79 	bl	80014b4 <HAL_GPIO_Init>

}
 8000bc2:	bf00      	nop
 8000bc4:	3720      	adds	r7, #32
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010800 	.word	0x40010800

08000bd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bda:	4a13      	ldr	r2, [pc, #76]	; (8000c28 <MX_I2C1_Init+0x54>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000be0:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <MX_I2C1_Init+0x58>)
 8000be2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c12:	f000 fdeb 	bl	80017ec <HAL_I2C_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c1c:	f000 f915 	bl	8000e4a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200002f0 	.word	0x200002f0
 8000c28:	40005400 	.word	0x40005400
 8000c2c:	000186a0 	.word	0x000186a0

08000c30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a15      	ldr	r2, [pc, #84]	; (8000ca0 <HAL_I2C_MspInit+0x70>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d123      	bne.n	8000c98 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <HAL_I2C_MspInit+0x74>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <HAL_I2C_MspInit+0x74>)
 8000c56:	f043 0308 	orr.w	r3, r3, #8
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_I2C_MspInit+0x74>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f003 0308 	and.w	r3, r3, #8
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c68:	23c0      	movs	r3, #192	; 0xc0
 8000c6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6c:	2312      	movs	r3, #18
 8000c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <HAL_I2C_MspInit+0x78>)
 8000c7c:	f000 fc1a 	bl	80014b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_I2C_MspInit+0x74>)
 8000c82:	69db      	ldr	r3, [r3, #28]
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_I2C_MspInit+0x74>)
 8000c86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c8a:	61d3      	str	r3, [r2, #28]
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_I2C_MspInit+0x74>)
 8000c8e:	69db      	ldr	r3, [r3, #28]
 8000c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c98:	bf00      	nop
 8000c9a:	3720      	adds	r7, #32
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40005400 	.word	0x40005400
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010c00 	.word	0x40010c00

08000cac <oled_display>:
char tmp[7];
char tmp1[7];
float tmp_1=0;
BMP280 *bmp280;
void oled_display()
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	sprintf(tmp, "%.3fC", bmp280_getTemprature(bmp280, &hi2c1));
 8000cb0:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <oled_display+0xa8>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4928      	ldr	r1, [pc, #160]	; (8000d58 <oled_display+0xac>)
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f002 fe0a 	bl	80038d0 <bmp280_getTemprature>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fbb2 	bl	8000428 <__aeabi_f2d>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	4924      	ldr	r1, [pc, #144]	; (8000d5c <oled_display+0xb0>)
 8000cca:	4825      	ldr	r0, [pc, #148]	; (8000d60 <oled_display+0xb4>)
 8000ccc:	f003 fd52 	bl	8004774 <siprintf>
  sprintf(tmp1, "%.3fC", tmp_1);
 8000cd0:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <oled_display+0xb8>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fba7 	bl	8000428 <__aeabi_f2d>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	460b      	mov	r3, r1
 8000cde:	491f      	ldr	r1, [pc, #124]	; (8000d5c <oled_display+0xb0>)
 8000ce0:	4821      	ldr	r0, [pc, #132]	; (8000d68 <oled_display+0xbc>)
 8000ce2:	f003 fd47 	bl	8004774 <siprintf>
  //显示实时温度
  OLED_ShowCHinese(20,0,0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2014      	movs	r0, #20
 8000cec:	f002 ff46 	bl	8003b7c <OLED_ShowCHinese>
  OLED_ShowCHinese(35,0,1);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2023      	movs	r0, #35	; 0x23
 8000cf6:	f002 ff41 	bl	8003b7c <OLED_ShowCHinese>
  OLED_ShowString(50, 0, (uint8_t*)":");
 8000cfa:	4a1c      	ldr	r2, [pc, #112]	; (8000d6c <oled_display+0xc0>)
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2032      	movs	r0, #50	; 0x32
 8000d00:	f002 ff0e 	bl	8003b20 <OLED_ShowString>
	OLED_ShowString(58, 0, (uint8_t*)tmp);
 8000d04:	4a16      	ldr	r2, [pc, #88]	; (8000d60 <oled_display+0xb4>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	203a      	movs	r0, #58	; 0x3a
 8000d0a:	f002 ff09 	bl	8003b20 <OLED_ShowString>

  //显示设置温度
  OLED_ShowCHinese(0,3,2);
 8000d0e:	2202      	movs	r2, #2
 8000d10:	2103      	movs	r1, #3
 8000d12:	2000      	movs	r0, #0
 8000d14:	f002 ff32 	bl	8003b7c <OLED_ShowCHinese>
  OLED_ShowCHinese(15,3,3);
 8000d18:	2203      	movs	r2, #3
 8000d1a:	2103      	movs	r1, #3
 8000d1c:	200f      	movs	r0, #15
 8000d1e:	f002 ff2d 	bl	8003b7c <OLED_ShowCHinese>
  OLED_ShowCHinese(30,3,0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2103      	movs	r1, #3
 8000d26:	201e      	movs	r0, #30
 8000d28:	f002 ff28 	bl	8003b7c <OLED_ShowCHinese>
  OLED_ShowCHinese(45,3,1);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2103      	movs	r1, #3
 8000d30:	202d      	movs	r0, #45	; 0x2d
 8000d32:	f002 ff23 	bl	8003b7c <OLED_ShowCHinese>
  OLED_ShowString(60, 3, (uint8_t*)":");
 8000d36:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <oled_display+0xc0>)
 8000d38:	2103      	movs	r1, #3
 8000d3a:	203c      	movs	r0, #60	; 0x3c
 8000d3c:	f002 fef0 	bl	8003b20 <OLED_ShowString>
  OLED_ShowString(68, 3, (uint8_t*)tmp1);
 8000d40:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <oled_display+0xbc>)
 8000d42:	2103      	movs	r1, #3
 8000d44:	2044      	movs	r0, #68	; 0x44
 8000d46:	f002 feeb 	bl	8003b20 <OLED_ShowString>

	HAL_Delay(100);
 8000d4a:	2064      	movs	r0, #100	; 0x64
 8000d4c:	f000 faaa 	bl	80012a4 <HAL_Delay>
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000358 	.word	0x20000358
 8000d58:	200002f0 	.word	0x200002f0
 8000d5c:	08006a28 	.word	0x08006a28
 8000d60:	20000344 	.word	0x20000344
 8000d64:	20000354 	.word	0x20000354
 8000d68:	2000034c 	.word	0x2000034c
 8000d6c:	08006a30 	.word	0x08006a30

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f000 fa34 	bl	80011e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f822 	bl	8000dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f7ff fed4 	bl	8000b28 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d80:	f7ff ff28 	bl	8000bd4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d84:	f000 f866 	bl	8000e54 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000d88:	f002 ff4a 	bl	8003c20 <OLED_Init>
  OLED_ShowString(0, 0, (uint8_t*)"Starting...");
 8000d8c:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <main+0x44>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2000      	movs	r0, #0
 8000d92:	f002 fec5 	bl	8003b20 <OLED_ShowString>
  HAL_Delay(100);
 8000d96:	2064      	movs	r0, #100	; 0x64
 8000d98:	f000 fa84 	bl	80012a4 <HAL_Delay>
  OLED_Clear();
 8000d9c:	f002 fe3c 	bl	8003a18 <OLED_Clear>
  bmp280_init(bmp280, &hi2c1);
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <main+0x48>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4905      	ldr	r1, [pc, #20]	; (8000dbc <main+0x4c>)
 8000da6:	4618      	mov	r0, r3
 8000da8:	f002 fc6b 	bl	8003682 <bmp280_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  oled_display();
 8000dac:	f7ff ff7e 	bl	8000cac <oled_display>
 8000db0:	e7fc      	b.n	8000dac <main+0x3c>
 8000db2:	bf00      	nop
 8000db4:	08006a34 	.word	0x08006a34
 8000db8:	20000358 	.word	0x20000358
 8000dbc:	200002f0 	.word	0x200002f0

08000dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b090      	sub	sp, #64	; 0x40
 8000dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	f107 0318 	add.w	r3, r7, #24
 8000dca:	2228      	movs	r2, #40	; 0x28
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f003 fd33 	bl	800483a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de2:	2301      	movs	r3, #1
 8000de4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df0:	2301      	movs	r3, #1
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df4:	2302      	movs	r3, #2
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dfe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e04:	f107 0318 	add.w	r3, r7, #24
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 fd49 	bl	80028a0 <HAL_RCC_OscConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e14:	f000 f819 	bl	8000e4a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e18:	230f      	movs	r3, #15
 8000e1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2102      	movs	r1, #2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 ffb6 	bl	8002da4 <HAL_RCC_ClockConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e3e:	f000 f804 	bl	8000e4a <Error_Handler>
  }
}
 8000e42:	bf00      	nop
 8000e44:	3740      	adds	r7, #64	; 0x40
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4e:	b672      	cpsid	i
}
 8000e50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <Error_Handler+0x8>

08000e54 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <MX_SPI1_Init+0x64>)
 8000e5a:	4a18      	ldr	r2, [pc, #96]	; (8000ebc <MX_SPI1_Init+0x68>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_SPI1_Init+0x64>)
 8000e60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e66:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_SPI1_Init+0x64>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <MX_SPI1_Init+0x64>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_SPI1_Init+0x64>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_SPI1_Init+0x64>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_SPI1_Init+0x64>)
 8000e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_SPI1_Init+0x64>)
 8000e88:	2208      	movs	r2, #8
 8000e8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <MX_SPI1_Init+0x64>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_SPI1_Init+0x64>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <MX_SPI1_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_SPI1_Init+0x64>)
 8000ea0:	220a      	movs	r2, #10
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <MX_SPI1_Init+0x64>)
 8000ea6:	f002 f8f7 	bl	8003098 <HAL_SPI_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000eb0:	f7ff ffcb 	bl	8000e4a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2000035c 	.word	0x2000035c
 8000ebc:	40013000 	.word	0x40013000

08000ec0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <HAL_SPI_MspInit+0x88>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d12f      	bne.n	8000f40 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <HAL_SPI_MspInit+0x8c>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <HAL_SPI_MspInit+0x8c>)
 8000ee6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <HAL_SPI_MspInit+0x8c>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef8:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <HAL_SPI_MspInit+0x8c>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a13      	ldr	r2, [pc, #76]	; (8000f4c <HAL_SPI_MspInit+0x8c>)
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_SPI_MspInit+0x8c>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 8000f10:	23a0      	movs	r3, #160	; 0xa0
 8000f12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4619      	mov	r1, r3
 8000f22:	480b      	ldr	r0, [pc, #44]	; (8000f50 <HAL_SPI_MspInit+0x90>)
 8000f24:	f000 fac6 	bl	80014b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f28:	2340      	movs	r3, #64	; 0x40
 8000f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <HAL_SPI_MspInit+0x90>)
 8000f3c:	f000 faba 	bl	80014b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40013000 	.word	0x40013000
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010800 	.word	0x40010800

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_MspInit+0x5c>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <HAL_MspInit+0x5c>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6193      	str	r3, [r2, #24]
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_MspInit+0x5c>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <HAL_MspInit+0x5c>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <HAL_MspInit+0x5c>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	61d3      	str	r3, [r2, #28]
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_MspInit+0x5c>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_MspInit+0x60>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_MspInit+0x60>)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010000 	.word	0x40010000

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr

08000fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr

08000ffa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffe:	f000 f935 	bl	800126c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}

08001006 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  return 1;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <_kill>:

int _kill(int pid, int sig)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800101e:	f003 fc5f 	bl	80048e0 <__errno>
 8001022:	4603      	mov	r3, r0
 8001024:	2216      	movs	r2, #22
 8001026:	601a      	str	r2, [r3, #0]
  return -1;
 8001028:	f04f 33ff 	mov.w	r3, #4294967295
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_exit>:

void _exit (int status)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ffe7 	bl	8001014 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001046:	e7fe      	b.n	8001046 <_exit+0x12>

08001048 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	e00a      	b.n	8001070 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800105a:	f3af 8000 	nop.w
 800105e:	4601      	mov	r1, r0
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	60ba      	str	r2, [r7, #8]
 8001066:	b2ca      	uxtb	r2, r1
 8001068:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dbf0      	blt.n	800105a <_read+0x12>
  }

  return len;
 8001078:	687b      	ldr	r3, [r7, #4]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	e009      	b.n	80010a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	60ba      	str	r2, [r7, #8]
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dbf1      	blt.n	8001094 <_write+0x12>
  }
  return len;
 80010b0:	687b      	ldr	r3, [r7, #4]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <_close>:

int _close(int file)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e0:	605a      	str	r2, [r3, #4]
  return 0;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <_isatty>:

int _isatty(int file)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001102:	b480      	push	{r7}
 8001104:	b085      	sub	sp, #20
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
	...

0800111c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001124:	4a14      	ldr	r2, [pc, #80]	; (8001178 <_sbrk+0x5c>)
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <_sbrk+0x60>)
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <_sbrk+0x64>)
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <_sbrk+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	429a      	cmp	r2, r3
 800114a:	d207      	bcs.n	800115c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800114c:	f003 fbc8 	bl	80048e0 <__errno>
 8001150:	4603      	mov	r3, r0
 8001152:	220c      	movs	r2, #12
 8001154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	e009      	b.n	8001170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <_sbrk+0x64>)
 800116c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20005000 	.word	0x20005000
 800117c:	00000400 	.word	0x00000400
 8001180:	200003b4 	.word	0x200003b4
 8001184:	20000508 	.word	0x20000508

08001188 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001194:	f7ff fff8 	bl	8001188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001198:	480b      	ldr	r0, [pc, #44]	; (80011c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800119a:	490c      	ldr	r1, [pc, #48]	; (80011cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800119c:	4a0c      	ldr	r2, [pc, #48]	; (80011d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a0:	e002      	b.n	80011a8 <LoopCopyDataInit>

080011a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a6:	3304      	adds	r3, #4

080011a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ac:	d3f9      	bcc.n	80011a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ae:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011b0:	4c09      	ldr	r4, [pc, #36]	; (80011d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b4:	e001      	b.n	80011ba <LoopFillZerobss>

080011b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b8:	3204      	adds	r2, #4

080011ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011bc:	d3fb      	bcc.n	80011b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011be:	f003 fb95 	bl	80048ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011c2:	f7ff fdd5 	bl	8000d70 <main>
  bx lr
 80011c6:	4770      	bx	lr
  ldr r0, =_sdata
 80011c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011cc:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 80011d0:	080073d4 	.word	0x080073d4
  ldr r2, =_sbss
 80011d4:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 80011d8:	20000508 	.word	0x20000508

080011dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC1_2_IRQHandler>
	...

080011e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_Init+0x28>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_Init+0x28>)
 80011ea:	f043 0310 	orr.w	r3, r3, #16
 80011ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f0:	2003      	movs	r0, #3
 80011f2:	f000 f92b 	bl	800144c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f6:	200f      	movs	r0, #15
 80011f8:	f000 f808 	bl	800120c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011fc:	f7ff feaa 	bl	8000f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40022000 	.word	0x40022000

0800120c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x54>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_InitTick+0x58>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001222:	fbb3 f3f1 	udiv	r3, r3, r1
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f935 	bl	800149a <HAL_SYSTICK_Config>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e00e      	b.n	8001258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b0f      	cmp	r3, #15
 800123e:	d80a      	bhi.n	8001256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001240:	2200      	movs	r2, #0
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f000 f90b 	bl	8001462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800124c:	4a06      	ldr	r2, [pc, #24]	; (8001268 <HAL_InitTick+0x5c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	e000      	b.n	8001258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000000 	.word	0x20000000
 8001264:	20000008 	.word	0x20000008
 8001268:	20000004 	.word	0x20000004

0800126c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_IncTick+0x1c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_IncTick+0x20>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a03      	ldr	r2, [pc, #12]	; (800128c <HAL_IncTick+0x20>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	20000008 	.word	0x20000008
 800128c:	200003b8 	.word	0x200003b8

08001290 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b02      	ldr	r3, [pc, #8]	; (80012a0 <HAL_GetTick+0x10>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	200003b8 	.word	0x200003b8

080012a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff fff0 	bl	8001290 <HAL_GetTick>
 80012b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012bc:	d005      	beq.n	80012ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_Delay+0x44>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ca:	bf00      	nop
 80012cc:	f7ff ffe0 	bl	8001290 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8f7      	bhi.n	80012cc <HAL_Delay+0x28>
  {
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000008 	.word	0x20000008

080012ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <__NVIC_GetPriorityGrouping+0x18>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 0307 	and.w	r3, r3, #7
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001418:	d301      	bcc.n	800141e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141a:	2301      	movs	r3, #1
 800141c:	e00f      	b.n	800143e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <SysTick_Config+0x40>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001426:	210f      	movs	r1, #15
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f7ff ff90 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <SysTick_Config+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <SysTick_Config+0x40>)
 8001438:	2207      	movs	r2, #7
 800143a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	e000e010 	.word	0xe000e010

0800144c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff49 	bl	80012ec <__NVIC_SetPriorityGrouping>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff5e 	bl	8001334 <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff90 	bl	80013a4 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5f 	bl	8001350 <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ffb0 	bl	8001408 <SysTick_Config>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b08b      	sub	sp, #44	; 0x2c
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c6:	e169      	b.n	800179c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014c8:	2201      	movs	r2, #1
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	f040 8158 	bne.w	8001796 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4a9a      	ldr	r2, [pc, #616]	; (8001754 <HAL_GPIO_Init+0x2a0>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d05e      	beq.n	80015ae <HAL_GPIO_Init+0xfa>
 80014f0:	4a98      	ldr	r2, [pc, #608]	; (8001754 <HAL_GPIO_Init+0x2a0>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d875      	bhi.n	80015e2 <HAL_GPIO_Init+0x12e>
 80014f6:	4a98      	ldr	r2, [pc, #608]	; (8001758 <HAL_GPIO_Init+0x2a4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d058      	beq.n	80015ae <HAL_GPIO_Init+0xfa>
 80014fc:	4a96      	ldr	r2, [pc, #600]	; (8001758 <HAL_GPIO_Init+0x2a4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d86f      	bhi.n	80015e2 <HAL_GPIO_Init+0x12e>
 8001502:	4a96      	ldr	r2, [pc, #600]	; (800175c <HAL_GPIO_Init+0x2a8>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d052      	beq.n	80015ae <HAL_GPIO_Init+0xfa>
 8001508:	4a94      	ldr	r2, [pc, #592]	; (800175c <HAL_GPIO_Init+0x2a8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d869      	bhi.n	80015e2 <HAL_GPIO_Init+0x12e>
 800150e:	4a94      	ldr	r2, [pc, #592]	; (8001760 <HAL_GPIO_Init+0x2ac>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d04c      	beq.n	80015ae <HAL_GPIO_Init+0xfa>
 8001514:	4a92      	ldr	r2, [pc, #584]	; (8001760 <HAL_GPIO_Init+0x2ac>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d863      	bhi.n	80015e2 <HAL_GPIO_Init+0x12e>
 800151a:	4a92      	ldr	r2, [pc, #584]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d046      	beq.n	80015ae <HAL_GPIO_Init+0xfa>
 8001520:	4a90      	ldr	r2, [pc, #576]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d85d      	bhi.n	80015e2 <HAL_GPIO_Init+0x12e>
 8001526:	2b12      	cmp	r3, #18
 8001528:	d82a      	bhi.n	8001580 <HAL_GPIO_Init+0xcc>
 800152a:	2b12      	cmp	r3, #18
 800152c:	d859      	bhi.n	80015e2 <HAL_GPIO_Init+0x12e>
 800152e:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <HAL_GPIO_Init+0x80>)
 8001530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001534:	080015af 	.word	0x080015af
 8001538:	08001589 	.word	0x08001589
 800153c:	0800159b 	.word	0x0800159b
 8001540:	080015dd 	.word	0x080015dd
 8001544:	080015e3 	.word	0x080015e3
 8001548:	080015e3 	.word	0x080015e3
 800154c:	080015e3 	.word	0x080015e3
 8001550:	080015e3 	.word	0x080015e3
 8001554:	080015e3 	.word	0x080015e3
 8001558:	080015e3 	.word	0x080015e3
 800155c:	080015e3 	.word	0x080015e3
 8001560:	080015e3 	.word	0x080015e3
 8001564:	080015e3 	.word	0x080015e3
 8001568:	080015e3 	.word	0x080015e3
 800156c:	080015e3 	.word	0x080015e3
 8001570:	080015e3 	.word	0x080015e3
 8001574:	080015e3 	.word	0x080015e3
 8001578:	08001591 	.word	0x08001591
 800157c:	080015a5 	.word	0x080015a5
 8001580:	4a79      	ldr	r2, [pc, #484]	; (8001768 <HAL_GPIO_Init+0x2b4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001586:	e02c      	b.n	80015e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	623b      	str	r3, [r7, #32]
          break;
 800158e:	e029      	b.n	80015e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	3304      	adds	r3, #4
 8001596:	623b      	str	r3, [r7, #32]
          break;
 8001598:	e024      	b.n	80015e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	3308      	adds	r3, #8
 80015a0:	623b      	str	r3, [r7, #32]
          break;
 80015a2:	e01f      	b.n	80015e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	330c      	adds	r3, #12
 80015aa:	623b      	str	r3, [r7, #32]
          break;
 80015ac:	e01a      	b.n	80015e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d102      	bne.n	80015bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015b6:	2304      	movs	r3, #4
 80015b8:	623b      	str	r3, [r7, #32]
          break;
 80015ba:	e013      	b.n	80015e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d105      	bne.n	80015d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c4:	2308      	movs	r3, #8
 80015c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	611a      	str	r2, [r3, #16]
          break;
 80015ce:	e009      	b.n	80015e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d0:	2308      	movs	r3, #8
 80015d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	615a      	str	r2, [r3, #20]
          break;
 80015da:	e003      	b.n	80015e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
          break;
 80015e0:	e000      	b.n	80015e4 <HAL_GPIO_Init+0x130>
          break;
 80015e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2bff      	cmp	r3, #255	; 0xff
 80015e8:	d801      	bhi.n	80015ee <HAL_GPIO_Init+0x13a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	e001      	b.n	80015f2 <HAL_GPIO_Init+0x13e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3304      	adds	r3, #4
 80015f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2bff      	cmp	r3, #255	; 0xff
 80015f8:	d802      	bhi.n	8001600 <HAL_GPIO_Init+0x14c>
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	e002      	b.n	8001606 <HAL_GPIO_Init+0x152>
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	3b08      	subs	r3, #8
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	210f      	movs	r1, #15
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	fa01 f303 	lsl.w	r3, r1, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	401a      	ands	r2, r3
 8001618:	6a39      	ldr	r1, [r7, #32]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	fa01 f303 	lsl.w	r3, r1, r3
 8001620:	431a      	orrs	r2, r3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 80b1 	beq.w	8001796 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001634:	4b4d      	ldr	r3, [pc, #308]	; (800176c <HAL_GPIO_Init+0x2b8>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a4c      	ldr	r2, [pc, #304]	; (800176c <HAL_GPIO_Init+0x2b8>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	4b4a      	ldr	r3, [pc, #296]	; (800176c <HAL_GPIO_Init+0x2b8>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800164c:	4a48      	ldr	r2, [pc, #288]	; (8001770 <HAL_GPIO_Init+0x2bc>)
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	3302      	adds	r3, #2
 8001654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001658:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	220f      	movs	r2, #15
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	4013      	ands	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a40      	ldr	r2, [pc, #256]	; (8001774 <HAL_GPIO_Init+0x2c0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d013      	beq.n	80016a0 <HAL_GPIO_Init+0x1ec>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a3f      	ldr	r2, [pc, #252]	; (8001778 <HAL_GPIO_Init+0x2c4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d00d      	beq.n	800169c <HAL_GPIO_Init+0x1e8>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a3e      	ldr	r2, [pc, #248]	; (800177c <HAL_GPIO_Init+0x2c8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d007      	beq.n	8001698 <HAL_GPIO_Init+0x1e4>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a3d      	ldr	r2, [pc, #244]	; (8001780 <HAL_GPIO_Init+0x2cc>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d101      	bne.n	8001694 <HAL_GPIO_Init+0x1e0>
 8001690:	2303      	movs	r3, #3
 8001692:	e006      	b.n	80016a2 <HAL_GPIO_Init+0x1ee>
 8001694:	2304      	movs	r3, #4
 8001696:	e004      	b.n	80016a2 <HAL_GPIO_Init+0x1ee>
 8001698:	2302      	movs	r3, #2
 800169a:	e002      	b.n	80016a2 <HAL_GPIO_Init+0x1ee>
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <HAL_GPIO_Init+0x1ee>
 80016a0:	2300      	movs	r3, #0
 80016a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a4:	f002 0203 	and.w	r2, r2, #3
 80016a8:	0092      	lsls	r2, r2, #2
 80016aa:	4093      	lsls	r3, r2
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016b2:	492f      	ldr	r1, [pc, #188]	; (8001770 <HAL_GPIO_Init+0x2bc>)
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3302      	adds	r3, #2
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016cc:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <HAL_GPIO_Init+0x2d0>)
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	492c      	ldr	r1, [pc, #176]	; (8001784 <HAL_GPIO_Init+0x2d0>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	608b      	str	r3, [r1, #8]
 80016d8:	e006      	b.n	80016e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016da:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <HAL_GPIO_Init+0x2d0>)
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	4928      	ldr	r1, [pc, #160]	; (8001784 <HAL_GPIO_Init+0x2d0>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d006      	beq.n	8001702 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016f4:	4b23      	ldr	r3, [pc, #140]	; (8001784 <HAL_GPIO_Init+0x2d0>)
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	4922      	ldr	r1, [pc, #136]	; (8001784 <HAL_GPIO_Init+0x2d0>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	60cb      	str	r3, [r1, #12]
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <HAL_GPIO_Init+0x2d0>)
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	43db      	mvns	r3, r3
 800170a:	491e      	ldr	r1, [pc, #120]	; (8001784 <HAL_GPIO_Init+0x2d0>)
 800170c:	4013      	ands	r3, r2
 800170e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_GPIO_Init+0x2d0>)
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	4918      	ldr	r1, [pc, #96]	; (8001784 <HAL_GPIO_Init+0x2d0>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
 8001728:	e006      	b.n	8001738 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <HAL_GPIO_Init+0x2d0>)
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	43db      	mvns	r3, r3
 8001732:	4914      	ldr	r1, [pc, #80]	; (8001784 <HAL_GPIO_Init+0x2d0>)
 8001734:	4013      	ands	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d021      	beq.n	8001788 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <HAL_GPIO_Init+0x2d0>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	490e      	ldr	r1, [pc, #56]	; (8001784 <HAL_GPIO_Init+0x2d0>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
 8001750:	e021      	b.n	8001796 <HAL_GPIO_Init+0x2e2>
 8001752:	bf00      	nop
 8001754:	10320000 	.word	0x10320000
 8001758:	10310000 	.word	0x10310000
 800175c:	10220000 	.word	0x10220000
 8001760:	10210000 	.word	0x10210000
 8001764:	10120000 	.word	0x10120000
 8001768:	10110000 	.word	0x10110000
 800176c:	40021000 	.word	0x40021000
 8001770:	40010000 	.word	0x40010000
 8001774:	40010800 	.word	0x40010800
 8001778:	40010c00 	.word	0x40010c00
 800177c:	40011000 	.word	0x40011000
 8001780:	40011400 	.word	0x40011400
 8001784:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_GPIO_Init+0x304>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	43db      	mvns	r3, r3
 8001790:	4909      	ldr	r1, [pc, #36]	; (80017b8 <HAL_GPIO_Init+0x304>)
 8001792:	4013      	ands	r3, r2
 8001794:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	3301      	adds	r3, #1
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	fa22 f303 	lsr.w	r3, r2, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f47f ae8e 	bne.w	80014c8 <HAL_GPIO_Init+0x14>
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	372c      	adds	r7, #44	; 0x2c
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	40010400 	.word	0x40010400

080017bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
 80017c8:	4613      	mov	r3, r2
 80017ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017cc:	787b      	ldrb	r3, [r7, #1]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017d8:	e003      	b.n	80017e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017da:	887b      	ldrh	r3, [r7, #2]
 80017dc:	041a      	lsls	r2, r3, #16
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	611a      	str	r2, [r3, #16]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e12b      	b.n	8001a56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d106      	bne.n	8001818 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fa0c 	bl	8000c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2224      	movs	r2, #36	; 0x24
 800181c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0201 	bic.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800183e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800184e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001850:	f001 fbf0 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
 8001854:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4a81      	ldr	r2, [pc, #516]	; (8001a60 <HAL_I2C_Init+0x274>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d807      	bhi.n	8001870 <HAL_I2C_Init+0x84>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4a80      	ldr	r2, [pc, #512]	; (8001a64 <HAL_I2C_Init+0x278>)
 8001864:	4293      	cmp	r3, r2
 8001866:	bf94      	ite	ls
 8001868:	2301      	movls	r3, #1
 800186a:	2300      	movhi	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	e006      	b.n	800187e <HAL_I2C_Init+0x92>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4a7d      	ldr	r2, [pc, #500]	; (8001a68 <HAL_I2C_Init+0x27c>)
 8001874:	4293      	cmp	r3, r2
 8001876:	bf94      	ite	ls
 8001878:	2301      	movls	r3, #1
 800187a:	2300      	movhi	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0e7      	b.n	8001a56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4a78      	ldr	r2, [pc, #480]	; (8001a6c <HAL_I2C_Init+0x280>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	0c9b      	lsrs	r3, r3, #18
 8001890:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4a6a      	ldr	r2, [pc, #424]	; (8001a60 <HAL_I2C_Init+0x274>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d802      	bhi.n	80018c0 <HAL_I2C_Init+0xd4>
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	3301      	adds	r3, #1
 80018be:	e009      	b.n	80018d4 <HAL_I2C_Init+0xe8>
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018c6:	fb02 f303 	mul.w	r3, r2, r3
 80018ca:	4a69      	ldr	r2, [pc, #420]	; (8001a70 <HAL_I2C_Init+0x284>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	099b      	lsrs	r3, r3, #6
 80018d2:	3301      	adds	r3, #1
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	430b      	orrs	r3, r1
 80018da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	495c      	ldr	r1, [pc, #368]	; (8001a60 <HAL_I2C_Init+0x274>)
 80018f0:	428b      	cmp	r3, r1
 80018f2:	d819      	bhi.n	8001928 <HAL_I2C_Init+0x13c>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1e59      	subs	r1, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001902:	1c59      	adds	r1, r3, #1
 8001904:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001908:	400b      	ands	r3, r1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00a      	beq.n	8001924 <HAL_I2C_Init+0x138>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1e59      	subs	r1, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fbb1 f3f3 	udiv	r3, r1, r3
 800191c:	3301      	adds	r3, #1
 800191e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001922:	e051      	b.n	80019c8 <HAL_I2C_Init+0x1dc>
 8001924:	2304      	movs	r3, #4
 8001926:	e04f      	b.n	80019c8 <HAL_I2C_Init+0x1dc>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d111      	bne.n	8001954 <HAL_I2C_Init+0x168>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1e58      	subs	r0, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6859      	ldr	r1, [r3, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	440b      	add	r3, r1
 800193e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001942:	3301      	adds	r3, #1
 8001944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf0c      	ite	eq
 800194c:	2301      	moveq	r3, #1
 800194e:	2300      	movne	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	e012      	b.n	800197a <HAL_I2C_Init+0x18e>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	1e58      	subs	r0, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	0099      	lsls	r1, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	fbb0 f3f3 	udiv	r3, r0, r3
 800196a:	3301      	adds	r3, #1
 800196c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf0c      	ite	eq
 8001974:	2301      	moveq	r3, #1
 8001976:	2300      	movne	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_I2C_Init+0x196>
 800197e:	2301      	movs	r3, #1
 8001980:	e022      	b.n	80019c8 <HAL_I2C_Init+0x1dc>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10e      	bne.n	80019a8 <HAL_I2C_Init+0x1bc>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1e58      	subs	r0, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6859      	ldr	r1, [r3, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	440b      	add	r3, r1
 8001998:	fbb0 f3f3 	udiv	r3, r0, r3
 800199c:	3301      	adds	r3, #1
 800199e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019a6:	e00f      	b.n	80019c8 <HAL_I2C_Init+0x1dc>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1e58      	subs	r0, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6859      	ldr	r1, [r3, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	0099      	lsls	r1, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80019be:	3301      	adds	r3, #1
 80019c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	6809      	ldr	r1, [r1, #0]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69da      	ldr	r2, [r3, #28]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6911      	ldr	r1, [r2, #16]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68d2      	ldr	r2, [r2, #12]
 8001a02:	4311      	orrs	r1, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2220      	movs	r2, #32
 8001a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	000186a0 	.word	0x000186a0
 8001a64:	001e847f 	.word	0x001e847f
 8001a68:	003d08ff 	.word	0x003d08ff
 8001a6c:	431bde83 	.word	0x431bde83
 8001a70:	10624dd3 	.word	0x10624dd3

08001a74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	4611      	mov	r1, r2
 8001a80:	461a      	mov	r2, r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	817b      	strh	r3, [r7, #10]
 8001a86:	460b      	mov	r3, r1
 8001a88:	813b      	strh	r3, [r7, #8]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a8e:	f7ff fbff 	bl	8001290 <HAL_GetTick>
 8001a92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b20      	cmp	r3, #32
 8001a9e:	f040 80d9 	bne.w	8001c54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2319      	movs	r3, #25
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	496d      	ldr	r1, [pc, #436]	; (8001c60 <HAL_I2C_Mem_Write+0x1ec>)
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 fcc1 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e0cc      	b.n	8001c56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_I2C_Mem_Write+0x56>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e0c5      	b.n	8001c56 <HAL_I2C_Mem_Write+0x1e2>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d007      	beq.n	8001af0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001afe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2221      	movs	r2, #33	; 0x21
 8001b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2240      	movs	r2, #64	; 0x40
 8001b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a3a      	ldr	r2, [r7, #32]
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4a4d      	ldr	r2, [pc, #308]	; (8001c64 <HAL_I2C_Mem_Write+0x1f0>)
 8001b30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b32:	88f8      	ldrh	r0, [r7, #6]
 8001b34:	893a      	ldrh	r2, [r7, #8]
 8001b36:	8979      	ldrh	r1, [r7, #10]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	9301      	str	r3, [sp, #4]
 8001b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	4603      	mov	r3, r0
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 faf8 	bl	8002138 <I2C_RequestMemoryWrite>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d052      	beq.n	8001bf4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e081      	b.n	8001c56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 fd86 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00d      	beq.n	8001b7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d107      	bne.n	8001b7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e06b      	b.n	8001c56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	781a      	ldrb	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d11b      	bne.n	8001bf4 <HAL_I2C_Mem_Write+0x180>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d017      	beq.n	8001bf4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1aa      	bne.n	8001b52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 fd79 	bl	80026f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00d      	beq.n	8001c28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d107      	bne.n	8001c24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e016      	b.n	8001c56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e000      	b.n	8001c56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c54:	2302      	movs	r3, #2
  }
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	00100002 	.word	0x00100002
 8001c64:	ffff0000 	.word	0xffff0000

08001c68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08c      	sub	sp, #48	; 0x30
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	4608      	mov	r0, r1
 8001c72:	4611      	mov	r1, r2
 8001c74:	461a      	mov	r2, r3
 8001c76:	4603      	mov	r3, r0
 8001c78:	817b      	strh	r3, [r7, #10]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	813b      	strh	r3, [r7, #8]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c86:	f7ff fb03 	bl	8001290 <HAL_GetTick>
 8001c8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	f040 8244 	bne.w	8002122 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	2319      	movs	r3, #25
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	4982      	ldr	r1, [pc, #520]	; (8001eac <HAL_I2C_Mem_Read+0x244>)
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 fbc5 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e237      	b.n	8002124 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_I2C_Mem_Read+0x5a>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e230      	b.n	8002124 <HAL_I2C_Mem_Read+0x4bc>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d007      	beq.n	8001ce8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cf6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2222      	movs	r2, #34	; 0x22
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2240      	movs	r2, #64	; 0x40
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4a62      	ldr	r2, [pc, #392]	; (8001eb0 <HAL_I2C_Mem_Read+0x248>)
 8001d28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d2a:	88f8      	ldrh	r0, [r7, #6]
 8001d2c:	893a      	ldrh	r2, [r7, #8]
 8001d2e:	8979      	ldrh	r1, [r7, #10]
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	4603      	mov	r3, r0
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 fa92 	bl	8002264 <I2C_RequestMemoryRead>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e1ec      	b.n	8002124 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d113      	bne.n	8001d7a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	e1c0      	b.n	80020fc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d11e      	bne.n	8001dc0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d92:	b672      	cpsid	i
}
 8001d94:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d96:	2300      	movs	r3, #0
 8001d98:	61bb      	str	r3, [r7, #24]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	61bb      	str	r3, [r7, #24]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	61bb      	str	r3, [r7, #24]
 8001daa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001dbc:	b662      	cpsie	i
}
 8001dbe:	e035      	b.n	8001e2c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d11e      	bne.n	8001e06 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd8:	b672      	cpsid	i
}
 8001dda:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e02:	b662      	cpsie	i
}
 8001e04:	e012      	b.n	8001e2c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e14:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001e2c:	e166      	b.n	80020fc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	f200 811f 	bhi.w	8002076 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d123      	bne.n	8001e88 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 fc9f 	bl	8002788 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e167      	b.n	8002124 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e86:	e139      	b.n	80020fc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d152      	bne.n	8001f36 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e96:	2200      	movs	r2, #0
 8001e98:	4906      	ldr	r1, [pc, #24]	; (8001eb4 <HAL_I2C_Mem_Read+0x24c>)
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 faca 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e13c      	b.n	8002124 <HAL_I2C_Mem_Read+0x4bc>
 8001eaa:	bf00      	nop
 8001eac:	00100002 	.word	0x00100002
 8001eb0:	ffff0000 	.word	0xffff0000
 8001eb4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb8:	b672      	cpsid	i
}
 8001eba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001efe:	b662      	cpsie	i
}
 8001f00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f34:	e0e2      	b.n	80020fc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	497b      	ldr	r1, [pc, #492]	; (800212c <HAL_I2C_Mem_Read+0x4c4>)
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 fa77 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0e9      	b.n	8002124 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f60:	b672      	cpsid	i
}
 8001f62:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f96:	4b66      	ldr	r3, [pc, #408]	; (8002130 <HAL_I2C_Mem_Read+0x4c8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	08db      	lsrs	r3, r3, #3
 8001f9c:	4a65      	ldr	r2, [pc, #404]	; (8002134 <HAL_I2C_Mem_Read+0x4cc>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0a1a      	lsrs	r2, r3, #8
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	00da      	lsls	r2, r3, #3
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d118      	bne.n	8001fee <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f043 0220 	orr.w	r2, r3, #32
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001fde:	b662      	cpsie	i
}
 8001fe0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e09a      	b.n	8002124 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d1d9      	bne.n	8001fb0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800200a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002028:	3b01      	subs	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002034:	b29b      	uxth	r3, r3
 8002036:	3b01      	subs	r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800203e:	b662      	cpsie	i
}
 8002040:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002074:	e042      	b.n	80020fc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002078:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 fb84 	bl	8002788 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e04c      	b.n	8002124 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d118      	bne.n	80020fc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002100:	2b00      	cmp	r3, #0
 8002102:	f47f ae94 	bne.w	8001e2e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2220      	movs	r2, #32
 800210a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	e000      	b.n	8002124 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002122:	2302      	movs	r3, #2
  }
}
 8002124:	4618      	mov	r0, r3
 8002126:	3728      	adds	r7, #40	; 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	00010004 	.word	0x00010004
 8002130:	20000000 	.word	0x20000000
 8002134:	14f8b589 	.word	0x14f8b589

08002138 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	4608      	mov	r0, r1
 8002142:	4611      	mov	r1, r2
 8002144:	461a      	mov	r2, r3
 8002146:	4603      	mov	r3, r0
 8002148:	817b      	strh	r3, [r7, #10]
 800214a:	460b      	mov	r3, r1
 800214c:	813b      	strh	r3, [r7, #8]
 800214e:	4613      	mov	r3, r2
 8002150:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002160:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	2200      	movs	r2, #0
 800216a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f960 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00d      	beq.n	8002196 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002188:	d103      	bne.n	8002192 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e05f      	b.n	8002256 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002196:	897b      	ldrh	r3, [r7, #10]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	6a3a      	ldr	r2, [r7, #32]
 80021aa:	492d      	ldr	r1, [pc, #180]	; (8002260 <I2C_RequestMemoryWrite+0x128>)
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f9bb 	bl	8002528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e04c      	b.n	8002256 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d4:	6a39      	ldr	r1, [r7, #32]
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 fa46 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00d      	beq.n	80021fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d107      	bne.n	80021fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e02b      	b.n	8002256 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d105      	bne.n	8002210 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002204:	893b      	ldrh	r3, [r7, #8]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	611a      	str	r2, [r3, #16]
 800220e:	e021      	b.n	8002254 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002210:	893b      	ldrh	r3, [r7, #8]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	b29b      	uxth	r3, r3
 8002216:	b2da      	uxtb	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800221e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002220:	6a39      	ldr	r1, [r7, #32]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 fa20 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00d      	beq.n	800224a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	2b04      	cmp	r3, #4
 8002234:	d107      	bne.n	8002246 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002244:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e005      	b.n	8002256 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800224a:	893b      	ldrh	r3, [r7, #8]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	00010002 	.word	0x00010002

08002264 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	4608      	mov	r0, r1
 800226e:	4611      	mov	r1, r2
 8002270:	461a      	mov	r2, r3
 8002272:	4603      	mov	r3, r0
 8002274:	817b      	strh	r3, [r7, #10]
 8002276:	460b      	mov	r3, r1
 8002278:	813b      	strh	r3, [r7, #8]
 800227a:	4613      	mov	r3, r2
 800227c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800228c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800229c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f8c2 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00d      	beq.n	80022d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c4:	d103      	bne.n	80022ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e0aa      	b.n	8002428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022d2:	897b      	ldrh	r3, [r7, #10]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	6a3a      	ldr	r2, [r7, #32]
 80022e6:	4952      	ldr	r1, [pc, #328]	; (8002430 <I2C_RequestMemoryRead+0x1cc>)
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 f91d 	bl	8002528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e097      	b.n	8002428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800230e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002310:	6a39      	ldr	r1, [r7, #32]
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f9a8 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00d      	beq.n	800233a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	2b04      	cmp	r3, #4
 8002324:	d107      	bne.n	8002336 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002334:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e076      	b.n	8002428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d105      	bne.n	800234c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002340:	893b      	ldrh	r3, [r7, #8]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	611a      	str	r2, [r3, #16]
 800234a:	e021      	b.n	8002390 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800234c:	893b      	ldrh	r3, [r7, #8]
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	b29b      	uxth	r3, r3
 8002352:	b2da      	uxtb	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800235a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235c:	6a39      	ldr	r1, [r7, #32]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f982 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00d      	beq.n	8002386 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	2b04      	cmp	r3, #4
 8002370:	d107      	bne.n	8002382 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002380:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e050      	b.n	8002428 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002386:	893b      	ldrh	r3, [r7, #8]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002392:	6a39      	ldr	r1, [r7, #32]
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f967 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00d      	beq.n	80023bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d107      	bne.n	80023b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e035      	b.n	8002428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f82b 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00d      	beq.n	8002400 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023f2:	d103      	bne.n	80023fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e013      	b.n	8002428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002400:	897b      	ldrh	r3, [r7, #10]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	b2da      	uxtb	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	6a3a      	ldr	r2, [r7, #32]
 8002414:	4906      	ldr	r1, [pc, #24]	; (8002430 <I2C_RequestMemoryRead+0x1cc>)
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f886 	bl	8002528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	00010002 	.word	0x00010002

08002434 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	4613      	mov	r3, r2
 8002442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002444:	e048      	b.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	d044      	beq.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244e:	f7fe ff1f 	bl	8001290 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d302      	bcc.n	8002464 <I2C_WaitOnFlagUntilTimeout+0x30>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d139      	bne.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	0c1b      	lsrs	r3, r3, #16
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d10d      	bne.n	800248a <I2C_WaitOnFlagUntilTimeout+0x56>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	43da      	mvns	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	4013      	ands	r3, r2
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf0c      	ite	eq
 8002480:	2301      	moveq	r3, #1
 8002482:	2300      	movne	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	e00c      	b.n	80024a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	43da      	mvns	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	4013      	ands	r3, r2
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d116      	bne.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f043 0220 	orr.w	r2, r3, #32
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e023      	b.n	8002520 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	0c1b      	lsrs	r3, r3, #16
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d10d      	bne.n	80024fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	43da      	mvns	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	4013      	ands	r3, r2
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf0c      	ite	eq
 80024f4:	2301      	moveq	r3, #1
 80024f6:	2300      	movne	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	e00c      	b.n	8002518 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	43da      	mvns	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	4013      	ands	r3, r2
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	429a      	cmp	r2, r3
 800251c:	d093      	beq.n	8002446 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002536:	e071      	b.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002546:	d123      	bne.n	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002556:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002560:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f043 0204 	orr.w	r2, r3, #4
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e067      	b.n	8002660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002596:	d041      	beq.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002598:	f7fe fe7a 	bl	8001290 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d302      	bcc.n	80025ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d136      	bne.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d10c      	bne.n	80025d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	43da      	mvns	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4013      	ands	r3, r2
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	bf14      	ite	ne
 80025ca:	2301      	movne	r3, #1
 80025cc:	2300      	moveq	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	e00b      	b.n	80025ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	43da      	mvns	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	4013      	ands	r3, r2
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf14      	ite	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	2300      	moveq	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d016      	beq.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	f043 0220 	orr.w	r2, r3, #32
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e021      	b.n	8002660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	0c1b      	lsrs	r3, r3, #16
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d10c      	bne.n	8002640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	43da      	mvns	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	4013      	ands	r3, r2
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e00b      	b.n	8002658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4013      	ands	r3, r2
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	f47f af6d 	bne.w	8002538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002674:	e034      	b.n	80026e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f8e3 	bl	8002842 <I2C_IsAcknowledgeFailed>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e034      	b.n	80026f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d028      	beq.n	80026e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268e:	f7fe fdff 	bl	8001290 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d11d      	bne.n	80026e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ae:	2b80      	cmp	r3, #128	; 0x80
 80026b0:	d016      	beq.n	80026e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f043 0220 	orr.w	r2, r3, #32
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e007      	b.n	80026f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ea:	2b80      	cmp	r3, #128	; 0x80
 80026ec:	d1c3      	bne.n	8002676 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002704:	e034      	b.n	8002770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f89b 	bl	8002842 <I2C_IsAcknowledgeFailed>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e034      	b.n	8002780 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d028      	beq.n	8002770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271e:	f7fe fdb7 	bl	8001290 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	429a      	cmp	r2, r3
 800272c:	d302      	bcc.n	8002734 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d11d      	bne.n	8002770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b04      	cmp	r3, #4
 8002740:	d016      	beq.n	8002770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e007      	b.n	8002780 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b04      	cmp	r3, #4
 800277c:	d1c3      	bne.n	8002706 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002794:	e049      	b.n	800282a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b10      	cmp	r3, #16
 80027a2:	d119      	bne.n	80027d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0210 	mvn.w	r2, #16
 80027ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e030      	b.n	800283a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d8:	f7fe fd5a 	bl	8001290 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d302      	bcc.n	80027ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d11d      	bne.n	800282a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	d016      	beq.n	800282a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f043 0220 	orr.w	r2, r3, #32
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e007      	b.n	800283a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002834:	2b40      	cmp	r3, #64	; 0x40
 8002836:	d1ae      	bne.n	8002796 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002858:	d11b      	bne.n	8002892 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002862:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2220      	movs	r2, #32
 800286e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f043 0204 	orr.w	r2, r3, #4
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr
	...

080028a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e272      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8087 	beq.w	80029ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028c0:	4b92      	ldr	r3, [pc, #584]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d00c      	beq.n	80028e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028cc:	4b8f      	ldr	r3, [pc, #572]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d112      	bne.n	80028fe <HAL_RCC_OscConfig+0x5e>
 80028d8:	4b8c      	ldr	r3, [pc, #560]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e4:	d10b      	bne.n	80028fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e6:	4b89      	ldr	r3, [pc, #548]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d06c      	beq.n	80029cc <HAL_RCC_OscConfig+0x12c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d168      	bne.n	80029cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e24c      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x76>
 8002908:	4b80      	ldr	r3, [pc, #512]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a7f      	ldr	r2, [pc, #508]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800290e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	e02e      	b.n	8002974 <HAL_RCC_OscConfig+0xd4>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x98>
 800291e:	4b7b      	ldr	r3, [pc, #492]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a7a      	ldr	r2, [pc, #488]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	4b78      	ldr	r3, [pc, #480]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a77      	ldr	r2, [pc, #476]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e01d      	b.n	8002974 <HAL_RCC_OscConfig+0xd4>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0xbc>
 8002942:	4b72      	ldr	r3, [pc, #456]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a71      	ldr	r2, [pc, #452]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b6f      	ldr	r3, [pc, #444]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a6e      	ldr	r2, [pc, #440]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e00b      	b.n	8002974 <HAL_RCC_OscConfig+0xd4>
 800295c:	4b6b      	ldr	r3, [pc, #428]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a6a      	ldr	r2, [pc, #424]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b68      	ldr	r3, [pc, #416]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a67      	ldr	r2, [pc, #412]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800296e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002972:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d013      	beq.n	80029a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7fe fc88 	bl	8001290 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002984:	f7fe fc84 	bl	8001290 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	; 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e200      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	4b5d      	ldr	r3, [pc, #372]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0xe4>
 80029a2:	e014      	b.n	80029ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7fe fc74 	bl	8001290 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ac:	f7fe fc70 	bl	8001290 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e1ec      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029be:	4b53      	ldr	r3, [pc, #332]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x10c>
 80029ca:	e000      	b.n	80029ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d063      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029da:	4b4c      	ldr	r3, [pc, #304]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00b      	beq.n	80029fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029e6:	4b49      	ldr	r3, [pc, #292]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d11c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x18c>
 80029f2:	4b46      	ldr	r3, [pc, #280]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d116      	bne.n	8002a2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	4b43      	ldr	r3, [pc, #268]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_RCC_OscConfig+0x176>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d001      	beq.n	8002a16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e1c0      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a16:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4939      	ldr	r1, [pc, #228]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2a:	e03a      	b.n	8002aa2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d020      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a34:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7fe fc29 	bl	8001290 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a42:	f7fe fc25 	bl	8001290 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e1a1      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a54:	4b2d      	ldr	r3, [pc, #180]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a60:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4927      	ldr	r1, [pc, #156]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]
 8002a74:	e015      	b.n	8002aa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a76:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7fe fc08 	bl	8001290 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a84:	f7fe fc04 	bl	8001290 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e180      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d03a      	beq.n	8002b24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d019      	beq.n	8002aea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abc:	f7fe fbe8 	bl	8001290 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac4:	f7fe fbe4 	bl	8001290 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e160      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f000 faba 	bl	800305c <RCC_Delay>
 8002ae8:	e01c      	b.n	8002b24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af0:	f7fe fbce 	bl	8001290 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af6:	e00f      	b.n	8002b18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af8:	f7fe fbca 	bl	8001290 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d908      	bls.n	8002b18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e146      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	42420000 	.word	0x42420000
 8002b14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b18:	4b92      	ldr	r3, [pc, #584]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e9      	bne.n	8002af8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 80a6 	beq.w	8002c7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b32:	2300      	movs	r3, #0
 8002b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b36:	4b8b      	ldr	r3, [pc, #556]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10d      	bne.n	8002b5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b42:	4b88      	ldr	r3, [pc, #544]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	4a87      	ldr	r2, [pc, #540]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	61d3      	str	r3, [r2, #28]
 8002b4e:	4b85      	ldr	r3, [pc, #532]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b82      	ldr	r3, [pc, #520]	; (8002d68 <HAL_RCC_OscConfig+0x4c8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d118      	bne.n	8002b9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6a:	4b7f      	ldr	r3, [pc, #508]	; (8002d68 <HAL_RCC_OscConfig+0x4c8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a7e      	ldr	r2, [pc, #504]	; (8002d68 <HAL_RCC_OscConfig+0x4c8>)
 8002b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b76:	f7fe fb8b 	bl	8001290 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7e:	f7fe fb87 	bl	8001290 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b64      	cmp	r3, #100	; 0x64
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e103      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	4b75      	ldr	r3, [pc, #468]	; (8002d68 <HAL_RCC_OscConfig+0x4c8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x312>
 8002ba4:	4b6f      	ldr	r3, [pc, #444]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	4a6e      	ldr	r2, [pc, #440]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6213      	str	r3, [r2, #32]
 8002bb0:	e02d      	b.n	8002c0e <HAL_RCC_OscConfig+0x36e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x334>
 8002bba:	4b6a      	ldr	r3, [pc, #424]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4a69      	ldr	r2, [pc, #420]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	6213      	str	r3, [r2, #32]
 8002bc6:	4b67      	ldr	r3, [pc, #412]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	4a66      	ldr	r2, [pc, #408]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	f023 0304 	bic.w	r3, r3, #4
 8002bd0:	6213      	str	r3, [r2, #32]
 8002bd2:	e01c      	b.n	8002c0e <HAL_RCC_OscConfig+0x36e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b05      	cmp	r3, #5
 8002bda:	d10c      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x356>
 8002bdc:	4b61      	ldr	r3, [pc, #388]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	4a60      	ldr	r2, [pc, #384]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002be2:	f043 0304 	orr.w	r3, r3, #4
 8002be6:	6213      	str	r3, [r2, #32]
 8002be8:	4b5e      	ldr	r3, [pc, #376]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4a5d      	ldr	r2, [pc, #372]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	6213      	str	r3, [r2, #32]
 8002bf4:	e00b      	b.n	8002c0e <HAL_RCC_OscConfig+0x36e>
 8002bf6:	4b5b      	ldr	r3, [pc, #364]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4a5a      	ldr	r2, [pc, #360]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	6213      	str	r3, [r2, #32]
 8002c02:	4b58      	ldr	r3, [pc, #352]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	4a57      	ldr	r2, [pc, #348]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	f023 0304 	bic.w	r3, r3, #4
 8002c0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d015      	beq.n	8002c42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c16:	f7fe fb3b 	bl	8001290 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1e:	f7fe fb37 	bl	8001290 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e0b1      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c34:	4b4b      	ldr	r3, [pc, #300]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0ee      	beq.n	8002c1e <HAL_RCC_OscConfig+0x37e>
 8002c40:	e014      	b.n	8002c6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c42:	f7fe fb25 	bl	8001290 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4a:	f7fe fb21 	bl	8001290 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e09b      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c60:	4b40      	ldr	r3, [pc, #256]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1ee      	bne.n	8002c4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c6c:	7dfb      	ldrb	r3, [r7, #23]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d105      	bne.n	8002c7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c72:	4b3c      	ldr	r3, [pc, #240]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	4a3b      	ldr	r2, [pc, #236]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 8087 	beq.w	8002d96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c88:	4b36      	ldr	r3, [pc, #216]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 030c 	and.w	r3, r3, #12
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d061      	beq.n	8002d58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d146      	bne.n	8002d2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9c:	4b33      	ldr	r3, [pc, #204]	; (8002d6c <HAL_RCC_OscConfig+0x4cc>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7fe faf5 	bl	8001290 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002caa:	f7fe faf1 	bl	8001290 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e06d      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbc:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f0      	bne.n	8002caa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd0:	d108      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cd2:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	4921      	ldr	r1, [pc, #132]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce4:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a19      	ldr	r1, [r3, #32]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	491b      	ldr	r1, [pc, #108]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <HAL_RCC_OscConfig+0x4cc>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d02:	f7fe fac5 	bl	8001290 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0a:	f7fe fac1 	bl	8001290 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e03d      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d1c:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x46a>
 8002d28:	e035      	b.n	8002d96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <HAL_RCC_OscConfig+0x4cc>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fe faae 	bl	8001290 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d38:	f7fe faaa 	bl	8001290 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e026      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x498>
 8002d56:	e01e      	b.n	8002d96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e019      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40007000 	.word	0x40007000
 8002d6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_RCC_OscConfig+0x500>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d106      	bne.n	8002d92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000

08002da4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0d0      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002db8:	4b6a      	ldr	r3, [pc, #424]	; (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d910      	bls.n	8002de8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b67      	ldr	r3, [pc, #412]	; (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 0207 	bic.w	r2, r3, #7
 8002dce:	4965      	ldr	r1, [pc, #404]	; (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b63      	ldr	r3, [pc, #396]	; (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0b8      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d020      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e00:	4b59      	ldr	r3, [pc, #356]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4a58      	ldr	r2, [pc, #352]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e18:	4b53      	ldr	r3, [pc, #332]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	4a52      	ldr	r2, [pc, #328]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e24:	4b50      	ldr	r3, [pc, #320]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	494d      	ldr	r1, [pc, #308]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d040      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d115      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e07f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d107      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e62:	4b41      	ldr	r3, [pc, #260]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e073      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e72:	4b3d      	ldr	r3, [pc, #244]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e06b      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e82:	4b39      	ldr	r3, [pc, #228]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f023 0203 	bic.w	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4936      	ldr	r1, [pc, #216]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e94:	f7fe f9fc 	bl	8001290 <HAL_GetTick>
 8002e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9a:	e00a      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e9c:	f7fe f9f8 	bl	8001290 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e053      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb2:	4b2d      	ldr	r3, [pc, #180]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 020c 	and.w	r2, r3, #12
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d1eb      	bne.n	8002e9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec4:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d210      	bcs.n	8002ef4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed2:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 0207 	bic.w	r2, r3, #7
 8002eda:	4922      	ldr	r1, [pc, #136]	; (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e032      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4916      	ldr	r1, [pc, #88]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f1e:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	490e      	ldr	r1, [pc, #56]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f32:	f000 f821 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8002f36:	4602      	mov	r2, r0
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	490a      	ldr	r1, [pc, #40]	; (8002f6c <HAL_RCC_ClockConfig+0x1c8>)
 8002f44:	5ccb      	ldrb	r3, [r1, r3]
 8002f46:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4a:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <HAL_RCC_ClockConfig+0x1cc>)
 8002f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <HAL_RCC_ClockConfig+0x1d0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe f95a 	bl	800120c <HAL_InitTick>

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40022000 	.word	0x40022000
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	08006a40 	.word	0x08006a40
 8002f70:	20000000 	.word	0x20000000
 8002f74:	20000004 	.word	0x20000004

08002f78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f92:	4b1e      	ldr	r3, [pc, #120]	; (800300c <HAL_RCC_GetSysClockFreq+0x94>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d002      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x30>
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d003      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x36>
 8002fa6:	e027      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fa8:	4b19      	ldr	r3, [pc, #100]	; (8003010 <HAL_RCC_GetSysClockFreq+0x98>)
 8002faa:	613b      	str	r3, [r7, #16]
      break;
 8002fac:	e027      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	0c9b      	lsrs	r3, r3, #18
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	4a17      	ldr	r2, [pc, #92]	; (8003014 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fb8:	5cd3      	ldrb	r3, [r2, r3]
 8002fba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d010      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fc6:	4b11      	ldr	r3, [pc, #68]	; (800300c <HAL_RCC_GetSysClockFreq+0x94>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	0c5b      	lsrs	r3, r3, #17
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	4a11      	ldr	r2, [pc, #68]	; (8003018 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fd2:	5cd3      	ldrb	r3, [r2, r3]
 8002fd4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a0d      	ldr	r2, [pc, #52]	; (8003010 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fda:	fb03 f202 	mul.w	r2, r3, r2
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	e004      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a0c      	ldr	r2, [pc, #48]	; (800301c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fec:	fb02 f303 	mul.w	r3, r2, r3
 8002ff0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	613b      	str	r3, [r7, #16]
      break;
 8002ff6:	e002      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ffa:	613b      	str	r3, [r7, #16]
      break;
 8002ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ffe:	693b      	ldr	r3, [r7, #16]
}
 8003000:	4618      	mov	r0, r3
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000
 8003010:	007a1200 	.word	0x007a1200
 8003014:	08006a58 	.word	0x08006a58
 8003018:	08006a68 	.word	0x08006a68
 800301c:	003d0900 	.word	0x003d0900

08003020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003024:	4b02      	ldr	r3, [pc, #8]	; (8003030 <HAL_RCC_GetHCLKFreq+0x10>)
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr
 8003030:	20000000 	.word	0x20000000

08003034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003038:	f7ff fff2 	bl	8003020 <HAL_RCC_GetHCLKFreq>
 800303c:	4602      	mov	r2, r0
 800303e:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	4903      	ldr	r1, [pc, #12]	; (8003058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003050:	4618      	mov	r0, r3
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	08006a50 	.word	0x08006a50

0800305c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003064:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <RCC_Delay+0x34>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <RCC_Delay+0x38>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	0a5b      	lsrs	r3, r3, #9
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003078:	bf00      	nop
  }
  while (Delay --);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1e5a      	subs	r2, r3, #1
 800307e:	60fa      	str	r2, [r7, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f9      	bne.n	8003078 <RCC_Delay+0x1c>
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr
 8003090:	20000000 	.word	0x20000000
 8003094:	10624dd3 	.word	0x10624dd3

08003098 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e076      	b.n	8003198 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d108      	bne.n	80030c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ba:	d009      	beq.n	80030d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	61da      	str	r2, [r3, #28]
 80030c2:	e005      	b.n	80030d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fd fee8 	bl	8000ec0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003106:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	ea42 0103 	orr.w	r1, r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	0c1a      	lsrs	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f002 0204 	and.w	r2, r2, #4
 8003176:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	69da      	ldr	r2, [r3, #28]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003186:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_SPI_Transmit+0x22>
 80031be:	2302      	movs	r3, #2
 80031c0:	e12d      	b.n	800341e <HAL_SPI_Transmit+0x27e>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031ca:	f7fe f861 	bl	8001290 <HAL_GetTick>
 80031ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d002      	beq.n	80031e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031e0:	2302      	movs	r3, #2
 80031e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031e4:	e116      	b.n	8003414 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_SPI_Transmit+0x52>
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d102      	bne.n	80031f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031f6:	e10d      	b.n	8003414 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2203      	movs	r2, #3
 80031fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	88fa      	ldrh	r2, [r7, #6]
 8003210:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	88fa      	ldrh	r2, [r7, #6]
 8003216:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800323e:	d10f      	bne.n	8003260 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800324e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800325e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326a:	2b40      	cmp	r3, #64	; 0x40
 800326c:	d007      	beq.n	800327e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800327c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003286:	d14f      	bne.n	8003328 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <HAL_SPI_Transmit+0xf6>
 8003290:	8afb      	ldrh	r3, [r7, #22]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d142      	bne.n	800331c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	881a      	ldrh	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	1c9a      	adds	r2, r3, #2
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032ba:	e02f      	b.n	800331c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d112      	bne.n	80032f0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	881a      	ldrh	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	1c9a      	adds	r2, r3, #2
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80032ee:	e015      	b.n	800331c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032f0:	f7fd ffce 	bl	8001290 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d803      	bhi.n	8003308 <HAL_SPI_Transmit+0x168>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003306:	d102      	bne.n	800330e <HAL_SPI_Transmit+0x16e>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d106      	bne.n	800331c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800331a:	e07b      	b.n	8003414 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1ca      	bne.n	80032bc <HAL_SPI_Transmit+0x11c>
 8003326:	e050      	b.n	80033ca <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_SPI_Transmit+0x196>
 8003330:	8afb      	ldrh	r3, [r7, #22]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d144      	bne.n	80033c0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	330c      	adds	r3, #12
 8003340:	7812      	ldrb	r2, [r2, #0]
 8003342:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800335c:	e030      	b.n	80033c0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b02      	cmp	r3, #2
 800336a:	d113      	bne.n	8003394 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	7812      	ldrb	r2, [r2, #0]
 8003378:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	86da      	strh	r2, [r3, #54]	; 0x36
 8003392:	e015      	b.n	80033c0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003394:	f7fd ff7c 	bl	8001290 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d803      	bhi.n	80033ac <HAL_SPI_Transmit+0x20c>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d102      	bne.n	80033b2 <HAL_SPI_Transmit+0x212>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80033be:	e029      	b.n	8003414 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1c9      	bne.n	800335e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	6839      	ldr	r1, [r7, #0]
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f8b2 	bl	8003538 <SPI_EndRxTxTransaction>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10a      	bne.n	80033fe <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033e8:	2300      	movs	r3, #0
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e003      	b.n	8003414 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800341c:	7ffb      	ldrb	r3, [r7, #31]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3720      	adds	r7, #32
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	4613      	mov	r3, r2
 8003436:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003438:	f7fd ff2a 	bl	8001290 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	4413      	add	r3, r2
 8003446:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003448:	f7fd ff22 	bl	8001290 <HAL_GetTick>
 800344c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800344e:	4b39      	ldr	r3, [pc, #228]	; (8003534 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	015b      	lsls	r3, r3, #5
 8003454:	0d1b      	lsrs	r3, r3, #20
 8003456:	69fa      	ldr	r2, [r7, #28]
 8003458:	fb02 f303 	mul.w	r3, r2, r3
 800345c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800345e:	e054      	b.n	800350a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d050      	beq.n	800350a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003468:	f7fd ff12 	bl	8001290 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	429a      	cmp	r2, r3
 8003476:	d902      	bls.n	800347e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d13d      	bne.n	80034fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800348c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003496:	d111      	bne.n	80034bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a0:	d004      	beq.n	80034ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034aa:	d107      	bne.n	80034bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c4:	d10f      	bne.n	80034e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e017      	b.n	800352a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	3b01      	subs	r3, #1
 8003508:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4013      	ands	r3, r2
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	429a      	cmp	r2, r3
 8003518:	bf0c      	ite	eq
 800351a:	2301      	moveq	r3, #1
 800351c:	2300      	movne	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	429a      	cmp	r2, r3
 8003526:	d19b      	bne.n	8003460 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3720      	adds	r7, #32
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20000000 	.word	0x20000000

08003538 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af02      	add	r7, sp, #8
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2200      	movs	r2, #0
 800354c:	2180      	movs	r1, #128	; 0x80
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f7ff ff6a 	bl	8003428 <SPI_WaitFlagStateUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	f043 0220 	orr.w	r2, r3, #32
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e000      	b.n	800356c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <bmp280_read_calib_>:
#include "bmp280.h"
#include "math.h"
// 读取校准系数子函数
HAL_StatusTypeDef bmp280_read_calib_(I2C_HandleTypeDef *hi2c, uint16_t MemAddress, uint16_t *value)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	; 0x28
 8003578:	af04      	add	r7, sp, #16
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	460b      	mov	r3, r1
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	817b      	strh	r3, [r7, #10]
    uint8_t temp[2];
    if (HAL_I2C_Mem_Read(hi2c, (BMP280_ADDRESS_READ << 1), MemAddress, I2C_MEMADD_SIZE_8BIT, temp, 2, 5000) == HAL_OK) {
 8003582:	897a      	ldrh	r2, [r7, #10]
 8003584:	f241 3388 	movw	r3, #5000	; 0x1388
 8003588:	9302      	str	r3, [sp, #8]
 800358a:	2302      	movs	r3, #2
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	f107 0314 	add.w	r3, r7, #20
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2301      	movs	r3, #1
 8003596:	21ec      	movs	r1, #236	; 0xec
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f7fe fb65 	bl	8001c68 <HAL_I2C_Mem_Read>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10b      	bne.n	80035bc <bmp280_read_calib_+0x48>
        *value = (uint16_t)(((uint16_t)temp[1] << 8) | temp[0]);
 80035a4:	7d7b      	ldrb	r3, [r7, #21]
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	b21a      	sxth	r2, r3
 80035aa:	7d3b      	ldrb	r3, [r7, #20]
 80035ac:	b21b      	sxth	r3, r3
 80035ae:	4313      	orrs	r3, r2
 80035b0:	b21b      	sxth	r3, r3
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	801a      	strh	r2, [r3, #0]
        return HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <bmp280_read_calib_+0x4a>
    } else
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <bmp280_read_calib>:
// 读取校准系数
HAL_StatusTypeDef bmp280_read_calib(BMP280 *bmp280, I2C_HandleTypeDef *hi2c)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
    bmp280_read_calib_(hi2c, BMP280_DIG_T1_LSB, (uint16_t *)&bmp280->dig_T1);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	330c      	adds	r3, #12
 80035d4:	461a      	mov	r2, r3
 80035d6:	2188      	movs	r1, #136	; 0x88
 80035d8:	6838      	ldr	r0, [r7, #0]
 80035da:	f7ff ffcb 	bl	8003574 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_T2_LSB, (uint16_t *)&bmp280->dig_T2);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	330e      	adds	r3, #14
 80035e2:	461a      	mov	r2, r3
 80035e4:	218a      	movs	r1, #138	; 0x8a
 80035e6:	6838      	ldr	r0, [r7, #0]
 80035e8:	f7ff ffc4 	bl	8003574 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_T3_LSB, (uint16_t *)&bmp280->dig_T3);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3310      	adds	r3, #16
 80035f0:	461a      	mov	r2, r3
 80035f2:	218c      	movs	r1, #140	; 0x8c
 80035f4:	6838      	ldr	r0, [r7, #0]
 80035f6:	f7ff ffbd 	bl	8003574 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_P1_LSB, (uint16_t *)&bmp280->dig_P1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3312      	adds	r3, #18
 80035fe:	461a      	mov	r2, r3
 8003600:	218e      	movs	r1, #142	; 0x8e
 8003602:	6838      	ldr	r0, [r7, #0]
 8003604:	f7ff ffb6 	bl	8003574 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_P2_LSB, (uint16_t *)&bmp280->dig_P2);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3314      	adds	r3, #20
 800360c:	461a      	mov	r2, r3
 800360e:	2190      	movs	r1, #144	; 0x90
 8003610:	6838      	ldr	r0, [r7, #0]
 8003612:	f7ff ffaf 	bl	8003574 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_P3_LSB, (uint16_t *)&bmp280->dig_P3);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3316      	adds	r3, #22
 800361a:	461a      	mov	r2, r3
 800361c:	2192      	movs	r1, #146	; 0x92
 800361e:	6838      	ldr	r0, [r7, #0]
 8003620:	f7ff ffa8 	bl	8003574 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_P4_LSB, (uint16_t *)&bmp280->dig_P4);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3318      	adds	r3, #24
 8003628:	461a      	mov	r2, r3
 800362a:	2194      	movs	r1, #148	; 0x94
 800362c:	6838      	ldr	r0, [r7, #0]
 800362e:	f7ff ffa1 	bl	8003574 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_P5_LSB, (uint16_t *)&bmp280->dig_P5);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	331a      	adds	r3, #26
 8003636:	461a      	mov	r2, r3
 8003638:	2196      	movs	r1, #150	; 0x96
 800363a:	6838      	ldr	r0, [r7, #0]
 800363c:	f7ff ff9a 	bl	8003574 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_P6_LSB, (uint16_t *)&bmp280->dig_P6);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	331c      	adds	r3, #28
 8003644:	461a      	mov	r2, r3
 8003646:	2198      	movs	r1, #152	; 0x98
 8003648:	6838      	ldr	r0, [r7, #0]
 800364a:	f7ff ff93 	bl	8003574 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_P7_LSB, (uint16_t *)&bmp280->dig_P7);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	331e      	adds	r3, #30
 8003652:	461a      	mov	r2, r3
 8003654:	219a      	movs	r1, #154	; 0x9a
 8003656:	6838      	ldr	r0, [r7, #0]
 8003658:	f7ff ff8c 	bl	8003574 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_P8_LSB, (uint16_t *)&bmp280->dig_P8);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3320      	adds	r3, #32
 8003660:	461a      	mov	r2, r3
 8003662:	219c      	movs	r1, #156	; 0x9c
 8003664:	6838      	ldr	r0, [r7, #0]
 8003666:	f7ff ff85 	bl	8003574 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_P9_LSB, (uint16_t *)&bmp280->dig_P9);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3322      	adds	r3, #34	; 0x22
 800366e:	461a      	mov	r2, r3
 8003670:	219e      	movs	r1, #158	; 0x9e
 8003672:	6838      	ldr	r0, [r7, #0]
 8003674:	f7ff ff7e 	bl	8003574 <bmp280_read_calib_>
    return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <bmp280_init>:
// bmp280初始化
HAL_StatusTypeDef bmp280_init(BMP280 *bmp280, I2C_HandleTypeDef *hi2c)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b088      	sub	sp, #32
 8003686:	af04      	add	r7, sp, #16
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
    uint8_t temp = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &temp, 1, 5000);
 8003690:	f241 3388 	movw	r3, #5000	; 0x1388
 8003694:	9302      	str	r3, [sp, #8]
 8003696:	2301      	movs	r3, #1
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	f107 030f 	add.w	r3, r7, #15
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	2301      	movs	r3, #1
 80036a2:	22d0      	movs	r2, #208	; 0xd0
 80036a4:	21ec      	movs	r1, #236	; 0xec
 80036a6:	6838      	ldr	r0, [r7, #0]
 80036a8:	f7fe fade 	bl	8001c68 <HAL_I2C_Mem_Read>
    if (temp != 0x58) // 未识别到芯片，报错
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	2b58      	cmp	r3, #88	; 0x58
 80036b0:	d001      	beq.n	80036b6 <bmp280_init+0x34>
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e053      	b.n	800375e <bmp280_init+0xdc>
    // 识别到芯片，先重置
    temp = 0xB6;
 80036b6:	23b6      	movs	r3, #182	; 0xb6
 80036b8:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_RESET, I2C_MEMADD_SIZE_8BIT, &temp, 1, 10000) != HAL_OK)
 80036ba:	f242 7310 	movw	r3, #10000	; 0x2710
 80036be:	9302      	str	r3, [sp, #8]
 80036c0:	2301      	movs	r3, #1
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	f107 030f 	add.w	r3, r7, #15
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	2301      	movs	r3, #1
 80036cc:	22e0      	movs	r2, #224	; 0xe0
 80036ce:	21ec      	movs	r1, #236	; 0xec
 80036d0:	6838      	ldr	r0, [r7, #0]
 80036d2:	f7fe f9cf 	bl	8001a74 <HAL_I2C_Mem_Write>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <bmp280_init+0x5e>
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e03e      	b.n	800375e <bmp280_init+0xdc>
            break;
        case 5:
            temp = BMP280_MODE_5_CTRL;
            break;
        case 6:
            temp = BMP280_MODE_6_CTRL;
 80036e0:	2357      	movs	r3, #87	; 0x57
 80036e2:	73fb      	strb	r3, [r7, #15]
            break;
 80036e4:	bf00      	nop
        default:
            return HAL_ERROR;
    }
    if (HAL_I2C_Mem_Write(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &temp, 1, 10000) != HAL_OK)
 80036e6:	f242 7310 	movw	r3, #10000	; 0x2710
 80036ea:	9302      	str	r3, [sp, #8]
 80036ec:	2301      	movs	r3, #1
 80036ee:	9301      	str	r3, [sp, #4]
 80036f0:	f107 030f 	add.w	r3, r7, #15
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	2301      	movs	r3, #1
 80036f8:	22f4      	movs	r2, #244	; 0xf4
 80036fa:	21ec      	movs	r1, #236	; 0xec
 80036fc:	6838      	ldr	r0, [r7, #0]
 80036fe:	f7fe f9b9 	bl	8001a74 <HAL_I2C_Mem_Write>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <bmp280_init+0x8a>
        return HAL_ERROR; // 写入失败
 8003708:	2301      	movs	r3, #1
 800370a:	e028      	b.n	800375e <bmp280_init+0xdc>
    HAL_Delay(100);
 800370c:	2064      	movs	r0, #100	; 0x64
 800370e:	f7fd fdc9 	bl	80012a4 <HAL_Delay>
            break;
        case 5:
            temp = BMP280_MODE_5_CONFIG;
            break;
        case 6:
            temp = BMP280_MODE_6_CONFIG;
 8003712:	2314      	movs	r3, #20
 8003714:	73fb      	strb	r3, [r7, #15]
            break;
 8003716:	bf00      	nop
        default:
            return HAL_ERROR;
    }
    if (HAL_I2C_Mem_Write(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_CONFIG, I2C_MEMADD_SIZE_8BIT, &temp, 1, 10000) != HAL_OK)
 8003718:	f242 7310 	movw	r3, #10000	; 0x2710
 800371c:	9302      	str	r3, [sp, #8]
 800371e:	2301      	movs	r3, #1
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	f107 030f 	add.w	r3, r7, #15
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	2301      	movs	r3, #1
 800372a:	22f5      	movs	r2, #245	; 0xf5
 800372c:	21ec      	movs	r1, #236	; 0xec
 800372e:	6838      	ldr	r0, [r7, #0]
 8003730:	f7fe f9a0 	bl	8001a74 <HAL_I2C_Mem_Write>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <bmp280_init+0xbc>
        return HAL_ERROR; // 写入失败
 800373a:	2301      	movs	r3, #1
 800373c:	e00f      	b.n	800375e <bmp280_init+0xdc>
    HAL_Delay(100);
 800373e:	2064      	movs	r0, #100	; 0x64
 8003740:	f7fd fdb0 	bl	80012a4 <HAL_Delay>
    if (bmp280_read_calib(bmp280, hi2c) != HAL_OK)
 8003744:	6839      	ldr	r1, [r7, #0]
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff ff3d 	bl	80035c6 <bmp280_read_calib>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <bmp280_init+0xd4>
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e003      	b.n	800375e <bmp280_init+0xdc>
    HAL_Delay(100);
 8003756:	2064      	movs	r0, #100	; 0x64
 8003758:	f7fd fda4 	bl	80012a4 <HAL_Delay>
    return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <bmp280_compensate_T_int32>:
// 转换温度采样值
float bmp280_compensate_T_int32(BMP280 *bmp280, int32_t t_raw)
{
 8003768:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800376c:	b088      	sub	sp, #32
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]
    double var1, var2, T;
    var1           = (((double)t_raw) / 16384.0f - ((double)bmp280->dig_T1) / 1024.0f) * ((double)bmp280->dig_T2);
 8003774:	6838      	ldr	r0, [r7, #0]
 8003776:	f7fc fe45 	bl	8000404 <__aeabi_i2d>
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	4b50      	ldr	r3, [pc, #320]	; (80038c0 <bmp280_compensate_T_int32+0x158>)
 8003780:	f7fc ffd4 	bl	800072c <__aeabi_ddiv>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4614      	mov	r4, r2
 800378a:	461d      	mov	r5, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	899b      	ldrh	r3, [r3, #12]
 8003790:	4618      	mov	r0, r3
 8003792:	f7fc fe27 	bl	80003e4 <__aeabi_ui2d>
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	4b4a      	ldr	r3, [pc, #296]	; (80038c4 <bmp280_compensate_T_int32+0x15c>)
 800379c:	f7fc ffc6 	bl	800072c <__aeabi_ddiv>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4620      	mov	r0, r4
 80037a6:	4629      	mov	r1, r5
 80037a8:	f7fc fcde 	bl	8000168 <__aeabi_dsub>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4614      	mov	r4, r2
 80037b2:	461d      	mov	r5, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fc fe22 	bl	8000404 <__aeabi_i2d>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4620      	mov	r0, r4
 80037c6:	4629      	mov	r1, r5
 80037c8:	f7fc fe86 	bl	80004d8 <__aeabi_dmul>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2           = ((((double)t_raw) / 131072.0f - ((double)bmp280->dig_T1) / 8192.0f) * (((double)t_raw) / 131072.0f - ((double)bmp280->dig_T1) / 8192.0f)) * ((double)bmp280->dig_T3);
 80037d4:	6838      	ldr	r0, [r7, #0]
 80037d6:	f7fc fe15 	bl	8000404 <__aeabi_i2d>
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80037e2:	f7fc ffa3 	bl	800072c <__aeabi_ddiv>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4614      	mov	r4, r2
 80037ec:	461d      	mov	r5, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	899b      	ldrh	r3, [r3, #12]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fc fdf6 	bl	80003e4 <__aeabi_ui2d>
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	4b32      	ldr	r3, [pc, #200]	; (80038c8 <bmp280_compensate_T_int32+0x160>)
 80037fe:	f7fc ff95 	bl	800072c <__aeabi_ddiv>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4620      	mov	r0, r4
 8003808:	4629      	mov	r1, r5
 800380a:	f7fc fcad 	bl	8000168 <__aeabi_dsub>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4614      	mov	r4, r2
 8003814:	461d      	mov	r5, r3
 8003816:	6838      	ldr	r0, [r7, #0]
 8003818:	f7fc fdf4 	bl	8000404 <__aeabi_i2d>
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8003824:	f7fc ff82 	bl	800072c <__aeabi_ddiv>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4690      	mov	r8, r2
 800382e:	4699      	mov	r9, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	899b      	ldrh	r3, [r3, #12]
 8003834:	4618      	mov	r0, r3
 8003836:	f7fc fdd5 	bl	80003e4 <__aeabi_ui2d>
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <bmp280_compensate_T_int32+0x160>)
 8003840:	f7fc ff74 	bl	800072c <__aeabi_ddiv>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4640      	mov	r0, r8
 800384a:	4649      	mov	r1, r9
 800384c:	f7fc fc8c 	bl	8000168 <__aeabi_dsub>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4620      	mov	r0, r4
 8003856:	4629      	mov	r1, r5
 8003858:	f7fc fe3e 	bl	80004d8 <__aeabi_dmul>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4614      	mov	r4, r2
 8003862:	461d      	mov	r5, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800386a:	4618      	mov	r0, r3
 800386c:	f7fc fdca 	bl	8000404 <__aeabi_i2d>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4620      	mov	r0, r4
 8003876:	4629      	mov	r1, r5
 8003878:	f7fc fe2e 	bl	80004d8 <__aeabi_dmul>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	e9c7 2304 	strd	r2, r3, [r7, #16]
    // bmp280->t_fine = (int32_t)(var1 + var2);
    T              = (var1 + var2) / 5120.0f;
 8003884:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003888:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800388c:	f7fc fc6e 	bl	800016c <__adddf3>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4610      	mov	r0, r2
 8003896:	4619      	mov	r1, r3
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <bmp280_compensate_T_int32+0x164>)
 800389e:	f7fc ff45 	bl	800072c <__aeabi_ddiv>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return T;
 80038aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038ae:	f7fd f8eb 	bl	8000a88 <__aeabi_d2f>
 80038b2:	4603      	mov	r3, r0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3720      	adds	r7, #32
 80038b8:	46bd      	mov	sp, r7
 80038ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038be:	bf00      	nop
 80038c0:	40d00000 	.word	0x40d00000
 80038c4:	40900000 	.word	0x40900000
 80038c8:	40c00000 	.word	0x40c00000
 80038cc:	40b40000 	.word	0x40b40000

080038d0 <bmp280_getTemprature>:
    p    = p / 100.0f;
    return p;
}
// 返回实际温度（℃）
float bmp280_getTemprature(BMP280 *bmp280, I2C_HandleTypeDef *hi2c)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af04      	add	r7, sp, #16
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
    uint8_t temp[3];
    HAL_I2C_Mem_Read(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_TEMPERATURE_MSB, I2C_MEMADD_SIZE_8BIT, &temp[0], 1, 1000);
 80038da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038de:	9302      	str	r3, [sp, #8]
 80038e0:	2301      	movs	r3, #1
 80038e2:	9301      	str	r3, [sp, #4]
 80038e4:	f107 0308 	add.w	r3, r7, #8
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	2301      	movs	r3, #1
 80038ec:	22fa      	movs	r2, #250	; 0xfa
 80038ee:	21ec      	movs	r1, #236	; 0xec
 80038f0:	6838      	ldr	r0, [r7, #0]
 80038f2:	f7fe f9b9 	bl	8001c68 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_TEMPERATURE_LSB, I2C_MEMADD_SIZE_8BIT, &temp[1], 1, 1000);
 80038f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038fa:	9302      	str	r3, [sp, #8]
 80038fc:	2301      	movs	r3, #1
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	f107 0308 	add.w	r3, r7, #8
 8003904:	3301      	adds	r3, #1
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	2301      	movs	r3, #1
 800390a:	22fb      	movs	r2, #251	; 0xfb
 800390c:	21ec      	movs	r1, #236	; 0xec
 800390e:	6838      	ldr	r0, [r7, #0]
 8003910:	f7fe f9aa 	bl	8001c68 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_TEMPERATURE_XLSB, I2C_MEMADD_SIZE_8BIT, &temp[2], 1, 1000);
 8003914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003918:	9302      	str	r3, [sp, #8]
 800391a:	2301      	movs	r3, #1
 800391c:	9301      	str	r3, [sp, #4]
 800391e:	f107 0308 	add.w	r3, r7, #8
 8003922:	3302      	adds	r3, #2
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	2301      	movs	r3, #1
 8003928:	22fc      	movs	r2, #252	; 0xfc
 800392a:	21ec      	movs	r1, #236	; 0xec
 800392c:	6838      	ldr	r0, [r7, #0]
 800392e:	f7fe f99b 	bl	8001c68 <HAL_I2C_Mem_Read>
    int32_t t_raw    = (((int32_t)temp[0]) << 12) | (((int32_t)temp[1]) << 4) | (((int32_t)temp[2]) >> 4);
 8003932:	7a3b      	ldrb	r3, [r7, #8]
 8003934:	031a      	lsls	r2, r3, #12
 8003936:	7a7b      	ldrb	r3, [r7, #9]
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	4313      	orrs	r3, r2
 800393c:	7aba      	ldrb	r2, [r7, #10]
 800393e:	0912      	lsrs	r2, r2, #4
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
    // bmp280->t_result = bmp280_compensate_T_int32(bmp280, t_raw);
    return bmp280_compensate_T_int32(bmp280, t_raw);
 8003946:	68f9      	ldr	r1, [r7, #12]
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff ff0d 	bl	8003768 <bmp280_compensate_T_int32>
 800394e:	4603      	mov	r3, r0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <OLED_WR_Byte>:
//向SSD1306写入一个字节
//dat:要写入的数据/命令
//cmd:数据/命令标志 0，表示命令；1，表示数据

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{				  
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	460a      	mov	r2, r1
 8003962:	71fb      	strb	r3, [r7, #7]
 8003964:	4613      	mov	r3, r2
 8003966:	71bb      	strb	r3, [r7, #6]
	if(cmd)
 8003968:	79bb      	ldrb	r3, [r7, #6]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <OLED_WR_Byte+0x22>
	{
		OLED_DC_Set();//命令/数据标志位置为1，则表示传送的是命令字节
 800396e:	2201      	movs	r2, #1
 8003970:	2108      	movs	r1, #8
 8003972:	4811      	ldr	r0, [pc, #68]	; (80039b8 <OLED_WR_Byte+0x60>)
 8003974:	f7fd ff22 	bl	80017bc <HAL_GPIO_WritePin>
 8003978:	e004      	b.n	8003984 <OLED_WR_Byte+0x2c>
	}
	  
	else
	OLED_DC_Clr();//命令/数据标志位置为0，则表示传送的是数据字节		  
 800397a:	2200      	movs	r2, #0
 800397c:	2108      	movs	r1, #8
 800397e:	480e      	ldr	r0, [pc, #56]	; (80039b8 <OLED_WR_Byte+0x60>)
 8003980:	f7fd ff1c 	bl	80017bc <HAL_GPIO_WritePin>
	  OLED_CS_Clr();//片选信号为低，表示选中OLED
 8003984:	2200      	movs	r2, #0
 8003986:	2104      	movs	r1, #4
 8003988:	480b      	ldr	r0, [pc, #44]	; (80039b8 <OLED_WR_Byte+0x60>)
 800398a:	f7fd ff17 	bl	80017bc <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1,&dat,1,1000);//oled.c文件唯一修改的地方，这里是利用了hal库提供的SPI传送函数
 800398e:	1df9      	adds	r1, r7, #7
 8003990:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003994:	2201      	movs	r2, #1
 8003996:	4809      	ldr	r0, [pc, #36]	; (80039bc <OLED_WR_Byte+0x64>)
 8003998:	f7ff fc02 	bl	80031a0 <HAL_SPI_Transmit>
	  OLED_CS_Set();
 800399c:	2201      	movs	r2, #1
 800399e:	2104      	movs	r1, #4
 80039a0:	4805      	ldr	r0, [pc, #20]	; (80039b8 <OLED_WR_Byte+0x60>)
 80039a2:	f7fd ff0b 	bl	80017bc <HAL_GPIO_WritePin>
	  OLED_DC_Set();	  
 80039a6:	2201      	movs	r2, #1
 80039a8:	2108      	movs	r1, #8
 80039aa:	4803      	ldr	r0, [pc, #12]	; (80039b8 <OLED_WR_Byte+0x60>)
 80039ac:	f7fd ff06 	bl	80017bc <HAL_GPIO_WritePin>
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40010800 	.word	0x40010800
 80039bc:	2000035c 	.word	0x2000035c

080039c0 <OLED_Set_Pos>:

	void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	460a      	mov	r2, r1
 80039ca:	71fb      	strb	r3, [r7, #7]
 80039cc:	4613      	mov	r3, r2
 80039ce:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0+y,OLED_CMD);
 80039d0:	79bb      	ldrb	r3, [r7, #6]
 80039d2:	3b50      	subs	r3, #80	; 0x50
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ffbd 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte((((x+2)&0xf0)>>4)|0x10,OLED_CMD);
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	3302      	adds	r3, #2
 80039e2:	111b      	asrs	r3, r3, #4
 80039e4:	b25b      	sxtb	r3, r3
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	b25b      	sxtb	r3, r3
 80039ec:	f043 0310 	orr.w	r3, r3, #16
 80039f0:	b25b      	sxtb	r3, r3
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff ffae 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(((x+2)&0x0f),OLED_CMD); 
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	3302      	adds	r3, #2
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff ffa4 	bl	8003958 <OLED_WR_Byte>
}    	  
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <OLED_Clear>:
/**
 * @brief 清屏
 * 
 */
void OLED_Clear(void)  
{  
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8003a1e:	2300      	movs	r3, #0
 8003a20:	71fb      	strb	r3, [r7, #7]
 8003a22:	e01f      	b.n	8003a64 <OLED_Clear+0x4c>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	3b50      	subs	r3, #80	; 0x50
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ff93 	bl	8003958 <OLED_WR_Byte>
		OLED_WR_Byte (0x02,OLED_CMD);      //设置起始列低地址
 8003a32:	2100      	movs	r1, #0
 8003a34:	2002      	movs	r0, #2
 8003a36:	f7ff ff8f 	bl	8003958 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置起始列高地址   
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	2010      	movs	r0, #16
 8003a3e:	f7ff ff8b 	bl	8003958 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 8003a42:	2300      	movs	r3, #0
 8003a44:	71bb      	strb	r3, [r7, #6]
 8003a46:	e006      	b.n	8003a56 <OLED_Clear+0x3e>
 8003a48:	2101      	movs	r1, #1
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	f7ff ff84 	bl	8003958 <OLED_WR_Byte>
 8003a50:	79bb      	ldrb	r3, [r7, #6]
 8003a52:	3301      	adds	r3, #1
 8003a54:	71bb      	strb	r3, [r7, #6]
 8003a56:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	daf4      	bge.n	8003a48 <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	3301      	adds	r3, #1
 8003a62:	71fb      	strb	r3, [r7, #7]
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	2b07      	cmp	r3, #7
 8003a68:	d9dc      	bls.n	8003a24 <OLED_Clear+0xc>
	} //更新显示
}
 8003a6a:	bf00      	nop
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <OLED_ShowChar>:
 * @param x x轴起始坐标
 * @param y y轴起始坐标
 * @param chr 显示的字符
 */
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr)
{      	
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	71fb      	strb	r3, [r7, #7]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	71bb      	strb	r3, [r7, #6]
 8003a82:	4613      	mov	r3, r2
 8003a84:	717b      	strb	r3, [r7, #5]
	unsigned char c=0,i=0;	
 8003a86:	2300      	movs	r3, #0
 8003a88:	73bb      	strb	r3, [r7, #14]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//得到偏移后的值			
 8003a8e:	797b      	ldrb	r3, [r7, #5]
 8003a90:	3b20      	subs	r3, #32
 8003a92:	73bb      	strb	r3, [r7, #14]
		if(x>Max_Column-1){x=0;y=y+2;}
 8003a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	da04      	bge.n	8003aa6 <OLED_ShowChar+0x32>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	71fb      	strb	r3, [r7, #7]
 8003aa0:	79bb      	ldrb	r3, [r7, #6]
 8003aa2:	3302      	adds	r3, #2
 8003aa4:	71bb      	strb	r3, [r7, #6]
		if(SIZE ==16)
			{
			OLED_Set_Pos(x,y);	
 8003aa6:	79ba      	ldrb	r2, [r7, #6]
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ff87 	bl	80039c0 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73fb      	strb	r3, [r7, #15]
 8003ab6:	e00c      	b.n	8003ad2 <OLED_ShowChar+0x5e>
			OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 8003ab8:	7bbb      	ldrb	r3, [r7, #14]
 8003aba:	011a      	lsls	r2, r3, #4
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
 8003abe:	4413      	add	r3, r2
 8003ac0:	4a16      	ldr	r2, [pc, #88]	; (8003b1c <OLED_ShowChar+0xa8>)
 8003ac2:	5cd3      	ldrb	r3, [r2, r3]
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff ff46 	bl	8003958 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	2b07      	cmp	r3, #7
 8003ad6:	d9ef      	bls.n	8003ab8 <OLED_ShowChar+0x44>
			OLED_Set_Pos(x,y+1);
 8003ad8:	79bb      	ldrb	r3, [r7, #6]
 8003ada:	3301      	adds	r3, #1
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff ff6c 	bl	80039c0 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	73fb      	strb	r3, [r7, #15]
 8003aec:	e00d      	b.n	8003b0a <OLED_ShowChar+0x96>
			OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 8003aee:	7bbb      	ldrb	r3, [r7, #14]
 8003af0:	011a      	lsls	r2, r3, #4
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	4413      	add	r3, r2
 8003af6:	3308      	adds	r3, #8
 8003af8:	4a08      	ldr	r2, [pc, #32]	; (8003b1c <OLED_ShowChar+0xa8>)
 8003afa:	5cd3      	ldrb	r3, [r2, r3]
 8003afc:	2101      	movs	r1, #1
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff ff2a 	bl	8003958 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	3301      	adds	r3, #1
 8003b08:	73fb      	strb	r3, [r7, #15]
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	2b07      	cmp	r3, #7
 8003b0e:	d9ee      	bls.n	8003aee <OLED_ShowChar+0x7a>
				OLED_Set_Pos(x,y+1);
				for(i=0;i<6;i++)
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
				
			}
}
 8003b10:	bf00      	nop
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	08006a6c 	.word	0x08006a6c

08003b20 <OLED_ShowString>:
 * @param x x轴起始坐标
 * @param y y轴起始坐标
 * @param chr 单个字符
 */
void OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	603a      	str	r2, [r7, #0]
 8003b2a:	71fb      	strb	r3, [r7, #7]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	71bb      	strb	r3, [r7, #6]
	unsigned char j=0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8003b34:	e016      	b.n	8003b64 <OLED_ShowString+0x44>
	{		OLED_ShowChar(x,y,chr[j]);
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	781a      	ldrb	r2, [r3, #0]
 8003b3e:	79b9      	ldrb	r1, [r7, #6]
 8003b40:	79fb      	ldrb	r3, [r7, #7]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff ff96 	bl	8003a74 <OLED_ShowChar>
			x+=8;
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	3308      	adds	r3, #8
 8003b4c:	71fb      	strb	r3, [r7, #7]
		if(x>120){x=0;y+=2;}
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	2b78      	cmp	r3, #120	; 0x78
 8003b52:	d904      	bls.n	8003b5e <OLED_ShowString+0x3e>
 8003b54:	2300      	movs	r3, #0
 8003b56:	71fb      	strb	r3, [r7, #7]
 8003b58:	79bb      	ldrb	r3, [r7, #6]
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	71bb      	strb	r3, [r7, #6]
			j++;
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	3301      	adds	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	4413      	add	r3, r2
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e2      	bne.n	8003b36 <OLED_ShowString+0x16>
	}
}
 8003b70:	bf00      	nop
 8003b72:	bf00      	nop
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <OLED_ShowCHinese>:
 * @param x 
 * @param y 
 * @param no 
 */
void OLED_ShowCHinese(uint8_t x,uint8_t y,uint8_t no)
{      			    
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
 8003b86:	460b      	mov	r3, r1
 8003b88:	71bb      	strb	r3, [r7, #6]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	717b      	strb	r3, [r7, #5]
	uint8_t t,adder=0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	73bb      	strb	r3, [r7, #14]
	OLED_Set_Pos(x,y);	
 8003b92:	79ba      	ldrb	r2, [r7, #6]
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	4611      	mov	r1, r2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff ff11 	bl	80039c0 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	73fb      	strb	r3, [r7, #15]
 8003ba2:	e011      	b.n	8003bc8 <OLED_ShowCHinese+0x4c>
		{
				OLED_WR_Byte(Hzk[2*no][t],OLED_DATA);
 8003ba4:	797b      	ldrb	r3, [r7, #5]
 8003ba6:	005a      	lsls	r2, r3, #1
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	491c      	ldr	r1, [pc, #112]	; (8003c1c <OLED_ShowCHinese+0xa0>)
 8003bac:	0152      	lsls	r2, r2, #5
 8003bae:	440a      	add	r2, r1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff fece 	bl	8003958 <OLED_WR_Byte>
				adder+=1;
 8003bbc:	7bbb      	ldrb	r3, [r7, #14]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	2b0f      	cmp	r3, #15
 8003bcc:	d9ea      	bls.n	8003ba4 <OLED_ShowCHinese+0x28>
     }	
		OLED_Set_Pos(x,y+1);	
 8003bce:	79bb      	ldrb	r3, [r7, #6]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff fef1 	bl	80039c0 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]
 8003be2:	e012      	b.n	8003c0a <OLED_ShowCHinese+0x8e>
			{	
				OLED_WR_Byte(Hzk[2*no+1][t],OLED_DATA);
 8003be4:	797b      	ldrb	r3, [r7, #5]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	490b      	ldr	r1, [pc, #44]	; (8003c1c <OLED_ShowCHinese+0xa0>)
 8003bee:	0152      	lsls	r2, r2, #5
 8003bf0:	440a      	add	r2, r1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff fead 	bl	8003958 <OLED_WR_Byte>
				adder+=1;
 8003bfe:	7bbb      	ldrb	r3, [r7, #14]
 8003c00:	3301      	adds	r3, #1
 8003c02:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	3301      	adds	r3, #1
 8003c08:	73fb      	strb	r3, [r7, #15]
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2b0f      	cmp	r3, #15
 8003c0e:	d9e9      	bls.n	8003be4 <OLED_ShowCHinese+0x68>
      }					
}
 8003c10:	bf00      	nop
 8003c12:	bf00      	nop
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	2000000c 	.word	0x2000000c

08003c20 <OLED_Init>:
/**
 * @brief 初始化SSD1306
 * 
 */
void OLED_Init(void)
{ 	
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
	
	OLED_RST_Clr();
 8003c24:	2200      	movs	r2, #0
 8003c26:	2110      	movs	r1, #16
 8003c28:	4841      	ldr	r0, [pc, #260]	; (8003d30 <OLED_Init+0x110>)
 8003c2a:	f7fd fdc7 	bl	80017bc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8003c2e:	20c8      	movs	r0, #200	; 0xc8
 8003c30:	f7fd fb38 	bl	80012a4 <HAL_Delay>
	OLED_RST_Set(); 
 8003c34:	2201      	movs	r2, #1
 8003c36:	2110      	movs	r1, #16
 8003c38:	483d      	ldr	r0, [pc, #244]	; (8003d30 <OLED_Init+0x110>)
 8003c3a:	f7fd fdbf 	bl	80017bc <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
 8003c3e:	2100      	movs	r1, #0
 8003c40:	20ae      	movs	r0, #174	; 0xae
 8003c42:	f7ff fe89 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//---set low column address
 8003c46:	2100      	movs	r1, #0
 8003c48:	2002      	movs	r0, #2
 8003c4a:	f7ff fe85 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 8003c4e:	2100      	movs	r1, #0
 8003c50:	2010      	movs	r0, #16
 8003c52:	f7ff fe81 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8003c56:	2100      	movs	r1, #0
 8003c58:	2040      	movs	r0, #64	; 0x40
 8003c5a:	f7ff fe7d 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
 8003c5e:	2100      	movs	r1, #0
 8003c60:	2081      	movs	r0, #129	; 0x81
 8003c62:	f7ff fe79 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF,OLED_CMD); // Set SEG Output Current Brightness
 8003c66:	2100      	movs	r1, #0
 8003c68:	20cf      	movs	r0, #207	; 0xcf
 8003c6a:	f7ff fe75 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0Xa0左右反置 0Xa1正常
 8003c6e:	2100      	movs	r1, #0
 8003c70:	20a1      	movs	r0, #161	; 0xa1
 8003c72:	f7ff fe71 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0Xc0上下反置 0Xc8正常
 8003c76:	2100      	movs	r1, #0
 8003c78:	20c8      	movs	r0, #200	; 0xc8
 8003c7a:	f7ff fe6d 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
 8003c7e:	2100      	movs	r1, #0
 8003c80:	20a6      	movs	r0, #166	; 0xa6
 8003c82:	f7ff fe69 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 8003c86:	2100      	movs	r1, #0
 8003c88:	20a8      	movs	r0, #168	; 0xa8
 8003c8a:	f7ff fe65 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
 8003c8e:	2100      	movs	r1, #0
 8003c90:	203f      	movs	r0, #63	; 0x3f
 8003c92:	f7ff fe61 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8003c96:	2100      	movs	r1, #0
 8003c98:	20d3      	movs	r0, #211	; 0xd3
 8003c9a:	f7ff fe5d 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//-not offset
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	f7ff fe59 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	20d5      	movs	r0, #213	; 0xd5
 8003caa:	f7ff fe55 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
 8003cae:	2100      	movs	r1, #0
 8003cb0:	2080      	movs	r0, #128	; 0x80
 8003cb2:	f7ff fe51 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	20d9      	movs	r0, #217	; 0xd9
 8003cba:	f7ff fe4d 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	20f1      	movs	r0, #241	; 0xf1
 8003cc2:	f7ff fe49 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	20da      	movs	r0, #218	; 0xda
 8003cca:	f7ff fe45 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);
 8003cce:	2100      	movs	r1, #0
 8003cd0:	2012      	movs	r0, #18
 8003cd2:	f7ff fe41 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	20db      	movs	r0, #219	; 0xdb
 8003cda:	f7ff fe3d 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level
 8003cde:	2100      	movs	r1, #0
 8003ce0:	2040      	movs	r0, #64	; 0x40
 8003ce2:	f7ff fe39 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	2020      	movs	r0, #32
 8003cea:	f7ff fe35 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//
 8003cee:	2100      	movs	r1, #0
 8003cf0:	2002      	movs	r0, #2
 8003cf2:	f7ff fe31 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	208d      	movs	r0, #141	; 0x8d
 8003cfa:	f7ff fe2d 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
 8003cfe:	2100      	movs	r1, #0
 8003d00:	2014      	movs	r0, #20
 8003d02:	f7ff fe29 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5)
 8003d06:	2100      	movs	r1, #0
 8003d08:	20a4      	movs	r0, #164	; 0xa4
 8003d0a:	f7ff fe25 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7) 
 8003d0e:	2100      	movs	r1, #0
 8003d10:	20a6      	movs	r0, #166	; 0xa6
 8003d12:	f7ff fe21 	bl	8003958 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 8003d16:	2100      	movs	r1, #0
 8003d18:	20af      	movs	r0, #175	; 0xaf
 8003d1a:	f7ff fe1d 	bl	8003958 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xAF,OLED_CMD); /*display ON*/ 
 8003d1e:	2100      	movs	r1, #0
 8003d20:	20af      	movs	r0, #175	; 0xaf
 8003d22:	f7ff fe19 	bl	8003958 <OLED_WR_Byte>
	OLED_Clear();
 8003d26:	f7ff fe77 	bl	8003a18 <OLED_Clear>
}  
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40010800 	.word	0x40010800

08003d34 <__cvt>:
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d3a:	461f      	mov	r7, r3
 8003d3c:	bfbb      	ittet	lt
 8003d3e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003d42:	461f      	movlt	r7, r3
 8003d44:	2300      	movge	r3, #0
 8003d46:	232d      	movlt	r3, #45	; 0x2d
 8003d48:	b088      	sub	sp, #32
 8003d4a:	4614      	mov	r4, r2
 8003d4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003d4e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003d50:	7013      	strb	r3, [r2, #0]
 8003d52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003d54:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003d58:	f023 0820 	bic.w	r8, r3, #32
 8003d5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d60:	d005      	beq.n	8003d6e <__cvt+0x3a>
 8003d62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003d66:	d100      	bne.n	8003d6a <__cvt+0x36>
 8003d68:	3501      	adds	r5, #1
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e000      	b.n	8003d70 <__cvt+0x3c>
 8003d6e:	2303      	movs	r3, #3
 8003d70:	aa07      	add	r2, sp, #28
 8003d72:	9204      	str	r2, [sp, #16]
 8003d74:	aa06      	add	r2, sp, #24
 8003d76:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003d7a:	e9cd 3500 	strd	r3, r5, [sp]
 8003d7e:	4622      	mov	r2, r4
 8003d80:	463b      	mov	r3, r7
 8003d82:	f000 fe71 	bl	8004a68 <_dtoa_r>
 8003d86:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003d8a:	4606      	mov	r6, r0
 8003d8c:	d102      	bne.n	8003d94 <__cvt+0x60>
 8003d8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d90:	07db      	lsls	r3, r3, #31
 8003d92:	d522      	bpl.n	8003dda <__cvt+0xa6>
 8003d94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d98:	eb06 0905 	add.w	r9, r6, r5
 8003d9c:	d110      	bne.n	8003dc0 <__cvt+0x8c>
 8003d9e:	7833      	ldrb	r3, [r6, #0]
 8003da0:	2b30      	cmp	r3, #48	; 0x30
 8003da2:	d10a      	bne.n	8003dba <__cvt+0x86>
 8003da4:	2200      	movs	r2, #0
 8003da6:	2300      	movs	r3, #0
 8003da8:	4620      	mov	r0, r4
 8003daa:	4639      	mov	r1, r7
 8003dac:	f7fc fdfc 	bl	80009a8 <__aeabi_dcmpeq>
 8003db0:	b918      	cbnz	r0, 8003dba <__cvt+0x86>
 8003db2:	f1c5 0501 	rsb	r5, r5, #1
 8003db6:	f8ca 5000 	str.w	r5, [sl]
 8003dba:	f8da 3000 	ldr.w	r3, [sl]
 8003dbe:	4499      	add	r9, r3
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	4639      	mov	r1, r7
 8003dc8:	f7fc fdee 	bl	80009a8 <__aeabi_dcmpeq>
 8003dcc:	b108      	cbz	r0, 8003dd2 <__cvt+0x9e>
 8003dce:	f8cd 901c 	str.w	r9, [sp, #28]
 8003dd2:	2230      	movs	r2, #48	; 0x30
 8003dd4:	9b07      	ldr	r3, [sp, #28]
 8003dd6:	454b      	cmp	r3, r9
 8003dd8:	d307      	bcc.n	8003dea <__cvt+0xb6>
 8003dda:	4630      	mov	r0, r6
 8003ddc:	9b07      	ldr	r3, [sp, #28]
 8003dde:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003de0:	1b9b      	subs	r3, r3, r6
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	b008      	add	sp, #32
 8003de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dea:	1c59      	adds	r1, r3, #1
 8003dec:	9107      	str	r1, [sp, #28]
 8003dee:	701a      	strb	r2, [r3, #0]
 8003df0:	e7f0      	b.n	8003dd4 <__cvt+0xa0>

08003df2 <__exponent>:
 8003df2:	4603      	mov	r3, r0
 8003df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003df6:	2900      	cmp	r1, #0
 8003df8:	f803 2b02 	strb.w	r2, [r3], #2
 8003dfc:	bfb6      	itet	lt
 8003dfe:	222d      	movlt	r2, #45	; 0x2d
 8003e00:	222b      	movge	r2, #43	; 0x2b
 8003e02:	4249      	neglt	r1, r1
 8003e04:	2909      	cmp	r1, #9
 8003e06:	7042      	strb	r2, [r0, #1]
 8003e08:	dd2a      	ble.n	8003e60 <__exponent+0x6e>
 8003e0a:	f10d 0207 	add.w	r2, sp, #7
 8003e0e:	4617      	mov	r7, r2
 8003e10:	260a      	movs	r6, #10
 8003e12:	fb91 f5f6 	sdiv	r5, r1, r6
 8003e16:	4694      	mov	ip, r2
 8003e18:	fb06 1415 	mls	r4, r6, r5, r1
 8003e1c:	3430      	adds	r4, #48	; 0x30
 8003e1e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003e22:	460c      	mov	r4, r1
 8003e24:	2c63      	cmp	r4, #99	; 0x63
 8003e26:	4629      	mov	r1, r5
 8003e28:	f102 32ff 	add.w	r2, r2, #4294967295
 8003e2c:	dcf1      	bgt.n	8003e12 <__exponent+0x20>
 8003e2e:	3130      	adds	r1, #48	; 0x30
 8003e30:	f1ac 0402 	sub.w	r4, ip, #2
 8003e34:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003e38:	4622      	mov	r2, r4
 8003e3a:	1c41      	adds	r1, r0, #1
 8003e3c:	42ba      	cmp	r2, r7
 8003e3e:	d30a      	bcc.n	8003e56 <__exponent+0x64>
 8003e40:	f10d 0209 	add.w	r2, sp, #9
 8003e44:	eba2 020c 	sub.w	r2, r2, ip
 8003e48:	42bc      	cmp	r4, r7
 8003e4a:	bf88      	it	hi
 8003e4c:	2200      	movhi	r2, #0
 8003e4e:	4413      	add	r3, r2
 8003e50:	1a18      	subs	r0, r3, r0
 8003e52:	b003      	add	sp, #12
 8003e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e56:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003e5a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003e5e:	e7ed      	b.n	8003e3c <__exponent+0x4a>
 8003e60:	2330      	movs	r3, #48	; 0x30
 8003e62:	3130      	adds	r1, #48	; 0x30
 8003e64:	7083      	strb	r3, [r0, #2]
 8003e66:	70c1      	strb	r1, [r0, #3]
 8003e68:	1d03      	adds	r3, r0, #4
 8003e6a:	e7f1      	b.n	8003e50 <__exponent+0x5e>

08003e6c <_printf_float>:
 8003e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e70:	b091      	sub	sp, #68	; 0x44
 8003e72:	460c      	mov	r4, r1
 8003e74:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003e78:	4616      	mov	r6, r2
 8003e7a:	461f      	mov	r7, r3
 8003e7c:	4605      	mov	r5, r0
 8003e7e:	f000 fce5 	bl	800484c <_localeconv_r>
 8003e82:	6803      	ldr	r3, [r0, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	9309      	str	r3, [sp, #36]	; 0x24
 8003e88:	f7fc f962 	bl	8000150 <strlen>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	930e      	str	r3, [sp, #56]	; 0x38
 8003e90:	f8d8 3000 	ldr.w	r3, [r8]
 8003e94:	900a      	str	r0, [sp, #40]	; 0x28
 8003e96:	3307      	adds	r3, #7
 8003e98:	f023 0307 	bic.w	r3, r3, #7
 8003e9c:	f103 0208 	add.w	r2, r3, #8
 8003ea0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003ea4:	f8d4 b000 	ldr.w	fp, [r4]
 8003ea8:	f8c8 2000 	str.w	r2, [r8]
 8003eac:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003eb0:	4652      	mov	r2, sl
 8003eb2:	4643      	mov	r3, r8
 8003eb4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003eb8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003ebc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec2:	4650      	mov	r0, sl
 8003ec4:	4b9c      	ldr	r3, [pc, #624]	; (8004138 <_printf_float+0x2cc>)
 8003ec6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ec8:	f7fc fda0 	bl	8000a0c <__aeabi_dcmpun>
 8003ecc:	bb70      	cbnz	r0, 8003f2c <_printf_float+0xc0>
 8003ece:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed2:	4650      	mov	r0, sl
 8003ed4:	4b98      	ldr	r3, [pc, #608]	; (8004138 <_printf_float+0x2cc>)
 8003ed6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ed8:	f7fc fd7a 	bl	80009d0 <__aeabi_dcmple>
 8003edc:	bb30      	cbnz	r0, 8003f2c <_printf_float+0xc0>
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	4650      	mov	r0, sl
 8003ee4:	4641      	mov	r1, r8
 8003ee6:	f7fc fd69 	bl	80009bc <__aeabi_dcmplt>
 8003eea:	b110      	cbz	r0, 8003ef2 <_printf_float+0x86>
 8003eec:	232d      	movs	r3, #45	; 0x2d
 8003eee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ef2:	4a92      	ldr	r2, [pc, #584]	; (800413c <_printf_float+0x2d0>)
 8003ef4:	4b92      	ldr	r3, [pc, #584]	; (8004140 <_printf_float+0x2d4>)
 8003ef6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003efa:	bf94      	ite	ls
 8003efc:	4690      	movls	r8, r2
 8003efe:	4698      	movhi	r8, r3
 8003f00:	2303      	movs	r3, #3
 8003f02:	f04f 0a00 	mov.w	sl, #0
 8003f06:	6123      	str	r3, [r4, #16]
 8003f08:	f02b 0304 	bic.w	r3, fp, #4
 8003f0c:	6023      	str	r3, [r4, #0]
 8003f0e:	4633      	mov	r3, r6
 8003f10:	4621      	mov	r1, r4
 8003f12:	4628      	mov	r0, r5
 8003f14:	9700      	str	r7, [sp, #0]
 8003f16:	aa0f      	add	r2, sp, #60	; 0x3c
 8003f18:	f000 f9d6 	bl	80042c8 <_printf_common>
 8003f1c:	3001      	adds	r0, #1
 8003f1e:	f040 8090 	bne.w	8004042 <_printf_float+0x1d6>
 8003f22:	f04f 30ff 	mov.w	r0, #4294967295
 8003f26:	b011      	add	sp, #68	; 0x44
 8003f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f2c:	4652      	mov	r2, sl
 8003f2e:	4643      	mov	r3, r8
 8003f30:	4650      	mov	r0, sl
 8003f32:	4641      	mov	r1, r8
 8003f34:	f7fc fd6a 	bl	8000a0c <__aeabi_dcmpun>
 8003f38:	b148      	cbz	r0, 8003f4e <_printf_float+0xe2>
 8003f3a:	f1b8 0f00 	cmp.w	r8, #0
 8003f3e:	bfb8      	it	lt
 8003f40:	232d      	movlt	r3, #45	; 0x2d
 8003f42:	4a80      	ldr	r2, [pc, #512]	; (8004144 <_printf_float+0x2d8>)
 8003f44:	bfb8      	it	lt
 8003f46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003f4a:	4b7f      	ldr	r3, [pc, #508]	; (8004148 <_printf_float+0x2dc>)
 8003f4c:	e7d3      	b.n	8003ef6 <_printf_float+0x8a>
 8003f4e:	6863      	ldr	r3, [r4, #4]
 8003f50:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	d142      	bne.n	8003fde <_printf_float+0x172>
 8003f58:	2306      	movs	r3, #6
 8003f5a:	6063      	str	r3, [r4, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	9206      	str	r2, [sp, #24]
 8003f60:	aa0e      	add	r2, sp, #56	; 0x38
 8003f62:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003f66:	aa0d      	add	r2, sp, #52	; 0x34
 8003f68:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003f6c:	9203      	str	r2, [sp, #12]
 8003f6e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003f72:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003f76:	6023      	str	r3, [r4, #0]
 8003f78:	6863      	ldr	r3, [r4, #4]
 8003f7a:	4652      	mov	r2, sl
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	4628      	mov	r0, r5
 8003f80:	4643      	mov	r3, r8
 8003f82:	910b      	str	r1, [sp, #44]	; 0x2c
 8003f84:	f7ff fed6 	bl	8003d34 <__cvt>
 8003f88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f8a:	4680      	mov	r8, r0
 8003f8c:	2947      	cmp	r1, #71	; 0x47
 8003f8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003f90:	d108      	bne.n	8003fa4 <_printf_float+0x138>
 8003f92:	1cc8      	adds	r0, r1, #3
 8003f94:	db02      	blt.n	8003f9c <_printf_float+0x130>
 8003f96:	6863      	ldr	r3, [r4, #4]
 8003f98:	4299      	cmp	r1, r3
 8003f9a:	dd40      	ble.n	800401e <_printf_float+0x1b2>
 8003f9c:	f1a9 0902 	sub.w	r9, r9, #2
 8003fa0:	fa5f f989 	uxtb.w	r9, r9
 8003fa4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003fa8:	d81f      	bhi.n	8003fea <_printf_float+0x17e>
 8003faa:	464a      	mov	r2, r9
 8003fac:	3901      	subs	r1, #1
 8003fae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003fb2:	910d      	str	r1, [sp, #52]	; 0x34
 8003fb4:	f7ff ff1d 	bl	8003df2 <__exponent>
 8003fb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003fba:	4682      	mov	sl, r0
 8003fbc:	1813      	adds	r3, r2, r0
 8003fbe:	2a01      	cmp	r2, #1
 8003fc0:	6123      	str	r3, [r4, #16]
 8003fc2:	dc02      	bgt.n	8003fca <_printf_float+0x15e>
 8003fc4:	6822      	ldr	r2, [r4, #0]
 8003fc6:	07d2      	lsls	r2, r2, #31
 8003fc8:	d501      	bpl.n	8003fce <_printf_float+0x162>
 8003fca:	3301      	adds	r3, #1
 8003fcc:	6123      	str	r3, [r4, #16]
 8003fce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d09b      	beq.n	8003f0e <_printf_float+0xa2>
 8003fd6:	232d      	movs	r3, #45	; 0x2d
 8003fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fdc:	e797      	b.n	8003f0e <_printf_float+0xa2>
 8003fde:	2947      	cmp	r1, #71	; 0x47
 8003fe0:	d1bc      	bne.n	8003f5c <_printf_float+0xf0>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1ba      	bne.n	8003f5c <_printf_float+0xf0>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e7b7      	b.n	8003f5a <_printf_float+0xee>
 8003fea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003fee:	d118      	bne.n	8004022 <_printf_float+0x1b6>
 8003ff0:	2900      	cmp	r1, #0
 8003ff2:	6863      	ldr	r3, [r4, #4]
 8003ff4:	dd0b      	ble.n	800400e <_printf_float+0x1a2>
 8003ff6:	6121      	str	r1, [r4, #16]
 8003ff8:	b913      	cbnz	r3, 8004000 <_printf_float+0x194>
 8003ffa:	6822      	ldr	r2, [r4, #0]
 8003ffc:	07d0      	lsls	r0, r2, #31
 8003ffe:	d502      	bpl.n	8004006 <_printf_float+0x19a>
 8004000:	3301      	adds	r3, #1
 8004002:	440b      	add	r3, r1
 8004004:	6123      	str	r3, [r4, #16]
 8004006:	f04f 0a00 	mov.w	sl, #0
 800400a:	65a1      	str	r1, [r4, #88]	; 0x58
 800400c:	e7df      	b.n	8003fce <_printf_float+0x162>
 800400e:	b913      	cbnz	r3, 8004016 <_printf_float+0x1aa>
 8004010:	6822      	ldr	r2, [r4, #0]
 8004012:	07d2      	lsls	r2, r2, #31
 8004014:	d501      	bpl.n	800401a <_printf_float+0x1ae>
 8004016:	3302      	adds	r3, #2
 8004018:	e7f4      	b.n	8004004 <_printf_float+0x198>
 800401a:	2301      	movs	r3, #1
 800401c:	e7f2      	b.n	8004004 <_printf_float+0x198>
 800401e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004024:	4299      	cmp	r1, r3
 8004026:	db05      	blt.n	8004034 <_printf_float+0x1c8>
 8004028:	6823      	ldr	r3, [r4, #0]
 800402a:	6121      	str	r1, [r4, #16]
 800402c:	07d8      	lsls	r0, r3, #31
 800402e:	d5ea      	bpl.n	8004006 <_printf_float+0x19a>
 8004030:	1c4b      	adds	r3, r1, #1
 8004032:	e7e7      	b.n	8004004 <_printf_float+0x198>
 8004034:	2900      	cmp	r1, #0
 8004036:	bfcc      	ite	gt
 8004038:	2201      	movgt	r2, #1
 800403a:	f1c1 0202 	rsble	r2, r1, #2
 800403e:	4413      	add	r3, r2
 8004040:	e7e0      	b.n	8004004 <_printf_float+0x198>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	055a      	lsls	r2, r3, #21
 8004046:	d407      	bmi.n	8004058 <_printf_float+0x1ec>
 8004048:	6923      	ldr	r3, [r4, #16]
 800404a:	4642      	mov	r2, r8
 800404c:	4631      	mov	r1, r6
 800404e:	4628      	mov	r0, r5
 8004050:	47b8      	blx	r7
 8004052:	3001      	adds	r0, #1
 8004054:	d12b      	bne.n	80040ae <_printf_float+0x242>
 8004056:	e764      	b.n	8003f22 <_printf_float+0xb6>
 8004058:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800405c:	f240 80dd 	bls.w	800421a <_printf_float+0x3ae>
 8004060:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004064:	2200      	movs	r2, #0
 8004066:	2300      	movs	r3, #0
 8004068:	f7fc fc9e 	bl	80009a8 <__aeabi_dcmpeq>
 800406c:	2800      	cmp	r0, #0
 800406e:	d033      	beq.n	80040d8 <_printf_float+0x26c>
 8004070:	2301      	movs	r3, #1
 8004072:	4631      	mov	r1, r6
 8004074:	4628      	mov	r0, r5
 8004076:	4a35      	ldr	r2, [pc, #212]	; (800414c <_printf_float+0x2e0>)
 8004078:	47b8      	blx	r7
 800407a:	3001      	adds	r0, #1
 800407c:	f43f af51 	beq.w	8003f22 <_printf_float+0xb6>
 8004080:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004084:	429a      	cmp	r2, r3
 8004086:	db02      	blt.n	800408e <_printf_float+0x222>
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	07d8      	lsls	r0, r3, #31
 800408c:	d50f      	bpl.n	80040ae <_printf_float+0x242>
 800408e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004092:	4631      	mov	r1, r6
 8004094:	4628      	mov	r0, r5
 8004096:	47b8      	blx	r7
 8004098:	3001      	adds	r0, #1
 800409a:	f43f af42 	beq.w	8003f22 <_printf_float+0xb6>
 800409e:	f04f 0800 	mov.w	r8, #0
 80040a2:	f104 091a 	add.w	r9, r4, #26
 80040a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040a8:	3b01      	subs	r3, #1
 80040aa:	4543      	cmp	r3, r8
 80040ac:	dc09      	bgt.n	80040c2 <_printf_float+0x256>
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	079b      	lsls	r3, r3, #30
 80040b2:	f100 8104 	bmi.w	80042be <_printf_float+0x452>
 80040b6:	68e0      	ldr	r0, [r4, #12]
 80040b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80040ba:	4298      	cmp	r0, r3
 80040bc:	bfb8      	it	lt
 80040be:	4618      	movlt	r0, r3
 80040c0:	e731      	b.n	8003f26 <_printf_float+0xba>
 80040c2:	2301      	movs	r3, #1
 80040c4:	464a      	mov	r2, r9
 80040c6:	4631      	mov	r1, r6
 80040c8:	4628      	mov	r0, r5
 80040ca:	47b8      	blx	r7
 80040cc:	3001      	adds	r0, #1
 80040ce:	f43f af28 	beq.w	8003f22 <_printf_float+0xb6>
 80040d2:	f108 0801 	add.w	r8, r8, #1
 80040d6:	e7e6      	b.n	80040a6 <_printf_float+0x23a>
 80040d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040da:	2b00      	cmp	r3, #0
 80040dc:	dc38      	bgt.n	8004150 <_printf_float+0x2e4>
 80040de:	2301      	movs	r3, #1
 80040e0:	4631      	mov	r1, r6
 80040e2:	4628      	mov	r0, r5
 80040e4:	4a19      	ldr	r2, [pc, #100]	; (800414c <_printf_float+0x2e0>)
 80040e6:	47b8      	blx	r7
 80040e8:	3001      	adds	r0, #1
 80040ea:	f43f af1a 	beq.w	8003f22 <_printf_float+0xb6>
 80040ee:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80040f2:	4313      	orrs	r3, r2
 80040f4:	d102      	bne.n	80040fc <_printf_float+0x290>
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	07d9      	lsls	r1, r3, #31
 80040fa:	d5d8      	bpl.n	80040ae <_printf_float+0x242>
 80040fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004100:	4631      	mov	r1, r6
 8004102:	4628      	mov	r0, r5
 8004104:	47b8      	blx	r7
 8004106:	3001      	adds	r0, #1
 8004108:	f43f af0b 	beq.w	8003f22 <_printf_float+0xb6>
 800410c:	f04f 0900 	mov.w	r9, #0
 8004110:	f104 0a1a 	add.w	sl, r4, #26
 8004114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004116:	425b      	negs	r3, r3
 8004118:	454b      	cmp	r3, r9
 800411a:	dc01      	bgt.n	8004120 <_printf_float+0x2b4>
 800411c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800411e:	e794      	b.n	800404a <_printf_float+0x1de>
 8004120:	2301      	movs	r3, #1
 8004122:	4652      	mov	r2, sl
 8004124:	4631      	mov	r1, r6
 8004126:	4628      	mov	r0, r5
 8004128:	47b8      	blx	r7
 800412a:	3001      	adds	r0, #1
 800412c:	f43f aef9 	beq.w	8003f22 <_printf_float+0xb6>
 8004130:	f109 0901 	add.w	r9, r9, #1
 8004134:	e7ee      	b.n	8004114 <_printf_float+0x2a8>
 8004136:	bf00      	nop
 8004138:	7fefffff 	.word	0x7fefffff
 800413c:	0800705c 	.word	0x0800705c
 8004140:	08007060 	.word	0x08007060
 8004144:	08007064 	.word	0x08007064
 8004148:	08007068 	.word	0x08007068
 800414c:	0800706c 	.word	0x0800706c
 8004150:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004152:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004154:	429a      	cmp	r2, r3
 8004156:	bfa8      	it	ge
 8004158:	461a      	movge	r2, r3
 800415a:	2a00      	cmp	r2, #0
 800415c:	4691      	mov	r9, r2
 800415e:	dc37      	bgt.n	80041d0 <_printf_float+0x364>
 8004160:	f04f 0b00 	mov.w	fp, #0
 8004164:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004168:	f104 021a 	add.w	r2, r4, #26
 800416c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004170:	ebaa 0309 	sub.w	r3, sl, r9
 8004174:	455b      	cmp	r3, fp
 8004176:	dc33      	bgt.n	80041e0 <_printf_float+0x374>
 8004178:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800417c:	429a      	cmp	r2, r3
 800417e:	db3b      	blt.n	80041f8 <_printf_float+0x38c>
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	07da      	lsls	r2, r3, #31
 8004184:	d438      	bmi.n	80041f8 <_printf_float+0x38c>
 8004186:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800418a:	eba2 0903 	sub.w	r9, r2, r3
 800418e:	eba2 020a 	sub.w	r2, r2, sl
 8004192:	4591      	cmp	r9, r2
 8004194:	bfa8      	it	ge
 8004196:	4691      	movge	r9, r2
 8004198:	f1b9 0f00 	cmp.w	r9, #0
 800419c:	dc34      	bgt.n	8004208 <_printf_float+0x39c>
 800419e:	f04f 0800 	mov.w	r8, #0
 80041a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041a6:	f104 0a1a 	add.w	sl, r4, #26
 80041aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	eba3 0309 	sub.w	r3, r3, r9
 80041b4:	4543      	cmp	r3, r8
 80041b6:	f77f af7a 	ble.w	80040ae <_printf_float+0x242>
 80041ba:	2301      	movs	r3, #1
 80041bc:	4652      	mov	r2, sl
 80041be:	4631      	mov	r1, r6
 80041c0:	4628      	mov	r0, r5
 80041c2:	47b8      	blx	r7
 80041c4:	3001      	adds	r0, #1
 80041c6:	f43f aeac 	beq.w	8003f22 <_printf_float+0xb6>
 80041ca:	f108 0801 	add.w	r8, r8, #1
 80041ce:	e7ec      	b.n	80041aa <_printf_float+0x33e>
 80041d0:	4613      	mov	r3, r2
 80041d2:	4631      	mov	r1, r6
 80041d4:	4642      	mov	r2, r8
 80041d6:	4628      	mov	r0, r5
 80041d8:	47b8      	blx	r7
 80041da:	3001      	adds	r0, #1
 80041dc:	d1c0      	bne.n	8004160 <_printf_float+0x2f4>
 80041de:	e6a0      	b.n	8003f22 <_printf_float+0xb6>
 80041e0:	2301      	movs	r3, #1
 80041e2:	4631      	mov	r1, r6
 80041e4:	4628      	mov	r0, r5
 80041e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80041e8:	47b8      	blx	r7
 80041ea:	3001      	adds	r0, #1
 80041ec:	f43f ae99 	beq.w	8003f22 <_printf_float+0xb6>
 80041f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80041f2:	f10b 0b01 	add.w	fp, fp, #1
 80041f6:	e7b9      	b.n	800416c <_printf_float+0x300>
 80041f8:	4631      	mov	r1, r6
 80041fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041fe:	4628      	mov	r0, r5
 8004200:	47b8      	blx	r7
 8004202:	3001      	adds	r0, #1
 8004204:	d1bf      	bne.n	8004186 <_printf_float+0x31a>
 8004206:	e68c      	b.n	8003f22 <_printf_float+0xb6>
 8004208:	464b      	mov	r3, r9
 800420a:	4631      	mov	r1, r6
 800420c:	4628      	mov	r0, r5
 800420e:	eb08 020a 	add.w	r2, r8, sl
 8004212:	47b8      	blx	r7
 8004214:	3001      	adds	r0, #1
 8004216:	d1c2      	bne.n	800419e <_printf_float+0x332>
 8004218:	e683      	b.n	8003f22 <_printf_float+0xb6>
 800421a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800421c:	2a01      	cmp	r2, #1
 800421e:	dc01      	bgt.n	8004224 <_printf_float+0x3b8>
 8004220:	07db      	lsls	r3, r3, #31
 8004222:	d539      	bpl.n	8004298 <_printf_float+0x42c>
 8004224:	2301      	movs	r3, #1
 8004226:	4642      	mov	r2, r8
 8004228:	4631      	mov	r1, r6
 800422a:	4628      	mov	r0, r5
 800422c:	47b8      	blx	r7
 800422e:	3001      	adds	r0, #1
 8004230:	f43f ae77 	beq.w	8003f22 <_printf_float+0xb6>
 8004234:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004238:	4631      	mov	r1, r6
 800423a:	4628      	mov	r0, r5
 800423c:	47b8      	blx	r7
 800423e:	3001      	adds	r0, #1
 8004240:	f43f ae6f 	beq.w	8003f22 <_printf_float+0xb6>
 8004244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004248:	2200      	movs	r2, #0
 800424a:	2300      	movs	r3, #0
 800424c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004250:	f7fc fbaa 	bl	80009a8 <__aeabi_dcmpeq>
 8004254:	b9d8      	cbnz	r0, 800428e <_printf_float+0x422>
 8004256:	f109 33ff 	add.w	r3, r9, #4294967295
 800425a:	f108 0201 	add.w	r2, r8, #1
 800425e:	4631      	mov	r1, r6
 8004260:	4628      	mov	r0, r5
 8004262:	47b8      	blx	r7
 8004264:	3001      	adds	r0, #1
 8004266:	d10e      	bne.n	8004286 <_printf_float+0x41a>
 8004268:	e65b      	b.n	8003f22 <_printf_float+0xb6>
 800426a:	2301      	movs	r3, #1
 800426c:	464a      	mov	r2, r9
 800426e:	4631      	mov	r1, r6
 8004270:	4628      	mov	r0, r5
 8004272:	47b8      	blx	r7
 8004274:	3001      	adds	r0, #1
 8004276:	f43f ae54 	beq.w	8003f22 <_printf_float+0xb6>
 800427a:	f108 0801 	add.w	r8, r8, #1
 800427e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004280:	3b01      	subs	r3, #1
 8004282:	4543      	cmp	r3, r8
 8004284:	dcf1      	bgt.n	800426a <_printf_float+0x3fe>
 8004286:	4653      	mov	r3, sl
 8004288:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800428c:	e6de      	b.n	800404c <_printf_float+0x1e0>
 800428e:	f04f 0800 	mov.w	r8, #0
 8004292:	f104 091a 	add.w	r9, r4, #26
 8004296:	e7f2      	b.n	800427e <_printf_float+0x412>
 8004298:	2301      	movs	r3, #1
 800429a:	4642      	mov	r2, r8
 800429c:	e7df      	b.n	800425e <_printf_float+0x3f2>
 800429e:	2301      	movs	r3, #1
 80042a0:	464a      	mov	r2, r9
 80042a2:	4631      	mov	r1, r6
 80042a4:	4628      	mov	r0, r5
 80042a6:	47b8      	blx	r7
 80042a8:	3001      	adds	r0, #1
 80042aa:	f43f ae3a 	beq.w	8003f22 <_printf_float+0xb6>
 80042ae:	f108 0801 	add.w	r8, r8, #1
 80042b2:	68e3      	ldr	r3, [r4, #12]
 80042b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80042b6:	1a5b      	subs	r3, r3, r1
 80042b8:	4543      	cmp	r3, r8
 80042ba:	dcf0      	bgt.n	800429e <_printf_float+0x432>
 80042bc:	e6fb      	b.n	80040b6 <_printf_float+0x24a>
 80042be:	f04f 0800 	mov.w	r8, #0
 80042c2:	f104 0919 	add.w	r9, r4, #25
 80042c6:	e7f4      	b.n	80042b2 <_printf_float+0x446>

080042c8 <_printf_common>:
 80042c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042cc:	4616      	mov	r6, r2
 80042ce:	4699      	mov	r9, r3
 80042d0:	688a      	ldr	r2, [r1, #8]
 80042d2:	690b      	ldr	r3, [r1, #16]
 80042d4:	4607      	mov	r7, r0
 80042d6:	4293      	cmp	r3, r2
 80042d8:	bfb8      	it	lt
 80042da:	4613      	movlt	r3, r2
 80042dc:	6033      	str	r3, [r6, #0]
 80042de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042e2:	460c      	mov	r4, r1
 80042e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042e8:	b10a      	cbz	r2, 80042ee <_printf_common+0x26>
 80042ea:	3301      	adds	r3, #1
 80042ec:	6033      	str	r3, [r6, #0]
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	0699      	lsls	r1, r3, #26
 80042f2:	bf42      	ittt	mi
 80042f4:	6833      	ldrmi	r3, [r6, #0]
 80042f6:	3302      	addmi	r3, #2
 80042f8:	6033      	strmi	r3, [r6, #0]
 80042fa:	6825      	ldr	r5, [r4, #0]
 80042fc:	f015 0506 	ands.w	r5, r5, #6
 8004300:	d106      	bne.n	8004310 <_printf_common+0x48>
 8004302:	f104 0a19 	add.w	sl, r4, #25
 8004306:	68e3      	ldr	r3, [r4, #12]
 8004308:	6832      	ldr	r2, [r6, #0]
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	42ab      	cmp	r3, r5
 800430e:	dc2b      	bgt.n	8004368 <_printf_common+0xa0>
 8004310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004314:	1e13      	subs	r3, r2, #0
 8004316:	6822      	ldr	r2, [r4, #0]
 8004318:	bf18      	it	ne
 800431a:	2301      	movne	r3, #1
 800431c:	0692      	lsls	r2, r2, #26
 800431e:	d430      	bmi.n	8004382 <_printf_common+0xba>
 8004320:	4649      	mov	r1, r9
 8004322:	4638      	mov	r0, r7
 8004324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004328:	47c0      	blx	r8
 800432a:	3001      	adds	r0, #1
 800432c:	d023      	beq.n	8004376 <_printf_common+0xae>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	6922      	ldr	r2, [r4, #16]
 8004332:	f003 0306 	and.w	r3, r3, #6
 8004336:	2b04      	cmp	r3, #4
 8004338:	bf14      	ite	ne
 800433a:	2500      	movne	r5, #0
 800433c:	6833      	ldreq	r3, [r6, #0]
 800433e:	f04f 0600 	mov.w	r6, #0
 8004342:	bf08      	it	eq
 8004344:	68e5      	ldreq	r5, [r4, #12]
 8004346:	f104 041a 	add.w	r4, r4, #26
 800434a:	bf08      	it	eq
 800434c:	1aed      	subeq	r5, r5, r3
 800434e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004352:	bf08      	it	eq
 8004354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004358:	4293      	cmp	r3, r2
 800435a:	bfc4      	itt	gt
 800435c:	1a9b      	subgt	r3, r3, r2
 800435e:	18ed      	addgt	r5, r5, r3
 8004360:	42b5      	cmp	r5, r6
 8004362:	d11a      	bne.n	800439a <_printf_common+0xd2>
 8004364:	2000      	movs	r0, #0
 8004366:	e008      	b.n	800437a <_printf_common+0xb2>
 8004368:	2301      	movs	r3, #1
 800436a:	4652      	mov	r2, sl
 800436c:	4649      	mov	r1, r9
 800436e:	4638      	mov	r0, r7
 8004370:	47c0      	blx	r8
 8004372:	3001      	adds	r0, #1
 8004374:	d103      	bne.n	800437e <_printf_common+0xb6>
 8004376:	f04f 30ff 	mov.w	r0, #4294967295
 800437a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800437e:	3501      	adds	r5, #1
 8004380:	e7c1      	b.n	8004306 <_printf_common+0x3e>
 8004382:	2030      	movs	r0, #48	; 0x30
 8004384:	18e1      	adds	r1, r4, r3
 8004386:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004390:	4422      	add	r2, r4
 8004392:	3302      	adds	r3, #2
 8004394:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004398:	e7c2      	b.n	8004320 <_printf_common+0x58>
 800439a:	2301      	movs	r3, #1
 800439c:	4622      	mov	r2, r4
 800439e:	4649      	mov	r1, r9
 80043a0:	4638      	mov	r0, r7
 80043a2:	47c0      	blx	r8
 80043a4:	3001      	adds	r0, #1
 80043a6:	d0e6      	beq.n	8004376 <_printf_common+0xae>
 80043a8:	3601      	adds	r6, #1
 80043aa:	e7d9      	b.n	8004360 <_printf_common+0x98>

080043ac <_printf_i>:
 80043ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043b0:	7e0f      	ldrb	r7, [r1, #24]
 80043b2:	4691      	mov	r9, r2
 80043b4:	2f78      	cmp	r7, #120	; 0x78
 80043b6:	4680      	mov	r8, r0
 80043b8:	460c      	mov	r4, r1
 80043ba:	469a      	mov	sl, r3
 80043bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043c2:	d807      	bhi.n	80043d4 <_printf_i+0x28>
 80043c4:	2f62      	cmp	r7, #98	; 0x62
 80043c6:	d80a      	bhi.n	80043de <_printf_i+0x32>
 80043c8:	2f00      	cmp	r7, #0
 80043ca:	f000 80d5 	beq.w	8004578 <_printf_i+0x1cc>
 80043ce:	2f58      	cmp	r7, #88	; 0x58
 80043d0:	f000 80c1 	beq.w	8004556 <_printf_i+0x1aa>
 80043d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043dc:	e03a      	b.n	8004454 <_printf_i+0xa8>
 80043de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043e2:	2b15      	cmp	r3, #21
 80043e4:	d8f6      	bhi.n	80043d4 <_printf_i+0x28>
 80043e6:	a101      	add	r1, pc, #4	; (adr r1, 80043ec <_printf_i+0x40>)
 80043e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043ec:	08004445 	.word	0x08004445
 80043f0:	08004459 	.word	0x08004459
 80043f4:	080043d5 	.word	0x080043d5
 80043f8:	080043d5 	.word	0x080043d5
 80043fc:	080043d5 	.word	0x080043d5
 8004400:	080043d5 	.word	0x080043d5
 8004404:	08004459 	.word	0x08004459
 8004408:	080043d5 	.word	0x080043d5
 800440c:	080043d5 	.word	0x080043d5
 8004410:	080043d5 	.word	0x080043d5
 8004414:	080043d5 	.word	0x080043d5
 8004418:	0800455f 	.word	0x0800455f
 800441c:	08004485 	.word	0x08004485
 8004420:	08004519 	.word	0x08004519
 8004424:	080043d5 	.word	0x080043d5
 8004428:	080043d5 	.word	0x080043d5
 800442c:	08004581 	.word	0x08004581
 8004430:	080043d5 	.word	0x080043d5
 8004434:	08004485 	.word	0x08004485
 8004438:	080043d5 	.word	0x080043d5
 800443c:	080043d5 	.word	0x080043d5
 8004440:	08004521 	.word	0x08004521
 8004444:	682b      	ldr	r3, [r5, #0]
 8004446:	1d1a      	adds	r2, r3, #4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	602a      	str	r2, [r5, #0]
 800444c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004454:	2301      	movs	r3, #1
 8004456:	e0a0      	b.n	800459a <_printf_i+0x1ee>
 8004458:	6820      	ldr	r0, [r4, #0]
 800445a:	682b      	ldr	r3, [r5, #0]
 800445c:	0607      	lsls	r7, r0, #24
 800445e:	f103 0104 	add.w	r1, r3, #4
 8004462:	6029      	str	r1, [r5, #0]
 8004464:	d501      	bpl.n	800446a <_printf_i+0xbe>
 8004466:	681e      	ldr	r6, [r3, #0]
 8004468:	e003      	b.n	8004472 <_printf_i+0xc6>
 800446a:	0646      	lsls	r6, r0, #25
 800446c:	d5fb      	bpl.n	8004466 <_printf_i+0xba>
 800446e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004472:	2e00      	cmp	r6, #0
 8004474:	da03      	bge.n	800447e <_printf_i+0xd2>
 8004476:	232d      	movs	r3, #45	; 0x2d
 8004478:	4276      	negs	r6, r6
 800447a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800447e:	230a      	movs	r3, #10
 8004480:	4859      	ldr	r0, [pc, #356]	; (80045e8 <_printf_i+0x23c>)
 8004482:	e012      	b.n	80044aa <_printf_i+0xfe>
 8004484:	682b      	ldr	r3, [r5, #0]
 8004486:	6820      	ldr	r0, [r4, #0]
 8004488:	1d19      	adds	r1, r3, #4
 800448a:	6029      	str	r1, [r5, #0]
 800448c:	0605      	lsls	r5, r0, #24
 800448e:	d501      	bpl.n	8004494 <_printf_i+0xe8>
 8004490:	681e      	ldr	r6, [r3, #0]
 8004492:	e002      	b.n	800449a <_printf_i+0xee>
 8004494:	0641      	lsls	r1, r0, #25
 8004496:	d5fb      	bpl.n	8004490 <_printf_i+0xe4>
 8004498:	881e      	ldrh	r6, [r3, #0]
 800449a:	2f6f      	cmp	r7, #111	; 0x6f
 800449c:	bf0c      	ite	eq
 800449e:	2308      	moveq	r3, #8
 80044a0:	230a      	movne	r3, #10
 80044a2:	4851      	ldr	r0, [pc, #324]	; (80045e8 <_printf_i+0x23c>)
 80044a4:	2100      	movs	r1, #0
 80044a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044aa:	6865      	ldr	r5, [r4, #4]
 80044ac:	2d00      	cmp	r5, #0
 80044ae:	bfa8      	it	ge
 80044b0:	6821      	ldrge	r1, [r4, #0]
 80044b2:	60a5      	str	r5, [r4, #8]
 80044b4:	bfa4      	itt	ge
 80044b6:	f021 0104 	bicge.w	r1, r1, #4
 80044ba:	6021      	strge	r1, [r4, #0]
 80044bc:	b90e      	cbnz	r6, 80044c2 <_printf_i+0x116>
 80044be:	2d00      	cmp	r5, #0
 80044c0:	d04b      	beq.n	800455a <_printf_i+0x1ae>
 80044c2:	4615      	mov	r5, r2
 80044c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80044c8:	fb03 6711 	mls	r7, r3, r1, r6
 80044cc:	5dc7      	ldrb	r7, [r0, r7]
 80044ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044d2:	4637      	mov	r7, r6
 80044d4:	42bb      	cmp	r3, r7
 80044d6:	460e      	mov	r6, r1
 80044d8:	d9f4      	bls.n	80044c4 <_printf_i+0x118>
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d10b      	bne.n	80044f6 <_printf_i+0x14a>
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	07de      	lsls	r6, r3, #31
 80044e2:	d508      	bpl.n	80044f6 <_printf_i+0x14a>
 80044e4:	6923      	ldr	r3, [r4, #16]
 80044e6:	6861      	ldr	r1, [r4, #4]
 80044e8:	4299      	cmp	r1, r3
 80044ea:	bfde      	ittt	le
 80044ec:	2330      	movle	r3, #48	; 0x30
 80044ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044f6:	1b52      	subs	r2, r2, r5
 80044f8:	6122      	str	r2, [r4, #16]
 80044fa:	464b      	mov	r3, r9
 80044fc:	4621      	mov	r1, r4
 80044fe:	4640      	mov	r0, r8
 8004500:	f8cd a000 	str.w	sl, [sp]
 8004504:	aa03      	add	r2, sp, #12
 8004506:	f7ff fedf 	bl	80042c8 <_printf_common>
 800450a:	3001      	adds	r0, #1
 800450c:	d14a      	bne.n	80045a4 <_printf_i+0x1f8>
 800450e:	f04f 30ff 	mov.w	r0, #4294967295
 8004512:	b004      	add	sp, #16
 8004514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	f043 0320 	orr.w	r3, r3, #32
 800451e:	6023      	str	r3, [r4, #0]
 8004520:	2778      	movs	r7, #120	; 0x78
 8004522:	4832      	ldr	r0, [pc, #200]	; (80045ec <_printf_i+0x240>)
 8004524:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	6829      	ldr	r1, [r5, #0]
 800452c:	061f      	lsls	r7, r3, #24
 800452e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004532:	d402      	bmi.n	800453a <_printf_i+0x18e>
 8004534:	065f      	lsls	r7, r3, #25
 8004536:	bf48      	it	mi
 8004538:	b2b6      	uxthmi	r6, r6
 800453a:	07df      	lsls	r7, r3, #31
 800453c:	bf48      	it	mi
 800453e:	f043 0320 	orrmi.w	r3, r3, #32
 8004542:	6029      	str	r1, [r5, #0]
 8004544:	bf48      	it	mi
 8004546:	6023      	strmi	r3, [r4, #0]
 8004548:	b91e      	cbnz	r6, 8004552 <_printf_i+0x1a6>
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	f023 0320 	bic.w	r3, r3, #32
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	2310      	movs	r3, #16
 8004554:	e7a6      	b.n	80044a4 <_printf_i+0xf8>
 8004556:	4824      	ldr	r0, [pc, #144]	; (80045e8 <_printf_i+0x23c>)
 8004558:	e7e4      	b.n	8004524 <_printf_i+0x178>
 800455a:	4615      	mov	r5, r2
 800455c:	e7bd      	b.n	80044da <_printf_i+0x12e>
 800455e:	682b      	ldr	r3, [r5, #0]
 8004560:	6826      	ldr	r6, [r4, #0]
 8004562:	1d18      	adds	r0, r3, #4
 8004564:	6961      	ldr	r1, [r4, #20]
 8004566:	6028      	str	r0, [r5, #0]
 8004568:	0635      	lsls	r5, r6, #24
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	d501      	bpl.n	8004572 <_printf_i+0x1c6>
 800456e:	6019      	str	r1, [r3, #0]
 8004570:	e002      	b.n	8004578 <_printf_i+0x1cc>
 8004572:	0670      	lsls	r0, r6, #25
 8004574:	d5fb      	bpl.n	800456e <_printf_i+0x1c2>
 8004576:	8019      	strh	r1, [r3, #0]
 8004578:	2300      	movs	r3, #0
 800457a:	4615      	mov	r5, r2
 800457c:	6123      	str	r3, [r4, #16]
 800457e:	e7bc      	b.n	80044fa <_printf_i+0x14e>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	2100      	movs	r1, #0
 8004584:	1d1a      	adds	r2, r3, #4
 8004586:	602a      	str	r2, [r5, #0]
 8004588:	681d      	ldr	r5, [r3, #0]
 800458a:	6862      	ldr	r2, [r4, #4]
 800458c:	4628      	mov	r0, r5
 800458e:	f000 f9d4 	bl	800493a <memchr>
 8004592:	b108      	cbz	r0, 8004598 <_printf_i+0x1ec>
 8004594:	1b40      	subs	r0, r0, r5
 8004596:	6060      	str	r0, [r4, #4]
 8004598:	6863      	ldr	r3, [r4, #4]
 800459a:	6123      	str	r3, [r4, #16]
 800459c:	2300      	movs	r3, #0
 800459e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a2:	e7aa      	b.n	80044fa <_printf_i+0x14e>
 80045a4:	462a      	mov	r2, r5
 80045a6:	4649      	mov	r1, r9
 80045a8:	4640      	mov	r0, r8
 80045aa:	6923      	ldr	r3, [r4, #16]
 80045ac:	47d0      	blx	sl
 80045ae:	3001      	adds	r0, #1
 80045b0:	d0ad      	beq.n	800450e <_printf_i+0x162>
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	079b      	lsls	r3, r3, #30
 80045b6:	d413      	bmi.n	80045e0 <_printf_i+0x234>
 80045b8:	68e0      	ldr	r0, [r4, #12]
 80045ba:	9b03      	ldr	r3, [sp, #12]
 80045bc:	4298      	cmp	r0, r3
 80045be:	bfb8      	it	lt
 80045c0:	4618      	movlt	r0, r3
 80045c2:	e7a6      	b.n	8004512 <_printf_i+0x166>
 80045c4:	2301      	movs	r3, #1
 80045c6:	4632      	mov	r2, r6
 80045c8:	4649      	mov	r1, r9
 80045ca:	4640      	mov	r0, r8
 80045cc:	47d0      	blx	sl
 80045ce:	3001      	adds	r0, #1
 80045d0:	d09d      	beq.n	800450e <_printf_i+0x162>
 80045d2:	3501      	adds	r5, #1
 80045d4:	68e3      	ldr	r3, [r4, #12]
 80045d6:	9903      	ldr	r1, [sp, #12]
 80045d8:	1a5b      	subs	r3, r3, r1
 80045da:	42ab      	cmp	r3, r5
 80045dc:	dcf2      	bgt.n	80045c4 <_printf_i+0x218>
 80045de:	e7eb      	b.n	80045b8 <_printf_i+0x20c>
 80045e0:	2500      	movs	r5, #0
 80045e2:	f104 0619 	add.w	r6, r4, #25
 80045e6:	e7f5      	b.n	80045d4 <_printf_i+0x228>
 80045e8:	0800706e 	.word	0x0800706e
 80045ec:	0800707f 	.word	0x0800707f

080045f0 <std>:
 80045f0:	2300      	movs	r3, #0
 80045f2:	b510      	push	{r4, lr}
 80045f4:	4604      	mov	r4, r0
 80045f6:	e9c0 3300 	strd	r3, r3, [r0]
 80045fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045fe:	6083      	str	r3, [r0, #8]
 8004600:	8181      	strh	r1, [r0, #12]
 8004602:	6643      	str	r3, [r0, #100]	; 0x64
 8004604:	81c2      	strh	r2, [r0, #14]
 8004606:	6183      	str	r3, [r0, #24]
 8004608:	4619      	mov	r1, r3
 800460a:	2208      	movs	r2, #8
 800460c:	305c      	adds	r0, #92	; 0x5c
 800460e:	f000 f914 	bl	800483a <memset>
 8004612:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <std+0x58>)
 8004614:	6224      	str	r4, [r4, #32]
 8004616:	6263      	str	r3, [r4, #36]	; 0x24
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <std+0x5c>)
 800461a:	62a3      	str	r3, [r4, #40]	; 0x28
 800461c:	4b0c      	ldr	r3, [pc, #48]	; (8004650 <std+0x60>)
 800461e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <std+0x64>)
 8004622:	6323      	str	r3, [r4, #48]	; 0x30
 8004624:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <std+0x68>)
 8004626:	429c      	cmp	r4, r3
 8004628:	d006      	beq.n	8004638 <std+0x48>
 800462a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800462e:	4294      	cmp	r4, r2
 8004630:	d002      	beq.n	8004638 <std+0x48>
 8004632:	33d0      	adds	r3, #208	; 0xd0
 8004634:	429c      	cmp	r4, r3
 8004636:	d105      	bne.n	8004644 <std+0x54>
 8004638:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800463c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004640:	f000 b978 	b.w	8004934 <__retarget_lock_init_recursive>
 8004644:	bd10      	pop	{r4, pc}
 8004646:	bf00      	nop
 8004648:	080047b5 	.word	0x080047b5
 800464c:	080047d7 	.word	0x080047d7
 8004650:	0800480f 	.word	0x0800480f
 8004654:	08004833 	.word	0x08004833
 8004658:	200003bc 	.word	0x200003bc

0800465c <stdio_exit_handler>:
 800465c:	4a02      	ldr	r2, [pc, #8]	; (8004668 <stdio_exit_handler+0xc>)
 800465e:	4903      	ldr	r1, [pc, #12]	; (800466c <stdio_exit_handler+0x10>)
 8004660:	4803      	ldr	r0, [pc, #12]	; (8004670 <stdio_exit_handler+0x14>)
 8004662:	f000 b869 	b.w	8004738 <_fwalk_sglue>
 8004666:	bf00      	nop
 8004668:	2000010c 	.word	0x2000010c
 800466c:	080062cd 	.word	0x080062cd
 8004670:	20000118 	.word	0x20000118

08004674 <cleanup_stdio>:
 8004674:	6841      	ldr	r1, [r0, #4]
 8004676:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <cleanup_stdio+0x34>)
 8004678:	b510      	push	{r4, lr}
 800467a:	4299      	cmp	r1, r3
 800467c:	4604      	mov	r4, r0
 800467e:	d001      	beq.n	8004684 <cleanup_stdio+0x10>
 8004680:	f001 fe24 	bl	80062cc <_fflush_r>
 8004684:	68a1      	ldr	r1, [r4, #8]
 8004686:	4b09      	ldr	r3, [pc, #36]	; (80046ac <cleanup_stdio+0x38>)
 8004688:	4299      	cmp	r1, r3
 800468a:	d002      	beq.n	8004692 <cleanup_stdio+0x1e>
 800468c:	4620      	mov	r0, r4
 800468e:	f001 fe1d 	bl	80062cc <_fflush_r>
 8004692:	68e1      	ldr	r1, [r4, #12]
 8004694:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <cleanup_stdio+0x3c>)
 8004696:	4299      	cmp	r1, r3
 8004698:	d004      	beq.n	80046a4 <cleanup_stdio+0x30>
 800469a:	4620      	mov	r0, r4
 800469c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046a0:	f001 be14 	b.w	80062cc <_fflush_r>
 80046a4:	bd10      	pop	{r4, pc}
 80046a6:	bf00      	nop
 80046a8:	200003bc 	.word	0x200003bc
 80046ac:	20000424 	.word	0x20000424
 80046b0:	2000048c 	.word	0x2000048c

080046b4 <global_stdio_init.part.0>:
 80046b4:	b510      	push	{r4, lr}
 80046b6:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <global_stdio_init.part.0+0x30>)
 80046b8:	4c0b      	ldr	r4, [pc, #44]	; (80046e8 <global_stdio_init.part.0+0x34>)
 80046ba:	4a0c      	ldr	r2, [pc, #48]	; (80046ec <global_stdio_init.part.0+0x38>)
 80046bc:	4620      	mov	r0, r4
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	2104      	movs	r1, #4
 80046c2:	2200      	movs	r2, #0
 80046c4:	f7ff ff94 	bl	80045f0 <std>
 80046c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80046cc:	2201      	movs	r2, #1
 80046ce:	2109      	movs	r1, #9
 80046d0:	f7ff ff8e 	bl	80045f0 <std>
 80046d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80046d8:	2202      	movs	r2, #2
 80046da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046de:	2112      	movs	r1, #18
 80046e0:	f7ff bf86 	b.w	80045f0 <std>
 80046e4:	200004f4 	.word	0x200004f4
 80046e8:	200003bc 	.word	0x200003bc
 80046ec:	0800465d 	.word	0x0800465d

080046f0 <__sfp_lock_acquire>:
 80046f0:	4801      	ldr	r0, [pc, #4]	; (80046f8 <__sfp_lock_acquire+0x8>)
 80046f2:	f000 b920 	b.w	8004936 <__retarget_lock_acquire_recursive>
 80046f6:	bf00      	nop
 80046f8:	200004fd 	.word	0x200004fd

080046fc <__sfp_lock_release>:
 80046fc:	4801      	ldr	r0, [pc, #4]	; (8004704 <__sfp_lock_release+0x8>)
 80046fe:	f000 b91b 	b.w	8004938 <__retarget_lock_release_recursive>
 8004702:	bf00      	nop
 8004704:	200004fd 	.word	0x200004fd

08004708 <__sinit>:
 8004708:	b510      	push	{r4, lr}
 800470a:	4604      	mov	r4, r0
 800470c:	f7ff fff0 	bl	80046f0 <__sfp_lock_acquire>
 8004710:	6a23      	ldr	r3, [r4, #32]
 8004712:	b11b      	cbz	r3, 800471c <__sinit+0x14>
 8004714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004718:	f7ff bff0 	b.w	80046fc <__sfp_lock_release>
 800471c:	4b04      	ldr	r3, [pc, #16]	; (8004730 <__sinit+0x28>)
 800471e:	6223      	str	r3, [r4, #32]
 8004720:	4b04      	ldr	r3, [pc, #16]	; (8004734 <__sinit+0x2c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f5      	bne.n	8004714 <__sinit+0xc>
 8004728:	f7ff ffc4 	bl	80046b4 <global_stdio_init.part.0>
 800472c:	e7f2      	b.n	8004714 <__sinit+0xc>
 800472e:	bf00      	nop
 8004730:	08004675 	.word	0x08004675
 8004734:	200004f4 	.word	0x200004f4

08004738 <_fwalk_sglue>:
 8004738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800473c:	4607      	mov	r7, r0
 800473e:	4688      	mov	r8, r1
 8004740:	4614      	mov	r4, r2
 8004742:	2600      	movs	r6, #0
 8004744:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004748:	f1b9 0901 	subs.w	r9, r9, #1
 800474c:	d505      	bpl.n	800475a <_fwalk_sglue+0x22>
 800474e:	6824      	ldr	r4, [r4, #0]
 8004750:	2c00      	cmp	r4, #0
 8004752:	d1f7      	bne.n	8004744 <_fwalk_sglue+0xc>
 8004754:	4630      	mov	r0, r6
 8004756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800475a:	89ab      	ldrh	r3, [r5, #12]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d907      	bls.n	8004770 <_fwalk_sglue+0x38>
 8004760:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004764:	3301      	adds	r3, #1
 8004766:	d003      	beq.n	8004770 <_fwalk_sglue+0x38>
 8004768:	4629      	mov	r1, r5
 800476a:	4638      	mov	r0, r7
 800476c:	47c0      	blx	r8
 800476e:	4306      	orrs	r6, r0
 8004770:	3568      	adds	r5, #104	; 0x68
 8004772:	e7e9      	b.n	8004748 <_fwalk_sglue+0x10>

08004774 <siprintf>:
 8004774:	b40e      	push	{r1, r2, r3}
 8004776:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800477a:	b500      	push	{lr}
 800477c:	b09c      	sub	sp, #112	; 0x70
 800477e:	ab1d      	add	r3, sp, #116	; 0x74
 8004780:	9002      	str	r0, [sp, #8]
 8004782:	9006      	str	r0, [sp, #24]
 8004784:	9107      	str	r1, [sp, #28]
 8004786:	9104      	str	r1, [sp, #16]
 8004788:	4808      	ldr	r0, [pc, #32]	; (80047ac <siprintf+0x38>)
 800478a:	4909      	ldr	r1, [pc, #36]	; (80047b0 <siprintf+0x3c>)
 800478c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004790:	9105      	str	r1, [sp, #20]
 8004792:	6800      	ldr	r0, [r0, #0]
 8004794:	a902      	add	r1, sp, #8
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	f001 fc18 	bl	8005fcc <_svfiprintf_r>
 800479c:	2200      	movs	r2, #0
 800479e:	9b02      	ldr	r3, [sp, #8]
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	b01c      	add	sp, #112	; 0x70
 80047a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047a8:	b003      	add	sp, #12
 80047aa:	4770      	bx	lr
 80047ac:	20000164 	.word	0x20000164
 80047b0:	ffff0208 	.word	0xffff0208

080047b4 <__sread>:
 80047b4:	b510      	push	{r4, lr}
 80047b6:	460c      	mov	r4, r1
 80047b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047bc:	f000 f86c 	bl	8004898 <_read_r>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	bfab      	itete	ge
 80047c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047c6:	89a3      	ldrhlt	r3, [r4, #12]
 80047c8:	181b      	addge	r3, r3, r0
 80047ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047ce:	bfac      	ite	ge
 80047d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80047d2:	81a3      	strhlt	r3, [r4, #12]
 80047d4:	bd10      	pop	{r4, pc}

080047d6 <__swrite>:
 80047d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047da:	461f      	mov	r7, r3
 80047dc:	898b      	ldrh	r3, [r1, #12]
 80047de:	4605      	mov	r5, r0
 80047e0:	05db      	lsls	r3, r3, #23
 80047e2:	460c      	mov	r4, r1
 80047e4:	4616      	mov	r6, r2
 80047e6:	d505      	bpl.n	80047f4 <__swrite+0x1e>
 80047e8:	2302      	movs	r3, #2
 80047ea:	2200      	movs	r2, #0
 80047ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f0:	f000 f840 	bl	8004874 <_lseek_r>
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	4632      	mov	r2, r6
 80047f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047fc:	81a3      	strh	r3, [r4, #12]
 80047fe:	4628      	mov	r0, r5
 8004800:	463b      	mov	r3, r7
 8004802:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800480a:	f000 b857 	b.w	80048bc <_write_r>

0800480e <__sseek>:
 800480e:	b510      	push	{r4, lr}
 8004810:	460c      	mov	r4, r1
 8004812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004816:	f000 f82d 	bl	8004874 <_lseek_r>
 800481a:	1c43      	adds	r3, r0, #1
 800481c:	89a3      	ldrh	r3, [r4, #12]
 800481e:	bf15      	itete	ne
 8004820:	6560      	strne	r0, [r4, #84]	; 0x54
 8004822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800482a:	81a3      	strheq	r3, [r4, #12]
 800482c:	bf18      	it	ne
 800482e:	81a3      	strhne	r3, [r4, #12]
 8004830:	bd10      	pop	{r4, pc}

08004832 <__sclose>:
 8004832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004836:	f000 b80d 	b.w	8004854 <_close_r>

0800483a <memset>:
 800483a:	4603      	mov	r3, r0
 800483c:	4402      	add	r2, r0
 800483e:	4293      	cmp	r3, r2
 8004840:	d100      	bne.n	8004844 <memset+0xa>
 8004842:	4770      	bx	lr
 8004844:	f803 1b01 	strb.w	r1, [r3], #1
 8004848:	e7f9      	b.n	800483e <memset+0x4>
	...

0800484c <_localeconv_r>:
 800484c:	4800      	ldr	r0, [pc, #0]	; (8004850 <_localeconv_r+0x4>)
 800484e:	4770      	bx	lr
 8004850:	20000258 	.word	0x20000258

08004854 <_close_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	2300      	movs	r3, #0
 8004858:	4d05      	ldr	r5, [pc, #20]	; (8004870 <_close_r+0x1c>)
 800485a:	4604      	mov	r4, r0
 800485c:	4608      	mov	r0, r1
 800485e:	602b      	str	r3, [r5, #0]
 8004860:	f7fc fc2b 	bl	80010ba <_close>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d102      	bne.n	800486e <_close_r+0x1a>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	b103      	cbz	r3, 800486e <_close_r+0x1a>
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	bd38      	pop	{r3, r4, r5, pc}
 8004870:	200004f8 	.word	0x200004f8

08004874 <_lseek_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	4604      	mov	r4, r0
 8004878:	4608      	mov	r0, r1
 800487a:	4611      	mov	r1, r2
 800487c:	2200      	movs	r2, #0
 800487e:	4d05      	ldr	r5, [pc, #20]	; (8004894 <_lseek_r+0x20>)
 8004880:	602a      	str	r2, [r5, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	f7fc fc3d 	bl	8001102 <_lseek>
 8004888:	1c43      	adds	r3, r0, #1
 800488a:	d102      	bne.n	8004892 <_lseek_r+0x1e>
 800488c:	682b      	ldr	r3, [r5, #0]
 800488e:	b103      	cbz	r3, 8004892 <_lseek_r+0x1e>
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	bd38      	pop	{r3, r4, r5, pc}
 8004894:	200004f8 	.word	0x200004f8

08004898 <_read_r>:
 8004898:	b538      	push	{r3, r4, r5, lr}
 800489a:	4604      	mov	r4, r0
 800489c:	4608      	mov	r0, r1
 800489e:	4611      	mov	r1, r2
 80048a0:	2200      	movs	r2, #0
 80048a2:	4d05      	ldr	r5, [pc, #20]	; (80048b8 <_read_r+0x20>)
 80048a4:	602a      	str	r2, [r5, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f7fc fbce 	bl	8001048 <_read>
 80048ac:	1c43      	adds	r3, r0, #1
 80048ae:	d102      	bne.n	80048b6 <_read_r+0x1e>
 80048b0:	682b      	ldr	r3, [r5, #0]
 80048b2:	b103      	cbz	r3, 80048b6 <_read_r+0x1e>
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	bd38      	pop	{r3, r4, r5, pc}
 80048b8:	200004f8 	.word	0x200004f8

080048bc <_write_r>:
 80048bc:	b538      	push	{r3, r4, r5, lr}
 80048be:	4604      	mov	r4, r0
 80048c0:	4608      	mov	r0, r1
 80048c2:	4611      	mov	r1, r2
 80048c4:	2200      	movs	r2, #0
 80048c6:	4d05      	ldr	r5, [pc, #20]	; (80048dc <_write_r+0x20>)
 80048c8:	602a      	str	r2, [r5, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	f7fc fbd9 	bl	8001082 <_write>
 80048d0:	1c43      	adds	r3, r0, #1
 80048d2:	d102      	bne.n	80048da <_write_r+0x1e>
 80048d4:	682b      	ldr	r3, [r5, #0]
 80048d6:	b103      	cbz	r3, 80048da <_write_r+0x1e>
 80048d8:	6023      	str	r3, [r4, #0]
 80048da:	bd38      	pop	{r3, r4, r5, pc}
 80048dc:	200004f8 	.word	0x200004f8

080048e0 <__errno>:
 80048e0:	4b01      	ldr	r3, [pc, #4]	; (80048e8 <__errno+0x8>)
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	20000164 	.word	0x20000164

080048ec <__libc_init_array>:
 80048ec:	b570      	push	{r4, r5, r6, lr}
 80048ee:	2600      	movs	r6, #0
 80048f0:	4d0c      	ldr	r5, [pc, #48]	; (8004924 <__libc_init_array+0x38>)
 80048f2:	4c0d      	ldr	r4, [pc, #52]	; (8004928 <__libc_init_array+0x3c>)
 80048f4:	1b64      	subs	r4, r4, r5
 80048f6:	10a4      	asrs	r4, r4, #2
 80048f8:	42a6      	cmp	r6, r4
 80048fa:	d109      	bne.n	8004910 <__libc_init_array+0x24>
 80048fc:	f002 f886 	bl	8006a0c <_init>
 8004900:	2600      	movs	r6, #0
 8004902:	4d0a      	ldr	r5, [pc, #40]	; (800492c <__libc_init_array+0x40>)
 8004904:	4c0a      	ldr	r4, [pc, #40]	; (8004930 <__libc_init_array+0x44>)
 8004906:	1b64      	subs	r4, r4, r5
 8004908:	10a4      	asrs	r4, r4, #2
 800490a:	42a6      	cmp	r6, r4
 800490c:	d105      	bne.n	800491a <__libc_init_array+0x2e>
 800490e:	bd70      	pop	{r4, r5, r6, pc}
 8004910:	f855 3b04 	ldr.w	r3, [r5], #4
 8004914:	4798      	blx	r3
 8004916:	3601      	adds	r6, #1
 8004918:	e7ee      	b.n	80048f8 <__libc_init_array+0xc>
 800491a:	f855 3b04 	ldr.w	r3, [r5], #4
 800491e:	4798      	blx	r3
 8004920:	3601      	adds	r6, #1
 8004922:	e7f2      	b.n	800490a <__libc_init_array+0x1e>
 8004924:	080073cc 	.word	0x080073cc
 8004928:	080073cc 	.word	0x080073cc
 800492c:	080073cc 	.word	0x080073cc
 8004930:	080073d0 	.word	0x080073d0

08004934 <__retarget_lock_init_recursive>:
 8004934:	4770      	bx	lr

08004936 <__retarget_lock_acquire_recursive>:
 8004936:	4770      	bx	lr

08004938 <__retarget_lock_release_recursive>:
 8004938:	4770      	bx	lr

0800493a <memchr>:
 800493a:	4603      	mov	r3, r0
 800493c:	b510      	push	{r4, lr}
 800493e:	b2c9      	uxtb	r1, r1
 8004940:	4402      	add	r2, r0
 8004942:	4293      	cmp	r3, r2
 8004944:	4618      	mov	r0, r3
 8004946:	d101      	bne.n	800494c <memchr+0x12>
 8004948:	2000      	movs	r0, #0
 800494a:	e003      	b.n	8004954 <memchr+0x1a>
 800494c:	7804      	ldrb	r4, [r0, #0]
 800494e:	3301      	adds	r3, #1
 8004950:	428c      	cmp	r4, r1
 8004952:	d1f6      	bne.n	8004942 <memchr+0x8>
 8004954:	bd10      	pop	{r4, pc}

08004956 <quorem>:
 8004956:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495a:	6903      	ldr	r3, [r0, #16]
 800495c:	690c      	ldr	r4, [r1, #16]
 800495e:	4607      	mov	r7, r0
 8004960:	42a3      	cmp	r3, r4
 8004962:	db7f      	blt.n	8004a64 <quorem+0x10e>
 8004964:	3c01      	subs	r4, #1
 8004966:	f100 0514 	add.w	r5, r0, #20
 800496a:	f101 0814 	add.w	r8, r1, #20
 800496e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004972:	9301      	str	r3, [sp, #4]
 8004974:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004978:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800497c:	3301      	adds	r3, #1
 800497e:	429a      	cmp	r2, r3
 8004980:	fbb2 f6f3 	udiv	r6, r2, r3
 8004984:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004988:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800498c:	d331      	bcc.n	80049f2 <quorem+0x9c>
 800498e:	f04f 0e00 	mov.w	lr, #0
 8004992:	4640      	mov	r0, r8
 8004994:	46ac      	mov	ip, r5
 8004996:	46f2      	mov	sl, lr
 8004998:	f850 2b04 	ldr.w	r2, [r0], #4
 800499c:	b293      	uxth	r3, r2
 800499e:	fb06 e303 	mla	r3, r6, r3, lr
 80049a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80049a6:	0c1a      	lsrs	r2, r3, #16
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	fb06 220e 	mla	r2, r6, lr, r2
 80049ae:	ebaa 0303 	sub.w	r3, sl, r3
 80049b2:	f8dc a000 	ldr.w	sl, [ip]
 80049b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80049ba:	fa1f fa8a 	uxth.w	sl, sl
 80049be:	4453      	add	r3, sl
 80049c0:	f8dc a000 	ldr.w	sl, [ip]
 80049c4:	b292      	uxth	r2, r2
 80049c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80049ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049d4:	4581      	cmp	r9, r0
 80049d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80049da:	f84c 3b04 	str.w	r3, [ip], #4
 80049de:	d2db      	bcs.n	8004998 <quorem+0x42>
 80049e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80049e4:	b92b      	cbnz	r3, 80049f2 <quorem+0x9c>
 80049e6:	9b01      	ldr	r3, [sp, #4]
 80049e8:	3b04      	subs	r3, #4
 80049ea:	429d      	cmp	r5, r3
 80049ec:	461a      	mov	r2, r3
 80049ee:	d32d      	bcc.n	8004a4c <quorem+0xf6>
 80049f0:	613c      	str	r4, [r7, #16]
 80049f2:	4638      	mov	r0, r7
 80049f4:	f001 f992 	bl	8005d1c <__mcmp>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	db23      	blt.n	8004a44 <quorem+0xee>
 80049fc:	4629      	mov	r1, r5
 80049fe:	2000      	movs	r0, #0
 8004a00:	3601      	adds	r6, #1
 8004a02:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a06:	f8d1 c000 	ldr.w	ip, [r1]
 8004a0a:	b293      	uxth	r3, r2
 8004a0c:	1ac3      	subs	r3, r0, r3
 8004a0e:	0c12      	lsrs	r2, r2, #16
 8004a10:	fa1f f08c 	uxth.w	r0, ip
 8004a14:	4403      	add	r3, r0
 8004a16:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004a1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a24:	45c1      	cmp	r9, r8
 8004a26:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004a2a:	f841 3b04 	str.w	r3, [r1], #4
 8004a2e:	d2e8      	bcs.n	8004a02 <quorem+0xac>
 8004a30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a38:	b922      	cbnz	r2, 8004a44 <quorem+0xee>
 8004a3a:	3b04      	subs	r3, #4
 8004a3c:	429d      	cmp	r5, r3
 8004a3e:	461a      	mov	r2, r3
 8004a40:	d30a      	bcc.n	8004a58 <quorem+0x102>
 8004a42:	613c      	str	r4, [r7, #16]
 8004a44:	4630      	mov	r0, r6
 8004a46:	b003      	add	sp, #12
 8004a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	3b04      	subs	r3, #4
 8004a50:	2a00      	cmp	r2, #0
 8004a52:	d1cd      	bne.n	80049f0 <quorem+0x9a>
 8004a54:	3c01      	subs	r4, #1
 8004a56:	e7c8      	b.n	80049ea <quorem+0x94>
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	3b04      	subs	r3, #4
 8004a5c:	2a00      	cmp	r2, #0
 8004a5e:	d1f0      	bne.n	8004a42 <quorem+0xec>
 8004a60:	3c01      	subs	r4, #1
 8004a62:	e7eb      	b.n	8004a3c <quorem+0xe6>
 8004a64:	2000      	movs	r0, #0
 8004a66:	e7ee      	b.n	8004a46 <quorem+0xf0>

08004a68 <_dtoa_r>:
 8004a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6c:	4616      	mov	r6, r2
 8004a6e:	461f      	mov	r7, r3
 8004a70:	69c4      	ldr	r4, [r0, #28]
 8004a72:	b099      	sub	sp, #100	; 0x64
 8004a74:	4605      	mov	r5, r0
 8004a76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004a7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004a7e:	b974      	cbnz	r4, 8004a9e <_dtoa_r+0x36>
 8004a80:	2010      	movs	r0, #16
 8004a82:	f000 fe1d 	bl	80056c0 <malloc>
 8004a86:	4602      	mov	r2, r0
 8004a88:	61e8      	str	r0, [r5, #28]
 8004a8a:	b920      	cbnz	r0, 8004a96 <_dtoa_r+0x2e>
 8004a8c:	21ef      	movs	r1, #239	; 0xef
 8004a8e:	4bac      	ldr	r3, [pc, #688]	; (8004d40 <_dtoa_r+0x2d8>)
 8004a90:	48ac      	ldr	r0, [pc, #688]	; (8004d44 <_dtoa_r+0x2dc>)
 8004a92:	f001 fc7b 	bl	800638c <__assert_func>
 8004a96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a9a:	6004      	str	r4, [r0, #0]
 8004a9c:	60c4      	str	r4, [r0, #12]
 8004a9e:	69eb      	ldr	r3, [r5, #28]
 8004aa0:	6819      	ldr	r1, [r3, #0]
 8004aa2:	b151      	cbz	r1, 8004aba <_dtoa_r+0x52>
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	4093      	lsls	r3, r2
 8004aaa:	604a      	str	r2, [r1, #4]
 8004aac:	608b      	str	r3, [r1, #8]
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f000 fefa 	bl	80058a8 <_Bfree>
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	69eb      	ldr	r3, [r5, #28]
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	1e3b      	subs	r3, r7, #0
 8004abc:	bfaf      	iteee	ge
 8004abe:	2300      	movge	r3, #0
 8004ac0:	2201      	movlt	r2, #1
 8004ac2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ac6:	9305      	strlt	r3, [sp, #20]
 8004ac8:	bfa8      	it	ge
 8004aca:	f8c8 3000 	strge.w	r3, [r8]
 8004ace:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004ad2:	4b9d      	ldr	r3, [pc, #628]	; (8004d48 <_dtoa_r+0x2e0>)
 8004ad4:	bfb8      	it	lt
 8004ad6:	f8c8 2000 	strlt.w	r2, [r8]
 8004ada:	ea33 0309 	bics.w	r3, r3, r9
 8004ade:	d119      	bne.n	8004b14 <_dtoa_r+0xac>
 8004ae0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ae4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004aec:	4333      	orrs	r3, r6
 8004aee:	f000 8589 	beq.w	8005604 <_dtoa_r+0xb9c>
 8004af2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004af4:	b953      	cbnz	r3, 8004b0c <_dtoa_r+0xa4>
 8004af6:	4b95      	ldr	r3, [pc, #596]	; (8004d4c <_dtoa_r+0x2e4>)
 8004af8:	e023      	b.n	8004b42 <_dtoa_r+0xda>
 8004afa:	4b95      	ldr	r3, [pc, #596]	; (8004d50 <_dtoa_r+0x2e8>)
 8004afc:	9303      	str	r3, [sp, #12]
 8004afe:	3308      	adds	r3, #8
 8004b00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	9803      	ldr	r0, [sp, #12]
 8004b06:	b019      	add	sp, #100	; 0x64
 8004b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0c:	4b8f      	ldr	r3, [pc, #572]	; (8004d4c <_dtoa_r+0x2e4>)
 8004b0e:	9303      	str	r3, [sp, #12]
 8004b10:	3303      	adds	r3, #3
 8004b12:	e7f5      	b.n	8004b00 <_dtoa_r+0x98>
 8004b14:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004b18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004b1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b20:	2200      	movs	r2, #0
 8004b22:	2300      	movs	r3, #0
 8004b24:	f7fb ff40 	bl	80009a8 <__aeabi_dcmpeq>
 8004b28:	4680      	mov	r8, r0
 8004b2a:	b160      	cbz	r0, 8004b46 <_dtoa_r+0xde>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 8562 	beq.w	80055fe <_dtoa_r+0xb96>
 8004b3a:	4b86      	ldr	r3, [pc, #536]	; (8004d54 <_dtoa_r+0x2ec>)
 8004b3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	9303      	str	r3, [sp, #12]
 8004b44:	e7de      	b.n	8004b04 <_dtoa_r+0x9c>
 8004b46:	ab16      	add	r3, sp, #88	; 0x58
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	ab17      	add	r3, sp, #92	; 0x5c
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	4628      	mov	r0, r5
 8004b50:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004b54:	f001 f98a 	bl	8005e6c <__d2b>
 8004b58:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004b5c:	4682      	mov	sl, r0
 8004b5e:	2c00      	cmp	r4, #0
 8004b60:	d07e      	beq.n	8004c60 <_dtoa_r+0x1f8>
 8004b62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b68:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b70:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004b74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004b78:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	2200      	movs	r2, #0
 8004b80:	4b75      	ldr	r3, [pc, #468]	; (8004d58 <_dtoa_r+0x2f0>)
 8004b82:	f7fb faf1 	bl	8000168 <__aeabi_dsub>
 8004b86:	a368      	add	r3, pc, #416	; (adr r3, 8004d28 <_dtoa_r+0x2c0>)
 8004b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8c:	f7fb fca4 	bl	80004d8 <__aeabi_dmul>
 8004b90:	a367      	add	r3, pc, #412	; (adr r3, 8004d30 <_dtoa_r+0x2c8>)
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	f7fb fae9 	bl	800016c <__adddf3>
 8004b9a:	4606      	mov	r6, r0
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	460f      	mov	r7, r1
 8004ba0:	f7fb fc30 	bl	8000404 <__aeabi_i2d>
 8004ba4:	a364      	add	r3, pc, #400	; (adr r3, 8004d38 <_dtoa_r+0x2d0>)
 8004ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004baa:	f7fb fc95 	bl	80004d8 <__aeabi_dmul>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	4639      	mov	r1, r7
 8004bb6:	f7fb fad9 	bl	800016c <__adddf3>
 8004bba:	4606      	mov	r6, r0
 8004bbc:	460f      	mov	r7, r1
 8004bbe:	f7fb ff3b 	bl	8000a38 <__aeabi_d2iz>
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	4683      	mov	fp, r0
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	4630      	mov	r0, r6
 8004bca:	4639      	mov	r1, r7
 8004bcc:	f7fb fef6 	bl	80009bc <__aeabi_dcmplt>
 8004bd0:	b148      	cbz	r0, 8004be6 <_dtoa_r+0x17e>
 8004bd2:	4658      	mov	r0, fp
 8004bd4:	f7fb fc16 	bl	8000404 <__aeabi_i2d>
 8004bd8:	4632      	mov	r2, r6
 8004bda:	463b      	mov	r3, r7
 8004bdc:	f7fb fee4 	bl	80009a8 <__aeabi_dcmpeq>
 8004be0:	b908      	cbnz	r0, 8004be6 <_dtoa_r+0x17e>
 8004be2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004be6:	f1bb 0f16 	cmp.w	fp, #22
 8004bea:	d857      	bhi.n	8004c9c <_dtoa_r+0x234>
 8004bec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004bf0:	4b5a      	ldr	r3, [pc, #360]	; (8004d5c <_dtoa_r+0x2f4>)
 8004bf2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfa:	f7fb fedf 	bl	80009bc <__aeabi_dcmplt>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d04e      	beq.n	8004ca0 <_dtoa_r+0x238>
 8004c02:	2300      	movs	r3, #0
 8004c04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c08:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004c0c:	1b1b      	subs	r3, r3, r4
 8004c0e:	1e5a      	subs	r2, r3, #1
 8004c10:	bf46      	itte	mi
 8004c12:	f1c3 0901 	rsbmi	r9, r3, #1
 8004c16:	2300      	movmi	r3, #0
 8004c18:	f04f 0900 	movpl.w	r9, #0
 8004c1c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c1e:	bf48      	it	mi
 8004c20:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004c22:	f1bb 0f00 	cmp.w	fp, #0
 8004c26:	db3d      	blt.n	8004ca4 <_dtoa_r+0x23c>
 8004c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c2a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004c2e:	445b      	add	r3, fp
 8004c30:	9309      	str	r3, [sp, #36]	; 0x24
 8004c32:	2300      	movs	r3, #0
 8004c34:	930a      	str	r3, [sp, #40]	; 0x28
 8004c36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c38:	2b09      	cmp	r3, #9
 8004c3a:	d867      	bhi.n	8004d0c <_dtoa_r+0x2a4>
 8004c3c:	2b05      	cmp	r3, #5
 8004c3e:	bfc4      	itt	gt
 8004c40:	3b04      	subgt	r3, #4
 8004c42:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004c44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c46:	bfc8      	it	gt
 8004c48:	2400      	movgt	r4, #0
 8004c4a:	f1a3 0302 	sub.w	r3, r3, #2
 8004c4e:	bfd8      	it	le
 8004c50:	2401      	movle	r4, #1
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	f200 8086 	bhi.w	8004d64 <_dtoa_r+0x2fc>
 8004c58:	e8df f003 	tbb	[pc, r3]
 8004c5c:	5637392c 	.word	0x5637392c
 8004c60:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004c64:	441c      	add	r4, r3
 8004c66:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	bfc1      	itttt	gt
 8004c6e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004c72:	fa09 f903 	lslgt.w	r9, r9, r3
 8004c76:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8004c7a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004c7e:	bfd6      	itet	le
 8004c80:	f1c3 0320 	rsble	r3, r3, #32
 8004c84:	ea49 0003 	orrgt.w	r0, r9, r3
 8004c88:	fa06 f003 	lslle.w	r0, r6, r3
 8004c8c:	f7fb fbaa 	bl	80003e4 <__aeabi_ui2d>
 8004c90:	2201      	movs	r2, #1
 8004c92:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004c96:	3c01      	subs	r4, #1
 8004c98:	9213      	str	r2, [sp, #76]	; 0x4c
 8004c9a:	e76f      	b.n	8004b7c <_dtoa_r+0x114>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e7b3      	b.n	8004c08 <_dtoa_r+0x1a0>
 8004ca0:	900f      	str	r0, [sp, #60]	; 0x3c
 8004ca2:	e7b2      	b.n	8004c0a <_dtoa_r+0x1a2>
 8004ca4:	f1cb 0300 	rsb	r3, fp, #0
 8004ca8:	930a      	str	r3, [sp, #40]	; 0x28
 8004caa:	2300      	movs	r3, #0
 8004cac:	eba9 090b 	sub.w	r9, r9, fp
 8004cb0:	930e      	str	r3, [sp, #56]	; 0x38
 8004cb2:	e7c0      	b.n	8004c36 <_dtoa_r+0x1ce>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	dc55      	bgt.n	8004d6a <_dtoa_r+0x302>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	9306      	str	r3, [sp, #24]
 8004cc4:	9308      	str	r3, [sp, #32]
 8004cc6:	9223      	str	r2, [sp, #140]	; 0x8c
 8004cc8:	e00b      	b.n	8004ce2 <_dtoa_r+0x27a>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e7f3      	b.n	8004cb6 <_dtoa_r+0x24e>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cd4:	445b      	add	r3, fp
 8004cd6:	9306      	str	r3, [sp, #24]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	9308      	str	r3, [sp, #32]
 8004cde:	bfb8      	it	lt
 8004ce0:	2301      	movlt	r3, #1
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	69e8      	ldr	r0, [r5, #28]
 8004ce8:	f102 0614 	add.w	r6, r2, #20
 8004cec:	429e      	cmp	r6, r3
 8004cee:	d940      	bls.n	8004d72 <_dtoa_r+0x30a>
 8004cf0:	6041      	str	r1, [r0, #4]
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	f000 fd98 	bl	8005828 <_Balloc>
 8004cf8:	9003      	str	r0, [sp, #12]
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	d13c      	bne.n	8004d78 <_dtoa_r+0x310>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	f240 11af 	movw	r1, #431	; 0x1af
 8004d04:	4b16      	ldr	r3, [pc, #88]	; (8004d60 <_dtoa_r+0x2f8>)
 8004d06:	e6c3      	b.n	8004a90 <_dtoa_r+0x28>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e7e1      	b.n	8004cd0 <_dtoa_r+0x268>
 8004d0c:	2401      	movs	r4, #1
 8004d0e:	2300      	movs	r3, #0
 8004d10:	940b      	str	r4, [sp, #44]	; 0x2c
 8004d12:	9322      	str	r3, [sp, #136]	; 0x88
 8004d14:	f04f 33ff 	mov.w	r3, #4294967295
 8004d18:	2200      	movs	r2, #0
 8004d1a:	9306      	str	r3, [sp, #24]
 8004d1c:	9308      	str	r3, [sp, #32]
 8004d1e:	2312      	movs	r3, #18
 8004d20:	e7d1      	b.n	8004cc6 <_dtoa_r+0x25e>
 8004d22:	bf00      	nop
 8004d24:	f3af 8000 	nop.w
 8004d28:	636f4361 	.word	0x636f4361
 8004d2c:	3fd287a7 	.word	0x3fd287a7
 8004d30:	8b60c8b3 	.word	0x8b60c8b3
 8004d34:	3fc68a28 	.word	0x3fc68a28
 8004d38:	509f79fb 	.word	0x509f79fb
 8004d3c:	3fd34413 	.word	0x3fd34413
 8004d40:	0800709d 	.word	0x0800709d
 8004d44:	080070b4 	.word	0x080070b4
 8004d48:	7ff00000 	.word	0x7ff00000
 8004d4c:	08007099 	.word	0x08007099
 8004d50:	08007090 	.word	0x08007090
 8004d54:	0800706d 	.word	0x0800706d
 8004d58:	3ff80000 	.word	0x3ff80000
 8004d5c:	080071a0 	.word	0x080071a0
 8004d60:	0800710c 	.word	0x0800710c
 8004d64:	2301      	movs	r3, #1
 8004d66:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d68:	e7d4      	b.n	8004d14 <_dtoa_r+0x2ac>
 8004d6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d6c:	9306      	str	r3, [sp, #24]
 8004d6e:	9308      	str	r3, [sp, #32]
 8004d70:	e7b7      	b.n	8004ce2 <_dtoa_r+0x27a>
 8004d72:	3101      	adds	r1, #1
 8004d74:	0052      	lsls	r2, r2, #1
 8004d76:	e7b7      	b.n	8004ce8 <_dtoa_r+0x280>
 8004d78:	69eb      	ldr	r3, [r5, #28]
 8004d7a:	9a03      	ldr	r2, [sp, #12]
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	9b08      	ldr	r3, [sp, #32]
 8004d80:	2b0e      	cmp	r3, #14
 8004d82:	f200 80a8 	bhi.w	8004ed6 <_dtoa_r+0x46e>
 8004d86:	2c00      	cmp	r4, #0
 8004d88:	f000 80a5 	beq.w	8004ed6 <_dtoa_r+0x46e>
 8004d8c:	f1bb 0f00 	cmp.w	fp, #0
 8004d90:	dd34      	ble.n	8004dfc <_dtoa_r+0x394>
 8004d92:	4b9a      	ldr	r3, [pc, #616]	; (8004ffc <_dtoa_r+0x594>)
 8004d94:	f00b 020f 	and.w	r2, fp, #15
 8004d98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004da0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004da4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004da8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004dac:	d016      	beq.n	8004ddc <_dtoa_r+0x374>
 8004dae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004db2:	4b93      	ldr	r3, [pc, #588]	; (8005000 <_dtoa_r+0x598>)
 8004db4:	2703      	movs	r7, #3
 8004db6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004dba:	f7fb fcb7 	bl	800072c <__aeabi_ddiv>
 8004dbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004dc2:	f004 040f 	and.w	r4, r4, #15
 8004dc6:	4e8e      	ldr	r6, [pc, #568]	; (8005000 <_dtoa_r+0x598>)
 8004dc8:	b954      	cbnz	r4, 8004de0 <_dtoa_r+0x378>
 8004dca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004dce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dd2:	f7fb fcab 	bl	800072c <__aeabi_ddiv>
 8004dd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004dda:	e029      	b.n	8004e30 <_dtoa_r+0x3c8>
 8004ddc:	2702      	movs	r7, #2
 8004dde:	e7f2      	b.n	8004dc6 <_dtoa_r+0x35e>
 8004de0:	07e1      	lsls	r1, r4, #31
 8004de2:	d508      	bpl.n	8004df6 <_dtoa_r+0x38e>
 8004de4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004de8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004dec:	f7fb fb74 	bl	80004d8 <__aeabi_dmul>
 8004df0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004df4:	3701      	adds	r7, #1
 8004df6:	1064      	asrs	r4, r4, #1
 8004df8:	3608      	adds	r6, #8
 8004dfa:	e7e5      	b.n	8004dc8 <_dtoa_r+0x360>
 8004dfc:	f000 80a5 	beq.w	8004f4a <_dtoa_r+0x4e2>
 8004e00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e04:	f1cb 0400 	rsb	r4, fp, #0
 8004e08:	4b7c      	ldr	r3, [pc, #496]	; (8004ffc <_dtoa_r+0x594>)
 8004e0a:	f004 020f 	and.w	r2, r4, #15
 8004e0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e16:	f7fb fb5f 	bl	80004d8 <__aeabi_dmul>
 8004e1a:	2702      	movs	r7, #2
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e22:	4e77      	ldr	r6, [pc, #476]	; (8005000 <_dtoa_r+0x598>)
 8004e24:	1124      	asrs	r4, r4, #4
 8004e26:	2c00      	cmp	r4, #0
 8004e28:	f040 8084 	bne.w	8004f34 <_dtoa_r+0x4cc>
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1d2      	bne.n	8004dd6 <_dtoa_r+0x36e>
 8004e30:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004e34:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004e38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 8087 	beq.w	8004f4e <_dtoa_r+0x4e6>
 8004e40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e44:	2200      	movs	r2, #0
 8004e46:	4b6f      	ldr	r3, [pc, #444]	; (8005004 <_dtoa_r+0x59c>)
 8004e48:	f7fb fdb8 	bl	80009bc <__aeabi_dcmplt>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d07e      	beq.n	8004f4e <_dtoa_r+0x4e6>
 8004e50:	9b08      	ldr	r3, [sp, #32]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d07b      	beq.n	8004f4e <_dtoa_r+0x4e6>
 8004e56:	9b06      	ldr	r3, [sp, #24]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	dd38      	ble.n	8004ece <_dtoa_r+0x466>
 8004e5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e60:	2200      	movs	r2, #0
 8004e62:	4b69      	ldr	r3, [pc, #420]	; (8005008 <_dtoa_r+0x5a0>)
 8004e64:	f7fb fb38 	bl	80004d8 <__aeabi_dmul>
 8004e68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e6c:	9c06      	ldr	r4, [sp, #24]
 8004e6e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8004e72:	3701      	adds	r7, #1
 8004e74:	4638      	mov	r0, r7
 8004e76:	f7fb fac5 	bl	8000404 <__aeabi_i2d>
 8004e7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e7e:	f7fb fb2b 	bl	80004d8 <__aeabi_dmul>
 8004e82:	2200      	movs	r2, #0
 8004e84:	4b61      	ldr	r3, [pc, #388]	; (800500c <_dtoa_r+0x5a4>)
 8004e86:	f7fb f971 	bl	800016c <__adddf3>
 8004e8a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004e8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e92:	9611      	str	r6, [sp, #68]	; 0x44
 8004e94:	2c00      	cmp	r4, #0
 8004e96:	d15d      	bne.n	8004f54 <_dtoa_r+0x4ec>
 8004e98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	4b5c      	ldr	r3, [pc, #368]	; (8005010 <_dtoa_r+0x5a8>)
 8004ea0:	f7fb f962 	bl	8000168 <__aeabi_dsub>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004eac:	4633      	mov	r3, r6
 8004eae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004eb0:	f7fb fda2 	bl	80009f8 <__aeabi_dcmpgt>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	f040 8295 	bne.w	80053e4 <_dtoa_r+0x97c>
 8004eba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ebe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ec0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004ec4:	f7fb fd7a 	bl	80009bc <__aeabi_dcmplt>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	f040 8289 	bne.w	80053e0 <_dtoa_r+0x978>
 8004ece:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004ed2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004ed6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f2c0 8151 	blt.w	8005180 <_dtoa_r+0x718>
 8004ede:	f1bb 0f0e 	cmp.w	fp, #14
 8004ee2:	f300 814d 	bgt.w	8005180 <_dtoa_r+0x718>
 8004ee6:	4b45      	ldr	r3, [pc, #276]	; (8004ffc <_dtoa_r+0x594>)
 8004ee8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004eec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ef0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004ef4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f280 80da 	bge.w	80050b0 <_dtoa_r+0x648>
 8004efc:	9b08      	ldr	r3, [sp, #32]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f300 80d6 	bgt.w	80050b0 <_dtoa_r+0x648>
 8004f04:	f040 826b 	bne.w	80053de <_dtoa_r+0x976>
 8004f08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	4b40      	ldr	r3, [pc, #256]	; (8005010 <_dtoa_r+0x5a8>)
 8004f10:	f7fb fae2 	bl	80004d8 <__aeabi_dmul>
 8004f14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f18:	f7fb fd64 	bl	80009e4 <__aeabi_dcmpge>
 8004f1c:	9c08      	ldr	r4, [sp, #32]
 8004f1e:	4626      	mov	r6, r4
 8004f20:	2800      	cmp	r0, #0
 8004f22:	f040 8241 	bne.w	80053a8 <_dtoa_r+0x940>
 8004f26:	2331      	movs	r3, #49	; 0x31
 8004f28:	9f03      	ldr	r7, [sp, #12]
 8004f2a:	f10b 0b01 	add.w	fp, fp, #1
 8004f2e:	f807 3b01 	strb.w	r3, [r7], #1
 8004f32:	e23d      	b.n	80053b0 <_dtoa_r+0x948>
 8004f34:	07e2      	lsls	r2, r4, #31
 8004f36:	d505      	bpl.n	8004f44 <_dtoa_r+0x4dc>
 8004f38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f3c:	f7fb facc 	bl	80004d8 <__aeabi_dmul>
 8004f40:	2301      	movs	r3, #1
 8004f42:	3701      	adds	r7, #1
 8004f44:	1064      	asrs	r4, r4, #1
 8004f46:	3608      	adds	r6, #8
 8004f48:	e76d      	b.n	8004e26 <_dtoa_r+0x3be>
 8004f4a:	2702      	movs	r7, #2
 8004f4c:	e770      	b.n	8004e30 <_dtoa_r+0x3c8>
 8004f4e:	46d8      	mov	r8, fp
 8004f50:	9c08      	ldr	r4, [sp, #32]
 8004f52:	e78f      	b.n	8004e74 <_dtoa_r+0x40c>
 8004f54:	9903      	ldr	r1, [sp, #12]
 8004f56:	4b29      	ldr	r3, [pc, #164]	; (8004ffc <_dtoa_r+0x594>)
 8004f58:	4421      	add	r1, r4
 8004f5a:	9112      	str	r1, [sp, #72]	; 0x48
 8004f5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f5e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f62:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004f66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f6a:	2900      	cmp	r1, #0
 8004f6c:	d054      	beq.n	8005018 <_dtoa_r+0x5b0>
 8004f6e:	2000      	movs	r0, #0
 8004f70:	4928      	ldr	r1, [pc, #160]	; (8005014 <_dtoa_r+0x5ac>)
 8004f72:	f7fb fbdb 	bl	800072c <__aeabi_ddiv>
 8004f76:	463b      	mov	r3, r7
 8004f78:	4632      	mov	r2, r6
 8004f7a:	f7fb f8f5 	bl	8000168 <__aeabi_dsub>
 8004f7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f82:	9f03      	ldr	r7, [sp, #12]
 8004f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f88:	f7fb fd56 	bl	8000a38 <__aeabi_d2iz>
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	f7fb fa39 	bl	8000404 <__aeabi_i2d>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f9a:	f7fb f8e5 	bl	8000168 <__aeabi_dsub>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	3430      	adds	r4, #48	; 0x30
 8004fa4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004fa8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fac:	f807 4b01 	strb.w	r4, [r7], #1
 8004fb0:	f7fb fd04 	bl	80009bc <__aeabi_dcmplt>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	d173      	bne.n	80050a0 <_dtoa_r+0x638>
 8004fb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	4911      	ldr	r1, [pc, #68]	; (8005004 <_dtoa_r+0x59c>)
 8004fc0:	f7fb f8d2 	bl	8000168 <__aeabi_dsub>
 8004fc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fc8:	f7fb fcf8 	bl	80009bc <__aeabi_dcmplt>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	f040 80b6 	bne.w	800513e <_dtoa_r+0x6d6>
 8004fd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fd4:	429f      	cmp	r7, r3
 8004fd6:	f43f af7a 	beq.w	8004ece <_dtoa_r+0x466>
 8004fda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fde:	2200      	movs	r2, #0
 8004fe0:	4b09      	ldr	r3, [pc, #36]	; (8005008 <_dtoa_r+0x5a0>)
 8004fe2:	f7fb fa79 	bl	80004d8 <__aeabi_dmul>
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004fec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ff0:	4b05      	ldr	r3, [pc, #20]	; (8005008 <_dtoa_r+0x5a0>)
 8004ff2:	f7fb fa71 	bl	80004d8 <__aeabi_dmul>
 8004ff6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ffa:	e7c3      	b.n	8004f84 <_dtoa_r+0x51c>
 8004ffc:	080071a0 	.word	0x080071a0
 8005000:	08007178 	.word	0x08007178
 8005004:	3ff00000 	.word	0x3ff00000
 8005008:	40240000 	.word	0x40240000
 800500c:	401c0000 	.word	0x401c0000
 8005010:	40140000 	.word	0x40140000
 8005014:	3fe00000 	.word	0x3fe00000
 8005018:	4630      	mov	r0, r6
 800501a:	4639      	mov	r1, r7
 800501c:	f7fb fa5c 	bl	80004d8 <__aeabi_dmul>
 8005020:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005022:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005026:	9c03      	ldr	r4, [sp, #12]
 8005028:	9314      	str	r3, [sp, #80]	; 0x50
 800502a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800502e:	f7fb fd03 	bl	8000a38 <__aeabi_d2iz>
 8005032:	9015      	str	r0, [sp, #84]	; 0x54
 8005034:	f7fb f9e6 	bl	8000404 <__aeabi_i2d>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005040:	f7fb f892 	bl	8000168 <__aeabi_dsub>
 8005044:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005046:	4606      	mov	r6, r0
 8005048:	3330      	adds	r3, #48	; 0x30
 800504a:	f804 3b01 	strb.w	r3, [r4], #1
 800504e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005050:	460f      	mov	r7, r1
 8005052:	429c      	cmp	r4, r3
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	d124      	bne.n	80050a4 <_dtoa_r+0x63c>
 800505a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800505e:	4baf      	ldr	r3, [pc, #700]	; (800531c <_dtoa_r+0x8b4>)
 8005060:	f7fb f884 	bl	800016c <__adddf3>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4630      	mov	r0, r6
 800506a:	4639      	mov	r1, r7
 800506c:	f7fb fcc4 	bl	80009f8 <__aeabi_dcmpgt>
 8005070:	2800      	cmp	r0, #0
 8005072:	d163      	bne.n	800513c <_dtoa_r+0x6d4>
 8005074:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005078:	2000      	movs	r0, #0
 800507a:	49a8      	ldr	r1, [pc, #672]	; (800531c <_dtoa_r+0x8b4>)
 800507c:	f7fb f874 	bl	8000168 <__aeabi_dsub>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4630      	mov	r0, r6
 8005086:	4639      	mov	r1, r7
 8005088:	f7fb fc98 	bl	80009bc <__aeabi_dcmplt>
 800508c:	2800      	cmp	r0, #0
 800508e:	f43f af1e 	beq.w	8004ece <_dtoa_r+0x466>
 8005092:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005094:	1e7b      	subs	r3, r7, #1
 8005096:	9314      	str	r3, [sp, #80]	; 0x50
 8005098:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800509c:	2b30      	cmp	r3, #48	; 0x30
 800509e:	d0f8      	beq.n	8005092 <_dtoa_r+0x62a>
 80050a0:	46c3      	mov	fp, r8
 80050a2:	e03b      	b.n	800511c <_dtoa_r+0x6b4>
 80050a4:	4b9e      	ldr	r3, [pc, #632]	; (8005320 <_dtoa_r+0x8b8>)
 80050a6:	f7fb fa17 	bl	80004d8 <__aeabi_dmul>
 80050aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050ae:	e7bc      	b.n	800502a <_dtoa_r+0x5c2>
 80050b0:	9f03      	ldr	r7, [sp, #12]
 80050b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80050b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050ba:	4640      	mov	r0, r8
 80050bc:	4649      	mov	r1, r9
 80050be:	f7fb fb35 	bl	800072c <__aeabi_ddiv>
 80050c2:	f7fb fcb9 	bl	8000a38 <__aeabi_d2iz>
 80050c6:	4604      	mov	r4, r0
 80050c8:	f7fb f99c 	bl	8000404 <__aeabi_i2d>
 80050cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050d0:	f7fb fa02 	bl	80004d8 <__aeabi_dmul>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4640      	mov	r0, r8
 80050da:	4649      	mov	r1, r9
 80050dc:	f7fb f844 	bl	8000168 <__aeabi_dsub>
 80050e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80050e4:	f807 6b01 	strb.w	r6, [r7], #1
 80050e8:	9e03      	ldr	r6, [sp, #12]
 80050ea:	f8dd c020 	ldr.w	ip, [sp, #32]
 80050ee:	1bbe      	subs	r6, r7, r6
 80050f0:	45b4      	cmp	ip, r6
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	d136      	bne.n	8005166 <_dtoa_r+0x6fe>
 80050f8:	f7fb f838 	bl	800016c <__adddf3>
 80050fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005100:	4680      	mov	r8, r0
 8005102:	4689      	mov	r9, r1
 8005104:	f7fb fc78 	bl	80009f8 <__aeabi_dcmpgt>
 8005108:	bb58      	cbnz	r0, 8005162 <_dtoa_r+0x6fa>
 800510a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800510e:	4640      	mov	r0, r8
 8005110:	4649      	mov	r1, r9
 8005112:	f7fb fc49 	bl	80009a8 <__aeabi_dcmpeq>
 8005116:	b108      	cbz	r0, 800511c <_dtoa_r+0x6b4>
 8005118:	07e3      	lsls	r3, r4, #31
 800511a:	d422      	bmi.n	8005162 <_dtoa_r+0x6fa>
 800511c:	4651      	mov	r1, sl
 800511e:	4628      	mov	r0, r5
 8005120:	f000 fbc2 	bl	80058a8 <_Bfree>
 8005124:	2300      	movs	r3, #0
 8005126:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005128:	703b      	strb	r3, [r7, #0]
 800512a:	f10b 0301 	add.w	r3, fp, #1
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005132:	2b00      	cmp	r3, #0
 8005134:	f43f ace6 	beq.w	8004b04 <_dtoa_r+0x9c>
 8005138:	601f      	str	r7, [r3, #0]
 800513a:	e4e3      	b.n	8004b04 <_dtoa_r+0x9c>
 800513c:	4627      	mov	r7, r4
 800513e:	463b      	mov	r3, r7
 8005140:	461f      	mov	r7, r3
 8005142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005146:	2a39      	cmp	r2, #57	; 0x39
 8005148:	d107      	bne.n	800515a <_dtoa_r+0x6f2>
 800514a:	9a03      	ldr	r2, [sp, #12]
 800514c:	429a      	cmp	r2, r3
 800514e:	d1f7      	bne.n	8005140 <_dtoa_r+0x6d8>
 8005150:	2230      	movs	r2, #48	; 0x30
 8005152:	9903      	ldr	r1, [sp, #12]
 8005154:	f108 0801 	add.w	r8, r8, #1
 8005158:	700a      	strb	r2, [r1, #0]
 800515a:	781a      	ldrb	r2, [r3, #0]
 800515c:	3201      	adds	r2, #1
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	e79e      	b.n	80050a0 <_dtoa_r+0x638>
 8005162:	46d8      	mov	r8, fp
 8005164:	e7eb      	b.n	800513e <_dtoa_r+0x6d6>
 8005166:	2200      	movs	r2, #0
 8005168:	4b6d      	ldr	r3, [pc, #436]	; (8005320 <_dtoa_r+0x8b8>)
 800516a:	f7fb f9b5 	bl	80004d8 <__aeabi_dmul>
 800516e:	2200      	movs	r2, #0
 8005170:	2300      	movs	r3, #0
 8005172:	4680      	mov	r8, r0
 8005174:	4689      	mov	r9, r1
 8005176:	f7fb fc17 	bl	80009a8 <__aeabi_dcmpeq>
 800517a:	2800      	cmp	r0, #0
 800517c:	d09b      	beq.n	80050b6 <_dtoa_r+0x64e>
 800517e:	e7cd      	b.n	800511c <_dtoa_r+0x6b4>
 8005180:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005182:	2a00      	cmp	r2, #0
 8005184:	f000 80c4 	beq.w	8005310 <_dtoa_r+0x8a8>
 8005188:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800518a:	2a01      	cmp	r2, #1
 800518c:	f300 80a8 	bgt.w	80052e0 <_dtoa_r+0x878>
 8005190:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005192:	2a00      	cmp	r2, #0
 8005194:	f000 80a0 	beq.w	80052d8 <_dtoa_r+0x870>
 8005198:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800519c:	464f      	mov	r7, r9
 800519e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80051a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051a2:	2101      	movs	r1, #1
 80051a4:	441a      	add	r2, r3
 80051a6:	4628      	mov	r0, r5
 80051a8:	4499      	add	r9, r3
 80051aa:	9209      	str	r2, [sp, #36]	; 0x24
 80051ac:	f000 fc32 	bl	8005a14 <__i2b>
 80051b0:	4606      	mov	r6, r0
 80051b2:	b15f      	cbz	r7, 80051cc <_dtoa_r+0x764>
 80051b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	dd08      	ble.n	80051cc <_dtoa_r+0x764>
 80051ba:	42bb      	cmp	r3, r7
 80051bc:	bfa8      	it	ge
 80051be:	463b      	movge	r3, r7
 80051c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051c2:	eba9 0903 	sub.w	r9, r9, r3
 80051c6:	1aff      	subs	r7, r7, r3
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	9309      	str	r3, [sp, #36]	; 0x24
 80051cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051ce:	b1f3      	cbz	r3, 800520e <_dtoa_r+0x7a6>
 80051d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 80a0 	beq.w	8005318 <_dtoa_r+0x8b0>
 80051d8:	2c00      	cmp	r4, #0
 80051da:	dd10      	ble.n	80051fe <_dtoa_r+0x796>
 80051dc:	4631      	mov	r1, r6
 80051de:	4622      	mov	r2, r4
 80051e0:	4628      	mov	r0, r5
 80051e2:	f000 fcd5 	bl	8005b90 <__pow5mult>
 80051e6:	4652      	mov	r2, sl
 80051e8:	4601      	mov	r1, r0
 80051ea:	4606      	mov	r6, r0
 80051ec:	4628      	mov	r0, r5
 80051ee:	f000 fc27 	bl	8005a40 <__multiply>
 80051f2:	4680      	mov	r8, r0
 80051f4:	4651      	mov	r1, sl
 80051f6:	4628      	mov	r0, r5
 80051f8:	f000 fb56 	bl	80058a8 <_Bfree>
 80051fc:	46c2      	mov	sl, r8
 80051fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005200:	1b1a      	subs	r2, r3, r4
 8005202:	d004      	beq.n	800520e <_dtoa_r+0x7a6>
 8005204:	4651      	mov	r1, sl
 8005206:	4628      	mov	r0, r5
 8005208:	f000 fcc2 	bl	8005b90 <__pow5mult>
 800520c:	4682      	mov	sl, r0
 800520e:	2101      	movs	r1, #1
 8005210:	4628      	mov	r0, r5
 8005212:	f000 fbff 	bl	8005a14 <__i2b>
 8005216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005218:	4604      	mov	r4, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	f340 8082 	ble.w	8005324 <_dtoa_r+0x8bc>
 8005220:	461a      	mov	r2, r3
 8005222:	4601      	mov	r1, r0
 8005224:	4628      	mov	r0, r5
 8005226:	f000 fcb3 	bl	8005b90 <__pow5mult>
 800522a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800522c:	4604      	mov	r4, r0
 800522e:	2b01      	cmp	r3, #1
 8005230:	dd7b      	ble.n	800532a <_dtoa_r+0x8c2>
 8005232:	f04f 0800 	mov.w	r8, #0
 8005236:	6923      	ldr	r3, [r4, #16]
 8005238:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800523c:	6918      	ldr	r0, [r3, #16]
 800523e:	f000 fb9b 	bl	8005978 <__hi0bits>
 8005242:	f1c0 0020 	rsb	r0, r0, #32
 8005246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005248:	4418      	add	r0, r3
 800524a:	f010 001f 	ands.w	r0, r0, #31
 800524e:	f000 8092 	beq.w	8005376 <_dtoa_r+0x90e>
 8005252:	f1c0 0320 	rsb	r3, r0, #32
 8005256:	2b04      	cmp	r3, #4
 8005258:	f340 8085 	ble.w	8005366 <_dtoa_r+0x8fe>
 800525c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800525e:	f1c0 001c 	rsb	r0, r0, #28
 8005262:	4403      	add	r3, r0
 8005264:	4481      	add	r9, r0
 8005266:	4407      	add	r7, r0
 8005268:	9309      	str	r3, [sp, #36]	; 0x24
 800526a:	f1b9 0f00 	cmp.w	r9, #0
 800526e:	dd05      	ble.n	800527c <_dtoa_r+0x814>
 8005270:	4651      	mov	r1, sl
 8005272:	464a      	mov	r2, r9
 8005274:	4628      	mov	r0, r5
 8005276:	f000 fce5 	bl	8005c44 <__lshift>
 800527a:	4682      	mov	sl, r0
 800527c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800527e:	2b00      	cmp	r3, #0
 8005280:	dd05      	ble.n	800528e <_dtoa_r+0x826>
 8005282:	4621      	mov	r1, r4
 8005284:	461a      	mov	r2, r3
 8005286:	4628      	mov	r0, r5
 8005288:	f000 fcdc 	bl	8005c44 <__lshift>
 800528c:	4604      	mov	r4, r0
 800528e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d072      	beq.n	800537a <_dtoa_r+0x912>
 8005294:	4621      	mov	r1, r4
 8005296:	4650      	mov	r0, sl
 8005298:	f000 fd40 	bl	8005d1c <__mcmp>
 800529c:	2800      	cmp	r0, #0
 800529e:	da6c      	bge.n	800537a <_dtoa_r+0x912>
 80052a0:	2300      	movs	r3, #0
 80052a2:	4651      	mov	r1, sl
 80052a4:	220a      	movs	r2, #10
 80052a6:	4628      	mov	r0, r5
 80052a8:	f000 fb20 	bl	80058ec <__multadd>
 80052ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052ae:	4682      	mov	sl, r0
 80052b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 81ac 	beq.w	8005612 <_dtoa_r+0xbaa>
 80052ba:	2300      	movs	r3, #0
 80052bc:	4631      	mov	r1, r6
 80052be:	220a      	movs	r2, #10
 80052c0:	4628      	mov	r0, r5
 80052c2:	f000 fb13 	bl	80058ec <__multadd>
 80052c6:	9b06      	ldr	r3, [sp, #24]
 80052c8:	4606      	mov	r6, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f300 8093 	bgt.w	80053f6 <_dtoa_r+0x98e>
 80052d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	dc59      	bgt.n	800538a <_dtoa_r+0x922>
 80052d6:	e08e      	b.n	80053f6 <_dtoa_r+0x98e>
 80052d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80052da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052de:	e75d      	b.n	800519c <_dtoa_r+0x734>
 80052e0:	9b08      	ldr	r3, [sp, #32]
 80052e2:	1e5c      	subs	r4, r3, #1
 80052e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052e6:	42a3      	cmp	r3, r4
 80052e8:	bfbf      	itttt	lt
 80052ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80052ec:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80052ee:	1ae3      	sublt	r3, r4, r3
 80052f0:	18d2      	addlt	r2, r2, r3
 80052f2:	bfa8      	it	ge
 80052f4:	1b1c      	subge	r4, r3, r4
 80052f6:	9b08      	ldr	r3, [sp, #32]
 80052f8:	bfbe      	ittt	lt
 80052fa:	940a      	strlt	r4, [sp, #40]	; 0x28
 80052fc:	920e      	strlt	r2, [sp, #56]	; 0x38
 80052fe:	2400      	movlt	r4, #0
 8005300:	2b00      	cmp	r3, #0
 8005302:	bfb5      	itete	lt
 8005304:	eba9 0703 	sublt.w	r7, r9, r3
 8005308:	464f      	movge	r7, r9
 800530a:	2300      	movlt	r3, #0
 800530c:	9b08      	ldrge	r3, [sp, #32]
 800530e:	e747      	b.n	80051a0 <_dtoa_r+0x738>
 8005310:	464f      	mov	r7, r9
 8005312:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005314:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005316:	e74c      	b.n	80051b2 <_dtoa_r+0x74a>
 8005318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800531a:	e773      	b.n	8005204 <_dtoa_r+0x79c>
 800531c:	3fe00000 	.word	0x3fe00000
 8005320:	40240000 	.word	0x40240000
 8005324:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005326:	2b01      	cmp	r3, #1
 8005328:	dc18      	bgt.n	800535c <_dtoa_r+0x8f4>
 800532a:	9b04      	ldr	r3, [sp, #16]
 800532c:	b9b3      	cbnz	r3, 800535c <_dtoa_r+0x8f4>
 800532e:	9b05      	ldr	r3, [sp, #20]
 8005330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005334:	b993      	cbnz	r3, 800535c <_dtoa_r+0x8f4>
 8005336:	9b05      	ldr	r3, [sp, #20]
 8005338:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800533c:	0d1b      	lsrs	r3, r3, #20
 800533e:	051b      	lsls	r3, r3, #20
 8005340:	b17b      	cbz	r3, 8005362 <_dtoa_r+0x8fa>
 8005342:	f04f 0801 	mov.w	r8, #1
 8005346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005348:	f109 0901 	add.w	r9, r9, #1
 800534c:	3301      	adds	r3, #1
 800534e:	9309      	str	r3, [sp, #36]	; 0x24
 8005350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005352:	2b00      	cmp	r3, #0
 8005354:	f47f af6f 	bne.w	8005236 <_dtoa_r+0x7ce>
 8005358:	2001      	movs	r0, #1
 800535a:	e774      	b.n	8005246 <_dtoa_r+0x7de>
 800535c:	f04f 0800 	mov.w	r8, #0
 8005360:	e7f6      	b.n	8005350 <_dtoa_r+0x8e8>
 8005362:	4698      	mov	r8, r3
 8005364:	e7f4      	b.n	8005350 <_dtoa_r+0x8e8>
 8005366:	d080      	beq.n	800526a <_dtoa_r+0x802>
 8005368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800536a:	331c      	adds	r3, #28
 800536c:	441a      	add	r2, r3
 800536e:	4499      	add	r9, r3
 8005370:	441f      	add	r7, r3
 8005372:	9209      	str	r2, [sp, #36]	; 0x24
 8005374:	e779      	b.n	800526a <_dtoa_r+0x802>
 8005376:	4603      	mov	r3, r0
 8005378:	e7f6      	b.n	8005368 <_dtoa_r+0x900>
 800537a:	9b08      	ldr	r3, [sp, #32]
 800537c:	2b00      	cmp	r3, #0
 800537e:	dc34      	bgt.n	80053ea <_dtoa_r+0x982>
 8005380:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005382:	2b02      	cmp	r3, #2
 8005384:	dd31      	ble.n	80053ea <_dtoa_r+0x982>
 8005386:	9b08      	ldr	r3, [sp, #32]
 8005388:	9306      	str	r3, [sp, #24]
 800538a:	9b06      	ldr	r3, [sp, #24]
 800538c:	b963      	cbnz	r3, 80053a8 <_dtoa_r+0x940>
 800538e:	4621      	mov	r1, r4
 8005390:	2205      	movs	r2, #5
 8005392:	4628      	mov	r0, r5
 8005394:	f000 faaa 	bl	80058ec <__multadd>
 8005398:	4601      	mov	r1, r0
 800539a:	4604      	mov	r4, r0
 800539c:	4650      	mov	r0, sl
 800539e:	f000 fcbd 	bl	8005d1c <__mcmp>
 80053a2:	2800      	cmp	r0, #0
 80053a4:	f73f adbf 	bgt.w	8004f26 <_dtoa_r+0x4be>
 80053a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053aa:	9f03      	ldr	r7, [sp, #12]
 80053ac:	ea6f 0b03 	mvn.w	fp, r3
 80053b0:	f04f 0800 	mov.w	r8, #0
 80053b4:	4621      	mov	r1, r4
 80053b6:	4628      	mov	r0, r5
 80053b8:	f000 fa76 	bl	80058a8 <_Bfree>
 80053bc:	2e00      	cmp	r6, #0
 80053be:	f43f aead 	beq.w	800511c <_dtoa_r+0x6b4>
 80053c2:	f1b8 0f00 	cmp.w	r8, #0
 80053c6:	d005      	beq.n	80053d4 <_dtoa_r+0x96c>
 80053c8:	45b0      	cmp	r8, r6
 80053ca:	d003      	beq.n	80053d4 <_dtoa_r+0x96c>
 80053cc:	4641      	mov	r1, r8
 80053ce:	4628      	mov	r0, r5
 80053d0:	f000 fa6a 	bl	80058a8 <_Bfree>
 80053d4:	4631      	mov	r1, r6
 80053d6:	4628      	mov	r0, r5
 80053d8:	f000 fa66 	bl	80058a8 <_Bfree>
 80053dc:	e69e      	b.n	800511c <_dtoa_r+0x6b4>
 80053de:	2400      	movs	r4, #0
 80053e0:	4626      	mov	r6, r4
 80053e2:	e7e1      	b.n	80053a8 <_dtoa_r+0x940>
 80053e4:	46c3      	mov	fp, r8
 80053e6:	4626      	mov	r6, r4
 80053e8:	e59d      	b.n	8004f26 <_dtoa_r+0x4be>
 80053ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80c8 	beq.w	8005582 <_dtoa_r+0xb1a>
 80053f2:	9b08      	ldr	r3, [sp, #32]
 80053f4:	9306      	str	r3, [sp, #24]
 80053f6:	2f00      	cmp	r7, #0
 80053f8:	dd05      	ble.n	8005406 <_dtoa_r+0x99e>
 80053fa:	4631      	mov	r1, r6
 80053fc:	463a      	mov	r2, r7
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 fc20 	bl	8005c44 <__lshift>
 8005404:	4606      	mov	r6, r0
 8005406:	f1b8 0f00 	cmp.w	r8, #0
 800540a:	d05b      	beq.n	80054c4 <_dtoa_r+0xa5c>
 800540c:	4628      	mov	r0, r5
 800540e:	6871      	ldr	r1, [r6, #4]
 8005410:	f000 fa0a 	bl	8005828 <_Balloc>
 8005414:	4607      	mov	r7, r0
 8005416:	b928      	cbnz	r0, 8005424 <_dtoa_r+0x9bc>
 8005418:	4602      	mov	r2, r0
 800541a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800541e:	4b81      	ldr	r3, [pc, #516]	; (8005624 <_dtoa_r+0xbbc>)
 8005420:	f7ff bb36 	b.w	8004a90 <_dtoa_r+0x28>
 8005424:	6932      	ldr	r2, [r6, #16]
 8005426:	f106 010c 	add.w	r1, r6, #12
 800542a:	3202      	adds	r2, #2
 800542c:	0092      	lsls	r2, r2, #2
 800542e:	300c      	adds	r0, #12
 8005430:	f000 ff9e 	bl	8006370 <memcpy>
 8005434:	2201      	movs	r2, #1
 8005436:	4639      	mov	r1, r7
 8005438:	4628      	mov	r0, r5
 800543a:	f000 fc03 	bl	8005c44 <__lshift>
 800543e:	46b0      	mov	r8, r6
 8005440:	4606      	mov	r6, r0
 8005442:	9b03      	ldr	r3, [sp, #12]
 8005444:	9a03      	ldr	r2, [sp, #12]
 8005446:	3301      	adds	r3, #1
 8005448:	9308      	str	r3, [sp, #32]
 800544a:	9b06      	ldr	r3, [sp, #24]
 800544c:	4413      	add	r3, r2
 800544e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005450:	9b04      	ldr	r3, [sp, #16]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	930a      	str	r3, [sp, #40]	; 0x28
 8005458:	9b08      	ldr	r3, [sp, #32]
 800545a:	4621      	mov	r1, r4
 800545c:	3b01      	subs	r3, #1
 800545e:	4650      	mov	r0, sl
 8005460:	9304      	str	r3, [sp, #16]
 8005462:	f7ff fa78 	bl	8004956 <quorem>
 8005466:	4641      	mov	r1, r8
 8005468:	9006      	str	r0, [sp, #24]
 800546a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800546e:	4650      	mov	r0, sl
 8005470:	f000 fc54 	bl	8005d1c <__mcmp>
 8005474:	4632      	mov	r2, r6
 8005476:	9009      	str	r0, [sp, #36]	; 0x24
 8005478:	4621      	mov	r1, r4
 800547a:	4628      	mov	r0, r5
 800547c:	f000 fc6a 	bl	8005d54 <__mdiff>
 8005480:	68c2      	ldr	r2, [r0, #12]
 8005482:	4607      	mov	r7, r0
 8005484:	bb02      	cbnz	r2, 80054c8 <_dtoa_r+0xa60>
 8005486:	4601      	mov	r1, r0
 8005488:	4650      	mov	r0, sl
 800548a:	f000 fc47 	bl	8005d1c <__mcmp>
 800548e:	4602      	mov	r2, r0
 8005490:	4639      	mov	r1, r7
 8005492:	4628      	mov	r0, r5
 8005494:	920c      	str	r2, [sp, #48]	; 0x30
 8005496:	f000 fa07 	bl	80058a8 <_Bfree>
 800549a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800549c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800549e:	9f08      	ldr	r7, [sp, #32]
 80054a0:	ea43 0102 	orr.w	r1, r3, r2
 80054a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054a6:	4319      	orrs	r1, r3
 80054a8:	d110      	bne.n	80054cc <_dtoa_r+0xa64>
 80054aa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80054ae:	d029      	beq.n	8005504 <_dtoa_r+0xa9c>
 80054b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	dd02      	ble.n	80054bc <_dtoa_r+0xa54>
 80054b6:	9b06      	ldr	r3, [sp, #24]
 80054b8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80054bc:	9b04      	ldr	r3, [sp, #16]
 80054be:	f883 9000 	strb.w	r9, [r3]
 80054c2:	e777      	b.n	80053b4 <_dtoa_r+0x94c>
 80054c4:	4630      	mov	r0, r6
 80054c6:	e7ba      	b.n	800543e <_dtoa_r+0x9d6>
 80054c8:	2201      	movs	r2, #1
 80054ca:	e7e1      	b.n	8005490 <_dtoa_r+0xa28>
 80054cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	db04      	blt.n	80054dc <_dtoa_r+0xa74>
 80054d2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80054d4:	430b      	orrs	r3, r1
 80054d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80054d8:	430b      	orrs	r3, r1
 80054da:	d120      	bne.n	800551e <_dtoa_r+0xab6>
 80054dc:	2a00      	cmp	r2, #0
 80054de:	dded      	ble.n	80054bc <_dtoa_r+0xa54>
 80054e0:	4651      	mov	r1, sl
 80054e2:	2201      	movs	r2, #1
 80054e4:	4628      	mov	r0, r5
 80054e6:	f000 fbad 	bl	8005c44 <__lshift>
 80054ea:	4621      	mov	r1, r4
 80054ec:	4682      	mov	sl, r0
 80054ee:	f000 fc15 	bl	8005d1c <__mcmp>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	dc03      	bgt.n	80054fe <_dtoa_r+0xa96>
 80054f6:	d1e1      	bne.n	80054bc <_dtoa_r+0xa54>
 80054f8:	f019 0f01 	tst.w	r9, #1
 80054fc:	d0de      	beq.n	80054bc <_dtoa_r+0xa54>
 80054fe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005502:	d1d8      	bne.n	80054b6 <_dtoa_r+0xa4e>
 8005504:	2339      	movs	r3, #57	; 0x39
 8005506:	9a04      	ldr	r2, [sp, #16]
 8005508:	7013      	strb	r3, [r2, #0]
 800550a:	463b      	mov	r3, r7
 800550c:	461f      	mov	r7, r3
 800550e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005512:	3b01      	subs	r3, #1
 8005514:	2a39      	cmp	r2, #57	; 0x39
 8005516:	d06b      	beq.n	80055f0 <_dtoa_r+0xb88>
 8005518:	3201      	adds	r2, #1
 800551a:	701a      	strb	r2, [r3, #0]
 800551c:	e74a      	b.n	80053b4 <_dtoa_r+0x94c>
 800551e:	2a00      	cmp	r2, #0
 8005520:	dd07      	ble.n	8005532 <_dtoa_r+0xaca>
 8005522:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005526:	d0ed      	beq.n	8005504 <_dtoa_r+0xa9c>
 8005528:	9a04      	ldr	r2, [sp, #16]
 800552a:	f109 0301 	add.w	r3, r9, #1
 800552e:	7013      	strb	r3, [r2, #0]
 8005530:	e740      	b.n	80053b4 <_dtoa_r+0x94c>
 8005532:	9b08      	ldr	r3, [sp, #32]
 8005534:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005536:	f803 9c01 	strb.w	r9, [r3, #-1]
 800553a:	4293      	cmp	r3, r2
 800553c:	d042      	beq.n	80055c4 <_dtoa_r+0xb5c>
 800553e:	4651      	mov	r1, sl
 8005540:	2300      	movs	r3, #0
 8005542:	220a      	movs	r2, #10
 8005544:	4628      	mov	r0, r5
 8005546:	f000 f9d1 	bl	80058ec <__multadd>
 800554a:	45b0      	cmp	r8, r6
 800554c:	4682      	mov	sl, r0
 800554e:	f04f 0300 	mov.w	r3, #0
 8005552:	f04f 020a 	mov.w	r2, #10
 8005556:	4641      	mov	r1, r8
 8005558:	4628      	mov	r0, r5
 800555a:	d107      	bne.n	800556c <_dtoa_r+0xb04>
 800555c:	f000 f9c6 	bl	80058ec <__multadd>
 8005560:	4680      	mov	r8, r0
 8005562:	4606      	mov	r6, r0
 8005564:	9b08      	ldr	r3, [sp, #32]
 8005566:	3301      	adds	r3, #1
 8005568:	9308      	str	r3, [sp, #32]
 800556a:	e775      	b.n	8005458 <_dtoa_r+0x9f0>
 800556c:	f000 f9be 	bl	80058ec <__multadd>
 8005570:	4631      	mov	r1, r6
 8005572:	4680      	mov	r8, r0
 8005574:	2300      	movs	r3, #0
 8005576:	220a      	movs	r2, #10
 8005578:	4628      	mov	r0, r5
 800557a:	f000 f9b7 	bl	80058ec <__multadd>
 800557e:	4606      	mov	r6, r0
 8005580:	e7f0      	b.n	8005564 <_dtoa_r+0xafc>
 8005582:	9b08      	ldr	r3, [sp, #32]
 8005584:	9306      	str	r3, [sp, #24]
 8005586:	9f03      	ldr	r7, [sp, #12]
 8005588:	4621      	mov	r1, r4
 800558a:	4650      	mov	r0, sl
 800558c:	f7ff f9e3 	bl	8004956 <quorem>
 8005590:	9b03      	ldr	r3, [sp, #12]
 8005592:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005596:	f807 9b01 	strb.w	r9, [r7], #1
 800559a:	1afa      	subs	r2, r7, r3
 800559c:	9b06      	ldr	r3, [sp, #24]
 800559e:	4293      	cmp	r3, r2
 80055a0:	dd07      	ble.n	80055b2 <_dtoa_r+0xb4a>
 80055a2:	4651      	mov	r1, sl
 80055a4:	2300      	movs	r3, #0
 80055a6:	220a      	movs	r2, #10
 80055a8:	4628      	mov	r0, r5
 80055aa:	f000 f99f 	bl	80058ec <__multadd>
 80055ae:	4682      	mov	sl, r0
 80055b0:	e7ea      	b.n	8005588 <_dtoa_r+0xb20>
 80055b2:	9b06      	ldr	r3, [sp, #24]
 80055b4:	f04f 0800 	mov.w	r8, #0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	bfcc      	ite	gt
 80055bc:	461f      	movgt	r7, r3
 80055be:	2701      	movle	r7, #1
 80055c0:	9b03      	ldr	r3, [sp, #12]
 80055c2:	441f      	add	r7, r3
 80055c4:	4651      	mov	r1, sl
 80055c6:	2201      	movs	r2, #1
 80055c8:	4628      	mov	r0, r5
 80055ca:	f000 fb3b 	bl	8005c44 <__lshift>
 80055ce:	4621      	mov	r1, r4
 80055d0:	4682      	mov	sl, r0
 80055d2:	f000 fba3 	bl	8005d1c <__mcmp>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	dc97      	bgt.n	800550a <_dtoa_r+0xaa2>
 80055da:	d102      	bne.n	80055e2 <_dtoa_r+0xb7a>
 80055dc:	f019 0f01 	tst.w	r9, #1
 80055e0:	d193      	bne.n	800550a <_dtoa_r+0xaa2>
 80055e2:	463b      	mov	r3, r7
 80055e4:	461f      	mov	r7, r3
 80055e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055ea:	2a30      	cmp	r2, #48	; 0x30
 80055ec:	d0fa      	beq.n	80055e4 <_dtoa_r+0xb7c>
 80055ee:	e6e1      	b.n	80053b4 <_dtoa_r+0x94c>
 80055f0:	9a03      	ldr	r2, [sp, #12]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d18a      	bne.n	800550c <_dtoa_r+0xaa4>
 80055f6:	2331      	movs	r3, #49	; 0x31
 80055f8:	f10b 0b01 	add.w	fp, fp, #1
 80055fc:	e797      	b.n	800552e <_dtoa_r+0xac6>
 80055fe:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <_dtoa_r+0xbc0>)
 8005600:	f7ff ba9f 	b.w	8004b42 <_dtoa_r+0xda>
 8005604:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005606:	2b00      	cmp	r3, #0
 8005608:	f47f aa77 	bne.w	8004afa <_dtoa_r+0x92>
 800560c:	4b07      	ldr	r3, [pc, #28]	; (800562c <_dtoa_r+0xbc4>)
 800560e:	f7ff ba98 	b.w	8004b42 <_dtoa_r+0xda>
 8005612:	9b06      	ldr	r3, [sp, #24]
 8005614:	2b00      	cmp	r3, #0
 8005616:	dcb6      	bgt.n	8005586 <_dtoa_r+0xb1e>
 8005618:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800561a:	2b02      	cmp	r3, #2
 800561c:	f73f aeb5 	bgt.w	800538a <_dtoa_r+0x922>
 8005620:	e7b1      	b.n	8005586 <_dtoa_r+0xb1e>
 8005622:	bf00      	nop
 8005624:	0800710c 	.word	0x0800710c
 8005628:	0800706c 	.word	0x0800706c
 800562c:	08007090 	.word	0x08007090

08005630 <_free_r>:
 8005630:	b538      	push	{r3, r4, r5, lr}
 8005632:	4605      	mov	r5, r0
 8005634:	2900      	cmp	r1, #0
 8005636:	d040      	beq.n	80056ba <_free_r+0x8a>
 8005638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800563c:	1f0c      	subs	r4, r1, #4
 800563e:	2b00      	cmp	r3, #0
 8005640:	bfb8      	it	lt
 8005642:	18e4      	addlt	r4, r4, r3
 8005644:	f000 f8e4 	bl	8005810 <__malloc_lock>
 8005648:	4a1c      	ldr	r2, [pc, #112]	; (80056bc <_free_r+0x8c>)
 800564a:	6813      	ldr	r3, [r2, #0]
 800564c:	b933      	cbnz	r3, 800565c <_free_r+0x2c>
 800564e:	6063      	str	r3, [r4, #4]
 8005650:	6014      	str	r4, [r2, #0]
 8005652:	4628      	mov	r0, r5
 8005654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005658:	f000 b8e0 	b.w	800581c <__malloc_unlock>
 800565c:	42a3      	cmp	r3, r4
 800565e:	d908      	bls.n	8005672 <_free_r+0x42>
 8005660:	6820      	ldr	r0, [r4, #0]
 8005662:	1821      	adds	r1, r4, r0
 8005664:	428b      	cmp	r3, r1
 8005666:	bf01      	itttt	eq
 8005668:	6819      	ldreq	r1, [r3, #0]
 800566a:	685b      	ldreq	r3, [r3, #4]
 800566c:	1809      	addeq	r1, r1, r0
 800566e:	6021      	streq	r1, [r4, #0]
 8005670:	e7ed      	b.n	800564e <_free_r+0x1e>
 8005672:	461a      	mov	r2, r3
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	b10b      	cbz	r3, 800567c <_free_r+0x4c>
 8005678:	42a3      	cmp	r3, r4
 800567a:	d9fa      	bls.n	8005672 <_free_r+0x42>
 800567c:	6811      	ldr	r1, [r2, #0]
 800567e:	1850      	adds	r0, r2, r1
 8005680:	42a0      	cmp	r0, r4
 8005682:	d10b      	bne.n	800569c <_free_r+0x6c>
 8005684:	6820      	ldr	r0, [r4, #0]
 8005686:	4401      	add	r1, r0
 8005688:	1850      	adds	r0, r2, r1
 800568a:	4283      	cmp	r3, r0
 800568c:	6011      	str	r1, [r2, #0]
 800568e:	d1e0      	bne.n	8005652 <_free_r+0x22>
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4408      	add	r0, r1
 8005696:	6010      	str	r0, [r2, #0]
 8005698:	6053      	str	r3, [r2, #4]
 800569a:	e7da      	b.n	8005652 <_free_r+0x22>
 800569c:	d902      	bls.n	80056a4 <_free_r+0x74>
 800569e:	230c      	movs	r3, #12
 80056a0:	602b      	str	r3, [r5, #0]
 80056a2:	e7d6      	b.n	8005652 <_free_r+0x22>
 80056a4:	6820      	ldr	r0, [r4, #0]
 80056a6:	1821      	adds	r1, r4, r0
 80056a8:	428b      	cmp	r3, r1
 80056aa:	bf01      	itttt	eq
 80056ac:	6819      	ldreq	r1, [r3, #0]
 80056ae:	685b      	ldreq	r3, [r3, #4]
 80056b0:	1809      	addeq	r1, r1, r0
 80056b2:	6021      	streq	r1, [r4, #0]
 80056b4:	6063      	str	r3, [r4, #4]
 80056b6:	6054      	str	r4, [r2, #4]
 80056b8:	e7cb      	b.n	8005652 <_free_r+0x22>
 80056ba:	bd38      	pop	{r3, r4, r5, pc}
 80056bc:	20000500 	.word	0x20000500

080056c0 <malloc>:
 80056c0:	4b02      	ldr	r3, [pc, #8]	; (80056cc <malloc+0xc>)
 80056c2:	4601      	mov	r1, r0
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	f000 b823 	b.w	8005710 <_malloc_r>
 80056ca:	bf00      	nop
 80056cc:	20000164 	.word	0x20000164

080056d0 <sbrk_aligned>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	4e0e      	ldr	r6, [pc, #56]	; (800570c <sbrk_aligned+0x3c>)
 80056d4:	460c      	mov	r4, r1
 80056d6:	6831      	ldr	r1, [r6, #0]
 80056d8:	4605      	mov	r5, r0
 80056da:	b911      	cbnz	r1, 80056e2 <sbrk_aligned+0x12>
 80056dc:	f000 fe38 	bl	8006350 <_sbrk_r>
 80056e0:	6030      	str	r0, [r6, #0]
 80056e2:	4621      	mov	r1, r4
 80056e4:	4628      	mov	r0, r5
 80056e6:	f000 fe33 	bl	8006350 <_sbrk_r>
 80056ea:	1c43      	adds	r3, r0, #1
 80056ec:	d00a      	beq.n	8005704 <sbrk_aligned+0x34>
 80056ee:	1cc4      	adds	r4, r0, #3
 80056f0:	f024 0403 	bic.w	r4, r4, #3
 80056f4:	42a0      	cmp	r0, r4
 80056f6:	d007      	beq.n	8005708 <sbrk_aligned+0x38>
 80056f8:	1a21      	subs	r1, r4, r0
 80056fa:	4628      	mov	r0, r5
 80056fc:	f000 fe28 	bl	8006350 <_sbrk_r>
 8005700:	3001      	adds	r0, #1
 8005702:	d101      	bne.n	8005708 <sbrk_aligned+0x38>
 8005704:	f04f 34ff 	mov.w	r4, #4294967295
 8005708:	4620      	mov	r0, r4
 800570a:	bd70      	pop	{r4, r5, r6, pc}
 800570c:	20000504 	.word	0x20000504

08005710 <_malloc_r>:
 8005710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005714:	1ccd      	adds	r5, r1, #3
 8005716:	f025 0503 	bic.w	r5, r5, #3
 800571a:	3508      	adds	r5, #8
 800571c:	2d0c      	cmp	r5, #12
 800571e:	bf38      	it	cc
 8005720:	250c      	movcc	r5, #12
 8005722:	2d00      	cmp	r5, #0
 8005724:	4607      	mov	r7, r0
 8005726:	db01      	blt.n	800572c <_malloc_r+0x1c>
 8005728:	42a9      	cmp	r1, r5
 800572a:	d905      	bls.n	8005738 <_malloc_r+0x28>
 800572c:	230c      	movs	r3, #12
 800572e:	2600      	movs	r6, #0
 8005730:	603b      	str	r3, [r7, #0]
 8005732:	4630      	mov	r0, r6
 8005734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005738:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800580c <_malloc_r+0xfc>
 800573c:	f000 f868 	bl	8005810 <__malloc_lock>
 8005740:	f8d8 3000 	ldr.w	r3, [r8]
 8005744:	461c      	mov	r4, r3
 8005746:	bb5c      	cbnz	r4, 80057a0 <_malloc_r+0x90>
 8005748:	4629      	mov	r1, r5
 800574a:	4638      	mov	r0, r7
 800574c:	f7ff ffc0 	bl	80056d0 <sbrk_aligned>
 8005750:	1c43      	adds	r3, r0, #1
 8005752:	4604      	mov	r4, r0
 8005754:	d155      	bne.n	8005802 <_malloc_r+0xf2>
 8005756:	f8d8 4000 	ldr.w	r4, [r8]
 800575a:	4626      	mov	r6, r4
 800575c:	2e00      	cmp	r6, #0
 800575e:	d145      	bne.n	80057ec <_malloc_r+0xdc>
 8005760:	2c00      	cmp	r4, #0
 8005762:	d048      	beq.n	80057f6 <_malloc_r+0xe6>
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	4631      	mov	r1, r6
 8005768:	4638      	mov	r0, r7
 800576a:	eb04 0903 	add.w	r9, r4, r3
 800576e:	f000 fdef 	bl	8006350 <_sbrk_r>
 8005772:	4581      	cmp	r9, r0
 8005774:	d13f      	bne.n	80057f6 <_malloc_r+0xe6>
 8005776:	6821      	ldr	r1, [r4, #0]
 8005778:	4638      	mov	r0, r7
 800577a:	1a6d      	subs	r5, r5, r1
 800577c:	4629      	mov	r1, r5
 800577e:	f7ff ffa7 	bl	80056d0 <sbrk_aligned>
 8005782:	3001      	adds	r0, #1
 8005784:	d037      	beq.n	80057f6 <_malloc_r+0xe6>
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	442b      	add	r3, r5
 800578a:	6023      	str	r3, [r4, #0]
 800578c:	f8d8 3000 	ldr.w	r3, [r8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d038      	beq.n	8005806 <_malloc_r+0xf6>
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	42a2      	cmp	r2, r4
 8005798:	d12b      	bne.n	80057f2 <_malloc_r+0xe2>
 800579a:	2200      	movs	r2, #0
 800579c:	605a      	str	r2, [r3, #4]
 800579e:	e00f      	b.n	80057c0 <_malloc_r+0xb0>
 80057a0:	6822      	ldr	r2, [r4, #0]
 80057a2:	1b52      	subs	r2, r2, r5
 80057a4:	d41f      	bmi.n	80057e6 <_malloc_r+0xd6>
 80057a6:	2a0b      	cmp	r2, #11
 80057a8:	d917      	bls.n	80057da <_malloc_r+0xca>
 80057aa:	1961      	adds	r1, r4, r5
 80057ac:	42a3      	cmp	r3, r4
 80057ae:	6025      	str	r5, [r4, #0]
 80057b0:	bf18      	it	ne
 80057b2:	6059      	strne	r1, [r3, #4]
 80057b4:	6863      	ldr	r3, [r4, #4]
 80057b6:	bf08      	it	eq
 80057b8:	f8c8 1000 	streq.w	r1, [r8]
 80057bc:	5162      	str	r2, [r4, r5]
 80057be:	604b      	str	r3, [r1, #4]
 80057c0:	4638      	mov	r0, r7
 80057c2:	f104 060b 	add.w	r6, r4, #11
 80057c6:	f000 f829 	bl	800581c <__malloc_unlock>
 80057ca:	f026 0607 	bic.w	r6, r6, #7
 80057ce:	1d23      	adds	r3, r4, #4
 80057d0:	1af2      	subs	r2, r6, r3
 80057d2:	d0ae      	beq.n	8005732 <_malloc_r+0x22>
 80057d4:	1b9b      	subs	r3, r3, r6
 80057d6:	50a3      	str	r3, [r4, r2]
 80057d8:	e7ab      	b.n	8005732 <_malloc_r+0x22>
 80057da:	42a3      	cmp	r3, r4
 80057dc:	6862      	ldr	r2, [r4, #4]
 80057de:	d1dd      	bne.n	800579c <_malloc_r+0x8c>
 80057e0:	f8c8 2000 	str.w	r2, [r8]
 80057e4:	e7ec      	b.n	80057c0 <_malloc_r+0xb0>
 80057e6:	4623      	mov	r3, r4
 80057e8:	6864      	ldr	r4, [r4, #4]
 80057ea:	e7ac      	b.n	8005746 <_malloc_r+0x36>
 80057ec:	4634      	mov	r4, r6
 80057ee:	6876      	ldr	r6, [r6, #4]
 80057f0:	e7b4      	b.n	800575c <_malloc_r+0x4c>
 80057f2:	4613      	mov	r3, r2
 80057f4:	e7cc      	b.n	8005790 <_malloc_r+0x80>
 80057f6:	230c      	movs	r3, #12
 80057f8:	4638      	mov	r0, r7
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	f000 f80e 	bl	800581c <__malloc_unlock>
 8005800:	e797      	b.n	8005732 <_malloc_r+0x22>
 8005802:	6025      	str	r5, [r4, #0]
 8005804:	e7dc      	b.n	80057c0 <_malloc_r+0xb0>
 8005806:	605b      	str	r3, [r3, #4]
 8005808:	deff      	udf	#255	; 0xff
 800580a:	bf00      	nop
 800580c:	20000500 	.word	0x20000500

08005810 <__malloc_lock>:
 8005810:	4801      	ldr	r0, [pc, #4]	; (8005818 <__malloc_lock+0x8>)
 8005812:	f7ff b890 	b.w	8004936 <__retarget_lock_acquire_recursive>
 8005816:	bf00      	nop
 8005818:	200004fc 	.word	0x200004fc

0800581c <__malloc_unlock>:
 800581c:	4801      	ldr	r0, [pc, #4]	; (8005824 <__malloc_unlock+0x8>)
 800581e:	f7ff b88b 	b.w	8004938 <__retarget_lock_release_recursive>
 8005822:	bf00      	nop
 8005824:	200004fc 	.word	0x200004fc

08005828 <_Balloc>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	69c6      	ldr	r6, [r0, #28]
 800582c:	4604      	mov	r4, r0
 800582e:	460d      	mov	r5, r1
 8005830:	b976      	cbnz	r6, 8005850 <_Balloc+0x28>
 8005832:	2010      	movs	r0, #16
 8005834:	f7ff ff44 	bl	80056c0 <malloc>
 8005838:	4602      	mov	r2, r0
 800583a:	61e0      	str	r0, [r4, #28]
 800583c:	b920      	cbnz	r0, 8005848 <_Balloc+0x20>
 800583e:	216b      	movs	r1, #107	; 0x6b
 8005840:	4b17      	ldr	r3, [pc, #92]	; (80058a0 <_Balloc+0x78>)
 8005842:	4818      	ldr	r0, [pc, #96]	; (80058a4 <_Balloc+0x7c>)
 8005844:	f000 fda2 	bl	800638c <__assert_func>
 8005848:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800584c:	6006      	str	r6, [r0, #0]
 800584e:	60c6      	str	r6, [r0, #12]
 8005850:	69e6      	ldr	r6, [r4, #28]
 8005852:	68f3      	ldr	r3, [r6, #12]
 8005854:	b183      	cbz	r3, 8005878 <_Balloc+0x50>
 8005856:	69e3      	ldr	r3, [r4, #28]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800585e:	b9b8      	cbnz	r0, 8005890 <_Balloc+0x68>
 8005860:	2101      	movs	r1, #1
 8005862:	fa01 f605 	lsl.w	r6, r1, r5
 8005866:	1d72      	adds	r2, r6, #5
 8005868:	4620      	mov	r0, r4
 800586a:	0092      	lsls	r2, r2, #2
 800586c:	f000 fdac 	bl	80063c8 <_calloc_r>
 8005870:	b160      	cbz	r0, 800588c <_Balloc+0x64>
 8005872:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005876:	e00e      	b.n	8005896 <_Balloc+0x6e>
 8005878:	2221      	movs	r2, #33	; 0x21
 800587a:	2104      	movs	r1, #4
 800587c:	4620      	mov	r0, r4
 800587e:	f000 fda3 	bl	80063c8 <_calloc_r>
 8005882:	69e3      	ldr	r3, [r4, #28]
 8005884:	60f0      	str	r0, [r6, #12]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e4      	bne.n	8005856 <_Balloc+0x2e>
 800588c:	2000      	movs	r0, #0
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	6802      	ldr	r2, [r0, #0]
 8005892:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005896:	2300      	movs	r3, #0
 8005898:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800589c:	e7f7      	b.n	800588e <_Balloc+0x66>
 800589e:	bf00      	nop
 80058a0:	0800709d 	.word	0x0800709d
 80058a4:	0800711d 	.word	0x0800711d

080058a8 <_Bfree>:
 80058a8:	b570      	push	{r4, r5, r6, lr}
 80058aa:	69c6      	ldr	r6, [r0, #28]
 80058ac:	4605      	mov	r5, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	b976      	cbnz	r6, 80058d0 <_Bfree+0x28>
 80058b2:	2010      	movs	r0, #16
 80058b4:	f7ff ff04 	bl	80056c0 <malloc>
 80058b8:	4602      	mov	r2, r0
 80058ba:	61e8      	str	r0, [r5, #28]
 80058bc:	b920      	cbnz	r0, 80058c8 <_Bfree+0x20>
 80058be:	218f      	movs	r1, #143	; 0x8f
 80058c0:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <_Bfree+0x3c>)
 80058c2:	4809      	ldr	r0, [pc, #36]	; (80058e8 <_Bfree+0x40>)
 80058c4:	f000 fd62 	bl	800638c <__assert_func>
 80058c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058cc:	6006      	str	r6, [r0, #0]
 80058ce:	60c6      	str	r6, [r0, #12]
 80058d0:	b13c      	cbz	r4, 80058e2 <_Bfree+0x3a>
 80058d2:	69eb      	ldr	r3, [r5, #28]
 80058d4:	6862      	ldr	r2, [r4, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058dc:	6021      	str	r1, [r4, #0]
 80058de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80058e2:	bd70      	pop	{r4, r5, r6, pc}
 80058e4:	0800709d 	.word	0x0800709d
 80058e8:	0800711d 	.word	0x0800711d

080058ec <__multadd>:
 80058ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058f0:	4607      	mov	r7, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	461e      	mov	r6, r3
 80058f6:	2000      	movs	r0, #0
 80058f8:	690d      	ldr	r5, [r1, #16]
 80058fa:	f101 0c14 	add.w	ip, r1, #20
 80058fe:	f8dc 3000 	ldr.w	r3, [ip]
 8005902:	3001      	adds	r0, #1
 8005904:	b299      	uxth	r1, r3
 8005906:	fb02 6101 	mla	r1, r2, r1, r6
 800590a:	0c1e      	lsrs	r6, r3, #16
 800590c:	0c0b      	lsrs	r3, r1, #16
 800590e:	fb02 3306 	mla	r3, r2, r6, r3
 8005912:	b289      	uxth	r1, r1
 8005914:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005918:	4285      	cmp	r5, r0
 800591a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800591e:	f84c 1b04 	str.w	r1, [ip], #4
 8005922:	dcec      	bgt.n	80058fe <__multadd+0x12>
 8005924:	b30e      	cbz	r6, 800596a <__multadd+0x7e>
 8005926:	68a3      	ldr	r3, [r4, #8]
 8005928:	42ab      	cmp	r3, r5
 800592a:	dc19      	bgt.n	8005960 <__multadd+0x74>
 800592c:	6861      	ldr	r1, [r4, #4]
 800592e:	4638      	mov	r0, r7
 8005930:	3101      	adds	r1, #1
 8005932:	f7ff ff79 	bl	8005828 <_Balloc>
 8005936:	4680      	mov	r8, r0
 8005938:	b928      	cbnz	r0, 8005946 <__multadd+0x5a>
 800593a:	4602      	mov	r2, r0
 800593c:	21ba      	movs	r1, #186	; 0xba
 800593e:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <__multadd+0x84>)
 8005940:	480c      	ldr	r0, [pc, #48]	; (8005974 <__multadd+0x88>)
 8005942:	f000 fd23 	bl	800638c <__assert_func>
 8005946:	6922      	ldr	r2, [r4, #16]
 8005948:	f104 010c 	add.w	r1, r4, #12
 800594c:	3202      	adds	r2, #2
 800594e:	0092      	lsls	r2, r2, #2
 8005950:	300c      	adds	r0, #12
 8005952:	f000 fd0d 	bl	8006370 <memcpy>
 8005956:	4621      	mov	r1, r4
 8005958:	4638      	mov	r0, r7
 800595a:	f7ff ffa5 	bl	80058a8 <_Bfree>
 800595e:	4644      	mov	r4, r8
 8005960:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005964:	3501      	adds	r5, #1
 8005966:	615e      	str	r6, [r3, #20]
 8005968:	6125      	str	r5, [r4, #16]
 800596a:	4620      	mov	r0, r4
 800596c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005970:	0800710c 	.word	0x0800710c
 8005974:	0800711d 	.word	0x0800711d

08005978 <__hi0bits>:
 8005978:	0c02      	lsrs	r2, r0, #16
 800597a:	0412      	lsls	r2, r2, #16
 800597c:	4603      	mov	r3, r0
 800597e:	b9ca      	cbnz	r2, 80059b4 <__hi0bits+0x3c>
 8005980:	0403      	lsls	r3, r0, #16
 8005982:	2010      	movs	r0, #16
 8005984:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005988:	bf04      	itt	eq
 800598a:	021b      	lsleq	r3, r3, #8
 800598c:	3008      	addeq	r0, #8
 800598e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005992:	bf04      	itt	eq
 8005994:	011b      	lsleq	r3, r3, #4
 8005996:	3004      	addeq	r0, #4
 8005998:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800599c:	bf04      	itt	eq
 800599e:	009b      	lsleq	r3, r3, #2
 80059a0:	3002      	addeq	r0, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	db05      	blt.n	80059b2 <__hi0bits+0x3a>
 80059a6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80059aa:	f100 0001 	add.w	r0, r0, #1
 80059ae:	bf08      	it	eq
 80059b0:	2020      	moveq	r0, #32
 80059b2:	4770      	bx	lr
 80059b4:	2000      	movs	r0, #0
 80059b6:	e7e5      	b.n	8005984 <__hi0bits+0xc>

080059b8 <__lo0bits>:
 80059b8:	6803      	ldr	r3, [r0, #0]
 80059ba:	4602      	mov	r2, r0
 80059bc:	f013 0007 	ands.w	r0, r3, #7
 80059c0:	d00b      	beq.n	80059da <__lo0bits+0x22>
 80059c2:	07d9      	lsls	r1, r3, #31
 80059c4:	d421      	bmi.n	8005a0a <__lo0bits+0x52>
 80059c6:	0798      	lsls	r0, r3, #30
 80059c8:	bf49      	itett	mi
 80059ca:	085b      	lsrmi	r3, r3, #1
 80059cc:	089b      	lsrpl	r3, r3, #2
 80059ce:	2001      	movmi	r0, #1
 80059d0:	6013      	strmi	r3, [r2, #0]
 80059d2:	bf5c      	itt	pl
 80059d4:	2002      	movpl	r0, #2
 80059d6:	6013      	strpl	r3, [r2, #0]
 80059d8:	4770      	bx	lr
 80059da:	b299      	uxth	r1, r3
 80059dc:	b909      	cbnz	r1, 80059e2 <__lo0bits+0x2a>
 80059de:	2010      	movs	r0, #16
 80059e0:	0c1b      	lsrs	r3, r3, #16
 80059e2:	b2d9      	uxtb	r1, r3
 80059e4:	b909      	cbnz	r1, 80059ea <__lo0bits+0x32>
 80059e6:	3008      	adds	r0, #8
 80059e8:	0a1b      	lsrs	r3, r3, #8
 80059ea:	0719      	lsls	r1, r3, #28
 80059ec:	bf04      	itt	eq
 80059ee:	091b      	lsreq	r3, r3, #4
 80059f0:	3004      	addeq	r0, #4
 80059f2:	0799      	lsls	r1, r3, #30
 80059f4:	bf04      	itt	eq
 80059f6:	089b      	lsreq	r3, r3, #2
 80059f8:	3002      	addeq	r0, #2
 80059fa:	07d9      	lsls	r1, r3, #31
 80059fc:	d403      	bmi.n	8005a06 <__lo0bits+0x4e>
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	f100 0001 	add.w	r0, r0, #1
 8005a04:	d003      	beq.n	8005a0e <__lo0bits+0x56>
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	4770      	bx	lr
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	4770      	bx	lr
 8005a0e:	2020      	movs	r0, #32
 8005a10:	4770      	bx	lr
	...

08005a14 <__i2b>:
 8005a14:	b510      	push	{r4, lr}
 8005a16:	460c      	mov	r4, r1
 8005a18:	2101      	movs	r1, #1
 8005a1a:	f7ff ff05 	bl	8005828 <_Balloc>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	b928      	cbnz	r0, 8005a2e <__i2b+0x1a>
 8005a22:	f240 1145 	movw	r1, #325	; 0x145
 8005a26:	4b04      	ldr	r3, [pc, #16]	; (8005a38 <__i2b+0x24>)
 8005a28:	4804      	ldr	r0, [pc, #16]	; (8005a3c <__i2b+0x28>)
 8005a2a:	f000 fcaf 	bl	800638c <__assert_func>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	6144      	str	r4, [r0, #20]
 8005a32:	6103      	str	r3, [r0, #16]
 8005a34:	bd10      	pop	{r4, pc}
 8005a36:	bf00      	nop
 8005a38:	0800710c 	.word	0x0800710c
 8005a3c:	0800711d 	.word	0x0800711d

08005a40 <__multiply>:
 8005a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a44:	4691      	mov	r9, r2
 8005a46:	690a      	ldr	r2, [r1, #16]
 8005a48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005a4c:	460c      	mov	r4, r1
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	bfbe      	ittt	lt
 8005a52:	460b      	movlt	r3, r1
 8005a54:	464c      	movlt	r4, r9
 8005a56:	4699      	movlt	r9, r3
 8005a58:	6927      	ldr	r7, [r4, #16]
 8005a5a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005a5e:	68a3      	ldr	r3, [r4, #8]
 8005a60:	6861      	ldr	r1, [r4, #4]
 8005a62:	eb07 060a 	add.w	r6, r7, sl
 8005a66:	42b3      	cmp	r3, r6
 8005a68:	b085      	sub	sp, #20
 8005a6a:	bfb8      	it	lt
 8005a6c:	3101      	addlt	r1, #1
 8005a6e:	f7ff fedb 	bl	8005828 <_Balloc>
 8005a72:	b930      	cbnz	r0, 8005a82 <__multiply+0x42>
 8005a74:	4602      	mov	r2, r0
 8005a76:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005a7a:	4b43      	ldr	r3, [pc, #268]	; (8005b88 <__multiply+0x148>)
 8005a7c:	4843      	ldr	r0, [pc, #268]	; (8005b8c <__multiply+0x14c>)
 8005a7e:	f000 fc85 	bl	800638c <__assert_func>
 8005a82:	f100 0514 	add.w	r5, r0, #20
 8005a86:	462b      	mov	r3, r5
 8005a88:	2200      	movs	r2, #0
 8005a8a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005a8e:	4543      	cmp	r3, r8
 8005a90:	d321      	bcc.n	8005ad6 <__multiply+0x96>
 8005a92:	f104 0314 	add.w	r3, r4, #20
 8005a96:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005a9a:	f109 0314 	add.w	r3, r9, #20
 8005a9e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005aa2:	9202      	str	r2, [sp, #8]
 8005aa4:	1b3a      	subs	r2, r7, r4
 8005aa6:	3a15      	subs	r2, #21
 8005aa8:	f022 0203 	bic.w	r2, r2, #3
 8005aac:	3204      	adds	r2, #4
 8005aae:	f104 0115 	add.w	r1, r4, #21
 8005ab2:	428f      	cmp	r7, r1
 8005ab4:	bf38      	it	cc
 8005ab6:	2204      	movcc	r2, #4
 8005ab8:	9201      	str	r2, [sp, #4]
 8005aba:	9a02      	ldr	r2, [sp, #8]
 8005abc:	9303      	str	r3, [sp, #12]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d80c      	bhi.n	8005adc <__multiply+0x9c>
 8005ac2:	2e00      	cmp	r6, #0
 8005ac4:	dd03      	ble.n	8005ace <__multiply+0x8e>
 8005ac6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d05a      	beq.n	8005b84 <__multiply+0x144>
 8005ace:	6106      	str	r6, [r0, #16]
 8005ad0:	b005      	add	sp, #20
 8005ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad6:	f843 2b04 	str.w	r2, [r3], #4
 8005ada:	e7d8      	b.n	8005a8e <__multiply+0x4e>
 8005adc:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ae0:	f1ba 0f00 	cmp.w	sl, #0
 8005ae4:	d023      	beq.n	8005b2e <__multiply+0xee>
 8005ae6:	46a9      	mov	r9, r5
 8005ae8:	f04f 0c00 	mov.w	ip, #0
 8005aec:	f104 0e14 	add.w	lr, r4, #20
 8005af0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005af4:	f8d9 1000 	ldr.w	r1, [r9]
 8005af8:	fa1f fb82 	uxth.w	fp, r2
 8005afc:	b289      	uxth	r1, r1
 8005afe:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b02:	4461      	add	r1, ip
 8005b04:	f8d9 c000 	ldr.w	ip, [r9]
 8005b08:	0c12      	lsrs	r2, r2, #16
 8005b0a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005b0e:	fb0a c202 	mla	r2, sl, r2, ip
 8005b12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b16:	b289      	uxth	r1, r1
 8005b18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b1c:	4577      	cmp	r7, lr
 8005b1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b22:	f849 1b04 	str.w	r1, [r9], #4
 8005b26:	d8e3      	bhi.n	8005af0 <__multiply+0xb0>
 8005b28:	9a01      	ldr	r2, [sp, #4]
 8005b2a:	f845 c002 	str.w	ip, [r5, r2]
 8005b2e:	9a03      	ldr	r2, [sp, #12]
 8005b30:	3304      	adds	r3, #4
 8005b32:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b36:	f1b9 0f00 	cmp.w	r9, #0
 8005b3a:	d021      	beq.n	8005b80 <__multiply+0x140>
 8005b3c:	46ae      	mov	lr, r5
 8005b3e:	f04f 0a00 	mov.w	sl, #0
 8005b42:	6829      	ldr	r1, [r5, #0]
 8005b44:	f104 0c14 	add.w	ip, r4, #20
 8005b48:	f8bc b000 	ldrh.w	fp, [ip]
 8005b4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005b50:	b289      	uxth	r1, r1
 8005b52:	fb09 220b 	mla	r2, r9, fp, r2
 8005b56:	4452      	add	r2, sl
 8005b58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b5c:	f84e 1b04 	str.w	r1, [lr], #4
 8005b60:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005b64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005b68:	f8be 1000 	ldrh.w	r1, [lr]
 8005b6c:	4567      	cmp	r7, ip
 8005b6e:	fb09 110a 	mla	r1, r9, sl, r1
 8005b72:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005b76:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005b7a:	d8e5      	bhi.n	8005b48 <__multiply+0x108>
 8005b7c:	9a01      	ldr	r2, [sp, #4]
 8005b7e:	50a9      	str	r1, [r5, r2]
 8005b80:	3504      	adds	r5, #4
 8005b82:	e79a      	b.n	8005aba <__multiply+0x7a>
 8005b84:	3e01      	subs	r6, #1
 8005b86:	e79c      	b.n	8005ac2 <__multiply+0x82>
 8005b88:	0800710c 	.word	0x0800710c
 8005b8c:	0800711d 	.word	0x0800711d

08005b90 <__pow5mult>:
 8005b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b94:	4615      	mov	r5, r2
 8005b96:	f012 0203 	ands.w	r2, r2, #3
 8005b9a:	4606      	mov	r6, r0
 8005b9c:	460f      	mov	r7, r1
 8005b9e:	d007      	beq.n	8005bb0 <__pow5mult+0x20>
 8005ba0:	4c25      	ldr	r4, [pc, #148]	; (8005c38 <__pow5mult+0xa8>)
 8005ba2:	3a01      	subs	r2, #1
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005baa:	f7ff fe9f 	bl	80058ec <__multadd>
 8005bae:	4607      	mov	r7, r0
 8005bb0:	10ad      	asrs	r5, r5, #2
 8005bb2:	d03d      	beq.n	8005c30 <__pow5mult+0xa0>
 8005bb4:	69f4      	ldr	r4, [r6, #28]
 8005bb6:	b97c      	cbnz	r4, 8005bd8 <__pow5mult+0x48>
 8005bb8:	2010      	movs	r0, #16
 8005bba:	f7ff fd81 	bl	80056c0 <malloc>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	61f0      	str	r0, [r6, #28]
 8005bc2:	b928      	cbnz	r0, 8005bd0 <__pow5mult+0x40>
 8005bc4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005bc8:	4b1c      	ldr	r3, [pc, #112]	; (8005c3c <__pow5mult+0xac>)
 8005bca:	481d      	ldr	r0, [pc, #116]	; (8005c40 <__pow5mult+0xb0>)
 8005bcc:	f000 fbde 	bl	800638c <__assert_func>
 8005bd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bd4:	6004      	str	r4, [r0, #0]
 8005bd6:	60c4      	str	r4, [r0, #12]
 8005bd8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005bdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005be0:	b94c      	cbnz	r4, 8005bf6 <__pow5mult+0x66>
 8005be2:	f240 2171 	movw	r1, #625	; 0x271
 8005be6:	4630      	mov	r0, r6
 8005be8:	f7ff ff14 	bl	8005a14 <__i2b>
 8005bec:	2300      	movs	r3, #0
 8005bee:	4604      	mov	r4, r0
 8005bf0:	f8c8 0008 	str.w	r0, [r8, #8]
 8005bf4:	6003      	str	r3, [r0, #0]
 8005bf6:	f04f 0900 	mov.w	r9, #0
 8005bfa:	07eb      	lsls	r3, r5, #31
 8005bfc:	d50a      	bpl.n	8005c14 <__pow5mult+0x84>
 8005bfe:	4639      	mov	r1, r7
 8005c00:	4622      	mov	r2, r4
 8005c02:	4630      	mov	r0, r6
 8005c04:	f7ff ff1c 	bl	8005a40 <__multiply>
 8005c08:	4680      	mov	r8, r0
 8005c0a:	4639      	mov	r1, r7
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f7ff fe4b 	bl	80058a8 <_Bfree>
 8005c12:	4647      	mov	r7, r8
 8005c14:	106d      	asrs	r5, r5, #1
 8005c16:	d00b      	beq.n	8005c30 <__pow5mult+0xa0>
 8005c18:	6820      	ldr	r0, [r4, #0]
 8005c1a:	b938      	cbnz	r0, 8005c2c <__pow5mult+0x9c>
 8005c1c:	4622      	mov	r2, r4
 8005c1e:	4621      	mov	r1, r4
 8005c20:	4630      	mov	r0, r6
 8005c22:	f7ff ff0d 	bl	8005a40 <__multiply>
 8005c26:	6020      	str	r0, [r4, #0]
 8005c28:	f8c0 9000 	str.w	r9, [r0]
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	e7e4      	b.n	8005bfa <__pow5mult+0x6a>
 8005c30:	4638      	mov	r0, r7
 8005c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c36:	bf00      	nop
 8005c38:	08007268 	.word	0x08007268
 8005c3c:	0800709d 	.word	0x0800709d
 8005c40:	0800711d 	.word	0x0800711d

08005c44 <__lshift>:
 8005c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c48:	460c      	mov	r4, r1
 8005c4a:	4607      	mov	r7, r0
 8005c4c:	4691      	mov	r9, r2
 8005c4e:	6923      	ldr	r3, [r4, #16]
 8005c50:	6849      	ldr	r1, [r1, #4]
 8005c52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c56:	68a3      	ldr	r3, [r4, #8]
 8005c58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c5c:	f108 0601 	add.w	r6, r8, #1
 8005c60:	42b3      	cmp	r3, r6
 8005c62:	db0b      	blt.n	8005c7c <__lshift+0x38>
 8005c64:	4638      	mov	r0, r7
 8005c66:	f7ff fddf 	bl	8005828 <_Balloc>
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	b948      	cbnz	r0, 8005c82 <__lshift+0x3e>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005c74:	4b27      	ldr	r3, [pc, #156]	; (8005d14 <__lshift+0xd0>)
 8005c76:	4828      	ldr	r0, [pc, #160]	; (8005d18 <__lshift+0xd4>)
 8005c78:	f000 fb88 	bl	800638c <__assert_func>
 8005c7c:	3101      	adds	r1, #1
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	e7ee      	b.n	8005c60 <__lshift+0x1c>
 8005c82:	2300      	movs	r3, #0
 8005c84:	f100 0114 	add.w	r1, r0, #20
 8005c88:	f100 0210 	add.w	r2, r0, #16
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	4553      	cmp	r3, sl
 8005c90:	db33      	blt.n	8005cfa <__lshift+0xb6>
 8005c92:	6920      	ldr	r0, [r4, #16]
 8005c94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c98:	f104 0314 	add.w	r3, r4, #20
 8005c9c:	f019 091f 	ands.w	r9, r9, #31
 8005ca0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ca4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ca8:	d02b      	beq.n	8005d02 <__lshift+0xbe>
 8005caa:	468a      	mov	sl, r1
 8005cac:	2200      	movs	r2, #0
 8005cae:	f1c9 0e20 	rsb	lr, r9, #32
 8005cb2:	6818      	ldr	r0, [r3, #0]
 8005cb4:	fa00 f009 	lsl.w	r0, r0, r9
 8005cb8:	4310      	orrs	r0, r2
 8005cba:	f84a 0b04 	str.w	r0, [sl], #4
 8005cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cc2:	459c      	cmp	ip, r3
 8005cc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8005cc8:	d8f3      	bhi.n	8005cb2 <__lshift+0x6e>
 8005cca:	ebac 0304 	sub.w	r3, ip, r4
 8005cce:	3b15      	subs	r3, #21
 8005cd0:	f023 0303 	bic.w	r3, r3, #3
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	f104 0015 	add.w	r0, r4, #21
 8005cda:	4584      	cmp	ip, r0
 8005cdc:	bf38      	it	cc
 8005cde:	2304      	movcc	r3, #4
 8005ce0:	50ca      	str	r2, [r1, r3]
 8005ce2:	b10a      	cbz	r2, 8005ce8 <__lshift+0xa4>
 8005ce4:	f108 0602 	add.w	r6, r8, #2
 8005ce8:	3e01      	subs	r6, #1
 8005cea:	4638      	mov	r0, r7
 8005cec:	4621      	mov	r1, r4
 8005cee:	612e      	str	r6, [r5, #16]
 8005cf0:	f7ff fdda 	bl	80058a8 <_Bfree>
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8005cfe:	3301      	adds	r3, #1
 8005d00:	e7c5      	b.n	8005c8e <__lshift+0x4a>
 8005d02:	3904      	subs	r1, #4
 8005d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d08:	459c      	cmp	ip, r3
 8005d0a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d0e:	d8f9      	bhi.n	8005d04 <__lshift+0xc0>
 8005d10:	e7ea      	b.n	8005ce8 <__lshift+0xa4>
 8005d12:	bf00      	nop
 8005d14:	0800710c 	.word	0x0800710c
 8005d18:	0800711d 	.word	0x0800711d

08005d1c <__mcmp>:
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	690a      	ldr	r2, [r1, #16]
 8005d20:	6900      	ldr	r0, [r0, #16]
 8005d22:	b530      	push	{r4, r5, lr}
 8005d24:	1a80      	subs	r0, r0, r2
 8005d26:	d10d      	bne.n	8005d44 <__mcmp+0x28>
 8005d28:	3314      	adds	r3, #20
 8005d2a:	3114      	adds	r1, #20
 8005d2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005d34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d3c:	4295      	cmp	r5, r2
 8005d3e:	d002      	beq.n	8005d46 <__mcmp+0x2a>
 8005d40:	d304      	bcc.n	8005d4c <__mcmp+0x30>
 8005d42:	2001      	movs	r0, #1
 8005d44:	bd30      	pop	{r4, r5, pc}
 8005d46:	42a3      	cmp	r3, r4
 8005d48:	d3f4      	bcc.n	8005d34 <__mcmp+0x18>
 8005d4a:	e7fb      	b.n	8005d44 <__mcmp+0x28>
 8005d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d50:	e7f8      	b.n	8005d44 <__mcmp+0x28>
	...

08005d54 <__mdiff>:
 8005d54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d58:	460d      	mov	r5, r1
 8005d5a:	4607      	mov	r7, r0
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	4628      	mov	r0, r5
 8005d60:	4614      	mov	r4, r2
 8005d62:	f7ff ffdb 	bl	8005d1c <__mcmp>
 8005d66:	1e06      	subs	r6, r0, #0
 8005d68:	d111      	bne.n	8005d8e <__mdiff+0x3a>
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	4638      	mov	r0, r7
 8005d6e:	f7ff fd5b 	bl	8005828 <_Balloc>
 8005d72:	4602      	mov	r2, r0
 8005d74:	b928      	cbnz	r0, 8005d82 <__mdiff+0x2e>
 8005d76:	f240 2137 	movw	r1, #567	; 0x237
 8005d7a:	4b3a      	ldr	r3, [pc, #232]	; (8005e64 <__mdiff+0x110>)
 8005d7c:	483a      	ldr	r0, [pc, #232]	; (8005e68 <__mdiff+0x114>)
 8005d7e:	f000 fb05 	bl	800638c <__assert_func>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005d88:	4610      	mov	r0, r2
 8005d8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8e:	bfa4      	itt	ge
 8005d90:	4623      	movge	r3, r4
 8005d92:	462c      	movge	r4, r5
 8005d94:	4638      	mov	r0, r7
 8005d96:	6861      	ldr	r1, [r4, #4]
 8005d98:	bfa6      	itte	ge
 8005d9a:	461d      	movge	r5, r3
 8005d9c:	2600      	movge	r6, #0
 8005d9e:	2601      	movlt	r6, #1
 8005da0:	f7ff fd42 	bl	8005828 <_Balloc>
 8005da4:	4602      	mov	r2, r0
 8005da6:	b918      	cbnz	r0, 8005db0 <__mdiff+0x5c>
 8005da8:	f240 2145 	movw	r1, #581	; 0x245
 8005dac:	4b2d      	ldr	r3, [pc, #180]	; (8005e64 <__mdiff+0x110>)
 8005dae:	e7e5      	b.n	8005d7c <__mdiff+0x28>
 8005db0:	f102 0814 	add.w	r8, r2, #20
 8005db4:	46c2      	mov	sl, r8
 8005db6:	f04f 0c00 	mov.w	ip, #0
 8005dba:	6927      	ldr	r7, [r4, #16]
 8005dbc:	60c6      	str	r6, [r0, #12]
 8005dbe:	692e      	ldr	r6, [r5, #16]
 8005dc0:	f104 0014 	add.w	r0, r4, #20
 8005dc4:	f105 0914 	add.w	r9, r5, #20
 8005dc8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005dcc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005dd0:	3410      	adds	r4, #16
 8005dd2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005dd6:	f859 3b04 	ldr.w	r3, [r9], #4
 8005dda:	fa1f f18b 	uxth.w	r1, fp
 8005dde:	4461      	add	r1, ip
 8005de0:	fa1f fc83 	uxth.w	ip, r3
 8005de4:	0c1b      	lsrs	r3, r3, #16
 8005de6:	eba1 010c 	sub.w	r1, r1, ip
 8005dea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005dee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005df2:	b289      	uxth	r1, r1
 8005df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005df8:	454e      	cmp	r6, r9
 8005dfa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005dfe:	f84a 1b04 	str.w	r1, [sl], #4
 8005e02:	d8e6      	bhi.n	8005dd2 <__mdiff+0x7e>
 8005e04:	1b73      	subs	r3, r6, r5
 8005e06:	3b15      	subs	r3, #21
 8005e08:	f023 0303 	bic.w	r3, r3, #3
 8005e0c:	3515      	adds	r5, #21
 8005e0e:	3304      	adds	r3, #4
 8005e10:	42ae      	cmp	r6, r5
 8005e12:	bf38      	it	cc
 8005e14:	2304      	movcc	r3, #4
 8005e16:	4418      	add	r0, r3
 8005e18:	4443      	add	r3, r8
 8005e1a:	461e      	mov	r6, r3
 8005e1c:	4605      	mov	r5, r0
 8005e1e:	4575      	cmp	r5, lr
 8005e20:	d30e      	bcc.n	8005e40 <__mdiff+0xec>
 8005e22:	f10e 0103 	add.w	r1, lr, #3
 8005e26:	1a09      	subs	r1, r1, r0
 8005e28:	f021 0103 	bic.w	r1, r1, #3
 8005e2c:	3803      	subs	r0, #3
 8005e2e:	4586      	cmp	lr, r0
 8005e30:	bf38      	it	cc
 8005e32:	2100      	movcc	r1, #0
 8005e34:	440b      	add	r3, r1
 8005e36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005e3a:	b189      	cbz	r1, 8005e60 <__mdiff+0x10c>
 8005e3c:	6117      	str	r7, [r2, #16]
 8005e3e:	e7a3      	b.n	8005d88 <__mdiff+0x34>
 8005e40:	f855 8b04 	ldr.w	r8, [r5], #4
 8005e44:	fa1f f188 	uxth.w	r1, r8
 8005e48:	4461      	add	r1, ip
 8005e4a:	140c      	asrs	r4, r1, #16
 8005e4c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005e50:	b289      	uxth	r1, r1
 8005e52:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005e56:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005e5a:	f846 1b04 	str.w	r1, [r6], #4
 8005e5e:	e7de      	b.n	8005e1e <__mdiff+0xca>
 8005e60:	3f01      	subs	r7, #1
 8005e62:	e7e8      	b.n	8005e36 <__mdiff+0xe2>
 8005e64:	0800710c 	.word	0x0800710c
 8005e68:	0800711d 	.word	0x0800711d

08005e6c <__d2b>:
 8005e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e6e:	2101      	movs	r1, #1
 8005e70:	4617      	mov	r7, r2
 8005e72:	461c      	mov	r4, r3
 8005e74:	9e08      	ldr	r6, [sp, #32]
 8005e76:	f7ff fcd7 	bl	8005828 <_Balloc>
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	b930      	cbnz	r0, 8005e8c <__d2b+0x20>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	f240 310f 	movw	r1, #783	; 0x30f
 8005e84:	4b22      	ldr	r3, [pc, #136]	; (8005f10 <__d2b+0xa4>)
 8005e86:	4823      	ldr	r0, [pc, #140]	; (8005f14 <__d2b+0xa8>)
 8005e88:	f000 fa80 	bl	800638c <__assert_func>
 8005e8c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005e90:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005e94:	bb24      	cbnz	r4, 8005ee0 <__d2b+0x74>
 8005e96:	2f00      	cmp	r7, #0
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	d026      	beq.n	8005eea <__d2b+0x7e>
 8005e9c:	4668      	mov	r0, sp
 8005e9e:	9700      	str	r7, [sp, #0]
 8005ea0:	f7ff fd8a 	bl	80059b8 <__lo0bits>
 8005ea4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005ea8:	b1e8      	cbz	r0, 8005ee6 <__d2b+0x7a>
 8005eaa:	f1c0 0320 	rsb	r3, r0, #32
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	430b      	orrs	r3, r1
 8005eb4:	40c2      	lsrs	r2, r0
 8005eb6:	616b      	str	r3, [r5, #20]
 8005eb8:	9201      	str	r2, [sp, #4]
 8005eba:	9b01      	ldr	r3, [sp, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bf14      	ite	ne
 8005ec0:	2102      	movne	r1, #2
 8005ec2:	2101      	moveq	r1, #1
 8005ec4:	61ab      	str	r3, [r5, #24]
 8005ec6:	6129      	str	r1, [r5, #16]
 8005ec8:	b1bc      	cbz	r4, 8005efa <__d2b+0x8e>
 8005eca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005ece:	4404      	add	r4, r0
 8005ed0:	6034      	str	r4, [r6, #0]
 8005ed2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed8:	6018      	str	r0, [r3, #0]
 8005eda:	4628      	mov	r0, r5
 8005edc:	b003      	add	sp, #12
 8005ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ee4:	e7d7      	b.n	8005e96 <__d2b+0x2a>
 8005ee6:	6169      	str	r1, [r5, #20]
 8005ee8:	e7e7      	b.n	8005eba <__d2b+0x4e>
 8005eea:	a801      	add	r0, sp, #4
 8005eec:	f7ff fd64 	bl	80059b8 <__lo0bits>
 8005ef0:	9b01      	ldr	r3, [sp, #4]
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	616b      	str	r3, [r5, #20]
 8005ef6:	3020      	adds	r0, #32
 8005ef8:	e7e5      	b.n	8005ec6 <__d2b+0x5a>
 8005efa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005efe:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8005f02:	6030      	str	r0, [r6, #0]
 8005f04:	6918      	ldr	r0, [r3, #16]
 8005f06:	f7ff fd37 	bl	8005978 <__hi0bits>
 8005f0a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005f0e:	e7e2      	b.n	8005ed6 <__d2b+0x6a>
 8005f10:	0800710c 	.word	0x0800710c
 8005f14:	0800711d 	.word	0x0800711d

08005f18 <__ssputs_r>:
 8005f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f1c:	461f      	mov	r7, r3
 8005f1e:	688e      	ldr	r6, [r1, #8]
 8005f20:	4682      	mov	sl, r0
 8005f22:	42be      	cmp	r6, r7
 8005f24:	460c      	mov	r4, r1
 8005f26:	4690      	mov	r8, r2
 8005f28:	680b      	ldr	r3, [r1, #0]
 8005f2a:	d82c      	bhi.n	8005f86 <__ssputs_r+0x6e>
 8005f2c:	898a      	ldrh	r2, [r1, #12]
 8005f2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f32:	d026      	beq.n	8005f82 <__ssputs_r+0x6a>
 8005f34:	6965      	ldr	r5, [r4, #20]
 8005f36:	6909      	ldr	r1, [r1, #16]
 8005f38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f3c:	eba3 0901 	sub.w	r9, r3, r1
 8005f40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f44:	1c7b      	adds	r3, r7, #1
 8005f46:	444b      	add	r3, r9
 8005f48:	106d      	asrs	r5, r5, #1
 8005f4a:	429d      	cmp	r5, r3
 8005f4c:	bf38      	it	cc
 8005f4e:	461d      	movcc	r5, r3
 8005f50:	0553      	lsls	r3, r2, #21
 8005f52:	d527      	bpl.n	8005fa4 <__ssputs_r+0x8c>
 8005f54:	4629      	mov	r1, r5
 8005f56:	f7ff fbdb 	bl	8005710 <_malloc_r>
 8005f5a:	4606      	mov	r6, r0
 8005f5c:	b360      	cbz	r0, 8005fb8 <__ssputs_r+0xa0>
 8005f5e:	464a      	mov	r2, r9
 8005f60:	6921      	ldr	r1, [r4, #16]
 8005f62:	f000 fa05 	bl	8006370 <memcpy>
 8005f66:	89a3      	ldrh	r3, [r4, #12]
 8005f68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f70:	81a3      	strh	r3, [r4, #12]
 8005f72:	6126      	str	r6, [r4, #16]
 8005f74:	444e      	add	r6, r9
 8005f76:	6026      	str	r6, [r4, #0]
 8005f78:	463e      	mov	r6, r7
 8005f7a:	6165      	str	r5, [r4, #20]
 8005f7c:	eba5 0509 	sub.w	r5, r5, r9
 8005f80:	60a5      	str	r5, [r4, #8]
 8005f82:	42be      	cmp	r6, r7
 8005f84:	d900      	bls.n	8005f88 <__ssputs_r+0x70>
 8005f86:	463e      	mov	r6, r7
 8005f88:	4632      	mov	r2, r6
 8005f8a:	4641      	mov	r1, r8
 8005f8c:	6820      	ldr	r0, [r4, #0]
 8005f8e:	f000 f9c5 	bl	800631c <memmove>
 8005f92:	2000      	movs	r0, #0
 8005f94:	68a3      	ldr	r3, [r4, #8]
 8005f96:	1b9b      	subs	r3, r3, r6
 8005f98:	60a3      	str	r3, [r4, #8]
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	4433      	add	r3, r6
 8005f9e:	6023      	str	r3, [r4, #0]
 8005fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa4:	462a      	mov	r2, r5
 8005fa6:	f000 fa35 	bl	8006414 <_realloc_r>
 8005faa:	4606      	mov	r6, r0
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d1e0      	bne.n	8005f72 <__ssputs_r+0x5a>
 8005fb0:	4650      	mov	r0, sl
 8005fb2:	6921      	ldr	r1, [r4, #16]
 8005fb4:	f7ff fb3c 	bl	8005630 <_free_r>
 8005fb8:	230c      	movs	r3, #12
 8005fba:	f8ca 3000 	str.w	r3, [sl]
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fc8:	81a3      	strh	r3, [r4, #12]
 8005fca:	e7e9      	b.n	8005fa0 <__ssputs_r+0x88>

08005fcc <_svfiprintf_r>:
 8005fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd0:	4698      	mov	r8, r3
 8005fd2:	898b      	ldrh	r3, [r1, #12]
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	061b      	lsls	r3, r3, #24
 8005fd8:	460d      	mov	r5, r1
 8005fda:	4614      	mov	r4, r2
 8005fdc:	b09d      	sub	sp, #116	; 0x74
 8005fde:	d50e      	bpl.n	8005ffe <_svfiprintf_r+0x32>
 8005fe0:	690b      	ldr	r3, [r1, #16]
 8005fe2:	b963      	cbnz	r3, 8005ffe <_svfiprintf_r+0x32>
 8005fe4:	2140      	movs	r1, #64	; 0x40
 8005fe6:	f7ff fb93 	bl	8005710 <_malloc_r>
 8005fea:	6028      	str	r0, [r5, #0]
 8005fec:	6128      	str	r0, [r5, #16]
 8005fee:	b920      	cbnz	r0, 8005ffa <_svfiprintf_r+0x2e>
 8005ff0:	230c      	movs	r3, #12
 8005ff2:	603b      	str	r3, [r7, #0]
 8005ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff8:	e0d0      	b.n	800619c <_svfiprintf_r+0x1d0>
 8005ffa:	2340      	movs	r3, #64	; 0x40
 8005ffc:	616b      	str	r3, [r5, #20]
 8005ffe:	2300      	movs	r3, #0
 8006000:	9309      	str	r3, [sp, #36]	; 0x24
 8006002:	2320      	movs	r3, #32
 8006004:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006008:	2330      	movs	r3, #48	; 0x30
 800600a:	f04f 0901 	mov.w	r9, #1
 800600e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006012:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80061b4 <_svfiprintf_r+0x1e8>
 8006016:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800601a:	4623      	mov	r3, r4
 800601c:	469a      	mov	sl, r3
 800601e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006022:	b10a      	cbz	r2, 8006028 <_svfiprintf_r+0x5c>
 8006024:	2a25      	cmp	r2, #37	; 0x25
 8006026:	d1f9      	bne.n	800601c <_svfiprintf_r+0x50>
 8006028:	ebba 0b04 	subs.w	fp, sl, r4
 800602c:	d00b      	beq.n	8006046 <_svfiprintf_r+0x7a>
 800602e:	465b      	mov	r3, fp
 8006030:	4622      	mov	r2, r4
 8006032:	4629      	mov	r1, r5
 8006034:	4638      	mov	r0, r7
 8006036:	f7ff ff6f 	bl	8005f18 <__ssputs_r>
 800603a:	3001      	adds	r0, #1
 800603c:	f000 80a9 	beq.w	8006192 <_svfiprintf_r+0x1c6>
 8006040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006042:	445a      	add	r2, fp
 8006044:	9209      	str	r2, [sp, #36]	; 0x24
 8006046:	f89a 3000 	ldrb.w	r3, [sl]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 80a1 	beq.w	8006192 <_svfiprintf_r+0x1c6>
 8006050:	2300      	movs	r3, #0
 8006052:	f04f 32ff 	mov.w	r2, #4294967295
 8006056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800605a:	f10a 0a01 	add.w	sl, sl, #1
 800605e:	9304      	str	r3, [sp, #16]
 8006060:	9307      	str	r3, [sp, #28]
 8006062:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006066:	931a      	str	r3, [sp, #104]	; 0x68
 8006068:	4654      	mov	r4, sl
 800606a:	2205      	movs	r2, #5
 800606c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006070:	4850      	ldr	r0, [pc, #320]	; (80061b4 <_svfiprintf_r+0x1e8>)
 8006072:	f7fe fc62 	bl	800493a <memchr>
 8006076:	9a04      	ldr	r2, [sp, #16]
 8006078:	b9d8      	cbnz	r0, 80060b2 <_svfiprintf_r+0xe6>
 800607a:	06d0      	lsls	r0, r2, #27
 800607c:	bf44      	itt	mi
 800607e:	2320      	movmi	r3, #32
 8006080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006084:	0711      	lsls	r1, r2, #28
 8006086:	bf44      	itt	mi
 8006088:	232b      	movmi	r3, #43	; 0x2b
 800608a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800608e:	f89a 3000 	ldrb.w	r3, [sl]
 8006092:	2b2a      	cmp	r3, #42	; 0x2a
 8006094:	d015      	beq.n	80060c2 <_svfiprintf_r+0xf6>
 8006096:	4654      	mov	r4, sl
 8006098:	2000      	movs	r0, #0
 800609a:	f04f 0c0a 	mov.w	ip, #10
 800609e:	9a07      	ldr	r2, [sp, #28]
 80060a0:	4621      	mov	r1, r4
 80060a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060a6:	3b30      	subs	r3, #48	; 0x30
 80060a8:	2b09      	cmp	r3, #9
 80060aa:	d94d      	bls.n	8006148 <_svfiprintf_r+0x17c>
 80060ac:	b1b0      	cbz	r0, 80060dc <_svfiprintf_r+0x110>
 80060ae:	9207      	str	r2, [sp, #28]
 80060b0:	e014      	b.n	80060dc <_svfiprintf_r+0x110>
 80060b2:	eba0 0308 	sub.w	r3, r0, r8
 80060b6:	fa09 f303 	lsl.w	r3, r9, r3
 80060ba:	4313      	orrs	r3, r2
 80060bc:	46a2      	mov	sl, r4
 80060be:	9304      	str	r3, [sp, #16]
 80060c0:	e7d2      	b.n	8006068 <_svfiprintf_r+0x9c>
 80060c2:	9b03      	ldr	r3, [sp, #12]
 80060c4:	1d19      	adds	r1, r3, #4
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	9103      	str	r1, [sp, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bfbb      	ittet	lt
 80060ce:	425b      	neglt	r3, r3
 80060d0:	f042 0202 	orrlt.w	r2, r2, #2
 80060d4:	9307      	strge	r3, [sp, #28]
 80060d6:	9307      	strlt	r3, [sp, #28]
 80060d8:	bfb8      	it	lt
 80060da:	9204      	strlt	r2, [sp, #16]
 80060dc:	7823      	ldrb	r3, [r4, #0]
 80060de:	2b2e      	cmp	r3, #46	; 0x2e
 80060e0:	d10c      	bne.n	80060fc <_svfiprintf_r+0x130>
 80060e2:	7863      	ldrb	r3, [r4, #1]
 80060e4:	2b2a      	cmp	r3, #42	; 0x2a
 80060e6:	d134      	bne.n	8006152 <_svfiprintf_r+0x186>
 80060e8:	9b03      	ldr	r3, [sp, #12]
 80060ea:	3402      	adds	r4, #2
 80060ec:	1d1a      	adds	r2, r3, #4
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	9203      	str	r2, [sp, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	bfb8      	it	lt
 80060f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80060fa:	9305      	str	r3, [sp, #20]
 80060fc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80061b8 <_svfiprintf_r+0x1ec>
 8006100:	2203      	movs	r2, #3
 8006102:	4650      	mov	r0, sl
 8006104:	7821      	ldrb	r1, [r4, #0]
 8006106:	f7fe fc18 	bl	800493a <memchr>
 800610a:	b138      	cbz	r0, 800611c <_svfiprintf_r+0x150>
 800610c:	2240      	movs	r2, #64	; 0x40
 800610e:	9b04      	ldr	r3, [sp, #16]
 8006110:	eba0 000a 	sub.w	r0, r0, sl
 8006114:	4082      	lsls	r2, r0
 8006116:	4313      	orrs	r3, r2
 8006118:	3401      	adds	r4, #1
 800611a:	9304      	str	r3, [sp, #16]
 800611c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006120:	2206      	movs	r2, #6
 8006122:	4826      	ldr	r0, [pc, #152]	; (80061bc <_svfiprintf_r+0x1f0>)
 8006124:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006128:	f7fe fc07 	bl	800493a <memchr>
 800612c:	2800      	cmp	r0, #0
 800612e:	d038      	beq.n	80061a2 <_svfiprintf_r+0x1d6>
 8006130:	4b23      	ldr	r3, [pc, #140]	; (80061c0 <_svfiprintf_r+0x1f4>)
 8006132:	bb1b      	cbnz	r3, 800617c <_svfiprintf_r+0x1b0>
 8006134:	9b03      	ldr	r3, [sp, #12]
 8006136:	3307      	adds	r3, #7
 8006138:	f023 0307 	bic.w	r3, r3, #7
 800613c:	3308      	adds	r3, #8
 800613e:	9303      	str	r3, [sp, #12]
 8006140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006142:	4433      	add	r3, r6
 8006144:	9309      	str	r3, [sp, #36]	; 0x24
 8006146:	e768      	b.n	800601a <_svfiprintf_r+0x4e>
 8006148:	460c      	mov	r4, r1
 800614a:	2001      	movs	r0, #1
 800614c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006150:	e7a6      	b.n	80060a0 <_svfiprintf_r+0xd4>
 8006152:	2300      	movs	r3, #0
 8006154:	f04f 0c0a 	mov.w	ip, #10
 8006158:	4619      	mov	r1, r3
 800615a:	3401      	adds	r4, #1
 800615c:	9305      	str	r3, [sp, #20]
 800615e:	4620      	mov	r0, r4
 8006160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006164:	3a30      	subs	r2, #48	; 0x30
 8006166:	2a09      	cmp	r2, #9
 8006168:	d903      	bls.n	8006172 <_svfiprintf_r+0x1a6>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0c6      	beq.n	80060fc <_svfiprintf_r+0x130>
 800616e:	9105      	str	r1, [sp, #20]
 8006170:	e7c4      	b.n	80060fc <_svfiprintf_r+0x130>
 8006172:	4604      	mov	r4, r0
 8006174:	2301      	movs	r3, #1
 8006176:	fb0c 2101 	mla	r1, ip, r1, r2
 800617a:	e7f0      	b.n	800615e <_svfiprintf_r+0x192>
 800617c:	ab03      	add	r3, sp, #12
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	462a      	mov	r2, r5
 8006182:	4638      	mov	r0, r7
 8006184:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <_svfiprintf_r+0x1f8>)
 8006186:	a904      	add	r1, sp, #16
 8006188:	f7fd fe70 	bl	8003e6c <_printf_float>
 800618c:	1c42      	adds	r2, r0, #1
 800618e:	4606      	mov	r6, r0
 8006190:	d1d6      	bne.n	8006140 <_svfiprintf_r+0x174>
 8006192:	89ab      	ldrh	r3, [r5, #12]
 8006194:	065b      	lsls	r3, r3, #25
 8006196:	f53f af2d 	bmi.w	8005ff4 <_svfiprintf_r+0x28>
 800619a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800619c:	b01d      	add	sp, #116	; 0x74
 800619e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a2:	ab03      	add	r3, sp, #12
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	462a      	mov	r2, r5
 80061a8:	4638      	mov	r0, r7
 80061aa:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <_svfiprintf_r+0x1f8>)
 80061ac:	a904      	add	r1, sp, #16
 80061ae:	f7fe f8fd 	bl	80043ac <_printf_i>
 80061b2:	e7eb      	b.n	800618c <_svfiprintf_r+0x1c0>
 80061b4:	08007274 	.word	0x08007274
 80061b8:	0800727a 	.word	0x0800727a
 80061bc:	0800727e 	.word	0x0800727e
 80061c0:	08003e6d 	.word	0x08003e6d
 80061c4:	08005f19 	.word	0x08005f19

080061c8 <__sflush_r>:
 80061c8:	898a      	ldrh	r2, [r1, #12]
 80061ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061cc:	4605      	mov	r5, r0
 80061ce:	0710      	lsls	r0, r2, #28
 80061d0:	460c      	mov	r4, r1
 80061d2:	d457      	bmi.n	8006284 <__sflush_r+0xbc>
 80061d4:	684b      	ldr	r3, [r1, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	dc04      	bgt.n	80061e4 <__sflush_r+0x1c>
 80061da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061dc:	2b00      	cmp	r3, #0
 80061de:	dc01      	bgt.n	80061e4 <__sflush_r+0x1c>
 80061e0:	2000      	movs	r0, #0
 80061e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061e6:	2e00      	cmp	r6, #0
 80061e8:	d0fa      	beq.n	80061e0 <__sflush_r+0x18>
 80061ea:	2300      	movs	r3, #0
 80061ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061f0:	682f      	ldr	r7, [r5, #0]
 80061f2:	6a21      	ldr	r1, [r4, #32]
 80061f4:	602b      	str	r3, [r5, #0]
 80061f6:	d032      	beq.n	800625e <__sflush_r+0x96>
 80061f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061fa:	89a3      	ldrh	r3, [r4, #12]
 80061fc:	075a      	lsls	r2, r3, #29
 80061fe:	d505      	bpl.n	800620c <__sflush_r+0x44>
 8006200:	6863      	ldr	r3, [r4, #4]
 8006202:	1ac0      	subs	r0, r0, r3
 8006204:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006206:	b10b      	cbz	r3, 800620c <__sflush_r+0x44>
 8006208:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800620a:	1ac0      	subs	r0, r0, r3
 800620c:	2300      	movs	r3, #0
 800620e:	4602      	mov	r2, r0
 8006210:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006212:	4628      	mov	r0, r5
 8006214:	6a21      	ldr	r1, [r4, #32]
 8006216:	47b0      	blx	r6
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	d106      	bne.n	800622c <__sflush_r+0x64>
 800621e:	6829      	ldr	r1, [r5, #0]
 8006220:	291d      	cmp	r1, #29
 8006222:	d82b      	bhi.n	800627c <__sflush_r+0xb4>
 8006224:	4a28      	ldr	r2, [pc, #160]	; (80062c8 <__sflush_r+0x100>)
 8006226:	410a      	asrs	r2, r1
 8006228:	07d6      	lsls	r6, r2, #31
 800622a:	d427      	bmi.n	800627c <__sflush_r+0xb4>
 800622c:	2200      	movs	r2, #0
 800622e:	6062      	str	r2, [r4, #4]
 8006230:	6922      	ldr	r2, [r4, #16]
 8006232:	04d9      	lsls	r1, r3, #19
 8006234:	6022      	str	r2, [r4, #0]
 8006236:	d504      	bpl.n	8006242 <__sflush_r+0x7a>
 8006238:	1c42      	adds	r2, r0, #1
 800623a:	d101      	bne.n	8006240 <__sflush_r+0x78>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	b903      	cbnz	r3, 8006242 <__sflush_r+0x7a>
 8006240:	6560      	str	r0, [r4, #84]	; 0x54
 8006242:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006244:	602f      	str	r7, [r5, #0]
 8006246:	2900      	cmp	r1, #0
 8006248:	d0ca      	beq.n	80061e0 <__sflush_r+0x18>
 800624a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800624e:	4299      	cmp	r1, r3
 8006250:	d002      	beq.n	8006258 <__sflush_r+0x90>
 8006252:	4628      	mov	r0, r5
 8006254:	f7ff f9ec 	bl	8005630 <_free_r>
 8006258:	2000      	movs	r0, #0
 800625a:	6360      	str	r0, [r4, #52]	; 0x34
 800625c:	e7c1      	b.n	80061e2 <__sflush_r+0x1a>
 800625e:	2301      	movs	r3, #1
 8006260:	4628      	mov	r0, r5
 8006262:	47b0      	blx	r6
 8006264:	1c41      	adds	r1, r0, #1
 8006266:	d1c8      	bne.n	80061fa <__sflush_r+0x32>
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0c5      	beq.n	80061fa <__sflush_r+0x32>
 800626e:	2b1d      	cmp	r3, #29
 8006270:	d001      	beq.n	8006276 <__sflush_r+0xae>
 8006272:	2b16      	cmp	r3, #22
 8006274:	d101      	bne.n	800627a <__sflush_r+0xb2>
 8006276:	602f      	str	r7, [r5, #0]
 8006278:	e7b2      	b.n	80061e0 <__sflush_r+0x18>
 800627a:	89a3      	ldrh	r3, [r4, #12]
 800627c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006280:	81a3      	strh	r3, [r4, #12]
 8006282:	e7ae      	b.n	80061e2 <__sflush_r+0x1a>
 8006284:	690f      	ldr	r7, [r1, #16]
 8006286:	2f00      	cmp	r7, #0
 8006288:	d0aa      	beq.n	80061e0 <__sflush_r+0x18>
 800628a:	0793      	lsls	r3, r2, #30
 800628c:	bf18      	it	ne
 800628e:	2300      	movne	r3, #0
 8006290:	680e      	ldr	r6, [r1, #0]
 8006292:	bf08      	it	eq
 8006294:	694b      	ldreq	r3, [r1, #20]
 8006296:	1bf6      	subs	r6, r6, r7
 8006298:	600f      	str	r7, [r1, #0]
 800629a:	608b      	str	r3, [r1, #8]
 800629c:	2e00      	cmp	r6, #0
 800629e:	dd9f      	ble.n	80061e0 <__sflush_r+0x18>
 80062a0:	4633      	mov	r3, r6
 80062a2:	463a      	mov	r2, r7
 80062a4:	4628      	mov	r0, r5
 80062a6:	6a21      	ldr	r1, [r4, #32]
 80062a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80062ac:	47e0      	blx	ip
 80062ae:	2800      	cmp	r0, #0
 80062b0:	dc06      	bgt.n	80062c0 <__sflush_r+0xf8>
 80062b2:	89a3      	ldrh	r3, [r4, #12]
 80062b4:	f04f 30ff 	mov.w	r0, #4294967295
 80062b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062bc:	81a3      	strh	r3, [r4, #12]
 80062be:	e790      	b.n	80061e2 <__sflush_r+0x1a>
 80062c0:	4407      	add	r7, r0
 80062c2:	1a36      	subs	r6, r6, r0
 80062c4:	e7ea      	b.n	800629c <__sflush_r+0xd4>
 80062c6:	bf00      	nop
 80062c8:	dfbffffe 	.word	0xdfbffffe

080062cc <_fflush_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	690b      	ldr	r3, [r1, #16]
 80062d0:	4605      	mov	r5, r0
 80062d2:	460c      	mov	r4, r1
 80062d4:	b913      	cbnz	r3, 80062dc <_fflush_r+0x10>
 80062d6:	2500      	movs	r5, #0
 80062d8:	4628      	mov	r0, r5
 80062da:	bd38      	pop	{r3, r4, r5, pc}
 80062dc:	b118      	cbz	r0, 80062e6 <_fflush_r+0x1a>
 80062de:	6a03      	ldr	r3, [r0, #32]
 80062e0:	b90b      	cbnz	r3, 80062e6 <_fflush_r+0x1a>
 80062e2:	f7fe fa11 	bl	8004708 <__sinit>
 80062e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0f3      	beq.n	80062d6 <_fflush_r+0xa>
 80062ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062f0:	07d0      	lsls	r0, r2, #31
 80062f2:	d404      	bmi.n	80062fe <_fflush_r+0x32>
 80062f4:	0599      	lsls	r1, r3, #22
 80062f6:	d402      	bmi.n	80062fe <_fflush_r+0x32>
 80062f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062fa:	f7fe fb1c 	bl	8004936 <__retarget_lock_acquire_recursive>
 80062fe:	4628      	mov	r0, r5
 8006300:	4621      	mov	r1, r4
 8006302:	f7ff ff61 	bl	80061c8 <__sflush_r>
 8006306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006308:	4605      	mov	r5, r0
 800630a:	07da      	lsls	r2, r3, #31
 800630c:	d4e4      	bmi.n	80062d8 <_fflush_r+0xc>
 800630e:	89a3      	ldrh	r3, [r4, #12]
 8006310:	059b      	lsls	r3, r3, #22
 8006312:	d4e1      	bmi.n	80062d8 <_fflush_r+0xc>
 8006314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006316:	f7fe fb0f 	bl	8004938 <__retarget_lock_release_recursive>
 800631a:	e7dd      	b.n	80062d8 <_fflush_r+0xc>

0800631c <memmove>:
 800631c:	4288      	cmp	r0, r1
 800631e:	b510      	push	{r4, lr}
 8006320:	eb01 0402 	add.w	r4, r1, r2
 8006324:	d902      	bls.n	800632c <memmove+0x10>
 8006326:	4284      	cmp	r4, r0
 8006328:	4623      	mov	r3, r4
 800632a:	d807      	bhi.n	800633c <memmove+0x20>
 800632c:	1e43      	subs	r3, r0, #1
 800632e:	42a1      	cmp	r1, r4
 8006330:	d008      	beq.n	8006344 <memmove+0x28>
 8006332:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006336:	f803 2f01 	strb.w	r2, [r3, #1]!
 800633a:	e7f8      	b.n	800632e <memmove+0x12>
 800633c:	4601      	mov	r1, r0
 800633e:	4402      	add	r2, r0
 8006340:	428a      	cmp	r2, r1
 8006342:	d100      	bne.n	8006346 <memmove+0x2a>
 8006344:	bd10      	pop	{r4, pc}
 8006346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800634a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800634e:	e7f7      	b.n	8006340 <memmove+0x24>

08006350 <_sbrk_r>:
 8006350:	b538      	push	{r3, r4, r5, lr}
 8006352:	2300      	movs	r3, #0
 8006354:	4d05      	ldr	r5, [pc, #20]	; (800636c <_sbrk_r+0x1c>)
 8006356:	4604      	mov	r4, r0
 8006358:	4608      	mov	r0, r1
 800635a:	602b      	str	r3, [r5, #0]
 800635c:	f7fa fede 	bl	800111c <_sbrk>
 8006360:	1c43      	adds	r3, r0, #1
 8006362:	d102      	bne.n	800636a <_sbrk_r+0x1a>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	b103      	cbz	r3, 800636a <_sbrk_r+0x1a>
 8006368:	6023      	str	r3, [r4, #0]
 800636a:	bd38      	pop	{r3, r4, r5, pc}
 800636c:	200004f8 	.word	0x200004f8

08006370 <memcpy>:
 8006370:	440a      	add	r2, r1
 8006372:	4291      	cmp	r1, r2
 8006374:	f100 33ff 	add.w	r3, r0, #4294967295
 8006378:	d100      	bne.n	800637c <memcpy+0xc>
 800637a:	4770      	bx	lr
 800637c:	b510      	push	{r4, lr}
 800637e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006382:	4291      	cmp	r1, r2
 8006384:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006388:	d1f9      	bne.n	800637e <memcpy+0xe>
 800638a:	bd10      	pop	{r4, pc}

0800638c <__assert_func>:
 800638c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800638e:	4614      	mov	r4, r2
 8006390:	461a      	mov	r2, r3
 8006392:	4b09      	ldr	r3, [pc, #36]	; (80063b8 <__assert_func+0x2c>)
 8006394:	4605      	mov	r5, r0
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68d8      	ldr	r0, [r3, #12]
 800639a:	b14c      	cbz	r4, 80063b0 <__assert_func+0x24>
 800639c:	4b07      	ldr	r3, [pc, #28]	; (80063bc <__assert_func+0x30>)
 800639e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063a2:	9100      	str	r1, [sp, #0]
 80063a4:	462b      	mov	r3, r5
 80063a6:	4906      	ldr	r1, [pc, #24]	; (80063c0 <__assert_func+0x34>)
 80063a8:	f000 f870 	bl	800648c <fiprintf>
 80063ac:	f000 f880 	bl	80064b0 <abort>
 80063b0:	4b04      	ldr	r3, [pc, #16]	; (80063c4 <__assert_func+0x38>)
 80063b2:	461c      	mov	r4, r3
 80063b4:	e7f3      	b.n	800639e <__assert_func+0x12>
 80063b6:	bf00      	nop
 80063b8:	20000164 	.word	0x20000164
 80063bc:	0800728f 	.word	0x0800728f
 80063c0:	0800729c 	.word	0x0800729c
 80063c4:	080072ca 	.word	0x080072ca

080063c8 <_calloc_r>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	fba1 5402 	umull	r5, r4, r1, r2
 80063ce:	b934      	cbnz	r4, 80063de <_calloc_r+0x16>
 80063d0:	4629      	mov	r1, r5
 80063d2:	f7ff f99d 	bl	8005710 <_malloc_r>
 80063d6:	4606      	mov	r6, r0
 80063d8:	b928      	cbnz	r0, 80063e6 <_calloc_r+0x1e>
 80063da:	4630      	mov	r0, r6
 80063dc:	bd70      	pop	{r4, r5, r6, pc}
 80063de:	220c      	movs	r2, #12
 80063e0:	2600      	movs	r6, #0
 80063e2:	6002      	str	r2, [r0, #0]
 80063e4:	e7f9      	b.n	80063da <_calloc_r+0x12>
 80063e6:	462a      	mov	r2, r5
 80063e8:	4621      	mov	r1, r4
 80063ea:	f7fe fa26 	bl	800483a <memset>
 80063ee:	e7f4      	b.n	80063da <_calloc_r+0x12>

080063f0 <__ascii_mbtowc>:
 80063f0:	b082      	sub	sp, #8
 80063f2:	b901      	cbnz	r1, 80063f6 <__ascii_mbtowc+0x6>
 80063f4:	a901      	add	r1, sp, #4
 80063f6:	b142      	cbz	r2, 800640a <__ascii_mbtowc+0x1a>
 80063f8:	b14b      	cbz	r3, 800640e <__ascii_mbtowc+0x1e>
 80063fa:	7813      	ldrb	r3, [r2, #0]
 80063fc:	600b      	str	r3, [r1, #0]
 80063fe:	7812      	ldrb	r2, [r2, #0]
 8006400:	1e10      	subs	r0, r2, #0
 8006402:	bf18      	it	ne
 8006404:	2001      	movne	r0, #1
 8006406:	b002      	add	sp, #8
 8006408:	4770      	bx	lr
 800640a:	4610      	mov	r0, r2
 800640c:	e7fb      	b.n	8006406 <__ascii_mbtowc+0x16>
 800640e:	f06f 0001 	mvn.w	r0, #1
 8006412:	e7f8      	b.n	8006406 <__ascii_mbtowc+0x16>

08006414 <_realloc_r>:
 8006414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006418:	4680      	mov	r8, r0
 800641a:	4614      	mov	r4, r2
 800641c:	460e      	mov	r6, r1
 800641e:	b921      	cbnz	r1, 800642a <_realloc_r+0x16>
 8006420:	4611      	mov	r1, r2
 8006422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006426:	f7ff b973 	b.w	8005710 <_malloc_r>
 800642a:	b92a      	cbnz	r2, 8006438 <_realloc_r+0x24>
 800642c:	f7ff f900 	bl	8005630 <_free_r>
 8006430:	4625      	mov	r5, r4
 8006432:	4628      	mov	r0, r5
 8006434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006438:	f000 f841 	bl	80064be <_malloc_usable_size_r>
 800643c:	4284      	cmp	r4, r0
 800643e:	4607      	mov	r7, r0
 8006440:	d802      	bhi.n	8006448 <_realloc_r+0x34>
 8006442:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006446:	d812      	bhi.n	800646e <_realloc_r+0x5a>
 8006448:	4621      	mov	r1, r4
 800644a:	4640      	mov	r0, r8
 800644c:	f7ff f960 	bl	8005710 <_malloc_r>
 8006450:	4605      	mov	r5, r0
 8006452:	2800      	cmp	r0, #0
 8006454:	d0ed      	beq.n	8006432 <_realloc_r+0x1e>
 8006456:	42bc      	cmp	r4, r7
 8006458:	4622      	mov	r2, r4
 800645a:	4631      	mov	r1, r6
 800645c:	bf28      	it	cs
 800645e:	463a      	movcs	r2, r7
 8006460:	f7ff ff86 	bl	8006370 <memcpy>
 8006464:	4631      	mov	r1, r6
 8006466:	4640      	mov	r0, r8
 8006468:	f7ff f8e2 	bl	8005630 <_free_r>
 800646c:	e7e1      	b.n	8006432 <_realloc_r+0x1e>
 800646e:	4635      	mov	r5, r6
 8006470:	e7df      	b.n	8006432 <_realloc_r+0x1e>

08006472 <__ascii_wctomb>:
 8006472:	4603      	mov	r3, r0
 8006474:	4608      	mov	r0, r1
 8006476:	b141      	cbz	r1, 800648a <__ascii_wctomb+0x18>
 8006478:	2aff      	cmp	r2, #255	; 0xff
 800647a:	d904      	bls.n	8006486 <__ascii_wctomb+0x14>
 800647c:	228a      	movs	r2, #138	; 0x8a
 800647e:	f04f 30ff 	mov.w	r0, #4294967295
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	4770      	bx	lr
 8006486:	2001      	movs	r0, #1
 8006488:	700a      	strb	r2, [r1, #0]
 800648a:	4770      	bx	lr

0800648c <fiprintf>:
 800648c:	b40e      	push	{r1, r2, r3}
 800648e:	b503      	push	{r0, r1, lr}
 8006490:	4601      	mov	r1, r0
 8006492:	ab03      	add	r3, sp, #12
 8006494:	4805      	ldr	r0, [pc, #20]	; (80064ac <fiprintf+0x20>)
 8006496:	f853 2b04 	ldr.w	r2, [r3], #4
 800649a:	6800      	ldr	r0, [r0, #0]
 800649c:	9301      	str	r3, [sp, #4]
 800649e:	f000 f83d 	bl	800651c <_vfiprintf_r>
 80064a2:	b002      	add	sp, #8
 80064a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80064a8:	b003      	add	sp, #12
 80064aa:	4770      	bx	lr
 80064ac:	20000164 	.word	0x20000164

080064b0 <abort>:
 80064b0:	2006      	movs	r0, #6
 80064b2:	b508      	push	{r3, lr}
 80064b4:	f000 fa0a 	bl	80068cc <raise>
 80064b8:	2001      	movs	r0, #1
 80064ba:	f7fa fdbb 	bl	8001034 <_exit>

080064be <_malloc_usable_size_r>:
 80064be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064c2:	1f18      	subs	r0, r3, #4
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	bfbc      	itt	lt
 80064c8:	580b      	ldrlt	r3, [r1, r0]
 80064ca:	18c0      	addlt	r0, r0, r3
 80064cc:	4770      	bx	lr

080064ce <__sfputc_r>:
 80064ce:	6893      	ldr	r3, [r2, #8]
 80064d0:	b410      	push	{r4}
 80064d2:	3b01      	subs	r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	6093      	str	r3, [r2, #8]
 80064d8:	da07      	bge.n	80064ea <__sfputc_r+0x1c>
 80064da:	6994      	ldr	r4, [r2, #24]
 80064dc:	42a3      	cmp	r3, r4
 80064de:	db01      	blt.n	80064e4 <__sfputc_r+0x16>
 80064e0:	290a      	cmp	r1, #10
 80064e2:	d102      	bne.n	80064ea <__sfputc_r+0x1c>
 80064e4:	bc10      	pop	{r4}
 80064e6:	f000 b933 	b.w	8006750 <__swbuf_r>
 80064ea:	6813      	ldr	r3, [r2, #0]
 80064ec:	1c58      	adds	r0, r3, #1
 80064ee:	6010      	str	r0, [r2, #0]
 80064f0:	7019      	strb	r1, [r3, #0]
 80064f2:	4608      	mov	r0, r1
 80064f4:	bc10      	pop	{r4}
 80064f6:	4770      	bx	lr

080064f8 <__sfputs_r>:
 80064f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fa:	4606      	mov	r6, r0
 80064fc:	460f      	mov	r7, r1
 80064fe:	4614      	mov	r4, r2
 8006500:	18d5      	adds	r5, r2, r3
 8006502:	42ac      	cmp	r4, r5
 8006504:	d101      	bne.n	800650a <__sfputs_r+0x12>
 8006506:	2000      	movs	r0, #0
 8006508:	e007      	b.n	800651a <__sfputs_r+0x22>
 800650a:	463a      	mov	r2, r7
 800650c:	4630      	mov	r0, r6
 800650e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006512:	f7ff ffdc 	bl	80064ce <__sfputc_r>
 8006516:	1c43      	adds	r3, r0, #1
 8006518:	d1f3      	bne.n	8006502 <__sfputs_r+0xa>
 800651a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800651c <_vfiprintf_r>:
 800651c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006520:	460d      	mov	r5, r1
 8006522:	4614      	mov	r4, r2
 8006524:	4698      	mov	r8, r3
 8006526:	4606      	mov	r6, r0
 8006528:	b09d      	sub	sp, #116	; 0x74
 800652a:	b118      	cbz	r0, 8006534 <_vfiprintf_r+0x18>
 800652c:	6a03      	ldr	r3, [r0, #32]
 800652e:	b90b      	cbnz	r3, 8006534 <_vfiprintf_r+0x18>
 8006530:	f7fe f8ea 	bl	8004708 <__sinit>
 8006534:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006536:	07d9      	lsls	r1, r3, #31
 8006538:	d405      	bmi.n	8006546 <_vfiprintf_r+0x2a>
 800653a:	89ab      	ldrh	r3, [r5, #12]
 800653c:	059a      	lsls	r2, r3, #22
 800653e:	d402      	bmi.n	8006546 <_vfiprintf_r+0x2a>
 8006540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006542:	f7fe f9f8 	bl	8004936 <__retarget_lock_acquire_recursive>
 8006546:	89ab      	ldrh	r3, [r5, #12]
 8006548:	071b      	lsls	r3, r3, #28
 800654a:	d501      	bpl.n	8006550 <_vfiprintf_r+0x34>
 800654c:	692b      	ldr	r3, [r5, #16]
 800654e:	b99b      	cbnz	r3, 8006578 <_vfiprintf_r+0x5c>
 8006550:	4629      	mov	r1, r5
 8006552:	4630      	mov	r0, r6
 8006554:	f000 f93a 	bl	80067cc <__swsetup_r>
 8006558:	b170      	cbz	r0, 8006578 <_vfiprintf_r+0x5c>
 800655a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800655c:	07dc      	lsls	r4, r3, #31
 800655e:	d504      	bpl.n	800656a <_vfiprintf_r+0x4e>
 8006560:	f04f 30ff 	mov.w	r0, #4294967295
 8006564:	b01d      	add	sp, #116	; 0x74
 8006566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800656a:	89ab      	ldrh	r3, [r5, #12]
 800656c:	0598      	lsls	r0, r3, #22
 800656e:	d4f7      	bmi.n	8006560 <_vfiprintf_r+0x44>
 8006570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006572:	f7fe f9e1 	bl	8004938 <__retarget_lock_release_recursive>
 8006576:	e7f3      	b.n	8006560 <_vfiprintf_r+0x44>
 8006578:	2300      	movs	r3, #0
 800657a:	9309      	str	r3, [sp, #36]	; 0x24
 800657c:	2320      	movs	r3, #32
 800657e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006582:	2330      	movs	r3, #48	; 0x30
 8006584:	f04f 0901 	mov.w	r9, #1
 8006588:	f8cd 800c 	str.w	r8, [sp, #12]
 800658c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800673c <_vfiprintf_r+0x220>
 8006590:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006594:	4623      	mov	r3, r4
 8006596:	469a      	mov	sl, r3
 8006598:	f813 2b01 	ldrb.w	r2, [r3], #1
 800659c:	b10a      	cbz	r2, 80065a2 <_vfiprintf_r+0x86>
 800659e:	2a25      	cmp	r2, #37	; 0x25
 80065a0:	d1f9      	bne.n	8006596 <_vfiprintf_r+0x7a>
 80065a2:	ebba 0b04 	subs.w	fp, sl, r4
 80065a6:	d00b      	beq.n	80065c0 <_vfiprintf_r+0xa4>
 80065a8:	465b      	mov	r3, fp
 80065aa:	4622      	mov	r2, r4
 80065ac:	4629      	mov	r1, r5
 80065ae:	4630      	mov	r0, r6
 80065b0:	f7ff ffa2 	bl	80064f8 <__sfputs_r>
 80065b4:	3001      	adds	r0, #1
 80065b6:	f000 80a9 	beq.w	800670c <_vfiprintf_r+0x1f0>
 80065ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065bc:	445a      	add	r2, fp
 80065be:	9209      	str	r2, [sp, #36]	; 0x24
 80065c0:	f89a 3000 	ldrb.w	r3, [sl]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 80a1 	beq.w	800670c <_vfiprintf_r+0x1f0>
 80065ca:	2300      	movs	r3, #0
 80065cc:	f04f 32ff 	mov.w	r2, #4294967295
 80065d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065d4:	f10a 0a01 	add.w	sl, sl, #1
 80065d8:	9304      	str	r3, [sp, #16]
 80065da:	9307      	str	r3, [sp, #28]
 80065dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065e0:	931a      	str	r3, [sp, #104]	; 0x68
 80065e2:	4654      	mov	r4, sl
 80065e4:	2205      	movs	r2, #5
 80065e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ea:	4854      	ldr	r0, [pc, #336]	; (800673c <_vfiprintf_r+0x220>)
 80065ec:	f7fe f9a5 	bl	800493a <memchr>
 80065f0:	9a04      	ldr	r2, [sp, #16]
 80065f2:	b9d8      	cbnz	r0, 800662c <_vfiprintf_r+0x110>
 80065f4:	06d1      	lsls	r1, r2, #27
 80065f6:	bf44      	itt	mi
 80065f8:	2320      	movmi	r3, #32
 80065fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065fe:	0713      	lsls	r3, r2, #28
 8006600:	bf44      	itt	mi
 8006602:	232b      	movmi	r3, #43	; 0x2b
 8006604:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006608:	f89a 3000 	ldrb.w	r3, [sl]
 800660c:	2b2a      	cmp	r3, #42	; 0x2a
 800660e:	d015      	beq.n	800663c <_vfiprintf_r+0x120>
 8006610:	4654      	mov	r4, sl
 8006612:	2000      	movs	r0, #0
 8006614:	f04f 0c0a 	mov.w	ip, #10
 8006618:	9a07      	ldr	r2, [sp, #28]
 800661a:	4621      	mov	r1, r4
 800661c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006620:	3b30      	subs	r3, #48	; 0x30
 8006622:	2b09      	cmp	r3, #9
 8006624:	d94d      	bls.n	80066c2 <_vfiprintf_r+0x1a6>
 8006626:	b1b0      	cbz	r0, 8006656 <_vfiprintf_r+0x13a>
 8006628:	9207      	str	r2, [sp, #28]
 800662a:	e014      	b.n	8006656 <_vfiprintf_r+0x13a>
 800662c:	eba0 0308 	sub.w	r3, r0, r8
 8006630:	fa09 f303 	lsl.w	r3, r9, r3
 8006634:	4313      	orrs	r3, r2
 8006636:	46a2      	mov	sl, r4
 8006638:	9304      	str	r3, [sp, #16]
 800663a:	e7d2      	b.n	80065e2 <_vfiprintf_r+0xc6>
 800663c:	9b03      	ldr	r3, [sp, #12]
 800663e:	1d19      	adds	r1, r3, #4
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	9103      	str	r1, [sp, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	bfbb      	ittet	lt
 8006648:	425b      	neglt	r3, r3
 800664a:	f042 0202 	orrlt.w	r2, r2, #2
 800664e:	9307      	strge	r3, [sp, #28]
 8006650:	9307      	strlt	r3, [sp, #28]
 8006652:	bfb8      	it	lt
 8006654:	9204      	strlt	r2, [sp, #16]
 8006656:	7823      	ldrb	r3, [r4, #0]
 8006658:	2b2e      	cmp	r3, #46	; 0x2e
 800665a:	d10c      	bne.n	8006676 <_vfiprintf_r+0x15a>
 800665c:	7863      	ldrb	r3, [r4, #1]
 800665e:	2b2a      	cmp	r3, #42	; 0x2a
 8006660:	d134      	bne.n	80066cc <_vfiprintf_r+0x1b0>
 8006662:	9b03      	ldr	r3, [sp, #12]
 8006664:	3402      	adds	r4, #2
 8006666:	1d1a      	adds	r2, r3, #4
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	9203      	str	r2, [sp, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	bfb8      	it	lt
 8006670:	f04f 33ff 	movlt.w	r3, #4294967295
 8006674:	9305      	str	r3, [sp, #20]
 8006676:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006740 <_vfiprintf_r+0x224>
 800667a:	2203      	movs	r2, #3
 800667c:	4650      	mov	r0, sl
 800667e:	7821      	ldrb	r1, [r4, #0]
 8006680:	f7fe f95b 	bl	800493a <memchr>
 8006684:	b138      	cbz	r0, 8006696 <_vfiprintf_r+0x17a>
 8006686:	2240      	movs	r2, #64	; 0x40
 8006688:	9b04      	ldr	r3, [sp, #16]
 800668a:	eba0 000a 	sub.w	r0, r0, sl
 800668e:	4082      	lsls	r2, r0
 8006690:	4313      	orrs	r3, r2
 8006692:	3401      	adds	r4, #1
 8006694:	9304      	str	r3, [sp, #16]
 8006696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800669a:	2206      	movs	r2, #6
 800669c:	4829      	ldr	r0, [pc, #164]	; (8006744 <_vfiprintf_r+0x228>)
 800669e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066a2:	f7fe f94a 	bl	800493a <memchr>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d03f      	beq.n	800672a <_vfiprintf_r+0x20e>
 80066aa:	4b27      	ldr	r3, [pc, #156]	; (8006748 <_vfiprintf_r+0x22c>)
 80066ac:	bb1b      	cbnz	r3, 80066f6 <_vfiprintf_r+0x1da>
 80066ae:	9b03      	ldr	r3, [sp, #12]
 80066b0:	3307      	adds	r3, #7
 80066b2:	f023 0307 	bic.w	r3, r3, #7
 80066b6:	3308      	adds	r3, #8
 80066b8:	9303      	str	r3, [sp, #12]
 80066ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066bc:	443b      	add	r3, r7
 80066be:	9309      	str	r3, [sp, #36]	; 0x24
 80066c0:	e768      	b.n	8006594 <_vfiprintf_r+0x78>
 80066c2:	460c      	mov	r4, r1
 80066c4:	2001      	movs	r0, #1
 80066c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80066ca:	e7a6      	b.n	800661a <_vfiprintf_r+0xfe>
 80066cc:	2300      	movs	r3, #0
 80066ce:	f04f 0c0a 	mov.w	ip, #10
 80066d2:	4619      	mov	r1, r3
 80066d4:	3401      	adds	r4, #1
 80066d6:	9305      	str	r3, [sp, #20]
 80066d8:	4620      	mov	r0, r4
 80066da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066de:	3a30      	subs	r2, #48	; 0x30
 80066e0:	2a09      	cmp	r2, #9
 80066e2:	d903      	bls.n	80066ec <_vfiprintf_r+0x1d0>
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d0c6      	beq.n	8006676 <_vfiprintf_r+0x15a>
 80066e8:	9105      	str	r1, [sp, #20]
 80066ea:	e7c4      	b.n	8006676 <_vfiprintf_r+0x15a>
 80066ec:	4604      	mov	r4, r0
 80066ee:	2301      	movs	r3, #1
 80066f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80066f4:	e7f0      	b.n	80066d8 <_vfiprintf_r+0x1bc>
 80066f6:	ab03      	add	r3, sp, #12
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	462a      	mov	r2, r5
 80066fc:	4630      	mov	r0, r6
 80066fe:	4b13      	ldr	r3, [pc, #76]	; (800674c <_vfiprintf_r+0x230>)
 8006700:	a904      	add	r1, sp, #16
 8006702:	f7fd fbb3 	bl	8003e6c <_printf_float>
 8006706:	4607      	mov	r7, r0
 8006708:	1c78      	adds	r0, r7, #1
 800670a:	d1d6      	bne.n	80066ba <_vfiprintf_r+0x19e>
 800670c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800670e:	07d9      	lsls	r1, r3, #31
 8006710:	d405      	bmi.n	800671e <_vfiprintf_r+0x202>
 8006712:	89ab      	ldrh	r3, [r5, #12]
 8006714:	059a      	lsls	r2, r3, #22
 8006716:	d402      	bmi.n	800671e <_vfiprintf_r+0x202>
 8006718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800671a:	f7fe f90d 	bl	8004938 <__retarget_lock_release_recursive>
 800671e:	89ab      	ldrh	r3, [r5, #12]
 8006720:	065b      	lsls	r3, r3, #25
 8006722:	f53f af1d 	bmi.w	8006560 <_vfiprintf_r+0x44>
 8006726:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006728:	e71c      	b.n	8006564 <_vfiprintf_r+0x48>
 800672a:	ab03      	add	r3, sp, #12
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	462a      	mov	r2, r5
 8006730:	4630      	mov	r0, r6
 8006732:	4b06      	ldr	r3, [pc, #24]	; (800674c <_vfiprintf_r+0x230>)
 8006734:	a904      	add	r1, sp, #16
 8006736:	f7fd fe39 	bl	80043ac <_printf_i>
 800673a:	e7e4      	b.n	8006706 <_vfiprintf_r+0x1ea>
 800673c:	08007274 	.word	0x08007274
 8006740:	0800727a 	.word	0x0800727a
 8006744:	0800727e 	.word	0x0800727e
 8006748:	08003e6d 	.word	0x08003e6d
 800674c:	080064f9 	.word	0x080064f9

08006750 <__swbuf_r>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	460e      	mov	r6, r1
 8006754:	4614      	mov	r4, r2
 8006756:	4605      	mov	r5, r0
 8006758:	b118      	cbz	r0, 8006762 <__swbuf_r+0x12>
 800675a:	6a03      	ldr	r3, [r0, #32]
 800675c:	b90b      	cbnz	r3, 8006762 <__swbuf_r+0x12>
 800675e:	f7fd ffd3 	bl	8004708 <__sinit>
 8006762:	69a3      	ldr	r3, [r4, #24]
 8006764:	60a3      	str	r3, [r4, #8]
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	071a      	lsls	r2, r3, #28
 800676a:	d525      	bpl.n	80067b8 <__swbuf_r+0x68>
 800676c:	6923      	ldr	r3, [r4, #16]
 800676e:	b31b      	cbz	r3, 80067b8 <__swbuf_r+0x68>
 8006770:	6823      	ldr	r3, [r4, #0]
 8006772:	6922      	ldr	r2, [r4, #16]
 8006774:	b2f6      	uxtb	r6, r6
 8006776:	1a98      	subs	r0, r3, r2
 8006778:	6963      	ldr	r3, [r4, #20]
 800677a:	4637      	mov	r7, r6
 800677c:	4283      	cmp	r3, r0
 800677e:	dc04      	bgt.n	800678a <__swbuf_r+0x3a>
 8006780:	4621      	mov	r1, r4
 8006782:	4628      	mov	r0, r5
 8006784:	f7ff fda2 	bl	80062cc <_fflush_r>
 8006788:	b9e0      	cbnz	r0, 80067c4 <__swbuf_r+0x74>
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	3b01      	subs	r3, #1
 800678e:	60a3      	str	r3, [r4, #8]
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	6022      	str	r2, [r4, #0]
 8006796:	701e      	strb	r6, [r3, #0]
 8006798:	6962      	ldr	r2, [r4, #20]
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	429a      	cmp	r2, r3
 800679e:	d004      	beq.n	80067aa <__swbuf_r+0x5a>
 80067a0:	89a3      	ldrh	r3, [r4, #12]
 80067a2:	07db      	lsls	r3, r3, #31
 80067a4:	d506      	bpl.n	80067b4 <__swbuf_r+0x64>
 80067a6:	2e0a      	cmp	r6, #10
 80067a8:	d104      	bne.n	80067b4 <__swbuf_r+0x64>
 80067aa:	4621      	mov	r1, r4
 80067ac:	4628      	mov	r0, r5
 80067ae:	f7ff fd8d 	bl	80062cc <_fflush_r>
 80067b2:	b938      	cbnz	r0, 80067c4 <__swbuf_r+0x74>
 80067b4:	4638      	mov	r0, r7
 80067b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b8:	4621      	mov	r1, r4
 80067ba:	4628      	mov	r0, r5
 80067bc:	f000 f806 	bl	80067cc <__swsetup_r>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d0d5      	beq.n	8006770 <__swbuf_r+0x20>
 80067c4:	f04f 37ff 	mov.w	r7, #4294967295
 80067c8:	e7f4      	b.n	80067b4 <__swbuf_r+0x64>
	...

080067cc <__swsetup_r>:
 80067cc:	b538      	push	{r3, r4, r5, lr}
 80067ce:	4b2a      	ldr	r3, [pc, #168]	; (8006878 <__swsetup_r+0xac>)
 80067d0:	4605      	mov	r5, r0
 80067d2:	6818      	ldr	r0, [r3, #0]
 80067d4:	460c      	mov	r4, r1
 80067d6:	b118      	cbz	r0, 80067e0 <__swsetup_r+0x14>
 80067d8:	6a03      	ldr	r3, [r0, #32]
 80067da:	b90b      	cbnz	r3, 80067e0 <__swsetup_r+0x14>
 80067dc:	f7fd ff94 	bl	8004708 <__sinit>
 80067e0:	89a3      	ldrh	r3, [r4, #12]
 80067e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067e6:	0718      	lsls	r0, r3, #28
 80067e8:	d422      	bmi.n	8006830 <__swsetup_r+0x64>
 80067ea:	06d9      	lsls	r1, r3, #27
 80067ec:	d407      	bmi.n	80067fe <__swsetup_r+0x32>
 80067ee:	2309      	movs	r3, #9
 80067f0:	602b      	str	r3, [r5, #0]
 80067f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067f6:	f04f 30ff 	mov.w	r0, #4294967295
 80067fa:	81a3      	strh	r3, [r4, #12]
 80067fc:	e034      	b.n	8006868 <__swsetup_r+0x9c>
 80067fe:	0758      	lsls	r0, r3, #29
 8006800:	d512      	bpl.n	8006828 <__swsetup_r+0x5c>
 8006802:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006804:	b141      	cbz	r1, 8006818 <__swsetup_r+0x4c>
 8006806:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800680a:	4299      	cmp	r1, r3
 800680c:	d002      	beq.n	8006814 <__swsetup_r+0x48>
 800680e:	4628      	mov	r0, r5
 8006810:	f7fe ff0e 	bl	8005630 <_free_r>
 8006814:	2300      	movs	r3, #0
 8006816:	6363      	str	r3, [r4, #52]	; 0x34
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800681e:	81a3      	strh	r3, [r4, #12]
 8006820:	2300      	movs	r3, #0
 8006822:	6063      	str	r3, [r4, #4]
 8006824:	6923      	ldr	r3, [r4, #16]
 8006826:	6023      	str	r3, [r4, #0]
 8006828:	89a3      	ldrh	r3, [r4, #12]
 800682a:	f043 0308 	orr.w	r3, r3, #8
 800682e:	81a3      	strh	r3, [r4, #12]
 8006830:	6923      	ldr	r3, [r4, #16]
 8006832:	b94b      	cbnz	r3, 8006848 <__swsetup_r+0x7c>
 8006834:	89a3      	ldrh	r3, [r4, #12]
 8006836:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800683a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800683e:	d003      	beq.n	8006848 <__swsetup_r+0x7c>
 8006840:	4621      	mov	r1, r4
 8006842:	4628      	mov	r0, r5
 8006844:	f000 f883 	bl	800694e <__smakebuf_r>
 8006848:	89a0      	ldrh	r0, [r4, #12]
 800684a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800684e:	f010 0301 	ands.w	r3, r0, #1
 8006852:	d00a      	beq.n	800686a <__swsetup_r+0x9e>
 8006854:	2300      	movs	r3, #0
 8006856:	60a3      	str	r3, [r4, #8]
 8006858:	6963      	ldr	r3, [r4, #20]
 800685a:	425b      	negs	r3, r3
 800685c:	61a3      	str	r3, [r4, #24]
 800685e:	6923      	ldr	r3, [r4, #16]
 8006860:	b943      	cbnz	r3, 8006874 <__swsetup_r+0xa8>
 8006862:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006866:	d1c4      	bne.n	80067f2 <__swsetup_r+0x26>
 8006868:	bd38      	pop	{r3, r4, r5, pc}
 800686a:	0781      	lsls	r1, r0, #30
 800686c:	bf58      	it	pl
 800686e:	6963      	ldrpl	r3, [r4, #20]
 8006870:	60a3      	str	r3, [r4, #8]
 8006872:	e7f4      	b.n	800685e <__swsetup_r+0x92>
 8006874:	2000      	movs	r0, #0
 8006876:	e7f7      	b.n	8006868 <__swsetup_r+0x9c>
 8006878:	20000164 	.word	0x20000164

0800687c <_raise_r>:
 800687c:	291f      	cmp	r1, #31
 800687e:	b538      	push	{r3, r4, r5, lr}
 8006880:	4604      	mov	r4, r0
 8006882:	460d      	mov	r5, r1
 8006884:	d904      	bls.n	8006890 <_raise_r+0x14>
 8006886:	2316      	movs	r3, #22
 8006888:	6003      	str	r3, [r0, #0]
 800688a:	f04f 30ff 	mov.w	r0, #4294967295
 800688e:	bd38      	pop	{r3, r4, r5, pc}
 8006890:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006892:	b112      	cbz	r2, 800689a <_raise_r+0x1e>
 8006894:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006898:	b94b      	cbnz	r3, 80068ae <_raise_r+0x32>
 800689a:	4620      	mov	r0, r4
 800689c:	f000 f830 	bl	8006900 <_getpid_r>
 80068a0:	462a      	mov	r2, r5
 80068a2:	4601      	mov	r1, r0
 80068a4:	4620      	mov	r0, r4
 80068a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068aa:	f000 b817 	b.w	80068dc <_kill_r>
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d00a      	beq.n	80068c8 <_raise_r+0x4c>
 80068b2:	1c59      	adds	r1, r3, #1
 80068b4:	d103      	bne.n	80068be <_raise_r+0x42>
 80068b6:	2316      	movs	r3, #22
 80068b8:	6003      	str	r3, [r0, #0]
 80068ba:	2001      	movs	r0, #1
 80068bc:	e7e7      	b.n	800688e <_raise_r+0x12>
 80068be:	2400      	movs	r4, #0
 80068c0:	4628      	mov	r0, r5
 80068c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80068c6:	4798      	blx	r3
 80068c8:	2000      	movs	r0, #0
 80068ca:	e7e0      	b.n	800688e <_raise_r+0x12>

080068cc <raise>:
 80068cc:	4b02      	ldr	r3, [pc, #8]	; (80068d8 <raise+0xc>)
 80068ce:	4601      	mov	r1, r0
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	f7ff bfd3 	b.w	800687c <_raise_r>
 80068d6:	bf00      	nop
 80068d8:	20000164 	.word	0x20000164

080068dc <_kill_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	2300      	movs	r3, #0
 80068e0:	4d06      	ldr	r5, [pc, #24]	; (80068fc <_kill_r+0x20>)
 80068e2:	4604      	mov	r4, r0
 80068e4:	4608      	mov	r0, r1
 80068e6:	4611      	mov	r1, r2
 80068e8:	602b      	str	r3, [r5, #0]
 80068ea:	f7fa fb93 	bl	8001014 <_kill>
 80068ee:	1c43      	adds	r3, r0, #1
 80068f0:	d102      	bne.n	80068f8 <_kill_r+0x1c>
 80068f2:	682b      	ldr	r3, [r5, #0]
 80068f4:	b103      	cbz	r3, 80068f8 <_kill_r+0x1c>
 80068f6:	6023      	str	r3, [r4, #0]
 80068f8:	bd38      	pop	{r3, r4, r5, pc}
 80068fa:	bf00      	nop
 80068fc:	200004f8 	.word	0x200004f8

08006900 <_getpid_r>:
 8006900:	f7fa bb81 	b.w	8001006 <_getpid>

08006904 <__swhatbuf_r>:
 8006904:	b570      	push	{r4, r5, r6, lr}
 8006906:	460c      	mov	r4, r1
 8006908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800690c:	4615      	mov	r5, r2
 800690e:	2900      	cmp	r1, #0
 8006910:	461e      	mov	r6, r3
 8006912:	b096      	sub	sp, #88	; 0x58
 8006914:	da0c      	bge.n	8006930 <__swhatbuf_r+0x2c>
 8006916:	89a3      	ldrh	r3, [r4, #12]
 8006918:	2100      	movs	r1, #0
 800691a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800691e:	bf0c      	ite	eq
 8006920:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006924:	2340      	movne	r3, #64	; 0x40
 8006926:	2000      	movs	r0, #0
 8006928:	6031      	str	r1, [r6, #0]
 800692a:	602b      	str	r3, [r5, #0]
 800692c:	b016      	add	sp, #88	; 0x58
 800692e:	bd70      	pop	{r4, r5, r6, pc}
 8006930:	466a      	mov	r2, sp
 8006932:	f000 f849 	bl	80069c8 <_fstat_r>
 8006936:	2800      	cmp	r0, #0
 8006938:	dbed      	blt.n	8006916 <__swhatbuf_r+0x12>
 800693a:	9901      	ldr	r1, [sp, #4]
 800693c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006940:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006944:	4259      	negs	r1, r3
 8006946:	4159      	adcs	r1, r3
 8006948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800694c:	e7eb      	b.n	8006926 <__swhatbuf_r+0x22>

0800694e <__smakebuf_r>:
 800694e:	898b      	ldrh	r3, [r1, #12]
 8006950:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006952:	079d      	lsls	r5, r3, #30
 8006954:	4606      	mov	r6, r0
 8006956:	460c      	mov	r4, r1
 8006958:	d507      	bpl.n	800696a <__smakebuf_r+0x1c>
 800695a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800695e:	6023      	str	r3, [r4, #0]
 8006960:	6123      	str	r3, [r4, #16]
 8006962:	2301      	movs	r3, #1
 8006964:	6163      	str	r3, [r4, #20]
 8006966:	b002      	add	sp, #8
 8006968:	bd70      	pop	{r4, r5, r6, pc}
 800696a:	466a      	mov	r2, sp
 800696c:	ab01      	add	r3, sp, #4
 800696e:	f7ff ffc9 	bl	8006904 <__swhatbuf_r>
 8006972:	9900      	ldr	r1, [sp, #0]
 8006974:	4605      	mov	r5, r0
 8006976:	4630      	mov	r0, r6
 8006978:	f7fe feca 	bl	8005710 <_malloc_r>
 800697c:	b948      	cbnz	r0, 8006992 <__smakebuf_r+0x44>
 800697e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006982:	059a      	lsls	r2, r3, #22
 8006984:	d4ef      	bmi.n	8006966 <__smakebuf_r+0x18>
 8006986:	f023 0303 	bic.w	r3, r3, #3
 800698a:	f043 0302 	orr.w	r3, r3, #2
 800698e:	81a3      	strh	r3, [r4, #12]
 8006990:	e7e3      	b.n	800695a <__smakebuf_r+0xc>
 8006992:	89a3      	ldrh	r3, [r4, #12]
 8006994:	6020      	str	r0, [r4, #0]
 8006996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800699a:	81a3      	strh	r3, [r4, #12]
 800699c:	9b00      	ldr	r3, [sp, #0]
 800699e:	6120      	str	r0, [r4, #16]
 80069a0:	6163      	str	r3, [r4, #20]
 80069a2:	9b01      	ldr	r3, [sp, #4]
 80069a4:	b15b      	cbz	r3, 80069be <__smakebuf_r+0x70>
 80069a6:	4630      	mov	r0, r6
 80069a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069ac:	f000 f81e 	bl	80069ec <_isatty_r>
 80069b0:	b128      	cbz	r0, 80069be <__smakebuf_r+0x70>
 80069b2:	89a3      	ldrh	r3, [r4, #12]
 80069b4:	f023 0303 	bic.w	r3, r3, #3
 80069b8:	f043 0301 	orr.w	r3, r3, #1
 80069bc:	81a3      	strh	r3, [r4, #12]
 80069be:	89a3      	ldrh	r3, [r4, #12]
 80069c0:	431d      	orrs	r5, r3
 80069c2:	81a5      	strh	r5, [r4, #12]
 80069c4:	e7cf      	b.n	8006966 <__smakebuf_r+0x18>
	...

080069c8 <_fstat_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	2300      	movs	r3, #0
 80069cc:	4d06      	ldr	r5, [pc, #24]	; (80069e8 <_fstat_r+0x20>)
 80069ce:	4604      	mov	r4, r0
 80069d0:	4608      	mov	r0, r1
 80069d2:	4611      	mov	r1, r2
 80069d4:	602b      	str	r3, [r5, #0]
 80069d6:	f7fa fb7b 	bl	80010d0 <_fstat>
 80069da:	1c43      	adds	r3, r0, #1
 80069dc:	d102      	bne.n	80069e4 <_fstat_r+0x1c>
 80069de:	682b      	ldr	r3, [r5, #0]
 80069e0:	b103      	cbz	r3, 80069e4 <_fstat_r+0x1c>
 80069e2:	6023      	str	r3, [r4, #0]
 80069e4:	bd38      	pop	{r3, r4, r5, pc}
 80069e6:	bf00      	nop
 80069e8:	200004f8 	.word	0x200004f8

080069ec <_isatty_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	2300      	movs	r3, #0
 80069f0:	4d05      	ldr	r5, [pc, #20]	; (8006a08 <_isatty_r+0x1c>)
 80069f2:	4604      	mov	r4, r0
 80069f4:	4608      	mov	r0, r1
 80069f6:	602b      	str	r3, [r5, #0]
 80069f8:	f7fa fb79 	bl	80010ee <_isatty>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	d102      	bne.n	8006a06 <_isatty_r+0x1a>
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	b103      	cbz	r3, 8006a06 <_isatty_r+0x1a>
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	bd38      	pop	{r3, r4, r5, pc}
 8006a08:	200004f8 	.word	0x200004f8

08006a0c <_init>:
 8006a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0e:	bf00      	nop
 8006a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a12:	bc08      	pop	{r3}
 8006a14:	469e      	mov	lr, r3
 8006a16:	4770      	bx	lr

08006a18 <_fini>:
 8006a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1a:	bf00      	nop
 8006a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1e:	bc08      	pop	{r3}
 8006a20:	469e      	mov	lr, r3
 8006a22:	4770      	bx	lr
